// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DCProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DCProto_SaveRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SaveRoleData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SaveRoleData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_DeleteRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_DeleteRoleData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_DeleteRoleData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_LoadRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_LoadRoleData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_LoadRoleData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_CollectRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_CollectRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_CollectRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_AddAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_AddAccount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_AddAccount_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_AddRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_AddRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_AddRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_SaveSingleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SaveSingleRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SaveSingleRecord_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_HasName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_HasName_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_HasName_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_Login_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_Login_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_QueryRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_QueryRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_QueryRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_SendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SendMail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SendMail_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GetKeyGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GetKeyGift_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GetKeyGift_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_Recharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_Recharge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_Recharge_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_CostRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_CostRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_CostRecord_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_PlayerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_PlayerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_PlayerStatus_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_SaveChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SaveChat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SaveChat_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GodTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GodTarget_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GodTarget_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_LoadPlayerAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_LoadPlayerAtt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_LoadPlayerAtt_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_LoadFriendsFans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_LoadFriendsFans_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_LoadFriendsFans_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_ModifyFixedEventBit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_ModifyFixedEventBit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_ModifyFixedEventBit_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_ModifyGodRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_ModifyGodRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_ModifyGodRank_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GodRankRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GodRankRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DCProto_SaveGodRankInfoRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SaveGodRankInfoRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SaveGodRankInfoRecord_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_QueryGodRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_QueryGodRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_QueryGodRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_RandomRoles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_RandomRoles_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_RandomRoles_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_SendMailExceptRoles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SendMailExceptRoles_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SendMailExceptRoles_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_AddOutLineFriends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_AddOutLineFriends_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_AddOutLineFriends_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_LoadHireRoleDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_LoadHireRoleDate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_LoadHireRoleDate_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_QueryRoleFaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_QueryRoleFaction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_QueryRoleFaction_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_TencentBuyGoodsUrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_TencentBuyGoodsUrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_TencentBuyGoodsUrl_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_Cost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_Cost_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_Cost_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_FilterRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_FilterRecharge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_FilterRecharge_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_SetVIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SetVIP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SetVIP_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_CollectEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_CollectEquipment_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_CollectEquipment_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_SaveEquipmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SaveEquipmentData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SaveEquipmentData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_LoadEquipmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_LoadEquipmentData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_LoadEquipmentData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_DeleteEquipmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_DeleteEquipmentData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_DeleteEquipmentData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_QueryEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_QueryEquipment_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_QueryEquipment_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMOrder_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMOrder_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMSaveData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMSaveData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMLoadData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMLoadData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMLoadData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMPlayerQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMPlayerQuery_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMPlayerQuery_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMChatRecords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMChatRecords_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMChatRecords_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMRegistrCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMRegistrCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMRegistrCount_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMRoleCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMRoleCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMRoleCount_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMLevelStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMLevelStatistics_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMLevelStatistics_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMOpenGuide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMOpenGuide_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMOpenGuide_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DCProto_LoadAllDataFromGMDataTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_LoadAllDataFromGMDataTable_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_LoadAllDataFromGMDataTable_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_SaveGMDataTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SaveGMDataTable_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SaveGMDataTable_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMAddExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMAddExchange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMAddExchange_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMRekooRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMRekooRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMRekooRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_GMAddRekooRMB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_GMAddRekooRMB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_GMAddRekooRMB_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_LoadRekooRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_LoadRekooRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_LoadRekooRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_AddCodeCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_AddCodeCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_AddCodeCount_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InviteCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* DCProto_LoadInviteCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_LoadInviteCode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_LoadInviteCode_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_QueryGMAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_QueryGMAccount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_QueryGMAccount_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_RegistDeviceServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_RegistDeviceServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_RegistDeviceServer_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_FactionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_FactionData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_FactionData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_FactionLoadData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_FactionLoadData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_FactionLoadData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_FactionSaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_FactionSaveData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_FactionSaveData_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_FactionAddRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_FactionAddRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_FactionAddRecord_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_FactionDelRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_FactionDelRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_FactionDelRecord_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_FactionUpdateRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_FactionUpdateRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_FactionUpdateRecord_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_SysFactionMemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_SysFactionMemInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_SysFactionMemInfo_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_InitRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_InitRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_InitRank_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_PingPongAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_PingPongAward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_PingPongAward_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FactionPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* DCProto_FactionPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_FactionPower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_FactionPower_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DCProto_PingPongQiuBiTe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DCProto_PingPongQiuBiTe_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DCProto_PingPongQiuBiTe_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DCProto_2eproto() {
  protobuf_AddDesc_DCProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DCProto.proto");
  GOOGLE_CHECK(file != NULL);
  DCProto_SaveRoleData_descriptor_ = file->message_type(0);
  static const int DCProto_SaveRoleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveRoleData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveRoleData, info_),
  };
  DCProto_SaveRoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SaveRoleData_descriptor_,
      DCProto_SaveRoleData::default_instance_,
      DCProto_SaveRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveRoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveRoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SaveRoleData));
  DCProto_SaveRoleData_ID_descriptor_ = DCProto_SaveRoleData_descriptor_->enum_type(0);
  DCProto_DeleteRoleData_descriptor_ = file->message_type(1);
  static const int DCProto_DeleteRoleData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_DeleteRoleData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_DeleteRoleData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_DeleteRoleData, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_DeleteRoleData, platform_),
  };
  DCProto_DeleteRoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_DeleteRoleData_descriptor_,
      DCProto_DeleteRoleData::default_instance_,
      DCProto_DeleteRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_DeleteRoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_DeleteRoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_DeleteRoleData));
  DCProto_DeleteRoleData_ID_descriptor_ = DCProto_DeleteRoleData_descriptor_->enum_type(0);
  DCProto_LoadRoleData_descriptor_ = file->message_type(2);
  static const int DCProto_LoadRoleData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadRoleData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadRoleData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadRoleData, prevRole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadRoleData, platform_),
  };
  DCProto_LoadRoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_LoadRoleData_descriptor_,
      DCProto_LoadRoleData::default_instance_,
      DCProto_LoadRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadRoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadRoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_LoadRoleData));
  DCProto_LoadRoleData_ID_descriptor_ = DCProto_LoadRoleData_descriptor_->enum_type(0);
  DCProto_CollectRole_descriptor_ = file->message_type(3);
  static const int DCProto_CollectRole_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectRole, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectRole, singleRecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectRole, Restriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectRole, GodInfoTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectRole, winFactionInfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectRole, factionInfo_),
  };
  DCProto_CollectRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_CollectRole_descriptor_,
      DCProto_CollectRole::default_instance_,
      DCProto_CollectRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_CollectRole));
  DCProto_CollectRole_ID_descriptor_ = DCProto_CollectRole_descriptor_->enum_type(0);
  DCProto_AddAccount_descriptor_ = file->message_type(4);
  static const int DCProto_AddAccount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddAccount, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddAccount, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddAccount, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddAccount, ip_),
  };
  DCProto_AddAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_AddAccount_descriptor_,
      DCProto_AddAccount::default_instance_,
      DCProto_AddAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_AddAccount));
  DCProto_AddAccount_ID_descriptor_ = DCProto_AddAccount_descriptor_->enum_type(0);
  DCProto_AddRole_descriptor_ = file->message_type(5);
  static const int DCProto_AddRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddRole, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddRole, data_),
  };
  DCProto_AddRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_AddRole_descriptor_,
      DCProto_AddRole::default_instance_,
      DCProto_AddRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_AddRole));
  DCProto_AddRole_ID_descriptor_ = DCProto_AddRole_descriptor_->enum_type(0);
  DCProto_SaveSingleRecord_descriptor_ = file->message_type(6);
  static const int DCProto_SaveSingleRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveSingleRecord, mapID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveSingleRecord, record_),
  };
  DCProto_SaveSingleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SaveSingleRecord_descriptor_,
      DCProto_SaveSingleRecord::default_instance_,
      DCProto_SaveSingleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveSingleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveSingleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SaveSingleRecord));
  DCProto_SaveSingleRecord_ID_descriptor_ = DCProto_SaveSingleRecord_descriptor_->enum_type(0);
  DCProto_HasName_descriptor_ = file->message_type(7);
  static const int DCProto_HasName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_HasName, cr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_HasName, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_HasName, has_),
  };
  DCProto_HasName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_HasName_descriptor_,
      DCProto_HasName::default_instance_,
      DCProto_HasName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_HasName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_HasName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_HasName));
  DCProto_HasName_ID_descriptor_ = DCProto_HasName_descriptor_->enum_type(0);
  DCProto_Login_descriptor_ = file->message_type(8);
  static const int DCProto_Login_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Login, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Login, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Login, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Login, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Login, useActivateKey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Login, newUser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Login, beyond_),
  };
  DCProto_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_Login_descriptor_,
      DCProto_Login::default_instance_,
      DCProto_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_Login));
  DCProto_Login_ID_descriptor_ = DCProto_Login_descriptor_->enum_type(0);
  DCProto_QueryRole_descriptor_ = file->message_type(9);
  static const int DCProto_QueryRole_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRole, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRole, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRole, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRole, name_),
  };
  DCProto_QueryRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_QueryRole_descriptor_,
      DCProto_QueryRole::default_instance_,
      DCProto_QueryRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_QueryRole));
  DCProto_QueryRole_ID_descriptor_ = DCProto_QueryRole_descriptor_->enum_type(0);
  DCProto_SendMail_descriptor_ = file->message_type(10);
  static const int DCProto_SendMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SendMail, sm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SendMail, id_),
  };
  DCProto_SendMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SendMail_descriptor_,
      DCProto_SendMail::default_instance_,
      DCProto_SendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SendMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SendMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SendMail));
  DCProto_SendMail_ID_descriptor_ = DCProto_SendMail_descriptor_->enum_type(0);
  DCProto_GetKeyGift_descriptor_ = file->message_type(11);
  static const int DCProto_GetKeyGift_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, group_),
  };
  DCProto_GetKeyGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GetKeyGift_descriptor_,
      DCProto_GetKeyGift::default_instance_,
      DCProto_GetKeyGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GetKeyGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GetKeyGift));
  DCProto_GetKeyGift_ID_descriptor_ = DCProto_GetKeyGift_descriptor_->enum_type(0);
  DCProto_Recharge_descriptor_ = file->message_type(12);
  static const int DCProto_Recharge_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Recharge, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Recharge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Recharge, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Recharge, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Recharge, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Recharge, over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Recharge, level_),
  };
  DCProto_Recharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_Recharge_descriptor_,
      DCProto_Recharge::default_instance_,
      DCProto_Recharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Recharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Recharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_Recharge));
  DCProto_Recharge_ID_descriptor_ = DCProto_Recharge_descriptor_->enum_type(0);
  DCProto_CostRecord_descriptor_ = file->message_type(13);
  static const int DCProto_CostRecord_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, rmbValue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, subRMB_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, arg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, subrmbValue_),
  };
  DCProto_CostRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_CostRecord_descriptor_,
      DCProto_CostRecord::default_instance_,
      DCProto_CostRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CostRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_CostRecord));
  DCProto_CostRecord_ID_descriptor_ = DCProto_CostRecord_descriptor_->enum_type(0);
  DCProto_PlayerStatus_descriptor_ = file->message_type(14);
  static const int DCProto_PlayerStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PlayerStatus, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PlayerStatus, ps_),
  };
  DCProto_PlayerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_PlayerStatus_descriptor_,
      DCProto_PlayerStatus::default_instance_,
      DCProto_PlayerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PlayerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PlayerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_PlayerStatus));
  DCProto_PlayerStatus_ID_descriptor_ = DCProto_PlayerStatus_descriptor_->enum_type(0);
  DCProto_SaveChat_descriptor_ = file->message_type(15);
  static const int DCProto_SaveChat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveChat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveChat, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveChat, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveChat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveChat, senderID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveChat, receiverID_),
  };
  DCProto_SaveChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SaveChat_descriptor_,
      DCProto_SaveChat::default_instance_,
      DCProto_SaveChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SaveChat));
  DCProto_SaveChat_ID_descriptor_ = DCProto_SaveChat_descriptor_->enum_type(0);
  DCProto_GodTarget_descriptor_ = file->message_type(16);
  static const int DCProto_GodTarget_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodTarget, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodTarget, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodTarget, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodTarget, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodTarget, event_),
  };
  DCProto_GodTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GodTarget_descriptor_,
      DCProto_GodTarget::default_instance_,
      DCProto_GodTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GodTarget));
  DCProto_GodTarget_ID_descriptor_ = DCProto_GodTarget_descriptor_->enum_type(0);
  DCProto_LoadPlayerAtt_descriptor_ = file->message_type(17);
  static const int DCProto_LoadPlayerAtt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadPlayerAtt, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadPlayerAtt, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadPlayerAtt, roleID2_),
  };
  DCProto_LoadPlayerAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_LoadPlayerAtt_descriptor_,
      DCProto_LoadPlayerAtt::default_instance_,
      DCProto_LoadPlayerAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadPlayerAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadPlayerAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_LoadPlayerAtt));
  DCProto_LoadPlayerAtt_ID_descriptor_ = DCProto_LoadPlayerAtt_descriptor_->enum_type(0);
  DCProto_LoadFriendsFans_descriptor_ = file->message_type(18);
  static const int DCProto_LoadFriendsFans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadFriendsFans, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadFriendsFans, roleID2_),
  };
  DCProto_LoadFriendsFans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_LoadFriendsFans_descriptor_,
      DCProto_LoadFriendsFans::default_instance_,
      DCProto_LoadFriendsFans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadFriendsFans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadFriendsFans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_LoadFriendsFans));
  DCProto_LoadFriendsFans_ID_descriptor_ = DCProto_LoadFriendsFans_descriptor_->enum_type(0);
  DCProto_ModifyFixedEventBit_descriptor_ = file->message_type(19);
  static const int DCProto_ModifyFixedEventBit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyFixedEventBit, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyFixedEventBit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyFixedEventBit, bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyFixedEventBit, one_),
  };
  DCProto_ModifyFixedEventBit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_ModifyFixedEventBit_descriptor_,
      DCProto_ModifyFixedEventBit::default_instance_,
      DCProto_ModifyFixedEventBit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyFixedEventBit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyFixedEventBit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_ModifyFixedEventBit));
  DCProto_ModifyFixedEventBit_ID_descriptor_ = DCProto_ModifyFixedEventBit_descriptor_->enum_type(0);
  DCProto_ModifyGodRank_descriptor_ = file->message_type(20);
  static const int DCProto_ModifyGodRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyGodRank, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyGodRank, rank_),
  };
  DCProto_ModifyGodRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_ModifyGodRank_descriptor_,
      DCProto_ModifyGodRank::default_instance_,
      DCProto_ModifyGodRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyGodRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_ModifyGodRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_ModifyGodRank));
  DCProto_ModifyGodRank_ID_descriptor_ = DCProto_ModifyGodRank_descriptor_->enum_type(0);
  DCProto_GodRankRecordInfo_descriptor_ = file->message_type(21);
  static const int DCProto_GodRankRecordInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodRankRecordInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodRankRecordInfo, flag_),
  };
  DCProto_GodRankRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GodRankRecordInfo_descriptor_,
      DCProto_GodRankRecordInfo::default_instance_,
      DCProto_GodRankRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodRankRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GodRankRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GodRankRecordInfo));
  DCProto_SaveGodRankInfoRecord_descriptor_ = file->message_type(22);
  static const int DCProto_SaveGodRankInfoRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveGodRankInfoRecord, info1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveGodRankInfoRecord, info2_),
  };
  DCProto_SaveGodRankInfoRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SaveGodRankInfoRecord_descriptor_,
      DCProto_SaveGodRankInfoRecord::default_instance_,
      DCProto_SaveGodRankInfoRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveGodRankInfoRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveGodRankInfoRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SaveGodRankInfoRecord));
  DCProto_SaveGodRankInfoRecord_ID_descriptor_ = DCProto_SaveGodRankInfoRecord_descriptor_->enum_type(0);
  DCProto_QueryGodRole_descriptor_ = file->message_type(23);
  static const int DCProto_QueryGodRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryGodRole, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryGodRole, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryGodRole, id_),
  };
  DCProto_QueryGodRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_QueryGodRole_descriptor_,
      DCProto_QueryGodRole::default_instance_,
      DCProto_QueryGodRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryGodRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryGodRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_QueryGodRole));
  DCProto_QueryGodRole_ID_descriptor_ = DCProto_QueryGodRole_descriptor_->enum_type(0);
  DCProto_RandomRoles_descriptor_ = file->message_type(24);
  static const int DCProto_RandomRoles_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RandomRoles, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RandomRoles, atts_),
  };
  DCProto_RandomRoles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_RandomRoles_descriptor_,
      DCProto_RandomRoles::default_instance_,
      DCProto_RandomRoles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RandomRoles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RandomRoles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_RandomRoles));
  DCProto_RandomRoles_ID_descriptor_ = DCProto_RandomRoles_descriptor_->enum_type(0);
  DCProto_SendMailExceptRoles_descriptor_ = file->message_type(25);
  static const int DCProto_SendMailExceptRoles_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SendMailExceptRoles, roleIDs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SendMailExceptRoles, sm_),
  };
  DCProto_SendMailExceptRoles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SendMailExceptRoles_descriptor_,
      DCProto_SendMailExceptRoles::default_instance_,
      DCProto_SendMailExceptRoles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SendMailExceptRoles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SendMailExceptRoles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SendMailExceptRoles));
  DCProto_SendMailExceptRoles_ID_descriptor_ = DCProto_SendMailExceptRoles_descriptor_->enum_type(0);
  DCProto_AddOutLineFriends_descriptor_ = file->message_type(26);
  static const int DCProto_AddOutLineFriends_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddOutLineFriends, roleID1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddOutLineFriends, roleID2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddOutLineFriends, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddOutLineFriends, professionType_),
  };
  DCProto_AddOutLineFriends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_AddOutLineFriends_descriptor_,
      DCProto_AddOutLineFriends::default_instance_,
      DCProto_AddOutLineFriends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddOutLineFriends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddOutLineFriends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_AddOutLineFriends));
  DCProto_AddOutLineFriends_ID_descriptor_ = DCProto_AddOutLineFriends_descriptor_->enum_type(0);
  DCProto_LoadHireRoleDate_descriptor_ = file->message_type(27);
  static const int DCProto_LoadHireRoleDate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadHireRoleDate, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadHireRoleDate, atts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadHireRoleDate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadHireRoleDate, power_),
  };
  DCProto_LoadHireRoleDate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_LoadHireRoleDate_descriptor_,
      DCProto_LoadHireRoleDate::default_instance_,
      DCProto_LoadHireRoleDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadHireRoleDate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadHireRoleDate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_LoadHireRoleDate));
  DCProto_LoadHireRoleDate_ID_descriptor_ = DCProto_LoadHireRoleDate_descriptor_->enum_type(0);
  DCProto_QueryRoleFaction_descriptor_ = file->message_type(28);
  static const int DCProto_QueryRoleFaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRoleFaction, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRoleFaction, faction_),
  };
  DCProto_QueryRoleFaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_QueryRoleFaction_descriptor_,
      DCProto_QueryRoleFaction::default_instance_,
      DCProto_QueryRoleFaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRoleFaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryRoleFaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_QueryRoleFaction));
  DCProto_QueryRoleFaction_ID_descriptor_ = DCProto_QueryRoleFaction_descriptor_->enum_type(0);
  DCProto_TencentBuyGoodsUrl_descriptor_ = file->message_type(29);
  static const int DCProto_TencentBuyGoodsUrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_TencentBuyGoodsUrl, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_TencentBuyGoodsUrl, id_),
  };
  DCProto_TencentBuyGoodsUrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_TencentBuyGoodsUrl_descriptor_,
      DCProto_TencentBuyGoodsUrl::default_instance_,
      DCProto_TencentBuyGoodsUrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_TencentBuyGoodsUrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_TencentBuyGoodsUrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_TencentBuyGoodsUrl));
  DCProto_TencentBuyGoodsUrl_ID_descriptor_ = DCProto_TencentBuyGoodsUrl_descriptor_->enum_type(0);
  DCProto_Cost_descriptor_ = file->message_type(30);
  static const int DCProto_Cost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Cost, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Cost, info_),
  };
  DCProto_Cost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_Cost_descriptor_,
      DCProto_Cost::default_instance_,
      DCProto_Cost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Cost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_Cost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_Cost));
  DCProto_Cost_ID_descriptor_ = DCProto_Cost_descriptor_->enum_type(0);
  DCProto_FilterRecharge_descriptor_ = file->message_type(31);
  static const int DCProto_FilterRecharge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FilterRecharge, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FilterRecharge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FilterRecharge, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FilterRecharge, roleID_),
  };
  DCProto_FilterRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_FilterRecharge_descriptor_,
      DCProto_FilterRecharge::default_instance_,
      DCProto_FilterRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FilterRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FilterRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_FilterRecharge));
  DCProto_FilterRecharge_ID_descriptor_ = DCProto_FilterRecharge_descriptor_->enum_type(0);
  DCProto_SetVIP_descriptor_ = file->message_type(32);
  static const int DCProto_SetVIP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SetVIP, info_),
  };
  DCProto_SetVIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SetVIP_descriptor_,
      DCProto_SetVIP::default_instance_,
      DCProto_SetVIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SetVIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SetVIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SetVIP));
  DCProto_SetVIP_ID_descriptor_ = DCProto_SetVIP_descriptor_->enum_type(0);
  DCProto_CollectEquipment_descriptor_ = file->message_type(33);
  static const int DCProto_CollectEquipment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectEquipment, cur_),
  };
  DCProto_CollectEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_CollectEquipment_descriptor_,
      DCProto_CollectEquipment::default_instance_,
      DCProto_CollectEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_CollectEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_CollectEquipment));
  DCProto_CollectEquipment_ID_descriptor_ = DCProto_CollectEquipment_descriptor_->enum_type(0);
  DCProto_SaveEquipmentData_descriptor_ = file->message_type(34);
  static const int DCProto_SaveEquipmentData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveEquipmentData, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveEquipmentData, owner_),
  };
  DCProto_SaveEquipmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SaveEquipmentData_descriptor_,
      DCProto_SaveEquipmentData::default_instance_,
      DCProto_SaveEquipmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveEquipmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveEquipmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SaveEquipmentData));
  DCProto_SaveEquipmentData_ID_descriptor_ = DCProto_SaveEquipmentData_descriptor_->enum_type(0);
  DCProto_LoadEquipmentData_descriptor_ = file->message_type(35);
  static const int DCProto_LoadEquipmentData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadEquipmentData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadEquipmentData, equipment_),
  };
  DCProto_LoadEquipmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_LoadEquipmentData_descriptor_,
      DCProto_LoadEquipmentData::default_instance_,
      DCProto_LoadEquipmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadEquipmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadEquipmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_LoadEquipmentData));
  DCProto_LoadEquipmentData_ID_descriptor_ = DCProto_LoadEquipmentData_descriptor_->enum_type(0);
  DCProto_DeleteEquipmentData_descriptor_ = file->message_type(36);
  static const int DCProto_DeleteEquipmentData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_DeleteEquipmentData, id_),
  };
  DCProto_DeleteEquipmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_DeleteEquipmentData_descriptor_,
      DCProto_DeleteEquipmentData::default_instance_,
      DCProto_DeleteEquipmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_DeleteEquipmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_DeleteEquipmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_DeleteEquipmentData));
  DCProto_DeleteEquipmentData_ID_descriptor_ = DCProto_DeleteEquipmentData_descriptor_->enum_type(0);
  DCProto_QueryEquipment_descriptor_ = file->message_type(37);
  static const int DCProto_QueryEquipment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryEquipment, itemID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryEquipment, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryEquipment, id_),
  };
  DCProto_QueryEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_QueryEquipment_descriptor_,
      DCProto_QueryEquipment::default_instance_,
      DCProto_QueryEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_QueryEquipment));
  DCProto_QueryEquipment_ID_descriptor_ = DCProto_QueryEquipment_descriptor_->enum_type(0);
  DCProto_GMOrder_descriptor_ = file->message_type(38);
  static const int DCProto_GMOrder_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMOrder, order_),
  };
  DCProto_GMOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMOrder_descriptor_,
      DCProto_GMOrder::default_instance_,
      DCProto_GMOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMOrder));
  DCProto_GMOrder_ID_descriptor_ = DCProto_GMOrder_descriptor_->enum_type(0);
  DCProto_GMData_descriptor_ = file->message_type(39);
  static const int DCProto_GMData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, startTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, endTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, GM_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, flag_),
  };
  DCProto_GMData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMData_descriptor_,
      DCProto_GMData::default_instance_,
      DCProto_GMData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMData));
  DCProto_GMData_ID_descriptor_ = DCProto_GMData_descriptor_->enum_type(0);
  DCProto_GMSaveData_descriptor_ = file->message_type(40);
  static const int DCProto_GMSaveData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMSaveData, gmData_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMSaveData, addOrDel_),
  };
  DCProto_GMSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMSaveData_descriptor_,
      DCProto_GMSaveData::default_instance_,
      DCProto_GMSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMSaveData));
  DCProto_GMSaveData_ID_descriptor_ = DCProto_GMSaveData_descriptor_->enum_type(0);
  DCProto_GMLoadData_descriptor_ = file->message_type(41);
  static const int DCProto_GMLoadData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMLoadData, gmData_),
  };
  DCProto_GMLoadData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMLoadData_descriptor_,
      DCProto_GMLoadData::default_instance_,
      DCProto_GMLoadData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMLoadData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMLoadData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMLoadData));
  DCProto_GMLoadData_ID_descriptor_ = DCProto_GMLoadData_descriptor_->enum_type(0);
  DCProto_GMPlayerQuery_descriptor_ = file->message_type(42);
  static const int DCProto_GMPlayerQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMPlayerQuery, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMPlayerQuery, att_),
  };
  DCProto_GMPlayerQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMPlayerQuery_descriptor_,
      DCProto_GMPlayerQuery::default_instance_,
      DCProto_GMPlayerQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMPlayerQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMPlayerQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMPlayerQuery));
  DCProto_GMPlayerQuery_ID_descriptor_ = DCProto_GMPlayerQuery_descriptor_->enum_type(0);
  DCProto_GMChatRecords_descriptor_ = file->message_type(43);
  static const int DCProto_GMChatRecords_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMChatRecords, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMChatRecords, record_),
  };
  DCProto_GMChatRecords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMChatRecords_descriptor_,
      DCProto_GMChatRecords::default_instance_,
      DCProto_GMChatRecords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMChatRecords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMChatRecords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMChatRecords));
  DCProto_GMChatRecords_ID_descriptor_ = DCProto_GMChatRecords_descriptor_->enum_type(0);
  DCProto_GMRegistrCount_descriptor_ = file->message_type(44);
  static const int DCProto_GMRegistrCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRegistrCount, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRegistrCount, record_),
  };
  DCProto_GMRegistrCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMRegistrCount_descriptor_,
      DCProto_GMRegistrCount::default_instance_,
      DCProto_GMRegistrCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRegistrCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRegistrCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMRegistrCount));
  DCProto_GMRegistrCount_ID_descriptor_ = DCProto_GMRegistrCount_descriptor_->enum_type(0);
  DCProto_GMRoleCount_descriptor_ = file->message_type(45);
  static const int DCProto_GMRoleCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRoleCount, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRoleCount, record_),
  };
  DCProto_GMRoleCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMRoleCount_descriptor_,
      DCProto_GMRoleCount::default_instance_,
      DCProto_GMRoleCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRoleCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRoleCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMRoleCount));
  DCProto_GMRoleCount_ID_descriptor_ = DCProto_GMRoleCount_descriptor_->enum_type(0);
  DCProto_GMLevelStatistics_descriptor_ = file->message_type(46);
  static const int DCProto_GMLevelStatistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMLevelStatistics, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMLevelStatistics, record_),
  };
  DCProto_GMLevelStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMLevelStatistics_descriptor_,
      DCProto_GMLevelStatistics::default_instance_,
      DCProto_GMLevelStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMLevelStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMLevelStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMLevelStatistics));
  DCProto_GMLevelStatistics_ID_descriptor_ = DCProto_GMLevelStatistics_descriptor_->enum_type(0);
  DCProto_GMOpenGuide_descriptor_ = file->message_type(47);
  static const int DCProto_GMOpenGuide_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMOpenGuide, info_),
  };
  DCProto_GMOpenGuide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMOpenGuide_descriptor_,
      DCProto_GMOpenGuide::default_instance_,
      DCProto_GMOpenGuide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMOpenGuide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMOpenGuide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMOpenGuide));
  DCProto_GMOpenGuide_ID_descriptor_ = DCProto_GMOpenGuide_descriptor_->enum_type(0);
  DCProto_GMInfo_descriptor_ = file->message_type(48);
  static const int DCProto_GMInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, arg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, arg3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, str1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, str2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, str3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, roleID_),
  };
  DCProto_GMInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMInfo_descriptor_,
      DCProto_GMInfo::default_instance_,
      DCProto_GMInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMInfo));
  DCProto_LoadAllDataFromGMDataTable_descriptor_ = file->message_type(49);
  static const int DCProto_LoadAllDataFromGMDataTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadAllDataFromGMDataTable, info_),
  };
  DCProto_LoadAllDataFromGMDataTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_LoadAllDataFromGMDataTable_descriptor_,
      DCProto_LoadAllDataFromGMDataTable::default_instance_,
      DCProto_LoadAllDataFromGMDataTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadAllDataFromGMDataTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadAllDataFromGMDataTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_LoadAllDataFromGMDataTable));
  DCProto_LoadAllDataFromGMDataTable_ID_descriptor_ = DCProto_LoadAllDataFromGMDataTable_descriptor_->enum_type(0);
  DCProto_SaveGMDataTable_descriptor_ = file->message_type(50);
  static const int DCProto_SaveGMDataTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveGMDataTable, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveGMDataTable, op_),
  };
  DCProto_SaveGMDataTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SaveGMDataTable_descriptor_,
      DCProto_SaveGMDataTable::default_instance_,
      DCProto_SaveGMDataTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveGMDataTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SaveGMDataTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SaveGMDataTable));
  DCProto_SaveGMDataTable_ID_descriptor_ = DCProto_SaveGMDataTable_descriptor_->enum_type(0);
  DCProto_GMAddExchange_descriptor_ = file->message_type(51);
  static const int DCProto_GMAddExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMAddExchange, info_),
  };
  DCProto_GMAddExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMAddExchange_descriptor_,
      DCProto_GMAddExchange::default_instance_,
      DCProto_GMAddExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMAddExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMAddExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMAddExchange));
  DCProto_GMAddExchange_ID_descriptor_ = DCProto_GMAddExchange_descriptor_->enum_type(0);
  DCProto_GMRekooRole_descriptor_ = file->message_type(52);
  static const int DCProto_GMRekooRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRekooRole, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRekooRole, str_),
  };
  DCProto_GMRekooRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMRekooRole_descriptor_,
      DCProto_GMRekooRole::default_instance_,
      DCProto_GMRekooRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRekooRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMRekooRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMRekooRole));
  DCProto_GMRekooRole_ID_descriptor_ = DCProto_GMRekooRole_descriptor_->enum_type(0);
  DCProto_GMAddRekooRMB_descriptor_ = file->message_type(53);
  static const int DCProto_GMAddRekooRMB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMAddRekooRMB, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMAddRekooRMB, rmb_),
  };
  DCProto_GMAddRekooRMB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_GMAddRekooRMB_descriptor_,
      DCProto_GMAddRekooRMB::default_instance_,
      DCProto_GMAddRekooRMB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMAddRekooRMB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_GMAddRekooRMB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_GMAddRekooRMB));
  DCProto_GMAddRekooRMB_ID_descriptor_ = DCProto_GMAddRekooRMB_descriptor_->enum_type(0);
  DCProto_LoadRekooRole_descriptor_ = file->message_type(54);
  static const int DCProto_LoadRekooRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadRekooRole, roleID_),
  };
  DCProto_LoadRekooRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_LoadRekooRole_descriptor_,
      DCProto_LoadRekooRole::default_instance_,
      DCProto_LoadRekooRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadRekooRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadRekooRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_LoadRekooRole));
  DCProto_LoadRekooRole_ID_descriptor_ = DCProto_LoadRekooRole_descriptor_->enum_type(0);
  DCProto_AddCodeCount_descriptor_ = file->message_type(55);
  static const int DCProto_AddCodeCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddCodeCount, roleID_),
  };
  DCProto_AddCodeCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_AddCodeCount_descriptor_,
      DCProto_AddCodeCount::default_instance_,
      DCProto_AddCodeCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddCodeCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_AddCodeCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_AddCodeCount));
  DCProto_AddCodeCount_ID_descriptor_ = DCProto_AddCodeCount_descriptor_->enum_type(0);
  InviteCode_descriptor_ = file->message_type(56);
  static const int InviteCode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCode, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCode, selfCode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCode, otherCode_),
  };
  InviteCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteCode_descriptor_,
      InviteCode::default_instance_,
      InviteCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteCode));
  DCProto_LoadInviteCode_descriptor_ = file->message_type(57);
  static const int DCProto_LoadInviteCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadInviteCode, info_),
  };
  DCProto_LoadInviteCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_LoadInviteCode_descriptor_,
      DCProto_LoadInviteCode::default_instance_,
      DCProto_LoadInviteCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadInviteCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_LoadInviteCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_LoadInviteCode));
  DCProto_LoadInviteCode_ID_descriptor_ = DCProto_LoadInviteCode_descriptor_->enum_type(0);
  DCProto_QueryGMAccount_descriptor_ = file->message_type(58);
  static const int DCProto_QueryGMAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryGMAccount, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryGMAccount, gm_),
  };
  DCProto_QueryGMAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_QueryGMAccount_descriptor_,
      DCProto_QueryGMAccount::default_instance_,
      DCProto_QueryGMAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryGMAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_QueryGMAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_QueryGMAccount));
  DCProto_QueryGMAccount_ID_descriptor_ = DCProto_QueryGMAccount_descriptor_->enum_type(0);
  DCProto_RegistDeviceServer_descriptor_ = file->message_type(59);
  static const int DCProto_RegistDeviceServer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RegistDeviceServer, deviceNum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RegistDeviceServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RegistDeviceServer, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RegistDeviceServer, noLine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RegistDeviceServer, time_),
  };
  DCProto_RegistDeviceServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_RegistDeviceServer_descriptor_,
      DCProto_RegistDeviceServer::default_instance_,
      DCProto_RegistDeviceServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RegistDeviceServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_RegistDeviceServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_RegistDeviceServer));
  DCProto_RegistDeviceServer_ID_descriptor_ = DCProto_RegistDeviceServer_descriptor_->enum_type(0);
  DCProto_FactionData_descriptor_ = file->message_type(60);
  static const int DCProto_FactionData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, factionName_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, exp_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, guardian_),
  };
  DCProto_FactionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_FactionData_descriptor_,
      DCProto_FactionData::default_instance_,
      DCProto_FactionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_FactionData));
  DCProto_FactionData_ID_descriptor_ = DCProto_FactionData_descriptor_->enum_type(0);
  DCProto_FactionLoadData_descriptor_ = file->message_type(61);
  static const int DCProto_FactionLoadData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionLoadData, data_),
  };
  DCProto_FactionLoadData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_FactionLoadData_descriptor_,
      DCProto_FactionLoadData::default_instance_,
      DCProto_FactionLoadData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionLoadData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionLoadData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_FactionLoadData));
  DCProto_FactionLoadData_ID_descriptor_ = DCProto_FactionLoadData_descriptor_->enum_type(0);
  DCProto_FactionSaveData_descriptor_ = file->message_type(62);
  static const int DCProto_FactionSaveData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionSaveData, data_),
  };
  DCProto_FactionSaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_FactionSaveData_descriptor_,
      DCProto_FactionSaveData::default_instance_,
      DCProto_FactionSaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionSaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionSaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_FactionSaveData));
  DCProto_FactionSaveData_ID_descriptor_ = DCProto_FactionSaveData_descriptor_->enum_type(0);
  DCProto_FactionAddRecord_descriptor_ = file->message_type(63);
  static const int DCProto_FactionAddRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionAddRecord, data_),
  };
  DCProto_FactionAddRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_FactionAddRecord_descriptor_,
      DCProto_FactionAddRecord::default_instance_,
      DCProto_FactionAddRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionAddRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionAddRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_FactionAddRecord));
  DCProto_FactionAddRecord_ID_descriptor_ = DCProto_FactionAddRecord_descriptor_->enum_type(0);
  DCProto_FactionDelRecord_descriptor_ = file->message_type(64);
  static const int DCProto_FactionDelRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionDelRecord, data_),
  };
  DCProto_FactionDelRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_FactionDelRecord_descriptor_,
      DCProto_FactionDelRecord::default_instance_,
      DCProto_FactionDelRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionDelRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionDelRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_FactionDelRecord));
  DCProto_FactionDelRecord_ID_descriptor_ = DCProto_FactionDelRecord_descriptor_->enum_type(0);
  DCProto_FactionUpdateRecord_descriptor_ = file->message_type(65);
  static const int DCProto_FactionUpdateRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionUpdateRecord, data_),
  };
  DCProto_FactionUpdateRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_FactionUpdateRecord_descriptor_,
      DCProto_FactionUpdateRecord::default_instance_,
      DCProto_FactionUpdateRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionUpdateRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionUpdateRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_FactionUpdateRecord));
  DCProto_FactionUpdateRecord_ID_descriptor_ = DCProto_FactionUpdateRecord_descriptor_->enum_type(0);
  DCProto_SysFactionMemInfo_descriptor_ = file->message_type(66);
  static const int DCProto_SysFactionMemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SysFactionMemInfo, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SysFactionMemInfo, str_),
  };
  DCProto_SysFactionMemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_SysFactionMemInfo_descriptor_,
      DCProto_SysFactionMemInfo::default_instance_,
      DCProto_SysFactionMemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SysFactionMemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_SysFactionMemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_SysFactionMemInfo));
  DCProto_SysFactionMemInfo_ID_descriptor_ = DCProto_SysFactionMemInfo_descriptor_->enum_type(0);
  DCProto_InitRank_descriptor_ = file->message_type(67);
  static const int DCProto_InitRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_InitRank, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_InitRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_InitRank, finalKiller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_InitRank, flag_),
  };
  DCProto_InitRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_InitRank_descriptor_,
      DCProto_InitRank::default_instance_,
      DCProto_InitRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_InitRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_InitRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_InitRank));
  DCProto_InitRank_ID_descriptor_ = DCProto_InitRank_descriptor_->enum_type(0);
  DCProto_PingPongAward_descriptor_ = file->message_type(68);
  static const int DCProto_PingPongAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PingPongAward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PingPongAward, roleID_),
  };
  DCProto_PingPongAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_PingPongAward_descriptor_,
      DCProto_PingPongAward::default_instance_,
      DCProto_PingPongAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PingPongAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PingPongAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_PingPongAward));
  DCProto_PingPongAward_ID_descriptor_ = DCProto_PingPongAward_descriptor_->enum_type(0);
  FactionPower_descriptor_ = file->message_type(69);
  static const int FactionPower_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionPower, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionPower, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionPower, power_),
  };
  FactionPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionPower_descriptor_,
      FactionPower::default_instance_,
      FactionPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionPower));
  DCProto_FactionPower_descriptor_ = file->message_type(70);
  static const int DCProto_FactionPower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionPower, info_),
  };
  DCProto_FactionPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_FactionPower_descriptor_,
      DCProto_FactionPower::default_instance_,
      DCProto_FactionPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_FactionPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_FactionPower));
  DCProto_FactionPower_ID_descriptor_ = DCProto_FactionPower_descriptor_->enum_type(0);
  DCProto_PingPongQiuBiTe_descriptor_ = file->message_type(71);
  static const int DCProto_PingPongQiuBiTe_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PingPongQiuBiTe, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PingPongQiuBiTe, roleID_),
  };
  DCProto_PingPongQiuBiTe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DCProto_PingPongQiuBiTe_descriptor_,
      DCProto_PingPongQiuBiTe::default_instance_,
      DCProto_PingPongQiuBiTe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PingPongQiuBiTe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DCProto_PingPongQiuBiTe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DCProto_PingPongQiuBiTe));
  DCProto_PingPongQiuBiTe_ID_descriptor_ = DCProto_PingPongQiuBiTe_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DCProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SaveRoleData_descriptor_, &DCProto_SaveRoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_DeleteRoleData_descriptor_, &DCProto_DeleteRoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_LoadRoleData_descriptor_, &DCProto_LoadRoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_CollectRole_descriptor_, &DCProto_CollectRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_AddAccount_descriptor_, &DCProto_AddAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_AddRole_descriptor_, &DCProto_AddRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SaveSingleRecord_descriptor_, &DCProto_SaveSingleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_HasName_descriptor_, &DCProto_HasName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_Login_descriptor_, &DCProto_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_QueryRole_descriptor_, &DCProto_QueryRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SendMail_descriptor_, &DCProto_SendMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GetKeyGift_descriptor_, &DCProto_GetKeyGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_Recharge_descriptor_, &DCProto_Recharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_CostRecord_descriptor_, &DCProto_CostRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_PlayerStatus_descriptor_, &DCProto_PlayerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SaveChat_descriptor_, &DCProto_SaveChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GodTarget_descriptor_, &DCProto_GodTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_LoadPlayerAtt_descriptor_, &DCProto_LoadPlayerAtt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_LoadFriendsFans_descriptor_, &DCProto_LoadFriendsFans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_ModifyFixedEventBit_descriptor_, &DCProto_ModifyFixedEventBit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_ModifyGodRank_descriptor_, &DCProto_ModifyGodRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GodRankRecordInfo_descriptor_, &DCProto_GodRankRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SaveGodRankInfoRecord_descriptor_, &DCProto_SaveGodRankInfoRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_QueryGodRole_descriptor_, &DCProto_QueryGodRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_RandomRoles_descriptor_, &DCProto_RandomRoles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SendMailExceptRoles_descriptor_, &DCProto_SendMailExceptRoles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_AddOutLineFriends_descriptor_, &DCProto_AddOutLineFriends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_LoadHireRoleDate_descriptor_, &DCProto_LoadHireRoleDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_QueryRoleFaction_descriptor_, &DCProto_QueryRoleFaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_TencentBuyGoodsUrl_descriptor_, &DCProto_TencentBuyGoodsUrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_Cost_descriptor_, &DCProto_Cost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_FilterRecharge_descriptor_, &DCProto_FilterRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SetVIP_descriptor_, &DCProto_SetVIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_CollectEquipment_descriptor_, &DCProto_CollectEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SaveEquipmentData_descriptor_, &DCProto_SaveEquipmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_LoadEquipmentData_descriptor_, &DCProto_LoadEquipmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_DeleteEquipmentData_descriptor_, &DCProto_DeleteEquipmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_QueryEquipment_descriptor_, &DCProto_QueryEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMOrder_descriptor_, &DCProto_GMOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMData_descriptor_, &DCProto_GMData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMSaveData_descriptor_, &DCProto_GMSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMLoadData_descriptor_, &DCProto_GMLoadData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMPlayerQuery_descriptor_, &DCProto_GMPlayerQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMChatRecords_descriptor_, &DCProto_GMChatRecords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMRegistrCount_descriptor_, &DCProto_GMRegistrCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMRoleCount_descriptor_, &DCProto_GMRoleCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMLevelStatistics_descriptor_, &DCProto_GMLevelStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMOpenGuide_descriptor_, &DCProto_GMOpenGuide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMInfo_descriptor_, &DCProto_GMInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_LoadAllDataFromGMDataTable_descriptor_, &DCProto_LoadAllDataFromGMDataTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SaveGMDataTable_descriptor_, &DCProto_SaveGMDataTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMAddExchange_descriptor_, &DCProto_GMAddExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMRekooRole_descriptor_, &DCProto_GMRekooRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_GMAddRekooRMB_descriptor_, &DCProto_GMAddRekooRMB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_LoadRekooRole_descriptor_, &DCProto_LoadRekooRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_AddCodeCount_descriptor_, &DCProto_AddCodeCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteCode_descriptor_, &InviteCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_LoadInviteCode_descriptor_, &DCProto_LoadInviteCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_QueryGMAccount_descriptor_, &DCProto_QueryGMAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_RegistDeviceServer_descriptor_, &DCProto_RegistDeviceServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_FactionData_descriptor_, &DCProto_FactionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_FactionLoadData_descriptor_, &DCProto_FactionLoadData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_FactionSaveData_descriptor_, &DCProto_FactionSaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_FactionAddRecord_descriptor_, &DCProto_FactionAddRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_FactionDelRecord_descriptor_, &DCProto_FactionDelRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_FactionUpdateRecord_descriptor_, &DCProto_FactionUpdateRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_SysFactionMemInfo_descriptor_, &DCProto_SysFactionMemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_InitRank_descriptor_, &DCProto_InitRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_PingPongAward_descriptor_, &DCProto_PingPongAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionPower_descriptor_, &FactionPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_FactionPower_descriptor_, &DCProto_FactionPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DCProto_PingPongQiuBiTe_descriptor_, &DCProto_PingPongQiuBiTe::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DCProto_2eproto() {
  delete DCProto_SaveRoleData::default_instance_;
  delete DCProto_SaveRoleData_reflection_;
  delete DCProto_DeleteRoleData::default_instance_;
  delete DCProto_DeleteRoleData_reflection_;
  delete DCProto_LoadRoleData::default_instance_;
  delete DCProto_LoadRoleData_reflection_;
  delete DCProto_CollectRole::default_instance_;
  delete DCProto_CollectRole_reflection_;
  delete DCProto_AddAccount::default_instance_;
  delete DCProto_AddAccount_reflection_;
  delete DCProto_AddRole::default_instance_;
  delete DCProto_AddRole_reflection_;
  delete DCProto_SaveSingleRecord::default_instance_;
  delete DCProto_SaveSingleRecord_reflection_;
  delete DCProto_HasName::default_instance_;
  delete DCProto_HasName_reflection_;
  delete DCProto_Login::default_instance_;
  delete DCProto_Login_reflection_;
  delete DCProto_QueryRole::default_instance_;
  delete DCProto_QueryRole_reflection_;
  delete DCProto_SendMail::default_instance_;
  delete DCProto_SendMail_reflection_;
  delete DCProto_GetKeyGift::default_instance_;
  delete DCProto_GetKeyGift_reflection_;
  delete DCProto_Recharge::default_instance_;
  delete DCProto_Recharge_reflection_;
  delete DCProto_CostRecord::default_instance_;
  delete DCProto_CostRecord_reflection_;
  delete DCProto_PlayerStatus::default_instance_;
  delete DCProto_PlayerStatus_reflection_;
  delete DCProto_SaveChat::default_instance_;
  delete DCProto_SaveChat_reflection_;
  delete DCProto_GodTarget::default_instance_;
  delete DCProto_GodTarget_reflection_;
  delete DCProto_LoadPlayerAtt::default_instance_;
  delete DCProto_LoadPlayerAtt_reflection_;
  delete DCProto_LoadFriendsFans::default_instance_;
  delete DCProto_LoadFriendsFans_reflection_;
  delete DCProto_ModifyFixedEventBit::default_instance_;
  delete DCProto_ModifyFixedEventBit_reflection_;
  delete DCProto_ModifyGodRank::default_instance_;
  delete DCProto_ModifyGodRank_reflection_;
  delete DCProto_GodRankRecordInfo::default_instance_;
  delete DCProto_GodRankRecordInfo_reflection_;
  delete DCProto_SaveGodRankInfoRecord::default_instance_;
  delete DCProto_SaveGodRankInfoRecord_reflection_;
  delete DCProto_QueryGodRole::default_instance_;
  delete DCProto_QueryGodRole_reflection_;
  delete DCProto_RandomRoles::default_instance_;
  delete DCProto_RandomRoles_reflection_;
  delete DCProto_SendMailExceptRoles::default_instance_;
  delete DCProto_SendMailExceptRoles_reflection_;
  delete DCProto_AddOutLineFriends::default_instance_;
  delete DCProto_AddOutLineFriends_reflection_;
  delete DCProto_LoadHireRoleDate::default_instance_;
  delete DCProto_LoadHireRoleDate_reflection_;
  delete DCProto_QueryRoleFaction::default_instance_;
  delete DCProto_QueryRoleFaction_reflection_;
  delete DCProto_TencentBuyGoodsUrl::default_instance_;
  delete DCProto_TencentBuyGoodsUrl_reflection_;
  delete DCProto_Cost::default_instance_;
  delete DCProto_Cost_reflection_;
  delete DCProto_FilterRecharge::default_instance_;
  delete DCProto_FilterRecharge_reflection_;
  delete DCProto_SetVIP::default_instance_;
  delete DCProto_SetVIP_reflection_;
  delete DCProto_CollectEquipment::default_instance_;
  delete DCProto_CollectEquipment_reflection_;
  delete DCProto_SaveEquipmentData::default_instance_;
  delete DCProto_SaveEquipmentData_reflection_;
  delete DCProto_LoadEquipmentData::default_instance_;
  delete DCProto_LoadEquipmentData_reflection_;
  delete DCProto_DeleteEquipmentData::default_instance_;
  delete DCProto_DeleteEquipmentData_reflection_;
  delete DCProto_QueryEquipment::default_instance_;
  delete DCProto_QueryEquipment_reflection_;
  delete DCProto_GMOrder::default_instance_;
  delete DCProto_GMOrder_reflection_;
  delete DCProto_GMData::default_instance_;
  delete DCProto_GMData_reflection_;
  delete DCProto_GMSaveData::default_instance_;
  delete DCProto_GMSaveData_reflection_;
  delete DCProto_GMLoadData::default_instance_;
  delete DCProto_GMLoadData_reflection_;
  delete DCProto_GMPlayerQuery::default_instance_;
  delete DCProto_GMPlayerQuery_reflection_;
  delete DCProto_GMChatRecords::default_instance_;
  delete DCProto_GMChatRecords_reflection_;
  delete DCProto_GMRegistrCount::default_instance_;
  delete DCProto_GMRegistrCount_reflection_;
  delete DCProto_GMRoleCount::default_instance_;
  delete DCProto_GMRoleCount_reflection_;
  delete DCProto_GMLevelStatistics::default_instance_;
  delete DCProto_GMLevelStatistics_reflection_;
  delete DCProto_GMOpenGuide::default_instance_;
  delete DCProto_GMOpenGuide_reflection_;
  delete DCProto_GMInfo::default_instance_;
  delete DCProto_GMInfo_reflection_;
  delete DCProto_LoadAllDataFromGMDataTable::default_instance_;
  delete DCProto_LoadAllDataFromGMDataTable_reflection_;
  delete DCProto_SaveGMDataTable::default_instance_;
  delete DCProto_SaveGMDataTable_reflection_;
  delete DCProto_GMAddExchange::default_instance_;
  delete DCProto_GMAddExchange_reflection_;
  delete DCProto_GMRekooRole::default_instance_;
  delete DCProto_GMRekooRole_reflection_;
  delete DCProto_GMAddRekooRMB::default_instance_;
  delete DCProto_GMAddRekooRMB_reflection_;
  delete DCProto_LoadRekooRole::default_instance_;
  delete DCProto_LoadRekooRole_reflection_;
  delete DCProto_AddCodeCount::default_instance_;
  delete DCProto_AddCodeCount_reflection_;
  delete InviteCode::default_instance_;
  delete InviteCode_reflection_;
  delete DCProto_LoadInviteCode::default_instance_;
  delete DCProto_LoadInviteCode_reflection_;
  delete DCProto_QueryGMAccount::default_instance_;
  delete DCProto_QueryGMAccount_reflection_;
  delete DCProto_RegistDeviceServer::default_instance_;
  delete DCProto_RegistDeviceServer_reflection_;
  delete DCProto_FactionData::default_instance_;
  delete DCProto_FactionData_reflection_;
  delete DCProto_FactionLoadData::default_instance_;
  delete DCProto_FactionLoadData_reflection_;
  delete DCProto_FactionSaveData::default_instance_;
  delete DCProto_FactionSaveData_reflection_;
  delete DCProto_FactionAddRecord::default_instance_;
  delete DCProto_FactionAddRecord_reflection_;
  delete DCProto_FactionDelRecord::default_instance_;
  delete DCProto_FactionDelRecord_reflection_;
  delete DCProto_FactionUpdateRecord::default_instance_;
  delete DCProto_FactionUpdateRecord_reflection_;
  delete DCProto_SysFactionMemInfo::default_instance_;
  delete DCProto_SysFactionMemInfo_reflection_;
  delete DCProto_InitRank::default_instance_;
  delete DCProto_InitRank_reflection_;
  delete DCProto_PingPongAward::default_instance_;
  delete DCProto_PingPongAward_reflection_;
  delete FactionPower::default_instance_;
  delete FactionPower_reflection_;
  delete DCProto_FactionPower::default_instance_;
  delete DCProto_FactionPower_reflection_;
  delete DCProto_PingPongQiuBiTe::default_instance_;
  delete DCProto_PingPongQiuBiTe_reflection_;
}

void protobuf_AddDesc_DCProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_BaseInfo_2eproto();
  ::protobuf_AddDesc_PlayerInfo_2eproto();
  ::protobuf_AddDesc_PlayerAtt_2eproto();
  ::protobuf_AddDesc_EquipmentInfo_2eproto();
  ::protobuf_AddDesc_NetProto_2eproto();
  ::protobuf_AddDesc_ProfessionInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rDCProto.proto\032\016BaseInfo.proto\032\020PlayerI"
    "nfo.proto\032\017PlayerAtt.proto\032\023EquipmentInf"
    "o.proto\032\016NetProto.proto\032\024ProfessionInfo."
    "proto\"m\n\024DCProto_SaveRoleData\022\033\n\004data\030\001 "
    "\003(\0132\r.PB_PlayerAtt\022\031\n\004info\030\002 \003(\0132\013.Playe"
    "rInfo\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\000\"z\n\026"
    "DCProto_DeleteRoleData\022\017\n\007account\030\001 \001(\t\022"
    "\n\n\002id\030\002 \001(\003\022\022\n\nequipments\030\003 \003(\003\022\020\n\010platf"
    "orm\030\004 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\001"
    "\"\207\001\n\024DCProto_LoadRoleData\022\017\n\007account\030\001 \001"
    "(\t\022\033\n\004data\030\002 \003(\0132\r.PB_PlayerAtt\022\020\n\010prevR"
    "ole\030\003 \001(\003\022\020\n\010platform\030\004 \001(\t\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\001\022\n\n\006UNITID\020\002\"\357\001\n\023DCProto_CollectRo"
    "le\022\013\n\003cur\030\001 \001(\003\022!\n\014singleRecord\030\002 \003(\0132\013."
    "RecordInfo\022 \n\013Restriction\030\003 \003(\0132\013.Record"
    "Info\022 \n\013GodInfoTime\030\004 \001(\0132\013.RecordInfo\022#"
    "\n\016winFactionInfo\030\005 \001(\0132\013.RecordInfo\022 \n\013f"
    "actionInfo\030\006 \003(\0132\013.RecordInfo\"\035\n\002ID\022\013\n\007G"
    "ROUPID\020\001\022\n\n\006UNITID\020\003\"s\n\022DCProto_AddAccou"
    "nt\022\031\n\004info\030\001 \001(\0132\013.PlayerInfo\022\013\n\003res\030\002 \001"
    "(\010\022\n\n\002id\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t\"\035\n\002ID\022\013\n\007GROU"
    "PID\020\001\022\n\n\006UNITID\020\004\"h\n\017DCProto_AddRole\022\031\n\004"
    "info\030\001 \001(\0132\013.PlayerInfo\022\033\n\004data\030\002 \001(\0132\r."
    "PB_PlayerAtt\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITI"
    "D\020\005\"e\n\030DCProto_SaveSingleRecord\022\r\n\005mapID"
    "\030\001 \001(\005\022\033\n\006record\030\002 \001(\0132\013.RecordInfo\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\006\"k\n\017DCProto_Ha"
    "sName\022 \n\002cr\030\001 \001(\0132\024.NetProto_CreateRole\022"
    "\n\n\002id\030\002 \001(\005\022\013\n\003has\030\003 \001(\010\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\001\022\n\n\006UNITID\020\007\"\254\001\n\rDCProto_Login\022\036\n\005log"
    "in\030\001 \001(\0132\017.NetProto_Login\022\n\n\002id\030\002 \001(\005\022\013\n"
    "\003res\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t\022\026\n\016useActivateKey"
    "\030\005 \001(\010\022\017\n\007newUser\030\006 \001(\010\022\016\n\006beyond\030\007 \001(\010\""
    "\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\010\"x\n\021DCProt"
    "o_QueryRole\022\016\n\006roleID\030\001 \001(\003\022\032\n\003att\030\002 \001(\013"
    "2\r.PB_PlayerAtt\022\n\n\002id\030\003 \001(\005\022\014\n\004name\030\004 \001("
    "\t\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\t\"]\n\020DCPr"
    "oto_SendMail\022\036\n\002sm\030\001 \001(\0132\022.NetProto_Send"
    "Mail\022\n\n\002id\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006U"
    "NITID\020\n\"\244\001\n\022DCProto_GetKeyGift\022\013\n\003key\030\001 "
    "\001(\t\022\n\n\002id\030\002 \001(\005\022\013\n\003res\030\003 \001(\005\022\014\n\004done\030\004 \001"
    "(\010\022\r\n\005event\030\005 \003(\005\022\r\n\005index\030\006 \003(\005\022\016\n\006role"
    "ID\030\007 \001(\003\022\r\n\005group\030\010 \001(\005\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\001\022\n\n\006UNITID\020\013\"\270\001\n\020DCProto_Recharge\022$\n\010r"
    "echarge\030\001 \001(\0132\022.NetProto_Recharge\022\n\n\002id\030"
    "\002 \001(\005\022\031\n\004info\030\003 \001(\0132\013.PlayerInfo\022\016\n\006role"
    "ID\030\004 \001(\003\022\013\n\003rmb\030\005 \001(\005\022\014\n\004over\030\006 \001(\010\022\r\n\005l"
    "evel\030\007 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020"
    "\014\"\333\001\n\022DCProto_CostRecord\022\014\n\004role\030\001 \001(\003\022\016"
    "\n\006reason\030\002 \001(\t\022\020\n\010rmbValue\030\003 \001(\005\022\013\n\003rmb\030"
    "\004 \001(\003\022\016\n\006subRMB\030\005 \001(\003\022\014\n\004arg1\030\006 \001(\005\022\014\n\004a"
    "rg2\030\007 \001(\005\022\031\n\004info\030\010 \001(\0132\013.PlayerInfo\022\r\n\005"
    "level\030\t \001(\005\022\023\n\013subrmbValue\030\n \001(\005\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\001\022\n\n\006UNITID\020\r\"e\n\024DCProto_Playe"
    "rStatus\022\n\n\002id\030\001 \001(\005\022\"\n\002ps\030\002 \001(\0132\026.NetPro"
    "to_PlayerStatus\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UN"
    "ITID\020\016\"\230\001\n\020DCProto_SaveChat\022\014\n\004type\030\001 \001("
    "\005\022\016\n\006sender\030\002 \001(\t\022\020\n\010receiver\030\003 \001(\t\022\017\n\007c"
    "ontent\030\004 \001(\t\022\020\n\010senderID\030\005 \001(\003\022\022\n\nreceiv"
    "erID\030\006 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020"
    "\017\"\206\001\n\021DCProto_GodTarget\022\n\n\002id\030\001 \001(\005\022\016\n\006r"
    "oleID\030\002 \001(\003\022\032\n\003att\030\003 \001(\0132\r.PB_PlayerAtt\022"
    "\013\n\003res\030\004 \001(\010\022\r\n\005event\030\005 \001(\005\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\001\022\n\n\006UNITID\020\020\"e\n\025DCProto_LoadPlayer"
    "Att\022\016\n\006roleID\030\001 \001(\003\022\014\n\004flag\030\002 \001(\010\022\017\n\007rol"
    "eID2\030\003 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020"
    "\021\"Y\n\027DCProto_LoadFriendsFans\022\016\n\006roleID\030\001"
    " \001(\003\022\017\n\007roleID2\030\002 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\001"
    "\022\n\n\006UNITID\020\022\"r\n\033DCProto_ModifyFixedEvent"
    "Bit\022\016\n\006roleID\030\001 \001(\003\022\n\n\002id\030\002 \001(\005\022\013\n\003bit\030\003"
    " \001(\005\022\013\n\003one\030\004 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006"
    "UNITID\020\023\"T\n\025DCProto_ModifyGodRank\022\016\n\006rol"
    "eID\030\001 \001(\003\022\014\n\004rank\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\001\022\n\n\006UNITID\020\024\"D\n\031DCProto_GodRankRecordI"
    "nfo\022\031\n\004info\030\001 \001(\0132\013.RecordInfo\022\014\n\004flag\030\002"
    " \001(\010\"\224\001\n\035DCProto_SaveGodRankInfoRecord\022)"
    "\n\005info1\030\001 \001(\0132\032.DCProto_GodRankRecordInf"
    "o\022)\n\005info2\030\002 \001(\0132\032.DCProto_GodRankRecord"
    "Info\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\025\"m\n\024D"
    "CProto_QueryGodRole\022\016\n\006roleID\030\001 \001(\003\022\032\n\003a"
    "tt\030\002 \001(\0132\r.PB_PlayerAtt\022\n\n\002id\030\003 \001(\005\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\026\"`\n\023DCProto_Ra"
    "ndomRoles\022\r\n\005count\030\001 \001(\005\022\033\n\004atts\030\002 \003(\0132\r"
    ".PB_PlayerAtt\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNIT"
    "ID\020\027\"m\n\033DCProto_SendMailExceptRoles\022\017\n\007r"
    "oleIDs\030\001 \003(\003\022\036\n\002sm\030\002 \001(\0132\022.NetProto_Send"
    "Mail\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\030\"\233\001\n\031"
    "DCProto_AddOutLineFriends\022\017\n\007roleID1\030\001 \001"
    "(\003\022\017\n\007roleID2\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022/\n\016pro"
    "fessionType\030\004 \001(\0162\027.PB_ProfessionInfo.Ty"
    "pe\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\031\"\201\001\n\030DC"
    "Proto_LoadHireRoleDate\022\016\n\006roleID\030\001 \003(\003\022\033"
    "\n\004atts\030\002 \003(\0132\r.PB_PlayerAtt\022\n\n\002id\030\003 \001(\005\022"
    "\r\n\005power\030\004 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNI"
    "TID\020\032\"Z\n\030DCProto_QueryRoleFaction\022\016\n\006rol"
    "eID\030\001 \003(\003\022\017\n\007faction\030\002 \003(\t\"\035\n\002ID\022\013\n\007GROU"
    "PID\020\001\022\n\n\006UNITID\020\033\"p\n\032DCProto_TencentBuyG"
    "oodsUrl\022\'\n\001v\030\001 \001(\0132\034.NetProto_TencentBuy"
    "GoodsUrl\022\n\n\002id\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\001\022"
    "\n\n\006UNITID\020\034\"S\n\014DCProto_Cost\022\t\n\001v\030\001 \001(\005\022\031"
    "\n\004info\030\002 \001(\0132\013.PlayerInfo\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\001\022\n\n\006UNITID\020\035\"\224\001\n\026DCProto_FilterRecha"
    "rge\022$\n\010recharge\030\001 \003(\0132\022.NetProto_Recharg"
    "e\022\n\n\002id\030\002 \001(\005\022\031\n\004info\030\003 \001(\0132\013.PlayerInfo"
    "\022\016\n\006roleID\030\004 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006U"
    "NITID\020\036\"T\n\016DCProto_SetVIP\022#\n\004info\030\001 \001(\0132"
    "\025.NetProto_GMModifyVIP\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\001\022\n\n\006UNITID\020\037\"F\n\030DCProto_CollectEquipmen"
    "t\022\013\n\003cur\030\001 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNI"
    "TID\020\000\"m\n\031DCProto_SaveEquipmentData\022\"\n\neq"
    "uipments\030\001 \003(\0132\016.EquipmentInfo\022\r\n\005owner\030"
    "\002 \003(\003\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\001\"i\n\031"
    "DCProto_LoadEquipmentData\022\n\n\002id\030\001 \003(\003\022!\n"
    "\tequipment\030\002 \003(\0132\016.EquipmentInfo\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\002\022\n\n\006UNITID\020\002\"H\n\033DCProto_Delet"
    "eEquipmentData\022\n\n\002id\030\001 \003(\003\"\035\n\002ID\022\013\n\007GROU"
    "PID\020\002\022\n\n\006UNITID\020\003\"v\n\026DCProto_QueryEquipm"
    "ent\022\016\n\006itemID\030\001 \001(\003\022!\n\tequipment\030\002 \001(\0132\016"
    ".EquipmentInfo\022\n\n\002id\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROU"
    "PID\020\002\022\n\n\006UNITID\020\004\"R\n\017DCProto_GMOrder\022 \n\005"
    "order\030\001 \001(\0132\021.NetProto_GMOrder\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\003\022\n\n\006UNITID\020\000\"\272\001\n\016DCProto_GMData"
    "\022\n\n\002id\030\001 \001(\005\022\016\n\006roleID\030\002 \001(\003\022\014\n\004name\030\003 \001"
    "(\t\022\r\n\005level\030\004 \001(\005\022\022\n\nprofession\030\005 \001(\005\022\021\n"
    "\tstartTime\030\006 \001(\005\022\017\n\007endTime\030\007 \001(\005\022\n\n\002GM\030"
    "\010 \001(\t\022\014\n\004flag\030\t \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n"
    "\n\006UNITID\020\001\"f\n\022DCProto_GMSaveData\022\037\n\006gmDa"
    "ta\030\001 \001(\0132\017.DCProto_GMData\022\020\n\010addOrDel\030\002 "
    "\001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\002\"T\n\022DC"
    "Proto_GMLoadData\022\037\n\006gmData\030\001 \003(\0132\017.DCPro"
    "to_GMData\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\003"
    "\"c\n\025DCProto_GMPlayerQuery\022\017\n\007account\030\001 \001"
    "(\t\022\032\n\003att\030\002 \001(\0132\r.PB_PlayerAtt\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\003\022\n\n\006UNITID\020\004\"k\n\025DCProto_GMChatR"
    "ecords\022\n\n\002id\030\001 \001(\005\022\'\n\006record\030\002 \001(\0132\027.Net"
    "Proto_GMChatRecords\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n"
    "\n\006UNITID\020\005\"m\n\026DCProto_GMRegistrCount\022\n\n\002"
    "id\030\001 \001(\005\022(\n\006record\030\002 \001(\0132\030.NetProto_GMRe"
    "gistrCount\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020"
    "\006\"g\n\023DCProto_GMRoleCount\022\n\n\002id\030\001 \001(\005\022%\n\006"
    "record\030\002 \001(\0132\025.NetProto_GMRoleCount\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\007\"s\n\031DCProto_GM"
    "LevelStatistics\022\n\n\002id\030\001 \001(\005\022+\n\006record\030\002 "
    "\001(\0132\033.NetProto_GMLevelStatistics\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\003\022\n\n\006UNITID\020\010\"Y\n\023DCProto_GMOpe"
    "nGuide\022#\n\004info\030\001 \001(\0132\025.NetProto_GMOpenGu"
    "ide\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\t\"\201\001\n\016D"
    "CProto_GMInfo\022\013\n\003key\030\001 \001(\005\022\014\n\004arg1\030\002 \001(\005"
    "\022\014\n\004arg2\030\003 \001(\005\022\014\n\004arg3\030\004 \001(\005\022\014\n\004str1\030\005 \001"
    "(\t\022\014\n\004str2\030\006 \001(\t\022\014\n\004str3\030\007 \001(\t\022\016\n\006roleID"
    "\030\010 \001(\003\"b\n\"DCProto_LoadAllDataFromGMDataT"
    "able\022\035\n\004info\030\001 \003(\0132\017.DCProto_GMInfo\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\n\"c\n\027DCProto_Sa"
    "veGMDataTable\022\035\n\004info\030\001 \003(\0132\017.DCProto_GM"
    "Info\022\n\n\002op\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006U"
    "NITID\020\013\"]\n\025DCProto_GMAddExchange\022%\n\004info"
    "\030\001 \001(\0132\027.NetProto_GMAddExchange\"\035\n\002ID\022\013\n"
    "\007GROUPID\020\003\022\n\n\006UNITID\020\014\"i\n\023DCProto_GMReko"
    "oRole\022&\n\004info\030\001 \001(\0132\030.NetProto_GMAddReko"
    "oRole\022\013\n\003str\030\002 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n"
    "\006UNITID\020\r\"S\n\025DCProto_GMAddRekooRMB\022\016\n\006ro"
    "leID\030\001 \001(\003\022\013\n\003rmb\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\003\022\n\n\006UNITID\020\016\"F\n\025DCProto_LoadRekooRole\022"
    "\016\n\006roleID\030\001 \003(\003\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UN"
    "ITID\020\017\"E\n\024DCProto_AddCodeCount\022\016\n\006roleID"
    "\030\001 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\020\"A\n"
    "\nInviteCode\022\016\n\006roleID\030\001 \001(\003\022\020\n\010selfCode\030"
    "\002 \001(\t\022\021\n\totherCode\030\003 \001(\t\"R\n\026DCProto_Load"
    "InviteCode\022\031\n\004info\030\001 \003(\0132\013.InviteCode\"\035\n"
    "\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\021\"b\n\026DCProto_"
    "QueryGMAccount\022\n\n\002id\030\001 \001(\005\022\035\n\002gm\030\002 \001(\0132\021"
    ".NetProto_GMLogin\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006"
    "UNITID\020\022\"\206\001\n\032DCProto_RegistDeviceServer\022"
    "\021\n\tdeviceNum\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\014\n\004idfa\030\003"
    " \001(\t\022\016\n\006noLine\030\004 \001(\010\022\014\n\004time\030\005 \001(\005\"\035\n\002ID"
    "\022\013\n\007GROUPID\020\004\022\n\n\006UNITID\020\000\"\301\001\n\023DCProto_Fa"
    "ctionData\022\023\n\013factionName\030\001 \001(\t\022\014\n\004name\030\002"
    " \001(\t\022\013\n\003num\030\003 \001(\005\022\013\n\003exp\030\004 \001(\003\022\020\n\010exp_ti"
    "me\030\005 \001(\005\022\014\n\004item\030\006 \001(\005\022\016\n\006notice\030\007 \001(\t\022\014"
    "\n\004team\030\010 \001(\t\022\020\n\010guardian\030\t \001(\t\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\005\022\n\n\006UNITID\020\000\"\\\n\027DCProto_Faction"
    "LoadData\022\"\n\004data\030\001 \003(\0132\024.DCProto_Faction"
    "Data\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\001\"\\\n\027D"
    "CProto_FactionSaveData\022\"\n\004data\030\001 \003(\0132\024.D"
    "CProto_FactionData\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n"
    "\006UNITID\020\002\"]\n\030DCProto_FactionAddRecord\022\"\n"
    "\004data\030\001 \001(\0132\024.DCProto_FactionData\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\003\"]\n\030DCProto_Fact"
    "ionDelRecord\022\"\n\004data\030\001 \001(\0132\024.DCProto_Fac"
    "tionData\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\004\""
    "`\n\033DCProto_FactionUpdateRecord\022\"\n\004data\030\001"
    " \001(\0132\024.DCProto_FactionData\"\035\n\002ID\022\013\n\007GROU"
    "PID\020\005\022\n\n\006UNITID\020\005\"W\n\031DCProto_SysFactionM"
    "emInfo\022\016\n\006roleID\030\001 \001(\003\022\013\n\003str\030\002 \001(\t\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\006\"\237\001\n\020DCProto_I"
    "nitRank\022!\n\004type\030\001 \001(\0162\023.NetProto_Rank.Ty"
    "pe\022\031\n\004rank\030\002 \003(\0132\013.RecordInfo\022 \n\013finalKi"
    "ller\030\003 \001(\0132\013.RecordInfo\022\014\n\004flag\030\004 \001(\010\"\035\n"
    "\002ID\022\013\n\007GROUPID\020\006\022\n\n\006UNITID\020\000\"i\n\025DCProto_"
    "PingPongAward\022!\n\004type\030\001 \001(\0162\023.NetProto_R"
    "ank.Type\022\016\n\006roleID\030\002 \001(\003\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\006\022\n\n\006UNITID\020\001\":\n\014FactionPower\022\013\n\003str\030\001"
    " \001(\t\022\016\n\006roleID\030\002 \003(\003\022\r\n\005power\030\003 \001(\003\"R\n\024D"
    "CProto_FactionPower\022\033\n\004info\030\001 \003(\0132\r.Fact"
    "ionPower\"\035\n\002ID\022\013\n\007GROUPID\020\006\022\n\n\006UNITID\020\002\""
    "k\n\027DCProto_PingPongQiuBiTe\022!\n\004type\030\001 \001(\016"
    "2\023.NetProto_Rank.Type\022\016\n\006roleID\030\002 \001(\003\"\035\n"
    "\002ID\022\013\n\007GROUPID\020\006\022\n\n\006UNITID\020\003", 8308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DCProto.proto", &protobuf_RegisterTypes);
  DCProto_SaveRoleData::default_instance_ = new DCProto_SaveRoleData();
  DCProto_DeleteRoleData::default_instance_ = new DCProto_DeleteRoleData();
  DCProto_LoadRoleData::default_instance_ = new DCProto_LoadRoleData();
  DCProto_CollectRole::default_instance_ = new DCProto_CollectRole();
  DCProto_AddAccount::default_instance_ = new DCProto_AddAccount();
  DCProto_AddRole::default_instance_ = new DCProto_AddRole();
  DCProto_SaveSingleRecord::default_instance_ = new DCProto_SaveSingleRecord();
  DCProto_HasName::default_instance_ = new DCProto_HasName();
  DCProto_Login::default_instance_ = new DCProto_Login();
  DCProto_QueryRole::default_instance_ = new DCProto_QueryRole();
  DCProto_SendMail::default_instance_ = new DCProto_SendMail();
  DCProto_GetKeyGift::default_instance_ = new DCProto_GetKeyGift();
  DCProto_Recharge::default_instance_ = new DCProto_Recharge();
  DCProto_CostRecord::default_instance_ = new DCProto_CostRecord();
  DCProto_PlayerStatus::default_instance_ = new DCProto_PlayerStatus();
  DCProto_SaveChat::default_instance_ = new DCProto_SaveChat();
  DCProto_GodTarget::default_instance_ = new DCProto_GodTarget();
  DCProto_LoadPlayerAtt::default_instance_ = new DCProto_LoadPlayerAtt();
  DCProto_LoadFriendsFans::default_instance_ = new DCProto_LoadFriendsFans();
  DCProto_ModifyFixedEventBit::default_instance_ = new DCProto_ModifyFixedEventBit();
  DCProto_ModifyGodRank::default_instance_ = new DCProto_ModifyGodRank();
  DCProto_GodRankRecordInfo::default_instance_ = new DCProto_GodRankRecordInfo();
  DCProto_SaveGodRankInfoRecord::default_instance_ = new DCProto_SaveGodRankInfoRecord();
  DCProto_QueryGodRole::default_instance_ = new DCProto_QueryGodRole();
  DCProto_RandomRoles::default_instance_ = new DCProto_RandomRoles();
  DCProto_SendMailExceptRoles::default_instance_ = new DCProto_SendMailExceptRoles();
  DCProto_AddOutLineFriends::default_instance_ = new DCProto_AddOutLineFriends();
  DCProto_LoadHireRoleDate::default_instance_ = new DCProto_LoadHireRoleDate();
  DCProto_QueryRoleFaction::default_instance_ = new DCProto_QueryRoleFaction();
  DCProto_TencentBuyGoodsUrl::default_instance_ = new DCProto_TencentBuyGoodsUrl();
  DCProto_Cost::default_instance_ = new DCProto_Cost();
  DCProto_FilterRecharge::default_instance_ = new DCProto_FilterRecharge();
  DCProto_SetVIP::default_instance_ = new DCProto_SetVIP();
  DCProto_CollectEquipment::default_instance_ = new DCProto_CollectEquipment();
  DCProto_SaveEquipmentData::default_instance_ = new DCProto_SaveEquipmentData();
  DCProto_LoadEquipmentData::default_instance_ = new DCProto_LoadEquipmentData();
  DCProto_DeleteEquipmentData::default_instance_ = new DCProto_DeleteEquipmentData();
  DCProto_QueryEquipment::default_instance_ = new DCProto_QueryEquipment();
  DCProto_GMOrder::default_instance_ = new DCProto_GMOrder();
  DCProto_GMData::default_instance_ = new DCProto_GMData();
  DCProto_GMSaveData::default_instance_ = new DCProto_GMSaveData();
  DCProto_GMLoadData::default_instance_ = new DCProto_GMLoadData();
  DCProto_GMPlayerQuery::default_instance_ = new DCProto_GMPlayerQuery();
  DCProto_GMChatRecords::default_instance_ = new DCProto_GMChatRecords();
  DCProto_GMRegistrCount::default_instance_ = new DCProto_GMRegistrCount();
  DCProto_GMRoleCount::default_instance_ = new DCProto_GMRoleCount();
  DCProto_GMLevelStatistics::default_instance_ = new DCProto_GMLevelStatistics();
  DCProto_GMOpenGuide::default_instance_ = new DCProto_GMOpenGuide();
  DCProto_GMInfo::default_instance_ = new DCProto_GMInfo();
  DCProto_LoadAllDataFromGMDataTable::default_instance_ = new DCProto_LoadAllDataFromGMDataTable();
  DCProto_SaveGMDataTable::default_instance_ = new DCProto_SaveGMDataTable();
  DCProto_GMAddExchange::default_instance_ = new DCProto_GMAddExchange();
  DCProto_GMRekooRole::default_instance_ = new DCProto_GMRekooRole();
  DCProto_GMAddRekooRMB::default_instance_ = new DCProto_GMAddRekooRMB();
  DCProto_LoadRekooRole::default_instance_ = new DCProto_LoadRekooRole();
  DCProto_AddCodeCount::default_instance_ = new DCProto_AddCodeCount();
  InviteCode::default_instance_ = new InviteCode();
  DCProto_LoadInviteCode::default_instance_ = new DCProto_LoadInviteCode();
  DCProto_QueryGMAccount::default_instance_ = new DCProto_QueryGMAccount();
  DCProto_RegistDeviceServer::default_instance_ = new DCProto_RegistDeviceServer();
  DCProto_FactionData::default_instance_ = new DCProto_FactionData();
  DCProto_FactionLoadData::default_instance_ = new DCProto_FactionLoadData();
  DCProto_FactionSaveData::default_instance_ = new DCProto_FactionSaveData();
  DCProto_FactionAddRecord::default_instance_ = new DCProto_FactionAddRecord();
  DCProto_FactionDelRecord::default_instance_ = new DCProto_FactionDelRecord();
  DCProto_FactionUpdateRecord::default_instance_ = new DCProto_FactionUpdateRecord();
  DCProto_SysFactionMemInfo::default_instance_ = new DCProto_SysFactionMemInfo();
  DCProto_InitRank::default_instance_ = new DCProto_InitRank();
  DCProto_PingPongAward::default_instance_ = new DCProto_PingPongAward();
  FactionPower::default_instance_ = new FactionPower();
  DCProto_FactionPower::default_instance_ = new DCProto_FactionPower();
  DCProto_PingPongQiuBiTe::default_instance_ = new DCProto_PingPongQiuBiTe();
  DCProto_SaveRoleData::default_instance_->InitAsDefaultInstance();
  DCProto_DeleteRoleData::default_instance_->InitAsDefaultInstance();
  DCProto_LoadRoleData::default_instance_->InitAsDefaultInstance();
  DCProto_CollectRole::default_instance_->InitAsDefaultInstance();
  DCProto_AddAccount::default_instance_->InitAsDefaultInstance();
  DCProto_AddRole::default_instance_->InitAsDefaultInstance();
  DCProto_SaveSingleRecord::default_instance_->InitAsDefaultInstance();
  DCProto_HasName::default_instance_->InitAsDefaultInstance();
  DCProto_Login::default_instance_->InitAsDefaultInstance();
  DCProto_QueryRole::default_instance_->InitAsDefaultInstance();
  DCProto_SendMail::default_instance_->InitAsDefaultInstance();
  DCProto_GetKeyGift::default_instance_->InitAsDefaultInstance();
  DCProto_Recharge::default_instance_->InitAsDefaultInstance();
  DCProto_CostRecord::default_instance_->InitAsDefaultInstance();
  DCProto_PlayerStatus::default_instance_->InitAsDefaultInstance();
  DCProto_SaveChat::default_instance_->InitAsDefaultInstance();
  DCProto_GodTarget::default_instance_->InitAsDefaultInstance();
  DCProto_LoadPlayerAtt::default_instance_->InitAsDefaultInstance();
  DCProto_LoadFriendsFans::default_instance_->InitAsDefaultInstance();
  DCProto_ModifyFixedEventBit::default_instance_->InitAsDefaultInstance();
  DCProto_ModifyGodRank::default_instance_->InitAsDefaultInstance();
  DCProto_GodRankRecordInfo::default_instance_->InitAsDefaultInstance();
  DCProto_SaveGodRankInfoRecord::default_instance_->InitAsDefaultInstance();
  DCProto_QueryGodRole::default_instance_->InitAsDefaultInstance();
  DCProto_RandomRoles::default_instance_->InitAsDefaultInstance();
  DCProto_SendMailExceptRoles::default_instance_->InitAsDefaultInstance();
  DCProto_AddOutLineFriends::default_instance_->InitAsDefaultInstance();
  DCProto_LoadHireRoleDate::default_instance_->InitAsDefaultInstance();
  DCProto_QueryRoleFaction::default_instance_->InitAsDefaultInstance();
  DCProto_TencentBuyGoodsUrl::default_instance_->InitAsDefaultInstance();
  DCProto_Cost::default_instance_->InitAsDefaultInstance();
  DCProto_FilterRecharge::default_instance_->InitAsDefaultInstance();
  DCProto_SetVIP::default_instance_->InitAsDefaultInstance();
  DCProto_CollectEquipment::default_instance_->InitAsDefaultInstance();
  DCProto_SaveEquipmentData::default_instance_->InitAsDefaultInstance();
  DCProto_LoadEquipmentData::default_instance_->InitAsDefaultInstance();
  DCProto_DeleteEquipmentData::default_instance_->InitAsDefaultInstance();
  DCProto_QueryEquipment::default_instance_->InitAsDefaultInstance();
  DCProto_GMOrder::default_instance_->InitAsDefaultInstance();
  DCProto_GMData::default_instance_->InitAsDefaultInstance();
  DCProto_GMSaveData::default_instance_->InitAsDefaultInstance();
  DCProto_GMLoadData::default_instance_->InitAsDefaultInstance();
  DCProto_GMPlayerQuery::default_instance_->InitAsDefaultInstance();
  DCProto_GMChatRecords::default_instance_->InitAsDefaultInstance();
  DCProto_GMRegistrCount::default_instance_->InitAsDefaultInstance();
  DCProto_GMRoleCount::default_instance_->InitAsDefaultInstance();
  DCProto_GMLevelStatistics::default_instance_->InitAsDefaultInstance();
  DCProto_GMOpenGuide::default_instance_->InitAsDefaultInstance();
  DCProto_GMInfo::default_instance_->InitAsDefaultInstance();
  DCProto_LoadAllDataFromGMDataTable::default_instance_->InitAsDefaultInstance();
  DCProto_SaveGMDataTable::default_instance_->InitAsDefaultInstance();
  DCProto_GMAddExchange::default_instance_->InitAsDefaultInstance();
  DCProto_GMRekooRole::default_instance_->InitAsDefaultInstance();
  DCProto_GMAddRekooRMB::default_instance_->InitAsDefaultInstance();
  DCProto_LoadRekooRole::default_instance_->InitAsDefaultInstance();
  DCProto_AddCodeCount::default_instance_->InitAsDefaultInstance();
  InviteCode::default_instance_->InitAsDefaultInstance();
  DCProto_LoadInviteCode::default_instance_->InitAsDefaultInstance();
  DCProto_QueryGMAccount::default_instance_->InitAsDefaultInstance();
  DCProto_RegistDeviceServer::default_instance_->InitAsDefaultInstance();
  DCProto_FactionData::default_instance_->InitAsDefaultInstance();
  DCProto_FactionLoadData::default_instance_->InitAsDefaultInstance();
  DCProto_FactionSaveData::default_instance_->InitAsDefaultInstance();
  DCProto_FactionAddRecord::default_instance_->InitAsDefaultInstance();
  DCProto_FactionDelRecord::default_instance_->InitAsDefaultInstance();
  DCProto_FactionUpdateRecord::default_instance_->InitAsDefaultInstance();
  DCProto_SysFactionMemInfo::default_instance_->InitAsDefaultInstance();
  DCProto_InitRank::default_instance_->InitAsDefaultInstance();
  DCProto_PingPongAward::default_instance_->InitAsDefaultInstance();
  FactionPower::default_instance_->InitAsDefaultInstance();
  DCProto_FactionPower::default_instance_->InitAsDefaultInstance();
  DCProto_PingPongQiuBiTe::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DCProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DCProto_2eproto {
  StaticDescriptorInitializer_DCProto_2eproto() {
    protobuf_AddDesc_DCProto_2eproto();
  }
} static_descriptor_initializer_DCProto_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SaveRoleData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveRoleData_ID_descriptor_;
}
bool DCProto_SaveRoleData_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SaveRoleData_ID DCProto_SaveRoleData::GROUPID;
const DCProto_SaveRoleData_ID DCProto_SaveRoleData::UNITID;
const DCProto_SaveRoleData_ID DCProto_SaveRoleData::ID_MIN;
const DCProto_SaveRoleData_ID DCProto_SaveRoleData::ID_MAX;
const int DCProto_SaveRoleData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SaveRoleData::kDataFieldNumber;
const int DCProto_SaveRoleData::kInfoFieldNumber;
#endif  // !_MSC_VER

DCProto_SaveRoleData::DCProto_SaveRoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SaveRoleData::InitAsDefaultInstance() {
}

DCProto_SaveRoleData::DCProto_SaveRoleData(const DCProto_SaveRoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SaveRoleData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SaveRoleData::~DCProto_SaveRoleData() {
  SharedDtor();
}

void DCProto_SaveRoleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_SaveRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SaveRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveRoleData_descriptor_;
}

const DCProto_SaveRoleData& DCProto_SaveRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SaveRoleData* DCProto_SaveRoleData::default_instance_ = NULL;

DCProto_SaveRoleData* DCProto_SaveRoleData::New() const {
  return new DCProto_SaveRoleData;
}

void DCProto_SaveRoleData::Clear() {
  data_.Clear();
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SaveRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_PlayerAtt data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // repeated .PlayerInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SaveRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_PlayerAtt data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  // repeated .PlayerInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SaveRoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_PlayerAtt data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  // repeated .PlayerInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SaveRoleData::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_PlayerAtt data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  // repeated .PlayerInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SaveRoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SaveRoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SaveRoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SaveRoleData::MergeFrom(const DCProto_SaveRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SaveRoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SaveRoleData::CopyFrom(const DCProto_SaveRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SaveRoleData::IsInitialized() const {
  
  return true;
}

void DCProto_SaveRoleData::Swap(DCProto_SaveRoleData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SaveRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SaveRoleData_descriptor_;
  metadata.reflection = DCProto_SaveRoleData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_DeleteRoleData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_DeleteRoleData_ID_descriptor_;
}
bool DCProto_DeleteRoleData_ID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_DeleteRoleData_ID DCProto_DeleteRoleData::GROUPID;
const DCProto_DeleteRoleData_ID DCProto_DeleteRoleData::UNITID;
const DCProto_DeleteRoleData_ID DCProto_DeleteRoleData::ID_MIN;
const DCProto_DeleteRoleData_ID DCProto_DeleteRoleData::ID_MAX;
const int DCProto_DeleteRoleData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_DeleteRoleData::kAccountFieldNumber;
const int DCProto_DeleteRoleData::kIdFieldNumber;
const int DCProto_DeleteRoleData::kEquipmentsFieldNumber;
const int DCProto_DeleteRoleData::kPlatformFieldNumber;
#endif  // !_MSC_VER

DCProto_DeleteRoleData::DCProto_DeleteRoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_DeleteRoleData::InitAsDefaultInstance() {
}

DCProto_DeleteRoleData::DCProto_DeleteRoleData(const DCProto_DeleteRoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_DeleteRoleData::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = GOOGLE_LONGLONG(0);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_DeleteRoleData::~DCProto_DeleteRoleData() {
  SharedDtor();
}

void DCProto_DeleteRoleData::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_DeleteRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_DeleteRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_DeleteRoleData_descriptor_;
}

const DCProto_DeleteRoleData& DCProto_DeleteRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_DeleteRoleData* DCProto_DeleteRoleData::default_instance_ = NULL;

DCProto_DeleteRoleData* DCProto_DeleteRoleData::New() const {
  return new DCProto_DeleteRoleData;
}

void DCProto_DeleteRoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    id_ = GOOGLE_LONGLONG(0);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
  }
  equipments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_DeleteRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipments;
        break;
      }
      
      // repeated int64 equipments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_equipments())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_equipments())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipments;
        if (input->ExpectTag(34)) goto parse_platform;
        break;
      }
      
      // optional string platform = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_DeleteRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }
  
  // repeated int64 equipments = 3;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->equipments(i), output);
  }
  
  // optional string platform = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->platform(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_DeleteRoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }
  
  // repeated int64 equipments = 3;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->equipments(i), target);
  }
  
  // optional string platform = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platform(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_DeleteRoleData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string platform = 4;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
  }
  // repeated int64 equipments = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipments_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->equipments(i));
    }
    total_size += 1 * this->equipments_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_DeleteRoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_DeleteRoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_DeleteRoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_DeleteRoleData::MergeFrom(const DCProto_DeleteRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipments_.MergeFrom(from.equipments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_DeleteRoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_DeleteRoleData::CopyFrom(const DCProto_DeleteRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_DeleteRoleData::IsInitialized() const {
  
  return true;
}

void DCProto_DeleteRoleData::Swap(DCProto_DeleteRoleData* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(id_, other->id_);
    equipments_.Swap(&other->equipments_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_DeleteRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_DeleteRoleData_descriptor_;
  metadata.reflection = DCProto_DeleteRoleData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_LoadRoleData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadRoleData_ID_descriptor_;
}
bool DCProto_LoadRoleData_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_LoadRoleData_ID DCProto_LoadRoleData::GROUPID;
const DCProto_LoadRoleData_ID DCProto_LoadRoleData::UNITID;
const DCProto_LoadRoleData_ID DCProto_LoadRoleData::ID_MIN;
const DCProto_LoadRoleData_ID DCProto_LoadRoleData::ID_MAX;
const int DCProto_LoadRoleData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_LoadRoleData::kAccountFieldNumber;
const int DCProto_LoadRoleData::kDataFieldNumber;
const int DCProto_LoadRoleData::kPrevRoleFieldNumber;
const int DCProto_LoadRoleData::kPlatformFieldNumber;
#endif  // !_MSC_VER

DCProto_LoadRoleData::DCProto_LoadRoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_LoadRoleData::InitAsDefaultInstance() {
}

DCProto_LoadRoleData::DCProto_LoadRoleData(const DCProto_LoadRoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_LoadRoleData::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prevRole_ = GOOGLE_LONGLONG(0);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_LoadRoleData::~DCProto_LoadRoleData() {
  SharedDtor();
}

void DCProto_LoadRoleData::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_LoadRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_LoadRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadRoleData_descriptor_;
}

const DCProto_LoadRoleData& DCProto_LoadRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_LoadRoleData* DCProto_LoadRoleData::default_instance_ = NULL;

DCProto_LoadRoleData* DCProto_LoadRoleData::New() const {
  return new DCProto_LoadRoleData;
}

void DCProto_LoadRoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    prevRole_ = GOOGLE_LONGLONG(0);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_LoadRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // repeated .PB_PlayerAtt data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_prevRole;
        break;
      }
      
      // optional int64 prevRole = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevRole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prevRole_)));
          set_has_prevRole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_platform;
        break;
      }
      
      // optional string platform = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_LoadRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // repeated .PB_PlayerAtt data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }
  
  // optional int64 prevRole = 3;
  if (has_prevRole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->prevRole(), output);
  }
  
  // optional string platform = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->platform(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_LoadRoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // repeated .PB_PlayerAtt data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }
  
  // optional int64 prevRole = 3;
  if (has_prevRole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->prevRole(), target);
  }
  
  // optional string platform = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platform(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_LoadRoleData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional int64 prevRole = 3;
    if (has_prevRole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prevRole());
    }
    
    // optional string platform = 4;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
  }
  // repeated .PB_PlayerAtt data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_LoadRoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_LoadRoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_LoadRoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_LoadRoleData::MergeFrom(const DCProto_LoadRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_prevRole()) {
      set_prevRole(from.prevRole());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_LoadRoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_LoadRoleData::CopyFrom(const DCProto_LoadRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_LoadRoleData::IsInitialized() const {
  
  return true;
}

void DCProto_LoadRoleData::Swap(DCProto_LoadRoleData* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    data_.Swap(&other->data_);
    std::swap(prevRole_, other->prevRole_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_LoadRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_LoadRoleData_descriptor_;
  metadata.reflection = DCProto_LoadRoleData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_CollectRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_CollectRole_ID_descriptor_;
}
bool DCProto_CollectRole_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_CollectRole_ID DCProto_CollectRole::GROUPID;
const DCProto_CollectRole_ID DCProto_CollectRole::UNITID;
const DCProto_CollectRole_ID DCProto_CollectRole::ID_MIN;
const DCProto_CollectRole_ID DCProto_CollectRole::ID_MAX;
const int DCProto_CollectRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_CollectRole::kCurFieldNumber;
const int DCProto_CollectRole::kSingleRecordFieldNumber;
const int DCProto_CollectRole::kRestrictionFieldNumber;
const int DCProto_CollectRole::kGodInfoTimeFieldNumber;
const int DCProto_CollectRole::kWinFactionInfoFieldNumber;
const int DCProto_CollectRole::kFactionInfoFieldNumber;
#endif  // !_MSC_VER

DCProto_CollectRole::DCProto_CollectRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_CollectRole::InitAsDefaultInstance() {
  GodInfoTime_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
  winFactionInfo_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
}

DCProto_CollectRole::DCProto_CollectRole(const DCProto_CollectRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_CollectRole::SharedCtor() {
  _cached_size_ = 0;
  cur_ = GOOGLE_LONGLONG(0);
  GodInfoTime_ = NULL;
  winFactionInfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_CollectRole::~DCProto_CollectRole() {
  SharedDtor();
}

void DCProto_CollectRole::SharedDtor() {
  if (this != default_instance_) {
    delete GodInfoTime_;
    delete winFactionInfo_;
  }
}

void DCProto_CollectRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_CollectRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_CollectRole_descriptor_;
}

const DCProto_CollectRole& DCProto_CollectRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_CollectRole* DCProto_CollectRole::default_instance_ = NULL;

DCProto_CollectRole* DCProto_CollectRole::New() const {
  return new DCProto_CollectRole;
}

void DCProto_CollectRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_ = GOOGLE_LONGLONG(0);
    if (has_GodInfoTime()) {
      if (GodInfoTime_ != NULL) GodInfoTime_->::RecordInfo::Clear();
    }
    if (has_winFactionInfo()) {
      if (winFactionInfo_ != NULL) winFactionInfo_->::RecordInfo::Clear();
    }
  }
  singleRecord_.Clear();
  Restriction_.Clear();
  factionInfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_CollectRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cur = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_singleRecord;
        break;
      }
      
      // repeated .RecordInfo singleRecord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singleRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singleRecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_singleRecord;
        if (input->ExpectTag(26)) goto parse_Restriction;
        break;
      }
      
      // repeated .RecordInfo Restriction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Restriction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_Restriction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Restriction;
        if (input->ExpectTag(34)) goto parse_GodInfoTime;
        break;
      }
      
      // optional .RecordInfo GodInfoTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GodInfoTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_GodInfoTime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_winFactionInfo;
        break;
      }
      
      // optional .RecordInfo winFactionInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winFactionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winFactionInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_factionInfo;
        break;
      }
      
      // repeated .RecordInfo factionInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_factionInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_factionInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_CollectRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cur = 1;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cur(), output);
  }
  
  // repeated .RecordInfo singleRecord = 2;
  for (int i = 0; i < this->singleRecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->singleRecord(i), output);
  }
  
  // repeated .RecordInfo Restriction = 3;
  for (int i = 0; i < this->Restriction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->Restriction(i), output);
  }
  
  // optional .RecordInfo GodInfoTime = 4;
  if (has_GodInfoTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->GodInfoTime(), output);
  }
  
  // optional .RecordInfo winFactionInfo = 5;
  if (has_winFactionInfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->winFactionInfo(), output);
  }
  
  // repeated .RecordInfo factionInfo = 6;
  for (int i = 0; i < this->factionInfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->factionInfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_CollectRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cur = 1;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cur(), target);
  }
  
  // repeated .RecordInfo singleRecord = 2;
  for (int i = 0; i < this->singleRecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->singleRecord(i), target);
  }
  
  // repeated .RecordInfo Restriction = 3;
  for (int i = 0; i < this->Restriction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->Restriction(i), target);
  }
  
  // optional .RecordInfo GodInfoTime = 4;
  if (has_GodInfoTime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->GodInfoTime(), target);
  }
  
  // optional .RecordInfo winFactionInfo = 5;
  if (has_winFactionInfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->winFactionInfo(), target);
  }
  
  // repeated .RecordInfo factionInfo = 6;
  for (int i = 0; i < this->factionInfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->factionInfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_CollectRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cur = 1;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur());
    }
    
    // optional .RecordInfo GodInfoTime = 4;
    if (has_GodInfoTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->GodInfoTime());
    }
    
    // optional .RecordInfo winFactionInfo = 5;
    if (has_winFactionInfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winFactionInfo());
    }
    
  }
  // repeated .RecordInfo singleRecord = 2;
  total_size += 1 * this->singleRecord_size();
  for (int i = 0; i < this->singleRecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->singleRecord(i));
  }
  
  // repeated .RecordInfo Restriction = 3;
  total_size += 1 * this->Restriction_size();
  for (int i = 0; i < this->Restriction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->Restriction(i));
  }
  
  // repeated .RecordInfo factionInfo = 6;
  total_size += 1 * this->factionInfo_size();
  for (int i = 0; i < this->factionInfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->factionInfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_CollectRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_CollectRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_CollectRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_CollectRole::MergeFrom(const DCProto_CollectRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  singleRecord_.MergeFrom(from.singleRecord_);
  Restriction_.MergeFrom(from.Restriction_);
  factionInfo_.MergeFrom(from.factionInfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_GodInfoTime()) {
      mutable_GodInfoTime()->::RecordInfo::MergeFrom(from.GodInfoTime());
    }
    if (from.has_winFactionInfo()) {
      mutable_winFactionInfo()->::RecordInfo::MergeFrom(from.winFactionInfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_CollectRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_CollectRole::CopyFrom(const DCProto_CollectRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_CollectRole::IsInitialized() const {
  
  return true;
}

void DCProto_CollectRole::Swap(DCProto_CollectRole* other) {
  if (other != this) {
    std::swap(cur_, other->cur_);
    singleRecord_.Swap(&other->singleRecord_);
    Restriction_.Swap(&other->Restriction_);
    std::swap(GodInfoTime_, other->GodInfoTime_);
    std::swap(winFactionInfo_, other->winFactionInfo_);
    factionInfo_.Swap(&other->factionInfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_CollectRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_CollectRole_descriptor_;
  metadata.reflection = DCProto_CollectRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_AddAccount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_AddAccount_ID_descriptor_;
}
bool DCProto_AddAccount_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_AddAccount_ID DCProto_AddAccount::GROUPID;
const DCProto_AddAccount_ID DCProto_AddAccount::UNITID;
const DCProto_AddAccount_ID DCProto_AddAccount::ID_MIN;
const DCProto_AddAccount_ID DCProto_AddAccount::ID_MAX;
const int DCProto_AddAccount::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_AddAccount::kInfoFieldNumber;
const int DCProto_AddAccount::kResFieldNumber;
const int DCProto_AddAccount::kIdFieldNumber;
const int DCProto_AddAccount::kIpFieldNumber;
#endif  // !_MSC_VER

DCProto_AddAccount::DCProto_AddAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_AddAccount::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerInfo*>(&::PlayerInfo::default_instance());
}

DCProto_AddAccount::DCProto_AddAccount(const DCProto_AddAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_AddAccount::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  res_ = false;
  id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_AddAccount::~DCProto_AddAccount() {
  SharedDtor();
}

void DCProto_AddAccount::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void DCProto_AddAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_AddAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_AddAccount_descriptor_;
}

const DCProto_AddAccount& DCProto_AddAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_AddAccount* DCProto_AddAccount::default_instance_ = NULL;

DCProto_AddAccount* DCProto_AddAccount::New() const {
  return new DCProto_AddAccount;
}

void DCProto_AddAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::Clear();
    }
    res_ = false;
    id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_AddAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }
      
      // optional bool res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_AddAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional bool res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->res(), output);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_AddAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional bool res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->res(), target);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_AddAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional bool res = 2;
    if (has_res()) {
      total_size += 1 + 1;
    }
    
    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_AddAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_AddAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_AddAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_AddAccount::MergeFrom(const DCProto_AddAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MergeFrom(from.info());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_AddAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_AddAccount::CopyFrom(const DCProto_AddAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_AddAccount::IsInitialized() const {
  
  return true;
}

void DCProto_AddAccount::Swap(DCProto_AddAccount* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(res_, other->res_);
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_AddAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_AddAccount_descriptor_;
  metadata.reflection = DCProto_AddAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_AddRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_AddRole_ID_descriptor_;
}
bool DCProto_AddRole_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_AddRole_ID DCProto_AddRole::GROUPID;
const DCProto_AddRole_ID DCProto_AddRole::UNITID;
const DCProto_AddRole_ID DCProto_AddRole::ID_MIN;
const DCProto_AddRole_ID DCProto_AddRole::ID_MAX;
const int DCProto_AddRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_AddRole::kInfoFieldNumber;
const int DCProto_AddRole::kDataFieldNumber;
#endif  // !_MSC_VER

DCProto_AddRole::DCProto_AddRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_AddRole::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerInfo*>(&::PlayerInfo::default_instance());
  data_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

DCProto_AddRole::DCProto_AddRole(const DCProto_AddRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_AddRole::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_AddRole::~DCProto_AddRole() {
  SharedDtor();
}

void DCProto_AddRole::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete data_;
  }
}

void DCProto_AddRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_AddRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_AddRole_descriptor_;
}

const DCProto_AddRole& DCProto_AddRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_AddRole* DCProto_AddRole::default_instance_ = NULL;

DCProto_AddRole* DCProto_AddRole::New() const {
  return new DCProto_AddRole;
}

void DCProto_AddRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::PB_PlayerAtt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_AddRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional .PB_PlayerAtt data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_AddRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional .PB_PlayerAtt data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_AddRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional .PB_PlayerAtt data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_AddRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional .PB_PlayerAtt data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_AddRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_AddRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_AddRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_AddRole::MergeFrom(const DCProto_AddRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MergeFrom(from.info());
    }
    if (from.has_data()) {
      mutable_data()->::PB_PlayerAtt::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_AddRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_AddRole::CopyFrom(const DCProto_AddRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_AddRole::IsInitialized() const {
  
  return true;
}

void DCProto_AddRole::Swap(DCProto_AddRole* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_AddRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_AddRole_descriptor_;
  metadata.reflection = DCProto_AddRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SaveSingleRecord_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveSingleRecord_ID_descriptor_;
}
bool DCProto_SaveSingleRecord_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SaveSingleRecord_ID DCProto_SaveSingleRecord::GROUPID;
const DCProto_SaveSingleRecord_ID DCProto_SaveSingleRecord::UNITID;
const DCProto_SaveSingleRecord_ID DCProto_SaveSingleRecord::ID_MIN;
const DCProto_SaveSingleRecord_ID DCProto_SaveSingleRecord::ID_MAX;
const int DCProto_SaveSingleRecord::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SaveSingleRecord::kMapIDFieldNumber;
const int DCProto_SaveSingleRecord::kRecordFieldNumber;
#endif  // !_MSC_VER

DCProto_SaveSingleRecord::DCProto_SaveSingleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SaveSingleRecord::InitAsDefaultInstance() {
  record_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
}

DCProto_SaveSingleRecord::DCProto_SaveSingleRecord(const DCProto_SaveSingleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SaveSingleRecord::SharedCtor() {
  _cached_size_ = 0;
  mapID_ = 0;
  record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SaveSingleRecord::~DCProto_SaveSingleRecord() {
  SharedDtor();
}

void DCProto_SaveSingleRecord::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void DCProto_SaveSingleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SaveSingleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveSingleRecord_descriptor_;
}

const DCProto_SaveSingleRecord& DCProto_SaveSingleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SaveSingleRecord* DCProto_SaveSingleRecord::default_instance_ = NULL;

DCProto_SaveSingleRecord* DCProto_SaveSingleRecord::New() const {
  return new DCProto_SaveSingleRecord;
}

void DCProto_SaveSingleRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapID_ = 0;
    if (has_record()) {
      if (record_ != NULL) record_->::RecordInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SaveSingleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapID_)));
          set_has_mapID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }
      
      // optional .RecordInfo record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SaveSingleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mapID = 1;
  if (has_mapID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapID(), output);
  }
  
  // optional .RecordInfo record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SaveSingleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mapID = 1;
  if (has_mapID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapID(), target);
  }
  
  // optional .RecordInfo record = 2;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SaveSingleRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mapID = 1;
    if (has_mapID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapID());
    }
    
    // optional .RecordInfo record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SaveSingleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SaveSingleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SaveSingleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SaveSingleRecord::MergeFrom(const DCProto_SaveSingleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapID()) {
      set_mapID(from.mapID());
    }
    if (from.has_record()) {
      mutable_record()->::RecordInfo::MergeFrom(from.record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SaveSingleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SaveSingleRecord::CopyFrom(const DCProto_SaveSingleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SaveSingleRecord::IsInitialized() const {
  
  return true;
}

void DCProto_SaveSingleRecord::Swap(DCProto_SaveSingleRecord* other) {
  if (other != this) {
    std::swap(mapID_, other->mapID_);
    std::swap(record_, other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SaveSingleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SaveSingleRecord_descriptor_;
  metadata.reflection = DCProto_SaveSingleRecord_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_HasName_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_HasName_ID_descriptor_;
}
bool DCProto_HasName_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_HasName_ID DCProto_HasName::GROUPID;
const DCProto_HasName_ID DCProto_HasName::UNITID;
const DCProto_HasName_ID DCProto_HasName::ID_MIN;
const DCProto_HasName_ID DCProto_HasName::ID_MAX;
const int DCProto_HasName::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_HasName::kCrFieldNumber;
const int DCProto_HasName::kIdFieldNumber;
const int DCProto_HasName::kHasFieldNumber;
#endif  // !_MSC_VER

DCProto_HasName::DCProto_HasName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_HasName::InitAsDefaultInstance() {
  cr_ = const_cast< ::NetProto_CreateRole*>(&::NetProto_CreateRole::default_instance());
}

DCProto_HasName::DCProto_HasName(const DCProto_HasName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_HasName::SharedCtor() {
  _cached_size_ = 0;
  cr_ = NULL;
  id_ = 0;
  has_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_HasName::~DCProto_HasName() {
  SharedDtor();
}

void DCProto_HasName::SharedDtor() {
  if (this != default_instance_) {
    delete cr_;
  }
}

void DCProto_HasName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_HasName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_HasName_descriptor_;
}

const DCProto_HasName& DCProto_HasName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_HasName* DCProto_HasName::default_instance_ = NULL;

DCProto_HasName* DCProto_HasName::New() const {
  return new DCProto_HasName;
}

void DCProto_HasName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cr()) {
      if (cr_ != NULL) cr_->::NetProto_CreateRole::Clear();
    }
    id_ = 0;
    has_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_HasName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_CreateRole cr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has;
        break;
      }
      
      // optional bool has = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_)));
          set_has_has();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_HasName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_CreateRole cr = 1;
  if (has_cr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cr(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional bool has = 3;
  if (has_has()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_HasName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_CreateRole cr = 1;
  if (has_cr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cr(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional bool has = 3;
  if (has_has()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_HasName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_CreateRole cr = 1;
    if (has_cr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cr());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool has = 3;
    if (has_has()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_HasName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_HasName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_HasName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_HasName::MergeFrom(const DCProto_HasName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cr()) {
      mutable_cr()->::NetProto_CreateRole::MergeFrom(from.cr());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_has()) {
      set_has(from.has());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_HasName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_HasName::CopyFrom(const DCProto_HasName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_HasName::IsInitialized() const {
  
  return true;
}

void DCProto_HasName::Swap(DCProto_HasName* other) {
  if (other != this) {
    std::swap(cr_, other->cr_);
    std::swap(id_, other->id_);
    std::swap(has_, other->has_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_HasName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_HasName_descriptor_;
  metadata.reflection = DCProto_HasName_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_Login_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_Login_ID_descriptor_;
}
bool DCProto_Login_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_Login_ID DCProto_Login::GROUPID;
const DCProto_Login_ID DCProto_Login::UNITID;
const DCProto_Login_ID DCProto_Login::ID_MIN;
const DCProto_Login_ID DCProto_Login::ID_MAX;
const int DCProto_Login::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_Login::kLoginFieldNumber;
const int DCProto_Login::kIdFieldNumber;
const int DCProto_Login::kResFieldNumber;
const int DCProto_Login::kIpFieldNumber;
const int DCProto_Login::kUseActivateKeyFieldNumber;
const int DCProto_Login::kNewUserFieldNumber;
const int DCProto_Login::kBeyondFieldNumber;
#endif  // !_MSC_VER

DCProto_Login::DCProto_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_Login::InitAsDefaultInstance() {
  login_ = const_cast< ::NetProto_Login*>(&::NetProto_Login::default_instance());
}

DCProto_Login::DCProto_Login(const DCProto_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_Login::SharedCtor() {
  _cached_size_ = 0;
  login_ = NULL;
  id_ = 0;
  res_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useActivateKey_ = false;
  newUser_ = false;
  beyond_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_Login::~DCProto_Login() {
  SharedDtor();
}

void DCProto_Login::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete login_;
  }
}

void DCProto_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_Login_descriptor_;
}

const DCProto_Login& DCProto_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_Login* DCProto_Login::default_instance_ = NULL;

DCProto_Login* DCProto_Login::New() const {
  return new DCProto_Login;
}

void DCProto_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login()) {
      if (login_ != NULL) login_->::NetProto_Login::Clear();
    }
    id_ = 0;
    res_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    useActivateKey_ = false;
    newUser_ = false;
    beyond_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Login login = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }
      
      // optional int32 res = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useActivateKey;
        break;
      }
      
      // optional bool useActivateKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useActivateKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useActivateKey_)));
          set_has_useActivateKey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_newUser;
        break;
      }
      
      // optional bool newUser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newUser_)));
          set_has_newUser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_beyond;
        break;
      }
      
      // optional bool beyond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beyond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beyond_)));
          set_has_beyond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Login login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->login(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->res(), output);
  }
  
  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }
  
  // optional bool useActivateKey = 5;
  if (has_useActivateKey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->useActivateKey(), output);
  }
  
  // optional bool newUser = 6;
  if (has_newUser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->newUser(), output);
  }
  
  // optional bool beyond = 7;
  if (has_beyond()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->beyond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Login login = 1;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->login(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->res(), target);
  }
  
  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }
  
  // optional bool useActivateKey = 5;
  if (has_useActivateKey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->useActivateKey(), target);
  }
  
  // optional bool newUser = 6;
  if (has_newUser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->newUser(), target);
  }
  
  // optional bool beyond = 7;
  if (has_beyond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->beyond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_Login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Login login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional bool useActivateKey = 5;
    if (has_useActivateKey()) {
      total_size += 1 + 1;
    }
    
    // optional bool newUser = 6;
    if (has_newUser()) {
      total_size += 1 + 1;
    }
    
    // optional bool beyond = 7;
    if (has_beyond()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_Login::MergeFrom(const DCProto_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      mutable_login()->::NetProto_Login::MergeFrom(from.login());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_useActivateKey()) {
      set_useActivateKey(from.useActivateKey());
    }
    if (from.has_newUser()) {
      set_newUser(from.newUser());
    }
    if (from.has_beyond()) {
      set_beyond(from.beyond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_Login::CopyFrom(const DCProto_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_Login::IsInitialized() const {
  
  return true;
}

void DCProto_Login::Swap(DCProto_Login* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(id_, other->id_);
    std::swap(res_, other->res_);
    std::swap(ip_, other->ip_);
    std::swap(useActivateKey_, other->useActivateKey_);
    std::swap(newUser_, other->newUser_);
    std::swap(beyond_, other->beyond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_Login_descriptor_;
  metadata.reflection = DCProto_Login_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_QueryRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryRole_ID_descriptor_;
}
bool DCProto_QueryRole_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_QueryRole_ID DCProto_QueryRole::GROUPID;
const DCProto_QueryRole_ID DCProto_QueryRole::UNITID;
const DCProto_QueryRole_ID DCProto_QueryRole::ID_MIN;
const DCProto_QueryRole_ID DCProto_QueryRole::ID_MAX;
const int DCProto_QueryRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_QueryRole::kRoleIDFieldNumber;
const int DCProto_QueryRole::kAttFieldNumber;
const int DCProto_QueryRole::kIdFieldNumber;
const int DCProto_QueryRole::kNameFieldNumber;
#endif  // !_MSC_VER

DCProto_QueryRole::DCProto_QueryRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_QueryRole::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

DCProto_QueryRole::DCProto_QueryRole(const DCProto_QueryRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_QueryRole::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  att_ = NULL;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_QueryRole::~DCProto_QueryRole() {
  SharedDtor();
}

void DCProto_QueryRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete att_;
  }
}

void DCProto_QueryRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_QueryRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryRole_descriptor_;
}

const DCProto_QueryRole& DCProto_QueryRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_QueryRole* DCProto_QueryRole::default_instance_ = NULL;

DCProto_QueryRole* DCProto_QueryRole::New() const {
  return new DCProto_QueryRole;
}

void DCProto_QueryRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_att()) {
      if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
    }
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_QueryRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_att;
        break;
      }
      
      // optional .PB_PlayerAtt att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_QueryRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->att(), output);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_QueryRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->att(), target);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_QueryRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional .PB_PlayerAtt att = 2;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_QueryRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_QueryRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_QueryRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_QueryRole::MergeFrom(const DCProto_QueryRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_att()) {
      mutable_att()->::PB_PlayerAtt::MergeFrom(from.att());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_QueryRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_QueryRole::CopyFrom(const DCProto_QueryRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_QueryRole::IsInitialized() const {
  
  return true;
}

void DCProto_QueryRole::Swap(DCProto_QueryRole* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(att_, other->att_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_QueryRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_QueryRole_descriptor_;
  metadata.reflection = DCProto_QueryRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SendMail_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SendMail_ID_descriptor_;
}
bool DCProto_SendMail_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SendMail_ID DCProto_SendMail::GROUPID;
const DCProto_SendMail_ID DCProto_SendMail::UNITID;
const DCProto_SendMail_ID DCProto_SendMail::ID_MIN;
const DCProto_SendMail_ID DCProto_SendMail::ID_MAX;
const int DCProto_SendMail::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SendMail::kSmFieldNumber;
const int DCProto_SendMail::kIdFieldNumber;
#endif  // !_MSC_VER

DCProto_SendMail::DCProto_SendMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SendMail::InitAsDefaultInstance() {
  sm_ = const_cast< ::NetProto_SendMail*>(&::NetProto_SendMail::default_instance());
}

DCProto_SendMail::DCProto_SendMail(const DCProto_SendMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SendMail::SharedCtor() {
  _cached_size_ = 0;
  sm_ = NULL;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SendMail::~DCProto_SendMail() {
  SharedDtor();
}

void DCProto_SendMail::SharedDtor() {
  if (this != default_instance_) {
    delete sm_;
  }
}

void DCProto_SendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SendMail_descriptor_;
}

const DCProto_SendMail& DCProto_SendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SendMail* DCProto_SendMail::default_instance_ = NULL;

DCProto_SendMail* DCProto_SendMail::New() const {
  return new DCProto_SendMail;
}

void DCProto_SendMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sm()) {
      if (sm_ != NULL) sm_->::NetProto_SendMail::Clear();
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_SendMail sm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_SendMail sm = 1;
  if (has_sm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sm(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SendMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_SendMail sm = 1;
  if (has_sm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sm(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SendMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_SendMail sm = 1;
    if (has_sm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sm());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SendMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SendMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SendMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SendMail::MergeFrom(const DCProto_SendMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sm()) {
      mutable_sm()->::NetProto_SendMail::MergeFrom(from.sm());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SendMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SendMail::CopyFrom(const DCProto_SendMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SendMail::IsInitialized() const {
  
  return true;
}

void DCProto_SendMail::Swap(DCProto_SendMail* other) {
  if (other != this) {
    std::swap(sm_, other->sm_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SendMail_descriptor_;
  metadata.reflection = DCProto_SendMail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GetKeyGift_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GetKeyGift_ID_descriptor_;
}
bool DCProto_GetKeyGift_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GetKeyGift_ID DCProto_GetKeyGift::GROUPID;
const DCProto_GetKeyGift_ID DCProto_GetKeyGift::UNITID;
const DCProto_GetKeyGift_ID DCProto_GetKeyGift::ID_MIN;
const DCProto_GetKeyGift_ID DCProto_GetKeyGift::ID_MAX;
const int DCProto_GetKeyGift::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GetKeyGift::kKeyFieldNumber;
const int DCProto_GetKeyGift::kIdFieldNumber;
const int DCProto_GetKeyGift::kResFieldNumber;
const int DCProto_GetKeyGift::kDoneFieldNumber;
const int DCProto_GetKeyGift::kEventFieldNumber;
const int DCProto_GetKeyGift::kIndexFieldNumber;
const int DCProto_GetKeyGift::kRoleIDFieldNumber;
const int DCProto_GetKeyGift::kGroupFieldNumber;
#endif  // !_MSC_VER

DCProto_GetKeyGift::DCProto_GetKeyGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GetKeyGift::InitAsDefaultInstance() {
}

DCProto_GetKeyGift::DCProto_GetKeyGift(const DCProto_GetKeyGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GetKeyGift::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  res_ = 0;
  done_ = false;
  roleID_ = GOOGLE_LONGLONG(0);
  group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GetKeyGift::~DCProto_GetKeyGift() {
  SharedDtor();
}

void DCProto_GetKeyGift::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_GetKeyGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GetKeyGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GetKeyGift_descriptor_;
}

const DCProto_GetKeyGift& DCProto_GetKeyGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GetKeyGift* DCProto_GetKeyGift::default_instance_ = NULL;

DCProto_GetKeyGift* DCProto_GetKeyGift::New() const {
  return new DCProto_GetKeyGift;
}

void DCProto_GetKeyGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    id_ = 0;
    res_ = 0;
    done_ = false;
    roleID_ = GOOGLE_LONGLONG(0);
    group_ = 0;
  }
  event_.Clear();
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GetKeyGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }
      
      // optional int32 res = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_done;
        break;
      }
      
      // optional bool done = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event;
        break;
      }
      
      // repeated int32 event = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_event())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_event())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event;
        if (input->ExpectTag(48)) goto parse_index;
        break;
      }
      
      // repeated int32 index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_index;
        if (input->ExpectTag(56)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_group;
        break;
      }
      
      // optional int32 group = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GetKeyGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->res(), output);
  }
  
  // optional bool done = 4;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->done(), output);
  }
  
  // repeated int32 event = 5;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->event(i), output);
  }
  
  // repeated int32 index = 6;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->index(i), output);
  }
  
  // optional int64 roleID = 7;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->roleID(), output);
  }
  
  // optional int32 group = 8;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GetKeyGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->res(), target);
  }
  
  // optional bool done = 4;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->done(), target);
  }
  
  // repeated int32 event = 5;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->event(i), target);
  }
  
  // repeated int32 index = 6;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->index(i), target);
  }
  
  // optional int64 roleID = 7;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->roleID(), target);
  }
  
  // optional int32 group = 8;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GetKeyGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
    // optional bool done = 4;
    if (has_done()) {
      total_size += 1 + 1;
    }
    
    // optional int64 roleID = 7;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 group = 8;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }
    
  }
  // repeated int32 event = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->event_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->event(i));
    }
    total_size += 1 * this->event_size() + data_size;
  }
  
  // repeated int32 index = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GetKeyGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GetKeyGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GetKeyGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GetKeyGift::MergeFrom(const DCProto_GetKeyGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GetKeyGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GetKeyGift::CopyFrom(const DCProto_GetKeyGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GetKeyGift::IsInitialized() const {
  
  return true;
}

void DCProto_GetKeyGift::Swap(DCProto_GetKeyGift* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(id_, other->id_);
    std::swap(res_, other->res_);
    std::swap(done_, other->done_);
    event_.Swap(&other->event_);
    index_.Swap(&other->index_);
    std::swap(roleID_, other->roleID_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GetKeyGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GetKeyGift_descriptor_;
  metadata.reflection = DCProto_GetKeyGift_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_Recharge_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_Recharge_ID_descriptor_;
}
bool DCProto_Recharge_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_Recharge_ID DCProto_Recharge::GROUPID;
const DCProto_Recharge_ID DCProto_Recharge::UNITID;
const DCProto_Recharge_ID DCProto_Recharge::ID_MIN;
const DCProto_Recharge_ID DCProto_Recharge::ID_MAX;
const int DCProto_Recharge::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_Recharge::kRechargeFieldNumber;
const int DCProto_Recharge::kIdFieldNumber;
const int DCProto_Recharge::kInfoFieldNumber;
const int DCProto_Recharge::kRoleIDFieldNumber;
const int DCProto_Recharge::kRmbFieldNumber;
const int DCProto_Recharge::kOverFieldNumber;
const int DCProto_Recharge::kLevelFieldNumber;
#endif  // !_MSC_VER

DCProto_Recharge::DCProto_Recharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_Recharge::InitAsDefaultInstance() {
  recharge_ = const_cast< ::NetProto_Recharge*>(&::NetProto_Recharge::default_instance());
  info_ = const_cast< ::PlayerInfo*>(&::PlayerInfo::default_instance());
}

DCProto_Recharge::DCProto_Recharge(const DCProto_Recharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_Recharge::SharedCtor() {
  _cached_size_ = 0;
  recharge_ = NULL;
  id_ = 0;
  info_ = NULL;
  roleID_ = GOOGLE_LONGLONG(0);
  rmb_ = 0;
  over_ = false;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_Recharge::~DCProto_Recharge() {
  SharedDtor();
}

void DCProto_Recharge::SharedDtor() {
  if (this != default_instance_) {
    delete recharge_;
    delete info_;
  }
}

void DCProto_Recharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_Recharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_Recharge_descriptor_;
}

const DCProto_Recharge& DCProto_Recharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_Recharge* DCProto_Recharge::default_instance_ = NULL;

DCProto_Recharge* DCProto_Recharge::New() const {
  return new DCProto_Recharge;
}

void DCProto_Recharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_recharge()) {
      if (recharge_ != NULL) recharge_->::NetProto_Recharge::Clear();
    }
    id_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::Clear();
    }
    roleID_ = GOOGLE_LONGLONG(0);
    rmb_ = 0;
    over_ = false;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_Recharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Recharge recharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .PlayerInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_over;
        break;
      }
      
      // optional bool over = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &over_)));
          set_has_over();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }
      
      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_Recharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Recharge recharge = 1;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recharge(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional .PlayerInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  // optional int64 roleID = 4;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->roleID(), output);
  }
  
  // optional int32 rmb = 5;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rmb(), output);
  }
  
  // optional bool over = 6;
  if (has_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->over(), output);
  }
  
  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_Recharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Recharge recharge = 1;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recharge(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional .PlayerInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  // optional int64 roleID = 4;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->roleID(), target);
  }
  
  // optional int32 rmb = 5;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rmb(), target);
  }
  
  // optional bool over = 6;
  if (has_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->over(), target);
  }
  
  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_Recharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Recharge recharge = 1;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recharge());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PlayerInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional int64 roleID = 4;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 rmb = 5;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional bool over = 6;
    if (has_over()) {
      total_size += 1 + 1;
    }
    
    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_Recharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_Recharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_Recharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_Recharge::MergeFrom(const DCProto_Recharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recharge()) {
      mutable_recharge()->::NetProto_Recharge::MergeFrom(from.recharge());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MergeFrom(from.info());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_over()) {
      set_over(from.over());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_Recharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_Recharge::CopyFrom(const DCProto_Recharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_Recharge::IsInitialized() const {
  
  return true;
}

void DCProto_Recharge::Swap(DCProto_Recharge* other) {
  if (other != this) {
    std::swap(recharge_, other->recharge_);
    std::swap(id_, other->id_);
    std::swap(info_, other->info_);
    std::swap(roleID_, other->roleID_);
    std::swap(rmb_, other->rmb_);
    std::swap(over_, other->over_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_Recharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_Recharge_descriptor_;
  metadata.reflection = DCProto_Recharge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_CostRecord_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_CostRecord_ID_descriptor_;
}
bool DCProto_CostRecord_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_CostRecord_ID DCProto_CostRecord::GROUPID;
const DCProto_CostRecord_ID DCProto_CostRecord::UNITID;
const DCProto_CostRecord_ID DCProto_CostRecord::ID_MIN;
const DCProto_CostRecord_ID DCProto_CostRecord::ID_MAX;
const int DCProto_CostRecord::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_CostRecord::kRoleFieldNumber;
const int DCProto_CostRecord::kReasonFieldNumber;
const int DCProto_CostRecord::kRmbValueFieldNumber;
const int DCProto_CostRecord::kRmbFieldNumber;
const int DCProto_CostRecord::kSubRMBFieldNumber;
const int DCProto_CostRecord::kArg1FieldNumber;
const int DCProto_CostRecord::kArg2FieldNumber;
const int DCProto_CostRecord::kInfoFieldNumber;
const int DCProto_CostRecord::kLevelFieldNumber;
const int DCProto_CostRecord::kSubrmbValueFieldNumber;
#endif  // !_MSC_VER

DCProto_CostRecord::DCProto_CostRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_CostRecord::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerInfo*>(&::PlayerInfo::default_instance());
}

DCProto_CostRecord::DCProto_CostRecord(const DCProto_CostRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_CostRecord::SharedCtor() {
  _cached_size_ = 0;
  role_ = GOOGLE_LONGLONG(0);
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rmbValue_ = 0;
  rmb_ = GOOGLE_LONGLONG(0);
  subRMB_ = GOOGLE_LONGLONG(0);
  arg1_ = 0;
  arg2_ = 0;
  info_ = NULL;
  level_ = 0;
  subrmbValue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_CostRecord::~DCProto_CostRecord() {
  SharedDtor();
}

void DCProto_CostRecord::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void DCProto_CostRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_CostRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_CostRecord_descriptor_;
}

const DCProto_CostRecord& DCProto_CostRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_CostRecord* DCProto_CostRecord::default_instance_ = NULL;

DCProto_CostRecord* DCProto_CostRecord::New() const {
  return new DCProto_CostRecord;
}

void DCProto_CostRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_ = GOOGLE_LONGLONG(0);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    rmbValue_ = 0;
    rmb_ = GOOGLE_LONGLONG(0);
    subRMB_ = GOOGLE_LONGLONG(0);
    arg1_ = 0;
    arg2_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    subrmbValue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_CostRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }
      
      // optional string reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rmbValue;
        break;
      }
      
      // optional int32 rmbValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmbValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmbValue_)));
          set_has_rmbValue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rmb;
        break;
      }
      
      // optional int64 rmb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_subRMB;
        break;
      }
      
      // optional int64 subRMB = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subRMB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subRMB_)));
          set_has_subRMB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_arg1;
        break;
      }
      
      // optional int32 arg1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg1_)));
          set_has_arg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_arg2;
        break;
      }
      
      // optional int32 arg2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg2_)));
          set_has_arg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_info;
        break;
      }
      
      // optional .PlayerInfo info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }
      
      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_subrmbValue;
        break;
      }
      
      // optional int32 subrmbValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subrmbValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subrmbValue_)));
          set_has_subrmbValue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_CostRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role(), output);
  }
  
  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reason(), output);
  }
  
  // optional int32 rmbValue = 3;
  if (has_rmbValue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rmbValue(), output);
  }
  
  // optional int64 rmb = 4;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rmb(), output);
  }
  
  // optional int64 subRMB = 5;
  if (has_subRMB()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->subRMB(), output);
  }
  
  // optional int32 arg1 = 6;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->arg1(), output);
  }
  
  // optional int32 arg2 = 7;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->arg2(), output);
  }
  
  // optional .PlayerInfo info = 8;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->info(), output);
  }
  
  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }
  
  // optional int32 subrmbValue = 10;
  if (has_subrmbValue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->subrmbValue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_CostRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role(), target);
  }
  
  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }
  
  // optional int32 rmbValue = 3;
  if (has_rmbValue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rmbValue(), target);
  }
  
  // optional int64 rmb = 4;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rmb(), target);
  }
  
  // optional int64 subRMB = 5;
  if (has_subRMB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->subRMB(), target);
  }
  
  // optional int32 arg1 = 6;
  if (has_arg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->arg1(), target);
  }
  
  // optional int32 arg2 = 7;
  if (has_arg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->arg2(), target);
  }
  
  // optional .PlayerInfo info = 8;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->info(), target);
  }
  
  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }
  
  // optional int32 subrmbValue = 10;
  if (has_subrmbValue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->subrmbValue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_CostRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role());
    }
    
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }
    
    // optional int32 rmbValue = 3;
    if (has_rmbValue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmbValue());
    }
    
    // optional int64 rmb = 4;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rmb());
    }
    
    // optional int64 subRMB = 5;
    if (has_subRMB()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->subRMB());
    }
    
    // optional int32 arg1 = 6;
    if (has_arg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg1());
    }
    
    // optional int32 arg2 = 7;
    if (has_arg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg2());
    }
    
    // optional .PlayerInfo info = 8;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 subrmbValue = 10;
    if (has_subrmbValue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subrmbValue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_CostRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_CostRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_CostRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_CostRecord::MergeFrom(const DCProto_CostRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_rmbValue()) {
      set_rmbValue(from.rmbValue());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_subRMB()) {
      set_subRMB(from.subRMB());
    }
    if (from.has_arg1()) {
      set_arg1(from.arg1());
    }
    if (from.has_arg2()) {
      set_arg2(from.arg2());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MergeFrom(from.info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_subrmbValue()) {
      set_subrmbValue(from.subrmbValue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_CostRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_CostRecord::CopyFrom(const DCProto_CostRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_CostRecord::IsInitialized() const {
  
  return true;
}

void DCProto_CostRecord::Swap(DCProto_CostRecord* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(reason_, other->reason_);
    std::swap(rmbValue_, other->rmbValue_);
    std::swap(rmb_, other->rmb_);
    std::swap(subRMB_, other->subRMB_);
    std::swap(arg1_, other->arg1_);
    std::swap(arg2_, other->arg2_);
    std::swap(info_, other->info_);
    std::swap(level_, other->level_);
    std::swap(subrmbValue_, other->subrmbValue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_CostRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_CostRecord_descriptor_;
  metadata.reflection = DCProto_CostRecord_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_PlayerStatus_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_PlayerStatus_ID_descriptor_;
}
bool DCProto_PlayerStatus_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_PlayerStatus_ID DCProto_PlayerStatus::GROUPID;
const DCProto_PlayerStatus_ID DCProto_PlayerStatus::UNITID;
const DCProto_PlayerStatus_ID DCProto_PlayerStatus::ID_MIN;
const DCProto_PlayerStatus_ID DCProto_PlayerStatus::ID_MAX;
const int DCProto_PlayerStatus::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_PlayerStatus::kIdFieldNumber;
const int DCProto_PlayerStatus::kPsFieldNumber;
#endif  // !_MSC_VER

DCProto_PlayerStatus::DCProto_PlayerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_PlayerStatus::InitAsDefaultInstance() {
  ps_ = const_cast< ::NetProto_PlayerStatus*>(&::NetProto_PlayerStatus::default_instance());
}

DCProto_PlayerStatus::DCProto_PlayerStatus(const DCProto_PlayerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_PlayerStatus::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ps_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_PlayerStatus::~DCProto_PlayerStatus() {
  SharedDtor();
}

void DCProto_PlayerStatus::SharedDtor() {
  if (this != default_instance_) {
    delete ps_;
  }
}

void DCProto_PlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_PlayerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_PlayerStatus_descriptor_;
}

const DCProto_PlayerStatus& DCProto_PlayerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_PlayerStatus* DCProto_PlayerStatus::default_instance_ = NULL;

DCProto_PlayerStatus* DCProto_PlayerStatus::New() const {
  return new DCProto_PlayerStatus;
}

void DCProto_PlayerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_ps()) {
      if (ps_ != NULL) ps_->::NetProto_PlayerStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_PlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ps;
        break;
      }
      
      // optional .NetProto_PlayerStatus ps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_PlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .NetProto_PlayerStatus ps = 2;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ps(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_PlayerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .NetProto_PlayerStatus ps = 2;
  if (has_ps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ps(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_PlayerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_PlayerStatus ps = 2;
    if (has_ps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ps());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_PlayerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_PlayerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_PlayerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_PlayerStatus::MergeFrom(const DCProto_PlayerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ps()) {
      mutable_ps()->::NetProto_PlayerStatus::MergeFrom(from.ps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_PlayerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_PlayerStatus::CopyFrom(const DCProto_PlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_PlayerStatus::IsInitialized() const {
  
  return true;
}

void DCProto_PlayerStatus::Swap(DCProto_PlayerStatus* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ps_, other->ps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_PlayerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_PlayerStatus_descriptor_;
  metadata.reflection = DCProto_PlayerStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SaveChat_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveChat_ID_descriptor_;
}
bool DCProto_SaveChat_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SaveChat_ID DCProto_SaveChat::GROUPID;
const DCProto_SaveChat_ID DCProto_SaveChat::UNITID;
const DCProto_SaveChat_ID DCProto_SaveChat::ID_MIN;
const DCProto_SaveChat_ID DCProto_SaveChat::ID_MAX;
const int DCProto_SaveChat::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SaveChat::kTypeFieldNumber;
const int DCProto_SaveChat::kSenderFieldNumber;
const int DCProto_SaveChat::kReceiverFieldNumber;
const int DCProto_SaveChat::kContentFieldNumber;
const int DCProto_SaveChat::kSenderIDFieldNumber;
const int DCProto_SaveChat::kReceiverIDFieldNumber;
#endif  // !_MSC_VER

DCProto_SaveChat::DCProto_SaveChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SaveChat::InitAsDefaultInstance() {
}

DCProto_SaveChat::DCProto_SaveChat(const DCProto_SaveChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SaveChat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderID_ = GOOGLE_LONGLONG(0);
  receiverID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SaveChat::~DCProto_SaveChat() {
  SharedDtor();
}

void DCProto_SaveChat::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_SaveChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SaveChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveChat_descriptor_;
}

const DCProto_SaveChat& DCProto_SaveChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SaveChat* DCProto_SaveChat::default_instance_ = NULL;

DCProto_SaveChat* DCProto_SaveChat::New() const {
  return new DCProto_SaveChat;
}

void DCProto_SaveChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_receiver()) {
      if (receiver_ != &::google::protobuf::internal::kEmptyString) {
        receiver_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    senderID_ = GOOGLE_LONGLONG(0);
    receiverID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SaveChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        break;
      }
      
      // optional string sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_receiver;
        break;
      }
      
      // optional string receiver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver().data(), this->receiver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_senderID;
        break;
      }
      
      // optional int64 senderID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senderID_)));
          set_has_senderID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_receiverID;
        break;
      }
      
      // optional int64 receiverID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiverID_)));
          set_has_receiverID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SaveChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sender(), output);
  }
  
  // optional string receiver = 3;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->receiver(), output);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  // optional int64 senderID = 5;
  if (has_senderID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->senderID(), output);
  }
  
  // optional int64 receiverID = 6;
  if (has_receiverID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->receiverID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SaveChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }
  
  // optional string receiver = 3;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver().data(), this->receiver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->receiver(), target);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  // optional int64 senderID = 5;
  if (has_senderID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->senderID(), target);
  }
  
  // optional int64 receiverID = 6;
  if (has_receiverID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->receiverID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SaveChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }
    
    // optional string receiver = 3;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiver());
    }
    
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int64 senderID = 5;
    if (has_senderID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senderID());
    }
    
    // optional int64 receiverID = 6;
    if (has_receiverID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiverID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SaveChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SaveChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SaveChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SaveChat::MergeFrom(const DCProto_SaveChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_senderID()) {
      set_senderID(from.senderID());
    }
    if (from.has_receiverID()) {
      set_receiverID(from.receiverID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SaveChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SaveChat::CopyFrom(const DCProto_SaveChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SaveChat::IsInitialized() const {
  
  return true;
}

void DCProto_SaveChat::Swap(DCProto_SaveChat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sender_, other->sender_);
    std::swap(receiver_, other->receiver_);
    std::swap(content_, other->content_);
    std::swap(senderID_, other->senderID_);
    std::swap(receiverID_, other->receiverID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SaveChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SaveChat_descriptor_;
  metadata.reflection = DCProto_SaveChat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GodTarget_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GodTarget_ID_descriptor_;
}
bool DCProto_GodTarget_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GodTarget_ID DCProto_GodTarget::GROUPID;
const DCProto_GodTarget_ID DCProto_GodTarget::UNITID;
const DCProto_GodTarget_ID DCProto_GodTarget::ID_MIN;
const DCProto_GodTarget_ID DCProto_GodTarget::ID_MAX;
const int DCProto_GodTarget::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GodTarget::kIdFieldNumber;
const int DCProto_GodTarget::kRoleIDFieldNumber;
const int DCProto_GodTarget::kAttFieldNumber;
const int DCProto_GodTarget::kResFieldNumber;
const int DCProto_GodTarget::kEventFieldNumber;
#endif  // !_MSC_VER

DCProto_GodTarget::DCProto_GodTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GodTarget::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

DCProto_GodTarget::DCProto_GodTarget(const DCProto_GodTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GodTarget::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  att_ = NULL;
  res_ = false;
  event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GodTarget::~DCProto_GodTarget() {
  SharedDtor();
}

void DCProto_GodTarget::SharedDtor() {
  if (this != default_instance_) {
    delete att_;
  }
}

void DCProto_GodTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GodTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GodTarget_descriptor_;
}

const DCProto_GodTarget& DCProto_GodTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GodTarget* DCProto_GodTarget::default_instance_ = NULL;

DCProto_GodTarget* DCProto_GodTarget::New() const {
  return new DCProto_GodTarget;
}

void DCProto_GodTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_att()) {
      if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
    }
    res_ = false;
    event_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GodTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_att;
        break;
      }
      
      // optional .PB_PlayerAtt att = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }
      
      // optional bool res = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event;
        break;
      }
      
      // optional int32 event = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GodTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleID(), output);
  }
  
  // optional .PB_PlayerAtt att = 3;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->att(), output);
  }
  
  // optional bool res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->res(), output);
  }
  
  // optional int32 event = 5;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->event(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GodTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleID(), target);
  }
  
  // optional .PB_PlayerAtt att = 3;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->att(), target);
  }
  
  // optional bool res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->res(), target);
  }
  
  // optional int32 event = 5;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->event(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GodTarget::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int64 roleID = 2;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional .PB_PlayerAtt att = 3;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional bool res = 4;
    if (has_res()) {
      total_size += 1 + 1;
    }
    
    // optional int32 event = 5;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GodTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GodTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GodTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GodTarget::MergeFrom(const DCProto_GodTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_att()) {
      mutable_att()->::PB_PlayerAtt::MergeFrom(from.att());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GodTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GodTarget::CopyFrom(const DCProto_GodTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GodTarget::IsInitialized() const {
  
  return true;
}

void DCProto_GodTarget::Swap(DCProto_GodTarget* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(roleID_, other->roleID_);
    std::swap(att_, other->att_);
    std::swap(res_, other->res_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GodTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GodTarget_descriptor_;
  metadata.reflection = DCProto_GodTarget_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_LoadPlayerAtt_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadPlayerAtt_ID_descriptor_;
}
bool DCProto_LoadPlayerAtt_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_LoadPlayerAtt_ID DCProto_LoadPlayerAtt::GROUPID;
const DCProto_LoadPlayerAtt_ID DCProto_LoadPlayerAtt::UNITID;
const DCProto_LoadPlayerAtt_ID DCProto_LoadPlayerAtt::ID_MIN;
const DCProto_LoadPlayerAtt_ID DCProto_LoadPlayerAtt::ID_MAX;
const int DCProto_LoadPlayerAtt::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_LoadPlayerAtt::kRoleIDFieldNumber;
const int DCProto_LoadPlayerAtt::kFlagFieldNumber;
const int DCProto_LoadPlayerAtt::kRoleID2FieldNumber;
#endif  // !_MSC_VER

DCProto_LoadPlayerAtt::DCProto_LoadPlayerAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_LoadPlayerAtt::InitAsDefaultInstance() {
}

DCProto_LoadPlayerAtt::DCProto_LoadPlayerAtt(const DCProto_LoadPlayerAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_LoadPlayerAtt::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  flag_ = false;
  roleID2_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_LoadPlayerAtt::~DCProto_LoadPlayerAtt() {
  SharedDtor();
}

void DCProto_LoadPlayerAtt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_LoadPlayerAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_LoadPlayerAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadPlayerAtt_descriptor_;
}

const DCProto_LoadPlayerAtt& DCProto_LoadPlayerAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_LoadPlayerAtt* DCProto_LoadPlayerAtt::default_instance_ = NULL;

DCProto_LoadPlayerAtt* DCProto_LoadPlayerAtt::New() const {
  return new DCProto_LoadPlayerAtt;
}

void DCProto_LoadPlayerAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    flag_ = false;
    roleID2_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_LoadPlayerAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleID2;
        break;
      }
      
      // optional int64 roleID2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID2_)));
          set_has_roleID2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_LoadPlayerAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }
  
  // optional int64 roleID2 = 3;
  if (has_roleID2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roleID2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_LoadPlayerAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }
  
  // optional int64 roleID2 = 3;
  if (has_roleID2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roleID2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_LoadPlayerAtt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
    // optional int64 roleID2 = 3;
    if (has_roleID2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_LoadPlayerAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_LoadPlayerAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_LoadPlayerAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_LoadPlayerAtt::MergeFrom(const DCProto_LoadPlayerAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_roleID2()) {
      set_roleID2(from.roleID2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_LoadPlayerAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_LoadPlayerAtt::CopyFrom(const DCProto_LoadPlayerAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_LoadPlayerAtt::IsInitialized() const {
  
  return true;
}

void DCProto_LoadPlayerAtt::Swap(DCProto_LoadPlayerAtt* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(flag_, other->flag_);
    std::swap(roleID2_, other->roleID2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_LoadPlayerAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_LoadPlayerAtt_descriptor_;
  metadata.reflection = DCProto_LoadPlayerAtt_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_LoadFriendsFans_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadFriendsFans_ID_descriptor_;
}
bool DCProto_LoadFriendsFans_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_LoadFriendsFans_ID DCProto_LoadFriendsFans::GROUPID;
const DCProto_LoadFriendsFans_ID DCProto_LoadFriendsFans::UNITID;
const DCProto_LoadFriendsFans_ID DCProto_LoadFriendsFans::ID_MIN;
const DCProto_LoadFriendsFans_ID DCProto_LoadFriendsFans::ID_MAX;
const int DCProto_LoadFriendsFans::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_LoadFriendsFans::kRoleIDFieldNumber;
const int DCProto_LoadFriendsFans::kRoleID2FieldNumber;
#endif  // !_MSC_VER

DCProto_LoadFriendsFans::DCProto_LoadFriendsFans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_LoadFriendsFans::InitAsDefaultInstance() {
}

DCProto_LoadFriendsFans::DCProto_LoadFriendsFans(const DCProto_LoadFriendsFans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_LoadFriendsFans::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  roleID2_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_LoadFriendsFans::~DCProto_LoadFriendsFans() {
  SharedDtor();
}

void DCProto_LoadFriendsFans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_LoadFriendsFans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_LoadFriendsFans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadFriendsFans_descriptor_;
}

const DCProto_LoadFriendsFans& DCProto_LoadFriendsFans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_LoadFriendsFans* DCProto_LoadFriendsFans::default_instance_ = NULL;

DCProto_LoadFriendsFans* DCProto_LoadFriendsFans::New() const {
  return new DCProto_LoadFriendsFans;
}

void DCProto_LoadFriendsFans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    roleID2_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_LoadFriendsFans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID2;
        break;
      }
      
      // optional int64 roleID2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID2_)));
          set_has_roleID2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_LoadFriendsFans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional int64 roleID2 = 2;
  if (has_roleID2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleID2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_LoadFriendsFans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional int64 roleID2 = 2;
  if (has_roleID2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleID2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_LoadFriendsFans::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int64 roleID2 = 2;
    if (has_roleID2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_LoadFriendsFans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_LoadFriendsFans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_LoadFriendsFans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_LoadFriendsFans::MergeFrom(const DCProto_LoadFriendsFans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_roleID2()) {
      set_roleID2(from.roleID2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_LoadFriendsFans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_LoadFriendsFans::CopyFrom(const DCProto_LoadFriendsFans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_LoadFriendsFans::IsInitialized() const {
  
  return true;
}

void DCProto_LoadFriendsFans::Swap(DCProto_LoadFriendsFans* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(roleID2_, other->roleID2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_LoadFriendsFans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_LoadFriendsFans_descriptor_;
  metadata.reflection = DCProto_LoadFriendsFans_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_ModifyFixedEventBit_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_ModifyFixedEventBit_ID_descriptor_;
}
bool DCProto_ModifyFixedEventBit_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_ModifyFixedEventBit_ID DCProto_ModifyFixedEventBit::GROUPID;
const DCProto_ModifyFixedEventBit_ID DCProto_ModifyFixedEventBit::UNITID;
const DCProto_ModifyFixedEventBit_ID DCProto_ModifyFixedEventBit::ID_MIN;
const DCProto_ModifyFixedEventBit_ID DCProto_ModifyFixedEventBit::ID_MAX;
const int DCProto_ModifyFixedEventBit::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_ModifyFixedEventBit::kRoleIDFieldNumber;
const int DCProto_ModifyFixedEventBit::kIdFieldNumber;
const int DCProto_ModifyFixedEventBit::kBitFieldNumber;
const int DCProto_ModifyFixedEventBit::kOneFieldNumber;
#endif  // !_MSC_VER

DCProto_ModifyFixedEventBit::DCProto_ModifyFixedEventBit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_ModifyFixedEventBit::InitAsDefaultInstance() {
}

DCProto_ModifyFixedEventBit::DCProto_ModifyFixedEventBit(const DCProto_ModifyFixedEventBit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_ModifyFixedEventBit::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  id_ = 0;
  bit_ = 0;
  one_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_ModifyFixedEventBit::~DCProto_ModifyFixedEventBit() {
  SharedDtor();
}

void DCProto_ModifyFixedEventBit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_ModifyFixedEventBit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_ModifyFixedEventBit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_ModifyFixedEventBit_descriptor_;
}

const DCProto_ModifyFixedEventBit& DCProto_ModifyFixedEventBit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_ModifyFixedEventBit* DCProto_ModifyFixedEventBit::default_instance_ = NULL;

DCProto_ModifyFixedEventBit* DCProto_ModifyFixedEventBit::New() const {
  return new DCProto_ModifyFixedEventBit;
}

void DCProto_ModifyFixedEventBit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    id_ = 0;
    bit_ = 0;
    one_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_ModifyFixedEventBit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bit;
        break;
      }
      
      // optional int32 bit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_)));
          set_has_bit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_one;
        break;
      }
      
      // optional bool one = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_one:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &one_)));
          set_has_one();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_ModifyFixedEventBit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 bit = 3;
  if (has_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bit(), output);
  }
  
  // optional bool one = 4;
  if (has_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->one(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_ModifyFixedEventBit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 bit = 3;
  if (has_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bit(), target);
  }
  
  // optional bool one = 4;
  if (has_one()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->one(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_ModifyFixedEventBit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 bit = 3;
    if (has_bit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bit());
    }
    
    // optional bool one = 4;
    if (has_one()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_ModifyFixedEventBit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_ModifyFixedEventBit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_ModifyFixedEventBit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_ModifyFixedEventBit::MergeFrom(const DCProto_ModifyFixedEventBit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bit()) {
      set_bit(from.bit());
    }
    if (from.has_one()) {
      set_one(from.one());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_ModifyFixedEventBit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_ModifyFixedEventBit::CopyFrom(const DCProto_ModifyFixedEventBit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_ModifyFixedEventBit::IsInitialized() const {
  
  return true;
}

void DCProto_ModifyFixedEventBit::Swap(DCProto_ModifyFixedEventBit* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(id_, other->id_);
    std::swap(bit_, other->bit_);
    std::swap(one_, other->one_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_ModifyFixedEventBit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_ModifyFixedEventBit_descriptor_;
  metadata.reflection = DCProto_ModifyFixedEventBit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_ModifyGodRank_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_ModifyGodRank_ID_descriptor_;
}
bool DCProto_ModifyGodRank_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_ModifyGodRank_ID DCProto_ModifyGodRank::GROUPID;
const DCProto_ModifyGodRank_ID DCProto_ModifyGodRank::UNITID;
const DCProto_ModifyGodRank_ID DCProto_ModifyGodRank::ID_MIN;
const DCProto_ModifyGodRank_ID DCProto_ModifyGodRank::ID_MAX;
const int DCProto_ModifyGodRank::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_ModifyGodRank::kRoleIDFieldNumber;
const int DCProto_ModifyGodRank::kRankFieldNumber;
#endif  // !_MSC_VER

DCProto_ModifyGodRank::DCProto_ModifyGodRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_ModifyGodRank::InitAsDefaultInstance() {
}

DCProto_ModifyGodRank::DCProto_ModifyGodRank(const DCProto_ModifyGodRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_ModifyGodRank::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_ModifyGodRank::~DCProto_ModifyGodRank() {
  SharedDtor();
}

void DCProto_ModifyGodRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_ModifyGodRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_ModifyGodRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_ModifyGodRank_descriptor_;
}

const DCProto_ModifyGodRank& DCProto_ModifyGodRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_ModifyGodRank* DCProto_ModifyGodRank::default_instance_ = NULL;

DCProto_ModifyGodRank* DCProto_ModifyGodRank::New() const {
  return new DCProto_ModifyGodRank;
}

void DCProto_ModifyGodRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_ModifyGodRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_ModifyGodRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_ModifyGodRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_ModifyGodRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_ModifyGodRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_ModifyGodRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_ModifyGodRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_ModifyGodRank::MergeFrom(const DCProto_ModifyGodRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_ModifyGodRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_ModifyGodRank::CopyFrom(const DCProto_ModifyGodRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_ModifyGodRank::IsInitialized() const {
  
  return true;
}

void DCProto_ModifyGodRank::Swap(DCProto_ModifyGodRank* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_ModifyGodRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_ModifyGodRank_descriptor_;
  metadata.reflection = DCProto_ModifyGodRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DCProto_GodRankRecordInfo::kInfoFieldNumber;
const int DCProto_GodRankRecordInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

DCProto_GodRankRecordInfo::DCProto_GodRankRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GodRankRecordInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
}

DCProto_GodRankRecordInfo::DCProto_GodRankRecordInfo(const DCProto_GodRankRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GodRankRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GodRankRecordInfo::~DCProto_GodRankRecordInfo() {
  SharedDtor();
}

void DCProto_GodRankRecordInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DCProto_GodRankRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GodRankRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GodRankRecordInfo_descriptor_;
}

const DCProto_GodRankRecordInfo& DCProto_GodRankRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GodRankRecordInfo* DCProto_GodRankRecordInfo::default_instance_ = NULL;

DCProto_GodRankRecordInfo* DCProto_GodRankRecordInfo::New() const {
  return new DCProto_GodRankRecordInfo;
}

void DCProto_GodRankRecordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::RecordInfo::Clear();
    }
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GodRankRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RecordInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GodRankRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RecordInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GodRankRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RecordInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GodRankRecordInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RecordInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GodRankRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GodRankRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GodRankRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GodRankRecordInfo::MergeFrom(const DCProto_GodRankRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::RecordInfo::MergeFrom(from.info());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GodRankRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GodRankRecordInfo::CopyFrom(const DCProto_GodRankRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GodRankRecordInfo::IsInitialized() const {
  
  return true;
}

void DCProto_GodRankRecordInfo::Swap(DCProto_GodRankRecordInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GodRankRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GodRankRecordInfo_descriptor_;
  metadata.reflection = DCProto_GodRankRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SaveGodRankInfoRecord_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveGodRankInfoRecord_ID_descriptor_;
}
bool DCProto_SaveGodRankInfoRecord_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SaveGodRankInfoRecord_ID DCProto_SaveGodRankInfoRecord::GROUPID;
const DCProto_SaveGodRankInfoRecord_ID DCProto_SaveGodRankInfoRecord::UNITID;
const DCProto_SaveGodRankInfoRecord_ID DCProto_SaveGodRankInfoRecord::ID_MIN;
const DCProto_SaveGodRankInfoRecord_ID DCProto_SaveGodRankInfoRecord::ID_MAX;
const int DCProto_SaveGodRankInfoRecord::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SaveGodRankInfoRecord::kInfo1FieldNumber;
const int DCProto_SaveGodRankInfoRecord::kInfo2FieldNumber;
#endif  // !_MSC_VER

DCProto_SaveGodRankInfoRecord::DCProto_SaveGodRankInfoRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SaveGodRankInfoRecord::InitAsDefaultInstance() {
  info1_ = const_cast< ::DCProto_GodRankRecordInfo*>(&::DCProto_GodRankRecordInfo::default_instance());
  info2_ = const_cast< ::DCProto_GodRankRecordInfo*>(&::DCProto_GodRankRecordInfo::default_instance());
}

DCProto_SaveGodRankInfoRecord::DCProto_SaveGodRankInfoRecord(const DCProto_SaveGodRankInfoRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SaveGodRankInfoRecord::SharedCtor() {
  _cached_size_ = 0;
  info1_ = NULL;
  info2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SaveGodRankInfoRecord::~DCProto_SaveGodRankInfoRecord() {
  SharedDtor();
}

void DCProto_SaveGodRankInfoRecord::SharedDtor() {
  if (this != default_instance_) {
    delete info1_;
    delete info2_;
  }
}

void DCProto_SaveGodRankInfoRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SaveGodRankInfoRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveGodRankInfoRecord_descriptor_;
}

const DCProto_SaveGodRankInfoRecord& DCProto_SaveGodRankInfoRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SaveGodRankInfoRecord* DCProto_SaveGodRankInfoRecord::default_instance_ = NULL;

DCProto_SaveGodRankInfoRecord* DCProto_SaveGodRankInfoRecord::New() const {
  return new DCProto_SaveGodRankInfoRecord;
}

void DCProto_SaveGodRankInfoRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info1()) {
      if (info1_ != NULL) info1_->::DCProto_GodRankRecordInfo::Clear();
    }
    if (has_info2()) {
      if (info2_ != NULL) info2_->::DCProto_GodRankRecordInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SaveGodRankInfoRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DCProto_GodRankRecordInfo info1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info2;
        break;
      }
      
      // optional .DCProto_GodRankRecordInfo info2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SaveGodRankInfoRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DCProto_GodRankRecordInfo info1 = 1;
  if (has_info1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info1(), output);
  }
  
  // optional .DCProto_GodRankRecordInfo info2 = 2;
  if (has_info2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SaveGodRankInfoRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DCProto_GodRankRecordInfo info1 = 1;
  if (has_info1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info1(), target);
  }
  
  // optional .DCProto_GodRankRecordInfo info2 = 2;
  if (has_info2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SaveGodRankInfoRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DCProto_GodRankRecordInfo info1 = 1;
    if (has_info1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info1());
    }
    
    // optional .DCProto_GodRankRecordInfo info2 = 2;
    if (has_info2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SaveGodRankInfoRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SaveGodRankInfoRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SaveGodRankInfoRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SaveGodRankInfoRecord::MergeFrom(const DCProto_SaveGodRankInfoRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info1()) {
      mutable_info1()->::DCProto_GodRankRecordInfo::MergeFrom(from.info1());
    }
    if (from.has_info2()) {
      mutable_info2()->::DCProto_GodRankRecordInfo::MergeFrom(from.info2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SaveGodRankInfoRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SaveGodRankInfoRecord::CopyFrom(const DCProto_SaveGodRankInfoRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SaveGodRankInfoRecord::IsInitialized() const {
  
  return true;
}

void DCProto_SaveGodRankInfoRecord::Swap(DCProto_SaveGodRankInfoRecord* other) {
  if (other != this) {
    std::swap(info1_, other->info1_);
    std::swap(info2_, other->info2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SaveGodRankInfoRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SaveGodRankInfoRecord_descriptor_;
  metadata.reflection = DCProto_SaveGodRankInfoRecord_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_QueryGodRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryGodRole_ID_descriptor_;
}
bool DCProto_QueryGodRole_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_QueryGodRole_ID DCProto_QueryGodRole::GROUPID;
const DCProto_QueryGodRole_ID DCProto_QueryGodRole::UNITID;
const DCProto_QueryGodRole_ID DCProto_QueryGodRole::ID_MIN;
const DCProto_QueryGodRole_ID DCProto_QueryGodRole::ID_MAX;
const int DCProto_QueryGodRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_QueryGodRole::kRoleIDFieldNumber;
const int DCProto_QueryGodRole::kAttFieldNumber;
const int DCProto_QueryGodRole::kIdFieldNumber;
#endif  // !_MSC_VER

DCProto_QueryGodRole::DCProto_QueryGodRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_QueryGodRole::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

DCProto_QueryGodRole::DCProto_QueryGodRole(const DCProto_QueryGodRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_QueryGodRole::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  att_ = NULL;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_QueryGodRole::~DCProto_QueryGodRole() {
  SharedDtor();
}

void DCProto_QueryGodRole::SharedDtor() {
  if (this != default_instance_) {
    delete att_;
  }
}

void DCProto_QueryGodRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_QueryGodRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryGodRole_descriptor_;
}

const DCProto_QueryGodRole& DCProto_QueryGodRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_QueryGodRole* DCProto_QueryGodRole::default_instance_ = NULL;

DCProto_QueryGodRole* DCProto_QueryGodRole::New() const {
  return new DCProto_QueryGodRole;
}

void DCProto_QueryGodRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_att()) {
      if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_QueryGodRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_att;
        break;
      }
      
      // optional .PB_PlayerAtt att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_QueryGodRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->att(), output);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_QueryGodRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->att(), target);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_QueryGodRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional .PB_PlayerAtt att = 2;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_QueryGodRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_QueryGodRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_QueryGodRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_QueryGodRole::MergeFrom(const DCProto_QueryGodRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_att()) {
      mutable_att()->::PB_PlayerAtt::MergeFrom(from.att());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_QueryGodRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_QueryGodRole::CopyFrom(const DCProto_QueryGodRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_QueryGodRole::IsInitialized() const {
  
  return true;
}

void DCProto_QueryGodRole::Swap(DCProto_QueryGodRole* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(att_, other->att_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_QueryGodRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_QueryGodRole_descriptor_;
  metadata.reflection = DCProto_QueryGodRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_RandomRoles_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_RandomRoles_ID_descriptor_;
}
bool DCProto_RandomRoles_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_RandomRoles_ID DCProto_RandomRoles::GROUPID;
const DCProto_RandomRoles_ID DCProto_RandomRoles::UNITID;
const DCProto_RandomRoles_ID DCProto_RandomRoles::ID_MIN;
const DCProto_RandomRoles_ID DCProto_RandomRoles::ID_MAX;
const int DCProto_RandomRoles::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_RandomRoles::kCountFieldNumber;
const int DCProto_RandomRoles::kAttsFieldNumber;
#endif  // !_MSC_VER

DCProto_RandomRoles::DCProto_RandomRoles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_RandomRoles::InitAsDefaultInstance() {
}

DCProto_RandomRoles::DCProto_RandomRoles(const DCProto_RandomRoles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_RandomRoles::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_RandomRoles::~DCProto_RandomRoles() {
  SharedDtor();
}

void DCProto_RandomRoles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_RandomRoles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_RandomRoles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_RandomRoles_descriptor_;
}

const DCProto_RandomRoles& DCProto_RandomRoles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_RandomRoles* DCProto_RandomRoles::default_instance_ = NULL;

DCProto_RandomRoles* DCProto_RandomRoles::New() const {
  return new DCProto_RandomRoles;
}

void DCProto_RandomRoles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  atts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_RandomRoles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_atts;
        break;
      }
      
      // repeated .PB_PlayerAtt atts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_atts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_RandomRoles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  // repeated .PB_PlayerAtt atts = 2;
  for (int i = 0; i < this->atts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_RandomRoles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  // repeated .PB_PlayerAtt atts = 2;
  for (int i = 0; i < this->atts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_RandomRoles::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  // repeated .PB_PlayerAtt atts = 2;
  total_size += 1 * this->atts_size();
  for (int i = 0; i < this->atts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_RandomRoles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_RandomRoles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_RandomRoles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_RandomRoles::MergeFrom(const DCProto_RandomRoles& from) {
  GOOGLE_CHECK_NE(&from, this);
  atts_.MergeFrom(from.atts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_RandomRoles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_RandomRoles::CopyFrom(const DCProto_RandomRoles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_RandomRoles::IsInitialized() const {
  
  return true;
}

void DCProto_RandomRoles::Swap(DCProto_RandomRoles* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    atts_.Swap(&other->atts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_RandomRoles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_RandomRoles_descriptor_;
  metadata.reflection = DCProto_RandomRoles_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SendMailExceptRoles_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SendMailExceptRoles_ID_descriptor_;
}
bool DCProto_SendMailExceptRoles_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SendMailExceptRoles_ID DCProto_SendMailExceptRoles::GROUPID;
const DCProto_SendMailExceptRoles_ID DCProto_SendMailExceptRoles::UNITID;
const DCProto_SendMailExceptRoles_ID DCProto_SendMailExceptRoles::ID_MIN;
const DCProto_SendMailExceptRoles_ID DCProto_SendMailExceptRoles::ID_MAX;
const int DCProto_SendMailExceptRoles::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SendMailExceptRoles::kRoleIDsFieldNumber;
const int DCProto_SendMailExceptRoles::kSmFieldNumber;
#endif  // !_MSC_VER

DCProto_SendMailExceptRoles::DCProto_SendMailExceptRoles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SendMailExceptRoles::InitAsDefaultInstance() {
  sm_ = const_cast< ::NetProto_SendMail*>(&::NetProto_SendMail::default_instance());
}

DCProto_SendMailExceptRoles::DCProto_SendMailExceptRoles(const DCProto_SendMailExceptRoles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SendMailExceptRoles::SharedCtor() {
  _cached_size_ = 0;
  sm_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SendMailExceptRoles::~DCProto_SendMailExceptRoles() {
  SharedDtor();
}

void DCProto_SendMailExceptRoles::SharedDtor() {
  if (this != default_instance_) {
    delete sm_;
  }
}

void DCProto_SendMailExceptRoles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SendMailExceptRoles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SendMailExceptRoles_descriptor_;
}

const DCProto_SendMailExceptRoles& DCProto_SendMailExceptRoles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SendMailExceptRoles* DCProto_SendMailExceptRoles::default_instance_ = NULL;

DCProto_SendMailExceptRoles* DCProto_SendMailExceptRoles::New() const {
  return new DCProto_SendMailExceptRoles;
}

void DCProto_SendMailExceptRoles::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_sm()) {
      if (sm_ != NULL) sm_->::NetProto_SendMail::Clear();
    }
  }
  roleIDs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SendMailExceptRoles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 roleIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_roleIDs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_roleIDs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roleIDs;
        if (input->ExpectTag(18)) goto parse_sm;
        break;
      }
      
      // optional .NetProto_SendMail sm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SendMailExceptRoles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 roleIDs = 1;
  for (int i = 0; i < this->roleIDs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->roleIDs(i), output);
  }
  
  // optional .NetProto_SendMail sm = 2;
  if (has_sm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SendMailExceptRoles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 roleIDs = 1;
  for (int i = 0; i < this->roleIDs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->roleIDs(i), target);
  }
  
  // optional .NetProto_SendMail sm = 2;
  if (has_sm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SendMailExceptRoles::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .NetProto_SendMail sm = 2;
    if (has_sm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sm());
    }
    
  }
  // repeated int64 roleIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleIDs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->roleIDs(i));
    }
    total_size += 1 * this->roleIDs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SendMailExceptRoles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SendMailExceptRoles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SendMailExceptRoles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SendMailExceptRoles::MergeFrom(const DCProto_SendMailExceptRoles& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleIDs_.MergeFrom(from.roleIDs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sm()) {
      mutable_sm()->::NetProto_SendMail::MergeFrom(from.sm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SendMailExceptRoles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SendMailExceptRoles::CopyFrom(const DCProto_SendMailExceptRoles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SendMailExceptRoles::IsInitialized() const {
  
  return true;
}

void DCProto_SendMailExceptRoles::Swap(DCProto_SendMailExceptRoles* other) {
  if (other != this) {
    roleIDs_.Swap(&other->roleIDs_);
    std::swap(sm_, other->sm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SendMailExceptRoles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SendMailExceptRoles_descriptor_;
  metadata.reflection = DCProto_SendMailExceptRoles_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_AddOutLineFriends_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_AddOutLineFriends_ID_descriptor_;
}
bool DCProto_AddOutLineFriends_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_AddOutLineFriends_ID DCProto_AddOutLineFriends::GROUPID;
const DCProto_AddOutLineFriends_ID DCProto_AddOutLineFriends::UNITID;
const DCProto_AddOutLineFriends_ID DCProto_AddOutLineFriends::ID_MIN;
const DCProto_AddOutLineFriends_ID DCProto_AddOutLineFriends::ID_MAX;
const int DCProto_AddOutLineFriends::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_AddOutLineFriends::kRoleID1FieldNumber;
const int DCProto_AddOutLineFriends::kRoleID2FieldNumber;
const int DCProto_AddOutLineFriends::kNameFieldNumber;
const int DCProto_AddOutLineFriends::kProfessionTypeFieldNumber;
#endif  // !_MSC_VER

DCProto_AddOutLineFriends::DCProto_AddOutLineFriends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_AddOutLineFriends::InitAsDefaultInstance() {
}

DCProto_AddOutLineFriends::DCProto_AddOutLineFriends(const DCProto_AddOutLineFriends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_AddOutLineFriends::SharedCtor() {
  _cached_size_ = 0;
  roleID1_ = GOOGLE_LONGLONG(0);
  roleID2_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionType_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_AddOutLineFriends::~DCProto_AddOutLineFriends() {
  SharedDtor();
}

void DCProto_AddOutLineFriends::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_AddOutLineFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_AddOutLineFriends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_AddOutLineFriends_descriptor_;
}

const DCProto_AddOutLineFriends& DCProto_AddOutLineFriends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_AddOutLineFriends* DCProto_AddOutLineFriends::default_instance_ = NULL;

DCProto_AddOutLineFriends* DCProto_AddOutLineFriends::New() const {
  return new DCProto_AddOutLineFriends;
}

void DCProto_AddOutLineFriends::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID1_ = GOOGLE_LONGLONG(0);
    roleID2_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    professionType_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_AddOutLineFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID1_)));
          set_has_roleID1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID2;
        break;
      }
      
      // optional int64 roleID2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID2_)));
          set_has_roleID2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_professionType;
        break;
      }
      
      // optional .PB_ProfessionInfo.Type professionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_professionType(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_AddOutLineFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID1 = 1;
  if (has_roleID1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID1(), output);
  }
  
  // optional int64 roleID2 = 2;
  if (has_roleID2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleID2(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional .PB_ProfessionInfo.Type professionType = 4;
  if (has_professionType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->professionType(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_AddOutLineFriends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID1 = 1;
  if (has_roleID1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID1(), target);
  }
  
  // optional int64 roleID2 = 2;
  if (has_roleID2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleID2(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional .PB_ProfessionInfo.Type professionType = 4;
  if (has_professionType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->professionType(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_AddOutLineFriends::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID1 = 1;
    if (has_roleID1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID1());
    }
    
    // optional int64 roleID2 = 2;
    if (has_roleID2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID2());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .PB_ProfessionInfo.Type professionType = 4;
    if (has_professionType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->professionType());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_AddOutLineFriends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_AddOutLineFriends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_AddOutLineFriends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_AddOutLineFriends::MergeFrom(const DCProto_AddOutLineFriends& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID1()) {
      set_roleID1(from.roleID1());
    }
    if (from.has_roleID2()) {
      set_roleID2(from.roleID2());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_professionType()) {
      set_professionType(from.professionType());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_AddOutLineFriends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_AddOutLineFriends::CopyFrom(const DCProto_AddOutLineFriends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_AddOutLineFriends::IsInitialized() const {
  
  return true;
}

void DCProto_AddOutLineFriends::Swap(DCProto_AddOutLineFriends* other) {
  if (other != this) {
    std::swap(roleID1_, other->roleID1_);
    std::swap(roleID2_, other->roleID2_);
    std::swap(name_, other->name_);
    std::swap(professionType_, other->professionType_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_AddOutLineFriends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_AddOutLineFriends_descriptor_;
  metadata.reflection = DCProto_AddOutLineFriends_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_LoadHireRoleDate_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadHireRoleDate_ID_descriptor_;
}
bool DCProto_LoadHireRoleDate_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_LoadHireRoleDate_ID DCProto_LoadHireRoleDate::GROUPID;
const DCProto_LoadHireRoleDate_ID DCProto_LoadHireRoleDate::UNITID;
const DCProto_LoadHireRoleDate_ID DCProto_LoadHireRoleDate::ID_MIN;
const DCProto_LoadHireRoleDate_ID DCProto_LoadHireRoleDate::ID_MAX;
const int DCProto_LoadHireRoleDate::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_LoadHireRoleDate::kRoleIDFieldNumber;
const int DCProto_LoadHireRoleDate::kAttsFieldNumber;
const int DCProto_LoadHireRoleDate::kIdFieldNumber;
const int DCProto_LoadHireRoleDate::kPowerFieldNumber;
#endif  // !_MSC_VER

DCProto_LoadHireRoleDate::DCProto_LoadHireRoleDate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_LoadHireRoleDate::InitAsDefaultInstance() {
}

DCProto_LoadHireRoleDate::DCProto_LoadHireRoleDate(const DCProto_LoadHireRoleDate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_LoadHireRoleDate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_LoadHireRoleDate::~DCProto_LoadHireRoleDate() {
  SharedDtor();
}

void DCProto_LoadHireRoleDate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_LoadHireRoleDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_LoadHireRoleDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadHireRoleDate_descriptor_;
}

const DCProto_LoadHireRoleDate& DCProto_LoadHireRoleDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_LoadHireRoleDate* DCProto_LoadHireRoleDate::default_instance_ = NULL;

DCProto_LoadHireRoleDate* DCProto_LoadHireRoleDate::New() const {
  return new DCProto_LoadHireRoleDate;
}

void DCProto_LoadHireRoleDate::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    id_ = 0;
    power_ = 0;
  }
  roleID_.Clear();
  atts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_LoadHireRoleDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_roleID())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_roleID())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roleID;
        if (input->ExpectTag(18)) goto parse_atts;
        break;
      }
      
      // repeated .PB_PlayerAtt atts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_atts;
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_power;
        break;
      }
      
      // optional int32 power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_LoadHireRoleDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 roleID = 1;
  for (int i = 0; i < this->roleID_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->roleID(i), output);
  }
  
  // repeated .PB_PlayerAtt atts = 2;
  for (int i = 0; i < this->atts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atts(i), output);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  // optional int32 power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->power(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_LoadHireRoleDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 roleID = 1;
  for (int i = 0; i < this->roleID_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->roleID(i), target);
  }
  
  // repeated .PB_PlayerAtt atts = 2;
  for (int i = 0; i < this->atts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atts(i), target);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  // optional int32 power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->power(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_LoadHireRoleDate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
  }
  // repeated int64 roleID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleID_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->roleID(i));
    }
    total_size += 1 * this->roleID_size() + data_size;
  }
  
  // repeated .PB_PlayerAtt atts = 2;
  total_size += 1 * this->atts_size();
  for (int i = 0; i < this->atts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_LoadHireRoleDate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_LoadHireRoleDate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_LoadHireRoleDate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_LoadHireRoleDate::MergeFrom(const DCProto_LoadHireRoleDate& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleID_.MergeFrom(from.roleID_);
  atts_.MergeFrom(from.atts_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_LoadHireRoleDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_LoadHireRoleDate::CopyFrom(const DCProto_LoadHireRoleDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_LoadHireRoleDate::IsInitialized() const {
  
  return true;
}

void DCProto_LoadHireRoleDate::Swap(DCProto_LoadHireRoleDate* other) {
  if (other != this) {
    roleID_.Swap(&other->roleID_);
    atts_.Swap(&other->atts_);
    std::swap(id_, other->id_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_LoadHireRoleDate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_LoadHireRoleDate_descriptor_;
  metadata.reflection = DCProto_LoadHireRoleDate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_QueryRoleFaction_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryRoleFaction_ID_descriptor_;
}
bool DCProto_QueryRoleFaction_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_QueryRoleFaction_ID DCProto_QueryRoleFaction::GROUPID;
const DCProto_QueryRoleFaction_ID DCProto_QueryRoleFaction::UNITID;
const DCProto_QueryRoleFaction_ID DCProto_QueryRoleFaction::ID_MIN;
const DCProto_QueryRoleFaction_ID DCProto_QueryRoleFaction::ID_MAX;
const int DCProto_QueryRoleFaction::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_QueryRoleFaction::kRoleIDFieldNumber;
const int DCProto_QueryRoleFaction::kFactionFieldNumber;
#endif  // !_MSC_VER

DCProto_QueryRoleFaction::DCProto_QueryRoleFaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_QueryRoleFaction::InitAsDefaultInstance() {
}

DCProto_QueryRoleFaction::DCProto_QueryRoleFaction(const DCProto_QueryRoleFaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_QueryRoleFaction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_QueryRoleFaction::~DCProto_QueryRoleFaction() {
  SharedDtor();
}

void DCProto_QueryRoleFaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_QueryRoleFaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_QueryRoleFaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryRoleFaction_descriptor_;
}

const DCProto_QueryRoleFaction& DCProto_QueryRoleFaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_QueryRoleFaction* DCProto_QueryRoleFaction::default_instance_ = NULL;

DCProto_QueryRoleFaction* DCProto_QueryRoleFaction::New() const {
  return new DCProto_QueryRoleFaction;
}

void DCProto_QueryRoleFaction::Clear() {
  roleID_.Clear();
  faction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_QueryRoleFaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_roleID())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_roleID())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roleID;
        if (input->ExpectTag(18)) goto parse_faction;
        break;
      }
      
      // repeated string faction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_faction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faction(0).data(), this->faction(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_faction;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_QueryRoleFaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 roleID = 1;
  for (int i = 0; i < this->roleID_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->roleID(i), output);
  }
  
  // repeated string faction = 2;
  for (int i = 0; i < this->faction_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->faction(i).data(), this->faction(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->faction(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_QueryRoleFaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 roleID = 1;
  for (int i = 0; i < this->roleID_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->roleID(i), target);
  }
  
  // repeated string faction = 2;
  for (int i = 0; i < this->faction_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faction(i).data(), this->faction(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->faction(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_QueryRoleFaction::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 roleID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleID_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->roleID(i));
    }
    total_size += 1 * this->roleID_size() + data_size;
  }
  
  // repeated string faction = 2;
  total_size += 1 * this->faction_size();
  for (int i = 0; i < this->faction_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->faction(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_QueryRoleFaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_QueryRoleFaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_QueryRoleFaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_QueryRoleFaction::MergeFrom(const DCProto_QueryRoleFaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleID_.MergeFrom(from.roleID_);
  faction_.MergeFrom(from.faction_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_QueryRoleFaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_QueryRoleFaction::CopyFrom(const DCProto_QueryRoleFaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_QueryRoleFaction::IsInitialized() const {
  
  return true;
}

void DCProto_QueryRoleFaction::Swap(DCProto_QueryRoleFaction* other) {
  if (other != this) {
    roleID_.Swap(&other->roleID_);
    faction_.Swap(&other->faction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_QueryRoleFaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_QueryRoleFaction_descriptor_;
  metadata.reflection = DCProto_QueryRoleFaction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_TencentBuyGoodsUrl_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_TencentBuyGoodsUrl_ID_descriptor_;
}
bool DCProto_TencentBuyGoodsUrl_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_TencentBuyGoodsUrl_ID DCProto_TencentBuyGoodsUrl::GROUPID;
const DCProto_TencentBuyGoodsUrl_ID DCProto_TencentBuyGoodsUrl::UNITID;
const DCProto_TencentBuyGoodsUrl_ID DCProto_TencentBuyGoodsUrl::ID_MIN;
const DCProto_TencentBuyGoodsUrl_ID DCProto_TencentBuyGoodsUrl::ID_MAX;
const int DCProto_TencentBuyGoodsUrl::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_TencentBuyGoodsUrl::kVFieldNumber;
const int DCProto_TencentBuyGoodsUrl::kIdFieldNumber;
#endif  // !_MSC_VER

DCProto_TencentBuyGoodsUrl::DCProto_TencentBuyGoodsUrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_TencentBuyGoodsUrl::InitAsDefaultInstance() {
  v_ = const_cast< ::NetProto_TencentBuyGoodsUrl*>(&::NetProto_TencentBuyGoodsUrl::default_instance());
}

DCProto_TencentBuyGoodsUrl::DCProto_TencentBuyGoodsUrl(const DCProto_TencentBuyGoodsUrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_TencentBuyGoodsUrl::SharedCtor() {
  _cached_size_ = 0;
  v_ = NULL;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_TencentBuyGoodsUrl::~DCProto_TencentBuyGoodsUrl() {
  SharedDtor();
}

void DCProto_TencentBuyGoodsUrl::SharedDtor() {
  if (this != default_instance_) {
    delete v_;
  }
}

void DCProto_TencentBuyGoodsUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_TencentBuyGoodsUrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_TencentBuyGoodsUrl_descriptor_;
}

const DCProto_TencentBuyGoodsUrl& DCProto_TencentBuyGoodsUrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_TencentBuyGoodsUrl* DCProto_TencentBuyGoodsUrl::default_instance_ = NULL;

DCProto_TencentBuyGoodsUrl* DCProto_TencentBuyGoodsUrl::New() const {
  return new DCProto_TencentBuyGoodsUrl;
}

void DCProto_TencentBuyGoodsUrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_v()) {
      if (v_ != NULL) v_->::NetProto_TencentBuyGoodsUrl::Clear();
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_TencentBuyGoodsUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_TencentBuyGoodsUrl v = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_TencentBuyGoodsUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_TencentBuyGoodsUrl v = 1;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->v(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_TencentBuyGoodsUrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_TencentBuyGoodsUrl v = 1;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->v(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_TencentBuyGoodsUrl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_TencentBuyGoodsUrl v = 1;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_TencentBuyGoodsUrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_TencentBuyGoodsUrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_TencentBuyGoodsUrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_TencentBuyGoodsUrl::MergeFrom(const DCProto_TencentBuyGoodsUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v()) {
      mutable_v()->::NetProto_TencentBuyGoodsUrl::MergeFrom(from.v());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_TencentBuyGoodsUrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_TencentBuyGoodsUrl::CopyFrom(const DCProto_TencentBuyGoodsUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_TencentBuyGoodsUrl::IsInitialized() const {
  
  return true;
}

void DCProto_TencentBuyGoodsUrl::Swap(DCProto_TencentBuyGoodsUrl* other) {
  if (other != this) {
    std::swap(v_, other->v_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_TencentBuyGoodsUrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_TencentBuyGoodsUrl_descriptor_;
  metadata.reflection = DCProto_TencentBuyGoodsUrl_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_Cost_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_Cost_ID_descriptor_;
}
bool DCProto_Cost_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_Cost_ID DCProto_Cost::GROUPID;
const DCProto_Cost_ID DCProto_Cost::UNITID;
const DCProto_Cost_ID DCProto_Cost::ID_MIN;
const DCProto_Cost_ID DCProto_Cost::ID_MAX;
const int DCProto_Cost::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_Cost::kVFieldNumber;
const int DCProto_Cost::kInfoFieldNumber;
#endif  // !_MSC_VER

DCProto_Cost::DCProto_Cost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_Cost::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerInfo*>(&::PlayerInfo::default_instance());
}

DCProto_Cost::DCProto_Cost(const DCProto_Cost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_Cost::SharedCtor() {
  _cached_size_ = 0;
  v_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_Cost::~DCProto_Cost() {
  SharedDtor();
}

void DCProto_Cost::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DCProto_Cost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_Cost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_Cost_descriptor_;
}

const DCProto_Cost& DCProto_Cost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_Cost* DCProto_Cost::default_instance_ = NULL;

DCProto_Cost* DCProto_Cost::New() const {
  return new DCProto_Cost;
}

void DCProto_Cost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_Cost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 v = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .PlayerInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_Cost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 v = 1;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v(), output);
  }
  
  // optional .PlayerInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_Cost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 v = 1;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v(), target);
  }
  
  // optional .PlayerInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_Cost::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 v = 1;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }
    
    // optional .PlayerInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_Cost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_Cost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_Cost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_Cost::MergeFrom(const DCProto_Cost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_Cost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_Cost::CopyFrom(const DCProto_Cost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_Cost::IsInitialized() const {
  
  return true;
}

void DCProto_Cost::Swap(DCProto_Cost* other) {
  if (other != this) {
    std::swap(v_, other->v_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_Cost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_Cost_descriptor_;
  metadata.reflection = DCProto_Cost_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_FilterRecharge_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FilterRecharge_ID_descriptor_;
}
bool DCProto_FilterRecharge_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_FilterRecharge_ID DCProto_FilterRecharge::GROUPID;
const DCProto_FilterRecharge_ID DCProto_FilterRecharge::UNITID;
const DCProto_FilterRecharge_ID DCProto_FilterRecharge::ID_MIN;
const DCProto_FilterRecharge_ID DCProto_FilterRecharge::ID_MAX;
const int DCProto_FilterRecharge::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_FilterRecharge::kRechargeFieldNumber;
const int DCProto_FilterRecharge::kIdFieldNumber;
const int DCProto_FilterRecharge::kInfoFieldNumber;
const int DCProto_FilterRecharge::kRoleIDFieldNumber;
#endif  // !_MSC_VER

DCProto_FilterRecharge::DCProto_FilterRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_FilterRecharge::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerInfo*>(&::PlayerInfo::default_instance());
}

DCProto_FilterRecharge::DCProto_FilterRecharge(const DCProto_FilterRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_FilterRecharge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  info_ = NULL;
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_FilterRecharge::~DCProto_FilterRecharge() {
  SharedDtor();
}

void DCProto_FilterRecharge::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DCProto_FilterRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_FilterRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FilterRecharge_descriptor_;
}

const DCProto_FilterRecharge& DCProto_FilterRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_FilterRecharge* DCProto_FilterRecharge::default_instance_ = NULL;

DCProto_FilterRecharge* DCProto_FilterRecharge::New() const {
  return new DCProto_FilterRecharge;
}

void DCProto_FilterRecharge::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    id_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::Clear();
    }
    roleID_ = GOOGLE_LONGLONG(0);
  }
  recharge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_FilterRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto_Recharge recharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recharge;
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .PlayerInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_FilterRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NetProto_Recharge recharge = 1;
  for (int i = 0; i < this->recharge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recharge(i), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional .PlayerInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  // optional int64 roleID = 4;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_FilterRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NetProto_Recharge recharge = 1;
  for (int i = 0; i < this->recharge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recharge(i), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional .PlayerInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  // optional int64 roleID = 4;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_FilterRecharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PlayerInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional int64 roleID = 4;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  // repeated .NetProto_Recharge recharge = 1;
  total_size += 1 * this->recharge_size();
  for (int i = 0; i < this->recharge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recharge(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_FilterRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_FilterRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_FilterRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_FilterRecharge::MergeFrom(const DCProto_FilterRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  recharge_.MergeFrom(from.recharge_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MergeFrom(from.info());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_FilterRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_FilterRecharge::CopyFrom(const DCProto_FilterRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_FilterRecharge::IsInitialized() const {
  
  return true;
}

void DCProto_FilterRecharge::Swap(DCProto_FilterRecharge* other) {
  if (other != this) {
    recharge_.Swap(&other->recharge_);
    std::swap(id_, other->id_);
    std::swap(info_, other->info_);
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_FilterRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_FilterRecharge_descriptor_;
  metadata.reflection = DCProto_FilterRecharge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SetVIP_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SetVIP_ID_descriptor_;
}
bool DCProto_SetVIP_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SetVIP_ID DCProto_SetVIP::GROUPID;
const DCProto_SetVIP_ID DCProto_SetVIP::UNITID;
const DCProto_SetVIP_ID DCProto_SetVIP::ID_MIN;
const DCProto_SetVIP_ID DCProto_SetVIP::ID_MAX;
const int DCProto_SetVIP::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SetVIP::kInfoFieldNumber;
#endif  // !_MSC_VER

DCProto_SetVIP::DCProto_SetVIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SetVIP::InitAsDefaultInstance() {
  info_ = const_cast< ::NetProto_GMModifyVIP*>(&::NetProto_GMModifyVIP::default_instance());
}

DCProto_SetVIP::DCProto_SetVIP(const DCProto_SetVIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SetVIP::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SetVIP::~DCProto_SetVIP() {
  SharedDtor();
}

void DCProto_SetVIP::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DCProto_SetVIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SetVIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SetVIP_descriptor_;
}

const DCProto_SetVIP& DCProto_SetVIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SetVIP* DCProto_SetVIP::default_instance_ = NULL;

DCProto_SetVIP* DCProto_SetVIP::New() const {
  return new DCProto_SetVIP;
}

void DCProto_SetVIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::NetProto_GMModifyVIP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SetVIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GMModifyVIP info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SetVIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GMModifyVIP info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SetVIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GMModifyVIP info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SetVIP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GMModifyVIP info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SetVIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SetVIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SetVIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SetVIP::MergeFrom(const DCProto_SetVIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::NetProto_GMModifyVIP::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SetVIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SetVIP::CopyFrom(const DCProto_SetVIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SetVIP::IsInitialized() const {
  
  return true;
}

void DCProto_SetVIP::Swap(DCProto_SetVIP* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SetVIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SetVIP_descriptor_;
  metadata.reflection = DCProto_SetVIP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_CollectEquipment_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_CollectEquipment_ID_descriptor_;
}
bool DCProto_CollectEquipment_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_CollectEquipment_ID DCProto_CollectEquipment::GROUPID;
const DCProto_CollectEquipment_ID DCProto_CollectEquipment::UNITID;
const DCProto_CollectEquipment_ID DCProto_CollectEquipment::ID_MIN;
const DCProto_CollectEquipment_ID DCProto_CollectEquipment::ID_MAX;
const int DCProto_CollectEquipment::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_CollectEquipment::kCurFieldNumber;
#endif  // !_MSC_VER

DCProto_CollectEquipment::DCProto_CollectEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_CollectEquipment::InitAsDefaultInstance() {
}

DCProto_CollectEquipment::DCProto_CollectEquipment(const DCProto_CollectEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_CollectEquipment::SharedCtor() {
  _cached_size_ = 0;
  cur_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_CollectEquipment::~DCProto_CollectEquipment() {
  SharedDtor();
}

void DCProto_CollectEquipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_CollectEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_CollectEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_CollectEquipment_descriptor_;
}

const DCProto_CollectEquipment& DCProto_CollectEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_CollectEquipment* DCProto_CollectEquipment::default_instance_ = NULL;

DCProto_CollectEquipment* DCProto_CollectEquipment::New() const {
  return new DCProto_CollectEquipment;
}

void DCProto_CollectEquipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_CollectEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cur = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_CollectEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cur = 1;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cur(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_CollectEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cur = 1;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cur(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_CollectEquipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cur = 1;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_CollectEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_CollectEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_CollectEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_CollectEquipment::MergeFrom(const DCProto_CollectEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur()) {
      set_cur(from.cur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_CollectEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_CollectEquipment::CopyFrom(const DCProto_CollectEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_CollectEquipment::IsInitialized() const {
  
  return true;
}

void DCProto_CollectEquipment::Swap(DCProto_CollectEquipment* other) {
  if (other != this) {
    std::swap(cur_, other->cur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_CollectEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_CollectEquipment_descriptor_;
  metadata.reflection = DCProto_CollectEquipment_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SaveEquipmentData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveEquipmentData_ID_descriptor_;
}
bool DCProto_SaveEquipmentData_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SaveEquipmentData_ID DCProto_SaveEquipmentData::GROUPID;
const DCProto_SaveEquipmentData_ID DCProto_SaveEquipmentData::UNITID;
const DCProto_SaveEquipmentData_ID DCProto_SaveEquipmentData::ID_MIN;
const DCProto_SaveEquipmentData_ID DCProto_SaveEquipmentData::ID_MAX;
const int DCProto_SaveEquipmentData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SaveEquipmentData::kEquipmentsFieldNumber;
const int DCProto_SaveEquipmentData::kOwnerFieldNumber;
#endif  // !_MSC_VER

DCProto_SaveEquipmentData::DCProto_SaveEquipmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SaveEquipmentData::InitAsDefaultInstance() {
}

DCProto_SaveEquipmentData::DCProto_SaveEquipmentData(const DCProto_SaveEquipmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SaveEquipmentData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SaveEquipmentData::~DCProto_SaveEquipmentData() {
  SharedDtor();
}

void DCProto_SaveEquipmentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_SaveEquipmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SaveEquipmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveEquipmentData_descriptor_;
}

const DCProto_SaveEquipmentData& DCProto_SaveEquipmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SaveEquipmentData* DCProto_SaveEquipmentData::default_instance_ = NULL;

DCProto_SaveEquipmentData* DCProto_SaveEquipmentData::New() const {
  return new DCProto_SaveEquipmentData;
}

void DCProto_SaveEquipmentData::Clear() {
  equipments_.Clear();
  owner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SaveEquipmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipmentInfo equipments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipments;
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }
      
      // repeated int64 owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_owner())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_owner())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SaveEquipmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipmentInfo equipments = 1;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipments(i), output);
  }
  
  // repeated int64 owner = 2;
  for (int i = 0; i < this->owner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->owner(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SaveEquipmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipmentInfo equipments = 1;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipments(i), target);
  }
  
  // repeated int64 owner = 2;
  for (int i = 0; i < this->owner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->owner(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SaveEquipmentData::ByteSize() const {
  int total_size = 0;
  
  // repeated .EquipmentInfo equipments = 1;
  total_size += 1 * this->equipments_size();
  for (int i = 0; i < this->equipments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipments(i));
  }
  
  // repeated int64 owner = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->owner_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->owner(i));
    }
    total_size += 1 * this->owner_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SaveEquipmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SaveEquipmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SaveEquipmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SaveEquipmentData::MergeFrom(const DCProto_SaveEquipmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipments_.MergeFrom(from.equipments_);
  owner_.MergeFrom(from.owner_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SaveEquipmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SaveEquipmentData::CopyFrom(const DCProto_SaveEquipmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SaveEquipmentData::IsInitialized() const {
  
  return true;
}

void DCProto_SaveEquipmentData::Swap(DCProto_SaveEquipmentData* other) {
  if (other != this) {
    equipments_.Swap(&other->equipments_);
    owner_.Swap(&other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SaveEquipmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SaveEquipmentData_descriptor_;
  metadata.reflection = DCProto_SaveEquipmentData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_LoadEquipmentData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadEquipmentData_ID_descriptor_;
}
bool DCProto_LoadEquipmentData_ID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_LoadEquipmentData_ID DCProto_LoadEquipmentData::GROUPID;
const DCProto_LoadEquipmentData_ID DCProto_LoadEquipmentData::UNITID;
const DCProto_LoadEquipmentData_ID DCProto_LoadEquipmentData::ID_MIN;
const DCProto_LoadEquipmentData_ID DCProto_LoadEquipmentData::ID_MAX;
const int DCProto_LoadEquipmentData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_LoadEquipmentData::kIdFieldNumber;
const int DCProto_LoadEquipmentData::kEquipmentFieldNumber;
#endif  // !_MSC_VER

DCProto_LoadEquipmentData::DCProto_LoadEquipmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_LoadEquipmentData::InitAsDefaultInstance() {
}

DCProto_LoadEquipmentData::DCProto_LoadEquipmentData(const DCProto_LoadEquipmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_LoadEquipmentData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_LoadEquipmentData::~DCProto_LoadEquipmentData() {
  SharedDtor();
}

void DCProto_LoadEquipmentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_LoadEquipmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_LoadEquipmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadEquipmentData_descriptor_;
}

const DCProto_LoadEquipmentData& DCProto_LoadEquipmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_LoadEquipmentData* DCProto_LoadEquipmentData::default_instance_ = NULL;

DCProto_LoadEquipmentData* DCProto_LoadEquipmentData::New() const {
  return new DCProto_LoadEquipmentData;
}

void DCProto_LoadEquipmentData::Clear() {
  id_.Clear();
  equipment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_LoadEquipmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(18)) goto parse_equipment;
        break;
      }
      
      // repeated .EquipmentInfo equipment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipment;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_LoadEquipmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->id(i), output);
  }
  
  // repeated .EquipmentInfo equipment = 2;
  for (int i = 0; i < this->equipment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipment(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_LoadEquipmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->id(i), target);
  }
  
  // repeated .EquipmentInfo equipment = 2;
  for (int i = 0; i < this->equipment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipment(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_LoadEquipmentData::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  // repeated .EquipmentInfo equipment = 2;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_LoadEquipmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_LoadEquipmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_LoadEquipmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_LoadEquipmentData::MergeFrom(const DCProto_LoadEquipmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  equipment_.MergeFrom(from.equipment_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_LoadEquipmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_LoadEquipmentData::CopyFrom(const DCProto_LoadEquipmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_LoadEquipmentData::IsInitialized() const {
  
  return true;
}

void DCProto_LoadEquipmentData::Swap(DCProto_LoadEquipmentData* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    equipment_.Swap(&other->equipment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_LoadEquipmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_LoadEquipmentData_descriptor_;
  metadata.reflection = DCProto_LoadEquipmentData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_DeleteEquipmentData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_DeleteEquipmentData_ID_descriptor_;
}
bool DCProto_DeleteEquipmentData_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_DeleteEquipmentData_ID DCProto_DeleteEquipmentData::GROUPID;
const DCProto_DeleteEquipmentData_ID DCProto_DeleteEquipmentData::UNITID;
const DCProto_DeleteEquipmentData_ID DCProto_DeleteEquipmentData::ID_MIN;
const DCProto_DeleteEquipmentData_ID DCProto_DeleteEquipmentData::ID_MAX;
const int DCProto_DeleteEquipmentData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_DeleteEquipmentData::kIdFieldNumber;
#endif  // !_MSC_VER

DCProto_DeleteEquipmentData::DCProto_DeleteEquipmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_DeleteEquipmentData::InitAsDefaultInstance() {
}

DCProto_DeleteEquipmentData::DCProto_DeleteEquipmentData(const DCProto_DeleteEquipmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_DeleteEquipmentData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_DeleteEquipmentData::~DCProto_DeleteEquipmentData() {
  SharedDtor();
}

void DCProto_DeleteEquipmentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_DeleteEquipmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_DeleteEquipmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_DeleteEquipmentData_descriptor_;
}

const DCProto_DeleteEquipmentData& DCProto_DeleteEquipmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_DeleteEquipmentData* DCProto_DeleteEquipmentData::default_instance_ = NULL;

DCProto_DeleteEquipmentData* DCProto_DeleteEquipmentData::New() const {
  return new DCProto_DeleteEquipmentData;
}

void DCProto_DeleteEquipmentData::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_DeleteEquipmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_DeleteEquipmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_DeleteEquipmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_DeleteEquipmentData::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_DeleteEquipmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_DeleteEquipmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_DeleteEquipmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_DeleteEquipmentData::MergeFrom(const DCProto_DeleteEquipmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_DeleteEquipmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_DeleteEquipmentData::CopyFrom(const DCProto_DeleteEquipmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_DeleteEquipmentData::IsInitialized() const {
  
  return true;
}

void DCProto_DeleteEquipmentData::Swap(DCProto_DeleteEquipmentData* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_DeleteEquipmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_DeleteEquipmentData_descriptor_;
  metadata.reflection = DCProto_DeleteEquipmentData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_QueryEquipment_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryEquipment_ID_descriptor_;
}
bool DCProto_QueryEquipment_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_QueryEquipment_ID DCProto_QueryEquipment::GROUPID;
const DCProto_QueryEquipment_ID DCProto_QueryEquipment::UNITID;
const DCProto_QueryEquipment_ID DCProto_QueryEquipment::ID_MIN;
const DCProto_QueryEquipment_ID DCProto_QueryEquipment::ID_MAX;
const int DCProto_QueryEquipment::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_QueryEquipment::kItemIDFieldNumber;
const int DCProto_QueryEquipment::kEquipmentFieldNumber;
const int DCProto_QueryEquipment::kIdFieldNumber;
#endif  // !_MSC_VER

DCProto_QueryEquipment::DCProto_QueryEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_QueryEquipment::InitAsDefaultInstance() {
  equipment_ = const_cast< ::EquipmentInfo*>(&::EquipmentInfo::default_instance());
}

DCProto_QueryEquipment::DCProto_QueryEquipment(const DCProto_QueryEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_QueryEquipment::SharedCtor() {
  _cached_size_ = 0;
  itemID_ = GOOGLE_LONGLONG(0);
  equipment_ = NULL;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_QueryEquipment::~DCProto_QueryEquipment() {
  SharedDtor();
}

void DCProto_QueryEquipment::SharedDtor() {
  if (this != default_instance_) {
    delete equipment_;
  }
}

void DCProto_QueryEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_QueryEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryEquipment_descriptor_;
}

const DCProto_QueryEquipment& DCProto_QueryEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_QueryEquipment* DCProto_QueryEquipment::default_instance_ = NULL;

DCProto_QueryEquipment* DCProto_QueryEquipment::New() const {
  return new DCProto_QueryEquipment;
}

void DCProto_QueryEquipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemID_ = GOOGLE_LONGLONG(0);
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::EquipmentInfo::Clear();
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_QueryEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemID_)));
          set_has_itemID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipment;
        break;
      }
      
      // optional .EquipmentInfo equipment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_QueryEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 itemID = 1;
  if (has_itemID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemID(), output);
  }
  
  // optional .EquipmentInfo equipment = 2;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipment(), output);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_QueryEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 itemID = 1;
  if (has_itemID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemID(), target);
  }
  
  // optional .EquipmentInfo equipment = 2;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipment(), target);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_QueryEquipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 itemID = 1;
    if (has_itemID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemID());
    }
    
    // optional .EquipmentInfo equipment = 2;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }
    
    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_QueryEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_QueryEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_QueryEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_QueryEquipment::MergeFrom(const DCProto_QueryEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemID()) {
      set_itemID(from.itemID());
    }
    if (from.has_equipment()) {
      mutable_equipment()->::EquipmentInfo::MergeFrom(from.equipment());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_QueryEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_QueryEquipment::CopyFrom(const DCProto_QueryEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_QueryEquipment::IsInitialized() const {
  
  return true;
}

void DCProto_QueryEquipment::Swap(DCProto_QueryEquipment* other) {
  if (other != this) {
    std::swap(itemID_, other->itemID_);
    std::swap(equipment_, other->equipment_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_QueryEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_QueryEquipment_descriptor_;
  metadata.reflection = DCProto_QueryEquipment_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMOrder_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMOrder_ID_descriptor_;
}
bool DCProto_GMOrder_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMOrder_ID DCProto_GMOrder::GROUPID;
const DCProto_GMOrder_ID DCProto_GMOrder::UNITID;
const DCProto_GMOrder_ID DCProto_GMOrder::ID_MIN;
const DCProto_GMOrder_ID DCProto_GMOrder::ID_MAX;
const int DCProto_GMOrder::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMOrder::kOrderFieldNumber;
#endif  // !_MSC_VER

DCProto_GMOrder::DCProto_GMOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMOrder::InitAsDefaultInstance() {
  order_ = const_cast< ::NetProto_GMOrder*>(&::NetProto_GMOrder::default_instance());
}

DCProto_GMOrder::DCProto_GMOrder(const DCProto_GMOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMOrder::SharedCtor() {
  _cached_size_ = 0;
  order_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMOrder::~DCProto_GMOrder() {
  SharedDtor();
}

void DCProto_GMOrder::SharedDtor() {
  if (this != default_instance_) {
    delete order_;
  }
}

void DCProto_GMOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMOrder_descriptor_;
}

const DCProto_GMOrder& DCProto_GMOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMOrder* DCProto_GMOrder::default_instance_ = NULL;

DCProto_GMOrder* DCProto_GMOrder::New() const {
  return new DCProto_GMOrder;
}

void DCProto_GMOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order()) {
      if (order_ != NULL) order_->::NetProto_GMOrder::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GMOrder order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GMOrder order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GMOrder order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GMOrder order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMOrder::MergeFrom(const DCProto_GMOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      mutable_order()->::NetProto_GMOrder::MergeFrom(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMOrder::CopyFrom(const DCProto_GMOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMOrder::IsInitialized() const {
  
  return true;
}

void DCProto_GMOrder::Swap(DCProto_GMOrder* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMOrder_descriptor_;
  metadata.reflection = DCProto_GMOrder_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMData_ID_descriptor_;
}
bool DCProto_GMData_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMData_ID DCProto_GMData::GROUPID;
const DCProto_GMData_ID DCProto_GMData::UNITID;
const DCProto_GMData_ID DCProto_GMData::ID_MIN;
const DCProto_GMData_ID DCProto_GMData::ID_MAX;
const int DCProto_GMData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMData::kIdFieldNumber;
const int DCProto_GMData::kRoleIDFieldNumber;
const int DCProto_GMData::kNameFieldNumber;
const int DCProto_GMData::kLevelFieldNumber;
const int DCProto_GMData::kProfessionFieldNumber;
const int DCProto_GMData::kStartTimeFieldNumber;
const int DCProto_GMData::kEndTimeFieldNumber;
const int DCProto_GMData::kGMFieldNumber;
const int DCProto_GMData::kFlagFieldNumber;
#endif  // !_MSC_VER

DCProto_GMData::DCProto_GMData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMData::InitAsDefaultInstance() {
}

DCProto_GMData::DCProto_GMData(const DCProto_GMData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  profession_ = 0;
  startTime_ = 0;
  endTime_ = 0;
  GM_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMData::~DCProto_GMData() {
  SharedDtor();
}

void DCProto_GMData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (GM_ != &::google::protobuf::internal::kEmptyString) {
    delete GM_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_GMData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMData_descriptor_;
}

const DCProto_GMData& DCProto_GMData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMData* DCProto_GMData::default_instance_ = NULL;

DCProto_GMData* DCProto_GMData::New() const {
  return new DCProto_GMData;
}

void DCProto_GMData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    profession_ = 0;
    startTime_ = 0;
    endTime_ = 0;
    if (has_GM()) {
      if (GM_ != &::google::protobuf::internal::kEmptyString) {
        GM_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }
      
      // optional int32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startTime;
        break;
      }
      
      // optional int32 startTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startTime_)));
          set_has_startTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endTime_)));
          set_has_endTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_GM;
        break;
      }
      
      // optional string GM = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_GM()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->GM().data(), this->GM().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleID(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }
  
  // optional int32 startTime = 6;
  if (has_startTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->startTime(), output);
  }
  
  // optional int32 endTime = 7;
  if (has_endTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->endTime(), output);
  }
  
  // optional string GM = 8;
  if (has_GM()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->GM().data(), this->GM().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->GM(), output);
  }
  
  // optional bool flag = 9;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleID(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }
  
  // optional int32 startTime = 6;
  if (has_startTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->startTime(), target);
  }
  
  // optional int32 endTime = 7;
  if (has_endTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->endTime(), target);
  }
  
  // optional string GM = 8;
  if (has_GM()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->GM().data(), this->GM().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->GM(), target);
  }
  
  // optional bool flag = 9;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int64 roleID = 2;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }
    
    // optional int32 startTime = 6;
    if (has_startTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startTime());
    }
    
    // optional int32 endTime = 7;
    if (has_endTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endTime());
    }
    
    // optional string GM = 8;
    if (has_GM()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->GM());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool flag = 9;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMData::MergeFrom(const DCProto_GMData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_startTime()) {
      set_startTime(from.startTime());
    }
    if (from.has_endTime()) {
      set_endTime(from.endTime());
    }
    if (from.has_GM()) {
      set_GM(from.GM());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMData::CopyFrom(const DCProto_GMData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMData::IsInitialized() const {
  
  return true;
}

void DCProto_GMData::Swap(DCProto_GMData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(roleID_, other->roleID_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(profession_, other->profession_);
    std::swap(startTime_, other->startTime_);
    std::swap(endTime_, other->endTime_);
    std::swap(GM_, other->GM_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMData_descriptor_;
  metadata.reflection = DCProto_GMData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMSaveData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMSaveData_ID_descriptor_;
}
bool DCProto_GMSaveData_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMSaveData_ID DCProto_GMSaveData::GROUPID;
const DCProto_GMSaveData_ID DCProto_GMSaveData::UNITID;
const DCProto_GMSaveData_ID DCProto_GMSaveData::ID_MIN;
const DCProto_GMSaveData_ID DCProto_GMSaveData::ID_MAX;
const int DCProto_GMSaveData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMSaveData::kGmDataFieldNumber;
const int DCProto_GMSaveData::kAddOrDelFieldNumber;
#endif  // !_MSC_VER

DCProto_GMSaveData::DCProto_GMSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMSaveData::InitAsDefaultInstance() {
  gmData_ = const_cast< ::DCProto_GMData*>(&::DCProto_GMData::default_instance());
}

DCProto_GMSaveData::DCProto_GMSaveData(const DCProto_GMSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMSaveData::SharedCtor() {
  _cached_size_ = 0;
  gmData_ = NULL;
  addOrDel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMSaveData::~DCProto_GMSaveData() {
  SharedDtor();
}

void DCProto_GMSaveData::SharedDtor() {
  if (this != default_instance_) {
    delete gmData_;
  }
}

void DCProto_GMSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMSaveData_descriptor_;
}

const DCProto_GMSaveData& DCProto_GMSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMSaveData* DCProto_GMSaveData::default_instance_ = NULL;

DCProto_GMSaveData* DCProto_GMSaveData::New() const {
  return new DCProto_GMSaveData;
}

void DCProto_GMSaveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gmData()) {
      if (gmData_ != NULL) gmData_->::DCProto_GMData::Clear();
    }
    addOrDel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DCProto_GMData gmData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gmData()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addOrDel;
        break;
      }
      
      // optional bool addOrDel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addOrDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addOrDel_)));
          set_has_addOrDel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DCProto_GMData gmData = 1;
  if (has_gmData()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmData(), output);
  }
  
  // optional bool addOrDel = 2;
  if (has_addOrDel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->addOrDel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DCProto_GMData gmData = 1;
  if (has_gmData()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmData(), target);
  }
  
  // optional bool addOrDel = 2;
  if (has_addOrDel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->addOrDel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMSaveData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DCProto_GMData gmData = 1;
    if (has_gmData()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gmData());
    }
    
    // optional bool addOrDel = 2;
    if (has_addOrDel()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMSaveData::MergeFrom(const DCProto_GMSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmData()) {
      mutable_gmData()->::DCProto_GMData::MergeFrom(from.gmData());
    }
    if (from.has_addOrDel()) {
      set_addOrDel(from.addOrDel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMSaveData::CopyFrom(const DCProto_GMSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMSaveData::IsInitialized() const {
  
  return true;
}

void DCProto_GMSaveData::Swap(DCProto_GMSaveData* other) {
  if (other != this) {
    std::swap(gmData_, other->gmData_);
    std::swap(addOrDel_, other->addOrDel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMSaveData_descriptor_;
  metadata.reflection = DCProto_GMSaveData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMLoadData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMLoadData_ID_descriptor_;
}
bool DCProto_GMLoadData_ID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMLoadData_ID DCProto_GMLoadData::GROUPID;
const DCProto_GMLoadData_ID DCProto_GMLoadData::UNITID;
const DCProto_GMLoadData_ID DCProto_GMLoadData::ID_MIN;
const DCProto_GMLoadData_ID DCProto_GMLoadData::ID_MAX;
const int DCProto_GMLoadData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMLoadData::kGmDataFieldNumber;
#endif  // !_MSC_VER

DCProto_GMLoadData::DCProto_GMLoadData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMLoadData::InitAsDefaultInstance() {
}

DCProto_GMLoadData::DCProto_GMLoadData(const DCProto_GMLoadData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMLoadData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMLoadData::~DCProto_GMLoadData() {
  SharedDtor();
}

void DCProto_GMLoadData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_GMLoadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMLoadData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMLoadData_descriptor_;
}

const DCProto_GMLoadData& DCProto_GMLoadData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMLoadData* DCProto_GMLoadData::default_instance_ = NULL;

DCProto_GMLoadData* DCProto_GMLoadData::New() const {
  return new DCProto_GMLoadData;
}

void DCProto_GMLoadData::Clear() {
  gmData_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMLoadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DCProto_GMData gmData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmData()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gmData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMLoadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DCProto_GMData gmData = 1;
  for (int i = 0; i < this->gmData_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmData(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMLoadData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DCProto_GMData gmData = 1;
  for (int i = 0; i < this->gmData_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmData(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMLoadData::ByteSize() const {
  int total_size = 0;
  
  // repeated .DCProto_GMData gmData = 1;
  total_size += 1 * this->gmData_size();
  for (int i = 0; i < this->gmData_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmData(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMLoadData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMLoadData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMLoadData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMLoadData::MergeFrom(const DCProto_GMLoadData& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmData_.MergeFrom(from.gmData_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMLoadData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMLoadData::CopyFrom(const DCProto_GMLoadData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMLoadData::IsInitialized() const {
  
  return true;
}

void DCProto_GMLoadData::Swap(DCProto_GMLoadData* other) {
  if (other != this) {
    gmData_.Swap(&other->gmData_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMLoadData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMLoadData_descriptor_;
  metadata.reflection = DCProto_GMLoadData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMPlayerQuery_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMPlayerQuery_ID_descriptor_;
}
bool DCProto_GMPlayerQuery_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMPlayerQuery_ID DCProto_GMPlayerQuery::GROUPID;
const DCProto_GMPlayerQuery_ID DCProto_GMPlayerQuery::UNITID;
const DCProto_GMPlayerQuery_ID DCProto_GMPlayerQuery::ID_MIN;
const DCProto_GMPlayerQuery_ID DCProto_GMPlayerQuery::ID_MAX;
const int DCProto_GMPlayerQuery::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMPlayerQuery::kAccountFieldNumber;
const int DCProto_GMPlayerQuery::kAttFieldNumber;
#endif  // !_MSC_VER

DCProto_GMPlayerQuery::DCProto_GMPlayerQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMPlayerQuery::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

DCProto_GMPlayerQuery::DCProto_GMPlayerQuery(const DCProto_GMPlayerQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMPlayerQuery::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  att_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMPlayerQuery::~DCProto_GMPlayerQuery() {
  SharedDtor();
}

void DCProto_GMPlayerQuery::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
    delete att_;
  }
}

void DCProto_GMPlayerQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMPlayerQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMPlayerQuery_descriptor_;
}

const DCProto_GMPlayerQuery& DCProto_GMPlayerQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMPlayerQuery* DCProto_GMPlayerQuery::default_instance_ = NULL;

DCProto_GMPlayerQuery* DCProto_GMPlayerQuery::New() const {
  return new DCProto_GMPlayerQuery;
}

void DCProto_GMPlayerQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_att()) {
      if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMPlayerQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_att;
        break;
      }
      
      // optional .PB_PlayerAtt att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMPlayerQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->att(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMPlayerQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->att(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMPlayerQuery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional .PB_PlayerAtt att = 2;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMPlayerQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMPlayerQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMPlayerQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMPlayerQuery::MergeFrom(const DCProto_GMPlayerQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_att()) {
      mutable_att()->::PB_PlayerAtt::MergeFrom(from.att());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMPlayerQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMPlayerQuery::CopyFrom(const DCProto_GMPlayerQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMPlayerQuery::IsInitialized() const {
  
  return true;
}

void DCProto_GMPlayerQuery::Swap(DCProto_GMPlayerQuery* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(att_, other->att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMPlayerQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMPlayerQuery_descriptor_;
  metadata.reflection = DCProto_GMPlayerQuery_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMChatRecords_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMChatRecords_ID_descriptor_;
}
bool DCProto_GMChatRecords_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMChatRecords_ID DCProto_GMChatRecords::GROUPID;
const DCProto_GMChatRecords_ID DCProto_GMChatRecords::UNITID;
const DCProto_GMChatRecords_ID DCProto_GMChatRecords::ID_MIN;
const DCProto_GMChatRecords_ID DCProto_GMChatRecords::ID_MAX;
const int DCProto_GMChatRecords::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMChatRecords::kIdFieldNumber;
const int DCProto_GMChatRecords::kRecordFieldNumber;
#endif  // !_MSC_VER

DCProto_GMChatRecords::DCProto_GMChatRecords()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMChatRecords::InitAsDefaultInstance() {
  record_ = const_cast< ::NetProto_GMChatRecords*>(&::NetProto_GMChatRecords::default_instance());
}

DCProto_GMChatRecords::DCProto_GMChatRecords(const DCProto_GMChatRecords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMChatRecords::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMChatRecords::~DCProto_GMChatRecords() {
  SharedDtor();
}

void DCProto_GMChatRecords::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void DCProto_GMChatRecords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMChatRecords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMChatRecords_descriptor_;
}

const DCProto_GMChatRecords& DCProto_GMChatRecords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMChatRecords* DCProto_GMChatRecords::default_instance_ = NULL;

DCProto_GMChatRecords* DCProto_GMChatRecords::New() const {
  return new DCProto_GMChatRecords;
}

void DCProto_GMChatRecords::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_record()) {
      if (record_ != NULL) record_->::NetProto_GMChatRecords::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMChatRecords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }
      
      // optional .NetProto_GMChatRecords record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMChatRecords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .NetProto_GMChatRecords record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMChatRecords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .NetProto_GMChatRecords record = 2;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMChatRecords::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_GMChatRecords record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMChatRecords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMChatRecords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMChatRecords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMChatRecords::MergeFrom(const DCProto_GMChatRecords& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_record()) {
      mutable_record()->::NetProto_GMChatRecords::MergeFrom(from.record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMChatRecords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMChatRecords::CopyFrom(const DCProto_GMChatRecords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMChatRecords::IsInitialized() const {
  
  return true;
}

void DCProto_GMChatRecords::Swap(DCProto_GMChatRecords* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(record_, other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMChatRecords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMChatRecords_descriptor_;
  metadata.reflection = DCProto_GMChatRecords_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMRegistrCount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMRegistrCount_ID_descriptor_;
}
bool DCProto_GMRegistrCount_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMRegistrCount_ID DCProto_GMRegistrCount::GROUPID;
const DCProto_GMRegistrCount_ID DCProto_GMRegistrCount::UNITID;
const DCProto_GMRegistrCount_ID DCProto_GMRegistrCount::ID_MIN;
const DCProto_GMRegistrCount_ID DCProto_GMRegistrCount::ID_MAX;
const int DCProto_GMRegistrCount::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMRegistrCount::kIdFieldNumber;
const int DCProto_GMRegistrCount::kRecordFieldNumber;
#endif  // !_MSC_VER

DCProto_GMRegistrCount::DCProto_GMRegistrCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMRegistrCount::InitAsDefaultInstance() {
  record_ = const_cast< ::NetProto_GMRegistrCount*>(&::NetProto_GMRegistrCount::default_instance());
}

DCProto_GMRegistrCount::DCProto_GMRegistrCount(const DCProto_GMRegistrCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMRegistrCount::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMRegistrCount::~DCProto_GMRegistrCount() {
  SharedDtor();
}

void DCProto_GMRegistrCount::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void DCProto_GMRegistrCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMRegistrCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMRegistrCount_descriptor_;
}

const DCProto_GMRegistrCount& DCProto_GMRegistrCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMRegistrCount* DCProto_GMRegistrCount::default_instance_ = NULL;

DCProto_GMRegistrCount* DCProto_GMRegistrCount::New() const {
  return new DCProto_GMRegistrCount;
}

void DCProto_GMRegistrCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_record()) {
      if (record_ != NULL) record_->::NetProto_GMRegistrCount::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMRegistrCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }
      
      // optional .NetProto_GMRegistrCount record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMRegistrCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .NetProto_GMRegistrCount record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMRegistrCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .NetProto_GMRegistrCount record = 2;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMRegistrCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_GMRegistrCount record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMRegistrCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMRegistrCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMRegistrCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMRegistrCount::MergeFrom(const DCProto_GMRegistrCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_record()) {
      mutable_record()->::NetProto_GMRegistrCount::MergeFrom(from.record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMRegistrCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMRegistrCount::CopyFrom(const DCProto_GMRegistrCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMRegistrCount::IsInitialized() const {
  
  return true;
}

void DCProto_GMRegistrCount::Swap(DCProto_GMRegistrCount* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(record_, other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMRegistrCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMRegistrCount_descriptor_;
  metadata.reflection = DCProto_GMRegistrCount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMRoleCount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMRoleCount_ID_descriptor_;
}
bool DCProto_GMRoleCount_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMRoleCount_ID DCProto_GMRoleCount::GROUPID;
const DCProto_GMRoleCount_ID DCProto_GMRoleCount::UNITID;
const DCProto_GMRoleCount_ID DCProto_GMRoleCount::ID_MIN;
const DCProto_GMRoleCount_ID DCProto_GMRoleCount::ID_MAX;
const int DCProto_GMRoleCount::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMRoleCount::kIdFieldNumber;
const int DCProto_GMRoleCount::kRecordFieldNumber;
#endif  // !_MSC_VER

DCProto_GMRoleCount::DCProto_GMRoleCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMRoleCount::InitAsDefaultInstance() {
  record_ = const_cast< ::NetProto_GMRoleCount*>(&::NetProto_GMRoleCount::default_instance());
}

DCProto_GMRoleCount::DCProto_GMRoleCount(const DCProto_GMRoleCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMRoleCount::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMRoleCount::~DCProto_GMRoleCount() {
  SharedDtor();
}

void DCProto_GMRoleCount::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void DCProto_GMRoleCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMRoleCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMRoleCount_descriptor_;
}

const DCProto_GMRoleCount& DCProto_GMRoleCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMRoleCount* DCProto_GMRoleCount::default_instance_ = NULL;

DCProto_GMRoleCount* DCProto_GMRoleCount::New() const {
  return new DCProto_GMRoleCount;
}

void DCProto_GMRoleCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_record()) {
      if (record_ != NULL) record_->::NetProto_GMRoleCount::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMRoleCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }
      
      // optional .NetProto_GMRoleCount record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMRoleCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .NetProto_GMRoleCount record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMRoleCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .NetProto_GMRoleCount record = 2;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMRoleCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_GMRoleCount record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMRoleCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMRoleCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMRoleCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMRoleCount::MergeFrom(const DCProto_GMRoleCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_record()) {
      mutable_record()->::NetProto_GMRoleCount::MergeFrom(from.record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMRoleCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMRoleCount::CopyFrom(const DCProto_GMRoleCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMRoleCount::IsInitialized() const {
  
  return true;
}

void DCProto_GMRoleCount::Swap(DCProto_GMRoleCount* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(record_, other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMRoleCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMRoleCount_descriptor_;
  metadata.reflection = DCProto_GMRoleCount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMLevelStatistics_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMLevelStatistics_ID_descriptor_;
}
bool DCProto_GMLevelStatistics_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMLevelStatistics_ID DCProto_GMLevelStatistics::GROUPID;
const DCProto_GMLevelStatistics_ID DCProto_GMLevelStatistics::UNITID;
const DCProto_GMLevelStatistics_ID DCProto_GMLevelStatistics::ID_MIN;
const DCProto_GMLevelStatistics_ID DCProto_GMLevelStatistics::ID_MAX;
const int DCProto_GMLevelStatistics::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMLevelStatistics::kIdFieldNumber;
const int DCProto_GMLevelStatistics::kRecordFieldNumber;
#endif  // !_MSC_VER

DCProto_GMLevelStatistics::DCProto_GMLevelStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMLevelStatistics::InitAsDefaultInstance() {
  record_ = const_cast< ::NetProto_GMLevelStatistics*>(&::NetProto_GMLevelStatistics::default_instance());
}

DCProto_GMLevelStatistics::DCProto_GMLevelStatistics(const DCProto_GMLevelStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMLevelStatistics::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMLevelStatistics::~DCProto_GMLevelStatistics() {
  SharedDtor();
}

void DCProto_GMLevelStatistics::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void DCProto_GMLevelStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMLevelStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMLevelStatistics_descriptor_;
}

const DCProto_GMLevelStatistics& DCProto_GMLevelStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMLevelStatistics* DCProto_GMLevelStatistics::default_instance_ = NULL;

DCProto_GMLevelStatistics* DCProto_GMLevelStatistics::New() const {
  return new DCProto_GMLevelStatistics;
}

void DCProto_GMLevelStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_record()) {
      if (record_ != NULL) record_->::NetProto_GMLevelStatistics::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMLevelStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }
      
      // optional .NetProto_GMLevelStatistics record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMLevelStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .NetProto_GMLevelStatistics record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMLevelStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .NetProto_GMLevelStatistics record = 2;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMLevelStatistics::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_GMLevelStatistics record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMLevelStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMLevelStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMLevelStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMLevelStatistics::MergeFrom(const DCProto_GMLevelStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_record()) {
      mutable_record()->::NetProto_GMLevelStatistics::MergeFrom(from.record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMLevelStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMLevelStatistics::CopyFrom(const DCProto_GMLevelStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMLevelStatistics::IsInitialized() const {
  
  return true;
}

void DCProto_GMLevelStatistics::Swap(DCProto_GMLevelStatistics* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(record_, other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMLevelStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMLevelStatistics_descriptor_;
  metadata.reflection = DCProto_GMLevelStatistics_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMOpenGuide_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMOpenGuide_ID_descriptor_;
}
bool DCProto_GMOpenGuide_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMOpenGuide_ID DCProto_GMOpenGuide::GROUPID;
const DCProto_GMOpenGuide_ID DCProto_GMOpenGuide::UNITID;
const DCProto_GMOpenGuide_ID DCProto_GMOpenGuide::ID_MIN;
const DCProto_GMOpenGuide_ID DCProto_GMOpenGuide::ID_MAX;
const int DCProto_GMOpenGuide::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMOpenGuide::kInfoFieldNumber;
#endif  // !_MSC_VER

DCProto_GMOpenGuide::DCProto_GMOpenGuide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMOpenGuide::InitAsDefaultInstance() {
  info_ = const_cast< ::NetProto_GMOpenGuide*>(&::NetProto_GMOpenGuide::default_instance());
}

DCProto_GMOpenGuide::DCProto_GMOpenGuide(const DCProto_GMOpenGuide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMOpenGuide::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMOpenGuide::~DCProto_GMOpenGuide() {
  SharedDtor();
}

void DCProto_GMOpenGuide::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DCProto_GMOpenGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMOpenGuide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMOpenGuide_descriptor_;
}

const DCProto_GMOpenGuide& DCProto_GMOpenGuide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMOpenGuide* DCProto_GMOpenGuide::default_instance_ = NULL;

DCProto_GMOpenGuide* DCProto_GMOpenGuide::New() const {
  return new DCProto_GMOpenGuide;
}

void DCProto_GMOpenGuide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::NetProto_GMOpenGuide::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMOpenGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GMOpenGuide info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMOpenGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GMOpenGuide info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMOpenGuide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GMOpenGuide info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMOpenGuide::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GMOpenGuide info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMOpenGuide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMOpenGuide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMOpenGuide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMOpenGuide::MergeFrom(const DCProto_GMOpenGuide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::NetProto_GMOpenGuide::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMOpenGuide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMOpenGuide::CopyFrom(const DCProto_GMOpenGuide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMOpenGuide::IsInitialized() const {
  
  return true;
}

void DCProto_GMOpenGuide::Swap(DCProto_GMOpenGuide* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMOpenGuide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMOpenGuide_descriptor_;
  metadata.reflection = DCProto_GMOpenGuide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DCProto_GMInfo::kKeyFieldNumber;
const int DCProto_GMInfo::kArg1FieldNumber;
const int DCProto_GMInfo::kArg2FieldNumber;
const int DCProto_GMInfo::kArg3FieldNumber;
const int DCProto_GMInfo::kStr1FieldNumber;
const int DCProto_GMInfo::kStr2FieldNumber;
const int DCProto_GMInfo::kStr3FieldNumber;
const int DCProto_GMInfo::kRoleIDFieldNumber;
#endif  // !_MSC_VER

DCProto_GMInfo::DCProto_GMInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMInfo::InitAsDefaultInstance() {
}

DCProto_GMInfo::DCProto_GMInfo(const DCProto_GMInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  arg1_ = 0;
  arg2_ = 0;
  arg3_ = 0;
  str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMInfo::~DCProto_GMInfo() {
  SharedDtor();
}

void DCProto_GMInfo::SharedDtor() {
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    delete str1_;
  }
  if (str2_ != &::google::protobuf::internal::kEmptyString) {
    delete str2_;
  }
  if (str3_ != &::google::protobuf::internal::kEmptyString) {
    delete str3_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_GMInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMInfo_descriptor_;
}

const DCProto_GMInfo& DCProto_GMInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMInfo* DCProto_GMInfo::default_instance_ = NULL;

DCProto_GMInfo* DCProto_GMInfo::New() const {
  return new DCProto_GMInfo;
}

void DCProto_GMInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    arg1_ = 0;
    arg2_ = 0;
    arg3_ = 0;
    if (has_str1()) {
      if (str1_ != &::google::protobuf::internal::kEmptyString) {
        str1_->clear();
      }
    }
    if (has_str2()) {
      if (str2_ != &::google::protobuf::internal::kEmptyString) {
        str2_->clear();
      }
    }
    if (has_str3()) {
      if (str3_ != &::google::protobuf::internal::kEmptyString) {
        str3_->clear();
      }
    }
    roleID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arg1;
        break;
      }
      
      // optional int32 arg1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg1_)));
          set_has_arg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arg2;
        break;
      }
      
      // optional int32 arg2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg2_)));
          set_has_arg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arg3;
        break;
      }
      
      // optional int32 arg3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg3_)));
          set_has_arg3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_str1;
        break;
      }
      
      // optional string str1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str1().data(), this->str1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_str2;
        break;
      }
      
      // optional string str2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str2().data(), this->str2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_str3;
        break;
      }
      
      // optional string str3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str3().data(), this->str3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // optional int32 arg1 = 2;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arg1(), output);
  }
  
  // optional int32 arg2 = 3;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arg2(), output);
  }
  
  // optional int32 arg3 = 4;
  if (has_arg3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->arg3(), output);
  }
  
  // optional string str1 = 5;
  if (has_str1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->str1(), output);
  }
  
  // optional string str2 = 6;
  if (has_str2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str2().data(), this->str2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->str2(), output);
  }
  
  // optional string str3 = 7;
  if (has_str3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str3().data(), this->str3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->str3(), output);
  }
  
  // optional int64 roleID = 8;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // optional int32 arg1 = 2;
  if (has_arg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arg1(), target);
  }
  
  // optional int32 arg2 = 3;
  if (has_arg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->arg2(), target);
  }
  
  // optional int32 arg3 = 4;
  if (has_arg3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->arg3(), target);
  }
  
  // optional string str1 = 5;
  if (has_str1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str1(), target);
  }
  
  // optional string str2 = 6;
  if (has_str2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str2().data(), this->str2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->str2(), target);
  }
  
  // optional string str3 = 7;
  if (has_str3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str3().data(), this->str3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->str3(), target);
  }
  
  // optional int64 roleID = 8;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // optional int32 arg1 = 2;
    if (has_arg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg1());
    }
    
    // optional int32 arg2 = 3;
    if (has_arg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg2());
    }
    
    // optional int32 arg3 = 4;
    if (has_arg3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg3());
    }
    
    // optional string str1 = 5;
    if (has_str1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str1());
    }
    
    // optional string str2 = 6;
    if (has_str2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str2());
    }
    
    // optional string str3 = 7;
    if (has_str3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str3());
    }
    
    // optional int64 roleID = 8;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMInfo::MergeFrom(const DCProto_GMInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_arg1()) {
      set_arg1(from.arg1());
    }
    if (from.has_arg2()) {
      set_arg2(from.arg2());
    }
    if (from.has_arg3()) {
      set_arg3(from.arg3());
    }
    if (from.has_str1()) {
      set_str1(from.str1());
    }
    if (from.has_str2()) {
      set_str2(from.str2());
    }
    if (from.has_str3()) {
      set_str3(from.str3());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMInfo::CopyFrom(const DCProto_GMInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMInfo::IsInitialized() const {
  
  return true;
}

void DCProto_GMInfo::Swap(DCProto_GMInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(arg1_, other->arg1_);
    std::swap(arg2_, other->arg2_);
    std::swap(arg3_, other->arg3_);
    std::swap(str1_, other->str1_);
    std::swap(str2_, other->str2_);
    std::swap(str3_, other->str3_);
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMInfo_descriptor_;
  metadata.reflection = DCProto_GMInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_LoadAllDataFromGMDataTable_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadAllDataFromGMDataTable_ID_descriptor_;
}
bool DCProto_LoadAllDataFromGMDataTable_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_LoadAllDataFromGMDataTable_ID DCProto_LoadAllDataFromGMDataTable::GROUPID;
const DCProto_LoadAllDataFromGMDataTable_ID DCProto_LoadAllDataFromGMDataTable::UNITID;
const DCProto_LoadAllDataFromGMDataTable_ID DCProto_LoadAllDataFromGMDataTable::ID_MIN;
const DCProto_LoadAllDataFromGMDataTable_ID DCProto_LoadAllDataFromGMDataTable::ID_MAX;
const int DCProto_LoadAllDataFromGMDataTable::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_LoadAllDataFromGMDataTable::kInfoFieldNumber;
#endif  // !_MSC_VER

DCProto_LoadAllDataFromGMDataTable::DCProto_LoadAllDataFromGMDataTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_LoadAllDataFromGMDataTable::InitAsDefaultInstance() {
}

DCProto_LoadAllDataFromGMDataTable::DCProto_LoadAllDataFromGMDataTable(const DCProto_LoadAllDataFromGMDataTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_LoadAllDataFromGMDataTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_LoadAllDataFromGMDataTable::~DCProto_LoadAllDataFromGMDataTable() {
  SharedDtor();
}

void DCProto_LoadAllDataFromGMDataTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_LoadAllDataFromGMDataTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_LoadAllDataFromGMDataTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadAllDataFromGMDataTable_descriptor_;
}

const DCProto_LoadAllDataFromGMDataTable& DCProto_LoadAllDataFromGMDataTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_LoadAllDataFromGMDataTable* DCProto_LoadAllDataFromGMDataTable::default_instance_ = NULL;

DCProto_LoadAllDataFromGMDataTable* DCProto_LoadAllDataFromGMDataTable::New() const {
  return new DCProto_LoadAllDataFromGMDataTable;
}

void DCProto_LoadAllDataFromGMDataTable::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_LoadAllDataFromGMDataTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DCProto_GMInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_LoadAllDataFromGMDataTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DCProto_GMInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_LoadAllDataFromGMDataTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DCProto_GMInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_LoadAllDataFromGMDataTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .DCProto_GMInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_LoadAllDataFromGMDataTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_LoadAllDataFromGMDataTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_LoadAllDataFromGMDataTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_LoadAllDataFromGMDataTable::MergeFrom(const DCProto_LoadAllDataFromGMDataTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_LoadAllDataFromGMDataTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_LoadAllDataFromGMDataTable::CopyFrom(const DCProto_LoadAllDataFromGMDataTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_LoadAllDataFromGMDataTable::IsInitialized() const {
  
  return true;
}

void DCProto_LoadAllDataFromGMDataTable::Swap(DCProto_LoadAllDataFromGMDataTable* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_LoadAllDataFromGMDataTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_LoadAllDataFromGMDataTable_descriptor_;
  metadata.reflection = DCProto_LoadAllDataFromGMDataTable_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SaveGMDataTable_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveGMDataTable_ID_descriptor_;
}
bool DCProto_SaveGMDataTable_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SaveGMDataTable_ID DCProto_SaveGMDataTable::GROUPID;
const DCProto_SaveGMDataTable_ID DCProto_SaveGMDataTable::UNITID;
const DCProto_SaveGMDataTable_ID DCProto_SaveGMDataTable::ID_MIN;
const DCProto_SaveGMDataTable_ID DCProto_SaveGMDataTable::ID_MAX;
const int DCProto_SaveGMDataTable::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SaveGMDataTable::kInfoFieldNumber;
const int DCProto_SaveGMDataTable::kOpFieldNumber;
#endif  // !_MSC_VER

DCProto_SaveGMDataTable::DCProto_SaveGMDataTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SaveGMDataTable::InitAsDefaultInstance() {
}

DCProto_SaveGMDataTable::DCProto_SaveGMDataTable(const DCProto_SaveGMDataTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SaveGMDataTable::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SaveGMDataTable::~DCProto_SaveGMDataTable() {
  SharedDtor();
}

void DCProto_SaveGMDataTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_SaveGMDataTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SaveGMDataTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SaveGMDataTable_descriptor_;
}

const DCProto_SaveGMDataTable& DCProto_SaveGMDataTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SaveGMDataTable* DCProto_SaveGMDataTable::default_instance_ = NULL;

DCProto_SaveGMDataTable* DCProto_SaveGMDataTable::New() const {
  return new DCProto_SaveGMDataTable;
}

void DCProto_SaveGMDataTable::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    op_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SaveGMDataTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DCProto_GMInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }
      
      // optional int32 op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SaveGMDataTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DCProto_GMInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  // optional int32 op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SaveGMDataTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DCProto_GMInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  // optional int32 op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SaveGMDataTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }
    
  }
  // repeated .DCProto_GMInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SaveGMDataTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SaveGMDataTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SaveGMDataTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SaveGMDataTable::MergeFrom(const DCProto_SaveGMDataTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SaveGMDataTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SaveGMDataTable::CopyFrom(const DCProto_SaveGMDataTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SaveGMDataTable::IsInitialized() const {
  
  return true;
}

void DCProto_SaveGMDataTable::Swap(DCProto_SaveGMDataTable* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SaveGMDataTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SaveGMDataTable_descriptor_;
  metadata.reflection = DCProto_SaveGMDataTable_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMAddExchange_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMAddExchange_ID_descriptor_;
}
bool DCProto_GMAddExchange_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMAddExchange_ID DCProto_GMAddExchange::GROUPID;
const DCProto_GMAddExchange_ID DCProto_GMAddExchange::UNITID;
const DCProto_GMAddExchange_ID DCProto_GMAddExchange::ID_MIN;
const DCProto_GMAddExchange_ID DCProto_GMAddExchange::ID_MAX;
const int DCProto_GMAddExchange::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMAddExchange::kInfoFieldNumber;
#endif  // !_MSC_VER

DCProto_GMAddExchange::DCProto_GMAddExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMAddExchange::InitAsDefaultInstance() {
  info_ = const_cast< ::NetProto_GMAddExchange*>(&::NetProto_GMAddExchange::default_instance());
}

DCProto_GMAddExchange::DCProto_GMAddExchange(const DCProto_GMAddExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMAddExchange::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMAddExchange::~DCProto_GMAddExchange() {
  SharedDtor();
}

void DCProto_GMAddExchange::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DCProto_GMAddExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMAddExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMAddExchange_descriptor_;
}

const DCProto_GMAddExchange& DCProto_GMAddExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMAddExchange* DCProto_GMAddExchange::default_instance_ = NULL;

DCProto_GMAddExchange* DCProto_GMAddExchange::New() const {
  return new DCProto_GMAddExchange;
}

void DCProto_GMAddExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::NetProto_GMAddExchange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMAddExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GMAddExchange info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMAddExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GMAddExchange info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMAddExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GMAddExchange info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMAddExchange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GMAddExchange info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMAddExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMAddExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMAddExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMAddExchange::MergeFrom(const DCProto_GMAddExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::NetProto_GMAddExchange::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMAddExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMAddExchange::CopyFrom(const DCProto_GMAddExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMAddExchange::IsInitialized() const {
  
  return true;
}

void DCProto_GMAddExchange::Swap(DCProto_GMAddExchange* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMAddExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMAddExchange_descriptor_;
  metadata.reflection = DCProto_GMAddExchange_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMRekooRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMRekooRole_ID_descriptor_;
}
bool DCProto_GMRekooRole_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMRekooRole_ID DCProto_GMRekooRole::GROUPID;
const DCProto_GMRekooRole_ID DCProto_GMRekooRole::UNITID;
const DCProto_GMRekooRole_ID DCProto_GMRekooRole::ID_MIN;
const DCProto_GMRekooRole_ID DCProto_GMRekooRole::ID_MAX;
const int DCProto_GMRekooRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMRekooRole::kInfoFieldNumber;
const int DCProto_GMRekooRole::kStrFieldNumber;
#endif  // !_MSC_VER

DCProto_GMRekooRole::DCProto_GMRekooRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMRekooRole::InitAsDefaultInstance() {
  info_ = const_cast< ::NetProto_GMAddRekooRole*>(&::NetProto_GMAddRekooRole::default_instance());
}

DCProto_GMRekooRole::DCProto_GMRekooRole(const DCProto_GMRekooRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMRekooRole::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMRekooRole::~DCProto_GMRekooRole() {
  SharedDtor();
}

void DCProto_GMRekooRole::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void DCProto_GMRekooRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMRekooRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMRekooRole_descriptor_;
}

const DCProto_GMRekooRole& DCProto_GMRekooRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMRekooRole* DCProto_GMRekooRole::default_instance_ = NULL;

DCProto_GMRekooRole* DCProto_GMRekooRole::New() const {
  return new DCProto_GMRekooRole;
}

void DCProto_GMRekooRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::NetProto_GMAddRekooRole::Clear();
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMRekooRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GMAddRekooRole info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }
      
      // optional string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMRekooRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GMAddRekooRole info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMRekooRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GMAddRekooRole info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMRekooRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GMAddRekooRole info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMRekooRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMRekooRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMRekooRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMRekooRole::MergeFrom(const DCProto_GMRekooRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::NetProto_GMAddRekooRole::MergeFrom(from.info());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMRekooRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMRekooRole::CopyFrom(const DCProto_GMRekooRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMRekooRole::IsInitialized() const {
  
  return true;
}

void DCProto_GMRekooRole::Swap(DCProto_GMRekooRole* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMRekooRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMRekooRole_descriptor_;
  metadata.reflection = DCProto_GMRekooRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_GMAddRekooRMB_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMAddRekooRMB_ID_descriptor_;
}
bool DCProto_GMAddRekooRMB_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_GMAddRekooRMB_ID DCProto_GMAddRekooRMB::GROUPID;
const DCProto_GMAddRekooRMB_ID DCProto_GMAddRekooRMB::UNITID;
const DCProto_GMAddRekooRMB_ID DCProto_GMAddRekooRMB::ID_MIN;
const DCProto_GMAddRekooRMB_ID DCProto_GMAddRekooRMB::ID_MAX;
const int DCProto_GMAddRekooRMB::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_GMAddRekooRMB::kRoleIDFieldNumber;
const int DCProto_GMAddRekooRMB::kRmbFieldNumber;
#endif  // !_MSC_VER

DCProto_GMAddRekooRMB::DCProto_GMAddRekooRMB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_GMAddRekooRMB::InitAsDefaultInstance() {
}

DCProto_GMAddRekooRMB::DCProto_GMAddRekooRMB(const DCProto_GMAddRekooRMB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_GMAddRekooRMB::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  rmb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_GMAddRekooRMB::~DCProto_GMAddRekooRMB() {
  SharedDtor();
}

void DCProto_GMAddRekooRMB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_GMAddRekooRMB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_GMAddRekooRMB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_GMAddRekooRMB_descriptor_;
}

const DCProto_GMAddRekooRMB& DCProto_GMAddRekooRMB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_GMAddRekooRMB* DCProto_GMAddRekooRMB::default_instance_ = NULL;

DCProto_GMAddRekooRMB* DCProto_GMAddRekooRMB::New() const {
  return new DCProto_GMAddRekooRMB;
}

void DCProto_GMAddRekooRMB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    rmb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_GMAddRekooRMB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_GMAddRekooRMB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional int32 rmb = 2;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rmb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_GMAddRekooRMB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional int32 rmb = 2;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rmb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_GMAddRekooRMB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 rmb = 2;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_GMAddRekooRMB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_GMAddRekooRMB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_GMAddRekooRMB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_GMAddRekooRMB::MergeFrom(const DCProto_GMAddRekooRMB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_GMAddRekooRMB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_GMAddRekooRMB::CopyFrom(const DCProto_GMAddRekooRMB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_GMAddRekooRMB::IsInitialized() const {
  
  return true;
}

void DCProto_GMAddRekooRMB::Swap(DCProto_GMAddRekooRMB* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(rmb_, other->rmb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_GMAddRekooRMB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_GMAddRekooRMB_descriptor_;
  metadata.reflection = DCProto_GMAddRekooRMB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_LoadRekooRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadRekooRole_ID_descriptor_;
}
bool DCProto_LoadRekooRole_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_LoadRekooRole_ID DCProto_LoadRekooRole::GROUPID;
const DCProto_LoadRekooRole_ID DCProto_LoadRekooRole::UNITID;
const DCProto_LoadRekooRole_ID DCProto_LoadRekooRole::ID_MIN;
const DCProto_LoadRekooRole_ID DCProto_LoadRekooRole::ID_MAX;
const int DCProto_LoadRekooRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_LoadRekooRole::kRoleIDFieldNumber;
#endif  // !_MSC_VER

DCProto_LoadRekooRole::DCProto_LoadRekooRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_LoadRekooRole::InitAsDefaultInstance() {
}

DCProto_LoadRekooRole::DCProto_LoadRekooRole(const DCProto_LoadRekooRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_LoadRekooRole::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_LoadRekooRole::~DCProto_LoadRekooRole() {
  SharedDtor();
}

void DCProto_LoadRekooRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_LoadRekooRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_LoadRekooRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadRekooRole_descriptor_;
}

const DCProto_LoadRekooRole& DCProto_LoadRekooRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_LoadRekooRole* DCProto_LoadRekooRole::default_instance_ = NULL;

DCProto_LoadRekooRole* DCProto_LoadRekooRole::New() const {
  return new DCProto_LoadRekooRole;
}

void DCProto_LoadRekooRole::Clear() {
  roleID_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_LoadRekooRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_roleID())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_roleID())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roleID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_LoadRekooRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 roleID = 1;
  for (int i = 0; i < this->roleID_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->roleID(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_LoadRekooRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 roleID = 1;
  for (int i = 0; i < this->roleID_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->roleID(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_LoadRekooRole::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 roleID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleID_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->roleID(i));
    }
    total_size += 1 * this->roleID_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_LoadRekooRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_LoadRekooRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_LoadRekooRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_LoadRekooRole::MergeFrom(const DCProto_LoadRekooRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleID_.MergeFrom(from.roleID_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_LoadRekooRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_LoadRekooRole::CopyFrom(const DCProto_LoadRekooRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_LoadRekooRole::IsInitialized() const {
  
  return true;
}

void DCProto_LoadRekooRole::Swap(DCProto_LoadRekooRole* other) {
  if (other != this) {
    roleID_.Swap(&other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_LoadRekooRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_LoadRekooRole_descriptor_;
  metadata.reflection = DCProto_LoadRekooRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_AddCodeCount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_AddCodeCount_ID_descriptor_;
}
bool DCProto_AddCodeCount_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_AddCodeCount_ID DCProto_AddCodeCount::GROUPID;
const DCProto_AddCodeCount_ID DCProto_AddCodeCount::UNITID;
const DCProto_AddCodeCount_ID DCProto_AddCodeCount::ID_MIN;
const DCProto_AddCodeCount_ID DCProto_AddCodeCount::ID_MAX;
const int DCProto_AddCodeCount::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_AddCodeCount::kRoleIDFieldNumber;
#endif  // !_MSC_VER

DCProto_AddCodeCount::DCProto_AddCodeCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_AddCodeCount::InitAsDefaultInstance() {
}

DCProto_AddCodeCount::DCProto_AddCodeCount(const DCProto_AddCodeCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_AddCodeCount::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_AddCodeCount::~DCProto_AddCodeCount() {
  SharedDtor();
}

void DCProto_AddCodeCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_AddCodeCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_AddCodeCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_AddCodeCount_descriptor_;
}

const DCProto_AddCodeCount& DCProto_AddCodeCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_AddCodeCount* DCProto_AddCodeCount::default_instance_ = NULL;

DCProto_AddCodeCount* DCProto_AddCodeCount::New() const {
  return new DCProto_AddCodeCount;
}

void DCProto_AddCodeCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_AddCodeCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_AddCodeCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_AddCodeCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_AddCodeCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_AddCodeCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_AddCodeCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_AddCodeCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_AddCodeCount::MergeFrom(const DCProto_AddCodeCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_AddCodeCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_AddCodeCount::CopyFrom(const DCProto_AddCodeCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_AddCodeCount::IsInitialized() const {
  
  return true;
}

void DCProto_AddCodeCount::Swap(DCProto_AddCodeCount* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_AddCodeCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_AddCodeCount_descriptor_;
  metadata.reflection = DCProto_AddCodeCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteCode::kRoleIDFieldNumber;
const int InviteCode::kSelfCodeFieldNumber;
const int InviteCode::kOtherCodeFieldNumber;
#endif  // !_MSC_VER

InviteCode::InviteCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteCode::InitAsDefaultInstance() {
}

InviteCode::InviteCode(const InviteCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteCode::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  selfCode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otherCode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteCode::~InviteCode() {
  SharedDtor();
}

void InviteCode::SharedDtor() {
  if (selfCode_ != &::google::protobuf::internal::kEmptyString) {
    delete selfCode_;
  }
  if (otherCode_ != &::google::protobuf::internal::kEmptyString) {
    delete otherCode_;
  }
  if (this != default_instance_) {
  }
}

void InviteCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteCode_descriptor_;
}

const InviteCode& InviteCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

InviteCode* InviteCode::default_instance_ = NULL;

InviteCode* InviteCode::New() const {
  return new InviteCode;
}

void InviteCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_selfCode()) {
      if (selfCode_ != &::google::protobuf::internal::kEmptyString) {
        selfCode_->clear();
      }
    }
    if (has_otherCode()) {
      if (otherCode_ != &::google::protobuf::internal::kEmptyString) {
        otherCode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfCode;
        break;
      }
      
      // optional string selfCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfCode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfCode().data(), this->selfCode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_otherCode;
        break;
      }
      
      // optional string otherCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otherCode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otherCode().data(), this->otherCode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional string selfCode = 2;
  if (has_selfCode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfCode().data(), this->selfCode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->selfCode(), output);
  }
  
  // optional string otherCode = 3;
  if (has_otherCode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otherCode().data(), this->otherCode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->otherCode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional string selfCode = 2;
  if (has_selfCode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfCode().data(), this->selfCode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->selfCode(), target);
  }
  
  // optional string otherCode = 3;
  if (has_otherCode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otherCode().data(), this->otherCode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->otherCode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional string selfCode = 2;
    if (has_selfCode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfCode());
    }
    
    // optional string otherCode = 3;
    if (has_otherCode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otherCode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteCode::MergeFrom(const InviteCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_selfCode()) {
      set_selfCode(from.selfCode());
    }
    if (from.has_otherCode()) {
      set_otherCode(from.otherCode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteCode::CopyFrom(const InviteCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteCode::IsInitialized() const {
  
  return true;
}

void InviteCode::Swap(InviteCode* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(selfCode_, other->selfCode_);
    std::swap(otherCode_, other->otherCode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteCode_descriptor_;
  metadata.reflection = InviteCode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_LoadInviteCode_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadInviteCode_ID_descriptor_;
}
bool DCProto_LoadInviteCode_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_LoadInviteCode_ID DCProto_LoadInviteCode::GROUPID;
const DCProto_LoadInviteCode_ID DCProto_LoadInviteCode::UNITID;
const DCProto_LoadInviteCode_ID DCProto_LoadInviteCode::ID_MIN;
const DCProto_LoadInviteCode_ID DCProto_LoadInviteCode::ID_MAX;
const int DCProto_LoadInviteCode::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_LoadInviteCode::kInfoFieldNumber;
#endif  // !_MSC_VER

DCProto_LoadInviteCode::DCProto_LoadInviteCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_LoadInviteCode::InitAsDefaultInstance() {
}

DCProto_LoadInviteCode::DCProto_LoadInviteCode(const DCProto_LoadInviteCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_LoadInviteCode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_LoadInviteCode::~DCProto_LoadInviteCode() {
  SharedDtor();
}

void DCProto_LoadInviteCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_LoadInviteCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_LoadInviteCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_LoadInviteCode_descriptor_;
}

const DCProto_LoadInviteCode& DCProto_LoadInviteCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_LoadInviteCode* DCProto_LoadInviteCode::default_instance_ = NULL;

DCProto_LoadInviteCode* DCProto_LoadInviteCode::New() const {
  return new DCProto_LoadInviteCode;
}

void DCProto_LoadInviteCode::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_LoadInviteCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .InviteCode info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_LoadInviteCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .InviteCode info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_LoadInviteCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .InviteCode info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_LoadInviteCode::ByteSize() const {
  int total_size = 0;
  
  // repeated .InviteCode info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_LoadInviteCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_LoadInviteCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_LoadInviteCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_LoadInviteCode::MergeFrom(const DCProto_LoadInviteCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_LoadInviteCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_LoadInviteCode::CopyFrom(const DCProto_LoadInviteCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_LoadInviteCode::IsInitialized() const {
  
  return true;
}

void DCProto_LoadInviteCode::Swap(DCProto_LoadInviteCode* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_LoadInviteCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_LoadInviteCode_descriptor_;
  metadata.reflection = DCProto_LoadInviteCode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_QueryGMAccount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryGMAccount_ID_descriptor_;
}
bool DCProto_QueryGMAccount_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_QueryGMAccount_ID DCProto_QueryGMAccount::GROUPID;
const DCProto_QueryGMAccount_ID DCProto_QueryGMAccount::UNITID;
const DCProto_QueryGMAccount_ID DCProto_QueryGMAccount::ID_MIN;
const DCProto_QueryGMAccount_ID DCProto_QueryGMAccount::ID_MAX;
const int DCProto_QueryGMAccount::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_QueryGMAccount::kIdFieldNumber;
const int DCProto_QueryGMAccount::kGmFieldNumber;
#endif  // !_MSC_VER

DCProto_QueryGMAccount::DCProto_QueryGMAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_QueryGMAccount::InitAsDefaultInstance() {
  gm_ = const_cast< ::NetProto_GMLogin*>(&::NetProto_GMLogin::default_instance());
}

DCProto_QueryGMAccount::DCProto_QueryGMAccount(const DCProto_QueryGMAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_QueryGMAccount::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  gm_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_QueryGMAccount::~DCProto_QueryGMAccount() {
  SharedDtor();
}

void DCProto_QueryGMAccount::SharedDtor() {
  if (this != default_instance_) {
    delete gm_;
  }
}

void DCProto_QueryGMAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_QueryGMAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_QueryGMAccount_descriptor_;
}

const DCProto_QueryGMAccount& DCProto_QueryGMAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_QueryGMAccount* DCProto_QueryGMAccount::default_instance_ = NULL;

DCProto_QueryGMAccount* DCProto_QueryGMAccount::New() const {
  return new DCProto_QueryGMAccount;
}

void DCProto_QueryGMAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_gm()) {
      if (gm_ != NULL) gm_->::NetProto_GMLogin::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_QueryGMAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gm;
        break;
      }
      
      // optional .NetProto_GMLogin gm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_QueryGMAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .NetProto_GMLogin gm = 2;
  if (has_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_QueryGMAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .NetProto_GMLogin gm = 2;
  if (has_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_QueryGMAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_GMLogin gm = 2;
    if (has_gm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_QueryGMAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_QueryGMAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_QueryGMAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_QueryGMAccount::MergeFrom(const DCProto_QueryGMAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gm()) {
      mutable_gm()->::NetProto_GMLogin::MergeFrom(from.gm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_QueryGMAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_QueryGMAccount::CopyFrom(const DCProto_QueryGMAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_QueryGMAccount::IsInitialized() const {
  
  return true;
}

void DCProto_QueryGMAccount::Swap(DCProto_QueryGMAccount* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gm_, other->gm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_QueryGMAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_QueryGMAccount_descriptor_;
  metadata.reflection = DCProto_QueryGMAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_RegistDeviceServer_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_RegistDeviceServer_ID_descriptor_;
}
bool DCProto_RegistDeviceServer_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_RegistDeviceServer_ID DCProto_RegistDeviceServer::GROUPID;
const DCProto_RegistDeviceServer_ID DCProto_RegistDeviceServer::UNITID;
const DCProto_RegistDeviceServer_ID DCProto_RegistDeviceServer::ID_MIN;
const DCProto_RegistDeviceServer_ID DCProto_RegistDeviceServer::ID_MAX;
const int DCProto_RegistDeviceServer::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_RegistDeviceServer::kDeviceNumFieldNumber;
const int DCProto_RegistDeviceServer::kIdFieldNumber;
const int DCProto_RegistDeviceServer::kIdfaFieldNumber;
const int DCProto_RegistDeviceServer::kNoLineFieldNumber;
const int DCProto_RegistDeviceServer::kTimeFieldNumber;
#endif  // !_MSC_VER

DCProto_RegistDeviceServer::DCProto_RegistDeviceServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_RegistDeviceServer::InitAsDefaultInstance() {
}

DCProto_RegistDeviceServer::DCProto_RegistDeviceServer(const DCProto_RegistDeviceServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_RegistDeviceServer::SharedCtor() {
  _cached_size_ = 0;
  deviceNum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  noLine_ = false;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_RegistDeviceServer::~DCProto_RegistDeviceServer() {
  SharedDtor();
}

void DCProto_RegistDeviceServer::SharedDtor() {
  if (deviceNum_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceNum_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_RegistDeviceServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_RegistDeviceServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_RegistDeviceServer_descriptor_;
}

const DCProto_RegistDeviceServer& DCProto_RegistDeviceServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_RegistDeviceServer* DCProto_RegistDeviceServer::default_instance_ = NULL;

DCProto_RegistDeviceServer* DCProto_RegistDeviceServer::New() const {
  return new DCProto_RegistDeviceServer;
}

void DCProto_RegistDeviceServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deviceNum()) {
      if (deviceNum_ != &::google::protobuf::internal::kEmptyString) {
        deviceNum_->clear();
      }
    }
    id_ = 0;
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
    noLine_ = false;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_RegistDeviceServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceNum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceNum().data(), this->deviceNum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_idfa;
        break;
      }
      
      // optional string idfa = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_noLine;
        break;
      }
      
      // optional bool noLine = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noLine_)));
          set_has_noLine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_RegistDeviceServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string deviceNum = 1;
  if (has_deviceNum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceNum().data(), this->deviceNum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->deviceNum(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional string idfa = 3;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->idfa(), output);
  }
  
  // optional bool noLine = 4;
  if (has_noLine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->noLine(), output);
  }
  
  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_RegistDeviceServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string deviceNum = 1;
  if (has_deviceNum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceNum().data(), this->deviceNum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceNum(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional string idfa = 3;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->idfa(), target);
  }
  
  // optional bool noLine = 4;
  if (has_noLine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->noLine(), target);
  }
  
  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_RegistDeviceServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceNum = 1;
    if (has_deviceNum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceNum());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string idfa = 3;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }
    
    // optional bool noLine = 4;
    if (has_noLine()) {
      total_size += 1 + 1;
    }
    
    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_RegistDeviceServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_RegistDeviceServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_RegistDeviceServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_RegistDeviceServer::MergeFrom(const DCProto_RegistDeviceServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceNum()) {
      set_deviceNum(from.deviceNum());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_noLine()) {
      set_noLine(from.noLine());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_RegistDeviceServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_RegistDeviceServer::CopyFrom(const DCProto_RegistDeviceServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_RegistDeviceServer::IsInitialized() const {
  
  return true;
}

void DCProto_RegistDeviceServer::Swap(DCProto_RegistDeviceServer* other) {
  if (other != this) {
    std::swap(deviceNum_, other->deviceNum_);
    std::swap(id_, other->id_);
    std::swap(idfa_, other->idfa_);
    std::swap(noLine_, other->noLine_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_RegistDeviceServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_RegistDeviceServer_descriptor_;
  metadata.reflection = DCProto_RegistDeviceServer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_FactionData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionData_ID_descriptor_;
}
bool DCProto_FactionData_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_FactionData_ID DCProto_FactionData::GROUPID;
const DCProto_FactionData_ID DCProto_FactionData::UNITID;
const DCProto_FactionData_ID DCProto_FactionData::ID_MIN;
const DCProto_FactionData_ID DCProto_FactionData::ID_MAX;
const int DCProto_FactionData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_FactionData::kFactionNameFieldNumber;
const int DCProto_FactionData::kNameFieldNumber;
const int DCProto_FactionData::kNumFieldNumber;
const int DCProto_FactionData::kExpFieldNumber;
const int DCProto_FactionData::kExpTimeFieldNumber;
const int DCProto_FactionData::kItemFieldNumber;
const int DCProto_FactionData::kNoticeFieldNumber;
const int DCProto_FactionData::kTeamFieldNumber;
const int DCProto_FactionData::kGuardianFieldNumber;
#endif  // !_MSC_VER

DCProto_FactionData::DCProto_FactionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_FactionData::InitAsDefaultInstance() {
}

DCProto_FactionData::DCProto_FactionData(const DCProto_FactionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_FactionData::SharedCtor() {
  _cached_size_ = 0;
  factionName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  exp_time_ = 0;
  item_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guardian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_FactionData::~DCProto_FactionData() {
  SharedDtor();
}

void DCProto_FactionData::SharedDtor() {
  if (factionName_ != &::google::protobuf::internal::kEmptyString) {
    delete factionName_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (team_ != &::google::protobuf::internal::kEmptyString) {
    delete team_;
  }
  if (guardian_ != &::google::protobuf::internal::kEmptyString) {
    delete guardian_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_FactionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_FactionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionData_descriptor_;
}

const DCProto_FactionData& DCProto_FactionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_FactionData* DCProto_FactionData::default_instance_ = NULL;

DCProto_FactionData* DCProto_FactionData::New() const {
  return new DCProto_FactionData;
}

void DCProto_FactionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_factionName()) {
      if (factionName_ != &::google::protobuf::internal::kEmptyString) {
        factionName_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    num_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    exp_time_ = 0;
    item_ = 0;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    if (has_team()) {
      if (team_ != &::google::protobuf::internal::kEmptyString) {
        team_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guardian()) {
      if (guardian_ != &::google::protobuf::internal::kEmptyString) {
        guardian_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_FactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string factionName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_factionName()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->factionName().data(), this->factionName().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }
      
      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional int64 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp_time;
        break;
      }
      
      // optional int32 exp_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_time_)));
          set_has_exp_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item;
        break;
      }
      
      // optional int32 item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notice;
        break;
      }
      
      // optional string notice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_team;
        break;
      }
      
      // optional string team = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team().data(), this->team().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_guardian;
        break;
      }
      
      // optional string guardian = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guardian:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guardian()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guardian().data(), this->guardian().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_FactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string factionName = 1;
  if (has_factionName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionName().data(), this->factionName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->factionName(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }
  
  // optional int64 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->exp(), output);
  }
  
  // optional int32 exp_time = 5;
  if (has_exp_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp_time(), output);
  }
  
  // optional int32 item = 6;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item(), output);
  }
  
  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->notice(), output);
  }
  
  // optional string team = 8;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->team(), output);
  }
  
  // optional string guardian = 9;
  if (has_guardian()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guardian().data(), this->guardian().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->guardian(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_FactionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string factionName = 1;
  if (has_factionName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionName().data(), this->factionName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->factionName(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }
  
  // optional int64 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->exp(), target);
  }
  
  // optional int32 exp_time = 5;
  if (has_exp_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp_time(), target);
  }
  
  // optional int32 item = 6;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item(), target);
  }
  
  // optional string notice = 7;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->notice(), target);
  }
  
  // optional string team = 8;
  if (has_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->team(), target);
  }
  
  // optional string guardian = 9;
  if (has_guardian()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guardian().data(), this->guardian().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guardian(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_FactionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string factionName = 1;
    if (has_factionName()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->factionName());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int64 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
    // optional int32 exp_time = 5;
    if (has_exp_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_time());
    }
    
    // optional int32 item = 6;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }
    
    // optional string notice = 7;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }
    
    // optional string team = 8;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string guardian = 9;
    if (has_guardian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guardian());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_FactionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_FactionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_FactionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_FactionData::MergeFrom(const DCProto_FactionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionName()) {
      set_factionName(from.factionName());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_exp_time()) {
      set_exp_time(from.exp_time());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guardian()) {
      set_guardian(from.guardian());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_FactionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_FactionData::CopyFrom(const DCProto_FactionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_FactionData::IsInitialized() const {
  
  return true;
}

void DCProto_FactionData::Swap(DCProto_FactionData* other) {
  if (other != this) {
    std::swap(factionName_, other->factionName_);
    std::swap(name_, other->name_);
    std::swap(num_, other->num_);
    std::swap(exp_, other->exp_);
    std::swap(exp_time_, other->exp_time_);
    std::swap(item_, other->item_);
    std::swap(notice_, other->notice_);
    std::swap(team_, other->team_);
    std::swap(guardian_, other->guardian_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_FactionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_FactionData_descriptor_;
  metadata.reflection = DCProto_FactionData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_FactionLoadData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionLoadData_ID_descriptor_;
}
bool DCProto_FactionLoadData_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_FactionLoadData_ID DCProto_FactionLoadData::GROUPID;
const DCProto_FactionLoadData_ID DCProto_FactionLoadData::UNITID;
const DCProto_FactionLoadData_ID DCProto_FactionLoadData::ID_MIN;
const DCProto_FactionLoadData_ID DCProto_FactionLoadData::ID_MAX;
const int DCProto_FactionLoadData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_FactionLoadData::kDataFieldNumber;
#endif  // !_MSC_VER

DCProto_FactionLoadData::DCProto_FactionLoadData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_FactionLoadData::InitAsDefaultInstance() {
}

DCProto_FactionLoadData::DCProto_FactionLoadData(const DCProto_FactionLoadData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_FactionLoadData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_FactionLoadData::~DCProto_FactionLoadData() {
  SharedDtor();
}

void DCProto_FactionLoadData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_FactionLoadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_FactionLoadData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionLoadData_descriptor_;
}

const DCProto_FactionLoadData& DCProto_FactionLoadData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_FactionLoadData* DCProto_FactionLoadData::default_instance_ = NULL;

DCProto_FactionLoadData* DCProto_FactionLoadData::New() const {
  return new DCProto_FactionLoadData;
}

void DCProto_FactionLoadData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_FactionLoadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DCProto_FactionData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_FactionLoadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DCProto_FactionData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_FactionLoadData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DCProto_FactionData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_FactionLoadData::ByteSize() const {
  int total_size = 0;
  
  // repeated .DCProto_FactionData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_FactionLoadData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_FactionLoadData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_FactionLoadData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_FactionLoadData::MergeFrom(const DCProto_FactionLoadData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_FactionLoadData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_FactionLoadData::CopyFrom(const DCProto_FactionLoadData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_FactionLoadData::IsInitialized() const {
  
  return true;
}

void DCProto_FactionLoadData::Swap(DCProto_FactionLoadData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_FactionLoadData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_FactionLoadData_descriptor_;
  metadata.reflection = DCProto_FactionLoadData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_FactionSaveData_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionSaveData_ID_descriptor_;
}
bool DCProto_FactionSaveData_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_FactionSaveData_ID DCProto_FactionSaveData::GROUPID;
const DCProto_FactionSaveData_ID DCProto_FactionSaveData::UNITID;
const DCProto_FactionSaveData_ID DCProto_FactionSaveData::ID_MIN;
const DCProto_FactionSaveData_ID DCProto_FactionSaveData::ID_MAX;
const int DCProto_FactionSaveData::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_FactionSaveData::kDataFieldNumber;
#endif  // !_MSC_VER

DCProto_FactionSaveData::DCProto_FactionSaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_FactionSaveData::InitAsDefaultInstance() {
}

DCProto_FactionSaveData::DCProto_FactionSaveData(const DCProto_FactionSaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_FactionSaveData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_FactionSaveData::~DCProto_FactionSaveData() {
  SharedDtor();
}

void DCProto_FactionSaveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_FactionSaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_FactionSaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionSaveData_descriptor_;
}

const DCProto_FactionSaveData& DCProto_FactionSaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_FactionSaveData* DCProto_FactionSaveData::default_instance_ = NULL;

DCProto_FactionSaveData* DCProto_FactionSaveData::New() const {
  return new DCProto_FactionSaveData;
}

void DCProto_FactionSaveData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_FactionSaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DCProto_FactionData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_FactionSaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DCProto_FactionData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_FactionSaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DCProto_FactionData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_FactionSaveData::ByteSize() const {
  int total_size = 0;
  
  // repeated .DCProto_FactionData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_FactionSaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_FactionSaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_FactionSaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_FactionSaveData::MergeFrom(const DCProto_FactionSaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_FactionSaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_FactionSaveData::CopyFrom(const DCProto_FactionSaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_FactionSaveData::IsInitialized() const {
  
  return true;
}

void DCProto_FactionSaveData::Swap(DCProto_FactionSaveData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_FactionSaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_FactionSaveData_descriptor_;
  metadata.reflection = DCProto_FactionSaveData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_FactionAddRecord_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionAddRecord_ID_descriptor_;
}
bool DCProto_FactionAddRecord_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_FactionAddRecord_ID DCProto_FactionAddRecord::GROUPID;
const DCProto_FactionAddRecord_ID DCProto_FactionAddRecord::UNITID;
const DCProto_FactionAddRecord_ID DCProto_FactionAddRecord::ID_MIN;
const DCProto_FactionAddRecord_ID DCProto_FactionAddRecord::ID_MAX;
const int DCProto_FactionAddRecord::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_FactionAddRecord::kDataFieldNumber;
#endif  // !_MSC_VER

DCProto_FactionAddRecord::DCProto_FactionAddRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_FactionAddRecord::InitAsDefaultInstance() {
  data_ = const_cast< ::DCProto_FactionData*>(&::DCProto_FactionData::default_instance());
}

DCProto_FactionAddRecord::DCProto_FactionAddRecord(const DCProto_FactionAddRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_FactionAddRecord::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_FactionAddRecord::~DCProto_FactionAddRecord() {
  SharedDtor();
}

void DCProto_FactionAddRecord::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DCProto_FactionAddRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_FactionAddRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionAddRecord_descriptor_;
}

const DCProto_FactionAddRecord& DCProto_FactionAddRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_FactionAddRecord* DCProto_FactionAddRecord::default_instance_ = NULL;

DCProto_FactionAddRecord* DCProto_FactionAddRecord::New() const {
  return new DCProto_FactionAddRecord;
}

void DCProto_FactionAddRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::DCProto_FactionData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_FactionAddRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DCProto_FactionData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_FactionAddRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DCProto_FactionData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_FactionAddRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DCProto_FactionData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_FactionAddRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DCProto_FactionData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_FactionAddRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_FactionAddRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_FactionAddRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_FactionAddRecord::MergeFrom(const DCProto_FactionAddRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::DCProto_FactionData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_FactionAddRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_FactionAddRecord::CopyFrom(const DCProto_FactionAddRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_FactionAddRecord::IsInitialized() const {
  
  return true;
}

void DCProto_FactionAddRecord::Swap(DCProto_FactionAddRecord* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_FactionAddRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_FactionAddRecord_descriptor_;
  metadata.reflection = DCProto_FactionAddRecord_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_FactionDelRecord_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionDelRecord_ID_descriptor_;
}
bool DCProto_FactionDelRecord_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_FactionDelRecord_ID DCProto_FactionDelRecord::GROUPID;
const DCProto_FactionDelRecord_ID DCProto_FactionDelRecord::UNITID;
const DCProto_FactionDelRecord_ID DCProto_FactionDelRecord::ID_MIN;
const DCProto_FactionDelRecord_ID DCProto_FactionDelRecord::ID_MAX;
const int DCProto_FactionDelRecord::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_FactionDelRecord::kDataFieldNumber;
#endif  // !_MSC_VER

DCProto_FactionDelRecord::DCProto_FactionDelRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_FactionDelRecord::InitAsDefaultInstance() {
  data_ = const_cast< ::DCProto_FactionData*>(&::DCProto_FactionData::default_instance());
}

DCProto_FactionDelRecord::DCProto_FactionDelRecord(const DCProto_FactionDelRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_FactionDelRecord::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_FactionDelRecord::~DCProto_FactionDelRecord() {
  SharedDtor();
}

void DCProto_FactionDelRecord::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DCProto_FactionDelRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_FactionDelRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionDelRecord_descriptor_;
}

const DCProto_FactionDelRecord& DCProto_FactionDelRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_FactionDelRecord* DCProto_FactionDelRecord::default_instance_ = NULL;

DCProto_FactionDelRecord* DCProto_FactionDelRecord::New() const {
  return new DCProto_FactionDelRecord;
}

void DCProto_FactionDelRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::DCProto_FactionData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_FactionDelRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DCProto_FactionData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_FactionDelRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DCProto_FactionData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_FactionDelRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DCProto_FactionData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_FactionDelRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DCProto_FactionData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_FactionDelRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_FactionDelRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_FactionDelRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_FactionDelRecord::MergeFrom(const DCProto_FactionDelRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::DCProto_FactionData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_FactionDelRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_FactionDelRecord::CopyFrom(const DCProto_FactionDelRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_FactionDelRecord::IsInitialized() const {
  
  return true;
}

void DCProto_FactionDelRecord::Swap(DCProto_FactionDelRecord* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_FactionDelRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_FactionDelRecord_descriptor_;
  metadata.reflection = DCProto_FactionDelRecord_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_FactionUpdateRecord_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionUpdateRecord_ID_descriptor_;
}
bool DCProto_FactionUpdateRecord_ID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_FactionUpdateRecord_ID DCProto_FactionUpdateRecord::GROUPID;
const DCProto_FactionUpdateRecord_ID DCProto_FactionUpdateRecord::UNITID;
const DCProto_FactionUpdateRecord_ID DCProto_FactionUpdateRecord::ID_MIN;
const DCProto_FactionUpdateRecord_ID DCProto_FactionUpdateRecord::ID_MAX;
const int DCProto_FactionUpdateRecord::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_FactionUpdateRecord::kDataFieldNumber;
#endif  // !_MSC_VER

DCProto_FactionUpdateRecord::DCProto_FactionUpdateRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_FactionUpdateRecord::InitAsDefaultInstance() {
  data_ = const_cast< ::DCProto_FactionData*>(&::DCProto_FactionData::default_instance());
}

DCProto_FactionUpdateRecord::DCProto_FactionUpdateRecord(const DCProto_FactionUpdateRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_FactionUpdateRecord::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_FactionUpdateRecord::~DCProto_FactionUpdateRecord() {
  SharedDtor();
}

void DCProto_FactionUpdateRecord::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DCProto_FactionUpdateRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_FactionUpdateRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionUpdateRecord_descriptor_;
}

const DCProto_FactionUpdateRecord& DCProto_FactionUpdateRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_FactionUpdateRecord* DCProto_FactionUpdateRecord::default_instance_ = NULL;

DCProto_FactionUpdateRecord* DCProto_FactionUpdateRecord::New() const {
  return new DCProto_FactionUpdateRecord;
}

void DCProto_FactionUpdateRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::DCProto_FactionData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_FactionUpdateRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DCProto_FactionData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_FactionUpdateRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DCProto_FactionData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_FactionUpdateRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DCProto_FactionData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_FactionUpdateRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DCProto_FactionData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_FactionUpdateRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_FactionUpdateRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_FactionUpdateRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_FactionUpdateRecord::MergeFrom(const DCProto_FactionUpdateRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::DCProto_FactionData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_FactionUpdateRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_FactionUpdateRecord::CopyFrom(const DCProto_FactionUpdateRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_FactionUpdateRecord::IsInitialized() const {
  
  return true;
}

void DCProto_FactionUpdateRecord::Swap(DCProto_FactionUpdateRecord* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_FactionUpdateRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_FactionUpdateRecord_descriptor_;
  metadata.reflection = DCProto_FactionUpdateRecord_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_SysFactionMemInfo_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SysFactionMemInfo_ID_descriptor_;
}
bool DCProto_SysFactionMemInfo_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_SysFactionMemInfo_ID DCProto_SysFactionMemInfo::GROUPID;
const DCProto_SysFactionMemInfo_ID DCProto_SysFactionMemInfo::UNITID;
const DCProto_SysFactionMemInfo_ID DCProto_SysFactionMemInfo::ID_MIN;
const DCProto_SysFactionMemInfo_ID DCProto_SysFactionMemInfo::ID_MAX;
const int DCProto_SysFactionMemInfo::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_SysFactionMemInfo::kRoleIDFieldNumber;
const int DCProto_SysFactionMemInfo::kStrFieldNumber;
#endif  // !_MSC_VER

DCProto_SysFactionMemInfo::DCProto_SysFactionMemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_SysFactionMemInfo::InitAsDefaultInstance() {
}

DCProto_SysFactionMemInfo::DCProto_SysFactionMemInfo(const DCProto_SysFactionMemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_SysFactionMemInfo::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_SysFactionMemInfo::~DCProto_SysFactionMemInfo() {
  SharedDtor();
}

void DCProto_SysFactionMemInfo::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void DCProto_SysFactionMemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_SysFactionMemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_SysFactionMemInfo_descriptor_;
}

const DCProto_SysFactionMemInfo& DCProto_SysFactionMemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_SysFactionMemInfo* DCProto_SysFactionMemInfo::default_instance_ = NULL;

DCProto_SysFactionMemInfo* DCProto_SysFactionMemInfo::New() const {
  return new DCProto_SysFactionMemInfo;
}

void DCProto_SysFactionMemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_SysFactionMemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }
      
      // optional string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_SysFactionMemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_SysFactionMemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_SysFactionMemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_SysFactionMemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_SysFactionMemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_SysFactionMemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_SysFactionMemInfo::MergeFrom(const DCProto_SysFactionMemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_SysFactionMemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_SysFactionMemInfo::CopyFrom(const DCProto_SysFactionMemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_SysFactionMemInfo::IsInitialized() const {
  
  return true;
}

void DCProto_SysFactionMemInfo::Swap(DCProto_SysFactionMemInfo* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_SysFactionMemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_SysFactionMemInfo_descriptor_;
  metadata.reflection = DCProto_SysFactionMemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_InitRank_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_InitRank_ID_descriptor_;
}
bool DCProto_InitRank_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_InitRank_ID DCProto_InitRank::GROUPID;
const DCProto_InitRank_ID DCProto_InitRank::UNITID;
const DCProto_InitRank_ID DCProto_InitRank::ID_MIN;
const DCProto_InitRank_ID DCProto_InitRank::ID_MAX;
const int DCProto_InitRank::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_InitRank::kTypeFieldNumber;
const int DCProto_InitRank::kRankFieldNumber;
const int DCProto_InitRank::kFinalKillerFieldNumber;
const int DCProto_InitRank::kFlagFieldNumber;
#endif  // !_MSC_VER

DCProto_InitRank::DCProto_InitRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_InitRank::InitAsDefaultInstance() {
  finalKiller_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
}

DCProto_InitRank::DCProto_InitRank(const DCProto_InitRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_InitRank::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  finalKiller_ = NULL;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_InitRank::~DCProto_InitRank() {
  SharedDtor();
}

void DCProto_InitRank::SharedDtor() {
  if (this != default_instance_) {
    delete finalKiller_;
  }
}

void DCProto_InitRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_InitRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_InitRank_descriptor_;
}

const DCProto_InitRank& DCProto_InitRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_InitRank* DCProto_InitRank::default_instance_ = NULL;

DCProto_InitRank* DCProto_InitRank::New() const {
  return new DCProto_InitRank;
}

void DCProto_InitRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_finalKiller()) {
      if (finalKiller_ != NULL) finalKiller_->::RecordInfo::Clear();
    }
    flag_ = false;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_InitRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Rank.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Rank_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Rank_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }
      
      // repeated .RecordInfo rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        if (input->ExpectTag(26)) goto parse_finalKiller;
        break;
      }
      
      // optional .RecordInfo finalKiller = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finalKiller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finalKiller()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_InitRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // repeated .RecordInfo rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(i), output);
  }
  
  // optional .RecordInfo finalKiller = 3;
  if (has_finalKiller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->finalKiller(), output);
  }
  
  // optional bool flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_InitRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // repeated .RecordInfo rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(i), target);
  }
  
  // optional .RecordInfo finalKiller = 3;
  if (has_finalKiller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->finalKiller(), target);
  }
  
  // optional bool flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_InitRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Rank.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .RecordInfo finalKiller = 3;
    if (has_finalKiller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finalKiller());
    }
    
    // optional bool flag = 4;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .RecordInfo rank = 2;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_InitRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_InitRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_InitRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_InitRank::MergeFrom(const DCProto_InitRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_finalKiller()) {
      mutable_finalKiller()->::RecordInfo::MergeFrom(from.finalKiller());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_InitRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_InitRank::CopyFrom(const DCProto_InitRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_InitRank::IsInitialized() const {
  
  return true;
}

void DCProto_InitRank::Swap(DCProto_InitRank* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    rank_.Swap(&other->rank_);
    std::swap(finalKiller_, other->finalKiller_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_InitRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_InitRank_descriptor_;
  metadata.reflection = DCProto_InitRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_PingPongAward_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_PingPongAward_ID_descriptor_;
}
bool DCProto_PingPongAward_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_PingPongAward_ID DCProto_PingPongAward::GROUPID;
const DCProto_PingPongAward_ID DCProto_PingPongAward::UNITID;
const DCProto_PingPongAward_ID DCProto_PingPongAward::ID_MIN;
const DCProto_PingPongAward_ID DCProto_PingPongAward::ID_MAX;
const int DCProto_PingPongAward::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_PingPongAward::kTypeFieldNumber;
const int DCProto_PingPongAward::kRoleIDFieldNumber;
#endif  // !_MSC_VER

DCProto_PingPongAward::DCProto_PingPongAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_PingPongAward::InitAsDefaultInstance() {
}

DCProto_PingPongAward::DCProto_PingPongAward(const DCProto_PingPongAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_PingPongAward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_PingPongAward::~DCProto_PingPongAward() {
  SharedDtor();
}

void DCProto_PingPongAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_PingPongAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_PingPongAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_PingPongAward_descriptor_;
}

const DCProto_PingPongAward& DCProto_PingPongAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_PingPongAward* DCProto_PingPongAward::default_instance_ = NULL;

DCProto_PingPongAward* DCProto_PingPongAward::New() const {
  return new DCProto_PingPongAward;
}

void DCProto_PingPongAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    roleID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_PingPongAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Rank.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Rank_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Rank_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_PingPongAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_PingPongAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_PingPongAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Rank.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int64 roleID = 2;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_PingPongAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_PingPongAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_PingPongAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_PingPongAward::MergeFrom(const DCProto_PingPongAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_PingPongAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_PingPongAward::CopyFrom(const DCProto_PingPongAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_PingPongAward::IsInitialized() const {
  
  return true;
}

void DCProto_PingPongAward::Swap(DCProto_PingPongAward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_PingPongAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_PingPongAward_descriptor_;
  metadata.reflection = DCProto_PingPongAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionPower::kStrFieldNumber;
const int FactionPower::kRoleIDFieldNumber;
const int FactionPower::kPowerFieldNumber;
#endif  // !_MSC_VER

FactionPower::FactionPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionPower::InitAsDefaultInstance() {
}

FactionPower::FactionPower(const FactionPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionPower::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionPower::~FactionPower() {
  SharedDtor();
}

void FactionPower::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void FactionPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionPower_descriptor_;
}

const FactionPower& FactionPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

FactionPower* FactionPower::default_instance_ = NULL;

FactionPower* FactionPower::New() const {
  return new FactionPower;
}

void FactionPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    power_ = GOOGLE_LONGLONG(0);
  }
  roleID_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }
      
      // repeated int64 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_roleID())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_roleID())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }
      
      // optional int64 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }
  
  // repeated int64 roleID = 2;
  for (int i = 0; i < this->roleID_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->roleID(i), output);
  }
  
  // optional int64 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->power(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }
  
  // repeated int64 roleID = 2;
  for (int i = 0; i < this->roleID_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->roleID(i), target);
  }
  
  // optional int64 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->power(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionPower::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional int64 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->power());
    }
    
  }
  // repeated int64 roleID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleID_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->roleID(i));
    }
    total_size += 1 * this->roleID_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionPower::MergeFrom(const FactionPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleID_.MergeFrom(from.roleID_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionPower::CopyFrom(const FactionPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionPower::IsInitialized() const {
  
  return true;
}

void FactionPower::Swap(FactionPower* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    roleID_.Swap(&other->roleID_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionPower_descriptor_;
  metadata.reflection = FactionPower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_FactionPower_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionPower_ID_descriptor_;
}
bool DCProto_FactionPower_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_FactionPower_ID DCProto_FactionPower::GROUPID;
const DCProto_FactionPower_ID DCProto_FactionPower::UNITID;
const DCProto_FactionPower_ID DCProto_FactionPower::ID_MIN;
const DCProto_FactionPower_ID DCProto_FactionPower::ID_MAX;
const int DCProto_FactionPower::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_FactionPower::kInfoFieldNumber;
#endif  // !_MSC_VER

DCProto_FactionPower::DCProto_FactionPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_FactionPower::InitAsDefaultInstance() {
}

DCProto_FactionPower::DCProto_FactionPower(const DCProto_FactionPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_FactionPower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_FactionPower::~DCProto_FactionPower() {
  SharedDtor();
}

void DCProto_FactionPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_FactionPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_FactionPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_FactionPower_descriptor_;
}

const DCProto_FactionPower& DCProto_FactionPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_FactionPower* DCProto_FactionPower::default_instance_ = NULL;

DCProto_FactionPower* DCProto_FactionPower::New() const {
  return new DCProto_FactionPower;
}

void DCProto_FactionPower::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_FactionPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FactionPower info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_FactionPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FactionPower info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_FactionPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FactionPower info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_FactionPower::ByteSize() const {
  int total_size = 0;
  
  // repeated .FactionPower info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_FactionPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_FactionPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_FactionPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_FactionPower::MergeFrom(const DCProto_FactionPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_FactionPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_FactionPower::CopyFrom(const DCProto_FactionPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_FactionPower::IsInitialized() const {
  
  return true;
}

void DCProto_FactionPower::Swap(DCProto_FactionPower* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_FactionPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_FactionPower_descriptor_;
  metadata.reflection = DCProto_FactionPower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DCProto_PingPongQiuBiTe_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_PingPongQiuBiTe_ID_descriptor_;
}
bool DCProto_PingPongQiuBiTe_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DCProto_PingPongQiuBiTe_ID DCProto_PingPongQiuBiTe::GROUPID;
const DCProto_PingPongQiuBiTe_ID DCProto_PingPongQiuBiTe::UNITID;
const DCProto_PingPongQiuBiTe_ID DCProto_PingPongQiuBiTe::ID_MIN;
const DCProto_PingPongQiuBiTe_ID DCProto_PingPongQiuBiTe::ID_MAX;
const int DCProto_PingPongQiuBiTe::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DCProto_PingPongQiuBiTe::kTypeFieldNumber;
const int DCProto_PingPongQiuBiTe::kRoleIDFieldNumber;
#endif  // !_MSC_VER

DCProto_PingPongQiuBiTe::DCProto_PingPongQiuBiTe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DCProto_PingPongQiuBiTe::InitAsDefaultInstance() {
}

DCProto_PingPongQiuBiTe::DCProto_PingPongQiuBiTe(const DCProto_PingPongQiuBiTe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DCProto_PingPongQiuBiTe::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DCProto_PingPongQiuBiTe::~DCProto_PingPongQiuBiTe() {
  SharedDtor();
}

void DCProto_PingPongQiuBiTe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DCProto_PingPongQiuBiTe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DCProto_PingPongQiuBiTe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DCProto_PingPongQiuBiTe_descriptor_;
}

const DCProto_PingPongQiuBiTe& DCProto_PingPongQiuBiTe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DCProto_2eproto();  return *default_instance_;
}

DCProto_PingPongQiuBiTe* DCProto_PingPongQiuBiTe::default_instance_ = NULL;

DCProto_PingPongQiuBiTe* DCProto_PingPongQiuBiTe::New() const {
  return new DCProto_PingPongQiuBiTe;
}

void DCProto_PingPongQiuBiTe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    roleID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DCProto_PingPongQiuBiTe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Rank.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Rank_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Rank_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DCProto_PingPongQiuBiTe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DCProto_PingPongQiuBiTe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DCProto_PingPongQiuBiTe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Rank.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int64 roleID = 2;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DCProto_PingPongQiuBiTe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DCProto_PingPongQiuBiTe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DCProto_PingPongQiuBiTe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DCProto_PingPongQiuBiTe::MergeFrom(const DCProto_PingPongQiuBiTe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DCProto_PingPongQiuBiTe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCProto_PingPongQiuBiTe::CopyFrom(const DCProto_PingPongQiuBiTe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCProto_PingPongQiuBiTe::IsInitialized() const {
  
  return true;
}

void DCProto_PingPongQiuBiTe::Swap(DCProto_PingPongQiuBiTe* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DCProto_PingPongQiuBiTe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DCProto_PingPongQiuBiTe_descriptor_;
  metadata.reflection = DCProto_PingPongQiuBiTe_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

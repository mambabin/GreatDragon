// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DesignationInfo.proto

#ifndef PROTOBUF_DesignationInfo_2eproto__INCLUDED
#define PROTOBUF_DesignationInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "FightInfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DesignationInfo_2eproto();
void protobuf_AssignDesc_DesignationInfo_2eproto();
void protobuf_ShutdownFile_DesignationInfo_2eproto();

class DesignationInfo;
class AllDesignationInfo;

// ===================================================================

class DesignationInfo : public ::google::protobuf::Message {
 public:
  DesignationInfo();
  virtual ~DesignationInfo();
  
  DesignationInfo(const DesignationInfo& from);
  
  inline DesignationInfo& operator=(const DesignationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DesignationInfo& default_instance();
  
  void Swap(DesignationInfo* other);
  
  // implements Message ----------------------------------------------
  
  DesignationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DesignationInfo& from);
  void MergeFrom(const DesignationInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);
  
  // optional int32 pass = 4;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 4;
  inline ::google::protobuf::int32 pass() const;
  inline void set_pass(::google::protobuf::int32 value);
  
  // optional int32 pic = 5;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 5;
  inline ::google::protobuf::int32 pic() const;
  inline void set_pic(::google::protobuf::int32 value);
  
  // optional string desc = 6;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 6;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // optional int32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // repeated .PB_FightAtt.PropertyType properties = 8;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 8;
  inline ::PB_FightAtt_PropertyType properties(int index) const;
  inline void set_properties(int index, ::PB_FightAtt_PropertyType value);
  inline void add_properties(::PB_FightAtt_PropertyType value);
  inline const ::google::protobuf::RepeatedField<int>& properties() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_properties();
  
  // repeated int32 propertiesDelta = 9;
  inline int propertiesDelta_size() const;
  inline void clear_propertiesDelta();
  static const int kPropertiesDeltaFieldNumber = 9;
  inline ::google::protobuf::int32 propertiesDelta(int index) const;
  inline void set_propertiesDelta(int index, ::google::protobuf::int32 value);
  inline void add_propertiesDelta(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      propertiesDelta() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_propertiesDelta();
  
  // @@protoc_insertion_point(class_scope:DesignationInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_pass();
  inline void clear_has_pass();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 pass_;
  ::google::protobuf::int32 pic_;
  ::std::string* desc_;
  ::google::protobuf::RepeatedField<int> properties_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > propertiesDelta_;
  ::google::protobuf::int32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_DesignationInfo_2eproto();
  friend void protobuf_AssignDesc_DesignationInfo_2eproto();
  friend void protobuf_ShutdownFile_DesignationInfo_2eproto();
  
  void InitAsDefaultInstance();
  static DesignationInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllDesignationInfo : public ::google::protobuf::Message {
 public:
  AllDesignationInfo();
  virtual ~AllDesignationInfo();
  
  AllDesignationInfo(const AllDesignationInfo& from);
  
  inline AllDesignationInfo& operator=(const AllDesignationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllDesignationInfo& default_instance();
  
  void Swap(AllDesignationInfo* other);
  
  // implements Message ----------------------------------------------
  
  AllDesignationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllDesignationInfo& from);
  void MergeFrom(const AllDesignationInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .DesignationInfo designationInfo = 1;
  inline int designationInfo_size() const;
  inline void clear_designationInfo();
  static const int kDesignationInfoFieldNumber = 1;
  inline const ::DesignationInfo& designationInfo(int index) const;
  inline ::DesignationInfo* mutable_designationInfo(int index);
  inline ::DesignationInfo* add_designationInfo();
  inline const ::google::protobuf::RepeatedPtrField< ::DesignationInfo >&
      designationInfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::DesignationInfo >*
      mutable_designationInfo();
  
  // @@protoc_insertion_point(class_scope:AllDesignationInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::DesignationInfo > designationInfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DesignationInfo_2eproto();
  friend void protobuf_AssignDesc_DesignationInfo_2eproto();
  friend void protobuf_ShutdownFile_DesignationInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllDesignationInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// DesignationInfo

// optional int32 id = 1;
inline bool DesignationInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DesignationInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DesignationInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DesignationInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DesignationInfo::id() const {
  return id_;
}
inline void DesignationInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool DesignationInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DesignationInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DesignationInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DesignationInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DesignationInfo::name() const {
  return *name_;
}
inline void DesignationInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DesignationInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DesignationInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DesignationInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DesignationInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 group = 3;
inline bool DesignationInfo::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DesignationInfo::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DesignationInfo::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DesignationInfo::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 DesignationInfo::group() const {
  return group_;
}
inline void DesignationInfo::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 pass = 4;
inline bool DesignationInfo::has_pass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DesignationInfo::set_has_pass() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DesignationInfo::clear_has_pass() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DesignationInfo::clear_pass() {
  pass_ = 0;
  clear_has_pass();
}
inline ::google::protobuf::int32 DesignationInfo::pass() const {
  return pass_;
}
inline void DesignationInfo::set_pass(::google::protobuf::int32 value) {
  set_has_pass();
  pass_ = value;
}

// optional int32 pic = 5;
inline bool DesignationInfo::has_pic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DesignationInfo::set_has_pic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DesignationInfo::clear_has_pic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DesignationInfo::clear_pic() {
  pic_ = 0;
  clear_has_pic();
}
inline ::google::protobuf::int32 DesignationInfo::pic() const {
  return pic_;
}
inline void DesignationInfo::set_pic(::google::protobuf::int32 value) {
  set_has_pic();
  pic_ = value;
}

// optional string desc = 6;
inline bool DesignationInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DesignationInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DesignationInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DesignationInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& DesignationInfo::desc() const {
  return *desc_;
}
inline void DesignationInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void DesignationInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void DesignationInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DesignationInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* DesignationInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 time = 7;
inline bool DesignationInfo::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DesignationInfo::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DesignationInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DesignationInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 DesignationInfo::time() const {
  return time_;
}
inline void DesignationInfo::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// repeated .PB_FightAtt.PropertyType properties = 8;
inline int DesignationInfo::properties_size() const {
  return properties_.size();
}
inline void DesignationInfo::clear_properties() {
  properties_.Clear();
}
inline ::PB_FightAtt_PropertyType DesignationInfo::properties(int index) const {
  return static_cast< ::PB_FightAtt_PropertyType >(properties_.Get(index));
}
inline void DesignationInfo::set_properties(int index, ::PB_FightAtt_PropertyType value) {
  GOOGLE_DCHECK(::PB_FightAtt_PropertyType_IsValid(value));
  properties_.Set(index, value);
}
inline void DesignationInfo::add_properties(::PB_FightAtt_PropertyType value) {
  GOOGLE_DCHECK(::PB_FightAtt_PropertyType_IsValid(value));
  properties_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
DesignationInfo::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedField<int>*
DesignationInfo::mutable_properties() {
  return &properties_;
}

// repeated int32 propertiesDelta = 9;
inline int DesignationInfo::propertiesDelta_size() const {
  return propertiesDelta_.size();
}
inline void DesignationInfo::clear_propertiesDelta() {
  propertiesDelta_.Clear();
}
inline ::google::protobuf::int32 DesignationInfo::propertiesDelta(int index) const {
  return propertiesDelta_.Get(index);
}
inline void DesignationInfo::set_propertiesDelta(int index, ::google::protobuf::int32 value) {
  propertiesDelta_.Set(index, value);
}
inline void DesignationInfo::add_propertiesDelta(::google::protobuf::int32 value) {
  propertiesDelta_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DesignationInfo::propertiesDelta() const {
  return propertiesDelta_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DesignationInfo::mutable_propertiesDelta() {
  return &propertiesDelta_;
}

// -------------------------------------------------------------------

// AllDesignationInfo

// repeated .DesignationInfo designationInfo = 1;
inline int AllDesignationInfo::designationInfo_size() const {
  return designationInfo_.size();
}
inline void AllDesignationInfo::clear_designationInfo() {
  designationInfo_.Clear();
}
inline const ::DesignationInfo& AllDesignationInfo::designationInfo(int index) const {
  return designationInfo_.Get(index);
}
inline ::DesignationInfo* AllDesignationInfo::mutable_designationInfo(int index) {
  return designationInfo_.Mutable(index);
}
inline ::DesignationInfo* AllDesignationInfo::add_designationInfo() {
  return designationInfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DesignationInfo >&
AllDesignationInfo::designationInfo() const {
  return designationInfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::DesignationInfo >*
AllDesignationInfo::mutable_designationInfo() {
  return &designationInfo_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DesignationInfo_2eproto__INCLUDED

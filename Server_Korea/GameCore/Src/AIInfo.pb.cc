// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AIInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_AIAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_AIAtt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_AIAtt_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_AIAtt_MoveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_AIAtt_SearchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_AIAtt_FleeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_AIAtt_AIType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AIInfo_2eproto() {
  protobuf_AddDesc_AIInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AIInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PB_AIAtt_descriptor_ = file->message_type(0);
  static const int PB_AIAtt_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, birthCoord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, moveRadius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, moveType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, followRadius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, searchRadius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, searchType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, fleeType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, fleeHP_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, callPercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, followDelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, canAttackBack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, moveInterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, searchInterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, aiType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, arg_),
  };
  PB_AIAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_AIAtt_descriptor_,
      PB_AIAtt::default_instance_,
      PB_AIAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AIAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_AIAtt));
  PB_AIAtt_Status_descriptor_ = PB_AIAtt_descriptor_->enum_type(0);
  PB_AIAtt_MoveType_descriptor_ = PB_AIAtt_descriptor_->enum_type(1);
  PB_AIAtt_SearchType_descriptor_ = PB_AIAtt_descriptor_->enum_type(2);
  PB_AIAtt_FleeType_descriptor_ = PB_AIAtt_descriptor_->enum_type(3);
  PB_AIAtt_AIType_descriptor_ = PB_AIAtt_descriptor_->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AIInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_AIAtt_descriptor_, &PB_AIAtt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AIInfo_2eproto() {
  delete PB_AIAtt::default_instance_;
  delete PB_AIAtt_reflection_;
}

void protobuf_AddDesc_AIInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Math_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014AIInfo.proto\032\nMath.proto\"\270\005\n\010PB_AIAtt\022"
    " \n\006status\030\001 \001(\0162\020.PB_AIAtt.Status\022 \n\nbir"
    "thCoord\030\002 \001(\0132\014.PB_Vector2i\022\022\n\nmoveRadiu"
    "s\030\003 \001(\005\022$\n\010moveType\030\004 \001(\0162\022.PB_AIAtt.Mov"
    "eType\022\024\n\014followRadius\030\005 \001(\005\022\024\n\014searchRad"
    "ius\030\006 \001(\005\022(\n\nsearchType\030\007 \001(\0162\024.PB_AIAtt"
    ".SearchType\022$\n\010fleeType\030\010 \001(\0162\022.PB_AIAtt"
    ".FleeType\022\016\n\006fleeHP\030\t \001(\002\022\023\n\013callPercent"
    "\030\n \001(\002\022\023\n\013followDelta\030\013 \001(\005\022\025\n\rcanAttack"
    "Back\030\014 \001(\010\022\024\n\014moveInterval\030\r \001(\005\022\026\n\016sear"
    "chInterval\030\016 \001(\005\022 \n\006aiType\030\017 \001(\0162\020.PB_AI"
    "Att.AIType\022\013\n\003arg\030\020 \003(\005\";\n\006Status\022\010\n\004BOR"
    "N\020\000\022\010\n\004IDLE\020\001\022\010\n\004BUSY\020\002\022\010\n\004FLEE\020\003\022\t\n\005RES"
    "ET\020\004\",\n\010MoveType\022\014\n\010DONTMOVE\020\000\022\010\n\004FREE\020\001"
    "\022\010\n\004PATH\020\002\")\n\nSearchType\022\016\n\nDONTSEARCH\020\000"
    "\022\013\n\007MINDIST\020\001\",\n\010FleeType\022\014\n\010DONTFLEE\020\000\022"
    "\006\n\002HP\020\001\022\n\n\006SEARCH\020\002\"@\n\006AIType\022\n\n\006NORMAL\020"
    "\000\022\007\n\003BOX\020\001\022\010\n\004TIME\020\002\022\013\n\007TRIGGER\020\003\022\n\n\006FOL"
    "LOW\020\004", 725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AIInfo.proto", &protobuf_RegisterTypes);
  PB_AIAtt::default_instance_ = new PB_AIAtt();
  PB_AIAtt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AIInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AIInfo_2eproto {
  StaticDescriptorInitializer_AIInfo_2eproto() {
    protobuf_AddDesc_AIInfo_2eproto();
  }
} static_descriptor_initializer_AIInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PB_AIAtt_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AIAtt_Status_descriptor_;
}
bool PB_AIAtt_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_AIAtt_Status PB_AIAtt::BORN;
const PB_AIAtt_Status PB_AIAtt::IDLE;
const PB_AIAtt_Status PB_AIAtt::BUSY;
const PB_AIAtt_Status PB_AIAtt::FLEE;
const PB_AIAtt_Status PB_AIAtt::RESET;
const PB_AIAtt_Status PB_AIAtt::Status_MIN;
const PB_AIAtt_Status PB_AIAtt::Status_MAX;
const int PB_AIAtt::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PB_AIAtt_MoveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AIAtt_MoveType_descriptor_;
}
bool PB_AIAtt_MoveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_AIAtt_MoveType PB_AIAtt::DONTMOVE;
const PB_AIAtt_MoveType PB_AIAtt::FREE;
const PB_AIAtt_MoveType PB_AIAtt::PATH;
const PB_AIAtt_MoveType PB_AIAtt::MoveType_MIN;
const PB_AIAtt_MoveType PB_AIAtt::MoveType_MAX;
const int PB_AIAtt::MoveType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PB_AIAtt_SearchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AIAtt_SearchType_descriptor_;
}
bool PB_AIAtt_SearchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_AIAtt_SearchType PB_AIAtt::DONTSEARCH;
const PB_AIAtt_SearchType PB_AIAtt::MINDIST;
const PB_AIAtt_SearchType PB_AIAtt::SearchType_MIN;
const PB_AIAtt_SearchType PB_AIAtt::SearchType_MAX;
const int PB_AIAtt::SearchType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PB_AIAtt_FleeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AIAtt_FleeType_descriptor_;
}
bool PB_AIAtt_FleeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_AIAtt_FleeType PB_AIAtt::DONTFLEE;
const PB_AIAtt_FleeType PB_AIAtt::HP;
const PB_AIAtt_FleeType PB_AIAtt::SEARCH;
const PB_AIAtt_FleeType PB_AIAtt::FleeType_MIN;
const PB_AIAtt_FleeType PB_AIAtt::FleeType_MAX;
const int PB_AIAtt::FleeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PB_AIAtt_AIType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AIAtt_AIType_descriptor_;
}
bool PB_AIAtt_AIType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_AIAtt_AIType PB_AIAtt::NORMAL;
const PB_AIAtt_AIType PB_AIAtt::BOX;
const PB_AIAtt_AIType PB_AIAtt::TIME;
const PB_AIAtt_AIType PB_AIAtt::TRIGGER;
const PB_AIAtt_AIType PB_AIAtt::FOLLOW;
const PB_AIAtt_AIType PB_AIAtt::AIType_MIN;
const PB_AIAtt_AIType PB_AIAtt::AIType_MAX;
const int PB_AIAtt::AIType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PB_AIAtt::kStatusFieldNumber;
const int PB_AIAtt::kBirthCoordFieldNumber;
const int PB_AIAtt::kMoveRadiusFieldNumber;
const int PB_AIAtt::kMoveTypeFieldNumber;
const int PB_AIAtt::kFollowRadiusFieldNumber;
const int PB_AIAtt::kSearchRadiusFieldNumber;
const int PB_AIAtt::kSearchTypeFieldNumber;
const int PB_AIAtt::kFleeTypeFieldNumber;
const int PB_AIAtt::kFleeHPFieldNumber;
const int PB_AIAtt::kCallPercentFieldNumber;
const int PB_AIAtt::kFollowDeltaFieldNumber;
const int PB_AIAtt::kCanAttackBackFieldNumber;
const int PB_AIAtt::kMoveIntervalFieldNumber;
const int PB_AIAtt::kSearchIntervalFieldNumber;
const int PB_AIAtt::kAiTypeFieldNumber;
const int PB_AIAtt::kArgFieldNumber;
#endif  // !_MSC_VER

PB_AIAtt::PB_AIAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_AIAtt::InitAsDefaultInstance() {
  birthCoord_ = const_cast< ::PB_Vector2i*>(&::PB_Vector2i::default_instance());
}

PB_AIAtt::PB_AIAtt(const PB_AIAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_AIAtt::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  birthCoord_ = NULL;
  moveRadius_ = 0;
  moveType_ = 0;
  followRadius_ = 0;
  searchRadius_ = 0;
  searchType_ = 0;
  fleeType_ = 0;
  fleeHP_ = 0;
  callPercent_ = 0;
  followDelta_ = 0;
  canAttackBack_ = false;
  moveInterval_ = 0;
  searchInterval_ = 0;
  aiType_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_AIAtt::~PB_AIAtt() {
  SharedDtor();
}

void PB_AIAtt::SharedDtor() {
  if (this != default_instance_) {
    delete birthCoord_;
  }
}

void PB_AIAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_AIAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AIAtt_descriptor_;
}

const PB_AIAtt& PB_AIAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AIInfo_2eproto();  return *default_instance_;
}

PB_AIAtt* PB_AIAtt::default_instance_ = NULL;

PB_AIAtt* PB_AIAtt::New() const {
  return new PB_AIAtt;
}

void PB_AIAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_birthCoord()) {
      if (birthCoord_ != NULL) birthCoord_->::PB_Vector2i::Clear();
    }
    moveRadius_ = 0;
    moveType_ = 0;
    followRadius_ = 0;
    searchRadius_ = 0;
    searchType_ = 0;
    fleeType_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fleeHP_ = 0;
    callPercent_ = 0;
    followDelta_ = 0;
    canAttackBack_ = false;
    moveInterval_ = 0;
    searchInterval_ = 0;
    aiType_ = 0;
  }
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_AIAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_AIAtt.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_AIAtt_Status_IsValid(value)) {
            set_status(static_cast< ::PB_AIAtt_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_birthCoord;
        break;
      }
      
      // optional .PB_Vector2i birthCoord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthCoord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birthCoord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moveRadius;
        break;
      }
      
      // optional int32 moveRadius = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveRadius_)));
          set_has_moveRadius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moveType;
        break;
      }
      
      // optional .PB_AIAtt.MoveType moveType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_AIAtt_MoveType_IsValid(value)) {
            set_moveType(static_cast< ::PB_AIAtt_MoveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_followRadius;
        break;
      }
      
      // optional int32 followRadius = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_followRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &followRadius_)));
          set_has_followRadius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_searchRadius;
        break;
      }
      
      // optional int32 searchRadius = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &searchRadius_)));
          set_has_searchRadius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_searchType;
        break;
      }
      
      // optional .PB_AIAtt.SearchType searchType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_AIAtt_SearchType_IsValid(value)) {
            set_searchType(static_cast< ::PB_AIAtt_SearchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fleeType;
        break;
      }
      
      // optional .PB_AIAtt.FleeType fleeType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fleeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_AIAtt_FleeType_IsValid(value)) {
            set_fleeType(static_cast< ::PB_AIAtt_FleeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_fleeHP;
        break;
      }
      
      // optional float fleeHP = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fleeHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fleeHP_)));
          set_has_fleeHP();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_callPercent;
        break;
      }
      
      // optional float callPercent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_callPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &callPercent_)));
          set_has_callPercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_followDelta;
        break;
      }
      
      // optional int32 followDelta = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_followDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &followDelta_)));
          set_has_followDelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_canAttackBack;
        break;
      }
      
      // optional bool canAttackBack = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canAttackBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canAttackBack_)));
          set_has_canAttackBack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_moveInterval;
        break;
      }
      
      // optional int32 moveInterval = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveInterval_)));
          set_has_moveInterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_searchInterval;
        break;
      }
      
      // optional int32 searchInterval = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &searchInterval_)));
          set_has_searchInterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_aiType;
        break;
      }
      
      // optional .PB_AIAtt.AIType aiType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aiType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_AIAtt_AIType_IsValid(value)) {
            set_aiType(static_cast< ::PB_AIAtt_AIType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_arg;
        break;
      }
      
      // repeated int32 arg = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_AIAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_AIAtt.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // optional .PB_Vector2i birthCoord = 2;
  if (has_birthCoord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->birthCoord(), output);
  }
  
  // optional int32 moveRadius = 3;
  if (has_moveRadius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->moveRadius(), output);
  }
  
  // optional .PB_AIAtt.MoveType moveType = 4;
  if (has_moveType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->moveType(), output);
  }
  
  // optional int32 followRadius = 5;
  if (has_followRadius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->followRadius(), output);
  }
  
  // optional int32 searchRadius = 6;
  if (has_searchRadius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->searchRadius(), output);
  }
  
  // optional .PB_AIAtt.SearchType searchType = 7;
  if (has_searchType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->searchType(), output);
  }
  
  // optional .PB_AIAtt.FleeType fleeType = 8;
  if (has_fleeType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->fleeType(), output);
  }
  
  // optional float fleeHP = 9;
  if (has_fleeHP()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fleeHP(), output);
  }
  
  // optional float callPercent = 10;
  if (has_callPercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->callPercent(), output);
  }
  
  // optional int32 followDelta = 11;
  if (has_followDelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->followDelta(), output);
  }
  
  // optional bool canAttackBack = 12;
  if (has_canAttackBack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->canAttackBack(), output);
  }
  
  // optional int32 moveInterval = 13;
  if (has_moveInterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->moveInterval(), output);
  }
  
  // optional int32 searchInterval = 14;
  if (has_searchInterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->searchInterval(), output);
  }
  
  // optional .PB_AIAtt.AIType aiType = 15;
  if (has_aiType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->aiType(), output);
  }
  
  // repeated int32 arg = 16;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_AIAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_AIAtt.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // optional .PB_Vector2i birthCoord = 2;
  if (has_birthCoord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->birthCoord(), target);
  }
  
  // optional int32 moveRadius = 3;
  if (has_moveRadius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->moveRadius(), target);
  }
  
  // optional .PB_AIAtt.MoveType moveType = 4;
  if (has_moveType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->moveType(), target);
  }
  
  // optional int32 followRadius = 5;
  if (has_followRadius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->followRadius(), target);
  }
  
  // optional int32 searchRadius = 6;
  if (has_searchRadius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->searchRadius(), target);
  }
  
  // optional .PB_AIAtt.SearchType searchType = 7;
  if (has_searchType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->searchType(), target);
  }
  
  // optional .PB_AIAtt.FleeType fleeType = 8;
  if (has_fleeType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->fleeType(), target);
  }
  
  // optional float fleeHP = 9;
  if (has_fleeHP()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fleeHP(), target);
  }
  
  // optional float callPercent = 10;
  if (has_callPercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->callPercent(), target);
  }
  
  // optional int32 followDelta = 11;
  if (has_followDelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->followDelta(), target);
  }
  
  // optional bool canAttackBack = 12;
  if (has_canAttackBack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->canAttackBack(), target);
  }
  
  // optional int32 moveInterval = 13;
  if (has_moveInterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->moveInterval(), target);
  }
  
  // optional int32 searchInterval = 14;
  if (has_searchInterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->searchInterval(), target);
  }
  
  // optional .PB_AIAtt.AIType aiType = 15;
  if (has_aiType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->aiType(), target);
  }
  
  // repeated int32 arg = 16;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_AIAtt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_AIAtt.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional .PB_Vector2i birthCoord = 2;
    if (has_birthCoord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->birthCoord());
    }
    
    // optional int32 moveRadius = 3;
    if (has_moveRadius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveRadius());
    }
    
    // optional .PB_AIAtt.MoveType moveType = 4;
    if (has_moveType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moveType());
    }
    
    // optional int32 followRadius = 5;
    if (has_followRadius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->followRadius());
    }
    
    // optional int32 searchRadius = 6;
    if (has_searchRadius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->searchRadius());
    }
    
    // optional .PB_AIAtt.SearchType searchType = 7;
    if (has_searchType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->searchType());
    }
    
    // optional .PB_AIAtt.FleeType fleeType = 8;
    if (has_fleeType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fleeType());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float fleeHP = 9;
    if (has_fleeHP()) {
      total_size += 1 + 4;
    }
    
    // optional float callPercent = 10;
    if (has_callPercent()) {
      total_size += 1 + 4;
    }
    
    // optional int32 followDelta = 11;
    if (has_followDelta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->followDelta());
    }
    
    // optional bool canAttackBack = 12;
    if (has_canAttackBack()) {
      total_size += 1 + 1;
    }
    
    // optional int32 moveInterval = 13;
    if (has_moveInterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveInterval());
    }
    
    // optional int32 searchInterval = 14;
    if (has_searchInterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->searchInterval());
    }
    
    // optional .PB_AIAtt.AIType aiType = 15;
    if (has_aiType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aiType());
    }
    
  }
  // repeated int32 arg = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg(i));
    }
    total_size += 2 * this->arg_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_AIAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_AIAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_AIAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_AIAtt::MergeFrom(const PB_AIAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_birthCoord()) {
      mutable_birthCoord()->::PB_Vector2i::MergeFrom(from.birthCoord());
    }
    if (from.has_moveRadius()) {
      set_moveRadius(from.moveRadius());
    }
    if (from.has_moveType()) {
      set_moveType(from.moveType());
    }
    if (from.has_followRadius()) {
      set_followRadius(from.followRadius());
    }
    if (from.has_searchRadius()) {
      set_searchRadius(from.searchRadius());
    }
    if (from.has_searchType()) {
      set_searchType(from.searchType());
    }
    if (from.has_fleeType()) {
      set_fleeType(from.fleeType());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fleeHP()) {
      set_fleeHP(from.fleeHP());
    }
    if (from.has_callPercent()) {
      set_callPercent(from.callPercent());
    }
    if (from.has_followDelta()) {
      set_followDelta(from.followDelta());
    }
    if (from.has_canAttackBack()) {
      set_canAttackBack(from.canAttackBack());
    }
    if (from.has_moveInterval()) {
      set_moveInterval(from.moveInterval());
    }
    if (from.has_searchInterval()) {
      set_searchInterval(from.searchInterval());
    }
    if (from.has_aiType()) {
      set_aiType(from.aiType());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_AIAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_AIAtt::CopyFrom(const PB_AIAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_AIAtt::IsInitialized() const {
  
  return true;
}

void PB_AIAtt::Swap(PB_AIAtt* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(birthCoord_, other->birthCoord_);
    std::swap(moveRadius_, other->moveRadius_);
    std::swap(moveType_, other->moveType_);
    std::swap(followRadius_, other->followRadius_);
    std::swap(searchRadius_, other->searchRadius_);
    std::swap(searchType_, other->searchType_);
    std::swap(fleeType_, other->fleeType_);
    std::swap(fleeHP_, other->fleeHP_);
    std::swap(callPercent_, other->callPercent_);
    std::swap(followDelta_, other->followDelta_);
    std::swap(canAttackBack_, other->canAttackBack_);
    std::swap(moveInterval_, other->moveInterval_);
    std::swap(searchInterval_, other->searchInterval_);
    std::swap(aiType_, other->aiType_);
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_AIAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_AIAtt_descriptor_;
  metadata.reflection = PB_AIAtt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

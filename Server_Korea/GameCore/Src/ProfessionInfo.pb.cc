// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProfessionInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_ProfessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_ProfessionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_ProfessionInfo_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProfessionInfo_2eproto() {
  protobuf_AddDesc_ProfessionInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProfessionInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PB_ProfessionInfo_descriptor_ = file->message_type(0);
  static const int PB_ProfessionInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, male_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, movementAtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, equipmentAtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, fightAtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, aiAtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, itemPackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, missions_),
  };
  PB_ProfessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_ProfessionInfo_descriptor_,
      PB_ProfessionInfo::default_instance_,
      PB_ProfessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ProfessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_ProfessionInfo));
  PB_ProfessionInfo_Type_descriptor_ = PB_ProfessionInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProfessionInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_ProfessionInfo_descriptor_, &PB_ProfessionInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProfessionInfo_2eproto() {
  delete PB_ProfessionInfo::default_instance_;
  delete PB_ProfessionInfo_reflection_;
}

void protobuf_AddDesc_ProfessionInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EquipmentInfo_2eproto();
  ::protobuf_AddDesc_MovementInfo_2eproto();
  ::protobuf_AddDesc_FightInfo_2eproto();
  ::protobuf_AddDesc_AIInfo_2eproto();
  ::protobuf_AddDesc_ItemInfo_2eproto();
  ::protobuf_AddDesc_MissionInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ProfessionInfo.proto\032\023EquipmentInfo.pr"
    "oto\032\022MovementInfo.proto\032\017FightInfo.proto"
    "\032\014AIInfo.proto\032\016ItemInfo.proto\032\021MissionI"
    "nfo.proto\"\373\002\n\021PB_ProfessionInfo\022%\n\004type\030"
    "\001 \001(\0162\027.PB_ProfessionInfo.Type\022\014\n\004male\030\002"
    " \001(\010\022\016\n\006height\030\003 \001(\002\022$\n\013movementAtt\030\004 \001("
    "\0132\017.PB_MovementAtt\022&\n\014equipmentAtt\030\005 \001(\013"
    "2\020.PB_EquipmentAtt\022\036\n\010fightAtt\030\006 \001(\0132\014.P"
    "B_FightAtt\022\030\n\005aiAtt\030\007 \001(\0132\t.PB_AIAtt\022$\n\013"
    "itemPackage\030\010 \001(\0132\017.PB_ItemPackage\022\024\n\003al"
    "t\030\t \001(\0132\007.PB_ALT\022&\n\010missions\030\n \001(\0132\024.PB_"
    "MissionAllRecord\"5\n\004Type\022\007\n\003NPC\020\000\022\n\n\006KNI"
    "GHT\020\001\022\n\n\006RANGER\020\002\022\014\n\010MAGICIAN\020\003", 511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProfessionInfo.proto", &protobuf_RegisterTypes);
  PB_ProfessionInfo::default_instance_ = new PB_ProfessionInfo();
  PB_ProfessionInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProfessionInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProfessionInfo_2eproto {
  StaticDescriptorInitializer_ProfessionInfo_2eproto() {
    protobuf_AddDesc_ProfessionInfo_2eproto();
  }
} static_descriptor_initializer_ProfessionInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PB_ProfessionInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ProfessionInfo_Type_descriptor_;
}
bool PB_ProfessionInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_ProfessionInfo_Type PB_ProfessionInfo::NPC;
const PB_ProfessionInfo_Type PB_ProfessionInfo::KNIGHT;
const PB_ProfessionInfo_Type PB_ProfessionInfo::RANGER;
const PB_ProfessionInfo_Type PB_ProfessionInfo::MAGICIAN;
const PB_ProfessionInfo_Type PB_ProfessionInfo::Type_MIN;
const PB_ProfessionInfo_Type PB_ProfessionInfo::Type_MAX;
const int PB_ProfessionInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PB_ProfessionInfo::kTypeFieldNumber;
const int PB_ProfessionInfo::kMaleFieldNumber;
const int PB_ProfessionInfo::kHeightFieldNumber;
const int PB_ProfessionInfo::kMovementAttFieldNumber;
const int PB_ProfessionInfo::kEquipmentAttFieldNumber;
const int PB_ProfessionInfo::kFightAttFieldNumber;
const int PB_ProfessionInfo::kAiAttFieldNumber;
const int PB_ProfessionInfo::kItemPackageFieldNumber;
const int PB_ProfessionInfo::kAltFieldNumber;
const int PB_ProfessionInfo::kMissionsFieldNumber;
#endif  // !_MSC_VER

PB_ProfessionInfo::PB_ProfessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_ProfessionInfo::InitAsDefaultInstance() {
  movementAtt_ = const_cast< ::PB_MovementAtt*>(&::PB_MovementAtt::default_instance());
  equipmentAtt_ = const_cast< ::PB_EquipmentAtt*>(&::PB_EquipmentAtt::default_instance());
  fightAtt_ = const_cast< ::PB_FightAtt*>(&::PB_FightAtt::default_instance());
  aiAtt_ = const_cast< ::PB_AIAtt*>(&::PB_AIAtt::default_instance());
  itemPackage_ = const_cast< ::PB_ItemPackage*>(&::PB_ItemPackage::default_instance());
  alt_ = const_cast< ::PB_ALT*>(&::PB_ALT::default_instance());
  missions_ = const_cast< ::PB_MissionAllRecord*>(&::PB_MissionAllRecord::default_instance());
}

PB_ProfessionInfo::PB_ProfessionInfo(const PB_ProfessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_ProfessionInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  male_ = false;
  height_ = 0;
  movementAtt_ = NULL;
  equipmentAtt_ = NULL;
  fightAtt_ = NULL;
  aiAtt_ = NULL;
  itemPackage_ = NULL;
  alt_ = NULL;
  missions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_ProfessionInfo::~PB_ProfessionInfo() {
  SharedDtor();
}

void PB_ProfessionInfo::SharedDtor() {
  if (this != default_instance_) {
    delete movementAtt_;
    delete equipmentAtt_;
    delete fightAtt_;
    delete aiAtt_;
    delete itemPackage_;
    delete alt_;
    delete missions_;
  }
}

void PB_ProfessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_ProfessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ProfessionInfo_descriptor_;
}

const PB_ProfessionInfo& PB_ProfessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProfessionInfo_2eproto();  return *default_instance_;
}

PB_ProfessionInfo* PB_ProfessionInfo::default_instance_ = NULL;

PB_ProfessionInfo* PB_ProfessionInfo::New() const {
  return new PB_ProfessionInfo;
}

void PB_ProfessionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    male_ = false;
    height_ = 0;
    if (has_movementAtt()) {
      if (movementAtt_ != NULL) movementAtt_->::PB_MovementAtt::Clear();
    }
    if (has_equipmentAtt()) {
      if (equipmentAtt_ != NULL) equipmentAtt_->::PB_EquipmentAtt::Clear();
    }
    if (has_fightAtt()) {
      if (fightAtt_ != NULL) fightAtt_->::PB_FightAtt::Clear();
    }
    if (has_aiAtt()) {
      if (aiAtt_ != NULL) aiAtt_->::PB_AIAtt::Clear();
    }
    if (has_itemPackage()) {
      if (itemPackage_ != NULL) itemPackage_->::PB_ItemPackage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_alt()) {
      if (alt_ != NULL) alt_->::PB_ALT::Clear();
    }
    if (has_missions()) {
      if (missions_ != NULL) missions_->::PB_MissionAllRecord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_ProfessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_ProfessionInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_type(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_male;
        break;
      }
      
      // optional bool male = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_male:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &male_)));
          set_has_male();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_height;
        break;
      }
      
      // optional float height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_movementAtt;
        break;
      }
      
      // optional .PB_MovementAtt movementAtt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movementAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movementAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equipmentAtt;
        break;
      }
      
      // optional .PB_EquipmentAtt equipmentAtt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fightAtt;
        break;
      }
      
      // optional .PB_FightAtt fightAtt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fightAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fightAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_aiAtt;
        break;
      }
      
      // optional .PB_AIAtt aiAtt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aiAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aiAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_itemPackage;
        break;
      }
      
      // optional .PB_ItemPackage itemPackage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemPackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemPackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_alt;
        break;
      }
      
      // optional .PB_ALT alt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_missions;
        break;
      }
      
      // optional .PB_MissionAllRecord missions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_ProfessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_ProfessionInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional bool male = 2;
  if (has_male()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->male(), output);
  }
  
  // optional float height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }
  
  // optional .PB_MovementAtt movementAtt = 4;
  if (has_movementAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->movementAtt(), output);
  }
  
  // optional .PB_EquipmentAtt equipmentAtt = 5;
  if (has_equipmentAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipmentAtt(), output);
  }
  
  // optional .PB_FightAtt fightAtt = 6;
  if (has_fightAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fightAtt(), output);
  }
  
  // optional .PB_AIAtt aiAtt = 7;
  if (has_aiAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->aiAtt(), output);
  }
  
  // optional .PB_ItemPackage itemPackage = 8;
  if (has_itemPackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->itemPackage(), output);
  }
  
  // optional .PB_ALT alt = 9;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->alt(), output);
  }
  
  // optional .PB_MissionAllRecord missions = 10;
  if (has_missions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->missions(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_ProfessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_ProfessionInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional bool male = 2;
  if (has_male()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->male(), target);
  }
  
  // optional float height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }
  
  // optional .PB_MovementAtt movementAtt = 4;
  if (has_movementAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->movementAtt(), target);
  }
  
  // optional .PB_EquipmentAtt equipmentAtt = 5;
  if (has_equipmentAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipmentAtt(), target);
  }
  
  // optional .PB_FightAtt fightAtt = 6;
  if (has_fightAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fightAtt(), target);
  }
  
  // optional .PB_AIAtt aiAtt = 7;
  if (has_aiAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->aiAtt(), target);
  }
  
  // optional .PB_ItemPackage itemPackage = 8;
  if (has_itemPackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->itemPackage(), target);
  }
  
  // optional .PB_ALT alt = 9;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->alt(), target);
  }
  
  // optional .PB_MissionAllRecord missions = 10;
  if (has_missions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->missions(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_ProfessionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_ProfessionInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional bool male = 2;
    if (has_male()) {
      total_size += 1 + 1;
    }
    
    // optional float height = 3;
    if (has_height()) {
      total_size += 1 + 4;
    }
    
    // optional .PB_MovementAtt movementAtt = 4;
    if (has_movementAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movementAtt());
    }
    
    // optional .PB_EquipmentAtt equipmentAtt = 5;
    if (has_equipmentAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentAtt());
    }
    
    // optional .PB_FightAtt fightAtt = 6;
    if (has_fightAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightAtt());
    }
    
    // optional .PB_AIAtt aiAtt = 7;
    if (has_aiAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aiAtt());
    }
    
    // optional .PB_ItemPackage itemPackage = 8;
    if (has_itemPackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemPackage());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PB_ALT alt = 9;
    if (has_alt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alt());
    }
    
    // optional .PB_MissionAllRecord missions = 10;
    if (has_missions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missions());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_ProfessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_ProfessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_ProfessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_ProfessionInfo::MergeFrom(const PB_ProfessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_male()) {
      set_male(from.male());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_movementAtt()) {
      mutable_movementAtt()->::PB_MovementAtt::MergeFrom(from.movementAtt());
    }
    if (from.has_equipmentAtt()) {
      mutable_equipmentAtt()->::PB_EquipmentAtt::MergeFrom(from.equipmentAtt());
    }
    if (from.has_fightAtt()) {
      mutable_fightAtt()->::PB_FightAtt::MergeFrom(from.fightAtt());
    }
    if (from.has_aiAtt()) {
      mutable_aiAtt()->::PB_AIAtt::MergeFrom(from.aiAtt());
    }
    if (from.has_itemPackage()) {
      mutable_itemPackage()->::PB_ItemPackage::MergeFrom(from.itemPackage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alt()) {
      mutable_alt()->::PB_ALT::MergeFrom(from.alt());
    }
    if (from.has_missions()) {
      mutable_missions()->::PB_MissionAllRecord::MergeFrom(from.missions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_ProfessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_ProfessionInfo::CopyFrom(const PB_ProfessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_ProfessionInfo::IsInitialized() const {
  
  return true;
}

void PB_ProfessionInfo::Swap(PB_ProfessionInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(male_, other->male_);
    std::swap(height_, other->height_);
    std::swap(movementAtt_, other->movementAtt_);
    std::swap(equipmentAtt_, other->equipmentAtt_);
    std::swap(fightAtt_, other->fightAtt_);
    std::swap(aiAtt_, other->aiAtt_);
    std::swap(itemPackage_, other->itemPackage_);
    std::swap(alt_, other->alt_);
    std::swap(missions_, other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_ProfessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_ProfessionInfo_descriptor_;
  metadata.reflection = PB_ProfessionInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AIInfo.proto

#ifndef PROTOBUF_AIInfo_2eproto__INCLUDED
#define PROTOBUF_AIInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Math.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AIInfo_2eproto();
void protobuf_AssignDesc_AIInfo_2eproto();
void protobuf_ShutdownFile_AIInfo_2eproto();

class PB_AIAtt;

enum PB_AIAtt_Status {
  PB_AIAtt_Status_BORN = 0,
  PB_AIAtt_Status_IDLE = 1,
  PB_AIAtt_Status_BUSY = 2,
  PB_AIAtt_Status_FLEE = 3,
  PB_AIAtt_Status_RESET = 4
};
bool PB_AIAtt_Status_IsValid(int value);
const PB_AIAtt_Status PB_AIAtt_Status_Status_MIN = PB_AIAtt_Status_BORN;
const PB_AIAtt_Status PB_AIAtt_Status_Status_MAX = PB_AIAtt_Status_RESET;
const int PB_AIAtt_Status_Status_ARRAYSIZE = PB_AIAtt_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_AIAtt_Status_descriptor();
inline const ::std::string& PB_AIAtt_Status_Name(PB_AIAtt_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_AIAtt_Status_descriptor(), value);
}
inline bool PB_AIAtt_Status_Parse(
    const ::std::string& name, PB_AIAtt_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_AIAtt_Status>(
    PB_AIAtt_Status_descriptor(), name, value);
}
enum PB_AIAtt_MoveType {
  PB_AIAtt_MoveType_DONTMOVE = 0,
  PB_AIAtt_MoveType_FREE = 1,
  PB_AIAtt_MoveType_PATH = 2
};
bool PB_AIAtt_MoveType_IsValid(int value);
const PB_AIAtt_MoveType PB_AIAtt_MoveType_MoveType_MIN = PB_AIAtt_MoveType_DONTMOVE;
const PB_AIAtt_MoveType PB_AIAtt_MoveType_MoveType_MAX = PB_AIAtt_MoveType_PATH;
const int PB_AIAtt_MoveType_MoveType_ARRAYSIZE = PB_AIAtt_MoveType_MoveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_AIAtt_MoveType_descriptor();
inline const ::std::string& PB_AIAtt_MoveType_Name(PB_AIAtt_MoveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_AIAtt_MoveType_descriptor(), value);
}
inline bool PB_AIAtt_MoveType_Parse(
    const ::std::string& name, PB_AIAtt_MoveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_AIAtt_MoveType>(
    PB_AIAtt_MoveType_descriptor(), name, value);
}
enum PB_AIAtt_SearchType {
  PB_AIAtt_SearchType_DONTSEARCH = 0,
  PB_AIAtt_SearchType_MINDIST = 1
};
bool PB_AIAtt_SearchType_IsValid(int value);
const PB_AIAtt_SearchType PB_AIAtt_SearchType_SearchType_MIN = PB_AIAtt_SearchType_DONTSEARCH;
const PB_AIAtt_SearchType PB_AIAtt_SearchType_SearchType_MAX = PB_AIAtt_SearchType_MINDIST;
const int PB_AIAtt_SearchType_SearchType_ARRAYSIZE = PB_AIAtt_SearchType_SearchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_AIAtt_SearchType_descriptor();
inline const ::std::string& PB_AIAtt_SearchType_Name(PB_AIAtt_SearchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_AIAtt_SearchType_descriptor(), value);
}
inline bool PB_AIAtt_SearchType_Parse(
    const ::std::string& name, PB_AIAtt_SearchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_AIAtt_SearchType>(
    PB_AIAtt_SearchType_descriptor(), name, value);
}
enum PB_AIAtt_FleeType {
  PB_AIAtt_FleeType_DONTFLEE = 0,
  PB_AIAtt_FleeType_HP = 1,
  PB_AIAtt_FleeType_SEARCH = 2
};
bool PB_AIAtt_FleeType_IsValid(int value);
const PB_AIAtt_FleeType PB_AIAtt_FleeType_FleeType_MIN = PB_AIAtt_FleeType_DONTFLEE;
const PB_AIAtt_FleeType PB_AIAtt_FleeType_FleeType_MAX = PB_AIAtt_FleeType_SEARCH;
const int PB_AIAtt_FleeType_FleeType_ARRAYSIZE = PB_AIAtt_FleeType_FleeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_AIAtt_FleeType_descriptor();
inline const ::std::string& PB_AIAtt_FleeType_Name(PB_AIAtt_FleeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_AIAtt_FleeType_descriptor(), value);
}
inline bool PB_AIAtt_FleeType_Parse(
    const ::std::string& name, PB_AIAtt_FleeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_AIAtt_FleeType>(
    PB_AIAtt_FleeType_descriptor(), name, value);
}
enum PB_AIAtt_AIType {
  PB_AIAtt_AIType_NORMAL = 0,
  PB_AIAtt_AIType_BOX = 1,
  PB_AIAtt_AIType_TIME = 2,
  PB_AIAtt_AIType_TRIGGER = 3,
  PB_AIAtt_AIType_FOLLOW = 4
};
bool PB_AIAtt_AIType_IsValid(int value);
const PB_AIAtt_AIType PB_AIAtt_AIType_AIType_MIN = PB_AIAtt_AIType_NORMAL;
const PB_AIAtt_AIType PB_AIAtt_AIType_AIType_MAX = PB_AIAtt_AIType_FOLLOW;
const int PB_AIAtt_AIType_AIType_ARRAYSIZE = PB_AIAtt_AIType_AIType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_AIAtt_AIType_descriptor();
inline const ::std::string& PB_AIAtt_AIType_Name(PB_AIAtt_AIType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_AIAtt_AIType_descriptor(), value);
}
inline bool PB_AIAtt_AIType_Parse(
    const ::std::string& name, PB_AIAtt_AIType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_AIAtt_AIType>(
    PB_AIAtt_AIType_descriptor(), name, value);
}
// ===================================================================

class PB_AIAtt : public ::google::protobuf::Message {
 public:
  PB_AIAtt();
  virtual ~PB_AIAtt();
  
  PB_AIAtt(const PB_AIAtt& from);
  
  inline PB_AIAtt& operator=(const PB_AIAtt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_AIAtt& default_instance();
  
  void Swap(PB_AIAtt* other);
  
  // implements Message ----------------------------------------------
  
  PB_AIAtt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_AIAtt& from);
  void MergeFrom(const PB_AIAtt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PB_AIAtt_Status Status;
  static const Status BORN = PB_AIAtt_Status_BORN;
  static const Status IDLE = PB_AIAtt_Status_IDLE;
  static const Status BUSY = PB_AIAtt_Status_BUSY;
  static const Status FLEE = PB_AIAtt_Status_FLEE;
  static const Status RESET = PB_AIAtt_Status_RESET;
  static inline bool Status_IsValid(int value) {
    return PB_AIAtt_Status_IsValid(value);
  }
  static const Status Status_MIN =
    PB_AIAtt_Status_Status_MIN;
  static const Status Status_MAX =
    PB_AIAtt_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    PB_AIAtt_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return PB_AIAtt_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return PB_AIAtt_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return PB_AIAtt_Status_Parse(name, value);
  }
  
  typedef PB_AIAtt_MoveType MoveType;
  static const MoveType DONTMOVE = PB_AIAtt_MoveType_DONTMOVE;
  static const MoveType FREE = PB_AIAtt_MoveType_FREE;
  static const MoveType PATH = PB_AIAtt_MoveType_PATH;
  static inline bool MoveType_IsValid(int value) {
    return PB_AIAtt_MoveType_IsValid(value);
  }
  static const MoveType MoveType_MIN =
    PB_AIAtt_MoveType_MoveType_MIN;
  static const MoveType MoveType_MAX =
    PB_AIAtt_MoveType_MoveType_MAX;
  static const int MoveType_ARRAYSIZE =
    PB_AIAtt_MoveType_MoveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MoveType_descriptor() {
    return PB_AIAtt_MoveType_descriptor();
  }
  static inline const ::std::string& MoveType_Name(MoveType value) {
    return PB_AIAtt_MoveType_Name(value);
  }
  static inline bool MoveType_Parse(const ::std::string& name,
      MoveType* value) {
    return PB_AIAtt_MoveType_Parse(name, value);
  }
  
  typedef PB_AIAtt_SearchType SearchType;
  static const SearchType DONTSEARCH = PB_AIAtt_SearchType_DONTSEARCH;
  static const SearchType MINDIST = PB_AIAtt_SearchType_MINDIST;
  static inline bool SearchType_IsValid(int value) {
    return PB_AIAtt_SearchType_IsValid(value);
  }
  static const SearchType SearchType_MIN =
    PB_AIAtt_SearchType_SearchType_MIN;
  static const SearchType SearchType_MAX =
    PB_AIAtt_SearchType_SearchType_MAX;
  static const int SearchType_ARRAYSIZE =
    PB_AIAtt_SearchType_SearchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SearchType_descriptor() {
    return PB_AIAtt_SearchType_descriptor();
  }
  static inline const ::std::string& SearchType_Name(SearchType value) {
    return PB_AIAtt_SearchType_Name(value);
  }
  static inline bool SearchType_Parse(const ::std::string& name,
      SearchType* value) {
    return PB_AIAtt_SearchType_Parse(name, value);
  }
  
  typedef PB_AIAtt_FleeType FleeType;
  static const FleeType DONTFLEE = PB_AIAtt_FleeType_DONTFLEE;
  static const FleeType HP = PB_AIAtt_FleeType_HP;
  static const FleeType SEARCH = PB_AIAtt_FleeType_SEARCH;
  static inline bool FleeType_IsValid(int value) {
    return PB_AIAtt_FleeType_IsValid(value);
  }
  static const FleeType FleeType_MIN =
    PB_AIAtt_FleeType_FleeType_MIN;
  static const FleeType FleeType_MAX =
    PB_AIAtt_FleeType_FleeType_MAX;
  static const int FleeType_ARRAYSIZE =
    PB_AIAtt_FleeType_FleeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FleeType_descriptor() {
    return PB_AIAtt_FleeType_descriptor();
  }
  static inline const ::std::string& FleeType_Name(FleeType value) {
    return PB_AIAtt_FleeType_Name(value);
  }
  static inline bool FleeType_Parse(const ::std::string& name,
      FleeType* value) {
    return PB_AIAtt_FleeType_Parse(name, value);
  }
  
  typedef PB_AIAtt_AIType AIType;
  static const AIType NORMAL = PB_AIAtt_AIType_NORMAL;
  static const AIType BOX = PB_AIAtt_AIType_BOX;
  static const AIType TIME = PB_AIAtt_AIType_TIME;
  static const AIType TRIGGER = PB_AIAtt_AIType_TRIGGER;
  static const AIType FOLLOW = PB_AIAtt_AIType_FOLLOW;
  static inline bool AIType_IsValid(int value) {
    return PB_AIAtt_AIType_IsValid(value);
  }
  static const AIType AIType_MIN =
    PB_AIAtt_AIType_AIType_MIN;
  static const AIType AIType_MAX =
    PB_AIAtt_AIType_AIType_MAX;
  static const int AIType_ARRAYSIZE =
    PB_AIAtt_AIType_AIType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AIType_descriptor() {
    return PB_AIAtt_AIType_descriptor();
  }
  static inline const ::std::string& AIType_Name(AIType value) {
    return PB_AIAtt_AIType_Name(value);
  }
  static inline bool AIType_Parse(const ::std::string& name,
      AIType* value) {
    return PB_AIAtt_AIType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_AIAtt.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::PB_AIAtt_Status status() const;
  inline void set_status(::PB_AIAtt_Status value);
  
  // optional .PB_Vector2i birthCoord = 2;
  inline bool has_birthCoord() const;
  inline void clear_birthCoord();
  static const int kBirthCoordFieldNumber = 2;
  inline const ::PB_Vector2i& birthCoord() const;
  inline ::PB_Vector2i* mutable_birthCoord();
  inline ::PB_Vector2i* release_birthCoord();
  
  // optional int32 moveRadius = 3;
  inline bool has_moveRadius() const;
  inline void clear_moveRadius();
  static const int kMoveRadiusFieldNumber = 3;
  inline ::google::protobuf::int32 moveRadius() const;
  inline void set_moveRadius(::google::protobuf::int32 value);
  
  // optional .PB_AIAtt.MoveType moveType = 4;
  inline bool has_moveType() const;
  inline void clear_moveType();
  static const int kMoveTypeFieldNumber = 4;
  inline ::PB_AIAtt_MoveType moveType() const;
  inline void set_moveType(::PB_AIAtt_MoveType value);
  
  // optional int32 followRadius = 5;
  inline bool has_followRadius() const;
  inline void clear_followRadius();
  static const int kFollowRadiusFieldNumber = 5;
  inline ::google::protobuf::int32 followRadius() const;
  inline void set_followRadius(::google::protobuf::int32 value);
  
  // optional int32 searchRadius = 6;
  inline bool has_searchRadius() const;
  inline void clear_searchRadius();
  static const int kSearchRadiusFieldNumber = 6;
  inline ::google::protobuf::int32 searchRadius() const;
  inline void set_searchRadius(::google::protobuf::int32 value);
  
  // optional .PB_AIAtt.SearchType searchType = 7;
  inline bool has_searchType() const;
  inline void clear_searchType();
  static const int kSearchTypeFieldNumber = 7;
  inline ::PB_AIAtt_SearchType searchType() const;
  inline void set_searchType(::PB_AIAtt_SearchType value);
  
  // optional .PB_AIAtt.FleeType fleeType = 8;
  inline bool has_fleeType() const;
  inline void clear_fleeType();
  static const int kFleeTypeFieldNumber = 8;
  inline ::PB_AIAtt_FleeType fleeType() const;
  inline void set_fleeType(::PB_AIAtt_FleeType value);
  
  // optional float fleeHP = 9;
  inline bool has_fleeHP() const;
  inline void clear_fleeHP();
  static const int kFleeHPFieldNumber = 9;
  inline float fleeHP() const;
  inline void set_fleeHP(float value);
  
  // optional float callPercent = 10;
  inline bool has_callPercent() const;
  inline void clear_callPercent();
  static const int kCallPercentFieldNumber = 10;
  inline float callPercent() const;
  inline void set_callPercent(float value);
  
  // optional int32 followDelta = 11;
  inline bool has_followDelta() const;
  inline void clear_followDelta();
  static const int kFollowDeltaFieldNumber = 11;
  inline ::google::protobuf::int32 followDelta() const;
  inline void set_followDelta(::google::protobuf::int32 value);
  
  // optional bool canAttackBack = 12;
  inline bool has_canAttackBack() const;
  inline void clear_canAttackBack();
  static const int kCanAttackBackFieldNumber = 12;
  inline bool canAttackBack() const;
  inline void set_canAttackBack(bool value);
  
  // optional int32 moveInterval = 13;
  inline bool has_moveInterval() const;
  inline void clear_moveInterval();
  static const int kMoveIntervalFieldNumber = 13;
  inline ::google::protobuf::int32 moveInterval() const;
  inline void set_moveInterval(::google::protobuf::int32 value);
  
  // optional int32 searchInterval = 14;
  inline bool has_searchInterval() const;
  inline void clear_searchInterval();
  static const int kSearchIntervalFieldNumber = 14;
  inline ::google::protobuf::int32 searchInterval() const;
  inline void set_searchInterval(::google::protobuf::int32 value);
  
  // optional .PB_AIAtt.AIType aiType = 15;
  inline bool has_aiType() const;
  inline void clear_aiType();
  static const int kAiTypeFieldNumber = 15;
  inline ::PB_AIAtt_AIType aiType() const;
  inline void set_aiType(::PB_AIAtt_AIType value);
  
  // repeated int32 arg = 16;
  inline int arg_size() const;
  inline void clear_arg();
  static const int kArgFieldNumber = 16;
  inline ::google::protobuf::int32 arg(int index) const;
  inline void set_arg(int index, ::google::protobuf::int32 value);
  inline void add_arg(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      arg() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_arg();
  
  // @@protoc_insertion_point(class_scope:PB_AIAtt)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_birthCoord();
  inline void clear_has_birthCoord();
  inline void set_has_moveRadius();
  inline void clear_has_moveRadius();
  inline void set_has_moveType();
  inline void clear_has_moveType();
  inline void set_has_followRadius();
  inline void clear_has_followRadius();
  inline void set_has_searchRadius();
  inline void clear_has_searchRadius();
  inline void set_has_searchType();
  inline void clear_has_searchType();
  inline void set_has_fleeType();
  inline void clear_has_fleeType();
  inline void set_has_fleeHP();
  inline void clear_has_fleeHP();
  inline void set_has_callPercent();
  inline void clear_has_callPercent();
  inline void set_has_followDelta();
  inline void clear_has_followDelta();
  inline void set_has_canAttackBack();
  inline void clear_has_canAttackBack();
  inline void set_has_moveInterval();
  inline void clear_has_moveInterval();
  inline void set_has_searchInterval();
  inline void clear_has_searchInterval();
  inline void set_has_aiType();
  inline void clear_has_aiType();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_Vector2i* birthCoord_;
  int status_;
  ::google::protobuf::int32 moveRadius_;
  int moveType_;
  ::google::protobuf::int32 followRadius_;
  ::google::protobuf::int32 searchRadius_;
  int searchType_;
  int fleeType_;
  float fleeHP_;
  float callPercent_;
  ::google::protobuf::int32 followDelta_;
  bool canAttackBack_;
  ::google::protobuf::int32 moveInterval_;
  ::google::protobuf::int32 searchInterval_;
  int aiType_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > arg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_AIInfo_2eproto();
  friend void protobuf_AssignDesc_AIInfo_2eproto();
  friend void protobuf_ShutdownFile_AIInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_AIAtt* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_AIAtt

// optional .PB_AIAtt.Status status = 1;
inline bool PB_AIAtt::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_AIAtt::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_AIAtt::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_AIAtt::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::PB_AIAtt_Status PB_AIAtt::status() const {
  return static_cast< ::PB_AIAtt_Status >(status_);
}
inline void PB_AIAtt::set_status(::PB_AIAtt_Status value) {
  GOOGLE_DCHECK(::PB_AIAtt_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .PB_Vector2i birthCoord = 2;
inline bool PB_AIAtt::has_birthCoord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_AIAtt::set_has_birthCoord() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_AIAtt::clear_has_birthCoord() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_AIAtt::clear_birthCoord() {
  if (birthCoord_ != NULL) birthCoord_->::PB_Vector2i::Clear();
  clear_has_birthCoord();
}
inline const ::PB_Vector2i& PB_AIAtt::birthCoord() const {
  return birthCoord_ != NULL ? *birthCoord_ : *default_instance_->birthCoord_;
}
inline ::PB_Vector2i* PB_AIAtt::mutable_birthCoord() {
  set_has_birthCoord();
  if (birthCoord_ == NULL) birthCoord_ = new ::PB_Vector2i;
  return birthCoord_;
}
inline ::PB_Vector2i* PB_AIAtt::release_birthCoord() {
  clear_has_birthCoord();
  ::PB_Vector2i* temp = birthCoord_;
  birthCoord_ = NULL;
  return temp;
}

// optional int32 moveRadius = 3;
inline bool PB_AIAtt::has_moveRadius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_AIAtt::set_has_moveRadius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_AIAtt::clear_has_moveRadius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_AIAtt::clear_moveRadius() {
  moveRadius_ = 0;
  clear_has_moveRadius();
}
inline ::google::protobuf::int32 PB_AIAtt::moveRadius() const {
  return moveRadius_;
}
inline void PB_AIAtt::set_moveRadius(::google::protobuf::int32 value) {
  set_has_moveRadius();
  moveRadius_ = value;
}

// optional .PB_AIAtt.MoveType moveType = 4;
inline bool PB_AIAtt::has_moveType() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_AIAtt::set_has_moveType() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_AIAtt::clear_has_moveType() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_AIAtt::clear_moveType() {
  moveType_ = 0;
  clear_has_moveType();
}
inline ::PB_AIAtt_MoveType PB_AIAtt::moveType() const {
  return static_cast< ::PB_AIAtt_MoveType >(moveType_);
}
inline void PB_AIAtt::set_moveType(::PB_AIAtt_MoveType value) {
  GOOGLE_DCHECK(::PB_AIAtt_MoveType_IsValid(value));
  set_has_moveType();
  moveType_ = value;
}

// optional int32 followRadius = 5;
inline bool PB_AIAtt::has_followRadius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_AIAtt::set_has_followRadius() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_AIAtt::clear_has_followRadius() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_AIAtt::clear_followRadius() {
  followRadius_ = 0;
  clear_has_followRadius();
}
inline ::google::protobuf::int32 PB_AIAtt::followRadius() const {
  return followRadius_;
}
inline void PB_AIAtt::set_followRadius(::google::protobuf::int32 value) {
  set_has_followRadius();
  followRadius_ = value;
}

// optional int32 searchRadius = 6;
inline bool PB_AIAtt::has_searchRadius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_AIAtt::set_has_searchRadius() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_AIAtt::clear_has_searchRadius() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_AIAtt::clear_searchRadius() {
  searchRadius_ = 0;
  clear_has_searchRadius();
}
inline ::google::protobuf::int32 PB_AIAtt::searchRadius() const {
  return searchRadius_;
}
inline void PB_AIAtt::set_searchRadius(::google::protobuf::int32 value) {
  set_has_searchRadius();
  searchRadius_ = value;
}

// optional .PB_AIAtt.SearchType searchType = 7;
inline bool PB_AIAtt::has_searchType() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_AIAtt::set_has_searchType() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_AIAtt::clear_has_searchType() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_AIAtt::clear_searchType() {
  searchType_ = 0;
  clear_has_searchType();
}
inline ::PB_AIAtt_SearchType PB_AIAtt::searchType() const {
  return static_cast< ::PB_AIAtt_SearchType >(searchType_);
}
inline void PB_AIAtt::set_searchType(::PB_AIAtt_SearchType value) {
  GOOGLE_DCHECK(::PB_AIAtt_SearchType_IsValid(value));
  set_has_searchType();
  searchType_ = value;
}

// optional .PB_AIAtt.FleeType fleeType = 8;
inline bool PB_AIAtt::has_fleeType() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_AIAtt::set_has_fleeType() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_AIAtt::clear_has_fleeType() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_AIAtt::clear_fleeType() {
  fleeType_ = 0;
  clear_has_fleeType();
}
inline ::PB_AIAtt_FleeType PB_AIAtt::fleeType() const {
  return static_cast< ::PB_AIAtt_FleeType >(fleeType_);
}
inline void PB_AIAtt::set_fleeType(::PB_AIAtt_FleeType value) {
  GOOGLE_DCHECK(::PB_AIAtt_FleeType_IsValid(value));
  set_has_fleeType();
  fleeType_ = value;
}

// optional float fleeHP = 9;
inline bool PB_AIAtt::has_fleeHP() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_AIAtt::set_has_fleeHP() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PB_AIAtt::clear_has_fleeHP() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PB_AIAtt::clear_fleeHP() {
  fleeHP_ = 0;
  clear_has_fleeHP();
}
inline float PB_AIAtt::fleeHP() const {
  return fleeHP_;
}
inline void PB_AIAtt::set_fleeHP(float value) {
  set_has_fleeHP();
  fleeHP_ = value;
}

// optional float callPercent = 10;
inline bool PB_AIAtt::has_callPercent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_AIAtt::set_has_callPercent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PB_AIAtt::clear_has_callPercent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PB_AIAtt::clear_callPercent() {
  callPercent_ = 0;
  clear_has_callPercent();
}
inline float PB_AIAtt::callPercent() const {
  return callPercent_;
}
inline void PB_AIAtt::set_callPercent(float value) {
  set_has_callPercent();
  callPercent_ = value;
}

// optional int32 followDelta = 11;
inline bool PB_AIAtt::has_followDelta() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PB_AIAtt::set_has_followDelta() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PB_AIAtt::clear_has_followDelta() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PB_AIAtt::clear_followDelta() {
  followDelta_ = 0;
  clear_has_followDelta();
}
inline ::google::protobuf::int32 PB_AIAtt::followDelta() const {
  return followDelta_;
}
inline void PB_AIAtt::set_followDelta(::google::protobuf::int32 value) {
  set_has_followDelta();
  followDelta_ = value;
}

// optional bool canAttackBack = 12;
inline bool PB_AIAtt::has_canAttackBack() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PB_AIAtt::set_has_canAttackBack() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PB_AIAtt::clear_has_canAttackBack() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PB_AIAtt::clear_canAttackBack() {
  canAttackBack_ = false;
  clear_has_canAttackBack();
}
inline bool PB_AIAtt::canAttackBack() const {
  return canAttackBack_;
}
inline void PB_AIAtt::set_canAttackBack(bool value) {
  set_has_canAttackBack();
  canAttackBack_ = value;
}

// optional int32 moveInterval = 13;
inline bool PB_AIAtt::has_moveInterval() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PB_AIAtt::set_has_moveInterval() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PB_AIAtt::clear_has_moveInterval() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PB_AIAtt::clear_moveInterval() {
  moveInterval_ = 0;
  clear_has_moveInterval();
}
inline ::google::protobuf::int32 PB_AIAtt::moveInterval() const {
  return moveInterval_;
}
inline void PB_AIAtt::set_moveInterval(::google::protobuf::int32 value) {
  set_has_moveInterval();
  moveInterval_ = value;
}

// optional int32 searchInterval = 14;
inline bool PB_AIAtt::has_searchInterval() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PB_AIAtt::set_has_searchInterval() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PB_AIAtt::clear_has_searchInterval() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PB_AIAtt::clear_searchInterval() {
  searchInterval_ = 0;
  clear_has_searchInterval();
}
inline ::google::protobuf::int32 PB_AIAtt::searchInterval() const {
  return searchInterval_;
}
inline void PB_AIAtt::set_searchInterval(::google::protobuf::int32 value) {
  set_has_searchInterval();
  searchInterval_ = value;
}

// optional .PB_AIAtt.AIType aiType = 15;
inline bool PB_AIAtt::has_aiType() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PB_AIAtt::set_has_aiType() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PB_AIAtt::clear_has_aiType() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PB_AIAtt::clear_aiType() {
  aiType_ = 0;
  clear_has_aiType();
}
inline ::PB_AIAtt_AIType PB_AIAtt::aiType() const {
  return static_cast< ::PB_AIAtt_AIType >(aiType_);
}
inline void PB_AIAtt::set_aiType(::PB_AIAtt_AIType value) {
  GOOGLE_DCHECK(::PB_AIAtt_AIType_IsValid(value));
  set_has_aiType();
  aiType_ = value;
}

// repeated int32 arg = 16;
inline int PB_AIAtt::arg_size() const {
  return arg_.size();
}
inline void PB_AIAtt::clear_arg() {
  arg_.Clear();
}
inline ::google::protobuf::int32 PB_AIAtt::arg(int index) const {
  return arg_.Get(index);
}
inline void PB_AIAtt::set_arg(int index, ::google::protobuf::int32 value) {
  arg_.Set(index, value);
}
inline void PB_AIAtt::add_arg(::google::protobuf::int32 value) {
  arg_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_AIAtt::arg() const {
  return arg_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_AIAtt::mutable_arg() {
  return &arg_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_AIAtt_Status>() {
  return ::PB_AIAtt_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_AIAtt_MoveType>() {
  return ::PB_AIAtt_MoveType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_AIAtt_SearchType>() {
  return ::PB_AIAtt_SearchType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_AIAtt_FleeType>() {
  return ::PB_AIAtt_FleeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_AIAtt_AIType>() {
  return ::PB_AIAtt_AIType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AIInfo_2eproto__INCLUDED

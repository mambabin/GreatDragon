// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Fashion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FashionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FashionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FashionInfo_ColorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PB_FashionAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_FashionAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllFashions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllFashions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Fashion_2eproto() {
  protobuf_AddDesc_Fashion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Fashion.proto");
  GOOGLE_CHECK(file != NULL);
  FashionInfo_descriptor_ = file->message_type(0);
  static const int FashionInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, professionType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, colorType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, effect1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, effect2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, godScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, lovePoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, pvpScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, factionContribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, helpNode_),
  };
  FashionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FashionInfo_descriptor_,
      FashionInfo::default_instance_,
      FashionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FashionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FashionInfo));
  FashionInfo_ColorType_descriptor_ = FashionInfo_descriptor_->enum_type(0);
  PB_FashionAsset_descriptor_ = file->message_type(1);
  static const int PB_FashionAsset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FashionAsset, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FashionAsset, runes_),
  };
  PB_FashionAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_FashionAsset_descriptor_,
      PB_FashionAsset::default_instance_,
      PB_FashionAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FashionAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FashionAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_FashionAsset));
  AllFashions_descriptor_ = file->message_type(2);
  static const int AllFashions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFashions, fashions_),
  };
  AllFashions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllFashions_descriptor_,
      AllFashions::default_instance_,
      AllFashions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFashions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFashions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllFashions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Fashion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FashionInfo_descriptor_, &FashionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_FashionAsset_descriptor_, &PB_FashionAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllFashions_descriptor_, &AllFashions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Fashion_2eproto() {
  delete FashionInfo::default_instance_;
  delete FashionInfo_reflection_;
  delete PB_FashionAsset::default_instance_;
  delete PB_FashionAsset_reflection_;
  delete AllFashions::default_instance_;
  delete AllFashions_reflection_;
}

void protobuf_AddDesc_Fashion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rFashion.proto\"\372\002\n\013FashionInfo\022\n\n\002id\030\001 "
    "\001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005model\030\003 \001(\005\022\017\n\007pict"
    "ure\030\004 \001(\005\022\014\n\004desc\030\005 \001(\t\022\026\n\016professionTyp"
    "e\030\006 \001(\005\022\013\n\003rmb\030\007 \001(\005\022)\n\tcolorType\030\010 \001(\0162"
    "\026.FashionInfo.ColorType\022\013\n\003att\030\t \003(\005\022\017\n\007"
    "effect1\030\n \001(\005\022\017\n\007effect2\030\013 \001(\005\022\020\n\010godSco"
    "re\030\014 \001(\005\022\021\n\tlovePoint\030\r \001(\005\022\020\n\010pvpScore\030"
    "\016 \001(\005\022\031\n\021factionContribute\030\017 \001(\005\022\020\n\010help"
    "Node\030\020 \001(\005\"@\n\tColorType\022\t\n\005WHITE\020\000\022\t\n\005GR"
    "EEN\020\001\022\010\n\004BLUE\020\002\022\n\n\006YELLOW\020\003\022\007\n\003RED\020\004\"+\n\017"
    "PB_FashionAsset\022\t\n\001v\030\001 \001(\005\022\r\n\005runes\030\002 \003("
    "\005\"-\n\013AllFashions\022\036\n\010fashions\030\001 \003(\0132\014.Fas"
    "hionInfo", 488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Fashion.proto", &protobuf_RegisterTypes);
  FashionInfo::default_instance_ = new FashionInfo();
  PB_FashionAsset::default_instance_ = new PB_FashionAsset();
  AllFashions::default_instance_ = new AllFashions();
  FashionInfo::default_instance_->InitAsDefaultInstance();
  PB_FashionAsset::default_instance_->InitAsDefaultInstance();
  AllFashions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Fashion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Fashion_2eproto {
  StaticDescriptorInitializer_Fashion_2eproto() {
    protobuf_AddDesc_Fashion_2eproto();
  }
} static_descriptor_initializer_Fashion_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* FashionInfo_ColorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FashionInfo_ColorType_descriptor_;
}
bool FashionInfo_ColorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FashionInfo_ColorType FashionInfo::WHITE;
const FashionInfo_ColorType FashionInfo::GREEN;
const FashionInfo_ColorType FashionInfo::BLUE;
const FashionInfo_ColorType FashionInfo::YELLOW;
const FashionInfo_ColorType FashionInfo::RED;
const FashionInfo_ColorType FashionInfo::ColorType_MIN;
const FashionInfo_ColorType FashionInfo::ColorType_MAX;
const int FashionInfo::ColorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FashionInfo::kIdFieldNumber;
const int FashionInfo::kNameFieldNumber;
const int FashionInfo::kModelFieldNumber;
const int FashionInfo::kPictureFieldNumber;
const int FashionInfo::kDescFieldNumber;
const int FashionInfo::kProfessionTypeFieldNumber;
const int FashionInfo::kRmbFieldNumber;
const int FashionInfo::kColorTypeFieldNumber;
const int FashionInfo::kAttFieldNumber;
const int FashionInfo::kEffect1FieldNumber;
const int FashionInfo::kEffect2FieldNumber;
const int FashionInfo::kGodScoreFieldNumber;
const int FashionInfo::kLovePointFieldNumber;
const int FashionInfo::kPvpScoreFieldNumber;
const int FashionInfo::kFactionContributeFieldNumber;
const int FashionInfo::kHelpNodeFieldNumber;
#endif  // !_MSC_VER

FashionInfo::FashionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FashionInfo::InitAsDefaultInstance() {
}

FashionInfo::FashionInfo(const FashionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FashionInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = 0;
  picture_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionType_ = 0;
  rmb_ = 0;
  colorType_ = 0;
  effect1_ = 0;
  effect2_ = 0;
  godScore_ = 0;
  lovePoint_ = 0;
  pvpScore_ = 0;
  factionContribute_ = 0;
  helpNode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FashionInfo::~FashionInfo() {
  SharedDtor();
}

void FashionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void FashionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FashionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FashionInfo_descriptor_;
}

const FashionInfo& FashionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fashion_2eproto();  return *default_instance_;
}

FashionInfo* FashionInfo::default_instance_ = NULL;

FashionInfo* FashionInfo::New() const {
  return new FashionInfo;
}

void FashionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    model_ = 0;
    picture_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    professionType_ = 0;
    rmb_ = 0;
    colorType_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    effect1_ = 0;
    effect2_ = 0;
    godScore_ = 0;
    lovePoint_ = 0;
    pvpScore_ = 0;
    factionContribute_ = 0;
    helpNode_ = 0;
  }
  att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FashionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_model;
        break;
      }
      
      // optional int32 model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_picture;
        break;
      }
      
      // optional int32 picture = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_)));
          set_has_picture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }
      
      // optional string desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_professionType;
        break;
      }
      
      // optional int32 professionType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionType_)));
          set_has_professionType();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_colorType;
        break;
      }
      
      // optional .FashionInfo.ColorType colorType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FashionInfo_ColorType_IsValid(value)) {
            set_colorType(static_cast< ::FashionInfo_ColorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_att;
        break;
      }
      
      // repeated int32 att = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_att;
        if (input->ExpectTag(80)) goto parse_effect1;
        break;
      }
      
      // optional int32 effect1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect1_)));
          set_has_effect1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_effect2;
        break;
      }
      
      // optional int32 effect2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect2_)));
          set_has_effect2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_godScore;
        break;
      }
      
      // optional int32 godScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godScore_)));
          set_has_godScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lovePoint;
        break;
      }
      
      // optional int32 lovePoint = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lovePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lovePoint_)));
          set_has_lovePoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pvpScore;
        break;
      }
      
      // optional int32 pvpScore = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpScore_)));
          set_has_pvpScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_factionContribute;
        break;
      }
      
      // optional int32 factionContribute = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factionContribute_)));
          set_has_factionContribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_helpNode;
        break;
      }
      
      // optional int32 helpNode = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpNode_)));
          set_has_helpNode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FashionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model(), output);
  }
  
  // optional int32 picture = 4;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->picture(), output);
  }
  
  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc(), output);
  }
  
  // optional int32 professionType = 6;
  if (has_professionType()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->professionType(), output);
  }
  
  // optional int32 rmb = 7;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rmb(), output);
  }
  
  // optional .FashionInfo.ColorType colorType = 8;
  if (has_colorType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->colorType(), output);
  }
  
  // repeated int32 att = 9;
  for (int i = 0; i < this->att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->att(i), output);
  }
  
  // optional int32 effect1 = 10;
  if (has_effect1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->effect1(), output);
  }
  
  // optional int32 effect2 = 11;
  if (has_effect2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->effect2(), output);
  }
  
  // optional int32 godScore = 12;
  if (has_godScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->godScore(), output);
  }
  
  // optional int32 lovePoint = 13;
  if (has_lovePoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lovePoint(), output);
  }
  
  // optional int32 pvpScore = 14;
  if (has_pvpScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pvpScore(), output);
  }
  
  // optional int32 factionContribute = 15;
  if (has_factionContribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->factionContribute(), output);
  }
  
  // optional int32 helpNode = 16;
  if (has_helpNode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->helpNode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FashionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 model = 3;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model(), target);
  }
  
  // optional int32 picture = 4;
  if (has_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->picture(), target);
  }
  
  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }
  
  // optional int32 professionType = 6;
  if (has_professionType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->professionType(), target);
  }
  
  // optional int32 rmb = 7;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rmb(), target);
  }
  
  // optional .FashionInfo.ColorType colorType = 8;
  if (has_colorType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->colorType(), target);
  }
  
  // repeated int32 att = 9;
  for (int i = 0; i < this->att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->att(i), target);
  }
  
  // optional int32 effect1 = 10;
  if (has_effect1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->effect1(), target);
  }
  
  // optional int32 effect2 = 11;
  if (has_effect2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->effect2(), target);
  }
  
  // optional int32 godScore = 12;
  if (has_godScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->godScore(), target);
  }
  
  // optional int32 lovePoint = 13;
  if (has_lovePoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lovePoint(), target);
  }
  
  // optional int32 pvpScore = 14;
  if (has_pvpScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pvpScore(), target);
  }
  
  // optional int32 factionContribute = 15;
  if (has_factionContribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->factionContribute(), target);
  }
  
  // optional int32 helpNode = 16;
  if (has_helpNode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->helpNode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FashionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model());
    }
    
    // optional int32 picture = 4;
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->picture());
    }
    
    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 professionType = 6;
    if (has_professionType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionType());
    }
    
    // optional int32 rmb = 7;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional .FashionInfo.ColorType colorType = 8;
    if (has_colorType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->colorType());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 effect1 = 10;
    if (has_effect1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect1());
    }
    
    // optional int32 effect2 = 11;
    if (has_effect2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect2());
    }
    
    // optional int32 godScore = 12;
    if (has_godScore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godScore());
    }
    
    // optional int32 lovePoint = 13;
    if (has_lovePoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lovePoint());
    }
    
    // optional int32 pvpScore = 14;
    if (has_pvpScore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpScore());
    }
    
    // optional int32 factionContribute = 15;
    if (has_factionContribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factionContribute());
    }
    
    // optional int32 helpNode = 16;
    if (has_helpNode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpNode());
    }
    
  }
  // repeated int32 att = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->att(i));
    }
    total_size += 1 * this->att_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FashionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FashionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FashionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FashionInfo::MergeFrom(const FashionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  att_.MergeFrom(from.att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_picture()) {
      set_picture(from.picture());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_professionType()) {
      set_professionType(from.professionType());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_colorType()) {
      set_colorType(from.colorType());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_effect1()) {
      set_effect1(from.effect1());
    }
    if (from.has_effect2()) {
      set_effect2(from.effect2());
    }
    if (from.has_godScore()) {
      set_godScore(from.godScore());
    }
    if (from.has_lovePoint()) {
      set_lovePoint(from.lovePoint());
    }
    if (from.has_pvpScore()) {
      set_pvpScore(from.pvpScore());
    }
    if (from.has_factionContribute()) {
      set_factionContribute(from.factionContribute());
    }
    if (from.has_helpNode()) {
      set_helpNode(from.helpNode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FashionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FashionInfo::CopyFrom(const FashionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FashionInfo::IsInitialized() const {
  
  return true;
}

void FashionInfo::Swap(FashionInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(model_, other->model_);
    std::swap(picture_, other->picture_);
    std::swap(desc_, other->desc_);
    std::swap(professionType_, other->professionType_);
    std::swap(rmb_, other->rmb_);
    std::swap(colorType_, other->colorType_);
    att_.Swap(&other->att_);
    std::swap(effect1_, other->effect1_);
    std::swap(effect2_, other->effect2_);
    std::swap(godScore_, other->godScore_);
    std::swap(lovePoint_, other->lovePoint_);
    std::swap(pvpScore_, other->pvpScore_);
    std::swap(factionContribute_, other->factionContribute_);
    std::swap(helpNode_, other->helpNode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FashionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FashionInfo_descriptor_;
  metadata.reflection = FashionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_FashionAsset::kVFieldNumber;
const int PB_FashionAsset::kRunesFieldNumber;
#endif  // !_MSC_VER

PB_FashionAsset::PB_FashionAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_FashionAsset::InitAsDefaultInstance() {
}

PB_FashionAsset::PB_FashionAsset(const PB_FashionAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_FashionAsset::SharedCtor() {
  _cached_size_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_FashionAsset::~PB_FashionAsset() {
  SharedDtor();
}

void PB_FashionAsset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_FashionAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_FashionAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_FashionAsset_descriptor_;
}

const PB_FashionAsset& PB_FashionAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fashion_2eproto();  return *default_instance_;
}

PB_FashionAsset* PB_FashionAsset::default_instance_ = NULL;

PB_FashionAsset* PB_FashionAsset::New() const {
  return new PB_FashionAsset;
}

void PB_FashionAsset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_ = 0;
  }
  runes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_FashionAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 v = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_runes;
        break;
      }
      
      // repeated int32 runes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_runes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_runes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_runes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_runes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_FashionAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 v = 1;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v(), output);
  }
  
  // repeated int32 runes = 2;
  for (int i = 0; i < this->runes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->runes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_FashionAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 v = 1;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v(), target);
  }
  
  // repeated int32 runes = 2;
  for (int i = 0; i < this->runes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->runes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_FashionAsset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 v = 1;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }
    
  }
  // repeated int32 runes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->runes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->runes(i));
    }
    total_size += 1 * this->runes_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_FashionAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_FashionAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_FashionAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_FashionAsset::MergeFrom(const PB_FashionAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  runes_.MergeFrom(from.runes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_FashionAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_FashionAsset::CopyFrom(const PB_FashionAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_FashionAsset::IsInitialized() const {
  
  return true;
}

void PB_FashionAsset::Swap(PB_FashionAsset* other) {
  if (other != this) {
    std::swap(v_, other->v_);
    runes_.Swap(&other->runes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_FashionAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_FashionAsset_descriptor_;
  metadata.reflection = PB_FashionAsset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllFashions::kFashionsFieldNumber;
#endif  // !_MSC_VER

AllFashions::AllFashions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllFashions::InitAsDefaultInstance() {
}

AllFashions::AllFashions(const AllFashions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllFashions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllFashions::~AllFashions() {
  SharedDtor();
}

void AllFashions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllFashions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllFashions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllFashions_descriptor_;
}

const AllFashions& AllFashions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Fashion_2eproto();  return *default_instance_;
}

AllFashions* AllFashions::default_instance_ = NULL;

AllFashions* AllFashions::New() const {
  return new AllFashions;
}

void AllFashions::Clear() {
  fashions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllFashions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FashionInfo fashions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fashions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllFashions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FashionInfo fashions = 1;
  for (int i = 0; i < this->fashions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fashions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllFashions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FashionInfo fashions = 1;
  for (int i = 0; i < this->fashions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fashions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllFashions::ByteSize() const {
  int total_size = 0;
  
  // repeated .FashionInfo fashions = 1;
  total_size += 1 * this->fashions_size();
  for (int i = 0; i < this->fashions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllFashions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllFashions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllFashions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllFashions::MergeFrom(const AllFashions& from) {
  GOOGLE_CHECK_NE(&from, this);
  fashions_.MergeFrom(from.fashions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllFashions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllFashions::CopyFrom(const AllFashions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllFashions::IsInitialized() const {
  
  return true;
}

void AllFashions::Swap(AllFashions* other) {
  if (other != this) {
    fashions_.Swap(&other->fashions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllFashions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllFashions_descriptor_;
  metadata.reflection = AllFashions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

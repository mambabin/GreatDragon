// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TransformInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TransformInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransformInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllTransforms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllTransforms_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TransformInfo_2eproto() {
  protobuf_AddDesc_TransformInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TransformInfo.proto");
  GOOGLE_CHECK(file != NULL);
  TransformInfo_descriptor_ = file->message_type(0);
  static const int TransformInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, materials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, atts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, pic_),
  };
  TransformInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformInfo_descriptor_,
      TransformInfo::default_instance_,
      TransformInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformInfo));
  TransformInfo_Type_descriptor_ = TransformInfo_descriptor_->enum_type(0);
  AllTransforms_descriptor_ = file->message_type(1);
  static const int AllTransforms_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTransforms, transforms_),
  };
  AllTransforms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllTransforms_descriptor_,
      AllTransforms::default_instance_,
      AllTransforms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTransforms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTransforms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllTransforms));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TransformInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformInfo_descriptor_, &TransformInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllTransforms_descriptor_, &AllTransforms::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TransformInfo_2eproto() {
  delete TransformInfo::default_instance_;
  delete TransformInfo_reflection_;
  delete AllTransforms::default_instance_;
  delete AllTransforms_reflection_;
}

void protobuf_AddDesc_TransformInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProfessionInfo_2eproto();
  ::protobuf_AddDesc_FightInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023TransformInfo.proto\032\024ProfessionInfo.pr"
    "oto\032\017FightInfo.proto\"\236\002\n\rTransformInfo\022\n"
    "\n\002id\030\001 \001(\005\022\014\n\004desc\030\002 \001(\t\022\r\n\005model\030\003 \003(\005\022"
    "\017\n\007quality\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\021\n\tmater"
    "ials\030\006 \003(\005\022\r\n\005count\030\007 \003(\005\022\014\n\004atts\030\010 \003(\005\022"
    "\r\n\005skill\030\t \003(\005\022\016\n\006status\030\n \003(\005\022!\n\004type\030\013"
    " \001(\0162\023.TransformInfo.Type\022\014\n\004name\030\014 \001(\t\022"
    "\013\n\003pic\030\r \001(\005\"7\n\004Type\022\013\n\007BALANCE\020\000\022\n\n\006ATT"
    "ACK\020\001\022\n\n\006DEFEND\020\002\022\n\n\006ASSIST\020\003\"3\n\rAllTran"
    "sforms\022\"\n\ntransforms\030\001 \003(\0132\016.TransformIn"
    "fo", 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TransformInfo.proto", &protobuf_RegisterTypes);
  TransformInfo::default_instance_ = new TransformInfo();
  AllTransforms::default_instance_ = new AllTransforms();
  TransformInfo::default_instance_->InitAsDefaultInstance();
  AllTransforms::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TransformInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TransformInfo_2eproto {
  StaticDescriptorInitializer_TransformInfo_2eproto() {
    protobuf_AddDesc_TransformInfo_2eproto();
  }
} static_descriptor_initializer_TransformInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransformInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformInfo_Type_descriptor_;
}
bool TransformInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransformInfo_Type TransformInfo::BALANCE;
const TransformInfo_Type TransformInfo::ATTACK;
const TransformInfo_Type TransformInfo::DEFEND;
const TransformInfo_Type TransformInfo::ASSIST;
const TransformInfo_Type TransformInfo::Type_MIN;
const TransformInfo_Type TransformInfo::Type_MAX;
const int TransformInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransformInfo::kIdFieldNumber;
const int TransformInfo::kDescFieldNumber;
const int TransformInfo::kModelFieldNumber;
const int TransformInfo::kQualityFieldNumber;
const int TransformInfo::kLevelFieldNumber;
const int TransformInfo::kMaterialsFieldNumber;
const int TransformInfo::kCountFieldNumber;
const int TransformInfo::kAttsFieldNumber;
const int TransformInfo::kSkillFieldNumber;
const int TransformInfo::kStatusFieldNumber;
const int TransformInfo::kTypeFieldNumber;
const int TransformInfo::kNameFieldNumber;
const int TransformInfo::kPicFieldNumber;
#endif  // !_MSC_VER

TransformInfo::TransformInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransformInfo::InitAsDefaultInstance() {
}

TransformInfo::TransformInfo(const TransformInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransformInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  level_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformInfo::~TransformInfo() {
  SharedDtor();
}

void TransformInfo::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TransformInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformInfo_descriptor_;
}

const TransformInfo& TransformInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TransformInfo_2eproto();  return *default_instance_;
}

TransformInfo* TransformInfo::default_instance_ = NULL;

TransformInfo* TransformInfo::New() const {
  return new TransformInfo;
}

void TransformInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    quality_ = 0;
    level_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    pic_ = 0;
  }
  model_.Clear();
  materials_.Clear();
  count_.Clear();
  atts_.Clear();
  skill_.Clear();
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }
      
      // optional string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_model;
        break;
      }
      
      // repeated int32 model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_model())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_model())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_model;
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_materials;
        break;
      }
      
      // repeated int32 materials = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_materials())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_materials())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_materials;
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }
      
      // repeated int32 count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count;
        if (input->ExpectTag(64)) goto parse_atts;
        break;
      }
      
      // repeated int32 atts = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_atts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_atts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_atts;
        if (input->ExpectTag(72)) goto parse_skill;
        break;
      }
      
      // repeated int32 skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_skill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skill;
        if (input->ExpectTag(80)) goto parse_status;
        break;
      }
      
      // repeated int32 status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_status;
        if (input->ExpectTag(88)) goto parse_type;
        break;
      }
      
      // optional .TransformInfo.Type type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TransformInfo_Type_IsValid(value)) {
            set_type(static_cast< ::TransformInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }
      
      // optional string name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pic;
        break;
      }
      
      // optional int32 pic = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }
  
  // repeated int32 model = 3;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->model(i), output);
  }
  
  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // repeated int32 materials = 6;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->materials(i), output);
  }
  
  // repeated int32 count = 7;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->count(i), output);
  }
  
  // repeated int32 atts = 8;
  for (int i = 0; i < this->atts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->atts(i), output);
  }
  
  // repeated int32 skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->skill(i), output);
  }
  
  // repeated int32 status = 10;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->status(i), output);
  }
  
  // optional .TransformInfo.Type type = 11;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->type(), output);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->name(), output);
  }
  
  // optional int32 pic = 13;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pic(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransformInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }
  
  // repeated int32 model = 3;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->model(i), target);
  }
  
  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // repeated int32 materials = 6;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->materials(i), target);
  }
  
  // repeated int32 count = 7;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->count(i), target);
  }
  
  // repeated int32 atts = 8;
  for (int i = 0; i < this->atts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->atts(i), target);
  }
  
  // repeated int32 skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->skill(i), target);
  }
  
  // repeated int32 status = 10;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->status(i), target);
  }
  
  // optional .TransformInfo.Type type = 11;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->type(), target);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }
  
  // optional int32 pic = 13;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pic(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransformInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .TransformInfo.Type type = 11;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 pic = 13;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }
    
  }
  // repeated int32 model = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->model_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->model(i));
    }
    total_size += 1 * this->model_size() + data_size;
  }
  
  // repeated int32 materials = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->materials_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->materials(i));
    }
    total_size += 1 * this->materials_size() + data_size;
  }
  
  // repeated int32 count = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->count(i));
    }
    total_size += 1 * this->count_size() + data_size;
  }
  
  // repeated int32 atts = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->atts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->atts(i));
    }
    total_size += 1 * this->atts_size() + data_size;
  }
  
  // repeated int32 skill = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill(i));
    }
    total_size += 1 * this->skill_size() + data_size;
  }
  
  // repeated int32 status = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->status(i));
    }
    total_size += 1 * this->status_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformInfo::MergeFrom(const TransformInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  materials_.MergeFrom(from.materials_);
  count_.MergeFrom(from.count_);
  atts_.MergeFrom(from.atts_);
  skill_.MergeFrom(from.skill_);
  status_.MergeFrom(from.status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformInfo::CopyFrom(const TransformInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformInfo::IsInitialized() const {
  
  return true;
}

void TransformInfo::Swap(TransformInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    model_.Swap(&other->model_);
    std::swap(quality_, other->quality_);
    std::swap(level_, other->level_);
    materials_.Swap(&other->materials_);
    count_.Swap(&other->count_);
    atts_.Swap(&other->atts_);
    skill_.Swap(&other->skill_);
    status_.Swap(&other->status_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformInfo_descriptor_;
  metadata.reflection = TransformInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllTransforms::kTransformsFieldNumber;
#endif  // !_MSC_VER

AllTransforms::AllTransforms()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllTransforms::InitAsDefaultInstance() {
}

AllTransforms::AllTransforms(const AllTransforms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllTransforms::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllTransforms::~AllTransforms() {
  SharedDtor();
}

void AllTransforms::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllTransforms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllTransforms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllTransforms_descriptor_;
}

const AllTransforms& AllTransforms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TransformInfo_2eproto();  return *default_instance_;
}

AllTransforms* AllTransforms::default_instance_ = NULL;

AllTransforms* AllTransforms::New() const {
  return new AllTransforms;
}

void AllTransforms::Clear() {
  transforms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllTransforms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TransformInfo transforms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transforms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transforms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_transforms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllTransforms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TransformInfo transforms = 1;
  for (int i = 0; i < this->transforms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transforms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllTransforms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TransformInfo transforms = 1;
  for (int i = 0; i < this->transforms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transforms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllTransforms::ByteSize() const {
  int total_size = 0;
  
  // repeated .TransformInfo transforms = 1;
  total_size += 1 * this->transforms_size();
  for (int i = 0; i < this->transforms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transforms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllTransforms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllTransforms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllTransforms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllTransforms::MergeFrom(const AllTransforms& from) {
  GOOGLE_CHECK_NE(&from, this);
  transforms_.MergeFrom(from.transforms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllTransforms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTransforms::CopyFrom(const AllTransforms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTransforms::IsInitialized() const {
  
  return true;
}

void AllTransforms::Swap(AllTransforms* other) {
  if (other != this) {
    transforms_.Swap(&other->transforms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllTransforms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllTransforms_descriptor_;
  metadata.reflection = AllTransforms_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NetProto_ClientException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ClientException_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ClientException_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Heartbeat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Heartbeat_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Login_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Login_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_LoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_LoginResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_LoginResult_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Logout_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Logout_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SelectRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SelectRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SelectRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_CreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_CreateRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_CreateRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ServerTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ServerTime_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RoleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RoleList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RoleList_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DeleteRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DeleteRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DeleteRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ReLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ReLogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ReLogin_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ReLoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ReLoginResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ReLoginResult_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Rank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Rank_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Rank_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SetUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SetUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SetUp_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Register_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Register_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GetKeyGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GetKeyGift_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GetKeyGift_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_StatisticsUIBtn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_StatisticsUIBtn_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StatisticsUIBtn_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_StatisticsGuide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_StatisticsGuide_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StatisticsGuide_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_LoginLaterTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_LoginLaterTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_LoginLaterTime_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_TencentBuyGoodsUrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_TencentBuyGoodsUrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_TencentBuyGoodsUrl_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_LoginURL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_LoginURL_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_LoginURL_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RechargeParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RechargeParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RechargeParam_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddPlayers_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddPlayers_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_LoadScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_LoadScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_LoadScene_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_LoadScene_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DoLoadScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DoLoadScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DoLoadScene_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_EndLoadScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_EndLoadScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EndLoadScene_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddNPCs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddNPCs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddNPCs_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ClearRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ClearRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ClearRoom_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_OpenRoomBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_OpenRoomBox_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_OpenRoomBox_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_OpenRoomBox_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BeginWaitRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BeginWaitRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BeginWaitRoom_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_EndWaitRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_EndWaitRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EndWaitRoom_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GenNPCs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GenNPCs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GenNPCs_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ResetEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ResetEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ResetEvent_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_QuickFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_QuickFight_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_QuickFight_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Win_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Win_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Win_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Lose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Lose_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Lose_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Timeout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Timeout_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Timeout_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BeginWaitPVP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BeginWaitPVP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BeginWaitPVP_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BeginWaitPVP_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_EndWaitPVP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_EndWaitPVP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EndWaitPVP_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EndWaitPVP_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Lottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Lottery_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Lottery_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GetGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GetGift_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GetGift_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SingleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SingleRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SingleRecord_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_EndLoadModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_EndLoadModel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EndLoadModel_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RoomWaitCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RoomWaitCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RoomWaitCount_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PVPWaitCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PVPWaitCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PVPWaitCount_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PVPWaitCount_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_CancelWaitRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_CancelWaitRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_CancelWaitRoom_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_CancelWaitPVP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_CancelWaitPVP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_CancelWaitPVP_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GetRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GetRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GetRes_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Invest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Invest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Invest_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_InvestAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_InvestAward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_InvestAward_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_InvestAwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_InvestAwardInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_InvestAwardInfo_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SetDayEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SetDayEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SetDayEvent_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SetFixedEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SetFixedEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SetFixedEvent_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Info_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Error_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GodAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GodAward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GodAward_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_CreateRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_CreateRoom_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_JoinRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_JoinRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_JoinRoom_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_LeaveRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_LeaveRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_LeaveRoom_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DestroyRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DestroyRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DestroyRoom_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RoomList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RoomList_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_EvictRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_EvictRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EvictRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_InviteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_InviteFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_InviteFriend_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BeginMultiRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BeginMultiRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BeginMultiRoom_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ResetCheckPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ResetCheckPoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ResetCheckPoint_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GenPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GenPet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GenPet_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_OpenObstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_OpenObstacle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_OpenObstacle_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RegistDeviceServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RegistDeviceServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RegistDeviceServer_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_StartLoad1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_StartLoad1_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StartLoad1_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_EndLoad1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_EndLoad1_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EndLoad1_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_StartLoad2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_StartLoad2_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StartLoad2_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_EndLoad2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_EndLoad2_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EndLoad2_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BeginFighting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BeginFighting_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BeginFighting_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DelNPCs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DelNPCs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DelNPCs_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_WorldBossCurRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_WorldBossCurRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_WorldBossCurRank_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionWarCurRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionWarCurRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionWarCurRank_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionWarPrevWinner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionWarPrevWinner_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionWarPrevWinner_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GetMonthCardAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GetMonthCardAward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GetMonthCardAward_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ExchangeGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ExchangeGoods_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ExchangeGoods_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BuyMonthCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BuyMonthCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BuyMonthCard_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UseLuckyCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UseLuckyCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UseLuckyCard_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BIActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BIActive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BIActive_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Move_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Move_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Move_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Wear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Wear_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Wear_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Unwear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Unwear_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Unwear_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Attack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Attack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Attack_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Attack_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DoAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DoAttack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DoAttack_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DoAttack_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SetPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SetPos_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SetPos_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Die_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Die_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Die_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Die_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Revive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Revive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Revive_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Revive_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Revive_Way_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyExp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyExp_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PickItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PickItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PickItem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_LevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_LevelUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_LevelUp_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyMoney_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyMoney_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GetItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GetItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GetItem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_QueryPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_QueryPlayer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_QueryPlayer_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PlayerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PlayerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PlayerStatus_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PlayerStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddFriend_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DelFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DelFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DelFriend_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyHP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyHP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyHP_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyMana_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyMana_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyMana_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyFaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyFaction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyFaction_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyFaction_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyMaxHP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyMaxHP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyMaxHP_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RequestPK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RequestPK_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RequestPK_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ApplyPK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ApplyPK_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ApplyPK_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Strong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Strong_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Strong_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Strong_Pos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Strong_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ClearStrong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ClearStrong_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ClearStrong_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ClearStrong_Pos_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Transform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Transform_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Transform_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Transform_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Mount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Mount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Mount_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Mount_Pos_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_TalkTo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_TalkTo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_TalkTo_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Recover_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Recover_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Recover_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddBloodNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddBloodNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddBloodNode_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddBloodNode_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddBloodEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddBloodEffect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddBloodEffect_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddBloodEffect_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Explore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Explore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Explore_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UnlockBlood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UnlockBlood_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UnlockBlood_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UpdatePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UpdatePos_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UpdatePos_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SayHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SayHello_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SayHello_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_CompleteGuide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_CompleteGuide_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_CompleteGuide_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Arrange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Arrange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Arrange_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_IgnorePK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_IgnorePK_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_IgnorePK_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyRMB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyRMB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyRMB_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifySoulJade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifySoulJade_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifySoulJade_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifySoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifySoul_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifySoul_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyHonor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyHonor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyHonor_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyDurability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyDurability_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyDurability_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifySoulStone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifySoulStone_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifySoulStone_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyPKScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyPKScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyPKScore_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DelItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DelItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DelItem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyVIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyVIP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyVIP_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RandomGodTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RandomGodTarget_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RandomGodTarget_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Inspire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Inspire_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Inspire_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Inspire_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Inspire_Dest_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RequestGodTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RequestGodTarget_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RequestGodTarget_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyGodScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyGodScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyGodScore_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GodRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GodRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GodRank_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GetFashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GetFashion_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GetFashion_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SyncAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SyncAtt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SyncAtt_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifySubRMB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifySubRMB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifySubRMB_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GenEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GenEquip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GenEquip_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GenGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GenGem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GenGem_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GenGem_Way_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UnlockHole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UnlockHole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UnlockHole_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UnlockHole_Pos_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UnmountGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UnmountGem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UnmountGem_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UnmountGem_Pos_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_EnhanceDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_EnhanceDelta_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EnhanceDelta_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EnhanceDelta_Pos_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Enhance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Enhance_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Enhance_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Enhance_Pos_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Inherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Inherit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Inherit_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Inherit_Pos_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_StrongBaseWing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_StrongBaseWing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StrongBaseWing_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BuyWing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BuyWing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BuyWing_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_WearWing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_WearWing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_WearWing_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GetWing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GetWing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GetWing_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BuyFashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BuyFashion_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BuyFashion_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_MakeFashionHole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_MakeFashionHole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_MakeFashionHole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FashionInlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FashionInlay_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FashionInlay_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FashionUnInlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FashionUnInlay_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FashionUnInlay_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ServerLimitItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ServerLimitItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ServerLimitItem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FriendsLove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FriendsLove_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FriendsLove_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ChangePartner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ChangePartner_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ChangePartner_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddFansLove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddFansLove_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddFansLove_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyLovePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyLovePoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyLovePoint_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BuyDurability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BuyDurability_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BuyDurability_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_LoginObtRMB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_LoginObtRMB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_LoginObtRMB_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UnwearWing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UnwearWing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UnwearWing_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GetEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GetEquip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GetEquip_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ResetCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ResetCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ResetCount_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ResetCount_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GodPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GodPlayer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GodPlayer_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GodRandomPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GodRandomPlayer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GodRandomPlayer_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GodRecords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GodRecords_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GodRecords_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GodPanel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GodPanel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GodPanel_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SelectGodRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SelectGodRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SelectGodRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SetSpecial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SetSpecial_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SetSpecial_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ResolveEquips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ResolveEquips_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ResolveEquips_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyPKScoreActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyPKScoreActive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyPKScoreActive_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyRMBActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyRMBActive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyRMBActive_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DropItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DropItem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SellGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SellGoods_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SellGoods_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Luck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Luck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Luck_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GrabRedEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GrabRedEnvelope_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GrabRedEnvelope_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_CatGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_CatGift_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_CatGift_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GroupPurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GroupPurchase_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GroupPurchase_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Rides_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Rides_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Rides_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RidesTrain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RidesTrain_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RidesTrain_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GenRides_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GenRides_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GenRides_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GodShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GodShip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GodShip_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Swallow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Swallow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Swallow_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GodPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GodPackage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GodPackage_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_WearGodShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_WearGodShip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_WearGodShip_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UnWearGodShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UnWearGodShip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UnWearGodShip_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ArrangeGodShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ArrangeGodShip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ArrangeGodShip_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RidesUP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RidesUP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RidesUP_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RidesInherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RidesInherit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RidesInherit_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SingleGodShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SingleGodShip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SingleGodShip_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RidesLockAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RidesLockAtt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RidesLockAtt_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RidesConfirmTrain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RidesConfirmTrain_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RidesConfirmTrain_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RidesUnLockAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RidesUnLockAtt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RidesUnLockAtt_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddStatus_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddStatus_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Hit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Hit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Hit_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Hit_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_StatusEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_StatusEffect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StatusEffect_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StatusEffect_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StatusEffect_Effect_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_StaticOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_StaticOver_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StaticOver_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StaticOver_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Standup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Standup_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Standup_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Standup_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SkillLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SkillLevelUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SkillLevelUp_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ClearSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ClearSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ClearSkill_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DestroySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DestroySkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DestroySkill_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddGoods_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddGoods_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddGoods_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddEquipments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddEquipments_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddEquipments_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddEquipments_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ShiftItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ShiftItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ShiftItem_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ShiftItem_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_QueryItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_QueryItemInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_QueryItemInfo_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_QueryItemInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BuyItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BuyItem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SellItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SellItem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Repair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Repair_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Repair_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UseGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UseGoods_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UseGoods_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UnlockPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UnlockPackage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UnlockPackage_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RecoverDurability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RecoverDurability_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RecoverDurability_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddDesignation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddDesignation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddDesignation_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DelDesignation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DelDesignation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DelDesignation_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ShowDesignation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ShowDesignation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ShowDesignation_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UnshowDesignation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UnshowDesignation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UnshowDesignation_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Recharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Recharge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Recharge_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BusinessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BusinessInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BusinessInfo_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_TransformWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_TransformWar_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_TransformWar_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_TransformLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_TransformLevelUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_TransformLevelUp_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_TransformActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_TransformActive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_TransformActive_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Reservation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Reservation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Reservation_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_OneReservation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_OneReservation_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ReservationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ReservationList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ReservationList_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Talk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Talk_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Talk_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Answer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Answer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Answer_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_RequestFunc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_RequestFunc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_RequestFunc_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ReplyFunc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ReplyFunc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ReplyFunc_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ApplyMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ApplyMission_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ApplyMission_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_CompleteMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_CompleteMission_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_CompleteMission_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GiveUpMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GiveUpMission_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GiveUpMission_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Chat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Chat_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Chat_Channel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Chat_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Message_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_SendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_SendMail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_SendMail_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GetMailItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GetMailItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GetMailItem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ReadMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ReadMail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ReadMail_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DelMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DelMail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DelMail_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMLogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMLogin_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMLogin_OP_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMOrder_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMOrder_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMOrder_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMOnlinePlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMOnlinePlayers_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMOnlinePlayers_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMChat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMChat_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMServerMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMServerMgr_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMServerMgr_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMPlayerQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMPlayerQuery_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMPlayerQuery_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMForbid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMForbid_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMForbid_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMForbid_Select_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMNotice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMNotice_GMOP_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMRequest_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMRequest_Select_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMShutDownServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMShutDownServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMShutDownServer_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMChatRecords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMChatRecords_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMChatRecords_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMRegistrCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMRegistrCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMRegistrCount_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMRoleCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMRoleCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMRoleCount_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LevelStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMLevelStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMLevelStatistics_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMLevelStatistics_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMRankStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMRankStatistics_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMRankStatistics_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMOpenGuide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMOpenGuide_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMOpenGuide_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMNoticeMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMNoticeMgr_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMNoticeMgr_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMRegister_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMRegister_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMShutDownMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMShutDownMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMShutDownMessage_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMOpenMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMOpenMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMOpenMessage_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMModifyVIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMModifyVIP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMModifyVIP_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMAddExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMAddExchange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMAddExchange_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMQueryFaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMQueryFaction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMQueryFaction_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMChangeFactionMem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMChangeFactionMem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMChangeFactionMem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMAddRekooRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMAddRekooRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMAddRekooRole_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_GMLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_GMLoginInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_GMLoginInfo_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ObtainPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ObtainPet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ObtainPet_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PetFighting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PetFighting_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PetFighting_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PetRest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PetRest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PetRest_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PetAttach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PetAttach_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PetAttach_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PetLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PetLevelUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PetLevelUp_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PetLearnSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PetLearnSkill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PetLearnSkill_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PetInherit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PetInherit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PetInherit_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PetAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PetAdvance_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PetAdvance_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PetPsychicsLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PetPsychicsLevelUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PetPsychicsLevelUp_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ActiveGemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ActiveGemRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ActiveGemRequest_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ActiveDoubleGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ActiveDoubleGem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ActiveDoubleGem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ActiveUpGradeGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ActiveUpGradeGem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ActiveUpGradeGem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ActiveGetGem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ActiveGetGem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ActiveGetGem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ActiveFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ActiveFight_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ActiveFight_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ActiveStrongeSolider_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ActiveStrongeSolider_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ActiveStrongeSolider_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_EnterPlayOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_EnterPlayOff_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_EnterPlayOff_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PlayOffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PlayOffInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PlayOffInfo_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_PreparePlayOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_PreparePlayOff_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_PreparePlayOff_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Treasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Treasure_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Treasure_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Hire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Hire_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Hire_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_MoneyTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_MoneyTree_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_MoneyTree_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_TreasureBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_TreasureBox_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_TreasureBox_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FlyPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FlyPlan_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FlyPlan_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_BlessCome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_BlessCome_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_BlessCome_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ModifyBlessScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ModifyBlessScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ModifyBlessScore_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_TopUpObtRMB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_TopUpObtRMB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_TopUpObtRMB_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_ServerOpenTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_ServerOpenTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_ServerOpenTime_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_InvateCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_InvateCode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_InvateCode_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_UpdateInvateCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_UpdateInvateCount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_UpdateInvateCount_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_CreateFaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_CreateFaction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_CreateFaction_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DelFaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DelFaction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DelFaction_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Donate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Donate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Donate_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionNotice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionNotice_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Designate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Designate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Designate_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AddMem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AddMem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AddMem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_DelMem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_DelMem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_DelMem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Applicant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Applicant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Applicant_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_Guardian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_Guardian_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_Guardian_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionInfo_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionMem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionMem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionMem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionChangeMem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionChangeMem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionChangeMem_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionGuardian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionGuardian_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionGuardian_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionApplicant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionApplicant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionApplicant_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionAllApplicant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionAllApplicant_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionAllApplicant_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_FactionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_FactionList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_FactionList_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AcceptToFaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AcceptToFaction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AcceptToFaction_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_AsyncStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_AsyncStatistics_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_AsyncStatistics_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_StatisticsAGSLoadScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_StatisticsAGSLoadScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StatisticsAGSLoadScene_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetProto_StatisticsAGSLoadNPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProto_StatisticsAGSLoadNPC_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetProto_StatisticsAGSLoadNPC_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NetProto_2eproto() {
  protobuf_AddDesc_NetProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NetProto.proto");
  GOOGLE_CHECK(file != NULL);
  NetProto_ClientException_descriptor_ = file->message_type(0);
  static const int NetProto_ClientException_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClientException, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClientException, stackTrace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClientException, type_),
  };
  NetProto_ClientException_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ClientException_descriptor_,
      NetProto_ClientException::default_instance_,
      NetProto_ClientException_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClientException, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClientException, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ClientException));
  NetProto_ClientException_ID_descriptor_ = NetProto_ClientException_descriptor_->enum_type(0);
  NetProto_Heartbeat_descriptor_ = file->message_type(1);
  static const int NetProto_Heartbeat_offsets_[1] = {
  };
  NetProto_Heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Heartbeat_descriptor_,
      NetProto_Heartbeat::default_instance_,
      NetProto_Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Heartbeat));
  NetProto_Heartbeat_ID_descriptor_ = NetProto_Heartbeat_descriptor_->enum_type(0);
  NetProto_Login_descriptor_ = file->message_type(2);
  static const int NetProto_Login_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, deviceID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, osversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, phonetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, addTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, deviceAddTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, activateKey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, loginLater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, pay_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, pf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, pfkey_),
  };
  NetProto_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Login_descriptor_,
      NetProto_Login::default_instance_,
      NetProto_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Login));
  NetProto_Login_ID_descriptor_ = NetProto_Login_descriptor_->enum_type(0);
  NetProto_LoginResult_descriptor_ = file->message_type(3);
  static const int NetProto_LoginResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginResult, serverOpenTime_),
  };
  NetProto_LoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_LoginResult_descriptor_,
      NetProto_LoginResult::default_instance_,
      NetProto_LoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_LoginResult));
  NetProto_LoginResult_ID_descriptor_ = NetProto_LoginResult_descriptor_->enum_type(0);
  NetProto_Logout_descriptor_ = file->message_type(4);
  static const int NetProto_Logout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Logout, id_),
  };
  NetProto_Logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Logout_descriptor_,
      NetProto_Logout::default_instance_,
      NetProto_Logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Logout));
  NetProto_Logout_ID_descriptor_ = NetProto_Logout_descriptor_->enum_type(0);
  NetProto_SelectRole_descriptor_ = file->message_type(5);
  static const int NetProto_SelectRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SelectRole, id_),
  };
  NetProto_SelectRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SelectRole_descriptor_,
      NetProto_SelectRole::default_instance_,
      NetProto_SelectRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SelectRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SelectRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SelectRole));
  NetProto_SelectRole_ID_descriptor_ = NetProto_SelectRole_descriptor_->enum_type(0);
  NetProto_CreateRole_descriptor_ = file->message_type(6);
  static const int NetProto_CreateRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRole, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRole, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRole, male_),
  };
  NetProto_CreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_CreateRole_descriptor_,
      NetProto_CreateRole::default_instance_,
      NetProto_CreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_CreateRole));
  NetProto_CreateRole_ID_descriptor_ = NetProto_CreateRole_descriptor_->enum_type(0);
  NetProto_ServerTime_descriptor_ = file->message_type(7);
  static const int NetProto_ServerTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerTime, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerTime, cur_),
  };
  NetProto_ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ServerTime_descriptor_,
      NetProto_ServerTime::default_instance_,
      NetProto_ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ServerTime));
  NetProto_ServerTime_ID_descriptor_ = NetProto_ServerTime_descriptor_->enum_type(0);
  NetProto_RoleList_descriptor_ = file->message_type(8);
  static const int NetProto_RoleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoleList, roles_),
  };
  NetProto_RoleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RoleList_descriptor_,
      NetProto_RoleList::default_instance_,
      NetProto_RoleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RoleList));
  NetProto_RoleList_ID_descriptor_ = NetProto_RoleList_descriptor_->enum_type(0);
  NetProto_DeleteRole_descriptor_ = file->message_type(9);
  static const int NetProto_DeleteRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DeleteRole, id_),
  };
  NetProto_DeleteRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DeleteRole_descriptor_,
      NetProto_DeleteRole::default_instance_,
      NetProto_DeleteRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DeleteRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DeleteRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DeleteRole));
  NetProto_DeleteRole_ID_descriptor_ = NetProto_DeleteRole_descriptor_->enum_type(0);
  NetProto_ReLogin_descriptor_ = file->message_type(10);
  static const int NetProto_ReLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReLogin, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReLogin, platform_),
  };
  NetProto_ReLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ReLogin_descriptor_,
      NetProto_ReLogin::default_instance_,
      NetProto_ReLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ReLogin));
  NetProto_ReLogin_ID_descriptor_ = NetProto_ReLogin_descriptor_->enum_type(0);
  NetProto_ReLoginResult_descriptor_ = file->message_type(11);
  static const int NetProto_ReLoginResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReLoginResult, id_),
  };
  NetProto_ReLoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ReLoginResult_descriptor_,
      NetProto_ReLoginResult::default_instance_,
      NetProto_ReLoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReLoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReLoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ReLoginResult));
  NetProto_ReLoginResult_ID_descriptor_ = NetProto_ReLoginResult_descriptor_->enum_type(0);
  NetProto_Rank_descriptor_ = file->message_type(12);
  static const int NetProto_Rank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rank, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rank, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rank, finalKiller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rank, self_),
  };
  NetProto_Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Rank_descriptor_,
      NetProto_Rank::default_instance_,
      NetProto_Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Rank));
  NetProto_Rank_ID_descriptor_ = NetProto_Rank_descriptor_->enum_type(0);
  NetProto_Rank_Type_descriptor_ = NetProto_Rank_descriptor_->enum_type(1);
  NetProto_SetUp_descriptor_ = file->message_type(13);
  static const int NetProto_SetUp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetUp, soundVolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetUp, musicVolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetUp, playerNum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetUp, fixedCamera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetUp, displayOtherEffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetUp, displayMyEffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetUp, displayOtherHurtNum_),
  };
  NetProto_SetUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SetUp_descriptor_,
      NetProto_SetUp::default_instance_,
      NetProto_SetUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SetUp));
  NetProto_SetUp_ID_descriptor_ = NetProto_SetUp_descriptor_->enum_type(0);
  NetProto_Register_descriptor_ = file->message_type(14);
  static const int NetProto_Register_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Register, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Register, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Register, deviceID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Register, idfa_),
  };
  NetProto_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Register_descriptor_,
      NetProto_Register::default_instance_,
      NetProto_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Register));
  NetProto_Register_ID_descriptor_ = NetProto_Register_descriptor_->enum_type(0);
  NetProto_GetKeyGift_descriptor_ = file->message_type(15);
  static const int NetProto_GetKeyGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetKeyGift, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetKeyGift, res_),
  };
  NetProto_GetKeyGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GetKeyGift_descriptor_,
      NetProto_GetKeyGift::default_instance_,
      NetProto_GetKeyGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetKeyGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetKeyGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GetKeyGift));
  NetProto_GetKeyGift_ID_descriptor_ = NetProto_GetKeyGift_descriptor_->enum_type(0);
  NetProto_StatisticsUIBtn_descriptor_ = file->message_type(16);
  static const int NetProto_StatisticsUIBtn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsUIBtn, ui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsUIBtn, btn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsUIBtn, param_),
  };
  NetProto_StatisticsUIBtn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_StatisticsUIBtn_descriptor_,
      NetProto_StatisticsUIBtn::default_instance_,
      NetProto_StatisticsUIBtn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsUIBtn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsUIBtn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_StatisticsUIBtn));
  NetProto_StatisticsUIBtn_ID_descriptor_ = NetProto_StatisticsUIBtn_descriptor_->enum_type(0);
  NetProto_StatisticsGuide_descriptor_ = file->message_type(17);
  static const int NetProto_StatisticsGuide_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsGuide, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsGuide, node_),
  };
  NetProto_StatisticsGuide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_StatisticsGuide_descriptor_,
      NetProto_StatisticsGuide::default_instance_,
      NetProto_StatisticsGuide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsGuide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsGuide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_StatisticsGuide));
  NetProto_StatisticsGuide_ID_descriptor_ = NetProto_StatisticsGuide_descriptor_->enum_type(0);
  NetProto_LoginLaterTime_descriptor_ = file->message_type(18);
  static const int NetProto_LoginLaterTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginLaterTime, time_),
  };
  NetProto_LoginLaterTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_LoginLaterTime_descriptor_,
      NetProto_LoginLaterTime::default_instance_,
      NetProto_LoginLaterTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginLaterTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginLaterTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_LoginLaterTime));
  NetProto_LoginLaterTime_ID_descriptor_ = NetProto_LoginLaterTime_descriptor_->enum_type(0);
  NetProto_TencentBuyGoodsUrl_descriptor_ = file->message_type(19);
  static const int NetProto_TencentBuyGoodsUrl_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TencentBuyGoodsUrl, payitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TencentBuyGoodsUrl, goodsmeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TencentBuyGoodsUrl, goodsurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TencentBuyGoodsUrl, appmetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TencentBuyGoodsUrl, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TencentBuyGoodsUrl, amt_),
  };
  NetProto_TencentBuyGoodsUrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_TencentBuyGoodsUrl_descriptor_,
      NetProto_TencentBuyGoodsUrl::default_instance_,
      NetProto_TencentBuyGoodsUrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TencentBuyGoodsUrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TencentBuyGoodsUrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_TencentBuyGoodsUrl));
  NetProto_TencentBuyGoodsUrl_ID_descriptor_ = NetProto_TencentBuyGoodsUrl_descriptor_->enum_type(0);
  NetProto_LoginURL_descriptor_ = file->message_type(20);
  static const int NetProto_LoginURL_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginURL, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginURL, result_),
  };
  NetProto_LoginURL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_LoginURL_descriptor_,
      NetProto_LoginURL::default_instance_,
      NetProto_LoginURL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginURL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginURL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_LoginURL));
  NetProto_LoginURL_ID_descriptor_ = NetProto_LoginURL_descriptor_->enum_type(0);
  NetProto_RechargeParam_descriptor_ = file->message_type(21);
  static const int NetProto_RechargeParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RechargeParam, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RechargeParam, v_),
  };
  NetProto_RechargeParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RechargeParam_descriptor_,
      NetProto_RechargeParam::default_instance_,
      NetProto_RechargeParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RechargeParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RechargeParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RechargeParam));
  NetProto_RechargeParam_ID_descriptor_ = NetProto_RechargeParam_descriptor_->enum_type(0);
  NetProto_AddPlayers_descriptor_ = file->message_type(22);
  static const int NetProto_AddPlayers_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddPlayers, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddPlayers, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddPlayers, type_),
  };
  NetProto_AddPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddPlayers_descriptor_,
      NetProto_AddPlayers::default_instance_,
      NetProto_AddPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddPlayers));
  NetProto_AddPlayers_ID_descriptor_ = NetProto_AddPlayers_descriptor_->enum_type(0);
  NetProto_LoadScene_descriptor_ = file->message_type(23);
  static const int NetProto_LoadScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoadScene, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoadScene, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoadScene, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoadScene, gemRecover_),
  };
  NetProto_LoadScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_LoadScene_descriptor_,
      NetProto_LoadScene::default_instance_,
      NetProto_LoadScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoadScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoadScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_LoadScene));
  NetProto_LoadScene_ID_descriptor_ = NetProto_LoadScene_descriptor_->enum_type(0);
  NetProto_LoadScene_Type_descriptor_ = NetProto_LoadScene_descriptor_->enum_type(1);
  NetProto_DoLoadScene_descriptor_ = file->message_type(24);
  static const int NetProto_DoLoadScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoLoadScene, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoLoadScene, mapID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoLoadScene, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoLoadScene, multipleRoom_),
  };
  NetProto_DoLoadScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DoLoadScene_descriptor_,
      NetProto_DoLoadScene::default_instance_,
      NetProto_DoLoadScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoLoadScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoLoadScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DoLoadScene));
  NetProto_DoLoadScene_ID_descriptor_ = NetProto_DoLoadScene_descriptor_->enum_type(0);
  NetProto_EndLoadScene_descriptor_ = file->message_type(25);
  static const int NetProto_EndLoadScene_offsets_[1] = {
  };
  NetProto_EndLoadScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_EndLoadScene_descriptor_,
      NetProto_EndLoadScene::default_instance_,
      NetProto_EndLoadScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoadScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoadScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_EndLoadScene));
  NetProto_EndLoadScene_ID_descriptor_ = NetProto_EndLoadScene_descriptor_->enum_type(0);
  NetProto_AddNPCs_descriptor_ = file->message_type(26);
  static const int NetProto_AddNPCs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddNPCs, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddNPCs, att_),
  };
  NetProto_AddNPCs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddNPCs_descriptor_,
      NetProto_AddNPCs::default_instance_,
      NetProto_AddNPCs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddNPCs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddNPCs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddNPCs));
  NetProto_AddNPCs_ID_descriptor_ = NetProto_AddNPCs_descriptor_->enum_type(0);
  NetProto_ClearRoom_descriptor_ = file->message_type(27);
  static const int NetProto_ClearRoom_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, totalTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, godScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, upRank_),
  };
  NetProto_ClearRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ClearRoom_descriptor_,
      NetProto_ClearRoom::default_instance_,
      NetProto_ClearRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ClearRoom));
  NetProto_ClearRoom_ID_descriptor_ = NetProto_ClearRoom_descriptor_->enum_type(0);
  NetProto_OpenRoomBox_descriptor_ = file->message_type(28);
  static const int NetProto_OpenRoomBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OpenRoomBox, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OpenRoomBox, result_),
  };
  NetProto_OpenRoomBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_OpenRoomBox_descriptor_,
      NetProto_OpenRoomBox::default_instance_,
      NetProto_OpenRoomBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OpenRoomBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OpenRoomBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_OpenRoomBox));
  NetProto_OpenRoomBox_ID_descriptor_ = NetProto_OpenRoomBox_descriptor_->enum_type(0);
  NetProto_OpenRoomBox_Type_descriptor_ = NetProto_OpenRoomBox_descriptor_->enum_type(1);
  NetProto_BeginWaitRoom_descriptor_ = file->message_type(29);
  static const int NetProto_BeginWaitRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginWaitRoom, map_),
  };
  NetProto_BeginWaitRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BeginWaitRoom_descriptor_,
      NetProto_BeginWaitRoom::default_instance_,
      NetProto_BeginWaitRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginWaitRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginWaitRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BeginWaitRoom));
  NetProto_BeginWaitRoom_ID_descriptor_ = NetProto_BeginWaitRoom_descriptor_->enum_type(0);
  NetProto_EndWaitRoom_descriptor_ = file->message_type(30);
  static const int NetProto_EndWaitRoom_offsets_[1] = {
  };
  NetProto_EndWaitRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_EndWaitRoom_descriptor_,
      NetProto_EndWaitRoom::default_instance_,
      NetProto_EndWaitRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndWaitRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndWaitRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_EndWaitRoom));
  NetProto_EndWaitRoom_ID_descriptor_ = NetProto_EndWaitRoom_descriptor_->enum_type(0);
  NetProto_GenNPCs_descriptor_ = file->message_type(31);
  static const int NetProto_GenNPCs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenNPCs, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenNPCs, pass_),
  };
  NetProto_GenNPCs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GenNPCs_descriptor_,
      NetProto_GenNPCs::default_instance_,
      NetProto_GenNPCs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenNPCs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenNPCs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GenNPCs));
  NetProto_GenNPCs_ID_descriptor_ = NetProto_GenNPCs_descriptor_->enum_type(0);
  NetProto_ResetEvent_descriptor_ = file->message_type(32);
  static const int NetProto_ResetEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetEvent, monday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetEvent, resetCome_),
  };
  NetProto_ResetEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ResetEvent_descriptor_,
      NetProto_ResetEvent::default_instance_,
      NetProto_ResetEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ResetEvent));
  NetProto_ResetEvent_ID_descriptor_ = NetProto_ResetEvent_descriptor_->enum_type(0);
  NetProto_QuickFight_descriptor_ = file->message_type(33);
  static const int NetProto_QuickFight_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QuickFight, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QuickFight, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QuickFight, count_),
  };
  NetProto_QuickFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_QuickFight_descriptor_,
      NetProto_QuickFight::default_instance_,
      NetProto_QuickFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QuickFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QuickFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_QuickFight));
  NetProto_QuickFight_ID_descriptor_ = NetProto_QuickFight_descriptor_->enum_type(0);
  NetProto_Win_descriptor_ = file->message_type(34);
  static const int NetProto_Win_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Win, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Win, pvpScore_),
  };
  NetProto_Win_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Win_descriptor_,
      NetProto_Win::default_instance_,
      NetProto_Win_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Win, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Win, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Win));
  NetProto_Win_ID_descriptor_ = NetProto_Win_descriptor_->enum_type(0);
  NetProto_Lose_descriptor_ = file->message_type(35);
  static const int NetProto_Lose_offsets_[1] = {
  };
  NetProto_Lose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Lose_descriptor_,
      NetProto_Lose::default_instance_,
      NetProto_Lose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Lose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Lose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Lose));
  NetProto_Lose_ID_descriptor_ = NetProto_Lose_descriptor_->enum_type(0);
  NetProto_Timeout_descriptor_ = file->message_type(36);
  static const int NetProto_Timeout_offsets_[1] = {
  };
  NetProto_Timeout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Timeout_descriptor_,
      NetProto_Timeout::default_instance_,
      NetProto_Timeout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Timeout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Timeout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Timeout));
  NetProto_Timeout_ID_descriptor_ = NetProto_Timeout_descriptor_->enum_type(0);
  NetProto_BeginWaitPVP_descriptor_ = file->message_type(37);
  static const int NetProto_BeginWaitPVP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginWaitPVP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginWaitPVP, res_),
  };
  NetProto_BeginWaitPVP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BeginWaitPVP_descriptor_,
      NetProto_BeginWaitPVP::default_instance_,
      NetProto_BeginWaitPVP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginWaitPVP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginWaitPVP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BeginWaitPVP));
  NetProto_BeginWaitPVP_ID_descriptor_ = NetProto_BeginWaitPVP_descriptor_->enum_type(0);
  NetProto_BeginWaitPVP_Type_descriptor_ = NetProto_BeginWaitPVP_descriptor_->enum_type(1);
  NetProto_EndWaitPVP_descriptor_ = file->message_type(38);
  static const int NetProto_EndWaitPVP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndWaitPVP, type_),
  };
  NetProto_EndWaitPVP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_EndWaitPVP_descriptor_,
      NetProto_EndWaitPVP::default_instance_,
      NetProto_EndWaitPVP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndWaitPVP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndWaitPVP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_EndWaitPVP));
  NetProto_EndWaitPVP_ID_descriptor_ = NetProto_EndWaitPVP_descriptor_->enum_type(0);
  NetProto_EndWaitPVP_Type_descriptor_ = NetProto_EndWaitPVP_descriptor_->enum_type(1);
  NetProto_Lottery_descriptor_ = file->message_type(39);
  static const int NetProto_Lottery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Lottery, res_),
  };
  NetProto_Lottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Lottery_descriptor_,
      NetProto_Lottery::default_instance_,
      NetProto_Lottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Lottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Lottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Lottery));
  NetProto_Lottery_ID_descriptor_ = NetProto_Lottery_descriptor_->enum_type(0);
  NetProto_GetGift_descriptor_ = file->message_type(40);
  static const int NetProto_GetGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetGift, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetGift, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetGift, arg_),
  };
  NetProto_GetGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GetGift_descriptor_,
      NetProto_GetGift::default_instance_,
      NetProto_GetGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GetGift));
  NetProto_GetGift_ID_descriptor_ = NetProto_GetGift_descriptor_->enum_type(0);
  NetProto_SingleRecord_descriptor_ = file->message_type(41);
  static const int NetProto_SingleRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SingleRecord, mapID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SingleRecord, record_),
  };
  NetProto_SingleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SingleRecord_descriptor_,
      NetProto_SingleRecord::default_instance_,
      NetProto_SingleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SingleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SingleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SingleRecord));
  NetProto_SingleRecord_ID_descriptor_ = NetProto_SingleRecord_descriptor_->enum_type(0);
  NetProto_EndLoadModel_descriptor_ = file->message_type(42);
  static const int NetProto_EndLoadModel_offsets_[1] = {
  };
  NetProto_EndLoadModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_EndLoadModel_descriptor_,
      NetProto_EndLoadModel::default_instance_,
      NetProto_EndLoadModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoadModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoadModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_EndLoadModel));
  NetProto_EndLoadModel_ID_descriptor_ = NetProto_EndLoadModel_descriptor_->enum_type(0);
  NetProto_RoomWaitCount_descriptor_ = file->message_type(43);
  static const int NetProto_RoomWaitCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoomWaitCount, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoomWaitCount, count_),
  };
  NetProto_RoomWaitCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RoomWaitCount_descriptor_,
      NetProto_RoomWaitCount::default_instance_,
      NetProto_RoomWaitCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoomWaitCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoomWaitCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RoomWaitCount));
  NetProto_RoomWaitCount_ID_descriptor_ = NetProto_RoomWaitCount_descriptor_->enum_type(0);
  NetProto_PVPWaitCount_descriptor_ = file->message_type(44);
  static const int NetProto_PVPWaitCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PVPWaitCount, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PVPWaitCount, count_),
  };
  NetProto_PVPWaitCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PVPWaitCount_descriptor_,
      NetProto_PVPWaitCount::default_instance_,
      NetProto_PVPWaitCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PVPWaitCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PVPWaitCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PVPWaitCount));
  NetProto_PVPWaitCount_ID_descriptor_ = NetProto_PVPWaitCount_descriptor_->enum_type(0);
  NetProto_PVPWaitCount_Type_descriptor_ = NetProto_PVPWaitCount_descriptor_->enum_type(1);
  NetProto_CancelWaitRoom_descriptor_ = file->message_type(45);
  static const int NetProto_CancelWaitRoom_offsets_[1] = {
  };
  NetProto_CancelWaitRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_CancelWaitRoom_descriptor_,
      NetProto_CancelWaitRoom::default_instance_,
      NetProto_CancelWaitRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CancelWaitRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CancelWaitRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_CancelWaitRoom));
  NetProto_CancelWaitRoom_ID_descriptor_ = NetProto_CancelWaitRoom_descriptor_->enum_type(0);
  NetProto_CancelWaitPVP_descriptor_ = file->message_type(46);
  static const int NetProto_CancelWaitPVP_offsets_[1] = {
  };
  NetProto_CancelWaitPVP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_CancelWaitPVP_descriptor_,
      NetProto_CancelWaitPVP::default_instance_,
      NetProto_CancelWaitPVP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CancelWaitPVP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CancelWaitPVP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_CancelWaitPVP));
  NetProto_CancelWaitPVP_ID_descriptor_ = NetProto_CancelWaitPVP_descriptor_->enum_type(0);
  NetProto_GetRes_descriptor_ = file->message_type(47);
  static const int NetProto_GetRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetRes, items_),
  };
  NetProto_GetRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GetRes_descriptor_,
      NetProto_GetRes::default_instance_,
      NetProto_GetRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GetRes));
  NetProto_GetRes_ID_descriptor_ = NetProto_GetRes_descriptor_->enum_type(0);
  NetProto_Invest_descriptor_ = file->message_type(48);
  static const int NetProto_Invest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Invest, id_),
  };
  NetProto_Invest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Invest_descriptor_,
      NetProto_Invest::default_instance_,
      NetProto_Invest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Invest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Invest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Invest));
  NetProto_Invest_ID_descriptor_ = NetProto_Invest_descriptor_->enum_type(0);
  NetProto_InvestAward_descriptor_ = file->message_type(49);
  static const int NetProto_InvestAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvestAward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvestAward, index_),
  };
  NetProto_InvestAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_InvestAward_descriptor_,
      NetProto_InvestAward::default_instance_,
      NetProto_InvestAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvestAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvestAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_InvestAward));
  NetProto_InvestAward_ID_descriptor_ = NetProto_InvestAward_descriptor_->enum_type(0);
  NetProto_InvestAwardInfo_descriptor_ = file->message_type(50);
  static const int NetProto_InvestAwardInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvestAwardInfo, award_),
  };
  NetProto_InvestAwardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_InvestAwardInfo_descriptor_,
      NetProto_InvestAwardInfo::default_instance_,
      NetProto_InvestAwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvestAwardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvestAwardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_InvestAwardInfo));
  NetProto_InvestAwardInfo_ID_descriptor_ = NetProto_InvestAwardInfo_descriptor_->enum_type(0);
  NetProto_SetDayEvent_descriptor_ = file->message_type(51);
  static const int NetProto_SetDayEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetDayEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetDayEvent, v_),
  };
  NetProto_SetDayEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SetDayEvent_descriptor_,
      NetProto_SetDayEvent::default_instance_,
      NetProto_SetDayEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetDayEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetDayEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SetDayEvent));
  NetProto_SetDayEvent_ID_descriptor_ = NetProto_SetDayEvent_descriptor_->enum_type(0);
  NetProto_SetFixedEvent_descriptor_ = file->message_type(52);
  static const int NetProto_SetFixedEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetFixedEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetFixedEvent, v_),
  };
  NetProto_SetFixedEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SetFixedEvent_descriptor_,
      NetProto_SetFixedEvent::default_instance_,
      NetProto_SetFixedEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetFixedEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetFixedEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SetFixedEvent));
  NetProto_SetFixedEvent_ID_descriptor_ = NetProto_SetFixedEvent_descriptor_->enum_type(0);
  NetProto_Info_descriptor_ = file->message_type(53);
  static const int NetProto_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Info, content_),
  };
  NetProto_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Info_descriptor_,
      NetProto_Info::default_instance_,
      NetProto_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Info));
  NetProto_Info_ID_descriptor_ = NetProto_Info_descriptor_->enum_type(0);
  NetProto_Error_descriptor_ = file->message_type(54);
  static const int NetProto_Error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Error, content_),
  };
  NetProto_Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Error_descriptor_,
      NetProto_Error::default_instance_,
      NetProto_Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Error));
  NetProto_Error_ID_descriptor_ = NetProto_Error_descriptor_->enum_type(0);
  NetProto_GodAward_descriptor_ = file->message_type(55);
  static const int NetProto_GodAward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodAward, prevDayRank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodAward, prevDayGoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodAward, prevWeekRank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodAward, prevWeekGoods_),
  };
  NetProto_GodAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GodAward_descriptor_,
      NetProto_GodAward::default_instance_,
      NetProto_GodAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GodAward));
  NetProto_GodAward_ID_descriptor_ = NetProto_GodAward_descriptor_->enum_type(0);
  NetProto_CreateRoom_descriptor_ = file->message_type(56);
  static const int NetProto_CreateRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRoom, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRoom, noPower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRoom, info_),
  };
  NetProto_CreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_CreateRoom_descriptor_,
      NetProto_CreateRoom::default_instance_,
      NetProto_CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_CreateRoom));
  NetProto_CreateRoom_ID_descriptor_ = NetProto_CreateRoom_descriptor_->enum_type(0);
  NetProto_JoinRoom_descriptor_ = file->message_type(57);
  static const int NetProto_JoinRoom_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, noPower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, playerID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, male_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, equips_),
  };
  NetProto_JoinRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_JoinRoom_descriptor_,
      NetProto_JoinRoom::default_instance_,
      NetProto_JoinRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_JoinRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_JoinRoom));
  NetProto_JoinRoom_ID_descriptor_ = NetProto_JoinRoom_descriptor_->enum_type(0);
  NetProto_LeaveRoom_descriptor_ = file->message_type(58);
  static const int NetProto_LeaveRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LeaveRoom, pos_),
  };
  NetProto_LeaveRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_LeaveRoom_descriptor_,
      NetProto_LeaveRoom::default_instance_,
      NetProto_LeaveRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LeaveRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LeaveRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_LeaveRoom));
  NetProto_LeaveRoom_ID_descriptor_ = NetProto_LeaveRoom_descriptor_->enum_type(0);
  NetProto_DestroyRoom_descriptor_ = file->message_type(59);
  static const int NetProto_DestroyRoom_offsets_[1] = {
  };
  NetProto_DestroyRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DestroyRoom_descriptor_,
      NetProto_DestroyRoom::default_instance_,
      NetProto_DestroyRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DestroyRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DestroyRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DestroyRoom));
  NetProto_DestroyRoom_ID_descriptor_ = NetProto_DestroyRoom_descriptor_->enum_type(0);
  NetProto_RoomList_descriptor_ = file->message_type(60);
  static const int NetProto_RoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoomList, rooms_),
  };
  NetProto_RoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RoomList_descriptor_,
      NetProto_RoomList::default_instance_,
      NetProto_RoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RoomList));
  NetProto_RoomList_ID_descriptor_ = NetProto_RoomList_descriptor_->enum_type(0);
  NetProto_EvictRole_descriptor_ = file->message_type(61);
  static const int NetProto_EvictRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EvictRole, pos_),
  };
  NetProto_EvictRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_EvictRole_descriptor_,
      NetProto_EvictRole::default_instance_,
      NetProto_EvictRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EvictRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EvictRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_EvictRole));
  NetProto_EvictRole_ID_descriptor_ = NetProto_EvictRole_descriptor_->enum_type(0);
  NetProto_InviteFriend_descriptor_ = file->message_type(62);
  static const int NetProto_InviteFriend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InviteFriend, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InviteFriend, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InviteFriend, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InviteFriend, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InviteFriend, flag_),
  };
  NetProto_InviteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_InviteFriend_descriptor_,
      NetProto_InviteFriend::default_instance_,
      NetProto_InviteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InviteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InviteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_InviteFriend));
  NetProto_InviteFriend_ID_descriptor_ = NetProto_InviteFriend_descriptor_->enum_type(0);
  NetProto_BeginMultiRoom_descriptor_ = file->message_type(63);
  static const int NetProto_BeginMultiRoom_offsets_[1] = {
  };
  NetProto_BeginMultiRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BeginMultiRoom_descriptor_,
      NetProto_BeginMultiRoom::default_instance_,
      NetProto_BeginMultiRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginMultiRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginMultiRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BeginMultiRoom));
  NetProto_BeginMultiRoom_ID_descriptor_ = NetProto_BeginMultiRoom_descriptor_->enum_type(0);
  NetProto_ResetCheckPoint_descriptor_ = file->message_type(64);
  static const int NetProto_ResetCheckPoint_offsets_[1] = {
  };
  NetProto_ResetCheckPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ResetCheckPoint_descriptor_,
      NetProto_ResetCheckPoint::default_instance_,
      NetProto_ResetCheckPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetCheckPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetCheckPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ResetCheckPoint));
  NetProto_ResetCheckPoint_ID_descriptor_ = NetProto_ResetCheckPoint_descriptor_->enum_type(0);
  NetProto_GenPet_descriptor_ = file->message_type(65);
  static const int NetProto_GenPet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenPet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenPet, player_),
  };
  NetProto_GenPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GenPet_descriptor_,
      NetProto_GenPet::default_instance_,
      NetProto_GenPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GenPet));
  NetProto_GenPet_ID_descriptor_ = NetProto_GenPet_descriptor_->enum_type(0);
  NetProto_OpenObstacle_descriptor_ = file->message_type(66);
  static const int NetProto_OpenObstacle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OpenObstacle, id_),
  };
  NetProto_OpenObstacle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_OpenObstacle_descriptor_,
      NetProto_OpenObstacle::default_instance_,
      NetProto_OpenObstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OpenObstacle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OpenObstacle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_OpenObstacle));
  NetProto_OpenObstacle_ID_descriptor_ = NetProto_OpenObstacle_descriptor_->enum_type(0);
  NetProto_RegistDeviceServer_descriptor_ = file->message_type(67);
  static const int NetProto_RegistDeviceServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RegistDeviceServer, deviceID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RegistDeviceServer, idfa_),
  };
  NetProto_RegistDeviceServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RegistDeviceServer_descriptor_,
      NetProto_RegistDeviceServer::default_instance_,
      NetProto_RegistDeviceServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RegistDeviceServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RegistDeviceServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RegistDeviceServer));
  NetProto_RegistDeviceServer_ID_descriptor_ = NetProto_RegistDeviceServer_descriptor_->enum_type(0);
  NetProto_StartLoad1_descriptor_ = file->message_type(68);
  static const int NetProto_StartLoad1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StartLoad1, deviceID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StartLoad1, idfa_),
  };
  NetProto_StartLoad1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_StartLoad1_descriptor_,
      NetProto_StartLoad1::default_instance_,
      NetProto_StartLoad1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StartLoad1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StartLoad1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_StartLoad1));
  NetProto_StartLoad1_ID_descriptor_ = NetProto_StartLoad1_descriptor_->enum_type(0);
  NetProto_EndLoad1_descriptor_ = file->message_type(69);
  static const int NetProto_EndLoad1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoad1, deviceID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoad1, idfa_),
  };
  NetProto_EndLoad1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_EndLoad1_descriptor_,
      NetProto_EndLoad1::default_instance_,
      NetProto_EndLoad1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoad1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoad1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_EndLoad1));
  NetProto_EndLoad1_ID_descriptor_ = NetProto_EndLoad1_descriptor_->enum_type(0);
  NetProto_StartLoad2_descriptor_ = file->message_type(70);
  static const int NetProto_StartLoad2_offsets_[1] = {
  };
  NetProto_StartLoad2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_StartLoad2_descriptor_,
      NetProto_StartLoad2::default_instance_,
      NetProto_StartLoad2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StartLoad2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StartLoad2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_StartLoad2));
  NetProto_StartLoad2_ID_descriptor_ = NetProto_StartLoad2_descriptor_->enum_type(0);
  NetProto_EndLoad2_descriptor_ = file->message_type(71);
  static const int NetProto_EndLoad2_offsets_[1] = {
  };
  NetProto_EndLoad2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_EndLoad2_descriptor_,
      NetProto_EndLoad2::default_instance_,
      NetProto_EndLoad2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoad2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EndLoad2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_EndLoad2));
  NetProto_EndLoad2_ID_descriptor_ = NetProto_EndLoad2_descriptor_->enum_type(0);
  NetProto_BeginFighting_descriptor_ = file->message_type(72);
  static const int NetProto_BeginFighting_offsets_[1] = {
  };
  NetProto_BeginFighting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BeginFighting_descriptor_,
      NetProto_BeginFighting::default_instance_,
      NetProto_BeginFighting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginFighting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BeginFighting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BeginFighting));
  NetProto_BeginFighting_ID_descriptor_ = NetProto_BeginFighting_descriptor_->enum_type(0);
  NetProto_DelNPCs_descriptor_ = file->message_type(73);
  static const int NetProto_DelNPCs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelNPCs, id_),
  };
  NetProto_DelNPCs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DelNPCs_descriptor_,
      NetProto_DelNPCs::default_instance_,
      NetProto_DelNPCs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelNPCs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelNPCs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DelNPCs));
  NetProto_DelNPCs_ID_descriptor_ = NetProto_DelNPCs_descriptor_->enum_type(0);
  NetProto_WorldBossCurRank_descriptor_ = file->message_type(74);
  static const int NetProto_WorldBossCurRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WorldBossCurRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WorldBossCurRank, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WorldBossCurRank, selfRank_),
  };
  NetProto_WorldBossCurRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_WorldBossCurRank_descriptor_,
      NetProto_WorldBossCurRank::default_instance_,
      NetProto_WorldBossCurRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WorldBossCurRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WorldBossCurRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_WorldBossCurRank));
  NetProto_WorldBossCurRank_ID_descriptor_ = NetProto_WorldBossCurRank_descriptor_->enum_type(0);
  NetProto_FactionWarCurRank_descriptor_ = file->message_type(75);
  static const int NetProto_FactionWarCurRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionWarCurRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionWarCurRank, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionWarCurRank, selfRank_),
  };
  NetProto_FactionWarCurRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionWarCurRank_descriptor_,
      NetProto_FactionWarCurRank::default_instance_,
      NetProto_FactionWarCurRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionWarCurRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionWarCurRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionWarCurRank));
  NetProto_FactionWarCurRank_ID_descriptor_ = NetProto_FactionWarCurRank_descriptor_->enum_type(0);
  NetProto_FactionWarPrevWinner_descriptor_ = file->message_type(76);
  static const int NetProto_FactionWarPrevWinner_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionWarPrevWinner, name_),
  };
  NetProto_FactionWarPrevWinner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionWarPrevWinner_descriptor_,
      NetProto_FactionWarPrevWinner::default_instance_,
      NetProto_FactionWarPrevWinner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionWarPrevWinner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionWarPrevWinner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionWarPrevWinner));
  NetProto_FactionWarPrevWinner_ID_descriptor_ = NetProto_FactionWarPrevWinner_descriptor_->enum_type(0);
  NetProto_GetMonthCardAward_descriptor_ = file->message_type(77);
  static const int NetProto_GetMonthCardAward_offsets_[1] = {
  };
  NetProto_GetMonthCardAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GetMonthCardAward_descriptor_,
      NetProto_GetMonthCardAward::default_instance_,
      NetProto_GetMonthCardAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetMonthCardAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetMonthCardAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GetMonthCardAward));
  NetProto_GetMonthCardAward_ID_descriptor_ = NetProto_GetMonthCardAward_descriptor_->enum_type(0);
  NetProto_ExchangeGoods_descriptor_ = file->message_type(78);
  static const int NetProto_ExchangeGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ExchangeGoods, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ExchangeGoods, all_),
  };
  NetProto_ExchangeGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ExchangeGoods_descriptor_,
      NetProto_ExchangeGoods::default_instance_,
      NetProto_ExchangeGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ExchangeGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ExchangeGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ExchangeGoods));
  NetProto_ExchangeGoods_ID_descriptor_ = NetProto_ExchangeGoods_descriptor_->enum_type(0);
  NetProto_BuyMonthCard_descriptor_ = file->message_type(79);
  static const int NetProto_BuyMonthCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyMonthCard, expire_),
  };
  NetProto_BuyMonthCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BuyMonthCard_descriptor_,
      NetProto_BuyMonthCard::default_instance_,
      NetProto_BuyMonthCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyMonthCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyMonthCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BuyMonthCard));
  NetProto_BuyMonthCard_ID_descriptor_ = NetProto_BuyMonthCard_descriptor_->enum_type(0);
  NetProto_UseLuckyCard_descriptor_ = file->message_type(80);
  static const int NetProto_UseLuckyCard_offsets_[1] = {
  };
  NetProto_UseLuckyCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UseLuckyCard_descriptor_,
      NetProto_UseLuckyCard::default_instance_,
      NetProto_UseLuckyCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UseLuckyCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UseLuckyCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UseLuckyCard));
  NetProto_UseLuckyCard_ID_descriptor_ = NetProto_UseLuckyCard_descriptor_->enum_type(0);
  NetProto_BIActive_descriptor_ = file->message_type(81);
  static const int NetProto_BIActive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BIActive, deviceID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BIActive, idfa_),
  };
  NetProto_BIActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BIActive_descriptor_,
      NetProto_BIActive::default_instance_,
      NetProto_BIActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BIActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BIActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BIActive));
  NetProto_BIActive_ID_descriptor_ = NetProto_BIActive_descriptor_->enum_type(0);
  NetProto_Move_descriptor_ = file->message_type(82);
  static const int NetProto_Move_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Move, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Move, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Move, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Move, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Move, serialNum_),
  };
  NetProto_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Move_descriptor_,
      NetProto_Move::default_instance_,
      NetProto_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Move));
  NetProto_Move_ID_descriptor_ = NetProto_Move_descriptor_->enum_type(0);
  NetProto_Move_Type_descriptor_ = NetProto_Move_descriptor_->enum_type(1);
  NetProto_Wear_descriptor_ = file->message_type(83);
  static const int NetProto_Wear_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Wear, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Wear, equipment_),
  };
  NetProto_Wear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Wear_descriptor_,
      NetProto_Wear::default_instance_,
      NetProto_Wear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Wear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Wear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Wear));
  NetProto_Wear_ID_descriptor_ = NetProto_Wear_descriptor_->enum_type(0);
  NetProto_Unwear_descriptor_ = file->message_type(84);
  static const int NetProto_Unwear_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Unwear, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Unwear, pos_),
  };
  NetProto_Unwear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Unwear_descriptor_,
      NetProto_Unwear::default_instance_,
      NetProto_Unwear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Unwear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Unwear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Unwear));
  NetProto_Unwear_ID_descriptor_ = NetProto_Unwear_descriptor_->enum_type(0);
  NetProto_Attack_descriptor_ = file->message_type(85);
  static const int NetProto_Attack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, aType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, aID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, aSkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, dType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, dID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, tPos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, serverTime_),
  };
  NetProto_Attack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Attack_descriptor_,
      NetProto_Attack::default_instance_,
      NetProto_Attack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Attack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Attack));
  NetProto_Attack_ID_descriptor_ = NetProto_Attack_descriptor_->enum_type(0);
  NetProto_Attack_Type_descriptor_ = NetProto_Attack_descriptor_->enum_type(1);
  NetProto_DoAttack_descriptor_ = file->message_type(86);
  static const int NetProto_DoAttack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, aType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, aID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, aSkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, aSkillID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, dType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, dID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, tPos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, aPos_),
  };
  NetProto_DoAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DoAttack_descriptor_,
      NetProto_DoAttack::default_instance_,
      NetProto_DoAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DoAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DoAttack));
  NetProto_DoAttack_ID_descriptor_ = NetProto_DoAttack_descriptor_->enum_type(0);
  NetProto_DoAttack_Type_descriptor_ = NetProto_DoAttack_descriptor_->enum_type(1);
  NetProto_SetPos_descriptor_ = file->message_type(87);
  static const int NetProto_SetPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetPos, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetPos, serialNum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetPos, position_),
  };
  NetProto_SetPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SetPos_descriptor_,
      NetProto_SetPos::default_instance_,
      NetProto_SetPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SetPos));
  NetProto_SetPos_ID_descriptor_ = NetProto_SetPos_descriptor_->enum_type(0);
  NetProto_Die_descriptor_ = file->message_type(88);
  static const int NetProto_Die_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Die, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Die, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Die, mType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Die, mID_),
  };
  NetProto_Die_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Die_descriptor_,
      NetProto_Die::default_instance_,
      NetProto_Die_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Die, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Die, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Die));
  NetProto_Die_ID_descriptor_ = NetProto_Die_descriptor_->enum_type(0);
  NetProto_Die_Type_descriptor_ = NetProto_Die_descriptor_->enum_type(1);
  NetProto_Revive_descriptor_ = file->message_type(89);
  static const int NetProto_Revive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Revive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Revive, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Revive, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Revive, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Revive, changeScene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Revive, way_),
  };
  NetProto_Revive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Revive_descriptor_,
      NetProto_Revive::default_instance_,
      NetProto_Revive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Revive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Revive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Revive));
  NetProto_Revive_ID_descriptor_ = NetProto_Revive_descriptor_->enum_type(0);
  NetProto_Revive_Type_descriptor_ = NetProto_Revive_descriptor_->enum_type(1);
  NetProto_Revive_Way_descriptor_ = NetProto_Revive_descriptor_->enum_type(2);
  NetProto_ModifyExp_descriptor_ = file->message_type(90);
  static const int NetProto_ModifyExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyExp, exp_),
  };
  NetProto_ModifyExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyExp_descriptor_,
      NetProto_ModifyExp::default_instance_,
      NetProto_ModifyExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyExp));
  NetProto_ModifyExp_ID_descriptor_ = NetProto_ModifyExp_descriptor_->enum_type(0);
  NetProto_PickItem_descriptor_ = file->message_type(91);
  static const int NetProto_PickItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PickItem, dropList_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PickItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PickItem, packagePos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PickItem, owner_),
  };
  NetProto_PickItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PickItem_descriptor_,
      NetProto_PickItem::default_instance_,
      NetProto_PickItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PickItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PickItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PickItem));
  NetProto_PickItem_ID_descriptor_ = NetProto_PickItem_descriptor_->enum_type(0);
  NetProto_LevelUp_descriptor_ = file->message_type(92);
  static const int NetProto_LevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LevelUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LevelUp, level_),
  };
  NetProto_LevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_LevelUp_descriptor_,
      NetProto_LevelUp::default_instance_,
      NetProto_LevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_LevelUp));
  NetProto_LevelUp_ID_descriptor_ = NetProto_LevelUp_descriptor_->enum_type(0);
  NetProto_ModifyMoney_descriptor_ = file->message_type(93);
  static const int NetProto_ModifyMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMoney, money_),
  };
  NetProto_ModifyMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyMoney_descriptor_,
      NetProto_ModifyMoney::default_instance_,
      NetProto_ModifyMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyMoney));
  NetProto_ModifyMoney_ID_descriptor_ = NetProto_ModifyMoney_descriptor_->enum_type(0);
  NetProto_GetItem_descriptor_ = file->message_type(94);
  static const int NetProto_GetItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetItem, pos_),
  };
  NetProto_GetItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GetItem_descriptor_,
      NetProto_GetItem::default_instance_,
      NetProto_GetItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GetItem));
  NetProto_GetItem_ID_descriptor_ = NetProto_GetItem_descriptor_->enum_type(0);
  NetProto_QueryPlayer_descriptor_ = file->message_type(95);
  static const int NetProto_QueryPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryPlayer, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryPlayer, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryPlayer, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryPlayer, name_),
  };
  NetProto_QueryPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_QueryPlayer_descriptor_,
      NetProto_QueryPlayer::default_instance_,
      NetProto_QueryPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_QueryPlayer));
  NetProto_QueryPlayer_ID_descriptor_ = NetProto_QueryPlayer_descriptor_->enum_type(0);
  NetProto_PlayerStatus_descriptor_ = file->message_type(96);
  static const int NetProto_PlayerStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayerStatus, roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayerStatus, statuses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayerStatus, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayerStatus, vip_),
  };
  NetProto_PlayerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PlayerStatus_descriptor_,
      NetProto_PlayerStatus::default_instance_,
      NetProto_PlayerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PlayerStatus));
  NetProto_PlayerStatus_ID_descriptor_ = NetProto_PlayerStatus_descriptor_->enum_type(0);
  NetProto_PlayerStatus_Status_descriptor_ = NetProto_PlayerStatus_descriptor_->enum_type(1);
  NetProto_AddFriend_descriptor_ = file->message_type(97);
  static const int NetProto_AddFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddFriend, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddFriend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddFriend, professionType_),
  };
  NetProto_AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddFriend_descriptor_,
      NetProto_AddFriend::default_instance_,
      NetProto_AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddFriend));
  NetProto_AddFriend_ID_descriptor_ = NetProto_AddFriend_descriptor_->enum_type(0);
  NetProto_DelFriend_descriptor_ = file->message_type(98);
  static const int NetProto_DelFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelFriend, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelFriend, flag_),
  };
  NetProto_DelFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DelFriend_descriptor_,
      NetProto_DelFriend::default_instance_,
      NetProto_DelFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DelFriend));
  NetProto_DelFriend_ID_descriptor_ = NetProto_DelFriend_descriptor_->enum_type(0);
  NetProto_ModifyHP_descriptor_ = file->message_type(99);
  static const int NetProto_ModifyHP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyHP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyHP, hp_),
  };
  NetProto_ModifyHP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyHP_descriptor_,
      NetProto_ModifyHP::default_instance_,
      NetProto_ModifyHP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyHP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyHP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyHP));
  NetProto_ModifyHP_ID_descriptor_ = NetProto_ModifyHP_descriptor_->enum_type(0);
  NetProto_ModifyMana_descriptor_ = file->message_type(100);
  static const int NetProto_ModifyMana_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMana, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMana, mana_),
  };
  NetProto_ModifyMana_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyMana_descriptor_,
      NetProto_ModifyMana::default_instance_,
      NetProto_ModifyMana_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMana, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMana, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyMana));
  NetProto_ModifyMana_ID_descriptor_ = NetProto_ModifyMana_descriptor_->enum_type(0);
  NetProto_ModifyFaction_descriptor_ = file->message_type(101);
  static const int NetProto_ModifyFaction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyFaction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyFaction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyFaction, selfFaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyFaction, friendlyFaction_),
  };
  NetProto_ModifyFaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyFaction_descriptor_,
      NetProto_ModifyFaction::default_instance_,
      NetProto_ModifyFaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyFaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyFaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyFaction));
  NetProto_ModifyFaction_ID_descriptor_ = NetProto_ModifyFaction_descriptor_->enum_type(0);
  NetProto_ModifyFaction_Type_descriptor_ = NetProto_ModifyFaction_descriptor_->enum_type(1);
  NetProto_ModifyMaxHP_descriptor_ = file->message_type(102);
  static const int NetProto_ModifyMaxHP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMaxHP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMaxHP, maxHP_),
  };
  NetProto_ModifyMaxHP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyMaxHP_descriptor_,
      NetProto_ModifyMaxHP::default_instance_,
      NetProto_ModifyMaxHP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMaxHP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyMaxHP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyMaxHP));
  NetProto_ModifyMaxHP_ID_descriptor_ = NetProto_ModifyMaxHP_descriptor_->enum_type(0);
  NetProto_RequestPK_descriptor_ = file->message_type(103);
  static const int NetProto_RequestPK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RequestPK, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RequestPK, res_),
  };
  NetProto_RequestPK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RequestPK_descriptor_,
      NetProto_RequestPK::default_instance_,
      NetProto_RequestPK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RequestPK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RequestPK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RequestPK));
  NetProto_RequestPK_ID_descriptor_ = NetProto_RequestPK_descriptor_->enum_type(0);
  NetProto_ApplyPK_descriptor_ = file->message_type(104);
  static const int NetProto_ApplyPK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ApplyPK, origin_),
  };
  NetProto_ApplyPK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ApplyPK_descriptor_,
      NetProto_ApplyPK::default_instance_,
      NetProto_ApplyPK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ApplyPK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ApplyPK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ApplyPK));
  NetProto_ApplyPK_ID_descriptor_ = NetProto_ApplyPK_descriptor_->enum_type(0);
  NetProto_Strong_descriptor_ = file->message_type(105);
  static const int NetProto_Strong_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Strong, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Strong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Strong, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Strong, protect_),
  };
  NetProto_Strong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Strong_descriptor_,
      NetProto_Strong::default_instance_,
      NetProto_Strong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Strong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Strong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Strong));
  NetProto_Strong_ID_descriptor_ = NetProto_Strong_descriptor_->enum_type(0);
  NetProto_Strong_Pos_descriptor_ = NetProto_Strong_descriptor_->enum_type(1);
  NetProto_Strong_Result_descriptor_ = NetProto_Strong_descriptor_->enum_type(2);
  NetProto_ClearStrong_descriptor_ = file->message_type(106);
  static const int NetProto_ClearStrong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearStrong, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearStrong, id_),
  };
  NetProto_ClearStrong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ClearStrong_descriptor_,
      NetProto_ClearStrong::default_instance_,
      NetProto_ClearStrong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearStrong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearStrong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ClearStrong));
  NetProto_ClearStrong_ID_descriptor_ = NetProto_ClearStrong_descriptor_->enum_type(0);
  NetProto_ClearStrong_Pos_descriptor_ = NetProto_ClearStrong_descriptor_->enum_type(1);
  NetProto_Transform_descriptor_ = file->message_type(107);
  static const int NetProto_Transform_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Transform, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Transform, type_),
  };
  NetProto_Transform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Transform_descriptor_,
      NetProto_Transform::default_instance_,
      NetProto_Transform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Transform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Transform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Transform));
  NetProto_Transform_ID_descriptor_ = NetProto_Transform_descriptor_->enum_type(0);
  NetProto_Transform_Type_descriptor_ = NetProto_Transform_descriptor_->enum_type(1);
  NetProto_Mount_descriptor_ = file->message_type(108);
  static const int NetProto_Mount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Mount, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Mount, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Mount, mountPos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Mount, gemPos_),
  };
  NetProto_Mount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Mount_descriptor_,
      NetProto_Mount::default_instance_,
      NetProto_Mount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Mount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Mount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Mount));
  NetProto_Mount_ID_descriptor_ = NetProto_Mount_descriptor_->enum_type(0);
  NetProto_Mount_Pos_descriptor_ = NetProto_Mount_descriptor_->enum_type(1);
  NetProto_TalkTo_descriptor_ = file->message_type(109);
  static const int NetProto_TalkTo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TalkTo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TalkTo, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TalkTo, npc_),
  };
  NetProto_TalkTo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_TalkTo_descriptor_,
      NetProto_TalkTo::default_instance_,
      NetProto_TalkTo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TalkTo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TalkTo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_TalkTo));
  NetProto_TalkTo_ID_descriptor_ = NetProto_TalkTo_descriptor_->enum_type(0);
  NetProto_Recover_descriptor_ = file->message_type(110);
  static const int NetProto_Recover_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Recover, id_),
  };
  NetProto_Recover_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Recover_descriptor_,
      NetProto_Recover::default_instance_,
      NetProto_Recover_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Recover, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Recover, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Recover));
  NetProto_Recover_ID_descriptor_ = NetProto_Recover_descriptor_->enum_type(0);
  NetProto_AddBloodNode_descriptor_ = file->message_type(111);
  static const int NetProto_AddBloodNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodNode, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodNode, res_),
  };
  NetProto_AddBloodNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddBloodNode_descriptor_,
      NetProto_AddBloodNode::default_instance_,
      NetProto_AddBloodNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddBloodNode));
  NetProto_AddBloodNode_ID_descriptor_ = NetProto_AddBloodNode_descriptor_->enum_type(0);
  NetProto_AddBloodNode_Type_descriptor_ = NetProto_AddBloodNode_descriptor_->enum_type(1);
  NetProto_AddBloodEffect_descriptor_ = file->message_type(112);
  static const int NetProto_AddBloodEffect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodEffect, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodEffect, soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodEffect, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodEffect, count_),
  };
  NetProto_AddBloodEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddBloodEffect_descriptor_,
      NetProto_AddBloodEffect::default_instance_,
      NetProto_AddBloodEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddBloodEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddBloodEffect));
  NetProto_AddBloodEffect_ID_descriptor_ = NetProto_AddBloodEffect_descriptor_->enum_type(0);
  NetProto_AddBloodEffect_Type_descriptor_ = NetProto_AddBloodEffect_descriptor_->enum_type(1);
  NetProto_Explore_descriptor_ = file->message_type(113);
  static const int NetProto_Explore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Explore, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Explore, event1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Explore, event2_),
  };
  NetProto_Explore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Explore_descriptor_,
      NetProto_Explore::default_instance_,
      NetProto_Explore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Explore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Explore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Explore));
  NetProto_Explore_ID_descriptor_ = NetProto_Explore_descriptor_->enum_type(0);
  NetProto_UnlockBlood_descriptor_ = file->message_type(114);
  static const int NetProto_UnlockBlood_offsets_[1] = {
  };
  NetProto_UnlockBlood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UnlockBlood_descriptor_,
      NetProto_UnlockBlood::default_instance_,
      NetProto_UnlockBlood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockBlood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockBlood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UnlockBlood));
  NetProto_UnlockBlood_ID_descriptor_ = NetProto_UnlockBlood_descriptor_->enum_type(0);
  NetProto_UpdatePos_descriptor_ = file->message_type(115);
  static const int NetProto_UpdatePos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UpdatePos, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UpdatePos, pos_),
  };
  NetProto_UpdatePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UpdatePos_descriptor_,
      NetProto_UpdatePos::default_instance_,
      NetProto_UpdatePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UpdatePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UpdatePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UpdatePos));
  NetProto_UpdatePos_ID_descriptor_ = NetProto_UpdatePos_descriptor_->enum_type(0);
  NetProto_SayHello_descriptor_ = file->message_type(116);
  static const int NetProto_SayHello_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SayHello, srcID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SayHello, srcName_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SayHello, destID_),
  };
  NetProto_SayHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SayHello_descriptor_,
      NetProto_SayHello::default_instance_,
      NetProto_SayHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SayHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SayHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SayHello));
  NetProto_SayHello_ID_descriptor_ = NetProto_SayHello_descriptor_->enum_type(0);
  NetProto_CompleteGuide_descriptor_ = file->message_type(117);
  static const int NetProto_CompleteGuide_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CompleteGuide, id_),
  };
  NetProto_CompleteGuide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_CompleteGuide_descriptor_,
      NetProto_CompleteGuide::default_instance_,
      NetProto_CompleteGuide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CompleteGuide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CompleteGuide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_CompleteGuide));
  NetProto_CompleteGuide_ID_descriptor_ = NetProto_CompleteGuide_descriptor_->enum_type(0);
  NetProto_Arrange_descriptor_ = file->message_type(118);
  static const int NetProto_Arrange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Arrange, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Arrange, items_),
  };
  NetProto_Arrange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Arrange_descriptor_,
      NetProto_Arrange::default_instance_,
      NetProto_Arrange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Arrange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Arrange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Arrange));
  NetProto_Arrange_ID_descriptor_ = NetProto_Arrange_descriptor_->enum_type(0);
  NetProto_IgnorePK_descriptor_ = file->message_type(119);
  static const int NetProto_IgnorePK_offsets_[1] = {
  };
  NetProto_IgnorePK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_IgnorePK_descriptor_,
      NetProto_IgnorePK::default_instance_,
      NetProto_IgnorePK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_IgnorePK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_IgnorePK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_IgnorePK));
  NetProto_IgnorePK_ID_descriptor_ = NetProto_IgnorePK_descriptor_->enum_type(0);
  NetProto_ModifyRMB_descriptor_ = file->message_type(120);
  static const int NetProto_ModifyRMB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyRMB, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyRMB, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyRMB, totalCost_),
  };
  NetProto_ModifyRMB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyRMB_descriptor_,
      NetProto_ModifyRMB::default_instance_,
      NetProto_ModifyRMB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyRMB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyRMB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyRMB));
  NetProto_ModifyRMB_ID_descriptor_ = NetProto_ModifyRMB_descriptor_->enum_type(0);
  NetProto_ModifySoulJade_descriptor_ = file->message_type(121);
  static const int NetProto_ModifySoulJade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySoulJade, value_),
  };
  NetProto_ModifySoulJade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifySoulJade_descriptor_,
      NetProto_ModifySoulJade::default_instance_,
      NetProto_ModifySoulJade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySoulJade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySoulJade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifySoulJade));
  NetProto_ModifySoulJade_ID_descriptor_ = NetProto_ModifySoulJade_descriptor_->enum_type(0);
  NetProto_ModifySoul_descriptor_ = file->message_type(122);
  static const int NetProto_ModifySoul_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySoul, value_),
  };
  NetProto_ModifySoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifySoul_descriptor_,
      NetProto_ModifySoul::default_instance_,
      NetProto_ModifySoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifySoul));
  NetProto_ModifySoul_ID_descriptor_ = NetProto_ModifySoul_descriptor_->enum_type(0);
  NetProto_ModifyHonor_descriptor_ = file->message_type(123);
  static const int NetProto_ModifyHonor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyHonor, value_),
  };
  NetProto_ModifyHonor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyHonor_descriptor_,
      NetProto_ModifyHonor::default_instance_,
      NetProto_ModifyHonor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyHonor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyHonor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyHonor));
  NetProto_ModifyHonor_ID_descriptor_ = NetProto_ModifyHonor_descriptor_->enum_type(0);
  NetProto_ModifyDurability_descriptor_ = file->message_type(124);
  static const int NetProto_ModifyDurability_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyDurability, value_),
  };
  NetProto_ModifyDurability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyDurability_descriptor_,
      NetProto_ModifyDurability::default_instance_,
      NetProto_ModifyDurability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyDurability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyDurability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyDurability));
  NetProto_ModifyDurability_ID_descriptor_ = NetProto_ModifyDurability_descriptor_->enum_type(0);
  NetProto_ModifySoulStone_descriptor_ = file->message_type(125);
  static const int NetProto_ModifySoulStone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySoulStone, value_),
  };
  NetProto_ModifySoulStone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifySoulStone_descriptor_,
      NetProto_ModifySoulStone::default_instance_,
      NetProto_ModifySoulStone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySoulStone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySoulStone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifySoulStone));
  NetProto_ModifySoulStone_ID_descriptor_ = NetProto_ModifySoulStone_descriptor_->enum_type(0);
  NetProto_ModifyPKScore_descriptor_ = file->message_type(126);
  static const int NetProto_ModifyPKScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyPKScore, value_),
  };
  NetProto_ModifyPKScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyPKScore_descriptor_,
      NetProto_ModifyPKScore::default_instance_,
      NetProto_ModifyPKScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyPKScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyPKScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyPKScore));
  NetProto_ModifyPKScore_ID_descriptor_ = NetProto_ModifyPKScore_descriptor_->enum_type(0);
  NetProto_DelItem_descriptor_ = file->message_type(127);
  static const int NetProto_DelItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelItem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelItem, count_),
  };
  NetProto_DelItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DelItem_descriptor_,
      NetProto_DelItem::default_instance_,
      NetProto_DelItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DelItem));
  NetProto_DelItem_ID_descriptor_ = NetProto_DelItem_descriptor_->enum_type(0);
  NetProto_ModifyVIP_descriptor_ = file->message_type(128);
  static const int NetProto_ModifyVIP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyVIP, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyVIP, vip_),
  };
  NetProto_ModifyVIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyVIP_descriptor_,
      NetProto_ModifyVIP::default_instance_,
      NetProto_ModifyVIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyVIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyVIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyVIP));
  NetProto_ModifyVIP_ID_descriptor_ = NetProto_ModifyVIP_descriptor_->enum_type(0);
  NetProto_RandomGodTarget_descriptor_ = file->message_type(129);
  static const int NetProto_RandomGodTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RandomGodTarget, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RandomGodTarget, event_),
  };
  NetProto_RandomGodTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RandomGodTarget_descriptor_,
      NetProto_RandomGodTarget::default_instance_,
      NetProto_RandomGodTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RandomGodTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RandomGodTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RandomGodTarget));
  NetProto_RandomGodTarget_ID_descriptor_ = NetProto_RandomGodTarget_descriptor_->enum_type(0);
  NetProto_Inspire_descriptor_ = file->message_type(130);
  static const int NetProto_Inspire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inspire, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inspire, dest_),
  };
  NetProto_Inspire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Inspire_descriptor_,
      NetProto_Inspire::default_instance_,
      NetProto_Inspire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inspire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inspire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Inspire));
  NetProto_Inspire_ID_descriptor_ = NetProto_Inspire_descriptor_->enum_type(0);
  NetProto_Inspire_Type_descriptor_ = NetProto_Inspire_descriptor_->enum_type(1);
  NetProto_Inspire_Dest_descriptor_ = NetProto_Inspire_descriptor_->enum_type(2);
  NetProto_RequestGodTarget_descriptor_ = file->message_type(131);
  static const int NetProto_RequestGodTarget_offsets_[1] = {
  };
  NetProto_RequestGodTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RequestGodTarget_descriptor_,
      NetProto_RequestGodTarget::default_instance_,
      NetProto_RequestGodTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RequestGodTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RequestGodTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RequestGodTarget));
  NetProto_RequestGodTarget_ID_descriptor_ = NetProto_RequestGodTarget_descriptor_->enum_type(0);
  NetProto_ModifyGodScore_descriptor_ = file->message_type(132);
  static const int NetProto_ModifyGodScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyGodScore, value_),
  };
  NetProto_ModifyGodScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyGodScore_descriptor_,
      NetProto_ModifyGodScore::default_instance_,
      NetProto_ModifyGodScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyGodScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyGodScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyGodScore));
  NetProto_ModifyGodScore_ID_descriptor_ = NetProto_ModifyGodScore_descriptor_->enum_type(0);
  NetProto_GodRank_descriptor_ = file->message_type(133);
  static const int NetProto_GodRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRank, self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRank, target_),
  };
  NetProto_GodRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GodRank_descriptor_,
      NetProto_GodRank::default_instance_,
      NetProto_GodRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GodRank));
  NetProto_GodRank_ID_descriptor_ = NetProto_GodRank_descriptor_->enum_type(0);
  NetProto_GetFashion_descriptor_ = file->message_type(134);
  static const int NetProto_GetFashion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetFashion, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetFashion, pos_),
  };
  NetProto_GetFashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GetFashion_descriptor_,
      NetProto_GetFashion::default_instance_,
      NetProto_GetFashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetFashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetFashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GetFashion));
  NetProto_GetFashion_ID_descriptor_ = NetProto_GetFashion_descriptor_->enum_type(0);
  NetProto_SyncAtt_descriptor_ = file->message_type(135);
  static const int NetProto_SyncAtt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SyncAtt, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SyncAtt, propertiesDelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SyncAtt, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SyncAtt, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SyncAtt, md5_),
  };
  NetProto_SyncAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SyncAtt_descriptor_,
      NetProto_SyncAtt::default_instance_,
      NetProto_SyncAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SyncAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SyncAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SyncAtt));
  NetProto_SyncAtt_ID_descriptor_ = NetProto_SyncAtt_descriptor_->enum_type(0);
  NetProto_ModifySubRMB_descriptor_ = file->message_type(136);
  static const int NetProto_ModifySubRMB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySubRMB, value_),
  };
  NetProto_ModifySubRMB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifySubRMB_descriptor_,
      NetProto_ModifySubRMB::default_instance_,
      NetProto_ModifySubRMB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySubRMB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifySubRMB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifySubRMB));
  NetProto_ModifySubRMB_ID_descriptor_ = NetProto_ModifySubRMB_descriptor_->enum_type(0);
  NetProto_GenEquip_descriptor_ = file->message_type(137);
  static const int NetProto_GenEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenEquip, id_),
  };
  NetProto_GenEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GenEquip_descriptor_,
      NetProto_GenEquip::default_instance_,
      NetProto_GenEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GenEquip));
  NetProto_GenEquip_ID_descriptor_ = NetProto_GenEquip_descriptor_->enum_type(0);
  NetProto_GenGem_descriptor_ = file->message_type(138);
  static const int NetProto_GenGem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenGem, way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenGem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenGem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenGem, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenGem, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenGem, fail_),
  };
  NetProto_GenGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GenGem_descriptor_,
      NetProto_GenGem::default_instance_,
      NetProto_GenGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GenGem));
  NetProto_GenGem_ID_descriptor_ = NetProto_GenGem_descriptor_->enum_type(0);
  NetProto_GenGem_Way_descriptor_ = NetProto_GenGem_descriptor_->enum_type(1);
  NetProto_UnlockHole_descriptor_ = file->message_type(139);
  static const int NetProto_UnlockHole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockHole, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockHole, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockHole, index_),
  };
  NetProto_UnlockHole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UnlockHole_descriptor_,
      NetProto_UnlockHole::default_instance_,
      NetProto_UnlockHole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockHole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockHole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UnlockHole));
  NetProto_UnlockHole_ID_descriptor_ = NetProto_UnlockHole_descriptor_->enum_type(0);
  NetProto_UnlockHole_Pos_descriptor_ = NetProto_UnlockHole_descriptor_->enum_type(1);
  NetProto_UnmountGem_descriptor_ = file->message_type(140);
  static const int NetProto_UnmountGem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnmountGem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnmountGem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnmountGem, index_),
  };
  NetProto_UnmountGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UnmountGem_descriptor_,
      NetProto_UnmountGem::default_instance_,
      NetProto_UnmountGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnmountGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnmountGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UnmountGem));
  NetProto_UnmountGem_ID_descriptor_ = NetProto_UnmountGem_descriptor_->enum_type(0);
  NetProto_UnmountGem_Pos_descriptor_ = NetProto_UnmountGem_descriptor_->enum_type(1);
  NetProto_EnhanceDelta_descriptor_ = file->message_type(141);
  static const int NetProto_EnhanceDelta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EnhanceDelta, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EnhanceDelta, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EnhanceDelta, ten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EnhanceDelta, delta_),
  };
  NetProto_EnhanceDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_EnhanceDelta_descriptor_,
      NetProto_EnhanceDelta::default_instance_,
      NetProto_EnhanceDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EnhanceDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EnhanceDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_EnhanceDelta));
  NetProto_EnhanceDelta_ID_descriptor_ = NetProto_EnhanceDelta_descriptor_->enum_type(0);
  NetProto_EnhanceDelta_Pos_descriptor_ = NetProto_EnhanceDelta_descriptor_->enum_type(1);
  NetProto_Enhance_descriptor_ = file->message_type(142);
  static const int NetProto_Enhance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Enhance, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Enhance, id_),
  };
  NetProto_Enhance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Enhance_descriptor_,
      NetProto_Enhance::default_instance_,
      NetProto_Enhance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Enhance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Enhance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Enhance));
  NetProto_Enhance_ID_descriptor_ = NetProto_Enhance_descriptor_->enum_type(0);
  NetProto_Enhance_Pos_descriptor_ = NetProto_Enhance_descriptor_->enum_type(1);
  NetProto_Inherit_descriptor_ = file->message_type(143);
  static const int NetProto_Inherit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inherit, parentPos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inherit, parentID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inherit, childPos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inherit, childID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inherit, useRMB_),
  };
  NetProto_Inherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Inherit_descriptor_,
      NetProto_Inherit::default_instance_,
      NetProto_Inherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Inherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Inherit));
  NetProto_Inherit_ID_descriptor_ = NetProto_Inherit_descriptor_->enum_type(0);
  NetProto_Inherit_Pos_descriptor_ = NetProto_Inherit_descriptor_->enum_type(1);
  NetProto_StrongBaseWing_descriptor_ = file->message_type(144);
  static const int NetProto_StrongBaseWing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StrongBaseWing, useRMB_),
  };
  NetProto_StrongBaseWing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_StrongBaseWing_descriptor_,
      NetProto_StrongBaseWing::default_instance_,
      NetProto_StrongBaseWing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StrongBaseWing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StrongBaseWing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_StrongBaseWing));
  NetProto_StrongBaseWing_ID_descriptor_ = NetProto_StrongBaseWing_descriptor_->enum_type(0);
  NetProto_BuyWing_descriptor_ = file->message_type(145);
  static const int NetProto_BuyWing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyWing, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyWing, forever_),
  };
  NetProto_BuyWing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BuyWing_descriptor_,
      NetProto_BuyWing::default_instance_,
      NetProto_BuyWing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyWing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyWing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BuyWing));
  NetProto_BuyWing_ID_descriptor_ = NetProto_BuyWing_descriptor_->enum_type(0);
  NetProto_WearWing_descriptor_ = file->message_type(146);
  static const int NetProto_WearWing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WearWing, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WearWing, baseWing_),
  };
  NetProto_WearWing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_WearWing_descriptor_,
      NetProto_WearWing::default_instance_,
      NetProto_WearWing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WearWing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WearWing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_WearWing));
  NetProto_WearWing_ID_descriptor_ = NetProto_WearWing_descriptor_->enum_type(0);
  NetProto_GetWing_descriptor_ = file->message_type(147);
  static const int NetProto_GetWing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetWing, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetWing, pos_),
  };
  NetProto_GetWing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GetWing_descriptor_,
      NetProto_GetWing::default_instance_,
      NetProto_GetWing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetWing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetWing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GetWing));
  NetProto_GetWing_ID_descriptor_ = NetProto_GetWing_descriptor_->enum_type(0);
  NetProto_BuyFashion_descriptor_ = file->message_type(148);
  static const int NetProto_BuyFashion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyFashion, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyFashion, forever_),
  };
  NetProto_BuyFashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BuyFashion_descriptor_,
      NetProto_BuyFashion::default_instance_,
      NetProto_BuyFashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyFashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyFashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BuyFashion));
  NetProto_BuyFashion_ID_descriptor_ = NetProto_BuyFashion_descriptor_->enum_type(0);
  NetProto_MakeFashionHole_descriptor_ = file->message_type(149);
  static const int NetProto_MakeFashionHole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_MakeFashionHole, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_MakeFashionHole, index_),
  };
  NetProto_MakeFashionHole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_MakeFashionHole_descriptor_,
      NetProto_MakeFashionHole::default_instance_,
      NetProto_MakeFashionHole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_MakeFashionHole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_MakeFashionHole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_MakeFashionHole));
  NetProto_MakeFashionHole_ID_descriptor_ = NetProto_MakeFashionHole_descriptor_->enum_type(0);
  NetProto_FashionInlay_descriptor_ = file->message_type(150);
  static const int NetProto_FashionInlay_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionInlay, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionInlay, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionInlay, runeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionInlay, flag_),
  };
  NetProto_FashionInlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FashionInlay_descriptor_,
      NetProto_FashionInlay::default_instance_,
      NetProto_FashionInlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionInlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionInlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FashionInlay));
  NetProto_FashionInlay_ID_descriptor_ = NetProto_FashionInlay_descriptor_->enum_type(0);
  NetProto_FashionUnInlay_descriptor_ = file->message_type(151);
  static const int NetProto_FashionUnInlay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionUnInlay, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionUnInlay, index_),
  };
  NetProto_FashionUnInlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FashionUnInlay_descriptor_,
      NetProto_FashionUnInlay::default_instance_,
      NetProto_FashionUnInlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionUnInlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FashionUnInlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FashionUnInlay));
  NetProto_FashionUnInlay_ID_descriptor_ = NetProto_FashionUnInlay_descriptor_->enum_type(0);
  NetProto_ServerLimitItem_descriptor_ = file->message_type(152);
  static const int NetProto_ServerLimitItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerLimitItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerLimitItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerLimitItem, count_),
  };
  NetProto_ServerLimitItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ServerLimitItem_descriptor_,
      NetProto_ServerLimitItem::default_instance_,
      NetProto_ServerLimitItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerLimitItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerLimitItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ServerLimitItem));
  NetProto_ServerLimitItem_ID_descriptor_ = NetProto_ServerLimitItem_descriptor_->enum_type(0);
  NetProto_FriendsLove_descriptor_ = file->message_type(153);
  static const int NetProto_FriendsLove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FriendsLove, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FriendsLove, flag_),
  };
  NetProto_FriendsLove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FriendsLove_descriptor_,
      NetProto_FriendsLove::default_instance_,
      NetProto_FriendsLove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FriendsLove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FriendsLove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FriendsLove));
  NetProto_FriendsLove_ID_descriptor_ = NetProto_FriendsLove_descriptor_->enum_type(0);
  NetProto_ChangePartner_descriptor_ = file->message_type(154);
  static const int NetProto_ChangePartner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ChangePartner, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ChangePartner, fans_),
  };
  NetProto_ChangePartner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ChangePartner_descriptor_,
      NetProto_ChangePartner::default_instance_,
      NetProto_ChangePartner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ChangePartner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ChangePartner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ChangePartner));
  NetProto_ChangePartner_ID_descriptor_ = NetProto_ChangePartner_descriptor_->enum_type(0);
  NetProto_AddFansLove_descriptor_ = file->message_type(155);
  static const int NetProto_AddFansLove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddFansLove, roleID_),
  };
  NetProto_AddFansLove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddFansLove_descriptor_,
      NetProto_AddFansLove::default_instance_,
      NetProto_AddFansLove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddFansLove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddFansLove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddFansLove));
  NetProto_AddFansLove_ID_descriptor_ = NetProto_AddFansLove_descriptor_->enum_type(0);
  NetProto_ModifyLovePoint_descriptor_ = file->message_type(156);
  static const int NetProto_ModifyLovePoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyLovePoint, lovePoint_),
  };
  NetProto_ModifyLovePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyLovePoint_descriptor_,
      NetProto_ModifyLovePoint::default_instance_,
      NetProto_ModifyLovePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyLovePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyLovePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyLovePoint));
  NetProto_ModifyLovePoint_ID_descriptor_ = NetProto_ModifyLovePoint_descriptor_->enum_type(0);
  NetProto_BuyDurability_descriptor_ = file->message_type(157);
  static const int NetProto_BuyDurability_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyDurability, index_),
  };
  NetProto_BuyDurability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BuyDurability_descriptor_,
      NetProto_BuyDurability::default_instance_,
      NetProto_BuyDurability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyDurability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyDurability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BuyDurability));
  NetProto_BuyDurability_ID_descriptor_ = NetProto_BuyDurability_descriptor_->enum_type(0);
  NetProto_LoginObtRMB_descriptor_ = file->message_type(158);
  static const int NetProto_LoginObtRMB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginObtRMB, count_),
  };
  NetProto_LoginObtRMB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_LoginObtRMB_descriptor_,
      NetProto_LoginObtRMB::default_instance_,
      NetProto_LoginObtRMB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginObtRMB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_LoginObtRMB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_LoginObtRMB));
  NetProto_LoginObtRMB_ID_descriptor_ = NetProto_LoginObtRMB_descriptor_->enum_type(0);
  NetProto_UnwearWing_descriptor_ = file->message_type(159);
  static const int NetProto_UnwearWing_offsets_[1] = {
  };
  NetProto_UnwearWing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UnwearWing_descriptor_,
      NetProto_UnwearWing::default_instance_,
      NetProto_UnwearWing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnwearWing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnwearWing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UnwearWing));
  NetProto_UnwearWing_ID_descriptor_ = NetProto_UnwearWing_descriptor_->enum_type(0);
  NetProto_GetEquip_descriptor_ = file->message_type(160);
  static const int NetProto_GetEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetEquip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetEquip, asset_),
  };
  NetProto_GetEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GetEquip_descriptor_,
      NetProto_GetEquip::default_instance_,
      NetProto_GetEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GetEquip));
  NetProto_GetEquip_ID_descriptor_ = NetProto_GetEquip_descriptor_->enum_type(0);
  NetProto_ResetCount_descriptor_ = file->message_type(161);
  static const int NetProto_ResetCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetCount, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetCount, arg_),
  };
  NetProto_ResetCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ResetCount_descriptor_,
      NetProto_ResetCount::default_instance_,
      NetProto_ResetCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResetCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ResetCount));
  NetProto_ResetCount_ID_descriptor_ = NetProto_ResetCount_descriptor_->enum_type(0);
  NetProto_ResetCount_Type_descriptor_ = NetProto_ResetCount_descriptor_->enum_type(1);
  NetProto_GodPlayer_descriptor_ = file->message_type(162);
  static const int NetProto_GodPlayer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPlayer, professionType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPlayer, godRank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPlayer, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPlayer, inspire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPlayer, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPlayer, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPlayer, level_),
  };
  NetProto_GodPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GodPlayer_descriptor_,
      NetProto_GodPlayer::default_instance_,
      NetProto_GodPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GodPlayer));
  NetProto_GodPlayer_ID_descriptor_ = NetProto_GodPlayer_descriptor_->enum_type(0);
  NetProto_GodRandomPlayer_descriptor_ = file->message_type(163);
  static const int NetProto_GodRandomPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRandomPlayer, player_),
  };
  NetProto_GodRandomPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GodRandomPlayer_descriptor_,
      NetProto_GodRandomPlayer::default_instance_,
      NetProto_GodRandomPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRandomPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRandomPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GodRandomPlayer));
  NetProto_GodRandomPlayer_ID_descriptor_ = NetProto_GodRandomPlayer_descriptor_->enum_type(0);
  NetProto_GodRecords_descriptor_ = file->message_type(164);
  static const int NetProto_GodRecords_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRecords, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRecords, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRecords, professionType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRecords, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRecords, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRecords, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRecords, roleID_),
  };
  NetProto_GodRecords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GodRecords_descriptor_,
      NetProto_GodRecords::default_instance_,
      NetProto_GodRecords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRecords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodRecords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GodRecords));
  NetProto_GodRecords_ID_descriptor_ = NetProto_GodRecords_descriptor_->enum_type(0);
  NetProto_GodPanel_descriptor_ = file->message_type(165);
  static const int NetProto_GodPanel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPanel, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPanel, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPanel, nextTime_),
  };
  NetProto_GodPanel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GodPanel_descriptor_,
      NetProto_GodPanel::default_instance_,
      NetProto_GodPanel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPanel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPanel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GodPanel));
  NetProto_GodPanel_ID_descriptor_ = NetProto_GodPanel_descriptor_->enum_type(0);
  NetProto_SelectGodRole_descriptor_ = file->message_type(166);
  static const int NetProto_SelectGodRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SelectGodRole, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SelectGodRole, att_),
  };
  NetProto_SelectGodRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SelectGodRole_descriptor_,
      NetProto_SelectGodRole::default_instance_,
      NetProto_SelectGodRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SelectGodRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SelectGodRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SelectGodRole));
  NetProto_SelectGodRole_ID_descriptor_ = NetProto_SelectGodRole_descriptor_->enum_type(0);
  NetProto_SetSpecial_descriptor_ = file->message_type(167);
  static const int NetProto_SetSpecial_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetSpecial, npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetSpecial, enable_),
  };
  NetProto_SetSpecial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SetSpecial_descriptor_,
      NetProto_SetSpecial::default_instance_,
      NetProto_SetSpecial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetSpecial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SetSpecial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SetSpecial));
  NetProto_SetSpecial_ID_descriptor_ = NetProto_SetSpecial_descriptor_->enum_type(0);
  NetProto_ResolveEquips_descriptor_ = file->message_type(168);
  static const int NetProto_ResolveEquips_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResolveEquips, op_),
  };
  NetProto_ResolveEquips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ResolveEquips_descriptor_,
      NetProto_ResolveEquips::default_instance_,
      NetProto_ResolveEquips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResolveEquips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ResolveEquips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ResolveEquips));
  NetProto_ResolveEquips_ID_descriptor_ = NetProto_ResolveEquips_descriptor_->enum_type(0);
  NetProto_ModifyPKScoreActive_descriptor_ = file->message_type(169);
  static const int NetProto_ModifyPKScoreActive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyPKScoreActive, value_),
  };
  NetProto_ModifyPKScoreActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyPKScoreActive_descriptor_,
      NetProto_ModifyPKScoreActive::default_instance_,
      NetProto_ModifyPKScoreActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyPKScoreActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyPKScoreActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyPKScoreActive));
  NetProto_ModifyPKScoreActive_ID_descriptor_ = NetProto_ModifyPKScoreActive_descriptor_->enum_type(0);
  NetProto_ModifyRMBActive_descriptor_ = file->message_type(170);
  static const int NetProto_ModifyRMBActive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyRMBActive, value_),
  };
  NetProto_ModifyRMBActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyRMBActive_descriptor_,
      NetProto_ModifyRMBActive::default_instance_,
      NetProto_ModifyRMBActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyRMBActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyRMBActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyRMBActive));
  NetProto_ModifyRMBActive_ID_descriptor_ = NetProto_ModifyRMBActive_descriptor_->enum_type(0);
  NetProto_DropItem_descriptor_ = file->message_type(171);
  static const int NetProto_DropItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DropItem, npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DropItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DropItem, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DropItem, v1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DropItem, v2_),
  };
  NetProto_DropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DropItem_descriptor_,
      NetProto_DropItem::default_instance_,
      NetProto_DropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DropItem));
  NetProto_DropItem_ID_descriptor_ = NetProto_DropItem_descriptor_->enum_type(0);
  NetProto_SellGoods_descriptor_ = file->message_type(172);
  static const int NetProto_SellGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SellGoods, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SellGoods, type_),
  };
  NetProto_SellGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SellGoods_descriptor_,
      NetProto_SellGoods::default_instance_,
      NetProto_SellGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SellGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SellGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SellGoods));
  NetProto_SellGoods_ID_descriptor_ = NetProto_SellGoods_descriptor_->enum_type(0);
  NetProto_Luck_descriptor_ = file->message_type(173);
  static const int NetProto_Luck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Luck, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Luck, free_),
  };
  NetProto_Luck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Luck_descriptor_,
      NetProto_Luck::default_instance_,
      NetProto_Luck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Luck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Luck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Luck));
  NetProto_Luck_ID_descriptor_ = NetProto_Luck_descriptor_->enum_type(0);
  NetProto_GrabRedEnvelope_descriptor_ = file->message_type(174);
  static const int NetProto_GrabRedEnvelope_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GrabRedEnvelope, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GrabRedEnvelope, gr_),
  };
  NetProto_GrabRedEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GrabRedEnvelope_descriptor_,
      NetProto_GrabRedEnvelope::default_instance_,
      NetProto_GrabRedEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GrabRedEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GrabRedEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GrabRedEnvelope));
  NetProto_GrabRedEnvelope_ID_descriptor_ = NetProto_GrabRedEnvelope_descriptor_->enum_type(0);
  NetProto_CatGift_descriptor_ = file->message_type(175);
  static const int NetProto_CatGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CatGift, allCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CatGift, count_),
  };
  NetProto_CatGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_CatGift_descriptor_,
      NetProto_CatGift::default_instance_,
      NetProto_CatGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CatGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CatGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_CatGift));
  NetProto_CatGift_ID_descriptor_ = NetProto_CatGift_descriptor_->enum_type(0);
  NetProto_GroupPurchase_descriptor_ = file->message_type(176);
  static const int NetProto_GroupPurchase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GroupPurchase, allCount_),
  };
  NetProto_GroupPurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GroupPurchase_descriptor_,
      NetProto_GroupPurchase::default_instance_,
      NetProto_GroupPurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GroupPurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GroupPurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GroupPurchase));
  NetProto_GroupPurchase_ID_descriptor_ = NetProto_GroupPurchase_descriptor_->enum_type(0);
  NetProto_Rides_descriptor_ = file->message_type(177);
  static const int NetProto_Rides_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rides, rides_),
  };
  NetProto_Rides_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Rides_descriptor_,
      NetProto_Rides::default_instance_,
      NetProto_Rides_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rides, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Rides, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Rides));
  NetProto_Rides_ID_descriptor_ = NetProto_Rides_descriptor_->enum_type(0);
  NetProto_RidesTrain_descriptor_ = file->message_type(178);
  static const int NetProto_RidesTrain_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesTrain, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesTrain, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesTrain, upProperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesTrain, downProperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesTrain, upv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesTrain, downv_),
  };
  NetProto_RidesTrain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RidesTrain_descriptor_,
      NetProto_RidesTrain::default_instance_,
      NetProto_RidesTrain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesTrain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesTrain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RidesTrain));
  NetProto_RidesTrain_ID_descriptor_ = NetProto_RidesTrain_descriptor_->enum_type(0);
  NetProto_GenRides_descriptor_ = file->message_type(179);
  static const int NetProto_GenRides_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenRides, indexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenRides, ids_),
  };
  NetProto_GenRides_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GenRides_descriptor_,
      NetProto_GenRides::default_instance_,
      NetProto_GenRides_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenRides, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GenRides, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GenRides));
  NetProto_GenRides_ID_descriptor_ = NetProto_GenRides_descriptor_->enum_type(0);
  NetProto_GodShip_descriptor_ = file->message_type(180);
  static const int NetProto_GodShip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodShip, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodShip, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodShip, cut_),
  };
  NetProto_GodShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GodShip_descriptor_,
      NetProto_GodShip::default_instance_,
      NetProto_GodShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GodShip));
  NetProto_GodShip_ID_descriptor_ = NetProto_GodShip_descriptor_->enum_type(0);
  NetProto_Swallow_descriptor_ = file->message_type(181);
  static const int NetProto_Swallow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Swallow, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Swallow, select_),
  };
  NetProto_Swallow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Swallow_descriptor_,
      NetProto_Swallow::default_instance_,
      NetProto_Swallow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Swallow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Swallow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Swallow));
  NetProto_Swallow_ID_descriptor_ = NetProto_Swallow_descriptor_->enum_type(0);
  NetProto_GodPackage_descriptor_ = file->message_type(182);
  static const int NetProto_GodPackage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPackage, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPackage, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPackage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPackage, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPackage, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPackage, quality_),
  };
  NetProto_GodPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GodPackage_descriptor_,
      NetProto_GodPackage::default_instance_,
      NetProto_GodPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GodPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GodPackage));
  NetProto_GodPackage_ID_descriptor_ = NetProto_GodPackage_descriptor_->enum_type(0);
  NetProto_WearGodShip_descriptor_ = file->message_type(183);
  static const int NetProto_WearGodShip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WearGodShip, index_),
  };
  NetProto_WearGodShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_WearGodShip_descriptor_,
      NetProto_WearGodShip::default_instance_,
      NetProto_WearGodShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WearGodShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_WearGodShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_WearGodShip));
  NetProto_WearGodShip_ID_descriptor_ = NetProto_WearGodShip_descriptor_->enum_type(0);
  NetProto_UnWearGodShip_descriptor_ = file->message_type(184);
  static const int NetProto_UnWearGodShip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnWearGodShip, index_),
  };
  NetProto_UnWearGodShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UnWearGodShip_descriptor_,
      NetProto_UnWearGodShip::default_instance_,
      NetProto_UnWearGodShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnWearGodShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnWearGodShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UnWearGodShip));
  NetProto_UnWearGodShip_ID_descriptor_ = NetProto_UnWearGodShip_descriptor_->enum_type(0);
  NetProto_ArrangeGodShip_descriptor_ = file->message_type(185);
  static const int NetProto_ArrangeGodShip_offsets_[1] = {
  };
  NetProto_ArrangeGodShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ArrangeGodShip_descriptor_,
      NetProto_ArrangeGodShip::default_instance_,
      NetProto_ArrangeGodShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ArrangeGodShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ArrangeGodShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ArrangeGodShip));
  NetProto_ArrangeGodShip_ID_descriptor_ = NetProto_ArrangeGodShip_descriptor_->enum_type(0);
  NetProto_RidesUP_descriptor_ = file->message_type(186);
  static const int NetProto_RidesUP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesUP, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesUP, star_),
  };
  NetProto_RidesUP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RidesUP_descriptor_,
      NetProto_RidesUP::default_instance_,
      NetProto_RidesUP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesUP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesUP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RidesUP));
  NetProto_RidesUP_ID_descriptor_ = NetProto_RidesUP_descriptor_->enum_type(0);
  NetProto_RidesInherit_descriptor_ = file->message_type(187);
  static const int NetProto_RidesInherit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesInherit, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesInherit, ridesExpend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesInherit, curExp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesInherit, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesInherit, potential_),
  };
  NetProto_RidesInherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RidesInherit_descriptor_,
      NetProto_RidesInherit::default_instance_,
      NetProto_RidesInherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesInherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesInherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RidesInherit));
  NetProto_RidesInherit_ID_descriptor_ = NetProto_RidesInherit_descriptor_->enum_type(0);
  NetProto_SingleGodShip_descriptor_ = file->message_type(188);
  static const int NetProto_SingleGodShip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SingleGodShip, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SingleGodShip, eat_),
  };
  NetProto_SingleGodShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SingleGodShip_descriptor_,
      NetProto_SingleGodShip::default_instance_,
      NetProto_SingleGodShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SingleGodShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SingleGodShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SingleGodShip));
  NetProto_SingleGodShip_ID_descriptor_ = NetProto_SingleGodShip_descriptor_->enum_type(0);
  NetProto_RidesLockAtt_descriptor_ = file->message_type(189);
  static const int NetProto_RidesLockAtt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesLockAtt, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesLockAtt, lockIndex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesLockAtt, lock_),
  };
  NetProto_RidesLockAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RidesLockAtt_descriptor_,
      NetProto_RidesLockAtt::default_instance_,
      NetProto_RidesLockAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesLockAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesLockAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RidesLockAtt));
  NetProto_RidesLockAtt_ID_descriptor_ = NetProto_RidesLockAtt_descriptor_->enum_type(0);
  NetProto_RidesConfirmTrain_descriptor_ = file->message_type(190);
  static const int NetProto_RidesConfirmTrain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesConfirmTrain, index_),
  };
  NetProto_RidesConfirmTrain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RidesConfirmTrain_descriptor_,
      NetProto_RidesConfirmTrain::default_instance_,
      NetProto_RidesConfirmTrain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesConfirmTrain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesConfirmTrain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RidesConfirmTrain));
  NetProto_RidesConfirmTrain_ID_descriptor_ = NetProto_RidesConfirmTrain_descriptor_->enum_type(0);
  NetProto_RidesUnLockAtt_descriptor_ = file->message_type(191);
  static const int NetProto_RidesUnLockAtt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesUnLockAtt, index_),
  };
  NetProto_RidesUnLockAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RidesUnLockAtt_descriptor_,
      NetProto_RidesUnLockAtt::default_instance_,
      NetProto_RidesUnLockAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesUnLockAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RidesUnLockAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RidesUnLockAtt));
  NetProto_RidesUnLockAtt_ID_descriptor_ = NetProto_RidesUnLockAtt_descriptor_->enum_type(0);
  NetProto_AddStatus_descriptor_ = file->message_type(192);
  static const int NetProto_AddStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddStatus, statusID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddStatus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddStatus, targetID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddStatus, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddStatus, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddStatus, delSkills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddStatus, aID_),
  };
  NetProto_AddStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddStatus_descriptor_,
      NetProto_AddStatus::default_instance_,
      NetProto_AddStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddStatus));
  NetProto_AddStatus_ID_descriptor_ = NetProto_AddStatus_descriptor_->enum_type(0);
  NetProto_AddStatus_Type_descriptor_ = NetProto_AddStatus_descriptor_->enum_type(1);
  NetProto_Hit_descriptor_ = file->message_type(193);
  static const int NetProto_Hit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hit, aSkillID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hit, dType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hit, dID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hit, aType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hit, aID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hit, statuses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hit, resistControl_),
  };
  NetProto_Hit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Hit_descriptor_,
      NetProto_Hit::default_instance_,
      NetProto_Hit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Hit));
  NetProto_Hit_ID_descriptor_ = NetProto_Hit_descriptor_->enum_type(0);
  NetProto_Hit_Type_descriptor_ = NetProto_Hit_descriptor_->enum_type(1);
  NetProto_StatusEffect_descriptor_ = file->message_type(194);
  static const int NetProto_StatusEffect_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatusEffect, statusType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatusEffect, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatusEffect, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatusEffect, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatusEffect, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatusEffect, skillID_),
  };
  NetProto_StatusEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_StatusEffect_descriptor_,
      NetProto_StatusEffect::default_instance_,
      NetProto_StatusEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatusEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatusEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_StatusEffect));
  NetProto_StatusEffect_ID_descriptor_ = NetProto_StatusEffect_descriptor_->enum_type(0);
  NetProto_StatusEffect_Type_descriptor_ = NetProto_StatusEffect_descriptor_->enum_type(1);
  NetProto_StatusEffect_Effect_descriptor_ = NetProto_StatusEffect_descriptor_->enum_type(2);
  NetProto_StaticOver_descriptor_ = file->message_type(195);
  static const int NetProto_StaticOver_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StaticOver, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StaticOver, id_),
  };
  NetProto_StaticOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_StaticOver_descriptor_,
      NetProto_StaticOver::default_instance_,
      NetProto_StaticOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StaticOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StaticOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_StaticOver));
  NetProto_StaticOver_ID_descriptor_ = NetProto_StaticOver_descriptor_->enum_type(0);
  NetProto_StaticOver_Type_descriptor_ = NetProto_StaticOver_descriptor_->enum_type(1);
  NetProto_Standup_descriptor_ = file->message_type(196);
  static const int NetProto_Standup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Standup, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Standup, id_),
  };
  NetProto_Standup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Standup_descriptor_,
      NetProto_Standup::default_instance_,
      NetProto_Standup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Standup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Standup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Standup));
  NetProto_Standup_ID_descriptor_ = NetProto_Standup_descriptor_->enum_type(0);
  NetProto_Standup_Type_descriptor_ = NetProto_Standup_descriptor_->enum_type(1);
  NetProto_SkillLevelUp_descriptor_ = file->message_type(197);
  static const int NetProto_SkillLevelUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SkillLevelUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SkillLevelUp, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SkillLevelUp, money_),
  };
  NetProto_SkillLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SkillLevelUp_descriptor_,
      NetProto_SkillLevelUp::default_instance_,
      NetProto_SkillLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SkillLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SkillLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SkillLevelUp));
  NetProto_SkillLevelUp_ID_descriptor_ = NetProto_SkillLevelUp_descriptor_->enum_type(0);
  NetProto_ClearSkill_descriptor_ = file->message_type(198);
  static const int NetProto_ClearSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearSkill, id_),
  };
  NetProto_ClearSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ClearSkill_descriptor_,
      NetProto_ClearSkill::default_instance_,
      NetProto_ClearSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ClearSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ClearSkill));
  NetProto_ClearSkill_ID_descriptor_ = NetProto_ClearSkill_descriptor_->enum_type(0);
  NetProto_DestroySkill_descriptor_ = file->message_type(199);
  static const int NetProto_DestroySkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DestroySkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DestroySkill, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DestroySkill, immediately_),
  };
  NetProto_DestroySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DestroySkill_descriptor_,
      NetProto_DestroySkill::default_instance_,
      NetProto_DestroySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DestroySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DestroySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DestroySkill));
  NetProto_DestroySkill_ID_descriptor_ = NetProto_DestroySkill_descriptor_->enum_type(0);
  NetProto_AddGoods_descriptor_ = file->message_type(200);
  static const int NetProto_AddGoods_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddGoods, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddGoods, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddGoods, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddGoods, id_),
  };
  NetProto_AddGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddGoods_descriptor_,
      NetProto_AddGoods::default_instance_,
      NetProto_AddGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddGoods));
  NetProto_AddGoods_ID_descriptor_ = NetProto_AddGoods_descriptor_->enum_type(0);
  NetProto_AddGoods_Type_descriptor_ = NetProto_AddGoods_descriptor_->enum_type(1);
  NetProto_AddEquipments_descriptor_ = file->message_type(201);
  static const int NetProto_AddEquipments_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddEquipments, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddEquipments, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddEquipments, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddEquipments, id_),
  };
  NetProto_AddEquipments_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddEquipments_descriptor_,
      NetProto_AddEquipments::default_instance_,
      NetProto_AddEquipments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddEquipments, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddEquipments, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddEquipments));
  NetProto_AddEquipments_ID_descriptor_ = NetProto_AddEquipments_descriptor_->enum_type(0);
  NetProto_AddEquipments_Type_descriptor_ = NetProto_AddEquipments_descriptor_->enum_type(1);
  NetProto_ShiftItem_descriptor_ = file->message_type(202);
  static const int NetProto_ShiftItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShiftItem, prevType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShiftItem, prevPos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShiftItem, newType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShiftItem, newPos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShiftItem, count_),
  };
  NetProto_ShiftItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ShiftItem_descriptor_,
      NetProto_ShiftItem::default_instance_,
      NetProto_ShiftItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShiftItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShiftItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ShiftItem));
  NetProto_ShiftItem_ID_descriptor_ = NetProto_ShiftItem_descriptor_->enum_type(0);
  NetProto_ShiftItem_Type_descriptor_ = NetProto_ShiftItem_descriptor_->enum_type(1);
  NetProto_QueryItemInfo_descriptor_ = file->message_type(203);
  static const int NetProto_QueryItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryItemInfo, id_),
  };
  NetProto_QueryItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_QueryItemInfo_descriptor_,
      NetProto_QueryItemInfo::default_instance_,
      NetProto_QueryItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_QueryItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_QueryItemInfo));
  NetProto_QueryItemInfo_ID_descriptor_ = NetProto_QueryItemInfo_descriptor_->enum_type(0);
  NetProto_QueryItemInfo_Type_descriptor_ = NetProto_QueryItemInfo_descriptor_->enum_type(1);
  NetProto_BuyItem_descriptor_ = file->message_type(204);
  static const int NetProto_BuyItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyItem, business_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyItem, count_),
  };
  NetProto_BuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BuyItem_descriptor_,
      NetProto_BuyItem::default_instance_,
      NetProto_BuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BuyItem));
  NetProto_BuyItem_ID_descriptor_ = NetProto_BuyItem_descriptor_->enum_type(0);
  NetProto_SellItem_descriptor_ = file->message_type(205);
  static const int NetProto_SellItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SellItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SellItem, count_),
  };
  NetProto_SellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SellItem_descriptor_,
      NetProto_SellItem::default_instance_,
      NetProto_SellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SellItem));
  NetProto_SellItem_ID_descriptor_ = NetProto_SellItem_descriptor_->enum_type(0);
  NetProto_Repair_descriptor_ = file->message_type(206);
  static const int NetProto_Repair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Repair, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Repair, price_),
  };
  NetProto_Repair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Repair_descriptor_,
      NetProto_Repair::default_instance_,
      NetProto_Repair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Repair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Repair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Repair));
  NetProto_Repair_ID_descriptor_ = NetProto_Repair_descriptor_->enum_type(0);
  NetProto_UseGoods_descriptor_ = file->message_type(207);
  static const int NetProto_UseGoods_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UseGoods, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UseGoods, boxItems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UseGoods, all_),
  };
  NetProto_UseGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UseGoods_descriptor_,
      NetProto_UseGoods::default_instance_,
      NetProto_UseGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UseGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UseGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UseGoods));
  NetProto_UseGoods_ID_descriptor_ = NetProto_UseGoods_descriptor_->enum_type(0);
  NetProto_UnlockPackage_descriptor_ = file->message_type(208);
  static const int NetProto_UnlockPackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockPackage, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockPackage, count_),
  };
  NetProto_UnlockPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UnlockPackage_descriptor_,
      NetProto_UnlockPackage::default_instance_,
      NetProto_UnlockPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnlockPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UnlockPackage));
  NetProto_UnlockPackage_ID_descriptor_ = NetProto_UnlockPackage_descriptor_->enum_type(0);
  NetProto_RecoverDurability_descriptor_ = file->message_type(209);
  static const int NetProto_RecoverDurability_offsets_[1] = {
  };
  NetProto_RecoverDurability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RecoverDurability_descriptor_,
      NetProto_RecoverDurability::default_instance_,
      NetProto_RecoverDurability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RecoverDurability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RecoverDurability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RecoverDurability));
  NetProto_RecoverDurability_ID_descriptor_ = NetProto_RecoverDurability_descriptor_->enum_type(0);
  NetProto_AddDesignation_descriptor_ = file->message_type(210);
  static const int NetProto_AddDesignation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddDesignation, id_),
  };
  NetProto_AddDesignation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddDesignation_descriptor_,
      NetProto_AddDesignation::default_instance_,
      NetProto_AddDesignation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddDesignation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddDesignation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddDesignation));
  NetProto_AddDesignation_ID_descriptor_ = NetProto_AddDesignation_descriptor_->enum_type(0);
  NetProto_DelDesignation_descriptor_ = file->message_type(211);
  static const int NetProto_DelDesignation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelDesignation, id_),
  };
  NetProto_DelDesignation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DelDesignation_descriptor_,
      NetProto_DelDesignation::default_instance_,
      NetProto_DelDesignation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelDesignation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelDesignation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DelDesignation));
  NetProto_DelDesignation_ID_descriptor_ = NetProto_DelDesignation_descriptor_->enum_type(0);
  NetProto_ShowDesignation_descriptor_ = file->message_type(212);
  static const int NetProto_ShowDesignation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShowDesignation, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShowDesignation, id_),
  };
  NetProto_ShowDesignation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ShowDesignation_descriptor_,
      NetProto_ShowDesignation::default_instance_,
      NetProto_ShowDesignation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShowDesignation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ShowDesignation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ShowDesignation));
  NetProto_ShowDesignation_ID_descriptor_ = NetProto_ShowDesignation_descriptor_->enum_type(0);
  NetProto_UnshowDesignation_descriptor_ = file->message_type(213);
  static const int NetProto_UnshowDesignation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnshowDesignation, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnshowDesignation, id_),
  };
  NetProto_UnshowDesignation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UnshowDesignation_descriptor_,
      NetProto_UnshowDesignation::default_instance_,
      NetProto_UnshowDesignation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnshowDesignation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UnshowDesignation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UnshowDesignation));
  NetProto_UnshowDesignation_ID_descriptor_ = NetProto_UnshowDesignation_descriptor_->enum_type(0);
  NetProto_Recharge_descriptor_ = file->message_type(214);
  static const int NetProto_Recharge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Recharge, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Recharge, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Recharge, v_),
  };
  NetProto_Recharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Recharge_descriptor_,
      NetProto_Recharge::default_instance_,
      NetProto_Recharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Recharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Recharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Recharge));
  NetProto_Recharge_ID_descriptor_ = NetProto_Recharge_descriptor_->enum_type(0);
  NetProto_BusinessInfo_descriptor_ = file->message_type(215);
  static const int NetProto_BusinessInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BusinessInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BusinessInfo, info_),
  };
  NetProto_BusinessInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BusinessInfo_descriptor_,
      NetProto_BusinessInfo::default_instance_,
      NetProto_BusinessInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BusinessInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BusinessInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BusinessInfo));
  NetProto_BusinessInfo_ID_descriptor_ = NetProto_BusinessInfo_descriptor_->enum_type(0);
  NetProto_TransformWar_descriptor_ = file->message_type(216);
  static const int NetProto_TransformWar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformWar, id_),
  };
  NetProto_TransformWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_TransformWar_descriptor_,
      NetProto_TransformWar::default_instance_,
      NetProto_TransformWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_TransformWar));
  NetProto_TransformWar_ID_descriptor_ = NetProto_TransformWar_descriptor_->enum_type(0);
  NetProto_TransformLevelUp_descriptor_ = file->message_type(217);
  static const int NetProto_TransformLevelUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformLevelUp, id_),
  };
  NetProto_TransformLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_TransformLevelUp_descriptor_,
      NetProto_TransformLevelUp::default_instance_,
      NetProto_TransformLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_TransformLevelUp));
  NetProto_TransformLevelUp_ID_descriptor_ = NetProto_TransformLevelUp_descriptor_->enum_type(0);
  NetProto_TransformActive_descriptor_ = file->message_type(218);
  static const int NetProto_TransformActive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformActive, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformActive, index_),
  };
  NetProto_TransformActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_TransformActive_descriptor_,
      NetProto_TransformActive::default_instance_,
      NetProto_TransformActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TransformActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_TransformActive));
  NetProto_TransformActive_ID_descriptor_ = NetProto_TransformActive_descriptor_->enum_type(0);
  NetProto_Reservation_descriptor_ = file->message_type(219);
  static const int NetProto_Reservation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Reservation, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Reservation, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Reservation, time_),
  };
  NetProto_Reservation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Reservation_descriptor_,
      NetProto_Reservation::default_instance_,
      NetProto_Reservation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Reservation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Reservation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Reservation));
  NetProto_Reservation_ID_descriptor_ = NetProto_Reservation_descriptor_->enum_type(0);
  NetProto_OneReservation_descriptor_ = file->message_type(220);
  static const int NetProto_OneReservation_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, powerType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, roleID1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, roleID2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, name1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, fans1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, fans2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, type1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, type2_),
  };
  NetProto_OneReservation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_OneReservation_descriptor_,
      NetProto_OneReservation::default_instance_,
      NetProto_OneReservation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_OneReservation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_OneReservation));
  NetProto_ReservationList_descriptor_ = file->message_type(221);
  static const int NetProto_ReservationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReservationList, list_),
  };
  NetProto_ReservationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ReservationList_descriptor_,
      NetProto_ReservationList::default_instance_,
      NetProto_ReservationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReservationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReservationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ReservationList));
  NetProto_ReservationList_ID_descriptor_ = NetProto_ReservationList_descriptor_->enum_type(0);
  NetProto_Talk_descriptor_ = file->message_type(222);
  static const int NetProto_Talk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Talk, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Talk, pos_),
  };
  NetProto_Talk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Talk_descriptor_,
      NetProto_Talk::default_instance_,
      NetProto_Talk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Talk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Talk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Talk));
  NetProto_Talk_ID_descriptor_ = NetProto_Talk_descriptor_->enum_type(0);
  NetProto_Answer_descriptor_ = file->message_type(223);
  static const int NetProto_Answer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Answer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Answer, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Answer, str_),
  };
  NetProto_Answer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Answer_descriptor_,
      NetProto_Answer::default_instance_,
      NetProto_Answer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Answer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Answer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Answer));
  NetProto_Answer_ID_descriptor_ = NetProto_Answer_descriptor_->enum_type(0);
  NetProto_RequestFunc_descriptor_ = file->message_type(224);
  static const int NetProto_RequestFunc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RequestFunc, func_),
  };
  NetProto_RequestFunc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_RequestFunc_descriptor_,
      NetProto_RequestFunc::default_instance_,
      NetProto_RequestFunc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RequestFunc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_RequestFunc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_RequestFunc));
  NetProto_RequestFunc_ID_descriptor_ = NetProto_RequestFunc_descriptor_->enum_type(0);
  NetProto_ReplyFunc_descriptor_ = file->message_type(225);
  static const int NetProto_ReplyFunc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReplyFunc, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReplyFunc, mission_),
  };
  NetProto_ReplyFunc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ReplyFunc_descriptor_,
      NetProto_ReplyFunc::default_instance_,
      NetProto_ReplyFunc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReplyFunc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReplyFunc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ReplyFunc));
  NetProto_ReplyFunc_ID_descriptor_ = NetProto_ReplyFunc_descriptor_->enum_type(0);
  NetProto_ApplyMission_descriptor_ = file->message_type(226);
  static const int NetProto_ApplyMission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ApplyMission, id_),
  };
  NetProto_ApplyMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ApplyMission_descriptor_,
      NetProto_ApplyMission::default_instance_,
      NetProto_ApplyMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ApplyMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ApplyMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ApplyMission));
  NetProto_ApplyMission_ID_descriptor_ = NetProto_ApplyMission_descriptor_->enum_type(0);
  NetProto_CompleteMission_descriptor_ = file->message_type(227);
  static const int NetProto_CompleteMission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CompleteMission, id_),
  };
  NetProto_CompleteMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_CompleteMission_descriptor_,
      NetProto_CompleteMission::default_instance_,
      NetProto_CompleteMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CompleteMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CompleteMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_CompleteMission));
  NetProto_CompleteMission_ID_descriptor_ = NetProto_CompleteMission_descriptor_->enum_type(0);
  NetProto_GiveUpMission_descriptor_ = file->message_type(228);
  static const int NetProto_GiveUpMission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GiveUpMission, id_),
  };
  NetProto_GiveUpMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GiveUpMission_descriptor_,
      NetProto_GiveUpMission::default_instance_,
      NetProto_GiveUpMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GiveUpMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GiveUpMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GiveUpMission));
  NetProto_GiveUpMission_ID_descriptor_ = NetProto_GiveUpMission_descriptor_->enum_type(0);
  NetProto_Chat_descriptor_ = file->message_type(229);
  static const int NetProto_Chat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Chat, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Chat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Chat, sType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Chat, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Chat, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Chat, vip_),
  };
  NetProto_Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Chat_descriptor_,
      NetProto_Chat::default_instance_,
      NetProto_Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Chat));
  NetProto_Chat_ID_descriptor_ = NetProto_Chat_descriptor_->enum_type(0);
  NetProto_Chat_Channel_descriptor_ = NetProto_Chat_descriptor_->enum_type(1);
  NetProto_Chat_Type_descriptor_ = NetProto_Chat_descriptor_->enum_type(2);
  NetProto_Message_descriptor_ = file->message_type(230);
  static const int NetProto_Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Message, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Message, count_),
  };
  NetProto_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Message_descriptor_,
      NetProto_Message::default_instance_,
      NetProto_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Message));
  NetProto_Message_ID_descriptor_ = NetProto_Message_descriptor_->enum_type(0);
  NetProto_SendMail_descriptor_ = file->message_type(231);
  static const int NetProto_SendMail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SendMail, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SendMail, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SendMail, pos_),
  };
  NetProto_SendMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_SendMail_descriptor_,
      NetProto_SendMail::default_instance_,
      NetProto_SendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SendMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_SendMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_SendMail));
  NetProto_SendMail_ID_descriptor_ = NetProto_SendMail_descriptor_->enum_type(0);
  NetProto_GetMailItem_descriptor_ = file->message_type(232);
  static const int NetProto_GetMailItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetMailItem, id_),
  };
  NetProto_GetMailItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GetMailItem_descriptor_,
      NetProto_GetMailItem::default_instance_,
      NetProto_GetMailItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetMailItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GetMailItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GetMailItem));
  NetProto_GetMailItem_ID_descriptor_ = NetProto_GetMailItem_descriptor_->enum_type(0);
  NetProto_ReadMail_descriptor_ = file->message_type(233);
  static const int NetProto_ReadMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReadMail, id_),
  };
  NetProto_ReadMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ReadMail_descriptor_,
      NetProto_ReadMail::default_instance_,
      NetProto_ReadMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReadMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ReadMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ReadMail));
  NetProto_ReadMail_ID_descriptor_ = NetProto_ReadMail_descriptor_->enum_type(0);
  NetProto_DelMail_descriptor_ = file->message_type(234);
  static const int NetProto_DelMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelMail, id_),
  };
  NetProto_DelMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DelMail_descriptor_,
      NetProto_DelMail::default_instance_,
      NetProto_DelMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DelMail));
  NetProto_DelMail_ID_descriptor_ = NetProto_DelMail_descriptor_->enum_type(0);
  NetProto_GMLogin_descriptor_ = file->message_type(235);
  static const int NetProto_GMLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLogin, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLogin, permission_),
  };
  NetProto_GMLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMLogin_descriptor_,
      NetProto_GMLogin::default_instance_,
      NetProto_GMLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMLogin));
  NetProto_GMLogin_ID_descriptor_ = NetProto_GMLogin_descriptor_->enum_type(0);
  NetProto_GMLogin_OP_descriptor_ = NetProto_GMLogin_descriptor_->enum_type(1);
  NetProto_GMOrder_descriptor_ = file->message_type(236);
  static const int NetProto_GMOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOrder, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOrder, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOrder, nValue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOrder, fValue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOrder, sValue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOrder, res_),
  };
  NetProto_GMOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMOrder_descriptor_,
      NetProto_GMOrder::default_instance_,
      NetProto_GMOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMOrder));
  NetProto_GMOrder_ID_descriptor_ = NetProto_GMOrder_descriptor_->enum_type(0);
  NetProto_GMOrder_Type_descriptor_ = NetProto_GMOrder_descriptor_->enum_type(1);
  NetProto_GMOnlinePlayers_descriptor_ = file->message_type(237);
  static const int NetProto_GMOnlinePlayers_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOnlinePlayers, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOnlinePlayers, roleID_),
  };
  NetProto_GMOnlinePlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMOnlinePlayers_descriptor_,
      NetProto_GMOnlinePlayers::default_instance_,
      NetProto_GMOnlinePlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOnlinePlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOnlinePlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMOnlinePlayers));
  NetProto_GMOnlinePlayers_ID_descriptor_ = NetProto_GMOnlinePlayers_descriptor_->enum_type(0);
  NetProto_GMChat_descriptor_ = file->message_type(238);
  static const int NetProto_GMChat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChat, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChat, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChat, recver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChat, time_),
  };
  NetProto_GMChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMChat_descriptor_,
      NetProto_GMChat::default_instance_,
      NetProto_GMChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMChat));
  NetProto_GMChat_ID_descriptor_ = NetProto_GMChat_descriptor_->enum_type(0);
  NetProto_GMServerMgr_descriptor_ = file->message_type(239);
  static const int NetProto_GMServerMgr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMServerMgr, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMServerMgr, num_),
  };
  NetProto_GMServerMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMServerMgr_descriptor_,
      NetProto_GMServerMgr::default_instance_,
      NetProto_GMServerMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMServerMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMServerMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMServerMgr));
  NetProto_GMServerMgr_ID_descriptor_ = NetProto_GMServerMgr_descriptor_->enum_type(0);
  NetProto_GMPlayerQuery_descriptor_ = file->message_type(240);
  static const int NetProto_GMPlayerQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMPlayerQuery, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMPlayerQuery, online_),
  };
  NetProto_GMPlayerQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMPlayerQuery_descriptor_,
      NetProto_GMPlayerQuery::default_instance_,
      NetProto_GMPlayerQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMPlayerQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMPlayerQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMPlayerQuery));
  NetProto_GMPlayerQuery_ID_descriptor_ = NetProto_GMPlayerQuery_descriptor_->enum_type(0);
  NetProto_GMForbid_descriptor_ = file->message_type(241);
  static const int NetProto_GMForbid_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, select_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, startTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, endTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, GM_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, professionType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, id_),
  };
  NetProto_GMForbid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMForbid_descriptor_,
      NetProto_GMForbid::default_instance_,
      NetProto_GMForbid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMForbid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMForbid));
  NetProto_GMForbid_ID_descriptor_ = NetProto_GMForbid_descriptor_->enum_type(0);
  NetProto_GMForbid_Select_descriptor_ = NetProto_GMForbid_descriptor_->enum_type(1);
  NetProto_GMNotice_descriptor_ = file->message_type(242);
  static const int NetProto_GMNotice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, startTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, endTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, state1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, state2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, op_),
  };
  NetProto_GMNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMNotice_descriptor_,
      NetProto_GMNotice::default_instance_,
      NetProto_GMNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMNotice));
  NetProto_GMNotice_GMOP_descriptor_ = NetProto_GMNotice_descriptor_->enum_type(0);
  NetProto_GMRequest_descriptor_ = file->message_type(243);
  static const int NetProto_GMRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRequest, select_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRequest, forbid_),
  };
  NetProto_GMRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMRequest_descriptor_,
      NetProto_GMRequest::default_instance_,
      NetProto_GMRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMRequest));
  NetProto_GMRequest_ID_descriptor_ = NetProto_GMRequest_descriptor_->enum_type(0);
  NetProto_GMRequest_Select_descriptor_ = NetProto_GMRequest_descriptor_->enum_type(1);
  NetProto_GMShutDownServer_descriptor_ = file->message_type(244);
  static const int NetProto_GMShutDownServer_offsets_[1] = {
  };
  NetProto_GMShutDownServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMShutDownServer_descriptor_,
      NetProto_GMShutDownServer::default_instance_,
      NetProto_GMShutDownServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMShutDownServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMShutDownServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMShutDownServer));
  NetProto_GMShutDownServer_ID_descriptor_ = NetProto_GMShutDownServer_descriptor_->enum_type(0);
  NetProto_GMChatRecords_descriptor_ = file->message_type(245);
  static const int NetProto_GMChatRecords_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChatRecords, startTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChatRecords, endTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChatRecords, chat_),
  };
  NetProto_GMChatRecords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMChatRecords_descriptor_,
      NetProto_GMChatRecords::default_instance_,
      NetProto_GMChatRecords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChatRecords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChatRecords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMChatRecords));
  NetProto_GMChatRecords_ID_descriptor_ = NetProto_GMChatRecords_descriptor_->enum_type(0);
  NetProto_GMRegistrCount_descriptor_ = file->message_type(246);
  static const int NetProto_GMRegistrCount_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, startTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, endTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, deviceID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, allDeviceID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, accountID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, allAccountID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, allRoleID_),
  };
  NetProto_GMRegistrCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMRegistrCount_descriptor_,
      NetProto_GMRegistrCount::default_instance_,
      NetProto_GMRegistrCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegistrCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMRegistrCount));
  NetProto_GMRegistrCount_ID_descriptor_ = NetProto_GMRegistrCount_descriptor_->enum_type(0);
  NetProto_GMRoleCount_descriptor_ = file->message_type(247);
  static const int NetProto_GMRoleCount_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, startTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, endTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, maxCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, maxCountTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, minCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, minCountTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, interval_),
  };
  NetProto_GMRoleCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMRoleCount_descriptor_,
      NetProto_GMRoleCount::default_instance_,
      NetProto_GMRoleCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRoleCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMRoleCount));
  NetProto_GMRoleCount_ID_descriptor_ = NetProto_GMRoleCount_descriptor_->enum_type(0);
  LevelStatistics_descriptor_ = file->message_type(248);
  static const int LevelStatistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelStatistics, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelStatistics, count_),
  };
  LevelStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelStatistics_descriptor_,
      LevelStatistics::default_instance_,
      LevelStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelStatistics));
  NetProto_GMLevelStatistics_descriptor_ = file->message_type(249);
  static const int NetProto_GMLevelStatistics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLevelStatistics, startTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLevelStatistics, endTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLevelStatistics, array_),
  };
  NetProto_GMLevelStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMLevelStatistics_descriptor_,
      NetProto_GMLevelStatistics::default_instance_,
      NetProto_GMLevelStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLevelStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLevelStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMLevelStatistics));
  NetProto_GMLevelStatistics_ID_descriptor_ = NetProto_GMLevelStatistics_descriptor_->enum_type(0);
  NetProto_GMRankStatistics_descriptor_ = file->message_type(250);
  static const int NetProto_GMRankStatistics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRankStatistics, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRankStatistics, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRankStatistics, rank_),
  };
  NetProto_GMRankStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMRankStatistics_descriptor_,
      NetProto_GMRankStatistics::default_instance_,
      NetProto_GMRankStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRankStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRankStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMRankStatistics));
  NetProto_GMRankStatistics_ID_descriptor_ = NetProto_GMRankStatistics_descriptor_->enum_type(0);
  NetProto_GMOpenGuide_descriptor_ = file->message_type(251);
  static const int NetProto_GMOpenGuide_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOpenGuide, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOpenGuide, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOpenGuide, open_),
  };
  NetProto_GMOpenGuide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMOpenGuide_descriptor_,
      NetProto_GMOpenGuide::default_instance_,
      NetProto_GMOpenGuide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOpenGuide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOpenGuide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMOpenGuide));
  NetProto_GMOpenGuide_ID_descriptor_ = NetProto_GMOpenGuide_descriptor_->enum_type(0);
  NetProto_GMNoticeMgr_descriptor_ = file->message_type(252);
  static const int NetProto_GMNoticeMgr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNoticeMgr, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNoticeMgr, flag_),
  };
  NetProto_GMNoticeMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMNoticeMgr_descriptor_,
      NetProto_GMNoticeMgr::default_instance_,
      NetProto_GMNoticeMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNoticeMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMNoticeMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMNoticeMgr));
  NetProto_GMNoticeMgr_ID_descriptor_ = NetProto_GMNoticeMgr_descriptor_->enum_type(0);
  NetProto_GMRegister_descriptor_ = file->message_type(253);
  static const int NetProto_GMRegister_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegister, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegister, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegister, permission_),
  };
  NetProto_GMRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMRegister_descriptor_,
      NetProto_GMRegister::default_instance_,
      NetProto_GMRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMRegister));
  NetProto_GMRegister_ID_descriptor_ = NetProto_GMRegister_descriptor_->enum_type(0);
  NetProto_GMShutDownMessage_descriptor_ = file->message_type(254);
  static const int NetProto_GMShutDownMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMShutDownMessage, groupID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMShutDownMessage, unitID_),
  };
  NetProto_GMShutDownMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMShutDownMessage_descriptor_,
      NetProto_GMShutDownMessage::default_instance_,
      NetProto_GMShutDownMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMShutDownMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMShutDownMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMShutDownMessage));
  NetProto_GMShutDownMessage_ID_descriptor_ = NetProto_GMShutDownMessage_descriptor_->enum_type(0);
  NetProto_GMOpenMessage_descriptor_ = file->message_type(255);
  static const int NetProto_GMOpenMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOpenMessage, groupID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOpenMessage, unitID_),
  };
  NetProto_GMOpenMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMOpenMessage_descriptor_,
      NetProto_GMOpenMessage::default_instance_,
      NetProto_GMOpenMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOpenMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMOpenMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMOpenMessage));
  NetProto_GMOpenMessage_ID_descriptor_ = NetProto_GMOpenMessage_descriptor_->enum_type(0);
  NetProto_GMModifyVIP_descriptor_ = file->message_type(256);
  static const int NetProto_GMModifyVIP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMModifyVIP, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMModifyVIP, delta_),
  };
  NetProto_GMModifyVIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMModifyVIP_descriptor_,
      NetProto_GMModifyVIP::default_instance_,
      NetProto_GMModifyVIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMModifyVIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMModifyVIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMModifyVIP));
  NetProto_GMModifyVIP_ID_descriptor_ = NetProto_GMModifyVIP_descriptor_->enum_type(0);
  NetProto_GMAddExchange_descriptor_ = file->message_type(257);
  static const int NetProto_GMAddExchange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMAddExchange, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMAddExchange, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMAddExchange, endTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMAddExchange, giftID_),
  };
  NetProto_GMAddExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMAddExchange_descriptor_,
      NetProto_GMAddExchange::default_instance_,
      NetProto_GMAddExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMAddExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMAddExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMAddExchange));
  NetProto_GMAddExchange_ID_descriptor_ = NetProto_GMAddExchange_descriptor_->enum_type(0);
  NetProto_GMQueryFaction_descriptor_ = file->message_type(258);
  static const int NetProto_GMQueryFaction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMQueryFaction, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMQueryFaction, mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMQueryFaction, winName_),
  };
  NetProto_GMQueryFaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMQueryFaction_descriptor_,
      NetProto_GMQueryFaction::default_instance_,
      NetProto_GMQueryFaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMQueryFaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMQueryFaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMQueryFaction));
  NetProto_GMQueryFaction_ID_descriptor_ = NetProto_GMQueryFaction_descriptor_->enum_type(0);
  NetProto_GMChangeFactionMem_descriptor_ = file->message_type(259);
  static const int NetProto_GMChangeFactionMem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChangeFactionMem, factionName_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChangeFactionMem, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChangeFactionMem, flag_),
  };
  NetProto_GMChangeFactionMem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMChangeFactionMem_descriptor_,
      NetProto_GMChangeFactionMem::default_instance_,
      NetProto_GMChangeFactionMem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChangeFactionMem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMChangeFactionMem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMChangeFactionMem));
  NetProto_GMChangeFactionMem_ID_descriptor_ = NetProto_GMChangeFactionMem_descriptor_->enum_type(0);
  NetProto_GMAddRekooRole_descriptor_ = file->message_type(260);
  static const int NetProto_GMAddRekooRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMAddRekooRole, roleID_),
  };
  NetProto_GMAddRekooRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMAddRekooRole_descriptor_,
      NetProto_GMAddRekooRole::default_instance_,
      NetProto_GMAddRekooRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMAddRekooRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMAddRekooRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMAddRekooRole));
  NetProto_GMAddRekooRole_ID_descriptor_ = NetProto_GMAddRekooRole_descriptor_->enum_type(0);
  NetProto_GMLoginInfo_descriptor_ = file->message_type(261);
  static const int NetProto_GMLoginInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLoginInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLoginInfo, str_),
  };
  NetProto_GMLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_GMLoginInfo_descriptor_,
      NetProto_GMLoginInfo::default_instance_,
      NetProto_GMLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_GMLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_GMLoginInfo));
  NetProto_GMLoginInfo_ID_descriptor_ = NetProto_GMLoginInfo_descriptor_->enum_type(0);
  NetProto_ObtainPet_descriptor_ = file->message_type(262);
  static const int NetProto_ObtainPet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ObtainPet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ObtainPet, index_),
  };
  NetProto_ObtainPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ObtainPet_descriptor_,
      NetProto_ObtainPet::default_instance_,
      NetProto_ObtainPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ObtainPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ObtainPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ObtainPet));
  NetProto_ObtainPet_ID_descriptor_ = NetProto_ObtainPet_descriptor_->enum_type(0);
  NetProto_PetFighting_descriptor_ = file->message_type(263);
  static const int NetProto_PetFighting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetFighting, index_),
  };
  NetProto_PetFighting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PetFighting_descriptor_,
      NetProto_PetFighting::default_instance_,
      NetProto_PetFighting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetFighting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetFighting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PetFighting));
  NetProto_PetFighting_ID_descriptor_ = NetProto_PetFighting_descriptor_->enum_type(0);
  NetProto_PetRest_descriptor_ = file->message_type(264);
  static const int NetProto_PetRest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetRest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetRest, flag_),
  };
  NetProto_PetRest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PetRest_descriptor_,
      NetProto_PetRest::default_instance_,
      NetProto_PetRest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetRest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetRest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PetRest));
  NetProto_PetRest_ID_descriptor_ = NetProto_PetRest_descriptor_->enum_type(0);
  NetProto_PetAttach_descriptor_ = file->message_type(265);
  static const int NetProto_PetAttach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetAttach, index_),
  };
  NetProto_PetAttach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PetAttach_descriptor_,
      NetProto_PetAttach::default_instance_,
      NetProto_PetAttach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetAttach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetAttach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PetAttach));
  NetProto_PetAttach_ID_descriptor_ = NetProto_PetAttach_descriptor_->enum_type(0);
  NetProto_PetLevelUp_descriptor_ = file->message_type(266);
  static const int NetProto_PetLevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetLevelUp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetLevelUp, change_),
  };
  NetProto_PetLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PetLevelUp_descriptor_,
      NetProto_PetLevelUp::default_instance_,
      NetProto_PetLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PetLevelUp));
  NetProto_PetLevelUp_ID_descriptor_ = NetProto_PetLevelUp_descriptor_->enum_type(0);
  NetProto_PetLearnSkill_descriptor_ = file->message_type(267);
  static const int NetProto_PetLearnSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetLearnSkill, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetLearnSkill, skillID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetLearnSkill, skillsIndex_),
  };
  NetProto_PetLearnSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PetLearnSkill_descriptor_,
      NetProto_PetLearnSkill::default_instance_,
      NetProto_PetLearnSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetLearnSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetLearnSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PetLearnSkill));
  NetProto_PetLearnSkill_ID_descriptor_ = NetProto_PetLearnSkill_descriptor_->enum_type(0);
  NetProto_PetInherit_descriptor_ = file->message_type(268);
  static const int NetProto_PetInherit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetInherit, indexPre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetInherit, indexAfter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetInherit, inheritSkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetInherit, pet_),
  };
  NetProto_PetInherit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PetInherit_descriptor_,
      NetProto_PetInherit::default_instance_,
      NetProto_PetInherit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetInherit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetInherit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PetInherit));
  NetProto_PetInherit_ID_descriptor_ = NetProto_PetInherit_descriptor_->enum_type(0);
  NetProto_PetAdvance_descriptor_ = file->message_type(269);
  static const int NetProto_PetAdvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetAdvance, index_),
  };
  NetProto_PetAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PetAdvance_descriptor_,
      NetProto_PetAdvance::default_instance_,
      NetProto_PetAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PetAdvance));
  NetProto_PetAdvance_ID_descriptor_ = NetProto_PetAdvance_descriptor_->enum_type(0);
  NetProto_PetPsychicsLevelUp_descriptor_ = file->message_type(270);
  static const int NetProto_PetPsychicsLevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetPsychicsLevelUp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetPsychicsLevelUp, res_),
  };
  NetProto_PetPsychicsLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PetPsychicsLevelUp_descriptor_,
      NetProto_PetPsychicsLevelUp::default_instance_,
      NetProto_PetPsychicsLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetPsychicsLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PetPsychicsLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PetPsychicsLevelUp));
  NetProto_PetPsychicsLevelUp_ID_descriptor_ = NetProto_PetPsychicsLevelUp_descriptor_->enum_type(0);
  NetProto_ActiveGemRequest_descriptor_ = file->message_type(271);
  static const int NetProto_ActiveGemRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveGemRequest, value_),
  };
  NetProto_ActiveGemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ActiveGemRequest_descriptor_,
      NetProto_ActiveGemRequest::default_instance_,
      NetProto_ActiveGemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveGemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveGemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ActiveGemRequest));
  NetProto_ActiveGemRequest_ID_descriptor_ = NetProto_ActiveGemRequest_descriptor_->enum_type(0);
  NetProto_ActiveDoubleGem_descriptor_ = file->message_type(272);
  static const int NetProto_ActiveDoubleGem_offsets_[1] = {
  };
  NetProto_ActiveDoubleGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ActiveDoubleGem_descriptor_,
      NetProto_ActiveDoubleGem::default_instance_,
      NetProto_ActiveDoubleGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveDoubleGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveDoubleGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ActiveDoubleGem));
  NetProto_ActiveDoubleGem_ID_descriptor_ = NetProto_ActiveDoubleGem_descriptor_->enum_type(0);
  NetProto_ActiveUpGradeGem_descriptor_ = file->message_type(273);
  static const int NetProto_ActiveUpGradeGem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveUpGradeGem, index_),
  };
  NetProto_ActiveUpGradeGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ActiveUpGradeGem_descriptor_,
      NetProto_ActiveUpGradeGem::default_instance_,
      NetProto_ActiveUpGradeGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveUpGradeGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveUpGradeGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ActiveUpGradeGem));
  NetProto_ActiveUpGradeGem_ID_descriptor_ = NetProto_ActiveUpGradeGem_descriptor_->enum_type(0);
  NetProto_ActiveGetGem_descriptor_ = file->message_type(274);
  static const int NetProto_ActiveGetGem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveGetGem, flag_),
  };
  NetProto_ActiveGetGem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ActiveGetGem_descriptor_,
      NetProto_ActiveGetGem::default_instance_,
      NetProto_ActiveGetGem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveGetGem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveGetGem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ActiveGetGem));
  NetProto_ActiveGetGem_ID_descriptor_ = NetProto_ActiveGetGem_descriptor_->enum_type(0);
  NetProto_ActiveFight_descriptor_ = file->message_type(275);
  static const int NetProto_ActiveFight_offsets_[1] = {
  };
  NetProto_ActiveFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ActiveFight_descriptor_,
      NetProto_ActiveFight::default_instance_,
      NetProto_ActiveFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ActiveFight));
  NetProto_ActiveFight_ID_descriptor_ = NetProto_ActiveFight_descriptor_->enum_type(0);
  NetProto_ActiveStrongeSolider_descriptor_ = file->message_type(276);
  static const int NetProto_ActiveStrongeSolider_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveStrongeSolider, count_),
  };
  NetProto_ActiveStrongeSolider_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ActiveStrongeSolider_descriptor_,
      NetProto_ActiveStrongeSolider::default_instance_,
      NetProto_ActiveStrongeSolider_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveStrongeSolider, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ActiveStrongeSolider, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ActiveStrongeSolider));
  NetProto_ActiveStrongeSolider_ID_descriptor_ = NetProto_ActiveStrongeSolider_descriptor_->enum_type(0);
  NetProto_EnterPlayOff_descriptor_ = file->message_type(277);
  static const int NetProto_EnterPlayOff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EnterPlayOff, id_),
  };
  NetProto_EnterPlayOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_EnterPlayOff_descriptor_,
      NetProto_EnterPlayOff::default_instance_,
      NetProto_EnterPlayOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EnterPlayOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_EnterPlayOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_EnterPlayOff));
  NetProto_EnterPlayOff_ID_descriptor_ = NetProto_EnterPlayOff_descriptor_->enum_type(0);
  NetProto_PlayOffInfo_descriptor_ = file->message_type(278);
  static const int NetProto_PlayOffInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, overTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, turn_),
  };
  NetProto_PlayOffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PlayOffInfo_descriptor_,
      NetProto_PlayOffInfo::default_instance_,
      NetProto_PlayOffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PlayOffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PlayOffInfo));
  NetProto_PlayOffInfo_ID_descriptor_ = NetProto_PlayOffInfo_descriptor_->enum_type(0);
  NetProto_PreparePlayOff_descriptor_ = file->message_type(279);
  static const int NetProto_PreparePlayOff_offsets_[1] = {
  };
  NetProto_PreparePlayOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_PreparePlayOff_descriptor_,
      NetProto_PreparePlayOff::default_instance_,
      NetProto_PreparePlayOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PreparePlayOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_PreparePlayOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_PreparePlayOff));
  NetProto_PreparePlayOff_ID_descriptor_ = NetProto_PreparePlayOff_descriptor_->enum_type(0);
  NetProto_Treasure_descriptor_ = file->message_type(280);
  static const int NetProto_Treasure_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Treasure, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Treasure, count_),
  };
  NetProto_Treasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Treasure_descriptor_,
      NetProto_Treasure::default_instance_,
      NetProto_Treasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Treasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Treasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Treasure));
  NetProto_Treasure_ID_descriptor_ = NetProto_Treasure_descriptor_->enum_type(0);
  NetProto_Hire_descriptor_ = file->message_type(281);
  static const int NetProto_Hire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hire, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hire, index_),
  };
  NetProto_Hire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Hire_descriptor_,
      NetProto_Hire::default_instance_,
      NetProto_Hire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Hire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Hire));
  NetProto_Hire_ID_descriptor_ = NetProto_Hire_descriptor_->enum_type(0);
  NetProto_MoneyTree_descriptor_ = file->message_type(282);
  static const int NetProto_MoneyTree_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_MoneyTree, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_MoneyTree, count_),
  };
  NetProto_MoneyTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_MoneyTree_descriptor_,
      NetProto_MoneyTree::default_instance_,
      NetProto_MoneyTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_MoneyTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_MoneyTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_MoneyTree));
  NetProto_MoneyTree_ID_descriptor_ = NetProto_MoneyTree_descriptor_->enum_type(0);
  NetProto_TreasureBox_descriptor_ = file->message_type(283);
  static const int NetProto_TreasureBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TreasureBox, items_),
  };
  NetProto_TreasureBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_TreasureBox_descriptor_,
      NetProto_TreasureBox::default_instance_,
      NetProto_TreasureBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TreasureBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TreasureBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_TreasureBox));
  NetProto_TreasureBox_ID_descriptor_ = NetProto_TreasureBox_descriptor_->enum_type(0);
  NetProto_FlyPlan_descriptor_ = file->message_type(284);
  static const int NetProto_FlyPlan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FlyPlan, index_),
  };
  NetProto_FlyPlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FlyPlan_descriptor_,
      NetProto_FlyPlan::default_instance_,
      NetProto_FlyPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FlyPlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FlyPlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FlyPlan));
  NetProto_FlyPlan_ID_descriptor_ = NetProto_FlyPlan_descriptor_->enum_type(0);
  NetProto_BlessCome_descriptor_ = file->message_type(285);
  static const int NetProto_BlessCome_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BlessCome, count_),
  };
  NetProto_BlessCome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_BlessCome_descriptor_,
      NetProto_BlessCome::default_instance_,
      NetProto_BlessCome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BlessCome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_BlessCome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_BlessCome));
  NetProto_BlessCome_ID_descriptor_ = NetProto_BlessCome_descriptor_->enum_type(0);
  NetProto_ModifyBlessScore_descriptor_ = file->message_type(286);
  static const int NetProto_ModifyBlessScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyBlessScore, bless_),
  };
  NetProto_ModifyBlessScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ModifyBlessScore_descriptor_,
      NetProto_ModifyBlessScore::default_instance_,
      NetProto_ModifyBlessScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyBlessScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ModifyBlessScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ModifyBlessScore));
  NetProto_ModifyBlessScore_ID_descriptor_ = NetProto_ModifyBlessScore_descriptor_->enum_type(0);
  NetProto_TopUpObtRMB_descriptor_ = file->message_type(287);
  static const int NetProto_TopUpObtRMB_offsets_[1] = {
  };
  NetProto_TopUpObtRMB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_TopUpObtRMB_descriptor_,
      NetProto_TopUpObtRMB::default_instance_,
      NetProto_TopUpObtRMB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TopUpObtRMB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_TopUpObtRMB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_TopUpObtRMB));
  NetProto_TopUpObtRMB_ID_descriptor_ = NetProto_TopUpObtRMB_descriptor_->enum_type(0);
  NetProto_ServerOpenTime_descriptor_ = file->message_type(288);
  static const int NetProto_ServerOpenTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerOpenTime, serverOpenTime_),
  };
  NetProto_ServerOpenTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_ServerOpenTime_descriptor_,
      NetProto_ServerOpenTime::default_instance_,
      NetProto_ServerOpenTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerOpenTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_ServerOpenTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_ServerOpenTime));
  NetProto_ServerOpenTime_ID_descriptor_ = NetProto_ServerOpenTime_descriptor_->enum_type(0);
  NetProto_InvateCode_descriptor_ = file->message_type(289);
  static const int NetProto_InvateCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvateCode, othercode_),
  };
  NetProto_InvateCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_InvateCode_descriptor_,
      NetProto_InvateCode::default_instance_,
      NetProto_InvateCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvateCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_InvateCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_InvateCode));
  NetProto_InvateCode_ID_descriptor_ = NetProto_InvateCode_descriptor_->enum_type(0);
  NetProto_UpdateInvateCount_descriptor_ = file->message_type(290);
  static const int NetProto_UpdateInvateCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UpdateInvateCount, count_),
  };
  NetProto_UpdateInvateCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_UpdateInvateCount_descriptor_,
      NetProto_UpdateInvateCount::default_instance_,
      NetProto_UpdateInvateCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UpdateInvateCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_UpdateInvateCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_UpdateInvateCount));
  NetProto_UpdateInvateCount_ID_descriptor_ = NetProto_UpdateInvateCount_descriptor_->enum_type(0);
  NetProto_CreateFaction_descriptor_ = file->message_type(291);
  static const int NetProto_CreateFaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateFaction, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateFaction, res_),
  };
  NetProto_CreateFaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_CreateFaction_descriptor_,
      NetProto_CreateFaction::default_instance_,
      NetProto_CreateFaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateFaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_CreateFaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_CreateFaction));
  NetProto_CreateFaction_ID_descriptor_ = NetProto_CreateFaction_descriptor_->enum_type(0);
  NetProto_DelFaction_descriptor_ = file->message_type(292);
  static const int NetProto_DelFaction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelFaction, res_),
  };
  NetProto_DelFaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DelFaction_descriptor_,
      NetProto_DelFaction::default_instance_,
      NetProto_DelFaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelFaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelFaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DelFaction));
  NetProto_DelFaction_ID_descriptor_ = NetProto_DelFaction_descriptor_->enum_type(0);
  NetProto_Donate_descriptor_ = file->message_type(293);
  static const int NetProto_Donate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Donate, type_),
  };
  NetProto_Donate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Donate_descriptor_,
      NetProto_Donate::default_instance_,
      NetProto_Donate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Donate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Donate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Donate));
  NetProto_Donate_ID_descriptor_ = NetProto_Donate_descriptor_->enum_type(0);
  NetProto_FactionNotice_descriptor_ = file->message_type(294);
  static const int NetProto_FactionNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionNotice, str_),
  };
  NetProto_FactionNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionNotice_descriptor_,
      NetProto_FactionNotice::default_instance_,
      NetProto_FactionNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionNotice));
  NetProto_FactionNotice_ID_descriptor_ = NetProto_FactionNotice_descriptor_->enum_type(0);
  NetProto_Designate_descriptor_ = file->message_type(295);
  static const int NetProto_Designate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Designate, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Designate, type_),
  };
  NetProto_Designate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Designate_descriptor_,
      NetProto_Designate::default_instance_,
      NetProto_Designate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Designate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Designate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Designate));
  NetProto_Designate_ID_descriptor_ = NetProto_Designate_descriptor_->enum_type(0);
  NetProto_AddMem_descriptor_ = file->message_type(296);
  static const int NetProto_AddMem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddMem, roleID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddMem, flag_),
  };
  NetProto_AddMem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AddMem_descriptor_,
      NetProto_AddMem::default_instance_,
      NetProto_AddMem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddMem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AddMem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AddMem));
  NetProto_AddMem_ID_descriptor_ = NetProto_AddMem_descriptor_->enum_type(0);
  NetProto_DelMem_descriptor_ = file->message_type(297);
  static const int NetProto_DelMem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelMem, roleID_),
  };
  NetProto_DelMem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_DelMem_descriptor_,
      NetProto_DelMem::default_instance_,
      NetProto_DelMem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelMem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_DelMem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_DelMem));
  NetProto_DelMem_ID_descriptor_ = NetProto_DelMem_descriptor_->enum_type(0);
  NetProto_Applicant_descriptor_ = file->message_type(298);
  static const int NetProto_Applicant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Applicant, str_),
  };
  NetProto_Applicant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Applicant_descriptor_,
      NetProto_Applicant::default_instance_,
      NetProto_Applicant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Applicant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Applicant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Applicant));
  NetProto_Applicant_ID_descriptor_ = NetProto_Applicant_descriptor_->enum_type(0);
  NetProto_Guardian_descriptor_ = file->message_type(299);
  static const int NetProto_Guardian_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Guardian, type_),
  };
  NetProto_Guardian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_Guardian_descriptor_,
      NetProto_Guardian::default_instance_,
      NetProto_Guardian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Guardian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_Guardian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_Guardian));
  NetProto_Guardian_ID_descriptor_ = NetProto_Guardian_descriptor_->enum_type(0);
  NetProto_FactionInfo_descriptor_ = file->message_type(300);
  static const int NetProto_FactionInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionInfo, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionInfo, level_),
  };
  NetProto_FactionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionInfo_descriptor_,
      NetProto_FactionInfo::default_instance_,
      NetProto_FactionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionInfo));
  NetProto_FactionInfo_ID_descriptor_ = NetProto_FactionInfo_descriptor_->enum_type(0);
  NetProto_FactionMem_descriptor_ = file->message_type(301);
  static const int NetProto_FactionMem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionMem, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionMem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionMem, office_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionMem, lastLoginTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionMem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionMem, roleID_),
  };
  NetProto_FactionMem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionMem_descriptor_,
      NetProto_FactionMem::default_instance_,
      NetProto_FactionMem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionMem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionMem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionMem));
  NetProto_FactionMem_ID_descriptor_ = NetProto_FactionMem_descriptor_->enum_type(0);
  NetProto_FactionChangeMem_descriptor_ = file->message_type(302);
  static const int NetProto_FactionChangeMem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionChangeMem, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionChangeMem, flag_),
  };
  NetProto_FactionChangeMem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionChangeMem_descriptor_,
      NetProto_FactionChangeMem::default_instance_,
      NetProto_FactionChangeMem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionChangeMem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionChangeMem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionChangeMem));
  NetProto_FactionChangeMem_ID_descriptor_ = NetProto_FactionChangeMem_descriptor_->enum_type(0);
  NetProto_FactionGuardian_descriptor_ = file->message_type(303);
  static const int NetProto_FactionGuardian_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionGuardian, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionGuardian, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionGuardian, type_),
  };
  NetProto_FactionGuardian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionGuardian_descriptor_,
      NetProto_FactionGuardian::default_instance_,
      NetProto_FactionGuardian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionGuardian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionGuardian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionGuardian));
  NetProto_FactionGuardian_ID_descriptor_ = NetProto_FactionGuardian_descriptor_->enum_type(0);
  NetProto_FactionApplicant_descriptor_ = file->message_type(304);
  static const int NetProto_FactionApplicant_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionApplicant, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionApplicant, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionApplicant, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionApplicant, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionApplicant, roleID_),
  };
  NetProto_FactionApplicant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionApplicant_descriptor_,
      NetProto_FactionApplicant::default_instance_,
      NetProto_FactionApplicant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionApplicant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionApplicant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionApplicant));
  NetProto_FactionApplicant_ID_descriptor_ = NetProto_FactionApplicant_descriptor_->enum_type(0);
  NetProto_FactionAllApplicant_descriptor_ = file->message_type(305);
  static const int NetProto_FactionAllApplicant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionAllApplicant, data_),
  };
  NetProto_FactionAllApplicant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionAllApplicant_descriptor_,
      NetProto_FactionAllApplicant::default_instance_,
      NetProto_FactionAllApplicant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionAllApplicant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionAllApplicant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionAllApplicant));
  NetProto_FactionAllApplicant_ID_descriptor_ = NetProto_FactionAllApplicant_descriptor_->enum_type(0);
  NetProto_FactionList_descriptor_ = file->message_type(306);
  static const int NetProto_FactionList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionList, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionList, str_),
  };
  NetProto_FactionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_FactionList_descriptor_,
      NetProto_FactionList::default_instance_,
      NetProto_FactionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_FactionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_FactionList));
  NetProto_FactionList_ID_descriptor_ = NetProto_FactionList_descriptor_->enum_type(0);
  NetProto_AcceptToFaction_descriptor_ = file->message_type(307);
  static const int NetProto_AcceptToFaction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AcceptToFaction, factionName_),
  };
  NetProto_AcceptToFaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AcceptToFaction_descriptor_,
      NetProto_AcceptToFaction::default_instance_,
      NetProto_AcceptToFaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AcceptToFaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AcceptToFaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AcceptToFaction));
  NetProto_AcceptToFaction_ID_descriptor_ = NetProto_AcceptToFaction_descriptor_->enum_type(0);
  NetProto_AsyncStatistics_descriptor_ = file->message_type(308);
  static const int NetProto_AsyncStatistics_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, isFirstIN_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, beginAutoInit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, beginDecompress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, decompressCur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, decompressTotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, beginInit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, checkVersion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, beginDownload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, needDownload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, downloadFile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, overDownloadFile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, endDownload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, beginLoad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, endLoad_),
  };
  NetProto_AsyncStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_AsyncStatistics_descriptor_,
      NetProto_AsyncStatistics::default_instance_,
      NetProto_AsyncStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_AsyncStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_AsyncStatistics));
  NetProto_AsyncStatistics_ID_descriptor_ = NetProto_AsyncStatistics_descriptor_->enum_type(0);
  NetProto_StatisticsAGSLoadScene_descriptor_ = file->message_type(309);
  static const int NetProto_StatisticsAGSLoadScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsAGSLoadScene, after_),
  };
  NetProto_StatisticsAGSLoadScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_StatisticsAGSLoadScene_descriptor_,
      NetProto_StatisticsAGSLoadScene::default_instance_,
      NetProto_StatisticsAGSLoadScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsAGSLoadScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsAGSLoadScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_StatisticsAGSLoadScene));
  NetProto_StatisticsAGSLoadScene_ID_descriptor_ = NetProto_StatisticsAGSLoadScene_descriptor_->enum_type(0);
  NetProto_StatisticsAGSLoadNPC_descriptor_ = file->message_type(310);
  static const int NetProto_StatisticsAGSLoadNPC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsAGSLoadNPC, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsAGSLoadNPC, after_),
  };
  NetProto_StatisticsAGSLoadNPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetProto_StatisticsAGSLoadNPC_descriptor_,
      NetProto_StatisticsAGSLoadNPC::default_instance_,
      NetProto_StatisticsAGSLoadNPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsAGSLoadNPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProto_StatisticsAGSLoadNPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetProto_StatisticsAGSLoadNPC));
  NetProto_StatisticsAGSLoadNPC_ID_descriptor_ = NetProto_StatisticsAGSLoadNPC_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NetProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ClientException_descriptor_, &NetProto_ClientException::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Heartbeat_descriptor_, &NetProto_Heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Login_descriptor_, &NetProto_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_LoginResult_descriptor_, &NetProto_LoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Logout_descriptor_, &NetProto_Logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SelectRole_descriptor_, &NetProto_SelectRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_CreateRole_descriptor_, &NetProto_CreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ServerTime_descriptor_, &NetProto_ServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RoleList_descriptor_, &NetProto_RoleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DeleteRole_descriptor_, &NetProto_DeleteRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ReLogin_descriptor_, &NetProto_ReLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ReLoginResult_descriptor_, &NetProto_ReLoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Rank_descriptor_, &NetProto_Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SetUp_descriptor_, &NetProto_SetUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Register_descriptor_, &NetProto_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GetKeyGift_descriptor_, &NetProto_GetKeyGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_StatisticsUIBtn_descriptor_, &NetProto_StatisticsUIBtn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_StatisticsGuide_descriptor_, &NetProto_StatisticsGuide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_LoginLaterTime_descriptor_, &NetProto_LoginLaterTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_TencentBuyGoodsUrl_descriptor_, &NetProto_TencentBuyGoodsUrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_LoginURL_descriptor_, &NetProto_LoginURL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RechargeParam_descriptor_, &NetProto_RechargeParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddPlayers_descriptor_, &NetProto_AddPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_LoadScene_descriptor_, &NetProto_LoadScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DoLoadScene_descriptor_, &NetProto_DoLoadScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_EndLoadScene_descriptor_, &NetProto_EndLoadScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddNPCs_descriptor_, &NetProto_AddNPCs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ClearRoom_descriptor_, &NetProto_ClearRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_OpenRoomBox_descriptor_, &NetProto_OpenRoomBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BeginWaitRoom_descriptor_, &NetProto_BeginWaitRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_EndWaitRoom_descriptor_, &NetProto_EndWaitRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GenNPCs_descriptor_, &NetProto_GenNPCs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ResetEvent_descriptor_, &NetProto_ResetEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_QuickFight_descriptor_, &NetProto_QuickFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Win_descriptor_, &NetProto_Win::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Lose_descriptor_, &NetProto_Lose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Timeout_descriptor_, &NetProto_Timeout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BeginWaitPVP_descriptor_, &NetProto_BeginWaitPVP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_EndWaitPVP_descriptor_, &NetProto_EndWaitPVP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Lottery_descriptor_, &NetProto_Lottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GetGift_descriptor_, &NetProto_GetGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SingleRecord_descriptor_, &NetProto_SingleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_EndLoadModel_descriptor_, &NetProto_EndLoadModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RoomWaitCount_descriptor_, &NetProto_RoomWaitCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PVPWaitCount_descriptor_, &NetProto_PVPWaitCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_CancelWaitRoom_descriptor_, &NetProto_CancelWaitRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_CancelWaitPVP_descriptor_, &NetProto_CancelWaitPVP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GetRes_descriptor_, &NetProto_GetRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Invest_descriptor_, &NetProto_Invest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_InvestAward_descriptor_, &NetProto_InvestAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_InvestAwardInfo_descriptor_, &NetProto_InvestAwardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SetDayEvent_descriptor_, &NetProto_SetDayEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SetFixedEvent_descriptor_, &NetProto_SetFixedEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Info_descriptor_, &NetProto_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Error_descriptor_, &NetProto_Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GodAward_descriptor_, &NetProto_GodAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_CreateRoom_descriptor_, &NetProto_CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_JoinRoom_descriptor_, &NetProto_JoinRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_LeaveRoom_descriptor_, &NetProto_LeaveRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DestroyRoom_descriptor_, &NetProto_DestroyRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RoomList_descriptor_, &NetProto_RoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_EvictRole_descriptor_, &NetProto_EvictRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_InviteFriend_descriptor_, &NetProto_InviteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BeginMultiRoom_descriptor_, &NetProto_BeginMultiRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ResetCheckPoint_descriptor_, &NetProto_ResetCheckPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GenPet_descriptor_, &NetProto_GenPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_OpenObstacle_descriptor_, &NetProto_OpenObstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RegistDeviceServer_descriptor_, &NetProto_RegistDeviceServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_StartLoad1_descriptor_, &NetProto_StartLoad1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_EndLoad1_descriptor_, &NetProto_EndLoad1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_StartLoad2_descriptor_, &NetProto_StartLoad2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_EndLoad2_descriptor_, &NetProto_EndLoad2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BeginFighting_descriptor_, &NetProto_BeginFighting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DelNPCs_descriptor_, &NetProto_DelNPCs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_WorldBossCurRank_descriptor_, &NetProto_WorldBossCurRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionWarCurRank_descriptor_, &NetProto_FactionWarCurRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionWarPrevWinner_descriptor_, &NetProto_FactionWarPrevWinner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GetMonthCardAward_descriptor_, &NetProto_GetMonthCardAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ExchangeGoods_descriptor_, &NetProto_ExchangeGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BuyMonthCard_descriptor_, &NetProto_BuyMonthCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UseLuckyCard_descriptor_, &NetProto_UseLuckyCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BIActive_descriptor_, &NetProto_BIActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Move_descriptor_, &NetProto_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Wear_descriptor_, &NetProto_Wear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Unwear_descriptor_, &NetProto_Unwear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Attack_descriptor_, &NetProto_Attack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DoAttack_descriptor_, &NetProto_DoAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SetPos_descriptor_, &NetProto_SetPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Die_descriptor_, &NetProto_Die::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Revive_descriptor_, &NetProto_Revive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyExp_descriptor_, &NetProto_ModifyExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PickItem_descriptor_, &NetProto_PickItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_LevelUp_descriptor_, &NetProto_LevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyMoney_descriptor_, &NetProto_ModifyMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GetItem_descriptor_, &NetProto_GetItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_QueryPlayer_descriptor_, &NetProto_QueryPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PlayerStatus_descriptor_, &NetProto_PlayerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddFriend_descriptor_, &NetProto_AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DelFriend_descriptor_, &NetProto_DelFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyHP_descriptor_, &NetProto_ModifyHP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyMana_descriptor_, &NetProto_ModifyMana::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyFaction_descriptor_, &NetProto_ModifyFaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyMaxHP_descriptor_, &NetProto_ModifyMaxHP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RequestPK_descriptor_, &NetProto_RequestPK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ApplyPK_descriptor_, &NetProto_ApplyPK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Strong_descriptor_, &NetProto_Strong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ClearStrong_descriptor_, &NetProto_ClearStrong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Transform_descriptor_, &NetProto_Transform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Mount_descriptor_, &NetProto_Mount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_TalkTo_descriptor_, &NetProto_TalkTo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Recover_descriptor_, &NetProto_Recover::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddBloodNode_descriptor_, &NetProto_AddBloodNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddBloodEffect_descriptor_, &NetProto_AddBloodEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Explore_descriptor_, &NetProto_Explore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UnlockBlood_descriptor_, &NetProto_UnlockBlood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UpdatePos_descriptor_, &NetProto_UpdatePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SayHello_descriptor_, &NetProto_SayHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_CompleteGuide_descriptor_, &NetProto_CompleteGuide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Arrange_descriptor_, &NetProto_Arrange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_IgnorePK_descriptor_, &NetProto_IgnorePK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyRMB_descriptor_, &NetProto_ModifyRMB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifySoulJade_descriptor_, &NetProto_ModifySoulJade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifySoul_descriptor_, &NetProto_ModifySoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyHonor_descriptor_, &NetProto_ModifyHonor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyDurability_descriptor_, &NetProto_ModifyDurability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifySoulStone_descriptor_, &NetProto_ModifySoulStone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyPKScore_descriptor_, &NetProto_ModifyPKScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DelItem_descriptor_, &NetProto_DelItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyVIP_descriptor_, &NetProto_ModifyVIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RandomGodTarget_descriptor_, &NetProto_RandomGodTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Inspire_descriptor_, &NetProto_Inspire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RequestGodTarget_descriptor_, &NetProto_RequestGodTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyGodScore_descriptor_, &NetProto_ModifyGodScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GodRank_descriptor_, &NetProto_GodRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GetFashion_descriptor_, &NetProto_GetFashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SyncAtt_descriptor_, &NetProto_SyncAtt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifySubRMB_descriptor_, &NetProto_ModifySubRMB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GenEquip_descriptor_, &NetProto_GenEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GenGem_descriptor_, &NetProto_GenGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UnlockHole_descriptor_, &NetProto_UnlockHole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UnmountGem_descriptor_, &NetProto_UnmountGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_EnhanceDelta_descriptor_, &NetProto_EnhanceDelta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Enhance_descriptor_, &NetProto_Enhance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Inherit_descriptor_, &NetProto_Inherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_StrongBaseWing_descriptor_, &NetProto_StrongBaseWing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BuyWing_descriptor_, &NetProto_BuyWing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_WearWing_descriptor_, &NetProto_WearWing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GetWing_descriptor_, &NetProto_GetWing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BuyFashion_descriptor_, &NetProto_BuyFashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_MakeFashionHole_descriptor_, &NetProto_MakeFashionHole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FashionInlay_descriptor_, &NetProto_FashionInlay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FashionUnInlay_descriptor_, &NetProto_FashionUnInlay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ServerLimitItem_descriptor_, &NetProto_ServerLimitItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FriendsLove_descriptor_, &NetProto_FriendsLove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ChangePartner_descriptor_, &NetProto_ChangePartner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddFansLove_descriptor_, &NetProto_AddFansLove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyLovePoint_descriptor_, &NetProto_ModifyLovePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BuyDurability_descriptor_, &NetProto_BuyDurability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_LoginObtRMB_descriptor_, &NetProto_LoginObtRMB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UnwearWing_descriptor_, &NetProto_UnwearWing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GetEquip_descriptor_, &NetProto_GetEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ResetCount_descriptor_, &NetProto_ResetCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GodPlayer_descriptor_, &NetProto_GodPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GodRandomPlayer_descriptor_, &NetProto_GodRandomPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GodRecords_descriptor_, &NetProto_GodRecords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GodPanel_descriptor_, &NetProto_GodPanel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SelectGodRole_descriptor_, &NetProto_SelectGodRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SetSpecial_descriptor_, &NetProto_SetSpecial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ResolveEquips_descriptor_, &NetProto_ResolveEquips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyPKScoreActive_descriptor_, &NetProto_ModifyPKScoreActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyRMBActive_descriptor_, &NetProto_ModifyRMBActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DropItem_descriptor_, &NetProto_DropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SellGoods_descriptor_, &NetProto_SellGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Luck_descriptor_, &NetProto_Luck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GrabRedEnvelope_descriptor_, &NetProto_GrabRedEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_CatGift_descriptor_, &NetProto_CatGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GroupPurchase_descriptor_, &NetProto_GroupPurchase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Rides_descriptor_, &NetProto_Rides::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RidesTrain_descriptor_, &NetProto_RidesTrain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GenRides_descriptor_, &NetProto_GenRides::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GodShip_descriptor_, &NetProto_GodShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Swallow_descriptor_, &NetProto_Swallow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GodPackage_descriptor_, &NetProto_GodPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_WearGodShip_descriptor_, &NetProto_WearGodShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UnWearGodShip_descriptor_, &NetProto_UnWearGodShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ArrangeGodShip_descriptor_, &NetProto_ArrangeGodShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RidesUP_descriptor_, &NetProto_RidesUP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RidesInherit_descriptor_, &NetProto_RidesInherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SingleGodShip_descriptor_, &NetProto_SingleGodShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RidesLockAtt_descriptor_, &NetProto_RidesLockAtt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RidesConfirmTrain_descriptor_, &NetProto_RidesConfirmTrain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RidesUnLockAtt_descriptor_, &NetProto_RidesUnLockAtt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddStatus_descriptor_, &NetProto_AddStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Hit_descriptor_, &NetProto_Hit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_StatusEffect_descriptor_, &NetProto_StatusEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_StaticOver_descriptor_, &NetProto_StaticOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Standup_descriptor_, &NetProto_Standup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SkillLevelUp_descriptor_, &NetProto_SkillLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ClearSkill_descriptor_, &NetProto_ClearSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DestroySkill_descriptor_, &NetProto_DestroySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddGoods_descriptor_, &NetProto_AddGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddEquipments_descriptor_, &NetProto_AddEquipments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ShiftItem_descriptor_, &NetProto_ShiftItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_QueryItemInfo_descriptor_, &NetProto_QueryItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BuyItem_descriptor_, &NetProto_BuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SellItem_descriptor_, &NetProto_SellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Repair_descriptor_, &NetProto_Repair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UseGoods_descriptor_, &NetProto_UseGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UnlockPackage_descriptor_, &NetProto_UnlockPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RecoverDurability_descriptor_, &NetProto_RecoverDurability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddDesignation_descriptor_, &NetProto_AddDesignation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DelDesignation_descriptor_, &NetProto_DelDesignation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ShowDesignation_descriptor_, &NetProto_ShowDesignation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UnshowDesignation_descriptor_, &NetProto_UnshowDesignation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Recharge_descriptor_, &NetProto_Recharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BusinessInfo_descriptor_, &NetProto_BusinessInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_TransformWar_descriptor_, &NetProto_TransformWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_TransformLevelUp_descriptor_, &NetProto_TransformLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_TransformActive_descriptor_, &NetProto_TransformActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Reservation_descriptor_, &NetProto_Reservation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_OneReservation_descriptor_, &NetProto_OneReservation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ReservationList_descriptor_, &NetProto_ReservationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Talk_descriptor_, &NetProto_Talk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Answer_descriptor_, &NetProto_Answer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_RequestFunc_descriptor_, &NetProto_RequestFunc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ReplyFunc_descriptor_, &NetProto_ReplyFunc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ApplyMission_descriptor_, &NetProto_ApplyMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_CompleteMission_descriptor_, &NetProto_CompleteMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GiveUpMission_descriptor_, &NetProto_GiveUpMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Chat_descriptor_, &NetProto_Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Message_descriptor_, &NetProto_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_SendMail_descriptor_, &NetProto_SendMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GetMailItem_descriptor_, &NetProto_GetMailItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ReadMail_descriptor_, &NetProto_ReadMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DelMail_descriptor_, &NetProto_DelMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMLogin_descriptor_, &NetProto_GMLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMOrder_descriptor_, &NetProto_GMOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMOnlinePlayers_descriptor_, &NetProto_GMOnlinePlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMChat_descriptor_, &NetProto_GMChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMServerMgr_descriptor_, &NetProto_GMServerMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMPlayerQuery_descriptor_, &NetProto_GMPlayerQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMForbid_descriptor_, &NetProto_GMForbid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMNotice_descriptor_, &NetProto_GMNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMRequest_descriptor_, &NetProto_GMRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMShutDownServer_descriptor_, &NetProto_GMShutDownServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMChatRecords_descriptor_, &NetProto_GMChatRecords::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMRegistrCount_descriptor_, &NetProto_GMRegistrCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMRoleCount_descriptor_, &NetProto_GMRoleCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelStatistics_descriptor_, &LevelStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMLevelStatistics_descriptor_, &NetProto_GMLevelStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMRankStatistics_descriptor_, &NetProto_GMRankStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMOpenGuide_descriptor_, &NetProto_GMOpenGuide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMNoticeMgr_descriptor_, &NetProto_GMNoticeMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMRegister_descriptor_, &NetProto_GMRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMShutDownMessage_descriptor_, &NetProto_GMShutDownMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMOpenMessage_descriptor_, &NetProto_GMOpenMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMModifyVIP_descriptor_, &NetProto_GMModifyVIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMAddExchange_descriptor_, &NetProto_GMAddExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMQueryFaction_descriptor_, &NetProto_GMQueryFaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMChangeFactionMem_descriptor_, &NetProto_GMChangeFactionMem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMAddRekooRole_descriptor_, &NetProto_GMAddRekooRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_GMLoginInfo_descriptor_, &NetProto_GMLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ObtainPet_descriptor_, &NetProto_ObtainPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PetFighting_descriptor_, &NetProto_PetFighting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PetRest_descriptor_, &NetProto_PetRest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PetAttach_descriptor_, &NetProto_PetAttach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PetLevelUp_descriptor_, &NetProto_PetLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PetLearnSkill_descriptor_, &NetProto_PetLearnSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PetInherit_descriptor_, &NetProto_PetInherit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PetAdvance_descriptor_, &NetProto_PetAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PetPsychicsLevelUp_descriptor_, &NetProto_PetPsychicsLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ActiveGemRequest_descriptor_, &NetProto_ActiveGemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ActiveDoubleGem_descriptor_, &NetProto_ActiveDoubleGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ActiveUpGradeGem_descriptor_, &NetProto_ActiveUpGradeGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ActiveGetGem_descriptor_, &NetProto_ActiveGetGem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ActiveFight_descriptor_, &NetProto_ActiveFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ActiveStrongeSolider_descriptor_, &NetProto_ActiveStrongeSolider::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_EnterPlayOff_descriptor_, &NetProto_EnterPlayOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PlayOffInfo_descriptor_, &NetProto_PlayOffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_PreparePlayOff_descriptor_, &NetProto_PreparePlayOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Treasure_descriptor_, &NetProto_Treasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Hire_descriptor_, &NetProto_Hire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_MoneyTree_descriptor_, &NetProto_MoneyTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_TreasureBox_descriptor_, &NetProto_TreasureBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FlyPlan_descriptor_, &NetProto_FlyPlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_BlessCome_descriptor_, &NetProto_BlessCome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ModifyBlessScore_descriptor_, &NetProto_ModifyBlessScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_TopUpObtRMB_descriptor_, &NetProto_TopUpObtRMB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_ServerOpenTime_descriptor_, &NetProto_ServerOpenTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_InvateCode_descriptor_, &NetProto_InvateCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_UpdateInvateCount_descriptor_, &NetProto_UpdateInvateCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_CreateFaction_descriptor_, &NetProto_CreateFaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DelFaction_descriptor_, &NetProto_DelFaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Donate_descriptor_, &NetProto_Donate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionNotice_descriptor_, &NetProto_FactionNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Designate_descriptor_, &NetProto_Designate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AddMem_descriptor_, &NetProto_AddMem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_DelMem_descriptor_, &NetProto_DelMem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Applicant_descriptor_, &NetProto_Applicant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_Guardian_descriptor_, &NetProto_Guardian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionInfo_descriptor_, &NetProto_FactionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionMem_descriptor_, &NetProto_FactionMem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionChangeMem_descriptor_, &NetProto_FactionChangeMem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionGuardian_descriptor_, &NetProto_FactionGuardian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionApplicant_descriptor_, &NetProto_FactionApplicant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionAllApplicant_descriptor_, &NetProto_FactionAllApplicant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_FactionList_descriptor_, &NetProto_FactionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AcceptToFaction_descriptor_, &NetProto_AcceptToFaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_AsyncStatistics_descriptor_, &NetProto_AsyncStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_StatisticsAGSLoadScene_descriptor_, &NetProto_StatisticsAGSLoadScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetProto_StatisticsAGSLoadNPC_descriptor_, &NetProto_StatisticsAGSLoadNPC::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NetProto_2eproto() {
  delete NetProto_ClientException::default_instance_;
  delete NetProto_ClientException_reflection_;
  delete NetProto_Heartbeat::default_instance_;
  delete NetProto_Heartbeat_reflection_;
  delete NetProto_Login::default_instance_;
  delete NetProto_Login_reflection_;
  delete NetProto_LoginResult::default_instance_;
  delete NetProto_LoginResult_reflection_;
  delete NetProto_Logout::default_instance_;
  delete NetProto_Logout_reflection_;
  delete NetProto_SelectRole::default_instance_;
  delete NetProto_SelectRole_reflection_;
  delete NetProto_CreateRole::default_instance_;
  delete NetProto_CreateRole_reflection_;
  delete NetProto_ServerTime::default_instance_;
  delete NetProto_ServerTime_reflection_;
  delete NetProto_RoleList::default_instance_;
  delete NetProto_RoleList_reflection_;
  delete NetProto_DeleteRole::default_instance_;
  delete NetProto_DeleteRole_reflection_;
  delete NetProto_ReLogin::default_instance_;
  delete NetProto_ReLogin_reflection_;
  delete NetProto_ReLoginResult::default_instance_;
  delete NetProto_ReLoginResult_reflection_;
  delete NetProto_Rank::default_instance_;
  delete NetProto_Rank_reflection_;
  delete NetProto_SetUp::default_instance_;
  delete NetProto_SetUp_reflection_;
  delete NetProto_Register::default_instance_;
  delete NetProto_Register_reflection_;
  delete NetProto_GetKeyGift::default_instance_;
  delete NetProto_GetKeyGift_reflection_;
  delete NetProto_StatisticsUIBtn::default_instance_;
  delete NetProto_StatisticsUIBtn_reflection_;
  delete NetProto_StatisticsGuide::default_instance_;
  delete NetProto_StatisticsGuide_reflection_;
  delete NetProto_LoginLaterTime::default_instance_;
  delete NetProto_LoginLaterTime_reflection_;
  delete NetProto_TencentBuyGoodsUrl::default_instance_;
  delete NetProto_TencentBuyGoodsUrl_reflection_;
  delete NetProto_LoginURL::default_instance_;
  delete NetProto_LoginURL_reflection_;
  delete NetProto_RechargeParam::default_instance_;
  delete NetProto_RechargeParam_reflection_;
  delete NetProto_AddPlayers::default_instance_;
  delete NetProto_AddPlayers_reflection_;
  delete NetProto_LoadScene::default_instance_;
  delete NetProto_LoadScene_reflection_;
  delete NetProto_DoLoadScene::default_instance_;
  delete NetProto_DoLoadScene_reflection_;
  delete NetProto_EndLoadScene::default_instance_;
  delete NetProto_EndLoadScene_reflection_;
  delete NetProto_AddNPCs::default_instance_;
  delete NetProto_AddNPCs_reflection_;
  delete NetProto_ClearRoom::default_instance_;
  delete NetProto_ClearRoom_reflection_;
  delete NetProto_OpenRoomBox::default_instance_;
  delete NetProto_OpenRoomBox_reflection_;
  delete NetProto_BeginWaitRoom::default_instance_;
  delete NetProto_BeginWaitRoom_reflection_;
  delete NetProto_EndWaitRoom::default_instance_;
  delete NetProto_EndWaitRoom_reflection_;
  delete NetProto_GenNPCs::default_instance_;
  delete NetProto_GenNPCs_reflection_;
  delete NetProto_ResetEvent::default_instance_;
  delete NetProto_ResetEvent_reflection_;
  delete NetProto_QuickFight::default_instance_;
  delete NetProto_QuickFight_reflection_;
  delete NetProto_Win::default_instance_;
  delete NetProto_Win_reflection_;
  delete NetProto_Lose::default_instance_;
  delete NetProto_Lose_reflection_;
  delete NetProto_Timeout::default_instance_;
  delete NetProto_Timeout_reflection_;
  delete NetProto_BeginWaitPVP::default_instance_;
  delete NetProto_BeginWaitPVP_reflection_;
  delete NetProto_EndWaitPVP::default_instance_;
  delete NetProto_EndWaitPVP_reflection_;
  delete NetProto_Lottery::default_instance_;
  delete NetProto_Lottery_reflection_;
  delete NetProto_GetGift::default_instance_;
  delete NetProto_GetGift_reflection_;
  delete NetProto_SingleRecord::default_instance_;
  delete NetProto_SingleRecord_reflection_;
  delete NetProto_EndLoadModel::default_instance_;
  delete NetProto_EndLoadModel_reflection_;
  delete NetProto_RoomWaitCount::default_instance_;
  delete NetProto_RoomWaitCount_reflection_;
  delete NetProto_PVPWaitCount::default_instance_;
  delete NetProto_PVPWaitCount_reflection_;
  delete NetProto_CancelWaitRoom::default_instance_;
  delete NetProto_CancelWaitRoom_reflection_;
  delete NetProto_CancelWaitPVP::default_instance_;
  delete NetProto_CancelWaitPVP_reflection_;
  delete NetProto_GetRes::default_instance_;
  delete NetProto_GetRes_reflection_;
  delete NetProto_Invest::default_instance_;
  delete NetProto_Invest_reflection_;
  delete NetProto_InvestAward::default_instance_;
  delete NetProto_InvestAward_reflection_;
  delete NetProto_InvestAwardInfo::default_instance_;
  delete NetProto_InvestAwardInfo_reflection_;
  delete NetProto_SetDayEvent::default_instance_;
  delete NetProto_SetDayEvent_reflection_;
  delete NetProto_SetFixedEvent::default_instance_;
  delete NetProto_SetFixedEvent_reflection_;
  delete NetProto_Info::default_instance_;
  delete NetProto_Info_reflection_;
  delete NetProto_Error::default_instance_;
  delete NetProto_Error_reflection_;
  delete NetProto_GodAward::default_instance_;
  delete NetProto_GodAward_reflection_;
  delete NetProto_CreateRoom::default_instance_;
  delete NetProto_CreateRoom_reflection_;
  delete NetProto_JoinRoom::default_instance_;
  delete NetProto_JoinRoom_reflection_;
  delete NetProto_LeaveRoom::default_instance_;
  delete NetProto_LeaveRoom_reflection_;
  delete NetProto_DestroyRoom::default_instance_;
  delete NetProto_DestroyRoom_reflection_;
  delete NetProto_RoomList::default_instance_;
  delete NetProto_RoomList_reflection_;
  delete NetProto_EvictRole::default_instance_;
  delete NetProto_EvictRole_reflection_;
  delete NetProto_InviteFriend::default_instance_;
  delete NetProto_InviteFriend_reflection_;
  delete NetProto_BeginMultiRoom::default_instance_;
  delete NetProto_BeginMultiRoom_reflection_;
  delete NetProto_ResetCheckPoint::default_instance_;
  delete NetProto_ResetCheckPoint_reflection_;
  delete NetProto_GenPet::default_instance_;
  delete NetProto_GenPet_reflection_;
  delete NetProto_OpenObstacle::default_instance_;
  delete NetProto_OpenObstacle_reflection_;
  delete NetProto_RegistDeviceServer::default_instance_;
  delete NetProto_RegistDeviceServer_reflection_;
  delete NetProto_StartLoad1::default_instance_;
  delete NetProto_StartLoad1_reflection_;
  delete NetProto_EndLoad1::default_instance_;
  delete NetProto_EndLoad1_reflection_;
  delete NetProto_StartLoad2::default_instance_;
  delete NetProto_StartLoad2_reflection_;
  delete NetProto_EndLoad2::default_instance_;
  delete NetProto_EndLoad2_reflection_;
  delete NetProto_BeginFighting::default_instance_;
  delete NetProto_BeginFighting_reflection_;
  delete NetProto_DelNPCs::default_instance_;
  delete NetProto_DelNPCs_reflection_;
  delete NetProto_WorldBossCurRank::default_instance_;
  delete NetProto_WorldBossCurRank_reflection_;
  delete NetProto_FactionWarCurRank::default_instance_;
  delete NetProto_FactionWarCurRank_reflection_;
  delete NetProto_FactionWarPrevWinner::default_instance_;
  delete NetProto_FactionWarPrevWinner_reflection_;
  delete NetProto_GetMonthCardAward::default_instance_;
  delete NetProto_GetMonthCardAward_reflection_;
  delete NetProto_ExchangeGoods::default_instance_;
  delete NetProto_ExchangeGoods_reflection_;
  delete NetProto_BuyMonthCard::default_instance_;
  delete NetProto_BuyMonthCard_reflection_;
  delete NetProto_UseLuckyCard::default_instance_;
  delete NetProto_UseLuckyCard_reflection_;
  delete NetProto_BIActive::default_instance_;
  delete NetProto_BIActive_reflection_;
  delete NetProto_Move::default_instance_;
  delete NetProto_Move_reflection_;
  delete NetProto_Wear::default_instance_;
  delete NetProto_Wear_reflection_;
  delete NetProto_Unwear::default_instance_;
  delete NetProto_Unwear_reflection_;
  delete NetProto_Attack::default_instance_;
  delete NetProto_Attack_reflection_;
  delete NetProto_DoAttack::default_instance_;
  delete NetProto_DoAttack_reflection_;
  delete NetProto_SetPos::default_instance_;
  delete NetProto_SetPos_reflection_;
  delete NetProto_Die::default_instance_;
  delete NetProto_Die_reflection_;
  delete NetProto_Revive::default_instance_;
  delete NetProto_Revive_reflection_;
  delete NetProto_ModifyExp::default_instance_;
  delete NetProto_ModifyExp_reflection_;
  delete NetProto_PickItem::default_instance_;
  delete NetProto_PickItem_reflection_;
  delete NetProto_LevelUp::default_instance_;
  delete NetProto_LevelUp_reflection_;
  delete NetProto_ModifyMoney::default_instance_;
  delete NetProto_ModifyMoney_reflection_;
  delete NetProto_GetItem::default_instance_;
  delete NetProto_GetItem_reflection_;
  delete NetProto_QueryPlayer::default_instance_;
  delete NetProto_QueryPlayer_reflection_;
  delete NetProto_PlayerStatus::default_instance_;
  delete NetProto_PlayerStatus_reflection_;
  delete NetProto_AddFriend::default_instance_;
  delete NetProto_AddFriend_reflection_;
  delete NetProto_DelFriend::default_instance_;
  delete NetProto_DelFriend_reflection_;
  delete NetProto_ModifyHP::default_instance_;
  delete NetProto_ModifyHP_reflection_;
  delete NetProto_ModifyMana::default_instance_;
  delete NetProto_ModifyMana_reflection_;
  delete NetProto_ModifyFaction::default_instance_;
  delete NetProto_ModifyFaction_reflection_;
  delete NetProto_ModifyMaxHP::default_instance_;
  delete NetProto_ModifyMaxHP_reflection_;
  delete NetProto_RequestPK::default_instance_;
  delete NetProto_RequestPK_reflection_;
  delete NetProto_ApplyPK::default_instance_;
  delete NetProto_ApplyPK_reflection_;
  delete NetProto_Strong::default_instance_;
  delete NetProto_Strong_reflection_;
  delete NetProto_ClearStrong::default_instance_;
  delete NetProto_ClearStrong_reflection_;
  delete NetProto_Transform::default_instance_;
  delete NetProto_Transform_reflection_;
  delete NetProto_Mount::default_instance_;
  delete NetProto_Mount_reflection_;
  delete NetProto_TalkTo::default_instance_;
  delete NetProto_TalkTo_reflection_;
  delete NetProto_Recover::default_instance_;
  delete NetProto_Recover_reflection_;
  delete NetProto_AddBloodNode::default_instance_;
  delete NetProto_AddBloodNode_reflection_;
  delete NetProto_AddBloodEffect::default_instance_;
  delete NetProto_AddBloodEffect_reflection_;
  delete NetProto_Explore::default_instance_;
  delete NetProto_Explore_reflection_;
  delete NetProto_UnlockBlood::default_instance_;
  delete NetProto_UnlockBlood_reflection_;
  delete NetProto_UpdatePos::default_instance_;
  delete NetProto_UpdatePos_reflection_;
  delete NetProto_SayHello::default_instance_;
  delete NetProto_SayHello_reflection_;
  delete NetProto_CompleteGuide::default_instance_;
  delete NetProto_CompleteGuide_reflection_;
  delete NetProto_Arrange::default_instance_;
  delete NetProto_Arrange_reflection_;
  delete NetProto_IgnorePK::default_instance_;
  delete NetProto_IgnorePK_reflection_;
  delete NetProto_ModifyRMB::default_instance_;
  delete NetProto_ModifyRMB_reflection_;
  delete NetProto_ModifySoulJade::default_instance_;
  delete NetProto_ModifySoulJade_reflection_;
  delete NetProto_ModifySoul::default_instance_;
  delete NetProto_ModifySoul_reflection_;
  delete NetProto_ModifyHonor::default_instance_;
  delete NetProto_ModifyHonor_reflection_;
  delete NetProto_ModifyDurability::default_instance_;
  delete NetProto_ModifyDurability_reflection_;
  delete NetProto_ModifySoulStone::default_instance_;
  delete NetProto_ModifySoulStone_reflection_;
  delete NetProto_ModifyPKScore::default_instance_;
  delete NetProto_ModifyPKScore_reflection_;
  delete NetProto_DelItem::default_instance_;
  delete NetProto_DelItem_reflection_;
  delete NetProto_ModifyVIP::default_instance_;
  delete NetProto_ModifyVIP_reflection_;
  delete NetProto_RandomGodTarget::default_instance_;
  delete NetProto_RandomGodTarget_reflection_;
  delete NetProto_Inspire::default_instance_;
  delete NetProto_Inspire_reflection_;
  delete NetProto_RequestGodTarget::default_instance_;
  delete NetProto_RequestGodTarget_reflection_;
  delete NetProto_ModifyGodScore::default_instance_;
  delete NetProto_ModifyGodScore_reflection_;
  delete NetProto_GodRank::default_instance_;
  delete NetProto_GodRank_reflection_;
  delete NetProto_GetFashion::default_instance_;
  delete NetProto_GetFashion_reflection_;
  delete NetProto_SyncAtt::default_instance_;
  delete NetProto_SyncAtt_reflection_;
  delete NetProto_ModifySubRMB::default_instance_;
  delete NetProto_ModifySubRMB_reflection_;
  delete NetProto_GenEquip::default_instance_;
  delete NetProto_GenEquip_reflection_;
  delete NetProto_GenGem::default_instance_;
  delete NetProto_GenGem_reflection_;
  delete NetProto_UnlockHole::default_instance_;
  delete NetProto_UnlockHole_reflection_;
  delete NetProto_UnmountGem::default_instance_;
  delete NetProto_UnmountGem_reflection_;
  delete NetProto_EnhanceDelta::default_instance_;
  delete NetProto_EnhanceDelta_reflection_;
  delete NetProto_Enhance::default_instance_;
  delete NetProto_Enhance_reflection_;
  delete NetProto_Inherit::default_instance_;
  delete NetProto_Inherit_reflection_;
  delete NetProto_StrongBaseWing::default_instance_;
  delete NetProto_StrongBaseWing_reflection_;
  delete NetProto_BuyWing::default_instance_;
  delete NetProto_BuyWing_reflection_;
  delete NetProto_WearWing::default_instance_;
  delete NetProto_WearWing_reflection_;
  delete NetProto_GetWing::default_instance_;
  delete NetProto_GetWing_reflection_;
  delete NetProto_BuyFashion::default_instance_;
  delete NetProto_BuyFashion_reflection_;
  delete NetProto_MakeFashionHole::default_instance_;
  delete NetProto_MakeFashionHole_reflection_;
  delete NetProto_FashionInlay::default_instance_;
  delete NetProto_FashionInlay_reflection_;
  delete NetProto_FashionUnInlay::default_instance_;
  delete NetProto_FashionUnInlay_reflection_;
  delete NetProto_ServerLimitItem::default_instance_;
  delete NetProto_ServerLimitItem_reflection_;
  delete NetProto_FriendsLove::default_instance_;
  delete NetProto_FriendsLove_reflection_;
  delete NetProto_ChangePartner::default_instance_;
  delete NetProto_ChangePartner_reflection_;
  delete NetProto_AddFansLove::default_instance_;
  delete NetProto_AddFansLove_reflection_;
  delete NetProto_ModifyLovePoint::default_instance_;
  delete NetProto_ModifyLovePoint_reflection_;
  delete NetProto_BuyDurability::default_instance_;
  delete NetProto_BuyDurability_reflection_;
  delete NetProto_LoginObtRMB::default_instance_;
  delete NetProto_LoginObtRMB_reflection_;
  delete NetProto_UnwearWing::default_instance_;
  delete NetProto_UnwearWing_reflection_;
  delete NetProto_GetEquip::default_instance_;
  delete NetProto_GetEquip_reflection_;
  delete NetProto_ResetCount::default_instance_;
  delete NetProto_ResetCount_reflection_;
  delete NetProto_GodPlayer::default_instance_;
  delete NetProto_GodPlayer_reflection_;
  delete NetProto_GodRandomPlayer::default_instance_;
  delete NetProto_GodRandomPlayer_reflection_;
  delete NetProto_GodRecords::default_instance_;
  delete NetProto_GodRecords_reflection_;
  delete NetProto_GodPanel::default_instance_;
  delete NetProto_GodPanel_reflection_;
  delete NetProto_SelectGodRole::default_instance_;
  delete NetProto_SelectGodRole_reflection_;
  delete NetProto_SetSpecial::default_instance_;
  delete NetProto_SetSpecial_reflection_;
  delete NetProto_ResolveEquips::default_instance_;
  delete NetProto_ResolveEquips_reflection_;
  delete NetProto_ModifyPKScoreActive::default_instance_;
  delete NetProto_ModifyPKScoreActive_reflection_;
  delete NetProto_ModifyRMBActive::default_instance_;
  delete NetProto_ModifyRMBActive_reflection_;
  delete NetProto_DropItem::default_instance_;
  delete NetProto_DropItem_reflection_;
  delete NetProto_SellGoods::default_instance_;
  delete NetProto_SellGoods_reflection_;
  delete NetProto_Luck::default_instance_;
  delete NetProto_Luck_reflection_;
  delete NetProto_GrabRedEnvelope::default_instance_;
  delete NetProto_GrabRedEnvelope_reflection_;
  delete NetProto_CatGift::default_instance_;
  delete NetProto_CatGift_reflection_;
  delete NetProto_GroupPurchase::default_instance_;
  delete NetProto_GroupPurchase_reflection_;
  delete NetProto_Rides::default_instance_;
  delete NetProto_Rides_reflection_;
  delete NetProto_RidesTrain::default_instance_;
  delete NetProto_RidesTrain_reflection_;
  delete NetProto_GenRides::default_instance_;
  delete NetProto_GenRides_reflection_;
  delete NetProto_GodShip::default_instance_;
  delete NetProto_GodShip_reflection_;
  delete NetProto_Swallow::default_instance_;
  delete NetProto_Swallow_reflection_;
  delete NetProto_GodPackage::default_instance_;
  delete NetProto_GodPackage_reflection_;
  delete NetProto_WearGodShip::default_instance_;
  delete NetProto_WearGodShip_reflection_;
  delete NetProto_UnWearGodShip::default_instance_;
  delete NetProto_UnWearGodShip_reflection_;
  delete NetProto_ArrangeGodShip::default_instance_;
  delete NetProto_ArrangeGodShip_reflection_;
  delete NetProto_RidesUP::default_instance_;
  delete NetProto_RidesUP_reflection_;
  delete NetProto_RidesInherit::default_instance_;
  delete NetProto_RidesInherit_reflection_;
  delete NetProto_SingleGodShip::default_instance_;
  delete NetProto_SingleGodShip_reflection_;
  delete NetProto_RidesLockAtt::default_instance_;
  delete NetProto_RidesLockAtt_reflection_;
  delete NetProto_RidesConfirmTrain::default_instance_;
  delete NetProto_RidesConfirmTrain_reflection_;
  delete NetProto_RidesUnLockAtt::default_instance_;
  delete NetProto_RidesUnLockAtt_reflection_;
  delete NetProto_AddStatus::default_instance_;
  delete NetProto_AddStatus_reflection_;
  delete NetProto_Hit::default_instance_;
  delete NetProto_Hit_reflection_;
  delete NetProto_StatusEffect::default_instance_;
  delete NetProto_StatusEffect_reflection_;
  delete NetProto_StaticOver::default_instance_;
  delete NetProto_StaticOver_reflection_;
  delete NetProto_Standup::default_instance_;
  delete NetProto_Standup_reflection_;
  delete NetProto_SkillLevelUp::default_instance_;
  delete NetProto_SkillLevelUp_reflection_;
  delete NetProto_ClearSkill::default_instance_;
  delete NetProto_ClearSkill_reflection_;
  delete NetProto_DestroySkill::default_instance_;
  delete NetProto_DestroySkill_reflection_;
  delete NetProto_AddGoods::default_instance_;
  delete NetProto_AddGoods_reflection_;
  delete NetProto_AddEquipments::default_instance_;
  delete NetProto_AddEquipments_reflection_;
  delete NetProto_ShiftItem::default_instance_;
  delete NetProto_ShiftItem_reflection_;
  delete NetProto_QueryItemInfo::default_instance_;
  delete NetProto_QueryItemInfo_reflection_;
  delete NetProto_BuyItem::default_instance_;
  delete NetProto_BuyItem_reflection_;
  delete NetProto_SellItem::default_instance_;
  delete NetProto_SellItem_reflection_;
  delete NetProto_Repair::default_instance_;
  delete NetProto_Repair_reflection_;
  delete NetProto_UseGoods::default_instance_;
  delete NetProto_UseGoods_reflection_;
  delete NetProto_UnlockPackage::default_instance_;
  delete NetProto_UnlockPackage_reflection_;
  delete NetProto_RecoverDurability::default_instance_;
  delete NetProto_RecoverDurability_reflection_;
  delete NetProto_AddDesignation::default_instance_;
  delete NetProto_AddDesignation_reflection_;
  delete NetProto_DelDesignation::default_instance_;
  delete NetProto_DelDesignation_reflection_;
  delete NetProto_ShowDesignation::default_instance_;
  delete NetProto_ShowDesignation_reflection_;
  delete NetProto_UnshowDesignation::default_instance_;
  delete NetProto_UnshowDesignation_reflection_;
  delete NetProto_Recharge::default_instance_;
  delete NetProto_Recharge_reflection_;
  delete NetProto_BusinessInfo::default_instance_;
  delete NetProto_BusinessInfo_reflection_;
  delete NetProto_TransformWar::default_instance_;
  delete NetProto_TransformWar_reflection_;
  delete NetProto_TransformLevelUp::default_instance_;
  delete NetProto_TransformLevelUp_reflection_;
  delete NetProto_TransformActive::default_instance_;
  delete NetProto_TransformActive_reflection_;
  delete NetProto_Reservation::default_instance_;
  delete NetProto_Reservation_reflection_;
  delete NetProto_OneReservation::default_instance_;
  delete NetProto_OneReservation_reflection_;
  delete NetProto_ReservationList::default_instance_;
  delete NetProto_ReservationList_reflection_;
  delete NetProto_Talk::default_instance_;
  delete NetProto_Talk_reflection_;
  delete NetProto_Answer::default_instance_;
  delete NetProto_Answer_reflection_;
  delete NetProto_RequestFunc::default_instance_;
  delete NetProto_RequestFunc_reflection_;
  delete NetProto_ReplyFunc::default_instance_;
  delete NetProto_ReplyFunc_reflection_;
  delete NetProto_ApplyMission::default_instance_;
  delete NetProto_ApplyMission_reflection_;
  delete NetProto_CompleteMission::default_instance_;
  delete NetProto_CompleteMission_reflection_;
  delete NetProto_GiveUpMission::default_instance_;
  delete NetProto_GiveUpMission_reflection_;
  delete NetProto_Chat::default_instance_;
  delete NetProto_Chat_reflection_;
  delete NetProto_Message::default_instance_;
  delete NetProto_Message_reflection_;
  delete NetProto_SendMail::default_instance_;
  delete NetProto_SendMail_reflection_;
  delete NetProto_GetMailItem::default_instance_;
  delete NetProto_GetMailItem_reflection_;
  delete NetProto_ReadMail::default_instance_;
  delete NetProto_ReadMail_reflection_;
  delete NetProto_DelMail::default_instance_;
  delete NetProto_DelMail_reflection_;
  delete NetProto_GMLogin::default_instance_;
  delete NetProto_GMLogin_reflection_;
  delete NetProto_GMOrder::default_instance_;
  delete NetProto_GMOrder_reflection_;
  delete NetProto_GMOnlinePlayers::default_instance_;
  delete NetProto_GMOnlinePlayers_reflection_;
  delete NetProto_GMChat::default_instance_;
  delete NetProto_GMChat_reflection_;
  delete NetProto_GMServerMgr::default_instance_;
  delete NetProto_GMServerMgr_reflection_;
  delete NetProto_GMPlayerQuery::default_instance_;
  delete NetProto_GMPlayerQuery_reflection_;
  delete NetProto_GMForbid::default_instance_;
  delete NetProto_GMForbid_reflection_;
  delete NetProto_GMNotice::default_instance_;
  delete NetProto_GMNotice_reflection_;
  delete NetProto_GMRequest::default_instance_;
  delete NetProto_GMRequest_reflection_;
  delete NetProto_GMShutDownServer::default_instance_;
  delete NetProto_GMShutDownServer_reflection_;
  delete NetProto_GMChatRecords::default_instance_;
  delete NetProto_GMChatRecords_reflection_;
  delete NetProto_GMRegistrCount::default_instance_;
  delete NetProto_GMRegistrCount_reflection_;
  delete NetProto_GMRoleCount::default_instance_;
  delete NetProto_GMRoleCount_reflection_;
  delete LevelStatistics::default_instance_;
  delete LevelStatistics_reflection_;
  delete NetProto_GMLevelStatistics::default_instance_;
  delete NetProto_GMLevelStatistics_reflection_;
  delete NetProto_GMRankStatistics::default_instance_;
  delete NetProto_GMRankStatistics_reflection_;
  delete NetProto_GMOpenGuide::default_instance_;
  delete NetProto_GMOpenGuide_reflection_;
  delete NetProto_GMNoticeMgr::default_instance_;
  delete NetProto_GMNoticeMgr_reflection_;
  delete NetProto_GMRegister::default_instance_;
  delete NetProto_GMRegister_reflection_;
  delete NetProto_GMShutDownMessage::default_instance_;
  delete NetProto_GMShutDownMessage_reflection_;
  delete NetProto_GMOpenMessage::default_instance_;
  delete NetProto_GMOpenMessage_reflection_;
  delete NetProto_GMModifyVIP::default_instance_;
  delete NetProto_GMModifyVIP_reflection_;
  delete NetProto_GMAddExchange::default_instance_;
  delete NetProto_GMAddExchange_reflection_;
  delete NetProto_GMQueryFaction::default_instance_;
  delete NetProto_GMQueryFaction_reflection_;
  delete NetProto_GMChangeFactionMem::default_instance_;
  delete NetProto_GMChangeFactionMem_reflection_;
  delete NetProto_GMAddRekooRole::default_instance_;
  delete NetProto_GMAddRekooRole_reflection_;
  delete NetProto_GMLoginInfo::default_instance_;
  delete NetProto_GMLoginInfo_reflection_;
  delete NetProto_ObtainPet::default_instance_;
  delete NetProto_ObtainPet_reflection_;
  delete NetProto_PetFighting::default_instance_;
  delete NetProto_PetFighting_reflection_;
  delete NetProto_PetRest::default_instance_;
  delete NetProto_PetRest_reflection_;
  delete NetProto_PetAttach::default_instance_;
  delete NetProto_PetAttach_reflection_;
  delete NetProto_PetLevelUp::default_instance_;
  delete NetProto_PetLevelUp_reflection_;
  delete NetProto_PetLearnSkill::default_instance_;
  delete NetProto_PetLearnSkill_reflection_;
  delete NetProto_PetInherit::default_instance_;
  delete NetProto_PetInherit_reflection_;
  delete NetProto_PetAdvance::default_instance_;
  delete NetProto_PetAdvance_reflection_;
  delete NetProto_PetPsychicsLevelUp::default_instance_;
  delete NetProto_PetPsychicsLevelUp_reflection_;
  delete NetProto_ActiveGemRequest::default_instance_;
  delete NetProto_ActiveGemRequest_reflection_;
  delete NetProto_ActiveDoubleGem::default_instance_;
  delete NetProto_ActiveDoubleGem_reflection_;
  delete NetProto_ActiveUpGradeGem::default_instance_;
  delete NetProto_ActiveUpGradeGem_reflection_;
  delete NetProto_ActiveGetGem::default_instance_;
  delete NetProto_ActiveGetGem_reflection_;
  delete NetProto_ActiveFight::default_instance_;
  delete NetProto_ActiveFight_reflection_;
  delete NetProto_ActiveStrongeSolider::default_instance_;
  delete NetProto_ActiveStrongeSolider_reflection_;
  delete NetProto_EnterPlayOff::default_instance_;
  delete NetProto_EnterPlayOff_reflection_;
  delete NetProto_PlayOffInfo::default_instance_;
  delete NetProto_PlayOffInfo_reflection_;
  delete NetProto_PreparePlayOff::default_instance_;
  delete NetProto_PreparePlayOff_reflection_;
  delete NetProto_Treasure::default_instance_;
  delete NetProto_Treasure_reflection_;
  delete NetProto_Hire::default_instance_;
  delete NetProto_Hire_reflection_;
  delete NetProto_MoneyTree::default_instance_;
  delete NetProto_MoneyTree_reflection_;
  delete NetProto_TreasureBox::default_instance_;
  delete NetProto_TreasureBox_reflection_;
  delete NetProto_FlyPlan::default_instance_;
  delete NetProto_FlyPlan_reflection_;
  delete NetProto_BlessCome::default_instance_;
  delete NetProto_BlessCome_reflection_;
  delete NetProto_ModifyBlessScore::default_instance_;
  delete NetProto_ModifyBlessScore_reflection_;
  delete NetProto_TopUpObtRMB::default_instance_;
  delete NetProto_TopUpObtRMB_reflection_;
  delete NetProto_ServerOpenTime::default_instance_;
  delete NetProto_ServerOpenTime_reflection_;
  delete NetProto_InvateCode::default_instance_;
  delete NetProto_InvateCode_reflection_;
  delete NetProto_UpdateInvateCount::default_instance_;
  delete NetProto_UpdateInvateCount_reflection_;
  delete NetProto_CreateFaction::default_instance_;
  delete NetProto_CreateFaction_reflection_;
  delete NetProto_DelFaction::default_instance_;
  delete NetProto_DelFaction_reflection_;
  delete NetProto_Donate::default_instance_;
  delete NetProto_Donate_reflection_;
  delete NetProto_FactionNotice::default_instance_;
  delete NetProto_FactionNotice_reflection_;
  delete NetProto_Designate::default_instance_;
  delete NetProto_Designate_reflection_;
  delete NetProto_AddMem::default_instance_;
  delete NetProto_AddMem_reflection_;
  delete NetProto_DelMem::default_instance_;
  delete NetProto_DelMem_reflection_;
  delete NetProto_Applicant::default_instance_;
  delete NetProto_Applicant_reflection_;
  delete NetProto_Guardian::default_instance_;
  delete NetProto_Guardian_reflection_;
  delete NetProto_FactionInfo::default_instance_;
  delete NetProto_FactionInfo_reflection_;
  delete NetProto_FactionMem::default_instance_;
  delete NetProto_FactionMem_reflection_;
  delete NetProto_FactionChangeMem::default_instance_;
  delete NetProto_FactionChangeMem_reflection_;
  delete NetProto_FactionGuardian::default_instance_;
  delete NetProto_FactionGuardian_reflection_;
  delete NetProto_FactionApplicant::default_instance_;
  delete NetProto_FactionApplicant_reflection_;
  delete NetProto_FactionAllApplicant::default_instance_;
  delete NetProto_FactionAllApplicant_reflection_;
  delete NetProto_FactionList::default_instance_;
  delete NetProto_FactionList_reflection_;
  delete NetProto_AcceptToFaction::default_instance_;
  delete NetProto_AcceptToFaction_reflection_;
  delete NetProto_AsyncStatistics::default_instance_;
  delete NetProto_AsyncStatistics_reflection_;
  delete NetProto_StatisticsAGSLoadScene::default_instance_;
  delete NetProto_StatisticsAGSLoadScene_reflection_;
  delete NetProto_StatisticsAGSLoadNPC::default_instance_;
  delete NetProto_StatisticsAGSLoadNPC_reflection_;
}

void protobuf_AddDesc_NetProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PlayerInfo_2eproto();
  ::protobuf_AddDesc_BaseInfo_2eproto();
  ::protobuf_AddDesc_RoleAtt_2eproto();
  ::protobuf_AddDesc_NPCAtt_2eproto();
  ::protobuf_AddDesc_Math_2eproto();
  ::protobuf_AddDesc_EquipmentInfo_2eproto();
  ::protobuf_AddDesc_FightInfo_2eproto();
  ::protobuf_AddDesc_StatusInfo_2eproto();
  ::protobuf_AddDesc_ProfessionInfo_2eproto();
  ::protobuf_AddDesc_ItemInfo_2eproto();
  ::protobuf_AddDesc_FuncInfo_2eproto();
  ::protobuf_AddDesc_MissionInfo_2eproto();
  ::protobuf_AddDesc_BloodInfo_2eproto();
  ::protobuf_AddDesc_PlayerAtt_2eproto();
  ::protobuf_AddDesc_Award_2eproto();
  ::protobuf_AddDesc_MailInfo_2eproto();
  ::protobuf_AddDesc_Fashion_2eproto();
  ::protobuf_AddDesc_BusinessInfo_2eproto();
  ::protobuf_AddDesc_ItemBaseInfo_2eproto();
  ::protobuf_AddDesc_RidesInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016NetProto.proto\032\020PlayerInfo.proto\032\016Base"
    "Info.proto\032\rRoleAtt.proto\032\014NPCAtt.proto\032"
    "\nMath.proto\032\023EquipmentInfo.proto\032\017FightI"
    "nfo.proto\032\020StatusInfo.proto\032\024ProfessionI"
    "nfo.proto\032\016ItemInfo.proto\032\016FuncInfo.prot"
    "o\032\021MissionInfo.proto\032\017BloodInfo.proto\032\017P"
    "layerAtt.proto\032\013Award.proto\032\016MailInfo.pr"
    "oto\032\rFashion.proto\032\022BusinessInfo.proto\032\022"
    "ItemBaseInfo.proto\032\017RidesInfo.proto\"k\n\030N"
    "etProto_ClientException\022\016\n\006output\030\001 \001(\t\022"
    "\022\n\nstackTrace\030\002 \001(\t\022\014\n\004type\030\003 \001(\t\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\000\022\n\n\006UNITID\020\000\"3\n\022NetProto_Hea"
    "rtbeat\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\000\"\223\003"
    "\n\016NetProto_Login\022\017\n\007account\030\001 \001(\t\022\020\n\010pas"
    "sword\030\002 \001(\t\022\017\n\007version\030\003 \001(\003\022\020\n\010platform"
    "\030\004 \001(\t\022\020\n\010deviceID\030\005 \001(\t\022\014\n\004idfa\030\006 \001(\t\022\021"
    "\n\tosversion\030\007 \001(\t\022\021\n\tphonetype\030\010 \001(\t\022\014\n\004"
    "imei\030\t \001(\t\022\017\n\007addTime\030\n \001(\t\022\025\n\rdeviceAdd"
    "Time\030\013 \001(\t\022\023\n\013activateKey\030\014 \001(\t\022\022\n\nlogin"
    "Later\030\r \001(\010\022\022\n\nsession_id\030\016 \001(\t\022\024\n\014sessi"
    "on_type\030\017 \001(\t\022\016\n\006openid\030\020 \001(\t\022\017\n\007openkey"
    "\030\021 \001(\t\022\021\n\tpay_token\030\022 \001(\t\022\n\n\002pf\030\023 \001(\t\022\r\n"
    "\005pfkey\030\024 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITI"
    "D\020\001\"Y\n\024NetProto_LoginResult\022\n\n\002id\030\001 \001(\005\022"
    "\026\n\016serverOpenTime\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\001\022\n\n\006UNITID\020\002\"<\n\017NetProto_Logout\022\n\n\002id\030"
    "\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\003\"@\n\023"
    "NetProto_SelectRole\022\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013\n"
    "\007GROUPID\020\001\022\n\n\006UNITID\020\004\"w\n\023NetProto_Creat"
    "eRole\022%\n\004type\030\001 \001(\0162\027.PB_ProfessionInfo."
    "Type\022\014\n\004name\030\002 \001(\t\022\014\n\004male\030\003 \001(\010\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\001\022\n\n\006UNITID\020\005\"O\n\023NetProto_Serv"
    "erTime\022\014\n\004time\030\001 \001(\003\022\013\n\003cur\030\002 \001(\005\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\006\"P\n\021NetProto_Rol"
    "eList\022\034\n\005roles\030\001 \003(\0132\r.PB_PlayerAtt\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\007\"@\n\023NetProto_D"
    "eleteRole\022\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\001"
    "\022\n\n\006UNITID\020\010\"f\n\020NetProto_ReLogin\022\017\n\007acco"
    "unt\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\020\n\010platform\030"
    "\003 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\t\"C\n\026"
    "NetProto_ReLoginResult\022\n\n\002id\030\001 \001(\005\"\035\n\002ID"
    "\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\n\"\246\003\n\rNetProto_R"
    "ank\022!\n\004type\030\001 \001(\0162\023.NetProto_Rank.Type\022\031"
    "\n\004rank\030\002 \003(\0132\013.RecordInfo\022\r\n\005range\030\004 \001(\005"
    "\022 \n\013finalKiller\030\005 \001(\0132\013.RecordInfo\022\031\n\004se"
    "lf\030\006 \001(\0132\013.RecordInfo\"\035\n\002ID\022\013\n\007GROUPID\020\001"
    "\022\n\n\006UNITID\020\013\"\353\001\n\004Type\022\t\n\005POWER\020\001\022\t\n\005TOWE"
    "R\020\002\022\t\n\005LEVEL\020\003\022\007\n\003GOD\020\006\022\016\n\nWORLD_BOSS\020\007\022"
    "\r\n\tBLESSCOME\020\010\022\013\n\007FACTION\020\t\022\007\n\003PET\020\n\022\t\n\005"
    "DEVIL\020\013\022\022\n\016AWARD_FROM_SKY\020\014\022\010\n\004LUCK\020\r\022\013\n"
    "\007QIUBITE\020\016\022\013\n\007CONSUME\020\017\022\013\n\007CATGIFT\020\020\022\022\n\016"
    "GROUP_PURCHASE\020\021\022\017\n\013GROUPRECORD\020\022\022\017\n\013RES"
    "ERVATION\020\023\"\323\001\n\016NetProto_SetUp\022\023\n\013soundVo"
    "lume\030\001 \001(\005\022\023\n\013musicVolume\030\002 \001(\005\022\021\n\tplaye"
    "rNum\030\003 \001(\005\022\023\n\013fixedCamera\030\004 \001(\010\022\032\n\022displ"
    "ayOtherEffect\030\005 \001(\010\022\027\n\017displayMyEffect\030\006"
    " \001(\010\022\033\n\023displayOtherHurtNum\030\007 \001(\010\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\001\022\n\n\006UNITID\020\014\"u\n\021NetProto_Reg"
    "ister\022\017\n\007account\030\001 \001(\t\022\020\n\010password\030\002 \001(\t"
    "\022\020\n\010deviceID\030\003 \001(\t\022\014\n\004idfa\030\004 \001(\t\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\001\022\n\n\006UNITID\020\r\"N\n\023NetProto_GetK"
    "eyGift\022\013\n\003key\030\001 \001(\t\022\013\n\003res\030\002 \001(\005\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\001\022\n\n\006UNITID\020\016\"a\n\030NetProto_Stat"
    "isticsUIBtn\022\n\n\002ui\030\001 \001(\t\022\013\n\003btn\030\002 \001(\005\022\r\n\005"
    "param\030\003 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID"
    "\020\017\"U\n\030NetProto_StatisticsGuide\022\014\n\004pass\030\001"
    " \001(\005\022\014\n\004node\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n"
    "\006UNITID\020\020\"F\n\027NetProto_LoginLaterTime\022\014\n\004"
    "time\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNITID\020"
    "\021\"\241\001\n\033NetProto_TencentBuyGoodsUrl\022\017\n\007pay"
    "item\030\001 \001(\t\022\021\n\tgoodsmeta\030\002 \001(\t\022\020\n\010goodsur"
    "l\030\003 \001(\t\022\023\n\013appmetadata\030\004 \001(\t\022\013\n\003url\030\005 \001("
    "\t\022\013\n\003amt\030\006 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UNI"
    "TID\020\022\"O\n\021NetProto_LoginURL\022\013\n\003url\030\001 \001(\t\022"
    "\016\n\006result\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n\006UN"
    "ITID\020\023\"Q\n\026NetProto_RechargeParam\022\r\n\005para"
    "m\030\001 \001(\t\022\t\n\001v\030\002 \001(\002\"\035\n\002ID\022\013\n\007GROUPID\020\001\022\n\n"
    "\006UNITID\020\024\"j\n\023NetProto_AddPlayers\022\n\n\002id\030\001"
    " \003(\005\022\032\n\003att\030\002 \003(\0132\r.PB_PlayerAtt\022\014\n\004type"
    "\030\003 \003(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\000\"\261\001"
    "\n\022NetProto_LoadScene\022&\n\004type\030\001 \001(\0162\030.Net"
    "Proto_LoadScene.Type\022\n\n\002id\030\002 \001(\005\022\013\n\003pos\030"
    "\003 \001(\005\022\022\n\ngemRecover\030\004 \001(\005\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\002\022\n\n\006UNITID\020\001\"\'\n\004Type\022\n\n\006NORMAL\020\000\022\010\n\004"
    "JUMP\020\001\022\t\n\005LEAVE\020\002\"\203\001\n\024NetProto_DoLoadSce"
    "ne\022\n\n\002id\030\001 \001(\005\022\r\n\005mapID\030\002 \001(\005\022\033\n\005coord\030\003"
    " \001(\0132\014.PB_Vector2i\022\024\n\014multipleRoom\030\004 \001(\010"
    "\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\002\"6\n\025NetPr"
    "oto_EndLoadScene\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006U"
    "NITID\020\003\"V\n\020NetProto_AddNPCs\022\n\n\002id\030\001 \003(\005\022"
    "\027\n\003att\030\002 \003(\0132\n.PB_NPCAtt\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\002\022\n\n\006UNITID\020\004\"\275\001\n\022NetProto_ClearRoom\022\021"
    "\n\ttotalTime\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022\014\n\004time"
    "\030\003 \001(\003\022\013\n\003md5\030\004 \001(\t\022\013\n\003exp\030\005 \001(\005\022\r\n\005mone"
    "y\030\006 \001(\005\022\r\n\005honor\030\007 \001(\005\022\020\n\010godScore\030\010 \001(\005"
    "\022\016\n\006upRank\030\t \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006U"
    "NITID\020\005\"\212\001\n\024NetProto_OpenRoomBox\022(\n\004type"
    "\030\001 \001(\0162\032.NetProto_OpenRoomBox.Type\022\016\n\006re"
    "sult\030\002 \003(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020"
    "\006\"\031\n\004Type\022\010\n\004FREE\020\000\022\007\n\003GEM\020\001\"D\n\026NetProto"
    "_BeginWaitRoom\022\013\n\003map\030\001 \001(\005\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\002\022\n\n\006UNITID\020\007\"5\n\024NetProto_EndWaitRo"
    "om\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\010\"N\n\020Net"
    "Proto_GenNPCs\022\r\n\005group\030\001 \001(\005\022\014\n\004pass\030\002 \001"
    "(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\t\"W\n\023Net"
    "Proto_ResetEvent\022\016\n\006monday\030\001 \001(\010\022\021\n\trese"
    "tCome\030\002 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID"
    "\020\n\"o\n\023NetProto_QuickFight\022\013\n\003map\030\001 \001(\005\022\035"
    "\n\003res\030\002 \003(\0132\020.NetProto_GetRes\022\r\n\005count\030\003"
    " \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\013\"N\n\014N"
    "etProto_Win\022\r\n\005honor\030\001 \001(\005\022\020\n\010pvpScore\030\002"
    " \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\014\".\n\rN"
    "etProto_Lose\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITI"
    "D\020\r\"1\n\020NetProto_Timeout\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\002\022\n\n\006UNITID\020\016\"\220\001\n\025NetProto_BeginWaitPVP"
    "\022)\n\004type\030\001 \001(\0162\033.NetProto_BeginWaitPVP.T"
    "ype\022\013\n\003res\030\002 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006U"
    "NITID\020\017\" \n\004Type\022\016\n\nONE_TO_ONE\020\000\022\010\n\004HELL\020"
    "\001\"\177\n\023NetProto_EndWaitPVP\022\'\n\004type\030\001 \001(\0162\031"
    ".NetProto_EndWaitPVP.Type\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\002\022\n\n\006UNITID\020\020\" \n\004Type\022\016\n\nONE_TO_ONE\020\000"
    "\022\010\n\004HELL\020\001\">\n\020NetProto_Lottery\022\013\n\003res\030\001 "
    "\001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\021\"l\n\020Ne"
    "tProto_GetGift\022\035\n\004type\030\001 \001(\0162\017.AwardInfo"
    ".Type\022\r\n\005index\030\002 \001(\005\022\013\n\003arg\030\003 \001(\005\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\022\"b\n\025NetProto_Sin"
    "gleRecord\022\r\n\005mapID\030\001 \001(\005\022\033\n\006record\030\002 \001(\013"
    "2\013.RecordInfo\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNIT"
    "ID\020\023\"6\n\025NetProto_EndLoadModel\"\035\n\002ID\022\013\n\007G"
    "ROUPID\020\002\022\n\n\006UNITID\020\024\"T\n\026NetProto_RoomWai"
    "tCount\022\014\n\004room\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\025\"\222\001\n\025NetProto_"
    "PVPWaitCount\022)\n\004type\030\001 \001(\0162\033.NetProto_PV"
    "PWaitCount.Type\022\r\n\005count\030\002 \001(\005\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\002\022\n\n\006UNITID\020\026\" \n\004Type\022\016\n\nONE_TO_"
    "ONE\020\000\022\010\n\004HELL\020\001\"8\n\027NetProto_CancelWaitRo"
    "om\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\027\"7\n\026Net"
    "Proto_CancelWaitPVP\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n"
    "\n\006UNITID\020\030\"M\n\017NetProto_GetRes\022\033\n\005items\030\001"
    " \003(\0132\014.PB_ItemInfo\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n"
    "\006UNITID\020\031\"<\n\017NetProto_Invest\022\n\n\002id\030\001 \001(\005"
    "\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\032\"P\n\024NetPr"
    "oto_InvestAward\022\n\n\002id\030\001 \001(\005\022\r\n\005index\030\002 \001"
    "(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\033\"H\n\030Net"
    "Proto_InvestAwardInfo\022\r\n\005award\030\001 \003(\005\"\035\n\002"
    "ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\034\"L\n\024NetProto_"
    "SetDayEvent\022\n\n\002id\030\001 \001(\005\022\t\n\001v\030\002 \001(\005\"\035\n\002ID"
    "\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\035\"N\n\026NetProto_Se"
    "tFixedEvent\022\n\n\002id\030\001 \001(\005\022\t\n\001v\030\002 \001(\005\"\035\n\002ID"
    "\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\036\"\?\n\rNetProto_In"
    "fo\022\017\n\007content\030\001 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n"
    "\n\006UNITID\020\037\"@\n\016NetProto_Error\022\017\n\007content\030"
    "\001 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020 \"\212\001\n"
    "\021NetProto_GodAward\022\023\n\013prevDayRank\030\001 \001(\003\022"
    "\024\n\014prevDayGoods\030\002 \001(\005\022\024\n\014prevWeekRank\030\003 "
    "\001(\003\022\025\n\rprevWeekGoods\030\004 \001(\005\"\035\n\002ID\022\013\n\007GROU"
    "PID\020\002\022\n\n\006UNITID\020!\"k\n\023NetProto_CreateRoom"
    "\022\013\n\003map\030\001 \001(\005\022\017\n\007noPower\030\002 \001(\010\022\027\n\004info\030\003"
    " \001(\0132\t.RoomInfo\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UN"
    "ITID\020\"\"\365\001\n\021NetProto_JoinRoom\022\n\n\002id\030\001 \001(\005"
    "\022\013\n\003pos\030\002 \001(\005\022\034\n\004info\030\003 \001(\0132\016.PB_FriendI"
    "nfo\022\r\n\005power\030\004 \001(\005\022\017\n\007noPower\030\005 \001(\010\022\020\n\010p"
    "layerID\030\006 \001(\005\022\035\n\003att\030\007 \001(\0132\020.PB_Equipmen"
    "tAtt\022\014\n\004male\030\010 \001(\010\022\013\n\003map\030\t \001(\005\022\036\n\006equip"
    "s\030\n \003(\0132\016.PB_EquipAsset\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\002\022\n\n\006UNITID\020#\"@\n\022NetProto_LeaveRoom\022\013\n\003"
    "pos\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020$"
    "\"5\n\024NetProto_DestroyRoom\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\002\022\n\n\006UNITID\020%\"L\n\021NetProto_RoomList\022\030\n\005"
    "rooms\030\001 \003(\0132\t.RoomInfo\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\002\022\n\n\006UNITID\020&\"@\n\022NetProto_EvictRole\022\013\n\003p"
    "os\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020\'\""
    "z\n\025NetProto_InviteFriend\022\016\n\006roleID\030\001 \001(\003"
    "\022\n\n\002id\030\002 \001(\005\022\013\n\003src\030\003 \001(\t\022\013\n\003map\030\004 \001(\005\022\014"
    "\n\004flag\030\005 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITI"
    "D\020(\"8\n\027NetProto_BeginMultiRoom\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\002\022\n\n\006UNITID\020)\"9\n\030NetProto_ResetC"
    "heckPoint\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020*"
    "\"L\n\017NetProto_GenPet\022\n\n\002id\030\001 \001(\005\022\016\n\006playe"
    "r\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020+\"B"
    "\n\025NetProto_OpenObstacle\022\n\n\002id\030\001 \001(\005\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020,\"\\\n\033NetProto_R"
    "egistDeviceServer\022\020\n\010deviceID\030\001 \001(\t\022\014\n\004i"
    "dfa\030\002 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\020-"
    "\"T\n\023NetProto_StartLoad1\022\020\n\010deviceID\030\001 \001("
    "\t\022\014\n\004idfa\030\002 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UN"
    "ITID\020.\"R\n\021NetProto_EndLoad1\022\020\n\010deviceID\030"
    "\001 \001(\t\022\014\n\004idfa\030\002 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n"
    "\n\006UNITID\020/\"4\n\023NetProto_StartLoad2\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\002\022\n\n\006UNITID\0200\"2\n\021NetProto_End"
    "Load2\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\0201\"7\n\026"
    "NetProto_BeginFighting\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\002\022\n\n\006UNITID\0202\"=\n\020NetProto_DelNPCs\022\n\n\002id\030"
    "\001 \003(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\0203\"\202\001\n"
    "\031NetProto_WorldBossCurRank\022\031\n\004rank\030\001 \003(\013"
    "2\013.RecordInfo\022\031\n\004self\030\002 \001(\0132\013.RecordInfo"
    "\022\020\n\010selfRank\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n"
    "\006UNITID\0204\"\203\001\n\032NetProto_FactionWarCurRank"
    "\022\031\n\004rank\030\001 \003(\0132\013.RecordInfo\022\031\n\004self\030\002 \001("
    "\0132\013.RecordInfo\022\020\n\010selfRank\030\003 \001(\005\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\002\022\n\n\006UNITID\0205\"L\n\035NetProto_Fact"
    "ionWarPrevWinner\022\014\n\004name\030\001 \001(\t\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\002\022\n\n\006UNITID\0206\";\n\032NetProto_GetMon"
    "thCardAward\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID"
    "\0207\"S\n\026NetProto_ExchangeGoods\022\r\n\005index\030\001 "
    "\001(\005\022\013\n\003all\030\002 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006U"
    "NITID\0208\"F\n\025NetProto_BuyMonthCard\022\016\n\006expi"
    "re\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\002\022\n\n\006UNITID\0209\""
    "6\n\025NetProto_UseLuckyCard\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\002\022\n\n\006UNITID\020:\"R\n\021NetProto_BIActive\022\020\n\010"
    "deviceID\030\001 \001(\t\022\014\n\004idfa\030\002 \001(\t\"\035\n\002ID\022\013\n\007GR"
    "OUPID\020\002\022\n\n\006UNITID\020;\"\305\001\n\rNetProto_Move\022!\n"
    "\004type\030\001 \001(\0162\023.NetProto_Move.Type\022\n\n\002id\030\002"
    " \001(\005\022\033\n\005start\030\003 \001(\0132\014.PB_Vector3f\022\031\n\003end"
    "\030\004 \001(\0132\014.PB_Vector3f\022\021\n\tserialNum\030\005 \001(\005\""
    "\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\000\"\033\n\004Type\022\n"
    "\n\006PLAYER\020\000\022\007\n\003NPC\020\001\"M\n\rNetProto_Wear\022\n\n\002"
    "id\030\001 \001(\005\022\021\n\tequipment\030\002 \001(\003\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\003\022\n\n\006UNITID\020\001\"^\n\017NetProto_Unwear\022\n\n"
    "\002id\030\001 \001(\005\022 \n\003pos\030\002 \001(\0162\023.EquipmentInfo.T"
    "ype\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\002\"\216\002\n\017N"
    "etProto_Attack\022$\n\005aType\030\001 \001(\0162\025.NetProto"
    "_Attack.Type\022\013\n\003aID\030\002 \001(\005\022\031\n\006aSkill\030\003 \001("
    "\0132\t.PB_Skill\022$\n\005dType\030\004 \001(\0162\025.NetProto_A"
    "ttack.Type\022\013\n\003dID\030\005 \001(\005\022\032\n\004tPos\030\006 \001(\0132\014."
    "PB_Vector3f\022\016\n\006skills\030\007 \003(\005\022\022\n\nserverTim"
    "e\030\010 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\003\"\033"
    "\n\004Type\022\n\n\006PLAYER\020\000\022\007\n\003NPC\020\001\"\236\002\n\021NetProto"
    "_DoAttack\022&\n\005aType\030\001 \001(\0162\027.NetProto_DoAt"
    "tack.Type\022\013\n\003aID\030\002 \001(\005\022\031\n\006aSkill\030\003 \001(\0132\t"
    ".PB_Skill\022\020\n\010aSkillID\030\004 \003(\005\022&\n\005dType\030\005 \001"
    "(\0162\027.NetProto_DoAttack.Type\022\013\n\003dID\030\006 \001(\005"
    "\022\032\n\004tPos\030\007 \001(\0132\014.PB_Vector3f\022\032\n\004aPos\030\010 \001"
    "(\0132\014.PB_Vector3f\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006U"
    "NITID\020\004\"\033\n\004Type\022\n\n\006PLAYER\020\000\022\007\n\003NPC\020\001\"o\n\017"
    "NetProto_SetPos\022\n\n\002id\030\001 \001(\005\022\021\n\tserialNum"
    "\030\002 \001(\005\022\036\n\010position\030\003 \001(\0132\014.PB_Vector3f\"\035"
    "\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\005\"\250\001\n\014NetPro"
    "to_Die\022 \n\004type\030\001 \001(\0162\022.NetProto_Die.Type"
    "\022\n\n\002id\030\002 \001(\005\022!\n\005mType\030\003 \001(\0162\022.NetProto_D"
    "ie.Type\022\013\n\003mID\030\004 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022"
    "\n\n\006UNITID\020\006\"\033\n\004Type\022\n\n\006PLAYER\020\000\022\007\n\003NPC\020\001"
    "\"\215\002\n\017NetProto_Revive\022#\n\004type\030\001 \001(\0162\025.Net"
    "Proto_Revive.Type\022\n\n\002id\030\002 \001(\005\022\033\n\005coord\030\003"
    " \001(\0132\014.PB_Vector2i\022\n\n\002hp\030\004 \001(\002\022\023\n\013change"
    "Scene\030\005 \001(\010\022!\n\003way\030\006 \001(\0162\024.NetProto_Revi"
    "ve.Way\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\007\"$\n"
    "\004Type\022\n\n\006PLAYER\020\000\022\007\n\003NPC\020\001\022\007\n\003PET\020\002\"#\n\003W"
    "ay\022\007\n\003CUR\020\000\022\t\n\005BEGIN\020\001\022\010\n\004CITY\020\002\"@\n\022NetP"
    "roto_ModifyExp\022\013\n\003exp\030\001 \001(\003\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\003\022\n\n\006UNITID\020\010\"v\n\021NetProto_PickItem\022"
    "\020\n\010dropList\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022\022\n\npack"
    "agePos\030\003 \001(\005\022\r\n\005owner\030\004 \001(\005\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\003\022\n\n\006UNITID\020\n\"L\n\020NetProto_LevelUp\022\n"
    "\n\002id\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\003\022\n\n\006UNITID\020\013\"D\n\024NetProto_ModifyMoney"
    "\022\r\n\005money\030\001 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UN"
    "ITID\020\014\"Z\n\020NetProto_GetItem\022\032\n\004item\030\001 \001(\013"
    "2\014.PB_ItemInfo\022\013\n\003pos\030\002 \001(\005\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\003\022\n\n\006UNITID\020\r\"\177\n\024NetProto_QueryPlay"
    "er\022\016\n\006roleID\030\001 \001(\003\022\032\n\003att\030\002 \001(\0132\r.PB_Pla"
    "yerAtt\022\016\n\006online\030\003 \001(\010\022\014\n\004name\030\004 \001(\t\"\035\n\002"
    "ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\016\"\265\001\n\025NetProto"
    "_PlayerStatus\022\r\n\005roles\030\001 \003(\003\022/\n\010statuses"
    "\030\002 \003(\0162\035.NetProto_PlayerStatus.Status\022\r\n"
    "\005level\030\003 \003(\005\022\013\n\003vip\030\004 \003(\005\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\003\022\n\n\006UNITID\020\017\"!\n\006Status\022\013\n\007OFFLINE\020\000\022"
    "\n\n\006ONLINE\020\001\"\202\001\n\022NetProto_AddFriend\022\016\n\006ro"
    "leID\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022/\n\016professionTy"
    "pe\030\003 \001(\0162\027.PB_ProfessionInfo.Type\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\020\"Q\n\022NetProto_Del"
    "Friend\022\016\n\006roleID\030\001 \001(\003\022\014\n\004flag\030\002 \001(\010\"\035\n\002"
    "ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\021\"J\n\021NetProto_"
    "ModifyHP\022\n\n\002id\030\001 \001(\005\022\n\n\002hp\030\002 \001(\005\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\003\022\n\n\006UNITID\020\022\"N\n\023NetProto_Modi"
    "fyMana\022\n\n\002id\030\001 \001(\005\022\014\n\004mana\030\002 \001(\005\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\003\022\n\n\006UNITID\020\023\"\272\001\n\026NetProto_Mod"
    "ifyFaction\022*\n\004type\030\001 \001(\0162\034.NetProto_Modi"
    "fyFaction.Type\022\n\n\002id\030\002 \001(\005\022\023\n\013selfFactio"
    "n\030\003 \001(\005\022\027\n\017friendlyFaction\030\004 \001(\005\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\003\022\n\n\006UNITID\020\024\"\033\n\004Type\022\n\n\006PLAYE"
    "R\020\000\022\007\n\003NPC\020\001\"P\n\024NetProto_ModifyMaxHP\022\n\n\002"
    "id\030\001 \001(\005\022\r\n\005maxHP\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\003\022\n\n\006UNITID\020\025\"`\n\022NetProto_RequestPK\022\036\n\006"
    "target\030\001 \001(\0132\016.PB_FriendInfo\022\013\n\003res\030\002 \001("
    "\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\026\"A\n\020NetP"
    "roto_ApplyPK\022\016\n\006origin\030\001 \001(\003\"\035\n\002ID\022\013\n\007GR"
    "OUPID\020\003\022\n\n\006UNITID\020\027\"\351\001\n\017NetProto_Strong\022"
    "!\n\003pos\030\001 \001(\0162\024.NetProto_Strong.Pos\022\n\n\002id"
    "\030\002 \001(\005\022(\n\007results\030\003 \001(\0162\027.NetProto_Stron"
    "g.Result\022\017\n\007protect\030\004 \001(\010\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\003\022\n\n\006UNITID\020\030\"\034\n\003Pos\022\010\n\004BODY\020\000\022\013\n\007PAC"
    "KAGE\020\001\"/\n\006Result\022\013\n\007SUCCESS\020\000\022\013\n\007NOTHING"
    "\020\001\022\013\n\007FAILURE\020\002\"\207\001\n\024NetProto_ClearStrong"
    "\022&\n\003pos\030\001 \001(\0162\031.NetProto_ClearStrong.Pos"
    "\022\n\n\002id\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITI"
    "D\020\031\"\034\n\003Pos\022\010\n\004BODY\020\000\022\013\n\007PACKAGE\020\001\"\204\001\n\022Ne"
    "tProto_Transform\022\n\n\002id\030\001 \001(\005\022&\n\004type\030\002 \001"
    "(\0162\030.NetProto_Transform.Type\"\035\n\002ID\022\013\n\007GR"
    "OUPID\020\003\022\n\n\006UNITID\020\032\"\033\n\004Type\022\n\n\006PLAYER\020\000\022"
    "\007\n\003NPC\020\001\"\235\001\n\016NetProto_Mount\022 \n\003pos\030\001 \001(\016"
    "2\023.NetProto_Mount.Pos\022\n\n\002id\030\002 \001(\005\022\020\n\010mou"
    "ntPos\030\003 \001(\005\022\016\n\006gemPos\030\004 \001(\005\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\003\022\n\n\006UNITID\020\033\"\034\n\003Pos\022\010\n\004BODY\020\000\022\013\n\007P"
    "ACKAGE\020\001\"V\n\017NetProto_TalkTo\022\n\n\002id\030\001 \001(\005\022"
    "\013\n\003map\030\002 \001(\005\022\013\n\003npc\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\003\022\n\n\006UNITID\020\034\"=\n\020NetProto_Recover\022\n\n\002"
    "id\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\035\""
    "\231\001\n\025NetProto_AddBloodNode\022)\n\004type\030\001 \001(\0162"
    "\033.NetProto_AddBloodNode.Type\022\013\n\003res\030\002 \001("
    "\010\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\036\")\n\004Type"
    "\022\n\n\006NORMAL\020\000\022\013\n\007PERFECT\020\001\022\010\n\004LINE\020\002\"\254\001\n\027"
    "NetProto_AddBloodEffect\022+\n\004type\030\001 \001(\0162\035."
    "NetProto_AddBloodEffect.Type\022\014\n\004soul\030\002 \001"
    "(\005\022\013\n\003res\030\003 \001(\005\022\r\n\005count\030\004 \001(\005\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\003\022\n\n\006UNITID\020\037\"\033\n\004Type\022\n\n\006NORMAL\020"
    "\000\022\007\n\003ALL\020\001\"r\n\020NetProto_Explore\022\037\n\004type\030\001"
    " \001(\0162\021.ExploreInfo.Type\022\016\n\006event1\030\002 \001(\005\022"
    "\016\n\006event2\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UN"
    "ITID\020 \"5\n\024NetProto_UnlockBlood\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\003\022\n\n\006UNITID\020!\"Z\n\022NetProto_Update"
    "Pos\022\n\n\002id\030\001 \001(\005\022\031\n\003pos\030\002 \001(\0132\014.PB_Vector"
    "3f\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\"\"b\n\021Net"
    "Proto_SayHello\022\r\n\005srcID\030\001 \001(\003\022\017\n\007srcName"
    "\030\002 \001(\t\022\016\n\006destID\030\003 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\003\022\n\n\006UNITID\020#\"C\n\026NetProto_CompleteGuide\022"
    "\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID"
    "\020$\"t\n\020NetProto_Arrange\022$\n\005begin\030\001 \001(\0162\025."
    "PB_ItemPackage.Begin\022\033\n\005items\030\002 \003(\0132\014.PB"
    "_ItemInfo\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020%"
    "\"2\n\021NetProto_IgnorePK\"\035\n\002ID\022\013\n\007GROUPID\020\003"
    "\022\n\n\006UNITID\020&\"d\n\022NetProto_ModifyRMB\022\r\n\005va"
    "lue\030\001 \001(\003\022\r\n\005total\030\002 \001(\003\022\021\n\ttotalCost\030\003 "
    "\001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\'\"G\n\027Ne"
    "tProto_ModifySoulJade\022\r\n\005value\030\001 \001(\003\"\035\n\002"
    "ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020(\"C\n\023NetProto_"
    "ModifySoul\022\r\n\005value\030\001 \001(\003\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\003\022\n\n\006UNITID\020)\"D\n\024NetProto_ModifyHonor"
    "\022\r\n\005value\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UN"
    "ITID\020*\"I\n\031NetProto_ModifyDurability\022\r\n\005v"
    "alue\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020"
    "+\"H\n\030NetProto_ModifySoulStone\022\r\n\005value\030\001"
    " \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020,\"F\n\026N"
    "etProto_ModifyPKScore\022\r\n\005value\030\001 \001(\003\"\035\n\002"
    "ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020-\"M\n\020NetProto_"
    "DelItem\022\013\n\003pos\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020.\"P\n\022NetProto_M"
    "odifyVIP\022\016\n\006player\030\001 \001(\005\022\013\n\003vip\030\002 \001(\005\"\035\n"
    "\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020/\"d\n\030NetProto"
    "_RandomGodTarget\022\032\n\003att\030\001 \001(\0132\r.PB_Playe"
    "rAtt\022\r\n\005event\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n"
    "\n\006UNITID\0200\"\337\001\n\020NetProto_Inspire\022$\n\004type\030"
    "\001 \001(\0162\026.NetProto_Inspire.Type\022$\n\004dest\030\002 "
    "\001(\0162\026.NetProto_Inspire.Dest\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\003\022\n\n\006UNITID\0201\"%\n\004Type\022\007\n\003ATK\020\000\022\007\n\003D"
    "EF\020\001\022\013\n\007SPECIAL\020\002\"9\n\004Dest\022\007\n\003GOD\020\000\022\016\n\nON"
    "E_TO_ONE\020\001\022\010\n\004HELL\020\002\022\016\n\nWORLD_BOSS\020\003\":\n\031"
    "NetProto_RequestGodTarget\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\003\022\n\n\006UNITID\0202\"G\n\027NetProto_ModifyGodSc"
    "ore\022\r\n\005value\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n"
    "\006UNITID\0203\"O\n\020NetProto_GodRank\022\014\n\004self\030\001 "
    "\001(\005\022\016\n\006target\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n"
    "\n\006UNITID\0204\"L\n\023NetProto_GetFashion\022\t\n\001v\030\001"
    " \001(\005\022\013\n\003pos\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006"
    "UNITID\0205\"\240\001\n\020NetProto_SyncAtt\022\022\n\npropert"
    "ies\030\001 \003(\005\022/\n\017propertiesDelta\030\002 \003(\0132\026.PB_"
    "FightPropertyDelta\022\r\n\005index\030\003 \001(\005\022\014\n\004tim"
    "e\030\004 \001(\003\022\013\n\003md5\030\005 \001(\t\"\035\n\002ID\022\013\n\007GROUPID\020\003\022"
    "\n\n\006UNITID\0206\"E\n\025NetProto_ModifySubRMB\022\r\n\005"
    "value\030\001 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID"
    "\0207\">\n\021NetProto_GenEquip\022\n\n\002id\030\001 \001(\005\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\0208\"\347\001\n\017NetProto_"
    "GenGem\022!\n\003way\030\001 \001(\0162\024.NetProto_GenGem.Wa"
    "y\022\014\n\004type\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\035\n\007result"
    "s\030\004 \003(\0132\014.PB_ItemInfo\022\017\n\007success\030\005 \001(\005\022\014"
    "\n\004fail\030\006 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITI"
    "D\0209\"7\n\003Way\022\016\n\nNEXT_LEVEL\020\000\022\r\n\tTOP_LEVEL\020"
    "\001\022\021\n\rALL_TOP_LEVEL\020\002\"\224\001\n\023NetProto_Unlock"
    "Hole\022%\n\003pos\030\001 \001(\0162\030.NetProto_UnlockHole."
    "Pos\022\n\n\002id\030\002 \001(\005\022\r\n\005index\030\003 \001(\005\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\003\022\n\n\006UNITID\020:\"\034\n\003Pos\022\010\n\004BODY\020\000\022\013"
    "\n\007PACKAGE\020\001\"\224\001\n\023NetProto_UnmountGem\022%\n\003p"
    "os\030\001 \001(\0162\030.NetProto_UnmountGem.Pos\022\n\n\002id"
    "\030\002 \001(\005\022\r\n\005index\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003"
    "\022\n\n\006UNITID\020;\"\034\n\003Pos\022\010\n\004BODY\020\000\022\013\n\007PACKAGE"
    "\020\001\"\245\001\n\025NetProto_EnhanceDelta\022\'\n\003pos\030\001 \001("
    "\0162\032.NetProto_EnhanceDelta.Pos\022\n\n\002id\030\002 \001("
    "\005\022\013\n\003ten\030\003 \001(\010\022\r\n\005delta\030\004 \003(\005\"\035\n\002ID\022\013\n\007G"
    "ROUPID\020\003\022\n\n\006UNITID\020<\"\034\n\003Pos\022\010\n\004BODY\020\000\022\013\n"
    "\007PACKAGE\020\001\"\177\n\020NetProto_Enhance\022\"\n\003pos\030\001 "
    "\001(\0162\025.NetProto_Enhance.Pos\022\n\n\002id\030\002 \001(\005\"\035"
    "\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020=\"\034\n\003Pos\022\010\n\004"
    "BODY\020\000\022\013\n\007PACKAGE\020\001\"\325\001\n\020NetProto_Inherit"
    "\022(\n\tparentPos\030\001 \001(\0162\025.NetProto_Inherit.P"
    "os\022\020\n\010parentID\030\002 \001(\005\022\'\n\010childPos\030\003 \001(\0162\025"
    ".NetProto_Inherit.Pos\022\017\n\007childID\030\004 \001(\005\022\016"
    "\n\006useRMB\030\005 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNI"
    "TID\020>\"\034\n\003Pos\022\010\n\004BODY\020\000\022\013\n\007PACKAGE\020\001\"H\n\027N"
    "etProto_StrongBaseWing\022\016\n\006useRMB\030\001 \001(\010\"\035"
    "\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020\?\"N\n\020NetProt"
    "o_BuyWing\022\n\n\002id\030\001 \001(\005\022\017\n\007forever\030\002 \001(\010\"\035"
    "\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020@\"P\n\021NetProt"
    "o_WearWing\022\n\n\002id\030\001 \001(\005\022\020\n\010baseWing\030\002 \001(\010"
    "\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020A\"I\n\020NetPr"
    "oto_GetWing\022\t\n\001v\030\001 \001(\005\022\013\n\003pos\030\002 \001(\005\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020B\"Q\n\023NetProto_B"
    "uyFashion\022\n\n\002id\030\001 \001(\005\022\017\n\007forever\030\002 \001(\010\"\035"
    "\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020C\"T\n\030NetProt"
    "o_MakeFashionHole\022\n\n\002id\030\001 \001(\005\022\r\n\005index\030\002"
    " \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020D\"o\n\025N"
    "etProto_FashionInlay\022\n\n\002id\030\001 \001(\005\022\r\n\005inde"
    "x\030\002 \001(\005\022\016\n\006runeid\030\003 \001(\005\022\014\n\004flag\030\004 \001(\010\"\035\n"
    "\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020E\"S\n\027NetProto"
    "_FashionUnInlay\022\n\n\002id\030\001 \001(\005\022\r\n\005index\030\002 \001"
    "(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020F\"u\n\030Net"
    "Proto_ServerLimitItem\022\037\n\004type\030\001 \001(\0162\021.PB"
    "_ItemInfo.Type\022\n\n\002id\030\002 \001(\005\022\r\n\005count\030\003 \001("
    "\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020G\"S\n\024NetP"
    "roto_FriendsLove\022\016\n\006roleID\030\001 \001(\003\022\014\n\004flag"
    "\030\002 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020H\"d\n"
    "\026NetProto_ChangePartner\022\r\n\005index\030\001 \001(\005\022\034"
    "\n\004fans\030\002 \001(\0132\016.PB_FriendInfo\"\035\n\002ID\022\013\n\007GR"
    "OUPID\020\003\022\n\n\006UNITID\020I\"E\n\024NetProto_AddFansL"
    "ove\022\016\n\006roleID\030\001 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n"
    "\n\006UNITID\020J\"L\n\030NetProto_ModifyLovePoint\022\021"
    "\n\tlovePoint\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006"
    "UNITID\020K\"F\n\026NetProto_BuyDurability\022\r\n\005in"
    "dex\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020L"
    "\"D\n\024NetProto_LoginObtRMB\022\r\n\005count\030\001 \001(\005\""
    "\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020M\"4\n\023NetPro"
    "to_UnwearWing\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNIT"
    "ID\020N\"]\n\021NetProto_GetEquip\022\n\n\002id\030\001 \001(\005\022\035\n"
    "\005asset\030\002 \001(\0132\016.PB_EquipAsset\"\035\n\002ID\022\013\n\007GR"
    "OUPID\020\003\022\n\n\006UNITID\020O\"\271\001\n\023NetProto_ResetCo"
    "unt\022\'\n\004type\030\001 \001(\0162\031.NetProto_ResetCount."
    "Type\022\013\n\003arg\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006"
    "UNITID\020P\"M\n\004Type\022\022\n\016SINGLE_ENHANCE\020\000\022\010\n\004"
    "BOSS\020\001\022\007\n\003GOD\020\002\022\n\n\006GOD_CD\020\003\022\022\n\016QUICK_FIG"
    "HT_CD\020\004\"\301\001\n\022NetProto_GodPlayer\022/\n\016profes"
    "sionType\030\001 \001(\0162\027.PB_ProfessionInfo.Type\022"
    "\017\n\007godRank\030\002 \001(\005\022\r\n\005power\030\003 \001(\005\022\017\n\007inspi"
    "re\030\004 \001(\005\022\016\n\006roleID\030\005 \001(\003\022\013\n\003str\030\006 \001(\t\022\r\n"
    "\005level\030\007 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITI"
    "D\020Q\"^\n\030NetProto_GodRandomPlayer\022#\n\006playe"
    "r\030\001 \003(\0132\023.NetProto_GodPlayer\"\035\n\002ID\022\013\n\007GR"
    "OUPID\020\003\022\n\n\006UNITID\020R\"\273\001\n\023NetProto_GodReco"
    "rds\022\014\n\004flag\030\001 \003(\010\022\013\n\003num\030\002 \003(\005\022/\n\016profes"
    "sionType\030\003 \003(\0162\027.PB_ProfessionInfo.Type\022"
    "\r\n\005level\030\004 \003(\005\022\014\n\004name\030\005 \003(\t\022\014\n\004time\030\006 \003"
    "(\005\022\016\n\006roleID\030\007 \003(\003\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n"
    "\006UNITID\020S\"v\n\021NetProto_GodPanel\022#\n\006player"
    "\030\001 \001(\0132\023.NetProto_GodPlayer\022\013\n\003num\030\002 \001(\005"
    "\022\020\n\010nextTime\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n"
    "\006UNITID\020T\"c\n\026NetProto_SelectGodRole\022\016\n\006r"
    "oleID\030\001 \001(\003\022\032\n\003att\030\002 \001(\0132\r.PB_PlayerAtt\""
    "\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020U\"Q\n\023NetPro"
    "to_SetSpecial\022\013\n\003npc\030\001 \001(\005\022\016\n\006enable\030\002 \001"
    "(\010\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020V\"C\n\026Net"
    "Proto_ResolveEquips\022\n\n\002op\030\001 \001(\005\"\035\n\002ID\022\013\n"
    "\007GROUPID\020\003\022\n\n\006UNITID\020W\"L\n\034NetProto_Modif"
    "yPKScoreActive\022\r\n\005value\030\001 \001(\003\"\035\n\002ID\022\013\n\007G"
    "ROUPID\020\003\022\n\n\006UNITID\020X\"H\n\030NetProto_ModifyR"
    "MBActive\022\r\n\005value\030\001 \001(\003\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\003\022\n\n\006UNITID\020Y\"q\n\021NetProto_DropItem\022\013\n\003n"
    "pc\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022\t\n\001v\030\003 \001(\005\022\n\n\002v1"
    "\030\004 \001(\005\022\n\n\002v2\030\005 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n"
    "\006UNITID\020Z\"z\n\022NetProto_SellGoods\022 \n\002op\030\001 "
    "\001(\0162\024.GoodsInfo.ColorType\022#\n\004type\030\002 \001(\0162"
    "\025.PB_ItemPackage.Begin\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\003\022\n\n\006UNITID\020[\"K\n\rNetProto_Luck\022\r\n\005index\030"
    "\001 \001(\005\022\014\n\004free\030\002 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n"
    "\n\006UNITID\020\\\"d\n\030NetProto_GrabRedEnvelope\022\013"
    "\n\003str\030\001 \001(\t\022\034\n\002gr\030\002 \001(\0132\020.NetProto_GetRe"
    "s\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020]\"R\n\020NetP"
    "roto_CatGift\022\020\n\010allCount\030\001 \001(\005\022\r\n\005count\030"
    "\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020^\"I\n\026"
    "NetProto_GroupPurchase\022\020\n\010allCount\030\001 \001(\005"
    "\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020_\">\n\016NetPr"
    "oto_Rides\022\r\n\005rides\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\003\022\n\n\006UNITID\020`\"\227\001\n\023NetProto_RidesTrain\022"
    "\r\n\005index\030\001 \001(\005\022\014\n\004high\030\002 \001(\010\022\022\n\nupProper"
    "ty\030\003 \001(\005\022\024\n\014downProperty\030\004 \001(\005\022\013\n\003upv\030\005 "
    "\001(\005\022\r\n\005downv\030\006 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n"
    "\006UNITID\020a\"P\n\021NetProto_GenRides\022\017\n\007indexe"
    "s\030\001 \003(\005\022\013\n\003ids\030\002 \003(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022"
    "\n\n\006UNITID\020b\"[\n\020NetProto_GodShip\022\r\n\005index"
    "\030\001 \001(\005\022\014\n\004next\030\002 \001(\010\022\013\n\003cut\030\003 \001(\005\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\003\022\n\n\006UNITID\020c\"P\n\020NetProto_Swa"
    "llow\022\r\n\005index\030\001 \001(\005\022\016\n\006select\030\002 \001(\005\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020d\"\214\001\n\023NetProto_"
    "GodPackage\022\014\n\004pool\030\001 \001(\005\022\017\n\007package\030\002 \001("
    "\005\022\n\n\002id\030\003 \001(\005\022\013\n\003exp\030\004 \001(\005\022\r\n\005level\030\005 \001("
    "\005\022\017\n\007quality\030\006 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n"
    "\006UNITID\020e\"D\n\024NetProto_WearGodShip\022\r\n\005ind"
    "ex\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020f\""
    "F\n\026NetProto_UnWearGodShip\022\r\n\005index\030\001 \001(\005"
    "\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020g\"8\n\027NetPr"
    "oto_ArrangeGodShip\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n"
    "\006UNITID\020h\"N\n\020NetProto_RidesUP\022\r\n\005index\030\001"
    " \001(\005\022\014\n\004star\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n"
    "\006UNITID\020i\"\215\001\n\025NetProto_RidesInherit\022\016\n\006t"
    "arget\030\001 \001(\005\022\023\n\013ridesExpend\030\002 \003(\005\022\016\n\006curE"
    "xp\030\003 \001(\003\022\r\n\005level\030\004 \001(\005\022\021\n\tpotential\030\005 \001"
    "(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020j\"S\n\026Net"
    "Proto_SingleGodShip\022\r\n\005index\030\001 \001(\005\022\013\n\003ea"
    "t\030\002 \003(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022\n\n\006UNITID\020k\"f"
    "\n\025NetProto_RidesLockAtt\022\r\n\005index\030\001 \001(\005\022\021"
    "\n\tlockIndex\030\002 \001(\005\022\014\n\004lock\030\003 \001(\010\"\035\n\002ID\022\013\n"
    "\007GROUPID\020\003\022\n\n\006UNITID\020l\"J\n\032NetProto_Rides"
    "ConfirmTrain\022\r\n\005index\030\001 \001(\005\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\003\022\n\n\006UNITID\020m\"G\n\027NetProto_RidesUnLo"
    "ckAtt\022\r\n\005index\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\003\022"
    "\n\n\006UNITID\020n\"\346\001\n\022NetProto_AddStatus\022\020\n\010st"
    "atusID\030\001 \001(\005\022&\n\004type\030\002 \001(\0162\030.NetProto_Ad"
    "dStatus.Type\022\020\n\010targetID\030\003 \001(\005\022\014\n\004time\030\004"
    " \001(\005\022\032\n\004dest\030\005 \001(\0132\014.PB_Vector3f\022\021\n\tdelS"
    "kills\030\006 \003(\005\022\013\n\003aID\030\007 \001(\005\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\004\022\n\n\006UNITID\020\002\"\033\n\004Type\022\n\n\006PLAYER\020\000\022\007\n\003N"
    "PC\020\001\"\372\001\n\014NetProto_Hit\022\020\n\010aSkillID\030\001 \001(\005\022"
    "!\n\005dType\030\002 \003(\0162\022.NetProto_Hit.Type\022\013\n\003dI"
    "D\030\003 \003(\005\022!\n\005aType\030\004 \001(\0162\022.NetProto_Hit.Ty"
    "pe\022\013\n\003aID\030\005 \001(\005\022%\n\010statuses\030\006 \003(\0132\023.NetP"
    "roto_AddStatus\022\025\n\rresistControl\030\007 \001(\010\"\035\n"
    "\002ID\022\013\n\007GROUPID\020\004\022\n\n\006UNITID\020\000\"\033\n\004Type\022\n\n\006"
    "PLAYER\020\000\022\007\n\003NPC\020\001\"\256\002\n\025NetProto_StatusEff"
    "ect\022*\n\nstatusType\030\001 \001(\0162\026.StatusInfo.Sta"
    "tusType\022\r\n\005value\030\002 \001(\005\022)\n\004type\030\003 \001(\0162\033.N"
    "etProto_StatusEffect.Type\022\n\n\002id\030\004 \001(\005\022-\n"
    "\006effect\030\005 \001(\0162\035.NetProto_StatusEffect.Ef"
    "fect\022\017\n\007skillID\030\006 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\004"
    "\022\n\n\006UNITID\020\001\"\033\n\004Type\022\n\n\006PLAYER\020\000\022\007\n\003NPC\020"
    "\001\"\'\n\006Effect\022\010\n\004NONE\020\000\022\t\n\005DODGE\020\001\022\010\n\004CRIT"
    "\020\002\"\206\001\n\023NetProto_StaticOver\022\'\n\004type\030\001 \001(\016"
    "2\031.NetProto_StaticOver.Type\022\n\n\002id\030\002 \001(\005\""
    "\035\n\002ID\022\013\n\007GROUPID\020\004\022\n\n\006UNITID\020\003\"\033\n\004Type\022\n"
    "\n\006PLAYER\020\000\022\007\n\003NPC\020\001\"\200\001\n\020NetProto_Standup"
    "\022$\n\004type\030\001 \001(\0162\026.NetProto_Standup.Type\022\n"
    "\n\002id\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\004\022\n\n\006UNITID\020"
    "\004\"\033\n\004Type\022\n\n\006PLAYER\020\000\022\007\n\003NPC\020\001\"`\n\025NetPro"
    "to_SkillLevelUp\022\n\n\002id\030\001 \001(\005\022\r\n\005delta\030\002 \001"
    "(\005\022\r\n\005money\030\003 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\004\022\n\n\006"
    "UNITID\020\006\"@\n\023NetProto_ClearSkill\022\n\n\002id\030\001 "
    "\001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\004\022\n\n\006UNITID\020\007\"f\n\025Ne"
    "tProto_DestroySkill\022\n\n\002id\030\001 \001(\005\022\r\n\005skill"
    "\030\002 \003(\005\022\023\n\013immediately\030\003 \001(\010\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\004\022\n\n\006UNITID\020\010\"\254\001\n\021NetProto_AddGoods"
    "\022\031\n\005goods\030\001 \003(\0132\n.GoodsInfo\022\013\n\003pos\030\002 \003(\005"
    "\022%\n\004type\030\003 \003(\0162\027.NetProto_AddGoods.Type\022"
    "\n\n\002id\030\004 \003(\005\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n\006UNITID"
    "\020\000\"\035\n\004Type\022\013\n\007PACKAGE\020\000\022\010\n\004BODY\020\001\"\277\001\n\026Ne"
    "tProto_AddEquipments\022\"\n\nequipments\030\001 \003(\013"
    "2\016.EquipmentInfo\022\013\n\003pos\030\002 \003(\005\022*\n\004type\030\003 "
    "\003(\0162\034.NetProto_AddEquipments.Type\022\n\n\002id\030"
    "\004 \003(\005\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\001\"\035\n\004"
    "Type\022\013\n\007PACKAGE\020\000\022\010\n\004BODY\020\001\"\204\002\n\022NetProto"
    "_ShiftItem\022*\n\010prevType\030\001 \001(\0162\030.NetProto_"
    "ShiftItem.Type\022\017\n\007prevPos\030\002 \001(\005\022)\n\007newTy"
    "pe\030\003 \001(\0162\030.NetProto_ShiftItem.Type\022\016\n\006ne"
    "wPos\030\004 \001(\005\022\r\n\005count\030\005 \001(\005\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\005\022\n\n\006UNITID\020\002\"H\n\004Type\022\013\n\007PACKAGE\020\000\022\010\n"
    "\004BODY\020\001\022\007\n\003ALT\020\002\022\t\n\005SKILL\020\003\022\013\n\007FASHION\020\004"
    "\022\010\n\004WING\020\005\"\221\001\n\026NetProto_QueryItemInfo\022*\n"
    "\004type\030\001 \001(\0162\034.NetProto_QueryItemInfo.Typ"
    "e\022\n\n\002id\030\002 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n\006UNIT"
    "ID\020\003\" \n\004Type\022\t\n\005GOODS\020\000\022\r\n\tEQUIPMENT\020\001\"^"
    "\n\020NetProto_BuyItem\022\020\n\010business\030\001 \001(\005\022\n\n\002"
    "id\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\005\022\n\n\006UNITID\020\004\"M\n\021NetProto_SellItem\022\n\n\002i"
    "d\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\005\022\n\n\006UNITID\020\005\"K\n\017NetProto_Repair\022\n\n\002id\030\001"
    " \001(\005\022\r\n\005price\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n"
    "\n\006UNITID\020\006\"]\n\021NetProto_UseGoods\022\n\n\002id\030\001 "
    "\001(\005\022\020\n\010boxItems\030\002 \003(\005\022\013\n\003all\030\003 \001(\010\"\035\n\002ID"
    "\022\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\007\"l\n\026NetProto_Un"
    "lockPackage\022$\n\005begin\030\001 \001(\0162\025.PB_ItemPack"
    "age.Begin\022\r\n\005count\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\005\022\n\n\006UNITID\020\010\";\n\032NetProto_RecoverDurab"
    "ility\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\t\"D\n\027"
    "NetProto_AddDesignation\022\n\n\002id\030\001 \001(\005\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\n\"D\n\027NetProto_D"
    "elDesignation\022\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\005\022\n\n\006UNITID\020\013\"U\n\030NetProto_ShowDesigna"
    "tion\022\016\n\006player\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\005\022\n\n\006UNITID\020\014\"W\n\032NetProto_Unsh"
    "owDesignation\022\016\n\006player\030\001 \001(\005\022\n\n\002id\030\002 \001("
    "\005\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\r\"]\n\021NetP"
    "roto_Recharge\022\r\n\005order\030\001 \001(\t\022\017\n\007product\030"
    "\002 \001(\t\022\t\n\001v\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n\006U"
    "NITID\020\016\"_\n\025NetProto_BusinessInfo\022\n\n\002id\030\001"
    " \001(\005\022\033\n\004info\030\002 \001(\0132\r.BusinessInfo\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\017\"B\n\025NetProto_Tra"
    "nsformWar\022\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\005"
    "\022\n\n\006UNITID\020\020\"F\n\031NetProto_TransformLevelU"
    "p\022\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n\n\006UNIT"
    "ID\020\021\"T\n\030NetProto_TransformActive\022\n\n\002id\030\001"
    " \001(\005\022\r\n\005index\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\005\022\n"
    "\n\006UNITID\020\022\"`\n\024NetProto_Reservation\022\016\n\006ro"
    "leID\030\001 \001(\003\022\013\n\003rmb\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\"\035\n"
    "\002ID\022\013\n\007GROUPID\020\005\022\n\n\006UNITID\020\023\"\366\001\n\027NetProt"
    "o_OneReservation\022\r\n\005index\030\001 \001(\005\022\021\n\tpower"
    "Type\030\002 \001(\005\022\017\n\007roleID1\030\003 \001(\003\022\017\n\007roleID2\030\004"
    " \001(\003\022\r\n\005name1\030\005 \001(\t\022\r\n\005name2\030\006 \001(\t\022\r\n\005fa"
    "ns1\030\007 \001(\005\022\r\n\005fans2\030\010 \001(\005\022\013\n\003rmb\030\t \001(\005\022&\n"
    "\005type1\030\n \001(\0162\027.PB_ProfessionInfo.Type\022&\n"
    "\005type2\030\013 \001(\0162\027.PB_ProfessionInfo.Type\"a\n"
    "\030NetProto_ReservationList\022&\n\004list\030\001 \003(\0132"
    "\030.NetProto_OneReservation\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\005\022\n\n\006UNITID\020\024\"U\n\rNetProto_Talk\022\n\n\002id\030"
    "\001 \001(\005\022\031\n\003pos\030\002 \001(\0132\014.PB_Vector3f\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\006\022\n\n\006UNITID\020\000\"e\n\017NetProto_Answ"
    "er\022\n\n\002id\030\001 \001(\005\022\032\n\004func\030\002 \003(\0132\014.PB_FuncIn"
    "fo\022\013\n\003str\030\003 \003(\t\"\035\n\002ID\022\013\n\007GROUPID\020\006\022\n\n\006UN"
    "ITID\020\001\"Q\n\024NetProto_RequestFunc\022\032\n\004func\030\001"
    " \001(\0132\014.PB_FuncInfo\"\035\n\002ID\022\013\n\007GROUPID\020\006\022\n\n"
    "\006UNITID\020\002\"q\n\022NetProto_ReplyFunc\022\032\n\004func\030"
    "\001 \001(\0132\014.PB_FuncInfo\022 \n\007mission\030\002 \001(\0132\017.M"
    "issionContent\"\035\n\002ID\022\013\n\007GROUPID\020\006\022\n\n\006UNIT"
    "ID\020\003\"B\n\025NetProto_ApplyMission\022\n\n\002id\030\001 \001("
    "\005\"\035\n\002ID\022\013\n\007GROUPID\020\006\022\n\n\006UNITID\020\004\"E\n\030NetP"
    "roto_CompleteMission\022\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013"
    "\n\007GROUPID\020\006\022\n\n\006UNITID\020\005\"C\n\026NetProto_Give"
    "UpMission\022\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\006"
    "\022\n\n\006UNITID\020\006\"\271\002\n\rNetProto_Chat\022\'\n\007channe"
    "l\030\001 \001(\0162\026.NetProto_Chat.Channel\022\017\n\007conte"
    "nt\030\002 \001(\t\022\"\n\005sType\030\003 \001(\0162\023.NetProto_Chat."
    "Type\022\036\n\006sender\030\004 \001(\0132\016.PB_FriendInfo\022\020\n\010"
    "receiver\030\005 \001(\003\022\013\n\003vip\030\006 \001(\005\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\007\022\n\n\006UNITID\020\000\"O\n\007Channel\022\n\n\006SYSTEM\020"
    "\000\022\t\n\005GUILD\020\001\022\010\n\004TEAM\020\002\022\t\n\005WORLD\020\003\022\n\n\006SEC"
    "RET\020\004\022\014\n\010CURSENCE\020\005\"\033\n\004Type\022\n\n\006PLAYER\020\000\022"
    "\007\n\003NPC\020\001\"Q\n\020NetProto_Message\022\017\n\007content\030"
    "\001 \001(\t\022\r\n\005count\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\007\022"
    "\n\n\006UNITID\020\001\"m\n\021NetProto_SendMail\022\020\n\010rece"
    "iver\030\001 \001(\003\022\032\n\004mail\030\002 \001(\0132\014.PB_MailInfo\022\013"
    "\n\003pos\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\007\022\n\n\006UNITID"
    "\020\002\"A\n\024NetProto_GetMailItem\022\n\n\002id\030\001 \001(\005\"\035"
    "\n\002ID\022\013\n\007GROUPID\020\007\022\n\n\006UNITID\020\003\">\n\021NetProt"
    "o_ReadMail\022\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\007\022\n\n\006UNITID\020\004\"=\n\020NetProto_DelMail\022\n\n\002id\030"
    "\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\007\022\n\n\006UNITID\020\005\"\255\001\n"
    "\020NetProto_GMLogin\022\017\n\007account\030\001 \001(\t\022\016\n\006pa"
    "sswd\030\002 \001(\t\022(\n\npermission\030\003 \001(\0162\024.NetProt"
    "o_GMLogin.OP\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITI"
    "D\020\000\"/\n\002OP\022\010\n\004NONE\020\000\022\006\n\002CP\020\001\022\013\n\007YUNYING\020\002"
    "\022\n\n\006CUSTOM\020\003\"\255\002\n\020NetProto_GMOrder\022$\n\004typ"
    "e\030\001 \001(\0162\026.NetProto_GMOrder.Type\022\016\n\006targe"
    "t\030\002 \001(\003\022\016\n\006nValue\030\003 \001(\003\022\016\n\006fValue\030\004 \001(\002\022"
    "\016\n\006sValue\030\005 \001(\t\022\013\n\003res\030\006 \001(\005\"\035\n\002ID\022\013\n\007GR"
    "OUPID\020\010\022\n\n\006UNITID\020\002\"\206\001\n\004Type\022\016\n\nONLINE_N"
    "UM\020\000\022\r\n\tGET_GOODS\020\001\022\013\n\007GET_RMB\020\002\022\r\n\tGET_"
    "MONEY\020\003\022\013\n\007MESSAGE\020\004\022\n\n\006SYSTEM\020\005\022\021\n\rGET_"
    "EQUIPMENT\020\006\022\n\n\006RELOAD\020\007\022\013\n\007MUL_EXP\020\010\"W\n\030"
    "NetProto_GMOnlinePlayers\022\014\n\004name\030\001 \003(\t\022\016"
    "\n\006roleID\030\002 \003(\003\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNI"
    "TID\020\003\"\270\001\n\017NetProto_GMChat\022\'\n\007channel\030\001 \001"
    "(\0162\026.NetProto_Chat.Channel\022\017\n\007content\030\002 "
    "\001(\t\022\036\n\006sender\030\003 \001(\0132\016.PB_FriendInfo\022\036\n\006r"
    "ecver\030\004 \001(\0132\016.PB_FriendInfo\022\014\n\004time\030\005 \001("
    "\005\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\001\"P\n\024NetP"
    "roto_GMServerMgr\022\014\n\004time\030\001 \001(\005\022\013\n\003num\030\002 "
    "\001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\005\"c\n\026Ne"
    "tProto_GMPlayerQuery\022\032\n\003att\030\001 \001(\0132\r.PB_P"
    "layerAtt\022\016\n\006online\030\002 \001(\010\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\010\022\n\n\006UNITID\020\006\"\252\002\n\021NetProto_GMForbid\022)\n"
    "\006select\030\001 \001(\0162\031.NetProto_GMForbid.Select"
    "\022\014\n\004flag\030\002 \001(\010\022\021\n\tstartTime\030\003 \001(\005\022\017\n\007end"
    "Time\030\004 \001(\005\022\016\n\006roleID\030\005 \001(\003\022\n\n\002GM\030\006 \001(\t\022\014"
    "\n\004name\030\007 \001(\t\022\r\n\005level\030\010 \001(\005\022/\n\016professio"
    "nType\030\t \001(\0162\027.PB_ProfessionInfo.Type\022\n\n\002"
    "id\030\n \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\007\""
    "#\n\006Select\022\r\n\tNOTALKING\020\001\022\n\n\006FREEZE\020\002\"\312\001\n"
    "\021NetProto_GMNotice\022\n\n\002id\030\001 \001(\005\022\021\n\tstartT"
    "ime\030\002 \001(\005\022\017\n\007endTime\030\003 \001(\005\022\n\n\002hz\030\004 \001(\005\022\017"
    "\n\007content\030\005 \001(\t\022\016\n\006state1\030\006 \001(\010\022\016\n\006state"
    "2\030\007 \001(\010\022#\n\002op\030\010 \001(\0162\027.NetProto_GMNotice."
    "GMOP\"#\n\004GMOP\022\007\n\003ADD\020\001\022\007\n\003DEL\020\002\022\t\n\005ALTER\020"
    "\003\"\261\001\n\022NetProto_GMRequest\022*\n\006select\030\001 \001(\016"
    "2\032.NetProto_GMRequest.Select\022\"\n\006forbid\030\002"
    " \003(\0132\022.NetProto_GMForbid\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\010\022\n\n\006UNITID\020\t\",\n\006Select\022\007\n\003ALL\020\001\022\r\n\tNO"
    "TALKING\020\002\022\n\n\006FREEZE\020\003\":\n\031NetProto_GMShut"
    "DownServer\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020"
    "\n\"{\n\026NetProto_GMChatRecords\022\021\n\tstartTime"
    "\030\001 \001(\005\022\017\n\007endTime\030\002 \001(\005\022\036\n\004chat\030\003 \003(\0132\020."
    "NetProto_GMChat\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UN"
    "ITID\020\013\"\317\001\n\027NetProto_GMRegistrCount\022\021\n\tst"
    "artTime\030\001 \001(\005\022\017\n\007endTime\030\002 \001(\005\022\020\n\010device"
    "ID\030\003 \001(\005\022\023\n\013allDeviceID\030\004 \001(\005\022\021\n\taccount"
    "ID\030\005 \001(\005\022\024\n\014allAccountID\030\006 \001(\005\022\016\n\006roleID"
    "\030\007 \001(\005\022\021\n\tallRoleID\030\010 \001(\005\"\035\n\002ID\022\013\n\007GROUP"
    "ID\020\010\022\n\n\006UNITID\020\014\"\330\001\n\024NetProto_GMRoleCoun"
    "t\022\021\n\tstartTime\030\001 \001(\005\022\017\n\007endTime\030\002 \001(\005\022\020\n"
    "\010maxCount\030\003 \001(\005\022\024\n\014maxCountTime\030\004 \001(\005\022\020\n"
    "\010minCount\030\005 \001(\005\022\024\n\014minCountTime\030\006 \001(\005\022\r\n"
    "\005count\030\007 \003(\005\022\014\n\004time\030\010 \003(\005\022\020\n\010interval\030\t"
    " \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\r\"/\n\017L"
    "evelStatistics\022\r\n\005level\030\001 \001(\005\022\r\n\005count\030\002"
    " \001(\005\"\200\001\n\032NetProto_GMLevelStatistics\022\021\n\ts"
    "tartTime\030\001 \001(\005\022\017\n\007endTime\030\002 \001(\005\022\037\n\005array"
    "\030\003 \003(\0132\020.LevelStatistics\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\010\022\n\n\006UNITID\020\016\"\207\001\n\031NetProto_GMRankStati"
    "stics\022!\n\004type\030\001 \001(\0162\023.NetProto_Rank.Type"
    "\022\r\n\005count\030\002 \001(\005\022\031\n\004rank\030\003 \003(\0132\013.RecordIn"
    "fo\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\017\"_\n\024Net"
    "Proto_GMOpenGuide\022\016\n\006roleID\030\001 \001(\003\022\n\n\002id\030"
    "\002 \001(\005\022\014\n\004open\030\003 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n"
    "\n\006UNITID\020\020\"g\n\024NetProto_GMNoticeMgr\022\"\n\006no"
    "tice\030\001 \003(\0132\022.NetProto_GMNotice\022\014\n\004flag\030\002"
    " \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\021\"\201\001\n\023"
    "NetProto_GMRegister\022\017\n\007account\030\001 \001(\t\022\020\n\010"
    "password\030\002 \001(\t\022(\n\npermission\030\003 \001(\0162\024.Net"
    "Proto_GMLogin.OP\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006U"
    "NITID\020\022\"\\\n\032NetProto_GMShutDownMessage\022\017\n"
    "\007groupID\030\001 \001(\005\022\016\n\006unitID\030\002 \001(\005\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\010\022\n\n\006UNITID\020\023\"X\n\026NetProto_GMOpen"
    "Message\022\017\n\007groupID\030\001 \001(\005\022\016\n\006unitID\030\002 \001(\005"
    "\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\024\"T\n\024NetPr"
    "oto_GMModifyVIP\022\016\n\006roleID\030\001 \001(\003\022\r\n\005delta"
    "\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\025\"y\n"
    "\026NetProto_GMAddExchange\022\020\n\010exchange\030\001 \003("
    "\t\022\r\n\005group\030\002 \001(\005\022\017\n\007endTime\030\003 \001(\005\022\016\n\006gif"
    "tID\030\004 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\026"
    "\"\221\001\n\027NetProto_GMQueryFaction\022#\n\004info\030\001 \001"
    "(\0132\025.NetProto_FactionInfo\022!\n\003mem\030\002 \003(\0132\024"
    ".NetProto_FactionMem\022\017\n\007winName\030\003 \001(\t\"\035\n"
    "\002ID\022\013\n\007GROUPID\020\010\022\n\n\006UNITID\020\027\"o\n\033NetProto"
    "_GMChangeFactionMem\022\023\n\013factionName\030\001 \001(\t"
    "\022\016\n\006roleID\030\002 \001(\003\022\014\n\004flag\030\003 \001(\010\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\010\022\n\n\006UNITID\020\030\"H\n\027NetProto_GMAddR"
    "ekooRole\022\016\n\006roleID\030\001 \001(\003\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\010\022\n\n\006UNITID\020\031\"Q\n\024NetProto_GMLoginInfo\022"
    "\r\n\005count\030\001 \001(\005\022\013\n\003str\030\002 \001(\t\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\010\022\n\n\006UNITID\020\032\"N\n\022NetProto_ObtainPet"
    "\022\n\n\002id\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\"\035\n\002ID\022\013\n\007GRO"
    "UPID\020\t\022\n\n\006UNITID\020\000\"D\n\024NetProto_PetFighti"
    "ng\022\r\n\005index\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\t\022\n\n\006"
    "UNITID\020\002\"N\n\020NetProto_PetRest\022\r\n\005index\030\001 "
    "\001(\005\022\014\n\004flag\030\002 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\t\022\n\n\006"
    "UNITID\020\003\"B\n\022NetProto_PetAttach\022\r\n\005index\030"
    "\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\t\022\n\n\006UNITID\020\004\"S\n\023"
    "NetProto_PetLevelUp\022\r\n\005index\030\001 \001(\005\022\016\n\006ch"
    "ange\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\t\022\n\n\006UNITID\020"
    "\005\"l\n\026NetProto_PetLearnSkill\022\r\n\005index\030\001 \001"
    "(\005\022\017\n\007skillID\030\002 \001(\005\022\023\n\013skillsIndex\030\003 \001(\005"
    "\"\035\n\002ID\022\013\n\007GROUPID\020\t\022\n\n\006UNITID\020\006\"\213\001\n\023NetP"
    "roto_PetInherit\022\020\n\010indexPre\030\001 \001(\005\022\022\n\nind"
    "exAfter\030\002 \001(\005\022\024\n\014inheritSkill\030\003 \001(\010\022\031\n\003p"
    "et\030\004 \001(\0132\014.PB_PetAsset\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\t\022\n\n\006UNITID\020\007\"C\n\023NetProto_PetAdvance\022\r\n\005"
    "index\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\t\022\n\n\006UNITID"
    "\020\010\"X\n\033NetProto_PetPsychicsLevelUp\022\r\n\005ind"
    "ex\030\001 \001(\005\022\013\n\003res\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\t"
    "\022\n\n\006UNITID\020\t\"I\n\031NetProto_ActiveGemReques"
    "t\022\r\n\005value\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\n\022\n\n\006U"
    "NITID\020\000\"9\n\030NetProto_ActiveDoubleGem\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\n\022\n\n\006UNITID\020\001\"I\n\031NetProto_A"
    "ctiveUpGradeGem\022\r\n\005index\030\001 \001(\005\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\n\022\n\n\006UNITID\020\002\"D\n\025NetProto_Active"
    "GetGem\022\014\n\004flag\030\001 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\n\022"
    "\n\n\006UNITID\020\003\"5\n\024NetProto_ActiveFight\"\035\n\002I"
    "D\022\013\n\007GROUPID\020\n\022\n\n\006UNITID\020\004\"M\n\035NetProto_A"
    "ctiveStrongeSolider\022\r\n\005count\030\001 \001(\005\"\035\n\002ID"
    "\022\013\n\007GROUPID\020\n\022\n\n\006UNITID\020\005\"B\n\025NetProto_En"
    "terPlayOff\022\n\n\002id\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\n\022\n\n\006UNITID\020\006\"\265\001\n\024NetProto_PlayOffInfo\022\n"
    "\n\002id\030\001 \001(\005\022\013\n\003day\030\002 \001(\005\022\014\n\004pass\030\003 \001(\005\022\020\n"
    "\010overTime\030\004 \001(\005\022\016\n\006result\030\005 \001(\005\022\032\n\003att\030\006"
    " \001(\0132\r.PB_PlayerAtt\022\013\n\003res\030\007 \001(\005\022\014\n\004turn"
    "\030\010 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\n\022\n\n\006UNITID\020\007\"8\n"
    "\027NetProto_PreparePlayOff\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\n\022\n\n\006UNITID\020\010\"P\n\021NetProto_Treasure\022\r\n\005"
    "index\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROU"
    "PID\020\n\022\n\n\006UNITID\020\t\"Y\n\rNetProto_Hire\022\032\n\003at"
    "t\030\001 \003(\0132\r.PB_PlayerAtt\022\r\n\005index\030\002 \001(\005\"\035\n"
    "\002ID\022\013\n\007GROUPID\020\n\022\n\n\006UNITID\020\n\"Q\n\022NetProto"
    "_MoneyTree\022\r\n\005index\030\001 \001(\005\022\r\n\005count\030\002 \001(\005"
    "\"\035\n\002ID\022\013\n\007GROUPID\020\n\022\n\n\006UNITID\020\013\"R\n\024NetPr"
    "oto_TreasureBox\022\033\n\005items\030\001 \003(\0132\014.PB_Item"
    "Info\"\035\n\002ID\022\013\n\007GROUPID\020\n\022\n\n\006UNITID\020\014\"@\n\020N"
    "etProto_FlyPlan\022\r\n\005index\030\001 \001(\005\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\n\022\n\n\006UNITID\020\r\"B\n\022NetProto_BlessC"
    "ome\022\r\n\005count\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\n\022\n\n"
    "\006UNITID\020\016\"I\n\031NetProto_ModifyBlessScore\022\r"
    "\n\005bless\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\n\022\n\n\006UNIT"
    "ID\020\017\"5\n\024NetProto_TopUpObtRMB\"\035\n\002ID\022\013\n\007GR"
    "OUPID\020\n\022\n\n\006UNITID\020\020\"P\n\027NetProto_ServerOp"
    "enTime\022\026\n\016serverOpenTime\030\001 \001(\005\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\n\022\n\n\006UNITID\020\021\"G\n\023NetProto_Invate"
    "Code\022\021\n\tothercode\030\001 \001(\t\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\n\022\n\n\006UNITID\020\022\"J\n\032NetProto_UpdateInvateC"
    "ount\022\r\n\005count\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\n\022\n"
    "\n\006UNITID\020\023\"Q\n\026NetProto_CreateFaction\022\013\n\003"
    "str\030\001 \001(\t\022\013\n\003res\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020"
    "\013\022\n\n\006UNITID\020\000\"A\n\023NetProto_DelFaction\022\013\n\003"
    "res\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\013\022\n\n\006UNITID\020\001"
    "\">\n\017NetProto_Donate\022\014\n\004type\030\001 \001(\005\"\035\n\002ID\022"
    "\013\n\007GROUPID\020\013\022\n\n\006UNITID\020\002\"D\n\026NetProto_Fac"
    "tionNotice\022\013\n\003str\030\001 \001(\t\"\035\n\002ID\022\013\n\007GROUPID"
    "\020\013\022\n\n\006UNITID\020\003\"Q\n\022NetProto_Designate\022\016\n\006"
    "roleID\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\"\035\n\002ID\022\013\n\007GROU"
    "PID\020\013\022\n\n\006UNITID\020\004\"N\n\017NetProto_AddMem\022\016\n\006"
    "roleID\030\001 \001(\003\022\014\n\004flag\030\002 \001(\010\"\035\n\002ID\022\013\n\007GROU"
    "PID\020\013\022\n\n\006UNITID\020\005\"@\n\017NetProto_DelMem\022\016\n\006"
    "roleID\030\001 \001(\003\"\035\n\002ID\022\013\n\007GROUPID\020\013\022\n\n\006UNITI"
    "D\020\006\"@\n\022NetProto_Applicant\022\013\n\003str\030\001 \001(\t\"\035"
    "\n\002ID\022\013\n\007GROUPID\020\013\022\n\n\006UNITID\020\007\"@\n\021NetProt"
    "o_Guardian\022\014\n\004type\030\001 \001(\005\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\013\022\n\n\006UNITID\020\010\"\207\001\n\024NetProto_FactionInfo"
    "\022\014\n\004name\030\001 \001(\t\022\014\n\004rank\030\002 \001(\005\022\013\n\003exp\030\003 \001("
    "\003\022\013\n\003num\030\004 \001(\005\022\013\n\003str\030\005 \001(\t\022\r\n\005level\030\006 \001"
    "(\005\"\035\n\002ID\022\013\n\007GROUPID\020\013\022\n\n\006UNITID\020\t\"\233\001\n\023Ne"
    "tProto_FactionMem\022\022\n\ncontribute\030\001 \001(\005\022\014\n"
    "\004name\030\002 \001(\t\022\016\n\006office\030\003 \001(\005\022\025\n\rlastLogin"
    "Time\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\022\016\n\006roleID\030\006 \001(\003"
    "\"\035\n\002ID\022\013\n\007GROUPID\020\013\022\n\n\006UNITID\020\n\"l\n\031NetPr"
    "oto_FactionChangeMem\022\"\n\004data\030\001 \003(\0132\024.Net"
    "Proto_FactionMem\022\014\n\004flag\030\002 \003(\010\"\035\n\002ID\022\013\n\007"
    "GROUPID\020\013\022\n\n\006UNITID\020\013\"b\n\030NetProto_Factio"
    "nGuardian\022\014\n\004item\030\001 \001(\005\022\013\n\003str\030\002 \001(\t\022\014\n\004"
    "type\030\003 \001(\005\"\035\n\002ID\022\013\n\007GROUPID\020\013\022\n\n\006UNITID\020"
    "\014\"\203\001\n\031NetProto_FactionApplicant\022\r\n\005level"
    "\030\001 \001(\005\022\r\n\005power\030\002 \001(\005\022\013\n\003vip\030\003 \001(\005\022\014\n\004na"
    "me\030\004 \001(\t\022\016\n\006roleID\030\005 \001(\003\"\035\n\002ID\022\013\n\007GROUPI"
    "D\020\013\022\n\n\006UNITID\020\r\"g\n\034NetProto_FactionAllAp"
    "plicant\022(\n\004data\030\001 \003(\0132\032.NetProto_Faction"
    "Applicant\"\035\n\002ID\022\013\n\007GROUPID\020\013\022\n\n\006UNITID\020\016"
    "\"g\n\024NetProto_FactionList\022#\n\004info\030\001 \003(\0132\025"
    ".NetProto_FactionInfo\022\013\n\003str\030\002 \003(\t\"\035\n\002ID"
    "\022\013\n\007GROUPID\020\013\022\n\n\006UNITID\020\017\"N\n\030NetProto_Ac"
    "ceptToFaction\022\023\n\013factionName\030\001 \001(\t\"\035\n\002ID"
    "\022\013\n\007GROUPID\020\013\022\n\n\006UNITID\020\020\"\370\002\n\030NetProto_A"
    "syncStatistics\022\021\n\tisFirstIN\030\001 \001(\010\022\025\n\rbeg"
    "inAutoInit\030\002 \001(\010\022\027\n\017beginDecompress\030\003 \001("
    "\010\022\025\n\rdecompressCur\030\004 \001(\005\022\027\n\017decompressTo"
    "tal\030\005 \001(\005\022\021\n\tbeginInit\030\006 \001(\010\022\024\n\014checkVer"
    "sion\030\007 \001(\010\022\025\n\rbeginDownload\030\010 \001(\010\022\013\n\003md5"
    "\030\t \001(\t\022\024\n\014needDownload\030\n \003(\005\022\024\n\014download"
    "File\030\013 \001(\005\022\030\n\020overDownloadFile\030\014 \001(\005\022\023\n\013"
    "endDownload\030\r \001(\010\022\021\n\tbeginLoad\030\016 \001(\010\022\017\n\007"
    "endLoad\030\017 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\014\022\n\n\006UNIT"
    "ID\020\000\"O\n\037NetProto_StatisticsAGSLoadScene\022"
    "\r\n\005after\030\001 \001(\010\"\035\n\002ID\022\013\n\007GROUPID\020\014\022\n\n\006UNI"
    "TID\020\001\"\\\n\035NetProto_StatisticsAGSLoadNPC\022\r"
    "\n\005index\030\001 \001(\005\022\r\n\005after\030\002 \001(\010\"\035\n\002ID\022\013\n\007GR"
    "OUPID\020\014\022\n\n\006UNITID\020\002", 33779);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetProto.proto", &protobuf_RegisterTypes);
  NetProto_ClientException::default_instance_ = new NetProto_ClientException();
  NetProto_Heartbeat::default_instance_ = new NetProto_Heartbeat();
  NetProto_Login::default_instance_ = new NetProto_Login();
  NetProto_LoginResult::default_instance_ = new NetProto_LoginResult();
  NetProto_Logout::default_instance_ = new NetProto_Logout();
  NetProto_SelectRole::default_instance_ = new NetProto_SelectRole();
  NetProto_CreateRole::default_instance_ = new NetProto_CreateRole();
  NetProto_ServerTime::default_instance_ = new NetProto_ServerTime();
  NetProto_RoleList::default_instance_ = new NetProto_RoleList();
  NetProto_DeleteRole::default_instance_ = new NetProto_DeleteRole();
  NetProto_ReLogin::default_instance_ = new NetProto_ReLogin();
  NetProto_ReLoginResult::default_instance_ = new NetProto_ReLoginResult();
  NetProto_Rank::default_instance_ = new NetProto_Rank();
  NetProto_SetUp::default_instance_ = new NetProto_SetUp();
  NetProto_Register::default_instance_ = new NetProto_Register();
  NetProto_GetKeyGift::default_instance_ = new NetProto_GetKeyGift();
  NetProto_StatisticsUIBtn::default_instance_ = new NetProto_StatisticsUIBtn();
  NetProto_StatisticsGuide::default_instance_ = new NetProto_StatisticsGuide();
  NetProto_LoginLaterTime::default_instance_ = new NetProto_LoginLaterTime();
  NetProto_TencentBuyGoodsUrl::default_instance_ = new NetProto_TencentBuyGoodsUrl();
  NetProto_LoginURL::default_instance_ = new NetProto_LoginURL();
  NetProto_RechargeParam::default_instance_ = new NetProto_RechargeParam();
  NetProto_AddPlayers::default_instance_ = new NetProto_AddPlayers();
  NetProto_LoadScene::default_instance_ = new NetProto_LoadScene();
  NetProto_DoLoadScene::default_instance_ = new NetProto_DoLoadScene();
  NetProto_EndLoadScene::default_instance_ = new NetProto_EndLoadScene();
  NetProto_AddNPCs::default_instance_ = new NetProto_AddNPCs();
  NetProto_ClearRoom::default_instance_ = new NetProto_ClearRoom();
  NetProto_OpenRoomBox::default_instance_ = new NetProto_OpenRoomBox();
  NetProto_BeginWaitRoom::default_instance_ = new NetProto_BeginWaitRoom();
  NetProto_EndWaitRoom::default_instance_ = new NetProto_EndWaitRoom();
  NetProto_GenNPCs::default_instance_ = new NetProto_GenNPCs();
  NetProto_ResetEvent::default_instance_ = new NetProto_ResetEvent();
  NetProto_QuickFight::default_instance_ = new NetProto_QuickFight();
  NetProto_Win::default_instance_ = new NetProto_Win();
  NetProto_Lose::default_instance_ = new NetProto_Lose();
  NetProto_Timeout::default_instance_ = new NetProto_Timeout();
  NetProto_BeginWaitPVP::default_instance_ = new NetProto_BeginWaitPVP();
  NetProto_EndWaitPVP::default_instance_ = new NetProto_EndWaitPVP();
  NetProto_Lottery::default_instance_ = new NetProto_Lottery();
  NetProto_GetGift::default_instance_ = new NetProto_GetGift();
  NetProto_SingleRecord::default_instance_ = new NetProto_SingleRecord();
  NetProto_EndLoadModel::default_instance_ = new NetProto_EndLoadModel();
  NetProto_RoomWaitCount::default_instance_ = new NetProto_RoomWaitCount();
  NetProto_PVPWaitCount::default_instance_ = new NetProto_PVPWaitCount();
  NetProto_CancelWaitRoom::default_instance_ = new NetProto_CancelWaitRoom();
  NetProto_CancelWaitPVP::default_instance_ = new NetProto_CancelWaitPVP();
  NetProto_GetRes::default_instance_ = new NetProto_GetRes();
  NetProto_Invest::default_instance_ = new NetProto_Invest();
  NetProto_InvestAward::default_instance_ = new NetProto_InvestAward();
  NetProto_InvestAwardInfo::default_instance_ = new NetProto_InvestAwardInfo();
  NetProto_SetDayEvent::default_instance_ = new NetProto_SetDayEvent();
  NetProto_SetFixedEvent::default_instance_ = new NetProto_SetFixedEvent();
  NetProto_Info::default_instance_ = new NetProto_Info();
  NetProto_Error::default_instance_ = new NetProto_Error();
  NetProto_GodAward::default_instance_ = new NetProto_GodAward();
  NetProto_CreateRoom::default_instance_ = new NetProto_CreateRoom();
  NetProto_JoinRoom::default_instance_ = new NetProto_JoinRoom();
  NetProto_LeaveRoom::default_instance_ = new NetProto_LeaveRoom();
  NetProto_DestroyRoom::default_instance_ = new NetProto_DestroyRoom();
  NetProto_RoomList::default_instance_ = new NetProto_RoomList();
  NetProto_EvictRole::default_instance_ = new NetProto_EvictRole();
  NetProto_InviteFriend::default_instance_ = new NetProto_InviteFriend();
  NetProto_BeginMultiRoom::default_instance_ = new NetProto_BeginMultiRoom();
  NetProto_ResetCheckPoint::default_instance_ = new NetProto_ResetCheckPoint();
  NetProto_GenPet::default_instance_ = new NetProto_GenPet();
  NetProto_OpenObstacle::default_instance_ = new NetProto_OpenObstacle();
  NetProto_RegistDeviceServer::default_instance_ = new NetProto_RegistDeviceServer();
  NetProto_StartLoad1::default_instance_ = new NetProto_StartLoad1();
  NetProto_EndLoad1::default_instance_ = new NetProto_EndLoad1();
  NetProto_StartLoad2::default_instance_ = new NetProto_StartLoad2();
  NetProto_EndLoad2::default_instance_ = new NetProto_EndLoad2();
  NetProto_BeginFighting::default_instance_ = new NetProto_BeginFighting();
  NetProto_DelNPCs::default_instance_ = new NetProto_DelNPCs();
  NetProto_WorldBossCurRank::default_instance_ = new NetProto_WorldBossCurRank();
  NetProto_FactionWarCurRank::default_instance_ = new NetProto_FactionWarCurRank();
  NetProto_FactionWarPrevWinner::default_instance_ = new NetProto_FactionWarPrevWinner();
  NetProto_GetMonthCardAward::default_instance_ = new NetProto_GetMonthCardAward();
  NetProto_ExchangeGoods::default_instance_ = new NetProto_ExchangeGoods();
  NetProto_BuyMonthCard::default_instance_ = new NetProto_BuyMonthCard();
  NetProto_UseLuckyCard::default_instance_ = new NetProto_UseLuckyCard();
  NetProto_BIActive::default_instance_ = new NetProto_BIActive();
  NetProto_Move::default_instance_ = new NetProto_Move();
  NetProto_Wear::default_instance_ = new NetProto_Wear();
  NetProto_Unwear::default_instance_ = new NetProto_Unwear();
  NetProto_Attack::default_instance_ = new NetProto_Attack();
  NetProto_DoAttack::default_instance_ = new NetProto_DoAttack();
  NetProto_SetPos::default_instance_ = new NetProto_SetPos();
  NetProto_Die::default_instance_ = new NetProto_Die();
  NetProto_Revive::default_instance_ = new NetProto_Revive();
  NetProto_ModifyExp::default_instance_ = new NetProto_ModifyExp();
  NetProto_PickItem::default_instance_ = new NetProto_PickItem();
  NetProto_LevelUp::default_instance_ = new NetProto_LevelUp();
  NetProto_ModifyMoney::default_instance_ = new NetProto_ModifyMoney();
  NetProto_GetItem::default_instance_ = new NetProto_GetItem();
  NetProto_QueryPlayer::default_instance_ = new NetProto_QueryPlayer();
  NetProto_PlayerStatus::default_instance_ = new NetProto_PlayerStatus();
  NetProto_AddFriend::default_instance_ = new NetProto_AddFriend();
  NetProto_DelFriend::default_instance_ = new NetProto_DelFriend();
  NetProto_ModifyHP::default_instance_ = new NetProto_ModifyHP();
  NetProto_ModifyMana::default_instance_ = new NetProto_ModifyMana();
  NetProto_ModifyFaction::default_instance_ = new NetProto_ModifyFaction();
  NetProto_ModifyMaxHP::default_instance_ = new NetProto_ModifyMaxHP();
  NetProto_RequestPK::default_instance_ = new NetProto_RequestPK();
  NetProto_ApplyPK::default_instance_ = new NetProto_ApplyPK();
  NetProto_Strong::default_instance_ = new NetProto_Strong();
  NetProto_ClearStrong::default_instance_ = new NetProto_ClearStrong();
  NetProto_Transform::default_instance_ = new NetProto_Transform();
  NetProto_Mount::default_instance_ = new NetProto_Mount();
  NetProto_TalkTo::default_instance_ = new NetProto_TalkTo();
  NetProto_Recover::default_instance_ = new NetProto_Recover();
  NetProto_AddBloodNode::default_instance_ = new NetProto_AddBloodNode();
  NetProto_AddBloodEffect::default_instance_ = new NetProto_AddBloodEffect();
  NetProto_Explore::default_instance_ = new NetProto_Explore();
  NetProto_UnlockBlood::default_instance_ = new NetProto_UnlockBlood();
  NetProto_UpdatePos::default_instance_ = new NetProto_UpdatePos();
  NetProto_SayHello::default_instance_ = new NetProto_SayHello();
  NetProto_CompleteGuide::default_instance_ = new NetProto_CompleteGuide();
  NetProto_Arrange::default_instance_ = new NetProto_Arrange();
  NetProto_IgnorePK::default_instance_ = new NetProto_IgnorePK();
  NetProto_ModifyRMB::default_instance_ = new NetProto_ModifyRMB();
  NetProto_ModifySoulJade::default_instance_ = new NetProto_ModifySoulJade();
  NetProto_ModifySoul::default_instance_ = new NetProto_ModifySoul();
  NetProto_ModifyHonor::default_instance_ = new NetProto_ModifyHonor();
  NetProto_ModifyDurability::default_instance_ = new NetProto_ModifyDurability();
  NetProto_ModifySoulStone::default_instance_ = new NetProto_ModifySoulStone();
  NetProto_ModifyPKScore::default_instance_ = new NetProto_ModifyPKScore();
  NetProto_DelItem::default_instance_ = new NetProto_DelItem();
  NetProto_ModifyVIP::default_instance_ = new NetProto_ModifyVIP();
  NetProto_RandomGodTarget::default_instance_ = new NetProto_RandomGodTarget();
  NetProto_Inspire::default_instance_ = new NetProto_Inspire();
  NetProto_RequestGodTarget::default_instance_ = new NetProto_RequestGodTarget();
  NetProto_ModifyGodScore::default_instance_ = new NetProto_ModifyGodScore();
  NetProto_GodRank::default_instance_ = new NetProto_GodRank();
  NetProto_GetFashion::default_instance_ = new NetProto_GetFashion();
  NetProto_SyncAtt::default_instance_ = new NetProto_SyncAtt();
  NetProto_ModifySubRMB::default_instance_ = new NetProto_ModifySubRMB();
  NetProto_GenEquip::default_instance_ = new NetProto_GenEquip();
  NetProto_GenGem::default_instance_ = new NetProto_GenGem();
  NetProto_UnlockHole::default_instance_ = new NetProto_UnlockHole();
  NetProto_UnmountGem::default_instance_ = new NetProto_UnmountGem();
  NetProto_EnhanceDelta::default_instance_ = new NetProto_EnhanceDelta();
  NetProto_Enhance::default_instance_ = new NetProto_Enhance();
  NetProto_Inherit::default_instance_ = new NetProto_Inherit();
  NetProto_StrongBaseWing::default_instance_ = new NetProto_StrongBaseWing();
  NetProto_BuyWing::default_instance_ = new NetProto_BuyWing();
  NetProto_WearWing::default_instance_ = new NetProto_WearWing();
  NetProto_GetWing::default_instance_ = new NetProto_GetWing();
  NetProto_BuyFashion::default_instance_ = new NetProto_BuyFashion();
  NetProto_MakeFashionHole::default_instance_ = new NetProto_MakeFashionHole();
  NetProto_FashionInlay::default_instance_ = new NetProto_FashionInlay();
  NetProto_FashionUnInlay::default_instance_ = new NetProto_FashionUnInlay();
  NetProto_ServerLimitItem::default_instance_ = new NetProto_ServerLimitItem();
  NetProto_FriendsLove::default_instance_ = new NetProto_FriendsLove();
  NetProto_ChangePartner::default_instance_ = new NetProto_ChangePartner();
  NetProto_AddFansLove::default_instance_ = new NetProto_AddFansLove();
  NetProto_ModifyLovePoint::default_instance_ = new NetProto_ModifyLovePoint();
  NetProto_BuyDurability::default_instance_ = new NetProto_BuyDurability();
  NetProto_LoginObtRMB::default_instance_ = new NetProto_LoginObtRMB();
  NetProto_UnwearWing::default_instance_ = new NetProto_UnwearWing();
  NetProto_GetEquip::default_instance_ = new NetProto_GetEquip();
  NetProto_ResetCount::default_instance_ = new NetProto_ResetCount();
  NetProto_GodPlayer::default_instance_ = new NetProto_GodPlayer();
  NetProto_GodRandomPlayer::default_instance_ = new NetProto_GodRandomPlayer();
  NetProto_GodRecords::default_instance_ = new NetProto_GodRecords();
  NetProto_GodPanel::default_instance_ = new NetProto_GodPanel();
  NetProto_SelectGodRole::default_instance_ = new NetProto_SelectGodRole();
  NetProto_SetSpecial::default_instance_ = new NetProto_SetSpecial();
  NetProto_ResolveEquips::default_instance_ = new NetProto_ResolveEquips();
  NetProto_ModifyPKScoreActive::default_instance_ = new NetProto_ModifyPKScoreActive();
  NetProto_ModifyRMBActive::default_instance_ = new NetProto_ModifyRMBActive();
  NetProto_DropItem::default_instance_ = new NetProto_DropItem();
  NetProto_SellGoods::default_instance_ = new NetProto_SellGoods();
  NetProto_Luck::default_instance_ = new NetProto_Luck();
  NetProto_GrabRedEnvelope::default_instance_ = new NetProto_GrabRedEnvelope();
  NetProto_CatGift::default_instance_ = new NetProto_CatGift();
  NetProto_GroupPurchase::default_instance_ = new NetProto_GroupPurchase();
  NetProto_Rides::default_instance_ = new NetProto_Rides();
  NetProto_RidesTrain::default_instance_ = new NetProto_RidesTrain();
  NetProto_GenRides::default_instance_ = new NetProto_GenRides();
  NetProto_GodShip::default_instance_ = new NetProto_GodShip();
  NetProto_Swallow::default_instance_ = new NetProto_Swallow();
  NetProto_GodPackage::default_instance_ = new NetProto_GodPackage();
  NetProto_WearGodShip::default_instance_ = new NetProto_WearGodShip();
  NetProto_UnWearGodShip::default_instance_ = new NetProto_UnWearGodShip();
  NetProto_ArrangeGodShip::default_instance_ = new NetProto_ArrangeGodShip();
  NetProto_RidesUP::default_instance_ = new NetProto_RidesUP();
  NetProto_RidesInherit::default_instance_ = new NetProto_RidesInherit();
  NetProto_SingleGodShip::default_instance_ = new NetProto_SingleGodShip();
  NetProto_RidesLockAtt::default_instance_ = new NetProto_RidesLockAtt();
  NetProto_RidesConfirmTrain::default_instance_ = new NetProto_RidesConfirmTrain();
  NetProto_RidesUnLockAtt::default_instance_ = new NetProto_RidesUnLockAtt();
  NetProto_AddStatus::default_instance_ = new NetProto_AddStatus();
  NetProto_Hit::default_instance_ = new NetProto_Hit();
  NetProto_StatusEffect::default_instance_ = new NetProto_StatusEffect();
  NetProto_StaticOver::default_instance_ = new NetProto_StaticOver();
  NetProto_Standup::default_instance_ = new NetProto_Standup();
  NetProto_SkillLevelUp::default_instance_ = new NetProto_SkillLevelUp();
  NetProto_ClearSkill::default_instance_ = new NetProto_ClearSkill();
  NetProto_DestroySkill::default_instance_ = new NetProto_DestroySkill();
  NetProto_AddGoods::default_instance_ = new NetProto_AddGoods();
  NetProto_AddEquipments::default_instance_ = new NetProto_AddEquipments();
  NetProto_ShiftItem::default_instance_ = new NetProto_ShiftItem();
  NetProto_QueryItemInfo::default_instance_ = new NetProto_QueryItemInfo();
  NetProto_BuyItem::default_instance_ = new NetProto_BuyItem();
  NetProto_SellItem::default_instance_ = new NetProto_SellItem();
  NetProto_Repair::default_instance_ = new NetProto_Repair();
  NetProto_UseGoods::default_instance_ = new NetProto_UseGoods();
  NetProto_UnlockPackage::default_instance_ = new NetProto_UnlockPackage();
  NetProto_RecoverDurability::default_instance_ = new NetProto_RecoverDurability();
  NetProto_AddDesignation::default_instance_ = new NetProto_AddDesignation();
  NetProto_DelDesignation::default_instance_ = new NetProto_DelDesignation();
  NetProto_ShowDesignation::default_instance_ = new NetProto_ShowDesignation();
  NetProto_UnshowDesignation::default_instance_ = new NetProto_UnshowDesignation();
  NetProto_Recharge::default_instance_ = new NetProto_Recharge();
  NetProto_BusinessInfo::default_instance_ = new NetProto_BusinessInfo();
  NetProto_TransformWar::default_instance_ = new NetProto_TransformWar();
  NetProto_TransformLevelUp::default_instance_ = new NetProto_TransformLevelUp();
  NetProto_TransformActive::default_instance_ = new NetProto_TransformActive();
  NetProto_Reservation::default_instance_ = new NetProto_Reservation();
  NetProto_OneReservation::default_instance_ = new NetProto_OneReservation();
  NetProto_ReservationList::default_instance_ = new NetProto_ReservationList();
  NetProto_Talk::default_instance_ = new NetProto_Talk();
  NetProto_Answer::default_instance_ = new NetProto_Answer();
  NetProto_RequestFunc::default_instance_ = new NetProto_RequestFunc();
  NetProto_ReplyFunc::default_instance_ = new NetProto_ReplyFunc();
  NetProto_ApplyMission::default_instance_ = new NetProto_ApplyMission();
  NetProto_CompleteMission::default_instance_ = new NetProto_CompleteMission();
  NetProto_GiveUpMission::default_instance_ = new NetProto_GiveUpMission();
  NetProto_Chat::default_instance_ = new NetProto_Chat();
  NetProto_Message::default_instance_ = new NetProto_Message();
  NetProto_SendMail::default_instance_ = new NetProto_SendMail();
  NetProto_GetMailItem::default_instance_ = new NetProto_GetMailItem();
  NetProto_ReadMail::default_instance_ = new NetProto_ReadMail();
  NetProto_DelMail::default_instance_ = new NetProto_DelMail();
  NetProto_GMLogin::default_instance_ = new NetProto_GMLogin();
  NetProto_GMOrder::default_instance_ = new NetProto_GMOrder();
  NetProto_GMOnlinePlayers::default_instance_ = new NetProto_GMOnlinePlayers();
  NetProto_GMChat::default_instance_ = new NetProto_GMChat();
  NetProto_GMServerMgr::default_instance_ = new NetProto_GMServerMgr();
  NetProto_GMPlayerQuery::default_instance_ = new NetProto_GMPlayerQuery();
  NetProto_GMForbid::default_instance_ = new NetProto_GMForbid();
  NetProto_GMNotice::default_instance_ = new NetProto_GMNotice();
  NetProto_GMRequest::default_instance_ = new NetProto_GMRequest();
  NetProto_GMShutDownServer::default_instance_ = new NetProto_GMShutDownServer();
  NetProto_GMChatRecords::default_instance_ = new NetProto_GMChatRecords();
  NetProto_GMRegistrCount::default_instance_ = new NetProto_GMRegistrCount();
  NetProto_GMRoleCount::default_instance_ = new NetProto_GMRoleCount();
  LevelStatistics::default_instance_ = new LevelStatistics();
  NetProto_GMLevelStatistics::default_instance_ = new NetProto_GMLevelStatistics();
  NetProto_GMRankStatistics::default_instance_ = new NetProto_GMRankStatistics();
  NetProto_GMOpenGuide::default_instance_ = new NetProto_GMOpenGuide();
  NetProto_GMNoticeMgr::default_instance_ = new NetProto_GMNoticeMgr();
  NetProto_GMRegister::default_instance_ = new NetProto_GMRegister();
  NetProto_GMShutDownMessage::default_instance_ = new NetProto_GMShutDownMessage();
  NetProto_GMOpenMessage::default_instance_ = new NetProto_GMOpenMessage();
  NetProto_GMModifyVIP::default_instance_ = new NetProto_GMModifyVIP();
  NetProto_GMAddExchange::default_instance_ = new NetProto_GMAddExchange();
  NetProto_GMQueryFaction::default_instance_ = new NetProto_GMQueryFaction();
  NetProto_GMChangeFactionMem::default_instance_ = new NetProto_GMChangeFactionMem();
  NetProto_GMAddRekooRole::default_instance_ = new NetProto_GMAddRekooRole();
  NetProto_GMLoginInfo::default_instance_ = new NetProto_GMLoginInfo();
  NetProto_ObtainPet::default_instance_ = new NetProto_ObtainPet();
  NetProto_PetFighting::default_instance_ = new NetProto_PetFighting();
  NetProto_PetRest::default_instance_ = new NetProto_PetRest();
  NetProto_PetAttach::default_instance_ = new NetProto_PetAttach();
  NetProto_PetLevelUp::default_instance_ = new NetProto_PetLevelUp();
  NetProto_PetLearnSkill::default_instance_ = new NetProto_PetLearnSkill();
  NetProto_PetInherit::default_instance_ = new NetProto_PetInherit();
  NetProto_PetAdvance::default_instance_ = new NetProto_PetAdvance();
  NetProto_PetPsychicsLevelUp::default_instance_ = new NetProto_PetPsychicsLevelUp();
  NetProto_ActiveGemRequest::default_instance_ = new NetProto_ActiveGemRequest();
  NetProto_ActiveDoubleGem::default_instance_ = new NetProto_ActiveDoubleGem();
  NetProto_ActiveUpGradeGem::default_instance_ = new NetProto_ActiveUpGradeGem();
  NetProto_ActiveGetGem::default_instance_ = new NetProto_ActiveGetGem();
  NetProto_ActiveFight::default_instance_ = new NetProto_ActiveFight();
  NetProto_ActiveStrongeSolider::default_instance_ = new NetProto_ActiveStrongeSolider();
  NetProto_EnterPlayOff::default_instance_ = new NetProto_EnterPlayOff();
  NetProto_PlayOffInfo::default_instance_ = new NetProto_PlayOffInfo();
  NetProto_PreparePlayOff::default_instance_ = new NetProto_PreparePlayOff();
  NetProto_Treasure::default_instance_ = new NetProto_Treasure();
  NetProto_Hire::default_instance_ = new NetProto_Hire();
  NetProto_MoneyTree::default_instance_ = new NetProto_MoneyTree();
  NetProto_TreasureBox::default_instance_ = new NetProto_TreasureBox();
  NetProto_FlyPlan::default_instance_ = new NetProto_FlyPlan();
  NetProto_BlessCome::default_instance_ = new NetProto_BlessCome();
  NetProto_ModifyBlessScore::default_instance_ = new NetProto_ModifyBlessScore();
  NetProto_TopUpObtRMB::default_instance_ = new NetProto_TopUpObtRMB();
  NetProto_ServerOpenTime::default_instance_ = new NetProto_ServerOpenTime();
  NetProto_InvateCode::default_instance_ = new NetProto_InvateCode();
  NetProto_UpdateInvateCount::default_instance_ = new NetProto_UpdateInvateCount();
  NetProto_CreateFaction::default_instance_ = new NetProto_CreateFaction();
  NetProto_DelFaction::default_instance_ = new NetProto_DelFaction();
  NetProto_Donate::default_instance_ = new NetProto_Donate();
  NetProto_FactionNotice::default_instance_ = new NetProto_FactionNotice();
  NetProto_Designate::default_instance_ = new NetProto_Designate();
  NetProto_AddMem::default_instance_ = new NetProto_AddMem();
  NetProto_DelMem::default_instance_ = new NetProto_DelMem();
  NetProto_Applicant::default_instance_ = new NetProto_Applicant();
  NetProto_Guardian::default_instance_ = new NetProto_Guardian();
  NetProto_FactionInfo::default_instance_ = new NetProto_FactionInfo();
  NetProto_FactionMem::default_instance_ = new NetProto_FactionMem();
  NetProto_FactionChangeMem::default_instance_ = new NetProto_FactionChangeMem();
  NetProto_FactionGuardian::default_instance_ = new NetProto_FactionGuardian();
  NetProto_FactionApplicant::default_instance_ = new NetProto_FactionApplicant();
  NetProto_FactionAllApplicant::default_instance_ = new NetProto_FactionAllApplicant();
  NetProto_FactionList::default_instance_ = new NetProto_FactionList();
  NetProto_AcceptToFaction::default_instance_ = new NetProto_AcceptToFaction();
  NetProto_AsyncStatistics::default_instance_ = new NetProto_AsyncStatistics();
  NetProto_StatisticsAGSLoadScene::default_instance_ = new NetProto_StatisticsAGSLoadScene();
  NetProto_StatisticsAGSLoadNPC::default_instance_ = new NetProto_StatisticsAGSLoadNPC();
  NetProto_ClientException::default_instance_->InitAsDefaultInstance();
  NetProto_Heartbeat::default_instance_->InitAsDefaultInstance();
  NetProto_Login::default_instance_->InitAsDefaultInstance();
  NetProto_LoginResult::default_instance_->InitAsDefaultInstance();
  NetProto_Logout::default_instance_->InitAsDefaultInstance();
  NetProto_SelectRole::default_instance_->InitAsDefaultInstance();
  NetProto_CreateRole::default_instance_->InitAsDefaultInstance();
  NetProto_ServerTime::default_instance_->InitAsDefaultInstance();
  NetProto_RoleList::default_instance_->InitAsDefaultInstance();
  NetProto_DeleteRole::default_instance_->InitAsDefaultInstance();
  NetProto_ReLogin::default_instance_->InitAsDefaultInstance();
  NetProto_ReLoginResult::default_instance_->InitAsDefaultInstance();
  NetProto_Rank::default_instance_->InitAsDefaultInstance();
  NetProto_SetUp::default_instance_->InitAsDefaultInstance();
  NetProto_Register::default_instance_->InitAsDefaultInstance();
  NetProto_GetKeyGift::default_instance_->InitAsDefaultInstance();
  NetProto_StatisticsUIBtn::default_instance_->InitAsDefaultInstance();
  NetProto_StatisticsGuide::default_instance_->InitAsDefaultInstance();
  NetProto_LoginLaterTime::default_instance_->InitAsDefaultInstance();
  NetProto_TencentBuyGoodsUrl::default_instance_->InitAsDefaultInstance();
  NetProto_LoginURL::default_instance_->InitAsDefaultInstance();
  NetProto_RechargeParam::default_instance_->InitAsDefaultInstance();
  NetProto_AddPlayers::default_instance_->InitAsDefaultInstance();
  NetProto_LoadScene::default_instance_->InitAsDefaultInstance();
  NetProto_DoLoadScene::default_instance_->InitAsDefaultInstance();
  NetProto_EndLoadScene::default_instance_->InitAsDefaultInstance();
  NetProto_AddNPCs::default_instance_->InitAsDefaultInstance();
  NetProto_ClearRoom::default_instance_->InitAsDefaultInstance();
  NetProto_OpenRoomBox::default_instance_->InitAsDefaultInstance();
  NetProto_BeginWaitRoom::default_instance_->InitAsDefaultInstance();
  NetProto_EndWaitRoom::default_instance_->InitAsDefaultInstance();
  NetProto_GenNPCs::default_instance_->InitAsDefaultInstance();
  NetProto_ResetEvent::default_instance_->InitAsDefaultInstance();
  NetProto_QuickFight::default_instance_->InitAsDefaultInstance();
  NetProto_Win::default_instance_->InitAsDefaultInstance();
  NetProto_Lose::default_instance_->InitAsDefaultInstance();
  NetProto_Timeout::default_instance_->InitAsDefaultInstance();
  NetProto_BeginWaitPVP::default_instance_->InitAsDefaultInstance();
  NetProto_EndWaitPVP::default_instance_->InitAsDefaultInstance();
  NetProto_Lottery::default_instance_->InitAsDefaultInstance();
  NetProto_GetGift::default_instance_->InitAsDefaultInstance();
  NetProto_SingleRecord::default_instance_->InitAsDefaultInstance();
  NetProto_EndLoadModel::default_instance_->InitAsDefaultInstance();
  NetProto_RoomWaitCount::default_instance_->InitAsDefaultInstance();
  NetProto_PVPWaitCount::default_instance_->InitAsDefaultInstance();
  NetProto_CancelWaitRoom::default_instance_->InitAsDefaultInstance();
  NetProto_CancelWaitPVP::default_instance_->InitAsDefaultInstance();
  NetProto_GetRes::default_instance_->InitAsDefaultInstance();
  NetProto_Invest::default_instance_->InitAsDefaultInstance();
  NetProto_InvestAward::default_instance_->InitAsDefaultInstance();
  NetProto_InvestAwardInfo::default_instance_->InitAsDefaultInstance();
  NetProto_SetDayEvent::default_instance_->InitAsDefaultInstance();
  NetProto_SetFixedEvent::default_instance_->InitAsDefaultInstance();
  NetProto_Info::default_instance_->InitAsDefaultInstance();
  NetProto_Error::default_instance_->InitAsDefaultInstance();
  NetProto_GodAward::default_instance_->InitAsDefaultInstance();
  NetProto_CreateRoom::default_instance_->InitAsDefaultInstance();
  NetProto_JoinRoom::default_instance_->InitAsDefaultInstance();
  NetProto_LeaveRoom::default_instance_->InitAsDefaultInstance();
  NetProto_DestroyRoom::default_instance_->InitAsDefaultInstance();
  NetProto_RoomList::default_instance_->InitAsDefaultInstance();
  NetProto_EvictRole::default_instance_->InitAsDefaultInstance();
  NetProto_InviteFriend::default_instance_->InitAsDefaultInstance();
  NetProto_BeginMultiRoom::default_instance_->InitAsDefaultInstance();
  NetProto_ResetCheckPoint::default_instance_->InitAsDefaultInstance();
  NetProto_GenPet::default_instance_->InitAsDefaultInstance();
  NetProto_OpenObstacle::default_instance_->InitAsDefaultInstance();
  NetProto_RegistDeviceServer::default_instance_->InitAsDefaultInstance();
  NetProto_StartLoad1::default_instance_->InitAsDefaultInstance();
  NetProto_EndLoad1::default_instance_->InitAsDefaultInstance();
  NetProto_StartLoad2::default_instance_->InitAsDefaultInstance();
  NetProto_EndLoad2::default_instance_->InitAsDefaultInstance();
  NetProto_BeginFighting::default_instance_->InitAsDefaultInstance();
  NetProto_DelNPCs::default_instance_->InitAsDefaultInstance();
  NetProto_WorldBossCurRank::default_instance_->InitAsDefaultInstance();
  NetProto_FactionWarCurRank::default_instance_->InitAsDefaultInstance();
  NetProto_FactionWarPrevWinner::default_instance_->InitAsDefaultInstance();
  NetProto_GetMonthCardAward::default_instance_->InitAsDefaultInstance();
  NetProto_ExchangeGoods::default_instance_->InitAsDefaultInstance();
  NetProto_BuyMonthCard::default_instance_->InitAsDefaultInstance();
  NetProto_UseLuckyCard::default_instance_->InitAsDefaultInstance();
  NetProto_BIActive::default_instance_->InitAsDefaultInstance();
  NetProto_Move::default_instance_->InitAsDefaultInstance();
  NetProto_Wear::default_instance_->InitAsDefaultInstance();
  NetProto_Unwear::default_instance_->InitAsDefaultInstance();
  NetProto_Attack::default_instance_->InitAsDefaultInstance();
  NetProto_DoAttack::default_instance_->InitAsDefaultInstance();
  NetProto_SetPos::default_instance_->InitAsDefaultInstance();
  NetProto_Die::default_instance_->InitAsDefaultInstance();
  NetProto_Revive::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyExp::default_instance_->InitAsDefaultInstance();
  NetProto_PickItem::default_instance_->InitAsDefaultInstance();
  NetProto_LevelUp::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyMoney::default_instance_->InitAsDefaultInstance();
  NetProto_GetItem::default_instance_->InitAsDefaultInstance();
  NetProto_QueryPlayer::default_instance_->InitAsDefaultInstance();
  NetProto_PlayerStatus::default_instance_->InitAsDefaultInstance();
  NetProto_AddFriend::default_instance_->InitAsDefaultInstance();
  NetProto_DelFriend::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyHP::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyMana::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyFaction::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyMaxHP::default_instance_->InitAsDefaultInstance();
  NetProto_RequestPK::default_instance_->InitAsDefaultInstance();
  NetProto_ApplyPK::default_instance_->InitAsDefaultInstance();
  NetProto_Strong::default_instance_->InitAsDefaultInstance();
  NetProto_ClearStrong::default_instance_->InitAsDefaultInstance();
  NetProto_Transform::default_instance_->InitAsDefaultInstance();
  NetProto_Mount::default_instance_->InitAsDefaultInstance();
  NetProto_TalkTo::default_instance_->InitAsDefaultInstance();
  NetProto_Recover::default_instance_->InitAsDefaultInstance();
  NetProto_AddBloodNode::default_instance_->InitAsDefaultInstance();
  NetProto_AddBloodEffect::default_instance_->InitAsDefaultInstance();
  NetProto_Explore::default_instance_->InitAsDefaultInstance();
  NetProto_UnlockBlood::default_instance_->InitAsDefaultInstance();
  NetProto_UpdatePos::default_instance_->InitAsDefaultInstance();
  NetProto_SayHello::default_instance_->InitAsDefaultInstance();
  NetProto_CompleteGuide::default_instance_->InitAsDefaultInstance();
  NetProto_Arrange::default_instance_->InitAsDefaultInstance();
  NetProto_IgnorePK::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyRMB::default_instance_->InitAsDefaultInstance();
  NetProto_ModifySoulJade::default_instance_->InitAsDefaultInstance();
  NetProto_ModifySoul::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyHonor::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyDurability::default_instance_->InitAsDefaultInstance();
  NetProto_ModifySoulStone::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyPKScore::default_instance_->InitAsDefaultInstance();
  NetProto_DelItem::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyVIP::default_instance_->InitAsDefaultInstance();
  NetProto_RandomGodTarget::default_instance_->InitAsDefaultInstance();
  NetProto_Inspire::default_instance_->InitAsDefaultInstance();
  NetProto_RequestGodTarget::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyGodScore::default_instance_->InitAsDefaultInstance();
  NetProto_GodRank::default_instance_->InitAsDefaultInstance();
  NetProto_GetFashion::default_instance_->InitAsDefaultInstance();
  NetProto_SyncAtt::default_instance_->InitAsDefaultInstance();
  NetProto_ModifySubRMB::default_instance_->InitAsDefaultInstance();
  NetProto_GenEquip::default_instance_->InitAsDefaultInstance();
  NetProto_GenGem::default_instance_->InitAsDefaultInstance();
  NetProto_UnlockHole::default_instance_->InitAsDefaultInstance();
  NetProto_UnmountGem::default_instance_->InitAsDefaultInstance();
  NetProto_EnhanceDelta::default_instance_->InitAsDefaultInstance();
  NetProto_Enhance::default_instance_->InitAsDefaultInstance();
  NetProto_Inherit::default_instance_->InitAsDefaultInstance();
  NetProto_StrongBaseWing::default_instance_->InitAsDefaultInstance();
  NetProto_BuyWing::default_instance_->InitAsDefaultInstance();
  NetProto_WearWing::default_instance_->InitAsDefaultInstance();
  NetProto_GetWing::default_instance_->InitAsDefaultInstance();
  NetProto_BuyFashion::default_instance_->InitAsDefaultInstance();
  NetProto_MakeFashionHole::default_instance_->InitAsDefaultInstance();
  NetProto_FashionInlay::default_instance_->InitAsDefaultInstance();
  NetProto_FashionUnInlay::default_instance_->InitAsDefaultInstance();
  NetProto_ServerLimitItem::default_instance_->InitAsDefaultInstance();
  NetProto_FriendsLove::default_instance_->InitAsDefaultInstance();
  NetProto_ChangePartner::default_instance_->InitAsDefaultInstance();
  NetProto_AddFansLove::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyLovePoint::default_instance_->InitAsDefaultInstance();
  NetProto_BuyDurability::default_instance_->InitAsDefaultInstance();
  NetProto_LoginObtRMB::default_instance_->InitAsDefaultInstance();
  NetProto_UnwearWing::default_instance_->InitAsDefaultInstance();
  NetProto_GetEquip::default_instance_->InitAsDefaultInstance();
  NetProto_ResetCount::default_instance_->InitAsDefaultInstance();
  NetProto_GodPlayer::default_instance_->InitAsDefaultInstance();
  NetProto_GodRandomPlayer::default_instance_->InitAsDefaultInstance();
  NetProto_GodRecords::default_instance_->InitAsDefaultInstance();
  NetProto_GodPanel::default_instance_->InitAsDefaultInstance();
  NetProto_SelectGodRole::default_instance_->InitAsDefaultInstance();
  NetProto_SetSpecial::default_instance_->InitAsDefaultInstance();
  NetProto_ResolveEquips::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyPKScoreActive::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyRMBActive::default_instance_->InitAsDefaultInstance();
  NetProto_DropItem::default_instance_->InitAsDefaultInstance();
  NetProto_SellGoods::default_instance_->InitAsDefaultInstance();
  NetProto_Luck::default_instance_->InitAsDefaultInstance();
  NetProto_GrabRedEnvelope::default_instance_->InitAsDefaultInstance();
  NetProto_CatGift::default_instance_->InitAsDefaultInstance();
  NetProto_GroupPurchase::default_instance_->InitAsDefaultInstance();
  NetProto_Rides::default_instance_->InitAsDefaultInstance();
  NetProto_RidesTrain::default_instance_->InitAsDefaultInstance();
  NetProto_GenRides::default_instance_->InitAsDefaultInstance();
  NetProto_GodShip::default_instance_->InitAsDefaultInstance();
  NetProto_Swallow::default_instance_->InitAsDefaultInstance();
  NetProto_GodPackage::default_instance_->InitAsDefaultInstance();
  NetProto_WearGodShip::default_instance_->InitAsDefaultInstance();
  NetProto_UnWearGodShip::default_instance_->InitAsDefaultInstance();
  NetProto_ArrangeGodShip::default_instance_->InitAsDefaultInstance();
  NetProto_RidesUP::default_instance_->InitAsDefaultInstance();
  NetProto_RidesInherit::default_instance_->InitAsDefaultInstance();
  NetProto_SingleGodShip::default_instance_->InitAsDefaultInstance();
  NetProto_RidesLockAtt::default_instance_->InitAsDefaultInstance();
  NetProto_RidesConfirmTrain::default_instance_->InitAsDefaultInstance();
  NetProto_RidesUnLockAtt::default_instance_->InitAsDefaultInstance();
  NetProto_AddStatus::default_instance_->InitAsDefaultInstance();
  NetProto_Hit::default_instance_->InitAsDefaultInstance();
  NetProto_StatusEffect::default_instance_->InitAsDefaultInstance();
  NetProto_StaticOver::default_instance_->InitAsDefaultInstance();
  NetProto_Standup::default_instance_->InitAsDefaultInstance();
  NetProto_SkillLevelUp::default_instance_->InitAsDefaultInstance();
  NetProto_ClearSkill::default_instance_->InitAsDefaultInstance();
  NetProto_DestroySkill::default_instance_->InitAsDefaultInstance();
  NetProto_AddGoods::default_instance_->InitAsDefaultInstance();
  NetProto_AddEquipments::default_instance_->InitAsDefaultInstance();
  NetProto_ShiftItem::default_instance_->InitAsDefaultInstance();
  NetProto_QueryItemInfo::default_instance_->InitAsDefaultInstance();
  NetProto_BuyItem::default_instance_->InitAsDefaultInstance();
  NetProto_SellItem::default_instance_->InitAsDefaultInstance();
  NetProto_Repair::default_instance_->InitAsDefaultInstance();
  NetProto_UseGoods::default_instance_->InitAsDefaultInstance();
  NetProto_UnlockPackage::default_instance_->InitAsDefaultInstance();
  NetProto_RecoverDurability::default_instance_->InitAsDefaultInstance();
  NetProto_AddDesignation::default_instance_->InitAsDefaultInstance();
  NetProto_DelDesignation::default_instance_->InitAsDefaultInstance();
  NetProto_ShowDesignation::default_instance_->InitAsDefaultInstance();
  NetProto_UnshowDesignation::default_instance_->InitAsDefaultInstance();
  NetProto_Recharge::default_instance_->InitAsDefaultInstance();
  NetProto_BusinessInfo::default_instance_->InitAsDefaultInstance();
  NetProto_TransformWar::default_instance_->InitAsDefaultInstance();
  NetProto_TransformLevelUp::default_instance_->InitAsDefaultInstance();
  NetProto_TransformActive::default_instance_->InitAsDefaultInstance();
  NetProto_Reservation::default_instance_->InitAsDefaultInstance();
  NetProto_OneReservation::default_instance_->InitAsDefaultInstance();
  NetProto_ReservationList::default_instance_->InitAsDefaultInstance();
  NetProto_Talk::default_instance_->InitAsDefaultInstance();
  NetProto_Answer::default_instance_->InitAsDefaultInstance();
  NetProto_RequestFunc::default_instance_->InitAsDefaultInstance();
  NetProto_ReplyFunc::default_instance_->InitAsDefaultInstance();
  NetProto_ApplyMission::default_instance_->InitAsDefaultInstance();
  NetProto_CompleteMission::default_instance_->InitAsDefaultInstance();
  NetProto_GiveUpMission::default_instance_->InitAsDefaultInstance();
  NetProto_Chat::default_instance_->InitAsDefaultInstance();
  NetProto_Message::default_instance_->InitAsDefaultInstance();
  NetProto_SendMail::default_instance_->InitAsDefaultInstance();
  NetProto_GetMailItem::default_instance_->InitAsDefaultInstance();
  NetProto_ReadMail::default_instance_->InitAsDefaultInstance();
  NetProto_DelMail::default_instance_->InitAsDefaultInstance();
  NetProto_GMLogin::default_instance_->InitAsDefaultInstance();
  NetProto_GMOrder::default_instance_->InitAsDefaultInstance();
  NetProto_GMOnlinePlayers::default_instance_->InitAsDefaultInstance();
  NetProto_GMChat::default_instance_->InitAsDefaultInstance();
  NetProto_GMServerMgr::default_instance_->InitAsDefaultInstance();
  NetProto_GMPlayerQuery::default_instance_->InitAsDefaultInstance();
  NetProto_GMForbid::default_instance_->InitAsDefaultInstance();
  NetProto_GMNotice::default_instance_->InitAsDefaultInstance();
  NetProto_GMRequest::default_instance_->InitAsDefaultInstance();
  NetProto_GMShutDownServer::default_instance_->InitAsDefaultInstance();
  NetProto_GMChatRecords::default_instance_->InitAsDefaultInstance();
  NetProto_GMRegistrCount::default_instance_->InitAsDefaultInstance();
  NetProto_GMRoleCount::default_instance_->InitAsDefaultInstance();
  LevelStatistics::default_instance_->InitAsDefaultInstance();
  NetProto_GMLevelStatistics::default_instance_->InitAsDefaultInstance();
  NetProto_GMRankStatistics::default_instance_->InitAsDefaultInstance();
  NetProto_GMOpenGuide::default_instance_->InitAsDefaultInstance();
  NetProto_GMNoticeMgr::default_instance_->InitAsDefaultInstance();
  NetProto_GMRegister::default_instance_->InitAsDefaultInstance();
  NetProto_GMShutDownMessage::default_instance_->InitAsDefaultInstance();
  NetProto_GMOpenMessage::default_instance_->InitAsDefaultInstance();
  NetProto_GMModifyVIP::default_instance_->InitAsDefaultInstance();
  NetProto_GMAddExchange::default_instance_->InitAsDefaultInstance();
  NetProto_GMQueryFaction::default_instance_->InitAsDefaultInstance();
  NetProto_GMChangeFactionMem::default_instance_->InitAsDefaultInstance();
  NetProto_GMAddRekooRole::default_instance_->InitAsDefaultInstance();
  NetProto_GMLoginInfo::default_instance_->InitAsDefaultInstance();
  NetProto_ObtainPet::default_instance_->InitAsDefaultInstance();
  NetProto_PetFighting::default_instance_->InitAsDefaultInstance();
  NetProto_PetRest::default_instance_->InitAsDefaultInstance();
  NetProto_PetAttach::default_instance_->InitAsDefaultInstance();
  NetProto_PetLevelUp::default_instance_->InitAsDefaultInstance();
  NetProto_PetLearnSkill::default_instance_->InitAsDefaultInstance();
  NetProto_PetInherit::default_instance_->InitAsDefaultInstance();
  NetProto_PetAdvance::default_instance_->InitAsDefaultInstance();
  NetProto_PetPsychicsLevelUp::default_instance_->InitAsDefaultInstance();
  NetProto_ActiveGemRequest::default_instance_->InitAsDefaultInstance();
  NetProto_ActiveDoubleGem::default_instance_->InitAsDefaultInstance();
  NetProto_ActiveUpGradeGem::default_instance_->InitAsDefaultInstance();
  NetProto_ActiveGetGem::default_instance_->InitAsDefaultInstance();
  NetProto_ActiveFight::default_instance_->InitAsDefaultInstance();
  NetProto_ActiveStrongeSolider::default_instance_->InitAsDefaultInstance();
  NetProto_EnterPlayOff::default_instance_->InitAsDefaultInstance();
  NetProto_PlayOffInfo::default_instance_->InitAsDefaultInstance();
  NetProto_PreparePlayOff::default_instance_->InitAsDefaultInstance();
  NetProto_Treasure::default_instance_->InitAsDefaultInstance();
  NetProto_Hire::default_instance_->InitAsDefaultInstance();
  NetProto_MoneyTree::default_instance_->InitAsDefaultInstance();
  NetProto_TreasureBox::default_instance_->InitAsDefaultInstance();
  NetProto_FlyPlan::default_instance_->InitAsDefaultInstance();
  NetProto_BlessCome::default_instance_->InitAsDefaultInstance();
  NetProto_ModifyBlessScore::default_instance_->InitAsDefaultInstance();
  NetProto_TopUpObtRMB::default_instance_->InitAsDefaultInstance();
  NetProto_ServerOpenTime::default_instance_->InitAsDefaultInstance();
  NetProto_InvateCode::default_instance_->InitAsDefaultInstance();
  NetProto_UpdateInvateCount::default_instance_->InitAsDefaultInstance();
  NetProto_CreateFaction::default_instance_->InitAsDefaultInstance();
  NetProto_DelFaction::default_instance_->InitAsDefaultInstance();
  NetProto_Donate::default_instance_->InitAsDefaultInstance();
  NetProto_FactionNotice::default_instance_->InitAsDefaultInstance();
  NetProto_Designate::default_instance_->InitAsDefaultInstance();
  NetProto_AddMem::default_instance_->InitAsDefaultInstance();
  NetProto_DelMem::default_instance_->InitAsDefaultInstance();
  NetProto_Applicant::default_instance_->InitAsDefaultInstance();
  NetProto_Guardian::default_instance_->InitAsDefaultInstance();
  NetProto_FactionInfo::default_instance_->InitAsDefaultInstance();
  NetProto_FactionMem::default_instance_->InitAsDefaultInstance();
  NetProto_FactionChangeMem::default_instance_->InitAsDefaultInstance();
  NetProto_FactionGuardian::default_instance_->InitAsDefaultInstance();
  NetProto_FactionApplicant::default_instance_->InitAsDefaultInstance();
  NetProto_FactionAllApplicant::default_instance_->InitAsDefaultInstance();
  NetProto_FactionList::default_instance_->InitAsDefaultInstance();
  NetProto_AcceptToFaction::default_instance_->InitAsDefaultInstance();
  NetProto_AsyncStatistics::default_instance_->InitAsDefaultInstance();
  NetProto_StatisticsAGSLoadScene::default_instance_->InitAsDefaultInstance();
  NetProto_StatisticsAGSLoadNPC::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetProto_2eproto {
  StaticDescriptorInitializer_NetProto_2eproto() {
    protobuf_AddDesc_NetProto_2eproto();
  }
} static_descriptor_initializer_NetProto_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ClientException_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ClientException_ID_descriptor_;
}
bool NetProto_ClientException_ID_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ClientException_ID NetProto_ClientException::GROUPID;
const NetProto_ClientException_ID NetProto_ClientException::UNITID;
const NetProto_ClientException_ID NetProto_ClientException::ID_MIN;
const NetProto_ClientException_ID NetProto_ClientException::ID_MAX;
const int NetProto_ClientException::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ClientException::kOutputFieldNumber;
const int NetProto_ClientException::kStackTraceFieldNumber;
const int NetProto_ClientException::kTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_ClientException::NetProto_ClientException()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ClientException::InitAsDefaultInstance() {
}

NetProto_ClientException::NetProto_ClientException(const NetProto_ClientException& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ClientException::SharedCtor() {
  _cached_size_ = 0;
  output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stackTrace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ClientException::~NetProto_ClientException() {
  SharedDtor();
}

void NetProto_ClientException::SharedDtor() {
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    delete output_;
  }
  if (stackTrace_ != &::google::protobuf::internal::kEmptyString) {
    delete stackTrace_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_ClientException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ClientException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ClientException_descriptor_;
}

const NetProto_ClientException& NetProto_ClientException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ClientException* NetProto_ClientException::default_instance_ = NULL;

NetProto_ClientException* NetProto_ClientException::New() const {
  return new NetProto_ClientException;
}

void NetProto_ClientException::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_output()) {
      if (output_ != &::google::protobuf::internal::kEmptyString) {
        output_->clear();
      }
    }
    if (has_stackTrace()) {
      if (stackTrace_ != &::google::protobuf::internal::kEmptyString) {
        stackTrace_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ClientException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string output = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output().data(), this->output().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stackTrace;
        break;
      }
      
      // optional string stackTrace = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stackTrace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stackTrace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stackTrace().data(), this->stackTrace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }
      
      // optional string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ClientException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string output = 1;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->output(), output);
  }
  
  // optional string stackTrace = 2;
  if (has_stackTrace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stackTrace().data(), this->stackTrace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stackTrace(), output);
  }
  
  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ClientException::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string output = 1;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output(), target);
  }
  
  // optional string stackTrace = 2;
  if (has_stackTrace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stackTrace().data(), this->stackTrace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stackTrace(), target);
  }
  
  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ClientException::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string output = 1;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output());
    }
    
    // optional string stackTrace = 2;
    if (has_stackTrace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stackTrace());
    }
    
    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ClientException::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ClientException* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ClientException*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ClientException::MergeFrom(const NetProto_ClientException& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_output()) {
      set_output(from.output());
    }
    if (from.has_stackTrace()) {
      set_stackTrace(from.stackTrace());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ClientException::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ClientException::CopyFrom(const NetProto_ClientException& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ClientException::IsInitialized() const {
  
  return true;
}

void NetProto_ClientException::Swap(NetProto_ClientException* other) {
  if (other != this) {
    std::swap(output_, other->output_);
    std::swap(stackTrace_, other->stackTrace_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ClientException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ClientException_descriptor_;
  metadata.reflection = NetProto_ClientException_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Heartbeat_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Heartbeat_ID_descriptor_;
}
bool NetProto_Heartbeat_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Heartbeat_ID NetProto_Heartbeat::GROUPID;
const NetProto_Heartbeat_ID NetProto_Heartbeat::UNITID;
const NetProto_Heartbeat_ID NetProto_Heartbeat::ID_MIN;
const NetProto_Heartbeat_ID NetProto_Heartbeat::ID_MAX;
const int NetProto_Heartbeat::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_Heartbeat::NetProto_Heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Heartbeat::InitAsDefaultInstance() {
}

NetProto_Heartbeat::NetProto_Heartbeat(const NetProto_Heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Heartbeat::~NetProto_Heartbeat() {
  SharedDtor();
}

void NetProto_Heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Heartbeat_descriptor_;
}

const NetProto_Heartbeat& NetProto_Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Heartbeat* NetProto_Heartbeat::default_instance_ = NULL;

NetProto_Heartbeat* NetProto_Heartbeat::New() const {
  return new NetProto_Heartbeat;
}

void NetProto_Heartbeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Heartbeat::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Heartbeat::MergeFrom(const NetProto_Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Heartbeat::CopyFrom(const NetProto_Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Heartbeat::IsInitialized() const {
  
  return true;
}

void NetProto_Heartbeat::Swap(NetProto_Heartbeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Heartbeat_descriptor_;
  metadata.reflection = NetProto_Heartbeat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Login_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Login_ID_descriptor_;
}
bool NetProto_Login_ID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Login_ID NetProto_Login::GROUPID;
const NetProto_Login_ID NetProto_Login::UNITID;
const NetProto_Login_ID NetProto_Login::ID_MIN;
const NetProto_Login_ID NetProto_Login::ID_MAX;
const int NetProto_Login::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Login::kAccountFieldNumber;
const int NetProto_Login::kPasswordFieldNumber;
const int NetProto_Login::kVersionFieldNumber;
const int NetProto_Login::kPlatformFieldNumber;
const int NetProto_Login::kDeviceIDFieldNumber;
const int NetProto_Login::kIdfaFieldNumber;
const int NetProto_Login::kOsversionFieldNumber;
const int NetProto_Login::kPhonetypeFieldNumber;
const int NetProto_Login::kImeiFieldNumber;
const int NetProto_Login::kAddTimeFieldNumber;
const int NetProto_Login::kDeviceAddTimeFieldNumber;
const int NetProto_Login::kActivateKeyFieldNumber;
const int NetProto_Login::kLoginLaterFieldNumber;
const int NetProto_Login::kSessionIdFieldNumber;
const int NetProto_Login::kSessionTypeFieldNumber;
const int NetProto_Login::kOpenidFieldNumber;
const int NetProto_Login::kOpenkeyFieldNumber;
const int NetProto_Login::kPayTokenFieldNumber;
const int NetProto_Login::kPfFieldNumber;
const int NetProto_Login::kPfkeyFieldNumber;
#endif  // !_MSC_VER

NetProto_Login::NetProto_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Login::InitAsDefaultInstance() {
}

NetProto_Login::NetProto_Login(const NetProto_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Login::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = GOOGLE_LONGLONG(0);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addTime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceAddTime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activateKey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginLater_ = false;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pay_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Login::~NetProto_Login() {
  SharedDtor();
}

void NetProto_Login::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceID_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    delete osversion_;
  }
  if (phonetype_ != &::google::protobuf::internal::kEmptyString) {
    delete phonetype_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (addTime_ != &::google::protobuf::internal::kEmptyString) {
    delete addTime_;
  }
  if (deviceAddTime_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceAddTime_;
  }
  if (activateKey_ != &::google::protobuf::internal::kEmptyString) {
    delete activateKey_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (session_type_ != &::google::protobuf::internal::kEmptyString) {
    delete session_type_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (pay_token_ != &::google::protobuf::internal::kEmptyString) {
    delete pay_token_;
  }
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pfkey_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Login_descriptor_;
}

const NetProto_Login& NetProto_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Login* NetProto_Login::default_instance_ = NULL;

NetProto_Login* NetProto_Login::New() const {
  return new NetProto_Login;
}

void NetProto_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    version_ = GOOGLE_LONGLONG(0);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_deviceID()) {
      if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
        deviceID_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
    if (has_osversion()) {
      if (osversion_ != &::google::protobuf::internal::kEmptyString) {
        osversion_->clear();
      }
    }
    if (has_phonetype()) {
      if (phonetype_ != &::google::protobuf::internal::kEmptyString) {
        phonetype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
    if (has_addTime()) {
      if (addTime_ != &::google::protobuf::internal::kEmptyString) {
        addTime_->clear();
      }
    }
    if (has_deviceAddTime()) {
      if (deviceAddTime_ != &::google::protobuf::internal::kEmptyString) {
        deviceAddTime_->clear();
      }
    }
    if (has_activateKey()) {
      if (activateKey_ != &::google::protobuf::internal::kEmptyString) {
        activateKey_->clear();
      }
    }
    loginLater_ = false;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_session_type()) {
      if (session_type_ != &::google::protobuf::internal::kEmptyString) {
        session_type_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_openkey()) {
      if (openkey_ != &::google::protobuf::internal::kEmptyString) {
        openkey_->clear();
      }
    }
    if (has_pay_token()) {
      if (pay_token_ != &::google::protobuf::internal::kEmptyString) {
        pay_token_->clear();
      }
    }
    if (has_pf()) {
      if (pf_ != &::google::protobuf::internal::kEmptyString) {
        pf_->clear();
      }
    }
    if (has_pfkey()) {
      if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
        pfkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }
      
      // optional int64 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_platform;
        break;
      }
      
      // optional string platform = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceID;
        break;
      }
      
      // optional string deviceID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceID()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceID().data(), this->deviceID().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_idfa;
        break;
      }
      
      // optional string idfa = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_osversion;
        break;
      }
      
      // optional string osversion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osversion().data(), this->osversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_phonetype;
        break;
      }
      
      // optional string phonetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phonetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phonetype().data(), this->phonetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_imei;
        break;
      }
      
      // optional string imei = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_addTime;
        break;
      }
      
      // optional string addTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addTime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addTime().data(), this->addTime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_deviceAddTime;
        break;
      }
      
      // optional string deviceAddTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceAddTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceAddTime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceAddTime().data(), this->deviceAddTime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_activateKey;
        break;
      }
      
      // optional string activateKey = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activateKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activateKey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activateKey().data(), this->activateKey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_loginLater;
        break;
      }
      
      // optional bool loginLater = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginLater:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loginLater_)));
          set_has_loginLater();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_session_type;
        break;
      }
      
      // optional string session_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_type().data(), this->session_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_openid;
        break;
      }
      
      // optional string openid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_openkey;
        break;
      }
      
      // optional string openkey = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openkey().data(), this->openkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_pay_token;
        break;
      }
      
      // optional string pay_token = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pay_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pay_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pay_token().data(), this->pay_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_pf;
        break;
      }
      
      // optional string pf = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pf().data(), this->pf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_pfkey;
        break;
      }
      
      // optional string pfkey = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pfkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pfkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pfkey().data(), this->pfkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional int64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->version(), output);
  }
  
  // optional string platform = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->platform(), output);
  }
  
  // optional string deviceID = 5;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->deviceID(), output);
  }
  
  // optional string idfa = 6;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->idfa(), output);
  }
  
  // optional string osversion = 7;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->osversion(), output);
  }
  
  // optional string phonetype = 8;
  if (has_phonetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonetype().data(), this->phonetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->phonetype(), output);
  }
  
  // optional string imei = 9;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->imei(), output);
  }
  
  // optional string addTime = 10;
  if (has_addTime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addTime().data(), this->addTime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->addTime(), output);
  }
  
  // optional string deviceAddTime = 11;
  if (has_deviceAddTime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceAddTime().data(), this->deviceAddTime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->deviceAddTime(), output);
  }
  
  // optional string activateKey = 12;
  if (has_activateKey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activateKey().data(), this->activateKey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->activateKey(), output);
  }
  
  // optional bool loginLater = 13;
  if (has_loginLater()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->loginLater(), output);
  }
  
  // optional string session_id = 14;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->session_id(), output);
  }
  
  // optional string session_type = 15;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_type().data(), this->session_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->session_type(), output);
  }
  
  // optional string openid = 16;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->openid(), output);
  }
  
  // optional string openkey = 17;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->openkey(), output);
  }
  
  // optional string pay_token = 18;
  if (has_pay_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pay_token().data(), this->pay_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->pay_token(), output);
  }
  
  // optional string pf = 19;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->pf(), output);
  }
  
  // optional string pfkey = 20;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->pfkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional int64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->version(), target);
  }
  
  // optional string platform = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platform(), target);
  }
  
  // optional string deviceID = 5;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deviceID(), target);
  }
  
  // optional string idfa = 6;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->idfa(), target);
  }
  
  // optional string osversion = 7;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->osversion(), target);
  }
  
  // optional string phonetype = 8;
  if (has_phonetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phonetype().data(), this->phonetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->phonetype(), target);
  }
  
  // optional string imei = 9;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->imei(), target);
  }
  
  // optional string addTime = 10;
  if (has_addTime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addTime().data(), this->addTime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->addTime(), target);
  }
  
  // optional string deviceAddTime = 11;
  if (has_deviceAddTime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceAddTime().data(), this->deviceAddTime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->deviceAddTime(), target);
  }
  
  // optional string activateKey = 12;
  if (has_activateKey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activateKey().data(), this->activateKey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->activateKey(), target);
  }
  
  // optional bool loginLater = 13;
  if (has_loginLater()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->loginLater(), target);
  }
  
  // optional string session_id = 14;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->session_id(), target);
  }
  
  // optional string session_type = 15;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_type().data(), this->session_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->session_type(), target);
  }
  
  // optional string openid = 16;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->openid(), target);
  }
  
  // optional string openkey = 17;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->openkey(), target);
  }
  
  // optional string pay_token = 18;
  if (has_pay_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pay_token().data(), this->pay_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->pay_token(), target);
  }
  
  // optional string pf = 19;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->pf(), target);
  }
  
  // optional string pfkey = 20;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->pfkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional int64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }
    
    // optional string platform = 4;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // optional string deviceID = 5;
    if (has_deviceID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceID());
    }
    
    // optional string idfa = 6;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }
    
    // optional string osversion = 7;
    if (has_osversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osversion());
    }
    
    // optional string phonetype = 8;
    if (has_phonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonetype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string imei = 9;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }
    
    // optional string addTime = 10;
    if (has_addTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addTime());
    }
    
    // optional string deviceAddTime = 11;
    if (has_deviceAddTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceAddTime());
    }
    
    // optional string activateKey = 12;
    if (has_activateKey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activateKey());
    }
    
    // optional bool loginLater = 13;
    if (has_loginLater()) {
      total_size += 1 + 1;
    }
    
    // optional string session_id = 14;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional string session_type = 15;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_type());
    }
    
    // optional string openid = 16;
    if (has_openid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string openkey = 17;
    if (has_openkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openkey());
    }
    
    // optional string pay_token = 18;
    if (has_pay_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pay_token());
    }
    
    // optional string pf = 19;
    if (has_pf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pf());
    }
    
    // optional string pfkey = 20;
    if (has_pfkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pfkey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Login::MergeFrom(const NetProto_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_deviceID()) {
      set_deviceID(from.deviceID());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_osversion()) {
      set_osversion(from.osversion());
    }
    if (from.has_phonetype()) {
      set_phonetype(from.phonetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_addTime()) {
      set_addTime(from.addTime());
    }
    if (from.has_deviceAddTime()) {
      set_deviceAddTime(from.deviceAddTime());
    }
    if (from.has_activateKey()) {
      set_activateKey(from.activateKey());
    }
    if (from.has_loginLater()) {
      set_loginLater(from.loginLater());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_openkey()) {
      set_openkey(from.openkey());
    }
    if (from.has_pay_token()) {
      set_pay_token(from.pay_token());
    }
    if (from.has_pf()) {
      set_pf(from.pf());
    }
    if (from.has_pfkey()) {
      set_pfkey(from.pfkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Login::CopyFrom(const NetProto_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Login::IsInitialized() const {
  
  return true;
}

void NetProto_Login::Swap(NetProto_Login* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(version_, other->version_);
    std::swap(platform_, other->platform_);
    std::swap(deviceID_, other->deviceID_);
    std::swap(idfa_, other->idfa_);
    std::swap(osversion_, other->osversion_);
    std::swap(phonetype_, other->phonetype_);
    std::swap(imei_, other->imei_);
    std::swap(addTime_, other->addTime_);
    std::swap(deviceAddTime_, other->deviceAddTime_);
    std::swap(activateKey_, other->activateKey_);
    std::swap(loginLater_, other->loginLater_);
    std::swap(session_id_, other->session_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(openid_, other->openid_);
    std::swap(openkey_, other->openkey_);
    std::swap(pay_token_, other->pay_token_);
    std::swap(pf_, other->pf_);
    std::swap(pfkey_, other->pfkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Login_descriptor_;
  metadata.reflection = NetProto_Login_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_LoginResult_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoginResult_ID_descriptor_;
}
bool NetProto_LoginResult_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_LoginResult_ID NetProto_LoginResult::GROUPID;
const NetProto_LoginResult_ID NetProto_LoginResult::UNITID;
const NetProto_LoginResult_ID NetProto_LoginResult::ID_MIN;
const NetProto_LoginResult_ID NetProto_LoginResult::ID_MAX;
const int NetProto_LoginResult::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_LoginResult::kIdFieldNumber;
const int NetProto_LoginResult::kServerOpenTimeFieldNumber;
#endif  // !_MSC_VER

NetProto_LoginResult::NetProto_LoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_LoginResult::InitAsDefaultInstance() {
}

NetProto_LoginResult::NetProto_LoginResult(const NetProto_LoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_LoginResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  serverOpenTime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_LoginResult::~NetProto_LoginResult() {
  SharedDtor();
}

void NetProto_LoginResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_LoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_LoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoginResult_descriptor_;
}

const NetProto_LoginResult& NetProto_LoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_LoginResult* NetProto_LoginResult::default_instance_ = NULL;

NetProto_LoginResult* NetProto_LoginResult::New() const {
  return new NetProto_LoginResult;
}

void NetProto_LoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    serverOpenTime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_LoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverOpenTime;
        break;
      }
      
      // optional int32 serverOpenTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverOpenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverOpenTime_)));
          set_has_serverOpenTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_LoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 serverOpenTime = 2;
  if (has_serverOpenTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverOpenTime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_LoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 serverOpenTime = 2;
  if (has_serverOpenTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverOpenTime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_LoginResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 serverOpenTime = 2;
    if (has_serverOpenTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverOpenTime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_LoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_LoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_LoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_LoginResult::MergeFrom(const NetProto_LoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_serverOpenTime()) {
      set_serverOpenTime(from.serverOpenTime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_LoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_LoginResult::CopyFrom(const NetProto_LoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_LoginResult::IsInitialized() const {
  
  return true;
}

void NetProto_LoginResult::Swap(NetProto_LoginResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(serverOpenTime_, other->serverOpenTime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_LoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_LoginResult_descriptor_;
  metadata.reflection = NetProto_LoginResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Logout_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Logout_ID_descriptor_;
}
bool NetProto_Logout_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Logout_ID NetProto_Logout::GROUPID;
const NetProto_Logout_ID NetProto_Logout::UNITID;
const NetProto_Logout_ID NetProto_Logout::ID_MIN;
const NetProto_Logout_ID NetProto_Logout::ID_MAX;
const int NetProto_Logout::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Logout::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_Logout::NetProto_Logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Logout::InitAsDefaultInstance() {
}

NetProto_Logout::NetProto_Logout(const NetProto_Logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Logout::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Logout::~NetProto_Logout() {
  SharedDtor();
}

void NetProto_Logout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Logout_descriptor_;
}

const NetProto_Logout& NetProto_Logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Logout* NetProto_Logout::default_instance_ = NULL;

NetProto_Logout* NetProto_Logout::New() const {
  return new NetProto_Logout;
}

void NetProto_Logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Logout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Logout::MergeFrom(const NetProto_Logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Logout::CopyFrom(const NetProto_Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Logout::IsInitialized() const {
  
  return true;
}

void NetProto_Logout::Swap(NetProto_Logout* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Logout_descriptor_;
  metadata.reflection = NetProto_Logout_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SelectRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SelectRole_ID_descriptor_;
}
bool NetProto_SelectRole_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SelectRole_ID NetProto_SelectRole::GROUPID;
const NetProto_SelectRole_ID NetProto_SelectRole::UNITID;
const NetProto_SelectRole_ID NetProto_SelectRole::ID_MIN;
const NetProto_SelectRole_ID NetProto_SelectRole::ID_MAX;
const int NetProto_SelectRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SelectRole::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_SelectRole::NetProto_SelectRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SelectRole::InitAsDefaultInstance() {
}

NetProto_SelectRole::NetProto_SelectRole(const NetProto_SelectRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SelectRole::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SelectRole::~NetProto_SelectRole() {
  SharedDtor();
}

void NetProto_SelectRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_SelectRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SelectRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SelectRole_descriptor_;
}

const NetProto_SelectRole& NetProto_SelectRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SelectRole* NetProto_SelectRole::default_instance_ = NULL;

NetProto_SelectRole* NetProto_SelectRole::New() const {
  return new NetProto_SelectRole;
}

void NetProto_SelectRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SelectRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SelectRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SelectRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SelectRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SelectRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SelectRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SelectRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SelectRole::MergeFrom(const NetProto_SelectRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SelectRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SelectRole::CopyFrom(const NetProto_SelectRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SelectRole::IsInitialized() const {
  
  return true;
}

void NetProto_SelectRole::Swap(NetProto_SelectRole* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SelectRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SelectRole_descriptor_;
  metadata.reflection = NetProto_SelectRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_CreateRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CreateRole_ID_descriptor_;
}
bool NetProto_CreateRole_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_CreateRole_ID NetProto_CreateRole::GROUPID;
const NetProto_CreateRole_ID NetProto_CreateRole::UNITID;
const NetProto_CreateRole_ID NetProto_CreateRole::ID_MIN;
const NetProto_CreateRole_ID NetProto_CreateRole::ID_MAX;
const int NetProto_CreateRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_CreateRole::kTypeFieldNumber;
const int NetProto_CreateRole::kNameFieldNumber;
const int NetProto_CreateRole::kMaleFieldNumber;
#endif  // !_MSC_VER

NetProto_CreateRole::NetProto_CreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_CreateRole::InitAsDefaultInstance() {
}

NetProto_CreateRole::NetProto_CreateRole(const NetProto_CreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_CreateRole::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  male_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_CreateRole::~NetProto_CreateRole() {
  SharedDtor();
}

void NetProto_CreateRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_CreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_CreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CreateRole_descriptor_;
}

const NetProto_CreateRole& NetProto_CreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_CreateRole* NetProto_CreateRole::default_instance_ = NULL;

NetProto_CreateRole* NetProto_CreateRole::New() const {
  return new NetProto_CreateRole;
}

void NetProto_CreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    male_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_CreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_ProfessionInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_type(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_male;
        break;
      }
      
      // optional bool male = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_male:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &male_)));
          set_has_male();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_CreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_ProfessionInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional bool male = 3;
  if (has_male()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->male(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_CreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_ProfessionInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional bool male = 3;
  if (has_male()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->male(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_CreateRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_ProfessionInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bool male = 3;
    if (has_male()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_CreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_CreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_CreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_CreateRole::MergeFrom(const NetProto_CreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_male()) {
      set_male(from.male());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_CreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_CreateRole::CopyFrom(const NetProto_CreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_CreateRole::IsInitialized() const {
  
  return true;
}

void NetProto_CreateRole::Swap(NetProto_CreateRole* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(male_, other->male_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_CreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_CreateRole_descriptor_;
  metadata.reflection = NetProto_CreateRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ServerTime_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ServerTime_ID_descriptor_;
}
bool NetProto_ServerTime_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ServerTime_ID NetProto_ServerTime::GROUPID;
const NetProto_ServerTime_ID NetProto_ServerTime::UNITID;
const NetProto_ServerTime_ID NetProto_ServerTime::ID_MIN;
const NetProto_ServerTime_ID NetProto_ServerTime::ID_MAX;
const int NetProto_ServerTime::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ServerTime::kTimeFieldNumber;
const int NetProto_ServerTime::kCurFieldNumber;
#endif  // !_MSC_VER

NetProto_ServerTime::NetProto_ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ServerTime::InitAsDefaultInstance() {
}

NetProto_ServerTime::NetProto_ServerTime(const NetProto_ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ServerTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  cur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ServerTime::~NetProto_ServerTime() {
  SharedDtor();
}

void NetProto_ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ServerTime_descriptor_;
}

const NetProto_ServerTime& NetProto_ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ServerTime* NetProto_ServerTime::default_instance_ = NULL;

NetProto_ServerTime* NetProto_ServerTime::New() const {
  return new NetProto_ServerTime;
}

void NetProto_ServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    cur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur;
        break;
      }
      
      // optional int32 cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }
  
  // optional int32 cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }
  
  // optional int32 cur = 2;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ServerTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 cur = 2;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ServerTime::MergeFrom(const NetProto_ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ServerTime::CopyFrom(const NetProto_ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ServerTime::IsInitialized() const {
  
  return true;
}

void NetProto_ServerTime::Swap(NetProto_ServerTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(cur_, other->cur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ServerTime_descriptor_;
  metadata.reflection = NetProto_ServerTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RoleList_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RoleList_ID_descriptor_;
}
bool NetProto_RoleList_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RoleList_ID NetProto_RoleList::GROUPID;
const NetProto_RoleList_ID NetProto_RoleList::UNITID;
const NetProto_RoleList_ID NetProto_RoleList::ID_MIN;
const NetProto_RoleList_ID NetProto_RoleList::ID_MAX;
const int NetProto_RoleList::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RoleList::kRolesFieldNumber;
#endif  // !_MSC_VER

NetProto_RoleList::NetProto_RoleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RoleList::InitAsDefaultInstance() {
}

NetProto_RoleList::NetProto_RoleList(const NetProto_RoleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RoleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RoleList::~NetProto_RoleList() {
  SharedDtor();
}

void NetProto_RoleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RoleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RoleList_descriptor_;
}

const NetProto_RoleList& NetProto_RoleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RoleList* NetProto_RoleList::default_instance_ = NULL;

NetProto_RoleList* NetProto_RoleList::New() const {
  return new NetProto_RoleList;
}

void NetProto_RoleList::Clear() {
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_PlayerAtt roles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_PlayerAtt roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RoleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_PlayerAtt roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RoleList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_PlayerAtt roles = 1;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RoleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RoleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RoleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RoleList::MergeFrom(const NetProto_RoleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RoleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RoleList::CopyFrom(const NetProto_RoleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RoleList::IsInitialized() const {
  
  return true;
}

void NetProto_RoleList::Swap(NetProto_RoleList* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RoleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RoleList_descriptor_;
  metadata.reflection = NetProto_RoleList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DeleteRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DeleteRole_ID_descriptor_;
}
bool NetProto_DeleteRole_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DeleteRole_ID NetProto_DeleteRole::GROUPID;
const NetProto_DeleteRole_ID NetProto_DeleteRole::UNITID;
const NetProto_DeleteRole_ID NetProto_DeleteRole::ID_MIN;
const NetProto_DeleteRole_ID NetProto_DeleteRole::ID_MAX;
const int NetProto_DeleteRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DeleteRole::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_DeleteRole::NetProto_DeleteRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DeleteRole::InitAsDefaultInstance() {
}

NetProto_DeleteRole::NetProto_DeleteRole(const NetProto_DeleteRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DeleteRole::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DeleteRole::~NetProto_DeleteRole() {
  SharedDtor();
}

void NetProto_DeleteRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DeleteRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DeleteRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DeleteRole_descriptor_;
}

const NetProto_DeleteRole& NetProto_DeleteRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DeleteRole* NetProto_DeleteRole::default_instance_ = NULL;

NetProto_DeleteRole* NetProto_DeleteRole::New() const {
  return new NetProto_DeleteRole;
}

void NetProto_DeleteRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DeleteRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DeleteRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DeleteRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DeleteRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DeleteRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DeleteRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DeleteRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DeleteRole::MergeFrom(const NetProto_DeleteRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DeleteRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DeleteRole::CopyFrom(const NetProto_DeleteRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DeleteRole::IsInitialized() const {
  
  return true;
}

void NetProto_DeleteRole::Swap(NetProto_DeleteRole* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DeleteRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DeleteRole_descriptor_;
  metadata.reflection = NetProto_DeleteRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ReLogin_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReLogin_ID_descriptor_;
}
bool NetProto_ReLogin_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ReLogin_ID NetProto_ReLogin::GROUPID;
const NetProto_ReLogin_ID NetProto_ReLogin::UNITID;
const NetProto_ReLogin_ID NetProto_ReLogin::ID_MIN;
const NetProto_ReLogin_ID NetProto_ReLogin::ID_MAX;
const int NetProto_ReLogin::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ReLogin::kAccountFieldNumber;
const int NetProto_ReLogin::kPasswordFieldNumber;
const int NetProto_ReLogin::kPlatformFieldNumber;
#endif  // !_MSC_VER

NetProto_ReLogin::NetProto_ReLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ReLogin::InitAsDefaultInstance() {
}

NetProto_ReLogin::NetProto_ReLogin(const NetProto_ReLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ReLogin::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ReLogin::~NetProto_ReLogin() {
  SharedDtor();
}

void NetProto_ReLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_ReLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ReLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReLogin_descriptor_;
}

const NetProto_ReLogin& NetProto_ReLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ReLogin* NetProto_ReLogin::default_instance_ = NULL;

NetProto_ReLogin* NetProto_ReLogin::New() const {
  return new NetProto_ReLogin;
}

void NetProto_ReLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ReLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }
      
      // optional string platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ReLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->platform(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ReLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ReLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ReLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ReLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ReLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ReLogin::MergeFrom(const NetProto_ReLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ReLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ReLogin::CopyFrom(const NetProto_ReLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ReLogin::IsInitialized() const {
  
  return true;
}

void NetProto_ReLogin::Swap(NetProto_ReLogin* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ReLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ReLogin_descriptor_;
  metadata.reflection = NetProto_ReLogin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ReLoginResult_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReLoginResult_ID_descriptor_;
}
bool NetProto_ReLoginResult_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ReLoginResult_ID NetProto_ReLoginResult::GROUPID;
const NetProto_ReLoginResult_ID NetProto_ReLoginResult::UNITID;
const NetProto_ReLoginResult_ID NetProto_ReLoginResult::ID_MIN;
const NetProto_ReLoginResult_ID NetProto_ReLoginResult::ID_MAX;
const int NetProto_ReLoginResult::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ReLoginResult::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_ReLoginResult::NetProto_ReLoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ReLoginResult::InitAsDefaultInstance() {
}

NetProto_ReLoginResult::NetProto_ReLoginResult(const NetProto_ReLoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ReLoginResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ReLoginResult::~NetProto_ReLoginResult() {
  SharedDtor();
}

void NetProto_ReLoginResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ReLoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ReLoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReLoginResult_descriptor_;
}

const NetProto_ReLoginResult& NetProto_ReLoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ReLoginResult* NetProto_ReLoginResult::default_instance_ = NULL;

NetProto_ReLoginResult* NetProto_ReLoginResult::New() const {
  return new NetProto_ReLoginResult;
}

void NetProto_ReLoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ReLoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ReLoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ReLoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ReLoginResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ReLoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ReLoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ReLoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ReLoginResult::MergeFrom(const NetProto_ReLoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ReLoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ReLoginResult::CopyFrom(const NetProto_ReLoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ReLoginResult::IsInitialized() const {
  
  return true;
}

void NetProto_ReLoginResult::Swap(NetProto_ReLoginResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ReLoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ReLoginResult_descriptor_;
  metadata.reflection = NetProto_ReLoginResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Rank_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Rank_ID_descriptor_;
}
bool NetProto_Rank_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Rank_ID NetProto_Rank::GROUPID;
const NetProto_Rank_ID NetProto_Rank::UNITID;
const NetProto_Rank_ID NetProto_Rank::ID_MIN;
const NetProto_Rank_ID NetProto_Rank::ID_MAX;
const int NetProto_Rank::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Rank_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Rank_Type_descriptor_;
}
bool NetProto_Rank_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Rank_Type NetProto_Rank::POWER;
const NetProto_Rank_Type NetProto_Rank::TOWER;
const NetProto_Rank_Type NetProto_Rank::LEVEL;
const NetProto_Rank_Type NetProto_Rank::GOD;
const NetProto_Rank_Type NetProto_Rank::WORLD_BOSS;
const NetProto_Rank_Type NetProto_Rank::BLESSCOME;
const NetProto_Rank_Type NetProto_Rank::FACTION;
const NetProto_Rank_Type NetProto_Rank::PET;
const NetProto_Rank_Type NetProto_Rank::DEVIL;
const NetProto_Rank_Type NetProto_Rank::AWARD_FROM_SKY;
const NetProto_Rank_Type NetProto_Rank::LUCK;
const NetProto_Rank_Type NetProto_Rank::QIUBITE;
const NetProto_Rank_Type NetProto_Rank::CONSUME;
const NetProto_Rank_Type NetProto_Rank::CATGIFT;
const NetProto_Rank_Type NetProto_Rank::GROUP_PURCHASE;
const NetProto_Rank_Type NetProto_Rank::GROUPRECORD;
const NetProto_Rank_Type NetProto_Rank::RESERVATION;
const NetProto_Rank_Type NetProto_Rank::Type_MIN;
const NetProto_Rank_Type NetProto_Rank::Type_MAX;
const int NetProto_Rank::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Rank::kTypeFieldNumber;
const int NetProto_Rank::kRankFieldNumber;
const int NetProto_Rank::kRangeFieldNumber;
const int NetProto_Rank::kFinalKillerFieldNumber;
const int NetProto_Rank::kSelfFieldNumber;
#endif  // !_MSC_VER

NetProto_Rank::NetProto_Rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Rank::InitAsDefaultInstance() {
  finalKiller_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
  self_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
}

NetProto_Rank::NetProto_Rank(const NetProto_Rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Rank::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  range_ = 0;
  finalKiller_ = NULL;
  self_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Rank::~NetProto_Rank() {
  SharedDtor();
}

void NetProto_Rank::SharedDtor() {
  if (this != default_instance_) {
    delete finalKiller_;
    delete self_;
  }
}

void NetProto_Rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Rank_descriptor_;
}

const NetProto_Rank& NetProto_Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Rank* NetProto_Rank::default_instance_ = NULL;

NetProto_Rank* NetProto_Rank::New() const {
  return new NetProto_Rank;
}

void NetProto_Rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    range_ = 0;
    if (has_finalKiller()) {
      if (finalKiller_ != NULL) finalKiller_->::RecordInfo::Clear();
    }
    if (has_self()) {
      if (self_ != NULL) self_->::RecordInfo::Clear();
    }
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Rank.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Rank_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Rank_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }
      
      // repeated .RecordInfo rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        if (input->ExpectTag(32)) goto parse_range;
        break;
      }
      
      // optional int32 range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_finalKiller;
        break;
      }
      
      // optional .RecordInfo finalKiller = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finalKiller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finalKiller()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_self;
        break;
      }
      
      // optional .RecordInfo self = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // repeated .RecordInfo rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(i), output);
  }
  
  // optional int32 range = 4;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range(), output);
  }
  
  // optional .RecordInfo finalKiller = 5;
  if (has_finalKiller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->finalKiller(), output);
  }
  
  // optional .RecordInfo self = 6;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->self(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // repeated .RecordInfo rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(i), target);
  }
  
  // optional int32 range = 4;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->range(), target);
  }
  
  // optional .RecordInfo finalKiller = 5;
  if (has_finalKiller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->finalKiller(), target);
  }
  
  // optional .RecordInfo self = 6;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->self(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Rank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Rank.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 range = 4;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }
    
    // optional .RecordInfo finalKiller = 5;
    if (has_finalKiller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->finalKiller());
    }
    
    // optional .RecordInfo self = 6;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }
    
  }
  // repeated .RecordInfo rank = 2;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Rank::MergeFrom(const NetProto_Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_finalKiller()) {
      mutable_finalKiller()->::RecordInfo::MergeFrom(from.finalKiller());
    }
    if (from.has_self()) {
      mutable_self()->::RecordInfo::MergeFrom(from.self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Rank::CopyFrom(const NetProto_Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Rank::IsInitialized() const {
  
  return true;
}

void NetProto_Rank::Swap(NetProto_Rank* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    rank_.Swap(&other->rank_);
    std::swap(range_, other->range_);
    std::swap(finalKiller_, other->finalKiller_);
    std::swap(self_, other->self_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Rank_descriptor_;
  metadata.reflection = NetProto_Rank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SetUp_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetUp_ID_descriptor_;
}
bool NetProto_SetUp_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SetUp_ID NetProto_SetUp::GROUPID;
const NetProto_SetUp_ID NetProto_SetUp::UNITID;
const NetProto_SetUp_ID NetProto_SetUp::ID_MIN;
const NetProto_SetUp_ID NetProto_SetUp::ID_MAX;
const int NetProto_SetUp::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SetUp::kSoundVolumeFieldNumber;
const int NetProto_SetUp::kMusicVolumeFieldNumber;
const int NetProto_SetUp::kPlayerNumFieldNumber;
const int NetProto_SetUp::kFixedCameraFieldNumber;
const int NetProto_SetUp::kDisplayOtherEffectFieldNumber;
const int NetProto_SetUp::kDisplayMyEffectFieldNumber;
const int NetProto_SetUp::kDisplayOtherHurtNumFieldNumber;
#endif  // !_MSC_VER

NetProto_SetUp::NetProto_SetUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SetUp::InitAsDefaultInstance() {
}

NetProto_SetUp::NetProto_SetUp(const NetProto_SetUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SetUp::SharedCtor() {
  _cached_size_ = 0;
  soundVolume_ = 0;
  musicVolume_ = 0;
  playerNum_ = 0;
  fixedCamera_ = false;
  displayOtherEffect_ = false;
  displayMyEffect_ = false;
  displayOtherHurtNum_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SetUp::~NetProto_SetUp() {
  SharedDtor();
}

void NetProto_SetUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_SetUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SetUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetUp_descriptor_;
}

const NetProto_SetUp& NetProto_SetUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SetUp* NetProto_SetUp::default_instance_ = NULL;

NetProto_SetUp* NetProto_SetUp::New() const {
  return new NetProto_SetUp;
}

void NetProto_SetUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    soundVolume_ = 0;
    musicVolume_ = 0;
    playerNum_ = 0;
    fixedCamera_ = false;
    displayOtherEffect_ = false;
    displayMyEffect_ = false;
    displayOtherHurtNum_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SetUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 soundVolume = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soundVolume_)));
          set_has_soundVolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_musicVolume;
        break;
      }
      
      // optional int32 musicVolume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_musicVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &musicVolume_)));
          set_has_musicVolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerNum;
        break;
      }
      
      // optional int32 playerNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerNum_)));
          set_has_playerNum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fixedCamera;
        break;
      }
      
      // optional bool fixedCamera = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixedCamera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixedCamera_)));
          set_has_fixedCamera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_displayOtherEffect;
        break;
      }
      
      // optional bool displayOtherEffect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displayOtherEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &displayOtherEffect_)));
          set_has_displayOtherEffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_displayMyEffect;
        break;
      }
      
      // optional bool displayMyEffect = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displayMyEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &displayMyEffect_)));
          set_has_displayMyEffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_displayOtherHurtNum;
        break;
      }
      
      // optional bool displayOtherHurtNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displayOtherHurtNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &displayOtherHurtNum_)));
          set_has_displayOtherHurtNum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SetUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 soundVolume = 1;
  if (has_soundVolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soundVolume(), output);
  }
  
  // optional int32 musicVolume = 2;
  if (has_musicVolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->musicVolume(), output);
  }
  
  // optional int32 playerNum = 3;
  if (has_playerNum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerNum(), output);
  }
  
  // optional bool fixedCamera = 4;
  if (has_fixedCamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fixedCamera(), output);
  }
  
  // optional bool displayOtherEffect = 5;
  if (has_displayOtherEffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->displayOtherEffect(), output);
  }
  
  // optional bool displayMyEffect = 6;
  if (has_displayMyEffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->displayMyEffect(), output);
  }
  
  // optional bool displayOtherHurtNum = 7;
  if (has_displayOtherHurtNum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->displayOtherHurtNum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SetUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 soundVolume = 1;
  if (has_soundVolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soundVolume(), target);
  }
  
  // optional int32 musicVolume = 2;
  if (has_musicVolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->musicVolume(), target);
  }
  
  // optional int32 playerNum = 3;
  if (has_playerNum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerNum(), target);
  }
  
  // optional bool fixedCamera = 4;
  if (has_fixedCamera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fixedCamera(), target);
  }
  
  // optional bool displayOtherEffect = 5;
  if (has_displayOtherEffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->displayOtherEffect(), target);
  }
  
  // optional bool displayMyEffect = 6;
  if (has_displayMyEffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->displayMyEffect(), target);
  }
  
  // optional bool displayOtherHurtNum = 7;
  if (has_displayOtherHurtNum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->displayOtherHurtNum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SetUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 soundVolume = 1;
    if (has_soundVolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soundVolume());
    }
    
    // optional int32 musicVolume = 2;
    if (has_musicVolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->musicVolume());
    }
    
    // optional int32 playerNum = 3;
    if (has_playerNum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerNum());
    }
    
    // optional bool fixedCamera = 4;
    if (has_fixedCamera()) {
      total_size += 1 + 1;
    }
    
    // optional bool displayOtherEffect = 5;
    if (has_displayOtherEffect()) {
      total_size += 1 + 1;
    }
    
    // optional bool displayMyEffect = 6;
    if (has_displayMyEffect()) {
      total_size += 1 + 1;
    }
    
    // optional bool displayOtherHurtNum = 7;
    if (has_displayOtherHurtNum()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SetUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SetUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SetUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SetUp::MergeFrom(const NetProto_SetUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soundVolume()) {
      set_soundVolume(from.soundVolume());
    }
    if (from.has_musicVolume()) {
      set_musicVolume(from.musicVolume());
    }
    if (from.has_playerNum()) {
      set_playerNum(from.playerNum());
    }
    if (from.has_fixedCamera()) {
      set_fixedCamera(from.fixedCamera());
    }
    if (from.has_displayOtherEffect()) {
      set_displayOtherEffect(from.displayOtherEffect());
    }
    if (from.has_displayMyEffect()) {
      set_displayMyEffect(from.displayMyEffect());
    }
    if (from.has_displayOtherHurtNum()) {
      set_displayOtherHurtNum(from.displayOtherHurtNum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SetUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SetUp::CopyFrom(const NetProto_SetUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SetUp::IsInitialized() const {
  
  return true;
}

void NetProto_SetUp::Swap(NetProto_SetUp* other) {
  if (other != this) {
    std::swap(soundVolume_, other->soundVolume_);
    std::swap(musicVolume_, other->musicVolume_);
    std::swap(playerNum_, other->playerNum_);
    std::swap(fixedCamera_, other->fixedCamera_);
    std::swap(displayOtherEffect_, other->displayOtherEffect_);
    std::swap(displayMyEffect_, other->displayMyEffect_);
    std::swap(displayOtherHurtNum_, other->displayOtherHurtNum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SetUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SetUp_descriptor_;
  metadata.reflection = NetProto_SetUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Register_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Register_ID_descriptor_;
}
bool NetProto_Register_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Register_ID NetProto_Register::GROUPID;
const NetProto_Register_ID NetProto_Register::UNITID;
const NetProto_Register_ID NetProto_Register::ID_MIN;
const NetProto_Register_ID NetProto_Register::ID_MAX;
const int NetProto_Register::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Register::kAccountFieldNumber;
const int NetProto_Register::kPasswordFieldNumber;
const int NetProto_Register::kDeviceIDFieldNumber;
const int NetProto_Register::kIdfaFieldNumber;
#endif  // !_MSC_VER

NetProto_Register::NetProto_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Register::InitAsDefaultInstance() {
}

NetProto_Register::NetProto_Register(const NetProto_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Register::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Register::~NetProto_Register() {
  SharedDtor();
}

void NetProto_Register::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceID_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Register_descriptor_;
}

const NetProto_Register& NetProto_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Register* NetProto_Register::default_instance_ = NULL;

NetProto_Register* NetProto_Register::New() const {
  return new NetProto_Register;
}

void NetProto_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_deviceID()) {
      if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
        deviceID_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceID;
        break;
      }
      
      // optional string deviceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceID()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceID().data(), this->deviceID().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_idfa;
        break;
      }
      
      // optional string idfa = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional string deviceID = 3;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->deviceID(), output);
  }
  
  // optional string idfa = 4;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->idfa(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional string deviceID = 3;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deviceID(), target);
  }
  
  // optional string idfa = 4;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->idfa(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Register::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string deviceID = 3;
    if (has_deviceID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceID());
    }
    
    // optional string idfa = 4;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Register::MergeFrom(const NetProto_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_deviceID()) {
      set_deviceID(from.deviceID());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Register::CopyFrom(const NetProto_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Register::IsInitialized() const {
  
  return true;
}

void NetProto_Register::Swap(NetProto_Register* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(deviceID_, other->deviceID_);
    std::swap(idfa_, other->idfa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Register_descriptor_;
  metadata.reflection = NetProto_Register_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GetKeyGift_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetKeyGift_ID_descriptor_;
}
bool NetProto_GetKeyGift_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GetKeyGift_ID NetProto_GetKeyGift::GROUPID;
const NetProto_GetKeyGift_ID NetProto_GetKeyGift::UNITID;
const NetProto_GetKeyGift_ID NetProto_GetKeyGift::ID_MIN;
const NetProto_GetKeyGift_ID NetProto_GetKeyGift::ID_MAX;
const int NetProto_GetKeyGift::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GetKeyGift::kKeyFieldNumber;
const int NetProto_GetKeyGift::kResFieldNumber;
#endif  // !_MSC_VER

NetProto_GetKeyGift::NetProto_GetKeyGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GetKeyGift::InitAsDefaultInstance() {
}

NetProto_GetKeyGift::NetProto_GetKeyGift(const NetProto_GetKeyGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GetKeyGift::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GetKeyGift::~NetProto_GetKeyGift() {
  SharedDtor();
}

void NetProto_GetKeyGift::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_GetKeyGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GetKeyGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetKeyGift_descriptor_;
}

const NetProto_GetKeyGift& NetProto_GetKeyGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GetKeyGift* NetProto_GetKeyGift::default_instance_ = NULL;

NetProto_GetKeyGift* NetProto_GetKeyGift::New() const {
  return new NetProto_GetKeyGift;
}

void NetProto_GetKeyGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GetKeyGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }
      
      // optional int32 res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GetKeyGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional int32 res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GetKeyGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional int32 res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GetKeyGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional int32 res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GetKeyGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GetKeyGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GetKeyGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GetKeyGift::MergeFrom(const NetProto_GetKeyGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GetKeyGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GetKeyGift::CopyFrom(const NetProto_GetKeyGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GetKeyGift::IsInitialized() const {
  
  return true;
}

void NetProto_GetKeyGift::Swap(NetProto_GetKeyGift* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GetKeyGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GetKeyGift_descriptor_;
  metadata.reflection = NetProto_GetKeyGift_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_StatisticsUIBtn_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatisticsUIBtn_ID_descriptor_;
}
bool NetProto_StatisticsUIBtn_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StatisticsUIBtn_ID NetProto_StatisticsUIBtn::GROUPID;
const NetProto_StatisticsUIBtn_ID NetProto_StatisticsUIBtn::UNITID;
const NetProto_StatisticsUIBtn_ID NetProto_StatisticsUIBtn::ID_MIN;
const NetProto_StatisticsUIBtn_ID NetProto_StatisticsUIBtn::ID_MAX;
const int NetProto_StatisticsUIBtn::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_StatisticsUIBtn::kUiFieldNumber;
const int NetProto_StatisticsUIBtn::kBtnFieldNumber;
const int NetProto_StatisticsUIBtn::kParamFieldNumber;
#endif  // !_MSC_VER

NetProto_StatisticsUIBtn::NetProto_StatisticsUIBtn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_StatisticsUIBtn::InitAsDefaultInstance() {
}

NetProto_StatisticsUIBtn::NetProto_StatisticsUIBtn(const NetProto_StatisticsUIBtn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_StatisticsUIBtn::SharedCtor() {
  _cached_size_ = 0;
  ui_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  btn_ = 0;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_StatisticsUIBtn::~NetProto_StatisticsUIBtn() {
  SharedDtor();
}

void NetProto_StatisticsUIBtn::SharedDtor() {
  if (ui_ != &::google::protobuf::internal::kEmptyString) {
    delete ui_;
  }
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_StatisticsUIBtn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_StatisticsUIBtn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatisticsUIBtn_descriptor_;
}

const NetProto_StatisticsUIBtn& NetProto_StatisticsUIBtn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_StatisticsUIBtn* NetProto_StatisticsUIBtn::default_instance_ = NULL;

NetProto_StatisticsUIBtn* NetProto_StatisticsUIBtn::New() const {
  return new NetProto_StatisticsUIBtn;
}

void NetProto_StatisticsUIBtn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ui()) {
      if (ui_ != &::google::protobuf::internal::kEmptyString) {
        ui_->clear();
      }
    }
    btn_ = 0;
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_StatisticsUIBtn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ui().data(), this->ui().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_btn;
        break;
      }
      
      // optional int32 btn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btn_)));
          set_has_btn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param;
        break;
      }
      
      // optional string param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_StatisticsUIBtn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ui = 1;
  if (has_ui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ui().data(), this->ui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ui(), output);
  }
  
  // optional int32 btn = 2;
  if (has_btn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->btn(), output);
  }
  
  // optional string param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_StatisticsUIBtn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ui = 1;
  if (has_ui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ui().data(), this->ui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ui(), target);
  }
  
  // optional int32 btn = 2;
  if (has_btn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->btn(), target);
  }
  
  // optional string param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_StatisticsUIBtn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ui = 1;
    if (has_ui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ui());
    }
    
    // optional int32 btn = 2;
    if (has_btn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btn());
    }
    
    // optional string param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_StatisticsUIBtn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_StatisticsUIBtn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_StatisticsUIBtn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_StatisticsUIBtn::MergeFrom(const NetProto_StatisticsUIBtn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ui()) {
      set_ui(from.ui());
    }
    if (from.has_btn()) {
      set_btn(from.btn());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_StatisticsUIBtn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_StatisticsUIBtn::CopyFrom(const NetProto_StatisticsUIBtn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_StatisticsUIBtn::IsInitialized() const {
  
  return true;
}

void NetProto_StatisticsUIBtn::Swap(NetProto_StatisticsUIBtn* other) {
  if (other != this) {
    std::swap(ui_, other->ui_);
    std::swap(btn_, other->btn_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_StatisticsUIBtn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_StatisticsUIBtn_descriptor_;
  metadata.reflection = NetProto_StatisticsUIBtn_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_StatisticsGuide_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatisticsGuide_ID_descriptor_;
}
bool NetProto_StatisticsGuide_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StatisticsGuide_ID NetProto_StatisticsGuide::GROUPID;
const NetProto_StatisticsGuide_ID NetProto_StatisticsGuide::UNITID;
const NetProto_StatisticsGuide_ID NetProto_StatisticsGuide::ID_MIN;
const NetProto_StatisticsGuide_ID NetProto_StatisticsGuide::ID_MAX;
const int NetProto_StatisticsGuide::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_StatisticsGuide::kPassFieldNumber;
const int NetProto_StatisticsGuide::kNodeFieldNumber;
#endif  // !_MSC_VER

NetProto_StatisticsGuide::NetProto_StatisticsGuide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_StatisticsGuide::InitAsDefaultInstance() {
}

NetProto_StatisticsGuide::NetProto_StatisticsGuide(const NetProto_StatisticsGuide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_StatisticsGuide::SharedCtor() {
  _cached_size_ = 0;
  pass_ = 0;
  node_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_StatisticsGuide::~NetProto_StatisticsGuide() {
  SharedDtor();
}

void NetProto_StatisticsGuide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_StatisticsGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_StatisticsGuide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatisticsGuide_descriptor_;
}

const NetProto_StatisticsGuide& NetProto_StatisticsGuide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_StatisticsGuide* NetProto_StatisticsGuide::default_instance_ = NULL;

NetProto_StatisticsGuide* NetProto_StatisticsGuide::New() const {
  return new NetProto_StatisticsGuide;
}

void NetProto_StatisticsGuide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pass_ = 0;
    node_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_StatisticsGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pass = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node;
        break;
      }
      
      // optional int32 node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_)));
          set_has_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_StatisticsGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pass = 1;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pass(), output);
  }
  
  // optional int32 node = 2;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_StatisticsGuide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pass = 1;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pass(), target);
  }
  
  // optional int32 node = 2;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_StatisticsGuide::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pass = 1;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }
    
    // optional int32 node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_StatisticsGuide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_StatisticsGuide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_StatisticsGuide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_StatisticsGuide::MergeFrom(const NetProto_StatisticsGuide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_node()) {
      set_node(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_StatisticsGuide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_StatisticsGuide::CopyFrom(const NetProto_StatisticsGuide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_StatisticsGuide::IsInitialized() const {
  
  return true;
}

void NetProto_StatisticsGuide::Swap(NetProto_StatisticsGuide* other) {
  if (other != this) {
    std::swap(pass_, other->pass_);
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_StatisticsGuide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_StatisticsGuide_descriptor_;
  metadata.reflection = NetProto_StatisticsGuide_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_LoginLaterTime_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoginLaterTime_ID_descriptor_;
}
bool NetProto_LoginLaterTime_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_LoginLaterTime_ID NetProto_LoginLaterTime::GROUPID;
const NetProto_LoginLaterTime_ID NetProto_LoginLaterTime::UNITID;
const NetProto_LoginLaterTime_ID NetProto_LoginLaterTime::ID_MIN;
const NetProto_LoginLaterTime_ID NetProto_LoginLaterTime::ID_MAX;
const int NetProto_LoginLaterTime::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_LoginLaterTime::kTimeFieldNumber;
#endif  // !_MSC_VER

NetProto_LoginLaterTime::NetProto_LoginLaterTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_LoginLaterTime::InitAsDefaultInstance() {
}

NetProto_LoginLaterTime::NetProto_LoginLaterTime(const NetProto_LoginLaterTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_LoginLaterTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_LoginLaterTime::~NetProto_LoginLaterTime() {
  SharedDtor();
}

void NetProto_LoginLaterTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_LoginLaterTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_LoginLaterTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoginLaterTime_descriptor_;
}

const NetProto_LoginLaterTime& NetProto_LoginLaterTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_LoginLaterTime* NetProto_LoginLaterTime::default_instance_ = NULL;

NetProto_LoginLaterTime* NetProto_LoginLaterTime::New() const {
  return new NetProto_LoginLaterTime;
}

void NetProto_LoginLaterTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_LoginLaterTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_LoginLaterTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_LoginLaterTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_LoginLaterTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_LoginLaterTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_LoginLaterTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_LoginLaterTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_LoginLaterTime::MergeFrom(const NetProto_LoginLaterTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_LoginLaterTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_LoginLaterTime::CopyFrom(const NetProto_LoginLaterTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_LoginLaterTime::IsInitialized() const {
  
  return true;
}

void NetProto_LoginLaterTime::Swap(NetProto_LoginLaterTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_LoginLaterTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_LoginLaterTime_descriptor_;
  metadata.reflection = NetProto_LoginLaterTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_TencentBuyGoodsUrl_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TencentBuyGoodsUrl_ID_descriptor_;
}
bool NetProto_TencentBuyGoodsUrl_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_TencentBuyGoodsUrl_ID NetProto_TencentBuyGoodsUrl::GROUPID;
const NetProto_TencentBuyGoodsUrl_ID NetProto_TencentBuyGoodsUrl::UNITID;
const NetProto_TencentBuyGoodsUrl_ID NetProto_TencentBuyGoodsUrl::ID_MIN;
const NetProto_TencentBuyGoodsUrl_ID NetProto_TencentBuyGoodsUrl::ID_MAX;
const int NetProto_TencentBuyGoodsUrl::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_TencentBuyGoodsUrl::kPayitemFieldNumber;
const int NetProto_TencentBuyGoodsUrl::kGoodsmetaFieldNumber;
const int NetProto_TencentBuyGoodsUrl::kGoodsurlFieldNumber;
const int NetProto_TencentBuyGoodsUrl::kAppmetadataFieldNumber;
const int NetProto_TencentBuyGoodsUrl::kUrlFieldNumber;
const int NetProto_TencentBuyGoodsUrl::kAmtFieldNumber;
#endif  // !_MSC_VER

NetProto_TencentBuyGoodsUrl::NetProto_TencentBuyGoodsUrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_TencentBuyGoodsUrl::InitAsDefaultInstance() {
}

NetProto_TencentBuyGoodsUrl::NetProto_TencentBuyGoodsUrl(const NetProto_TencentBuyGoodsUrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_TencentBuyGoodsUrl::SharedCtor() {
  _cached_size_ = 0;
  payitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goodsmeta_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goodsurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appmetadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_TencentBuyGoodsUrl::~NetProto_TencentBuyGoodsUrl() {
  SharedDtor();
}

void NetProto_TencentBuyGoodsUrl::SharedDtor() {
  if (payitem_ != &::google::protobuf::internal::kEmptyString) {
    delete payitem_;
  }
  if (goodsmeta_ != &::google::protobuf::internal::kEmptyString) {
    delete goodsmeta_;
  }
  if (goodsurl_ != &::google::protobuf::internal::kEmptyString) {
    delete goodsurl_;
  }
  if (appmetadata_ != &::google::protobuf::internal::kEmptyString) {
    delete appmetadata_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (amt_ != &::google::protobuf::internal::kEmptyString) {
    delete amt_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_TencentBuyGoodsUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_TencentBuyGoodsUrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TencentBuyGoodsUrl_descriptor_;
}

const NetProto_TencentBuyGoodsUrl& NetProto_TencentBuyGoodsUrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_TencentBuyGoodsUrl* NetProto_TencentBuyGoodsUrl::default_instance_ = NULL;

NetProto_TencentBuyGoodsUrl* NetProto_TencentBuyGoodsUrl::New() const {
  return new NetProto_TencentBuyGoodsUrl;
}

void NetProto_TencentBuyGoodsUrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_payitem()) {
      if (payitem_ != &::google::protobuf::internal::kEmptyString) {
        payitem_->clear();
      }
    }
    if (has_goodsmeta()) {
      if (goodsmeta_ != &::google::protobuf::internal::kEmptyString) {
        goodsmeta_->clear();
      }
    }
    if (has_goodsurl()) {
      if (goodsurl_ != &::google::protobuf::internal::kEmptyString) {
        goodsurl_->clear();
      }
    }
    if (has_appmetadata()) {
      if (appmetadata_ != &::google::protobuf::internal::kEmptyString) {
        appmetadata_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_amt()) {
      if (amt_ != &::google::protobuf::internal::kEmptyString) {
        amt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_TencentBuyGoodsUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string payitem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payitem().data(), this->payitem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goodsmeta;
        break;
      }
      
      // optional string goodsmeta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodsmeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goodsmeta()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->goodsmeta().data(), this->goodsmeta().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goodsurl;
        break;
      }
      
      // optional string goodsurl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodsurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goodsurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->goodsurl().data(), this->goodsurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_appmetadata;
        break;
      }
      
      // optional string appmetadata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appmetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appmetadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appmetadata().data(), this->appmetadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }
      
      // optional string url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_amt;
        break;
      }
      
      // optional string amt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amt().data(), this->amt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_TencentBuyGoodsUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string payitem = 1;
  if (has_payitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payitem().data(), this->payitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->payitem(), output);
  }
  
  // optional string goodsmeta = 2;
  if (has_goodsmeta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goodsmeta().data(), this->goodsmeta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->goodsmeta(), output);
  }
  
  // optional string goodsurl = 3;
  if (has_goodsurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goodsurl().data(), this->goodsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->goodsurl(), output);
  }
  
  // optional string appmetadata = 4;
  if (has_appmetadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appmetadata().data(), this->appmetadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->appmetadata(), output);
  }
  
  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url(), output);
  }
  
  // optional string amt = 6;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amt().data(), this->amt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->amt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_TencentBuyGoodsUrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string payitem = 1;
  if (has_payitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payitem().data(), this->payitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->payitem(), target);
  }
  
  // optional string goodsmeta = 2;
  if (has_goodsmeta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goodsmeta().data(), this->goodsmeta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->goodsmeta(), target);
  }
  
  // optional string goodsurl = 3;
  if (has_goodsurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goodsurl().data(), this->goodsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->goodsurl(), target);
  }
  
  // optional string appmetadata = 4;
  if (has_appmetadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appmetadata().data(), this->appmetadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->appmetadata(), target);
  }
  
  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }
  
  // optional string amt = 6;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amt().data(), this->amt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->amt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_TencentBuyGoodsUrl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string payitem = 1;
    if (has_payitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payitem());
    }
    
    // optional string goodsmeta = 2;
    if (has_goodsmeta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goodsmeta());
    }
    
    // optional string goodsurl = 3;
    if (has_goodsurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goodsurl());
    }
    
    // optional string appmetadata = 4;
    if (has_appmetadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appmetadata());
    }
    
    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string amt = 6;
    if (has_amt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_TencentBuyGoodsUrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_TencentBuyGoodsUrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_TencentBuyGoodsUrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_TencentBuyGoodsUrl::MergeFrom(const NetProto_TencentBuyGoodsUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payitem()) {
      set_payitem(from.payitem());
    }
    if (from.has_goodsmeta()) {
      set_goodsmeta(from.goodsmeta());
    }
    if (from.has_goodsurl()) {
      set_goodsurl(from.goodsurl());
    }
    if (from.has_appmetadata()) {
      set_appmetadata(from.appmetadata());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_amt()) {
      set_amt(from.amt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_TencentBuyGoodsUrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_TencentBuyGoodsUrl::CopyFrom(const NetProto_TencentBuyGoodsUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_TencentBuyGoodsUrl::IsInitialized() const {
  
  return true;
}

void NetProto_TencentBuyGoodsUrl::Swap(NetProto_TencentBuyGoodsUrl* other) {
  if (other != this) {
    std::swap(payitem_, other->payitem_);
    std::swap(goodsmeta_, other->goodsmeta_);
    std::swap(goodsurl_, other->goodsurl_);
    std::swap(appmetadata_, other->appmetadata_);
    std::swap(url_, other->url_);
    std::swap(amt_, other->amt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_TencentBuyGoodsUrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_TencentBuyGoodsUrl_descriptor_;
  metadata.reflection = NetProto_TencentBuyGoodsUrl_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_LoginURL_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoginURL_ID_descriptor_;
}
bool NetProto_LoginURL_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_LoginURL_ID NetProto_LoginURL::GROUPID;
const NetProto_LoginURL_ID NetProto_LoginURL::UNITID;
const NetProto_LoginURL_ID NetProto_LoginURL::ID_MIN;
const NetProto_LoginURL_ID NetProto_LoginURL::ID_MAX;
const int NetProto_LoginURL::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_LoginURL::kUrlFieldNumber;
const int NetProto_LoginURL::kResultFieldNumber;
#endif  // !_MSC_VER

NetProto_LoginURL::NetProto_LoginURL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_LoginURL::InitAsDefaultInstance() {
}

NetProto_LoginURL::NetProto_LoginURL(const NetProto_LoginURL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_LoginURL::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_LoginURL::~NetProto_LoginURL() {
  SharedDtor();
}

void NetProto_LoginURL::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_LoginURL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_LoginURL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoginURL_descriptor_;
}

const NetProto_LoginURL& NetProto_LoginURL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_LoginURL* NetProto_LoginURL::default_instance_ = NULL;

NetProto_LoginURL* NetProto_LoginURL::New() const {
  return new NetProto_LoginURL;
}

void NetProto_LoginURL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_LoginURL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_LoginURL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_LoginURL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }
  
  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_LoginURL::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_LoginURL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_LoginURL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_LoginURL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_LoginURL::MergeFrom(const NetProto_LoginURL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_LoginURL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_LoginURL::CopyFrom(const NetProto_LoginURL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_LoginURL::IsInitialized() const {
  
  return true;
}

void NetProto_LoginURL::Swap(NetProto_LoginURL* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_LoginURL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_LoginURL_descriptor_;
  metadata.reflection = NetProto_LoginURL_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RechargeParam_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RechargeParam_ID_descriptor_;
}
bool NetProto_RechargeParam_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RechargeParam_ID NetProto_RechargeParam::GROUPID;
const NetProto_RechargeParam_ID NetProto_RechargeParam::UNITID;
const NetProto_RechargeParam_ID NetProto_RechargeParam::ID_MIN;
const NetProto_RechargeParam_ID NetProto_RechargeParam::ID_MAX;
const int NetProto_RechargeParam::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RechargeParam::kParamFieldNumber;
const int NetProto_RechargeParam::kVFieldNumber;
#endif  // !_MSC_VER

NetProto_RechargeParam::NetProto_RechargeParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RechargeParam::InitAsDefaultInstance() {
}

NetProto_RechargeParam::NetProto_RechargeParam(const NetProto_RechargeParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RechargeParam::SharedCtor() {
  _cached_size_ = 0;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RechargeParam::~NetProto_RechargeParam() {
  SharedDtor();
}

void NetProto_RechargeParam::SharedDtor() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_RechargeParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RechargeParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RechargeParam_descriptor_;
}

const NetProto_RechargeParam& NetProto_RechargeParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RechargeParam* NetProto_RechargeParam::default_instance_ = NULL;

NetProto_RechargeParam* NetProto_RechargeParam::New() const {
  return new NetProto_RechargeParam;
}

void NetProto_RechargeParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RechargeParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_v;
        break;
      }
      
      // optional float v = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RechargeParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->param(), output);
  }
  
  // optional float v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->v(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RechargeParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->param(), target);
  }
  
  // optional float v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->v(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RechargeParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }
    
    // optional float v = 2;
    if (has_v()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RechargeParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RechargeParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RechargeParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RechargeParam::MergeFrom(const NetProto_RechargeParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RechargeParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RechargeParam::CopyFrom(const NetProto_RechargeParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RechargeParam::IsInitialized() const {
  
  return true;
}

void NetProto_RechargeParam::Swap(NetProto_RechargeParam* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RechargeParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RechargeParam_descriptor_;
  metadata.reflection = NetProto_RechargeParam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddPlayers_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddPlayers_ID_descriptor_;
}
bool NetProto_AddPlayers_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddPlayers_ID NetProto_AddPlayers::GROUPID;
const NetProto_AddPlayers_ID NetProto_AddPlayers::UNITID;
const NetProto_AddPlayers_ID NetProto_AddPlayers::ID_MIN;
const NetProto_AddPlayers_ID NetProto_AddPlayers::ID_MAX;
const int NetProto_AddPlayers::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddPlayers::kIdFieldNumber;
const int NetProto_AddPlayers::kAttFieldNumber;
const int NetProto_AddPlayers::kTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_AddPlayers::NetProto_AddPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddPlayers::InitAsDefaultInstance() {
}

NetProto_AddPlayers::NetProto_AddPlayers(const NetProto_AddPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddPlayers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddPlayers::~NetProto_AddPlayers() {
  SharedDtor();
}

void NetProto_AddPlayers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_AddPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddPlayers_descriptor_;
}

const NetProto_AddPlayers& NetProto_AddPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddPlayers* NetProto_AddPlayers::default_instance_ = NULL;

NetProto_AddPlayers* NetProto_AddPlayers::New() const {
  return new NetProto_AddPlayers;
}

void NetProto_AddPlayers::Clear() {
  id_.Clear();
  att_.Clear();
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(18)) goto parse_att;
        break;
      }
      
      // repeated .PB_PlayerAtt att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_att;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // repeated int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }
  
  // repeated .PB_PlayerAtt att = 2;
  for (int i = 0; i < this->att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->att(i), output);
  }
  
  // repeated int32 type = 3;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->type(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }
  
  // repeated .PB_PlayerAtt att = 2;
  for (int i = 0; i < this->att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->att(i), target);
  }
  
  // repeated int32 type = 3;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->type(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddPlayers::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  // repeated .PB_PlayerAtt att = 2;
  total_size += 1 * this->att_size();
  for (int i = 0; i < this->att_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->att(i));
  }
  
  // repeated int32 type = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddPlayers::MergeFrom(const NetProto_AddPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  att_.MergeFrom(from.att_);
  type_.MergeFrom(from.type_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddPlayers::CopyFrom(const NetProto_AddPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddPlayers::IsInitialized() const {
  
  return true;
}

void NetProto_AddPlayers::Swap(NetProto_AddPlayers* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    att_.Swap(&other->att_);
    type_.Swap(&other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddPlayers_descriptor_;
  metadata.reflection = NetProto_AddPlayers_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_LoadScene_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoadScene_ID_descriptor_;
}
bool NetProto_LoadScene_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_LoadScene_ID NetProto_LoadScene::GROUPID;
const NetProto_LoadScene_ID NetProto_LoadScene::UNITID;
const NetProto_LoadScene_ID NetProto_LoadScene::ID_MIN;
const NetProto_LoadScene_ID NetProto_LoadScene::ID_MAX;
const int NetProto_LoadScene::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_LoadScene_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoadScene_Type_descriptor_;
}
bool NetProto_LoadScene_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_LoadScene_Type NetProto_LoadScene::NORMAL;
const NetProto_LoadScene_Type NetProto_LoadScene::JUMP;
const NetProto_LoadScene_Type NetProto_LoadScene::LEAVE;
const NetProto_LoadScene_Type NetProto_LoadScene::Type_MIN;
const NetProto_LoadScene_Type NetProto_LoadScene::Type_MAX;
const int NetProto_LoadScene::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_LoadScene::kTypeFieldNumber;
const int NetProto_LoadScene::kIdFieldNumber;
const int NetProto_LoadScene::kPosFieldNumber;
const int NetProto_LoadScene::kGemRecoverFieldNumber;
#endif  // !_MSC_VER

NetProto_LoadScene::NetProto_LoadScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_LoadScene::InitAsDefaultInstance() {
}

NetProto_LoadScene::NetProto_LoadScene(const NetProto_LoadScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_LoadScene::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  pos_ = 0;
  gemRecover_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_LoadScene::~NetProto_LoadScene() {
  SharedDtor();
}

void NetProto_LoadScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_LoadScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_LoadScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoadScene_descriptor_;
}

const NetProto_LoadScene& NetProto_LoadScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_LoadScene* NetProto_LoadScene::default_instance_ = NULL;

NetProto_LoadScene* NetProto_LoadScene::New() const {
  return new NetProto_LoadScene;
}

void NetProto_LoadScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    pos_ = 0;
    gemRecover_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_LoadScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_LoadScene.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_LoadScene_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_LoadScene_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gemRecover;
        break;
      }
      
      // optional int32 gemRecover = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemRecover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemRecover_)));
          set_has_gemRecover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_LoadScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_LoadScene.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }
  
  // optional int32 gemRecover = 4;
  if (has_gemRecover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gemRecover(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_LoadScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_LoadScene.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }
  
  // optional int32 gemRecover = 4;
  if (has_gemRecover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gemRecover(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_LoadScene::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_LoadScene.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 gemRecover = 4;
    if (has_gemRecover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemRecover());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_LoadScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_LoadScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_LoadScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_LoadScene::MergeFrom(const NetProto_LoadScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_gemRecover()) {
      set_gemRecover(from.gemRecover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_LoadScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_LoadScene::CopyFrom(const NetProto_LoadScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_LoadScene::IsInitialized() const {
  
  return true;
}

void NetProto_LoadScene::Swap(NetProto_LoadScene* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(gemRecover_, other->gemRecover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_LoadScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_LoadScene_descriptor_;
  metadata.reflection = NetProto_LoadScene_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DoLoadScene_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DoLoadScene_ID_descriptor_;
}
bool NetProto_DoLoadScene_ID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DoLoadScene_ID NetProto_DoLoadScene::GROUPID;
const NetProto_DoLoadScene_ID NetProto_DoLoadScene::UNITID;
const NetProto_DoLoadScene_ID NetProto_DoLoadScene::ID_MIN;
const NetProto_DoLoadScene_ID NetProto_DoLoadScene::ID_MAX;
const int NetProto_DoLoadScene::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DoLoadScene::kIdFieldNumber;
const int NetProto_DoLoadScene::kMapIDFieldNumber;
const int NetProto_DoLoadScene::kCoordFieldNumber;
const int NetProto_DoLoadScene::kMultipleRoomFieldNumber;
#endif  // !_MSC_VER

NetProto_DoLoadScene::NetProto_DoLoadScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DoLoadScene::InitAsDefaultInstance() {
  coord_ = const_cast< ::PB_Vector2i*>(&::PB_Vector2i::default_instance());
}

NetProto_DoLoadScene::NetProto_DoLoadScene(const NetProto_DoLoadScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DoLoadScene::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mapID_ = 0;
  coord_ = NULL;
  multipleRoom_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DoLoadScene::~NetProto_DoLoadScene() {
  SharedDtor();
}

void NetProto_DoLoadScene::SharedDtor() {
  if (this != default_instance_) {
    delete coord_;
  }
}

void NetProto_DoLoadScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DoLoadScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DoLoadScene_descriptor_;
}

const NetProto_DoLoadScene& NetProto_DoLoadScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DoLoadScene* NetProto_DoLoadScene::default_instance_ = NULL;

NetProto_DoLoadScene* NetProto_DoLoadScene::New() const {
  return new NetProto_DoLoadScene;
}

void NetProto_DoLoadScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    mapID_ = 0;
    if (has_coord()) {
      if (coord_ != NULL) coord_->::PB_Vector2i::Clear();
    }
    multipleRoom_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DoLoadScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapID;
        break;
      }
      
      // optional int32 mapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapID_)));
          set_has_mapID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_coord;
        break;
      }
      
      // optional .PB_Vector2i coord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_multipleRoom;
        break;
      }
      
      // optional bool multipleRoom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multipleRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multipleRoom_)));
          set_has_multipleRoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DoLoadScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 mapID = 2;
  if (has_mapID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapID(), output);
  }
  
  // optional .PB_Vector2i coord = 3;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coord(), output);
  }
  
  // optional bool multipleRoom = 4;
  if (has_multipleRoom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->multipleRoom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DoLoadScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 mapID = 2;
  if (has_mapID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapID(), target);
  }
  
  // optional .PB_Vector2i coord = 3;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coord(), target);
  }
  
  // optional bool multipleRoom = 4;
  if (has_multipleRoom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->multipleRoom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DoLoadScene::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 mapID = 2;
    if (has_mapID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapID());
    }
    
    // optional .PB_Vector2i coord = 3;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }
    
    // optional bool multipleRoom = 4;
    if (has_multipleRoom()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DoLoadScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DoLoadScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DoLoadScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DoLoadScene::MergeFrom(const NetProto_DoLoadScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapID()) {
      set_mapID(from.mapID());
    }
    if (from.has_coord()) {
      mutable_coord()->::PB_Vector2i::MergeFrom(from.coord());
    }
    if (from.has_multipleRoom()) {
      set_multipleRoom(from.multipleRoom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DoLoadScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DoLoadScene::CopyFrom(const NetProto_DoLoadScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DoLoadScene::IsInitialized() const {
  
  return true;
}

void NetProto_DoLoadScene::Swap(NetProto_DoLoadScene* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mapID_, other->mapID_);
    std::swap(coord_, other->coord_);
    std::swap(multipleRoom_, other->multipleRoom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DoLoadScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DoLoadScene_descriptor_;
  metadata.reflection = NetProto_DoLoadScene_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_EndLoadScene_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndLoadScene_ID_descriptor_;
}
bool NetProto_EndLoadScene_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EndLoadScene_ID NetProto_EndLoadScene::GROUPID;
const NetProto_EndLoadScene_ID NetProto_EndLoadScene::UNITID;
const NetProto_EndLoadScene_ID NetProto_EndLoadScene::ID_MIN;
const NetProto_EndLoadScene_ID NetProto_EndLoadScene::ID_MAX;
const int NetProto_EndLoadScene::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_EndLoadScene::NetProto_EndLoadScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_EndLoadScene::InitAsDefaultInstance() {
}

NetProto_EndLoadScene::NetProto_EndLoadScene(const NetProto_EndLoadScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_EndLoadScene::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_EndLoadScene::~NetProto_EndLoadScene() {
  SharedDtor();
}

void NetProto_EndLoadScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_EndLoadScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_EndLoadScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndLoadScene_descriptor_;
}

const NetProto_EndLoadScene& NetProto_EndLoadScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_EndLoadScene* NetProto_EndLoadScene::default_instance_ = NULL;

NetProto_EndLoadScene* NetProto_EndLoadScene::New() const {
  return new NetProto_EndLoadScene;
}

void NetProto_EndLoadScene::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_EndLoadScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_EndLoadScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_EndLoadScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_EndLoadScene::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_EndLoadScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_EndLoadScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_EndLoadScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_EndLoadScene::MergeFrom(const NetProto_EndLoadScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_EndLoadScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_EndLoadScene::CopyFrom(const NetProto_EndLoadScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_EndLoadScene::IsInitialized() const {
  
  return true;
}

void NetProto_EndLoadScene::Swap(NetProto_EndLoadScene* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_EndLoadScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_EndLoadScene_descriptor_;
  metadata.reflection = NetProto_EndLoadScene_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddNPCs_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddNPCs_ID_descriptor_;
}
bool NetProto_AddNPCs_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddNPCs_ID NetProto_AddNPCs::GROUPID;
const NetProto_AddNPCs_ID NetProto_AddNPCs::UNITID;
const NetProto_AddNPCs_ID NetProto_AddNPCs::ID_MIN;
const NetProto_AddNPCs_ID NetProto_AddNPCs::ID_MAX;
const int NetProto_AddNPCs::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddNPCs::kIdFieldNumber;
const int NetProto_AddNPCs::kAttFieldNumber;
#endif  // !_MSC_VER

NetProto_AddNPCs::NetProto_AddNPCs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddNPCs::InitAsDefaultInstance() {
}

NetProto_AddNPCs::NetProto_AddNPCs(const NetProto_AddNPCs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddNPCs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddNPCs::~NetProto_AddNPCs() {
  SharedDtor();
}

void NetProto_AddNPCs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_AddNPCs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddNPCs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddNPCs_descriptor_;
}

const NetProto_AddNPCs& NetProto_AddNPCs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddNPCs* NetProto_AddNPCs::default_instance_ = NULL;

NetProto_AddNPCs* NetProto_AddNPCs::New() const {
  return new NetProto_AddNPCs;
}

void NetProto_AddNPCs::Clear() {
  id_.Clear();
  att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddNPCs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(18)) goto parse_att;
        break;
      }
      
      // repeated .PB_NPCAtt att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_att;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddNPCs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }
  
  // repeated .PB_NPCAtt att = 2;
  for (int i = 0; i < this->att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->att(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddNPCs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }
  
  // repeated .PB_NPCAtt att = 2;
  for (int i = 0; i < this->att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->att(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddNPCs::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  // repeated .PB_NPCAtt att = 2;
  total_size += 1 * this->att_size();
  for (int i = 0; i < this->att_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->att(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddNPCs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddNPCs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddNPCs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddNPCs::MergeFrom(const NetProto_AddNPCs& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  att_.MergeFrom(from.att_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddNPCs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddNPCs::CopyFrom(const NetProto_AddNPCs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddNPCs::IsInitialized() const {
  
  return true;
}

void NetProto_AddNPCs::Swap(NetProto_AddNPCs* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    att_.Swap(&other->att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddNPCs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddNPCs_descriptor_;
  metadata.reflection = NetProto_AddNPCs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ClearRoom_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ClearRoom_ID_descriptor_;
}
bool NetProto_ClearRoom_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ClearRoom_ID NetProto_ClearRoom::GROUPID;
const NetProto_ClearRoom_ID NetProto_ClearRoom::UNITID;
const NetProto_ClearRoom_ID NetProto_ClearRoom::ID_MIN;
const NetProto_ClearRoom_ID NetProto_ClearRoom::ID_MAX;
const int NetProto_ClearRoom::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ClearRoom::kTotalTimeFieldNumber;
const int NetProto_ClearRoom::kIndexFieldNumber;
const int NetProto_ClearRoom::kTimeFieldNumber;
const int NetProto_ClearRoom::kMd5FieldNumber;
const int NetProto_ClearRoom::kExpFieldNumber;
const int NetProto_ClearRoom::kMoneyFieldNumber;
const int NetProto_ClearRoom::kHonorFieldNumber;
const int NetProto_ClearRoom::kGodScoreFieldNumber;
const int NetProto_ClearRoom::kUpRankFieldNumber;
#endif  // !_MSC_VER

NetProto_ClearRoom::NetProto_ClearRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ClearRoom::InitAsDefaultInstance() {
}

NetProto_ClearRoom::NetProto_ClearRoom(const NetProto_ClearRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ClearRoom::SharedCtor() {
  _cached_size_ = 0;
  totalTime_ = 0;
  index_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0;
  money_ = 0;
  honor_ = 0;
  godScore_ = 0;
  upRank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ClearRoom::~NetProto_ClearRoom() {
  SharedDtor();
}

void NetProto_ClearRoom::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_ClearRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ClearRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ClearRoom_descriptor_;
}

const NetProto_ClearRoom& NetProto_ClearRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ClearRoom* NetProto_ClearRoom::default_instance_ = NULL;

NetProto_ClearRoom* NetProto_ClearRoom::New() const {
  return new NetProto_ClearRoom;
}

void NetProto_ClearRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalTime_ = 0;
    index_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
    exp_ = 0;
    money_ = 0;
    honor_ = 0;
    godScore_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    upRank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ClearRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalTime_)));
          set_has_totalTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_md5;
        break;
      }
      
      // optional string md5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }
      
      // optional int32 money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_honor;
        break;
      }
      
      // optional int32 honor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_godScore;
        break;
      }
      
      // optional int32 godScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godScore_)));
          set_has_godScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_upRank;
        break;
      }
      
      // optional int32 upRank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upRank_)));
          set_has_upRank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ClearRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 totalTime = 1;
  if (has_totalTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalTime(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }
  
  // optional string md5 = 4;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->md5(), output);
  }
  
  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }
  
  // optional int32 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->money(), output);
  }
  
  // optional int32 honor = 7;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->honor(), output);
  }
  
  // optional int32 godScore = 8;
  if (has_godScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->godScore(), output);
  }
  
  // optional int32 upRank = 9;
  if (has_upRank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->upRank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ClearRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 totalTime = 1;
  if (has_totalTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalTime(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }
  
  // optional string md5 = 4;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->md5(), target);
  }
  
  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }
  
  // optional int32 money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->money(), target);
  }
  
  // optional int32 honor = 7;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->honor(), target);
  }
  
  // optional int32 godScore = 8;
  if (has_godScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->godScore(), target);
  }
  
  // optional int32 upRank = 9;
  if (has_upRank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->upRank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ClearRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalTime = 1;
    if (has_totalTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalTime());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional string md5 = 4;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }
    
    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
    // optional int32 honor = 7;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }
    
    // optional int32 godScore = 8;
    if (has_godScore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godScore());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 upRank = 9;
    if (has_upRank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upRank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ClearRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ClearRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ClearRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ClearRoom::MergeFrom(const NetProto_ClearRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalTime()) {
      set_totalTime(from.totalTime());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_godScore()) {
      set_godScore(from.godScore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_upRank()) {
      set_upRank(from.upRank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ClearRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ClearRoom::CopyFrom(const NetProto_ClearRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ClearRoom::IsInitialized() const {
  
  return true;
}

void NetProto_ClearRoom::Swap(NetProto_ClearRoom* other) {
  if (other != this) {
    std::swap(totalTime_, other->totalTime_);
    std::swap(index_, other->index_);
    std::swap(time_, other->time_);
    std::swap(md5_, other->md5_);
    std::swap(exp_, other->exp_);
    std::swap(money_, other->money_);
    std::swap(honor_, other->honor_);
    std::swap(godScore_, other->godScore_);
    std::swap(upRank_, other->upRank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ClearRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ClearRoom_descriptor_;
  metadata.reflection = NetProto_ClearRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_OpenRoomBox_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_OpenRoomBox_ID_descriptor_;
}
bool NetProto_OpenRoomBox_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_OpenRoomBox_ID NetProto_OpenRoomBox::GROUPID;
const NetProto_OpenRoomBox_ID NetProto_OpenRoomBox::UNITID;
const NetProto_OpenRoomBox_ID NetProto_OpenRoomBox::ID_MIN;
const NetProto_OpenRoomBox_ID NetProto_OpenRoomBox::ID_MAX;
const int NetProto_OpenRoomBox::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_OpenRoomBox_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_OpenRoomBox_Type_descriptor_;
}
bool NetProto_OpenRoomBox_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_OpenRoomBox_Type NetProto_OpenRoomBox::FREE;
const NetProto_OpenRoomBox_Type NetProto_OpenRoomBox::GEM;
const NetProto_OpenRoomBox_Type NetProto_OpenRoomBox::Type_MIN;
const NetProto_OpenRoomBox_Type NetProto_OpenRoomBox::Type_MAX;
const int NetProto_OpenRoomBox::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_OpenRoomBox::kTypeFieldNumber;
const int NetProto_OpenRoomBox::kResultFieldNumber;
#endif  // !_MSC_VER

NetProto_OpenRoomBox::NetProto_OpenRoomBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_OpenRoomBox::InitAsDefaultInstance() {
}

NetProto_OpenRoomBox::NetProto_OpenRoomBox(const NetProto_OpenRoomBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_OpenRoomBox::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_OpenRoomBox::~NetProto_OpenRoomBox() {
  SharedDtor();
}

void NetProto_OpenRoomBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_OpenRoomBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_OpenRoomBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_OpenRoomBox_descriptor_;
}

const NetProto_OpenRoomBox& NetProto_OpenRoomBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_OpenRoomBox* NetProto_OpenRoomBox::default_instance_ = NULL;

NetProto_OpenRoomBox* NetProto_OpenRoomBox::New() const {
  return new NetProto_OpenRoomBox;
}

void NetProto_OpenRoomBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_OpenRoomBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_OpenRoomBox.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_OpenRoomBox_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_OpenRoomBox_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // repeated int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_OpenRoomBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_OpenRoomBox.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // repeated int32 result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->result(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_OpenRoomBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_OpenRoomBox.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // repeated int32 result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->result(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_OpenRoomBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_OpenRoomBox.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated int32 result = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_OpenRoomBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_OpenRoomBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_OpenRoomBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_OpenRoomBox::MergeFrom(const NetProto_OpenRoomBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_OpenRoomBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_OpenRoomBox::CopyFrom(const NetProto_OpenRoomBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_OpenRoomBox::IsInitialized() const {
  
  return true;
}

void NetProto_OpenRoomBox::Swap(NetProto_OpenRoomBox* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_OpenRoomBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_OpenRoomBox_descriptor_;
  metadata.reflection = NetProto_OpenRoomBox_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BeginWaitRoom_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BeginWaitRoom_ID_descriptor_;
}
bool NetProto_BeginWaitRoom_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BeginWaitRoom_ID NetProto_BeginWaitRoom::GROUPID;
const NetProto_BeginWaitRoom_ID NetProto_BeginWaitRoom::UNITID;
const NetProto_BeginWaitRoom_ID NetProto_BeginWaitRoom::ID_MIN;
const NetProto_BeginWaitRoom_ID NetProto_BeginWaitRoom::ID_MAX;
const int NetProto_BeginWaitRoom::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BeginWaitRoom::kMapFieldNumber;
#endif  // !_MSC_VER

NetProto_BeginWaitRoom::NetProto_BeginWaitRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BeginWaitRoom::InitAsDefaultInstance() {
}

NetProto_BeginWaitRoom::NetProto_BeginWaitRoom(const NetProto_BeginWaitRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BeginWaitRoom::SharedCtor() {
  _cached_size_ = 0;
  map_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BeginWaitRoom::~NetProto_BeginWaitRoom() {
  SharedDtor();
}

void NetProto_BeginWaitRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BeginWaitRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BeginWaitRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BeginWaitRoom_descriptor_;
}

const NetProto_BeginWaitRoom& NetProto_BeginWaitRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BeginWaitRoom* NetProto_BeginWaitRoom::default_instance_ = NULL;

NetProto_BeginWaitRoom* NetProto_BeginWaitRoom::New() const {
  return new NetProto_BeginWaitRoom;
}

void NetProto_BeginWaitRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BeginWaitRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BeginWaitRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map = 1;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BeginWaitRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map = 1;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BeginWaitRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map = 1;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BeginWaitRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BeginWaitRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BeginWaitRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BeginWaitRoom::MergeFrom(const NetProto_BeginWaitRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map()) {
      set_map(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BeginWaitRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BeginWaitRoom::CopyFrom(const NetProto_BeginWaitRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BeginWaitRoom::IsInitialized() const {
  
  return true;
}

void NetProto_BeginWaitRoom::Swap(NetProto_BeginWaitRoom* other) {
  if (other != this) {
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BeginWaitRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BeginWaitRoom_descriptor_;
  metadata.reflection = NetProto_BeginWaitRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_EndWaitRoom_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndWaitRoom_ID_descriptor_;
}
bool NetProto_EndWaitRoom_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EndWaitRoom_ID NetProto_EndWaitRoom::GROUPID;
const NetProto_EndWaitRoom_ID NetProto_EndWaitRoom::UNITID;
const NetProto_EndWaitRoom_ID NetProto_EndWaitRoom::ID_MIN;
const NetProto_EndWaitRoom_ID NetProto_EndWaitRoom::ID_MAX;
const int NetProto_EndWaitRoom::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_EndWaitRoom::NetProto_EndWaitRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_EndWaitRoom::InitAsDefaultInstance() {
}

NetProto_EndWaitRoom::NetProto_EndWaitRoom(const NetProto_EndWaitRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_EndWaitRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_EndWaitRoom::~NetProto_EndWaitRoom() {
  SharedDtor();
}

void NetProto_EndWaitRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_EndWaitRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_EndWaitRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndWaitRoom_descriptor_;
}

const NetProto_EndWaitRoom& NetProto_EndWaitRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_EndWaitRoom* NetProto_EndWaitRoom::default_instance_ = NULL;

NetProto_EndWaitRoom* NetProto_EndWaitRoom::New() const {
  return new NetProto_EndWaitRoom;
}

void NetProto_EndWaitRoom::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_EndWaitRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_EndWaitRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_EndWaitRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_EndWaitRoom::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_EndWaitRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_EndWaitRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_EndWaitRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_EndWaitRoom::MergeFrom(const NetProto_EndWaitRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_EndWaitRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_EndWaitRoom::CopyFrom(const NetProto_EndWaitRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_EndWaitRoom::IsInitialized() const {
  
  return true;
}

void NetProto_EndWaitRoom::Swap(NetProto_EndWaitRoom* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_EndWaitRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_EndWaitRoom_descriptor_;
  metadata.reflection = NetProto_EndWaitRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GenNPCs_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenNPCs_ID_descriptor_;
}
bool NetProto_GenNPCs_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GenNPCs_ID NetProto_GenNPCs::GROUPID;
const NetProto_GenNPCs_ID NetProto_GenNPCs::UNITID;
const NetProto_GenNPCs_ID NetProto_GenNPCs::ID_MIN;
const NetProto_GenNPCs_ID NetProto_GenNPCs::ID_MAX;
const int NetProto_GenNPCs::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GenNPCs::kGroupFieldNumber;
const int NetProto_GenNPCs::kPassFieldNumber;
#endif  // !_MSC_VER

NetProto_GenNPCs::NetProto_GenNPCs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GenNPCs::InitAsDefaultInstance() {
}

NetProto_GenNPCs::NetProto_GenNPCs(const NetProto_GenNPCs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GenNPCs::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0;
  pass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GenNPCs::~NetProto_GenNPCs() {
  SharedDtor();
}

void NetProto_GenNPCs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GenNPCs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GenNPCs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenNPCs_descriptor_;
}

const NetProto_GenNPCs& NetProto_GenNPCs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GenNPCs* NetProto_GenNPCs::default_instance_ = NULL;

NetProto_GenNPCs* NetProto_GenNPCs::New() const {
  return new NetProto_GenNPCs;
}

void NetProto_GenNPCs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0;
    pass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GenNPCs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }
      
      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GenNPCs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group(), output);
  }
  
  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GenNPCs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group(), target);
  }
  
  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GenNPCs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }
    
    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GenNPCs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GenNPCs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GenNPCs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GenNPCs::MergeFrom(const NetProto_GenNPCs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GenNPCs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GenNPCs::CopyFrom(const NetProto_GenNPCs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GenNPCs::IsInitialized() const {
  
  return true;
}

void NetProto_GenNPCs::Swap(NetProto_GenNPCs* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GenNPCs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GenNPCs_descriptor_;
  metadata.reflection = NetProto_GenNPCs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ResetEvent_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ResetEvent_ID_descriptor_;
}
bool NetProto_ResetEvent_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ResetEvent_ID NetProto_ResetEvent::GROUPID;
const NetProto_ResetEvent_ID NetProto_ResetEvent::UNITID;
const NetProto_ResetEvent_ID NetProto_ResetEvent::ID_MIN;
const NetProto_ResetEvent_ID NetProto_ResetEvent::ID_MAX;
const int NetProto_ResetEvent::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ResetEvent::kMondayFieldNumber;
const int NetProto_ResetEvent::kResetComeFieldNumber;
#endif  // !_MSC_VER

NetProto_ResetEvent::NetProto_ResetEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ResetEvent::InitAsDefaultInstance() {
}

NetProto_ResetEvent::NetProto_ResetEvent(const NetProto_ResetEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ResetEvent::SharedCtor() {
  _cached_size_ = 0;
  monday_ = false;
  resetCome_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ResetEvent::~NetProto_ResetEvent() {
  SharedDtor();
}

void NetProto_ResetEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ResetEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ResetEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ResetEvent_descriptor_;
}

const NetProto_ResetEvent& NetProto_ResetEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ResetEvent* NetProto_ResetEvent::default_instance_ = NULL;

NetProto_ResetEvent* NetProto_ResetEvent::New() const {
  return new NetProto_ResetEvent;
}

void NetProto_ResetEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monday_ = false;
    resetCome_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ResetEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool monday = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &monday_)));
          set_has_monday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resetCome;
        break;
      }
      
      // optional bool resetCome = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetCome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resetCome_)));
          set_has_resetCome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ResetEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool monday = 1;
  if (has_monday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->monday(), output);
  }
  
  // optional bool resetCome = 2;
  if (has_resetCome()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->resetCome(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ResetEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool monday = 1;
  if (has_monday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->monday(), target);
  }
  
  // optional bool resetCome = 2;
  if (has_resetCome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->resetCome(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ResetEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool monday = 1;
    if (has_monday()) {
      total_size += 1 + 1;
    }
    
    // optional bool resetCome = 2;
    if (has_resetCome()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ResetEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ResetEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ResetEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ResetEvent::MergeFrom(const NetProto_ResetEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monday()) {
      set_monday(from.monday());
    }
    if (from.has_resetCome()) {
      set_resetCome(from.resetCome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ResetEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ResetEvent::CopyFrom(const NetProto_ResetEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ResetEvent::IsInitialized() const {
  
  return true;
}

void NetProto_ResetEvent::Swap(NetProto_ResetEvent* other) {
  if (other != this) {
    std::swap(monday_, other->monday_);
    std::swap(resetCome_, other->resetCome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ResetEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ResetEvent_descriptor_;
  metadata.reflection = NetProto_ResetEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_QuickFight_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_QuickFight_ID_descriptor_;
}
bool NetProto_QuickFight_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_QuickFight_ID NetProto_QuickFight::GROUPID;
const NetProto_QuickFight_ID NetProto_QuickFight::UNITID;
const NetProto_QuickFight_ID NetProto_QuickFight::ID_MIN;
const NetProto_QuickFight_ID NetProto_QuickFight::ID_MAX;
const int NetProto_QuickFight::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_QuickFight::kMapFieldNumber;
const int NetProto_QuickFight::kResFieldNumber;
const int NetProto_QuickFight::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_QuickFight::NetProto_QuickFight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_QuickFight::InitAsDefaultInstance() {
}

NetProto_QuickFight::NetProto_QuickFight(const NetProto_QuickFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_QuickFight::SharedCtor() {
  _cached_size_ = 0;
  map_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_QuickFight::~NetProto_QuickFight() {
  SharedDtor();
}

void NetProto_QuickFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_QuickFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_QuickFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_QuickFight_descriptor_;
}

const NetProto_QuickFight& NetProto_QuickFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_QuickFight* NetProto_QuickFight::default_instance_ = NULL;

NetProto_QuickFight* NetProto_QuickFight::New() const {
  return new NetProto_QuickFight;
}

void NetProto_QuickFight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_ = 0;
    count_ = 0;
  }
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_QuickFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }
      
      // repeated .NetProto_GetRes res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_res;
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_QuickFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map = 1;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map(), output);
  }
  
  // repeated .NetProto_GetRes res = 2;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->res(i), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_QuickFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map = 1;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map(), target);
  }
  
  // repeated .NetProto_GetRes res = 2;
  for (int i = 0; i < this->res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->res(i), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_QuickFight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map = 1;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  // repeated .NetProto_GetRes res = 2;
  total_size += 1 * this->res_size();
  for (int i = 0; i < this->res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->res(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_QuickFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_QuickFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_QuickFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_QuickFight::MergeFrom(const NetProto_QuickFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  res_.MergeFrom(from.res_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_QuickFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_QuickFight::CopyFrom(const NetProto_QuickFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_QuickFight::IsInitialized() const {
  
  return true;
}

void NetProto_QuickFight::Swap(NetProto_QuickFight* other) {
  if (other != this) {
    std::swap(map_, other->map_);
    res_.Swap(&other->res_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_QuickFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_QuickFight_descriptor_;
  metadata.reflection = NetProto_QuickFight_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Win_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Win_ID_descriptor_;
}
bool NetProto_Win_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Win_ID NetProto_Win::GROUPID;
const NetProto_Win_ID NetProto_Win::UNITID;
const NetProto_Win_ID NetProto_Win::ID_MIN;
const NetProto_Win_ID NetProto_Win::ID_MAX;
const int NetProto_Win::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Win::kHonorFieldNumber;
const int NetProto_Win::kPvpScoreFieldNumber;
#endif  // !_MSC_VER

NetProto_Win::NetProto_Win()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Win::InitAsDefaultInstance() {
}

NetProto_Win::NetProto_Win(const NetProto_Win& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Win::SharedCtor() {
  _cached_size_ = 0;
  honor_ = 0;
  pvpScore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Win::~NetProto_Win() {
  SharedDtor();
}

void NetProto_Win::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Win::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Win::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Win_descriptor_;
}

const NetProto_Win& NetProto_Win::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Win* NetProto_Win::default_instance_ = NULL;

NetProto_Win* NetProto_Win::New() const {
  return new NetProto_Win;
}

void NetProto_Win::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    honor_ = 0;
    pvpScore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Win::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 honor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pvpScore;
        break;
      }
      
      // optional int32 pvpScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpScore_)));
          set_has_pvpScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Win::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 honor = 1;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->honor(), output);
  }
  
  // optional int32 pvpScore = 2;
  if (has_pvpScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pvpScore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Win::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 honor = 1;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->honor(), target);
  }
  
  // optional int32 pvpScore = 2;
  if (has_pvpScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pvpScore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Win::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 honor = 1;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }
    
    // optional int32 pvpScore = 2;
    if (has_pvpScore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpScore());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Win::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Win* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Win*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Win::MergeFrom(const NetProto_Win& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_pvpScore()) {
      set_pvpScore(from.pvpScore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Win::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Win::CopyFrom(const NetProto_Win& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Win::IsInitialized() const {
  
  return true;
}

void NetProto_Win::Swap(NetProto_Win* other) {
  if (other != this) {
    std::swap(honor_, other->honor_);
    std::swap(pvpScore_, other->pvpScore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Win::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Win_descriptor_;
  metadata.reflection = NetProto_Win_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Lose_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Lose_ID_descriptor_;
}
bool NetProto_Lose_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Lose_ID NetProto_Lose::GROUPID;
const NetProto_Lose_ID NetProto_Lose::UNITID;
const NetProto_Lose_ID NetProto_Lose::ID_MIN;
const NetProto_Lose_ID NetProto_Lose::ID_MAX;
const int NetProto_Lose::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_Lose::NetProto_Lose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Lose::InitAsDefaultInstance() {
}

NetProto_Lose::NetProto_Lose(const NetProto_Lose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Lose::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Lose::~NetProto_Lose() {
  SharedDtor();
}

void NetProto_Lose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Lose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Lose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Lose_descriptor_;
}

const NetProto_Lose& NetProto_Lose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Lose* NetProto_Lose::default_instance_ = NULL;

NetProto_Lose* NetProto_Lose::New() const {
  return new NetProto_Lose;
}

void NetProto_Lose::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Lose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_Lose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Lose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Lose::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Lose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Lose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Lose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Lose::MergeFrom(const NetProto_Lose& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Lose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Lose::CopyFrom(const NetProto_Lose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Lose::IsInitialized() const {
  
  return true;
}

void NetProto_Lose::Swap(NetProto_Lose* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Lose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Lose_descriptor_;
  metadata.reflection = NetProto_Lose_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Timeout_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Timeout_ID_descriptor_;
}
bool NetProto_Timeout_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Timeout_ID NetProto_Timeout::GROUPID;
const NetProto_Timeout_ID NetProto_Timeout::UNITID;
const NetProto_Timeout_ID NetProto_Timeout::ID_MIN;
const NetProto_Timeout_ID NetProto_Timeout::ID_MAX;
const int NetProto_Timeout::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_Timeout::NetProto_Timeout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Timeout::InitAsDefaultInstance() {
}

NetProto_Timeout::NetProto_Timeout(const NetProto_Timeout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Timeout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Timeout::~NetProto_Timeout() {
  SharedDtor();
}

void NetProto_Timeout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Timeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Timeout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Timeout_descriptor_;
}

const NetProto_Timeout& NetProto_Timeout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Timeout* NetProto_Timeout::default_instance_ = NULL;

NetProto_Timeout* NetProto_Timeout::New() const {
  return new NetProto_Timeout;
}

void NetProto_Timeout::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Timeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_Timeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Timeout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Timeout::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Timeout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Timeout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Timeout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Timeout::MergeFrom(const NetProto_Timeout& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Timeout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Timeout::CopyFrom(const NetProto_Timeout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Timeout::IsInitialized() const {
  
  return true;
}

void NetProto_Timeout::Swap(NetProto_Timeout* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Timeout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Timeout_descriptor_;
  metadata.reflection = NetProto_Timeout_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BeginWaitPVP_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BeginWaitPVP_ID_descriptor_;
}
bool NetProto_BeginWaitPVP_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BeginWaitPVP_ID NetProto_BeginWaitPVP::GROUPID;
const NetProto_BeginWaitPVP_ID NetProto_BeginWaitPVP::UNITID;
const NetProto_BeginWaitPVP_ID NetProto_BeginWaitPVP::ID_MIN;
const NetProto_BeginWaitPVP_ID NetProto_BeginWaitPVP::ID_MAX;
const int NetProto_BeginWaitPVP::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_BeginWaitPVP_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BeginWaitPVP_Type_descriptor_;
}
bool NetProto_BeginWaitPVP_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BeginWaitPVP_Type NetProto_BeginWaitPVP::ONE_TO_ONE;
const NetProto_BeginWaitPVP_Type NetProto_BeginWaitPVP::HELL;
const NetProto_BeginWaitPVP_Type NetProto_BeginWaitPVP::Type_MIN;
const NetProto_BeginWaitPVP_Type NetProto_BeginWaitPVP::Type_MAX;
const int NetProto_BeginWaitPVP::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BeginWaitPVP::kTypeFieldNumber;
const int NetProto_BeginWaitPVP::kResFieldNumber;
#endif  // !_MSC_VER

NetProto_BeginWaitPVP::NetProto_BeginWaitPVP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BeginWaitPVP::InitAsDefaultInstance() {
}

NetProto_BeginWaitPVP::NetProto_BeginWaitPVP(const NetProto_BeginWaitPVP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BeginWaitPVP::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  res_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BeginWaitPVP::~NetProto_BeginWaitPVP() {
  SharedDtor();
}

void NetProto_BeginWaitPVP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BeginWaitPVP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BeginWaitPVP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BeginWaitPVP_descriptor_;
}

const NetProto_BeginWaitPVP& NetProto_BeginWaitPVP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BeginWaitPVP* NetProto_BeginWaitPVP::default_instance_ = NULL;

NetProto_BeginWaitPVP* NetProto_BeginWaitPVP::New() const {
  return new NetProto_BeginWaitPVP;
}

void NetProto_BeginWaitPVP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    res_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BeginWaitPVP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_BeginWaitPVP.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_BeginWaitPVP_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_BeginWaitPVP_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }
      
      // optional bool res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BeginWaitPVP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_BeginWaitPVP.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional bool res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BeginWaitPVP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_BeginWaitPVP.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional bool res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BeginWaitPVP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_BeginWaitPVP.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional bool res = 2;
    if (has_res()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BeginWaitPVP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BeginWaitPVP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BeginWaitPVP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BeginWaitPVP::MergeFrom(const NetProto_BeginWaitPVP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BeginWaitPVP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BeginWaitPVP::CopyFrom(const NetProto_BeginWaitPVP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BeginWaitPVP::IsInitialized() const {
  
  return true;
}

void NetProto_BeginWaitPVP::Swap(NetProto_BeginWaitPVP* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BeginWaitPVP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BeginWaitPVP_descriptor_;
  metadata.reflection = NetProto_BeginWaitPVP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_EndWaitPVP_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndWaitPVP_ID_descriptor_;
}
bool NetProto_EndWaitPVP_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EndWaitPVP_ID NetProto_EndWaitPVP::GROUPID;
const NetProto_EndWaitPVP_ID NetProto_EndWaitPVP::UNITID;
const NetProto_EndWaitPVP_ID NetProto_EndWaitPVP::ID_MIN;
const NetProto_EndWaitPVP_ID NetProto_EndWaitPVP::ID_MAX;
const int NetProto_EndWaitPVP::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_EndWaitPVP_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndWaitPVP_Type_descriptor_;
}
bool NetProto_EndWaitPVP_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EndWaitPVP_Type NetProto_EndWaitPVP::ONE_TO_ONE;
const NetProto_EndWaitPVP_Type NetProto_EndWaitPVP::HELL;
const NetProto_EndWaitPVP_Type NetProto_EndWaitPVP::Type_MIN;
const NetProto_EndWaitPVP_Type NetProto_EndWaitPVP::Type_MAX;
const int NetProto_EndWaitPVP::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_EndWaitPVP::kTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_EndWaitPVP::NetProto_EndWaitPVP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_EndWaitPVP::InitAsDefaultInstance() {
}

NetProto_EndWaitPVP::NetProto_EndWaitPVP(const NetProto_EndWaitPVP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_EndWaitPVP::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_EndWaitPVP::~NetProto_EndWaitPVP() {
  SharedDtor();
}

void NetProto_EndWaitPVP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_EndWaitPVP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_EndWaitPVP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndWaitPVP_descriptor_;
}

const NetProto_EndWaitPVP& NetProto_EndWaitPVP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_EndWaitPVP* NetProto_EndWaitPVP::default_instance_ = NULL;

NetProto_EndWaitPVP* NetProto_EndWaitPVP::New() const {
  return new NetProto_EndWaitPVP;
}

void NetProto_EndWaitPVP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_EndWaitPVP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_EndWaitPVP.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_EndWaitPVP_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_EndWaitPVP_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_EndWaitPVP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_EndWaitPVP.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_EndWaitPVP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_EndWaitPVP.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_EndWaitPVP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_EndWaitPVP.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_EndWaitPVP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_EndWaitPVP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_EndWaitPVP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_EndWaitPVP::MergeFrom(const NetProto_EndWaitPVP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_EndWaitPVP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_EndWaitPVP::CopyFrom(const NetProto_EndWaitPVP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_EndWaitPVP::IsInitialized() const {
  
  return true;
}

void NetProto_EndWaitPVP::Swap(NetProto_EndWaitPVP* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_EndWaitPVP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_EndWaitPVP_descriptor_;
  metadata.reflection = NetProto_EndWaitPVP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Lottery_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Lottery_ID_descriptor_;
}
bool NetProto_Lottery_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Lottery_ID NetProto_Lottery::GROUPID;
const NetProto_Lottery_ID NetProto_Lottery::UNITID;
const NetProto_Lottery_ID NetProto_Lottery::ID_MIN;
const NetProto_Lottery_ID NetProto_Lottery::ID_MAX;
const int NetProto_Lottery::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Lottery::kResFieldNumber;
#endif  // !_MSC_VER

NetProto_Lottery::NetProto_Lottery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Lottery::InitAsDefaultInstance() {
}

NetProto_Lottery::NetProto_Lottery(const NetProto_Lottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Lottery::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Lottery::~NetProto_Lottery() {
  SharedDtor();
}

void NetProto_Lottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Lottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Lottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Lottery_descriptor_;
}

const NetProto_Lottery& NetProto_Lottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Lottery* NetProto_Lottery::default_instance_ = NULL;

NetProto_Lottery* NetProto_Lottery::New() const {
  return new NetProto_Lottery;
}

void NetProto_Lottery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Lottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Lottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Lottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Lottery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Lottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Lottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Lottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Lottery::MergeFrom(const NetProto_Lottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Lottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Lottery::CopyFrom(const NetProto_Lottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Lottery::IsInitialized() const {
  
  return true;
}

void NetProto_Lottery::Swap(NetProto_Lottery* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Lottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Lottery_descriptor_;
  metadata.reflection = NetProto_Lottery_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GetGift_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetGift_ID_descriptor_;
}
bool NetProto_GetGift_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GetGift_ID NetProto_GetGift::GROUPID;
const NetProto_GetGift_ID NetProto_GetGift::UNITID;
const NetProto_GetGift_ID NetProto_GetGift::ID_MIN;
const NetProto_GetGift_ID NetProto_GetGift::ID_MAX;
const int NetProto_GetGift::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GetGift::kTypeFieldNumber;
const int NetProto_GetGift::kIndexFieldNumber;
const int NetProto_GetGift::kArgFieldNumber;
#endif  // !_MSC_VER

NetProto_GetGift::NetProto_GetGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GetGift::InitAsDefaultInstance() {
}

NetProto_GetGift::NetProto_GetGift(const NetProto_GetGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GetGift::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0;
  arg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GetGift::~NetProto_GetGift() {
  SharedDtor();
}

void NetProto_GetGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GetGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GetGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetGift_descriptor_;
}

const NetProto_GetGift& NetProto_GetGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GetGift* NetProto_GetGift::default_instance_ = NULL;

NetProto_GetGift* NetProto_GetGift::New() const {
  return new NetProto_GetGift;
}

void NetProto_GetGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    index_ = 0;
    arg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GetGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AwardInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AwardInfo_Type_IsValid(value)) {
            set_type(static_cast< ::AwardInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arg;
        break;
      }
      
      // optional int32 arg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
          set_has_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GetGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AwardInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // optional int32 arg = 3;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GetGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AwardInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // optional int32 arg = 3;
  if (has_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->arg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GetGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AwardInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 arg = 3;
    if (has_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GetGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GetGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GetGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GetGift::MergeFrom(const NetProto_GetGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_arg()) {
      set_arg(from.arg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GetGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GetGift::CopyFrom(const NetProto_GetGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GetGift::IsInitialized() const {
  
  return true;
}

void NetProto_GetGift::Swap(NetProto_GetGift* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(arg_, other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GetGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GetGift_descriptor_;
  metadata.reflection = NetProto_GetGift_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SingleRecord_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SingleRecord_ID_descriptor_;
}
bool NetProto_SingleRecord_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SingleRecord_ID NetProto_SingleRecord::GROUPID;
const NetProto_SingleRecord_ID NetProto_SingleRecord::UNITID;
const NetProto_SingleRecord_ID NetProto_SingleRecord::ID_MIN;
const NetProto_SingleRecord_ID NetProto_SingleRecord::ID_MAX;
const int NetProto_SingleRecord::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SingleRecord::kMapIDFieldNumber;
const int NetProto_SingleRecord::kRecordFieldNumber;
#endif  // !_MSC_VER

NetProto_SingleRecord::NetProto_SingleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SingleRecord::InitAsDefaultInstance() {
  record_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
}

NetProto_SingleRecord::NetProto_SingleRecord(const NetProto_SingleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SingleRecord::SharedCtor() {
  _cached_size_ = 0;
  mapID_ = 0;
  record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SingleRecord::~NetProto_SingleRecord() {
  SharedDtor();
}

void NetProto_SingleRecord::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void NetProto_SingleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SingleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SingleRecord_descriptor_;
}

const NetProto_SingleRecord& NetProto_SingleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SingleRecord* NetProto_SingleRecord::default_instance_ = NULL;

NetProto_SingleRecord* NetProto_SingleRecord::New() const {
  return new NetProto_SingleRecord;
}

void NetProto_SingleRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapID_ = 0;
    if (has_record()) {
      if (record_ != NULL) record_->::RecordInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SingleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapID_)));
          set_has_mapID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }
      
      // optional .RecordInfo record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SingleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mapID = 1;
  if (has_mapID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapID(), output);
  }
  
  // optional .RecordInfo record = 2;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SingleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mapID = 1;
  if (has_mapID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapID(), target);
  }
  
  // optional .RecordInfo record = 2;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SingleRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mapID = 1;
    if (has_mapID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapID());
    }
    
    // optional .RecordInfo record = 2;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SingleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SingleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SingleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SingleRecord::MergeFrom(const NetProto_SingleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapID()) {
      set_mapID(from.mapID());
    }
    if (from.has_record()) {
      mutable_record()->::RecordInfo::MergeFrom(from.record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SingleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SingleRecord::CopyFrom(const NetProto_SingleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SingleRecord::IsInitialized() const {
  
  return true;
}

void NetProto_SingleRecord::Swap(NetProto_SingleRecord* other) {
  if (other != this) {
    std::swap(mapID_, other->mapID_);
    std::swap(record_, other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SingleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SingleRecord_descriptor_;
  metadata.reflection = NetProto_SingleRecord_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_EndLoadModel_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndLoadModel_ID_descriptor_;
}
bool NetProto_EndLoadModel_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EndLoadModel_ID NetProto_EndLoadModel::GROUPID;
const NetProto_EndLoadModel_ID NetProto_EndLoadModel::UNITID;
const NetProto_EndLoadModel_ID NetProto_EndLoadModel::ID_MIN;
const NetProto_EndLoadModel_ID NetProto_EndLoadModel::ID_MAX;
const int NetProto_EndLoadModel::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_EndLoadModel::NetProto_EndLoadModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_EndLoadModel::InitAsDefaultInstance() {
}

NetProto_EndLoadModel::NetProto_EndLoadModel(const NetProto_EndLoadModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_EndLoadModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_EndLoadModel::~NetProto_EndLoadModel() {
  SharedDtor();
}

void NetProto_EndLoadModel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_EndLoadModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_EndLoadModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndLoadModel_descriptor_;
}

const NetProto_EndLoadModel& NetProto_EndLoadModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_EndLoadModel* NetProto_EndLoadModel::default_instance_ = NULL;

NetProto_EndLoadModel* NetProto_EndLoadModel::New() const {
  return new NetProto_EndLoadModel;
}

void NetProto_EndLoadModel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_EndLoadModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_EndLoadModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_EndLoadModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_EndLoadModel::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_EndLoadModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_EndLoadModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_EndLoadModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_EndLoadModel::MergeFrom(const NetProto_EndLoadModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_EndLoadModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_EndLoadModel::CopyFrom(const NetProto_EndLoadModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_EndLoadModel::IsInitialized() const {
  
  return true;
}

void NetProto_EndLoadModel::Swap(NetProto_EndLoadModel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_EndLoadModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_EndLoadModel_descriptor_;
  metadata.reflection = NetProto_EndLoadModel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RoomWaitCount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RoomWaitCount_ID_descriptor_;
}
bool NetProto_RoomWaitCount_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RoomWaitCount_ID NetProto_RoomWaitCount::GROUPID;
const NetProto_RoomWaitCount_ID NetProto_RoomWaitCount::UNITID;
const NetProto_RoomWaitCount_ID NetProto_RoomWaitCount::ID_MIN;
const NetProto_RoomWaitCount_ID NetProto_RoomWaitCount::ID_MAX;
const int NetProto_RoomWaitCount::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RoomWaitCount::kRoomFieldNumber;
const int NetProto_RoomWaitCount::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_RoomWaitCount::NetProto_RoomWaitCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RoomWaitCount::InitAsDefaultInstance() {
}

NetProto_RoomWaitCount::NetProto_RoomWaitCount(const NetProto_RoomWaitCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RoomWaitCount::SharedCtor() {
  _cached_size_ = 0;
  room_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RoomWaitCount::~NetProto_RoomWaitCount() {
  SharedDtor();
}

void NetProto_RoomWaitCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RoomWaitCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RoomWaitCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RoomWaitCount_descriptor_;
}

const NetProto_RoomWaitCount& NetProto_RoomWaitCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RoomWaitCount* NetProto_RoomWaitCount::default_instance_ = NULL;

NetProto_RoomWaitCount* NetProto_RoomWaitCount::New() const {
  return new NetProto_RoomWaitCount;
}

void NetProto_RoomWaitCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RoomWaitCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_)));
          set_has_room();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RoomWaitCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RoomWaitCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room = 1;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RoomWaitCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room = 1;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RoomWaitCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RoomWaitCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RoomWaitCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RoomWaitCount::MergeFrom(const NetProto_RoomWaitCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room()) {
      set_room(from.room());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RoomWaitCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RoomWaitCount::CopyFrom(const NetProto_RoomWaitCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RoomWaitCount::IsInitialized() const {
  
  return true;
}

void NetProto_RoomWaitCount::Swap(NetProto_RoomWaitCount* other) {
  if (other != this) {
    std::swap(room_, other->room_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RoomWaitCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RoomWaitCount_descriptor_;
  metadata.reflection = NetProto_RoomWaitCount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PVPWaitCount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PVPWaitCount_ID_descriptor_;
}
bool NetProto_PVPWaitCount_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PVPWaitCount_ID NetProto_PVPWaitCount::GROUPID;
const NetProto_PVPWaitCount_ID NetProto_PVPWaitCount::UNITID;
const NetProto_PVPWaitCount_ID NetProto_PVPWaitCount::ID_MIN;
const NetProto_PVPWaitCount_ID NetProto_PVPWaitCount::ID_MAX;
const int NetProto_PVPWaitCount::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_PVPWaitCount_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PVPWaitCount_Type_descriptor_;
}
bool NetProto_PVPWaitCount_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PVPWaitCount_Type NetProto_PVPWaitCount::ONE_TO_ONE;
const NetProto_PVPWaitCount_Type NetProto_PVPWaitCount::HELL;
const NetProto_PVPWaitCount_Type NetProto_PVPWaitCount::Type_MIN;
const NetProto_PVPWaitCount_Type NetProto_PVPWaitCount::Type_MAX;
const int NetProto_PVPWaitCount::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PVPWaitCount::kTypeFieldNumber;
const int NetProto_PVPWaitCount::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_PVPWaitCount::NetProto_PVPWaitCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PVPWaitCount::InitAsDefaultInstance() {
}

NetProto_PVPWaitCount::NetProto_PVPWaitCount(const NetProto_PVPWaitCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PVPWaitCount::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PVPWaitCount::~NetProto_PVPWaitCount() {
  SharedDtor();
}

void NetProto_PVPWaitCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PVPWaitCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PVPWaitCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PVPWaitCount_descriptor_;
}

const NetProto_PVPWaitCount& NetProto_PVPWaitCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PVPWaitCount* NetProto_PVPWaitCount::default_instance_ = NULL;

NetProto_PVPWaitCount* NetProto_PVPWaitCount::New() const {
  return new NetProto_PVPWaitCount;
}

void NetProto_PVPWaitCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PVPWaitCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_PVPWaitCount.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_PVPWaitCount_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_PVPWaitCount_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PVPWaitCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_PVPWaitCount.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PVPWaitCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_PVPWaitCount.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PVPWaitCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_PVPWaitCount.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PVPWaitCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PVPWaitCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PVPWaitCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PVPWaitCount::MergeFrom(const NetProto_PVPWaitCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PVPWaitCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PVPWaitCount::CopyFrom(const NetProto_PVPWaitCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PVPWaitCount::IsInitialized() const {
  
  return true;
}

void NetProto_PVPWaitCount::Swap(NetProto_PVPWaitCount* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PVPWaitCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PVPWaitCount_descriptor_;
  metadata.reflection = NetProto_PVPWaitCount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_CancelWaitRoom_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CancelWaitRoom_ID_descriptor_;
}
bool NetProto_CancelWaitRoom_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_CancelWaitRoom_ID NetProto_CancelWaitRoom::GROUPID;
const NetProto_CancelWaitRoom_ID NetProto_CancelWaitRoom::UNITID;
const NetProto_CancelWaitRoom_ID NetProto_CancelWaitRoom::ID_MIN;
const NetProto_CancelWaitRoom_ID NetProto_CancelWaitRoom::ID_MAX;
const int NetProto_CancelWaitRoom::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_CancelWaitRoom::NetProto_CancelWaitRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_CancelWaitRoom::InitAsDefaultInstance() {
}

NetProto_CancelWaitRoom::NetProto_CancelWaitRoom(const NetProto_CancelWaitRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_CancelWaitRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_CancelWaitRoom::~NetProto_CancelWaitRoom() {
  SharedDtor();
}

void NetProto_CancelWaitRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_CancelWaitRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_CancelWaitRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CancelWaitRoom_descriptor_;
}

const NetProto_CancelWaitRoom& NetProto_CancelWaitRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_CancelWaitRoom* NetProto_CancelWaitRoom::default_instance_ = NULL;

NetProto_CancelWaitRoom* NetProto_CancelWaitRoom::New() const {
  return new NetProto_CancelWaitRoom;
}

void NetProto_CancelWaitRoom::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_CancelWaitRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_CancelWaitRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_CancelWaitRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_CancelWaitRoom::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_CancelWaitRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_CancelWaitRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_CancelWaitRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_CancelWaitRoom::MergeFrom(const NetProto_CancelWaitRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_CancelWaitRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_CancelWaitRoom::CopyFrom(const NetProto_CancelWaitRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_CancelWaitRoom::IsInitialized() const {
  
  return true;
}

void NetProto_CancelWaitRoom::Swap(NetProto_CancelWaitRoom* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_CancelWaitRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_CancelWaitRoom_descriptor_;
  metadata.reflection = NetProto_CancelWaitRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_CancelWaitPVP_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CancelWaitPVP_ID_descriptor_;
}
bool NetProto_CancelWaitPVP_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_CancelWaitPVP_ID NetProto_CancelWaitPVP::GROUPID;
const NetProto_CancelWaitPVP_ID NetProto_CancelWaitPVP::UNITID;
const NetProto_CancelWaitPVP_ID NetProto_CancelWaitPVP::ID_MIN;
const NetProto_CancelWaitPVP_ID NetProto_CancelWaitPVP::ID_MAX;
const int NetProto_CancelWaitPVP::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_CancelWaitPVP::NetProto_CancelWaitPVP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_CancelWaitPVP::InitAsDefaultInstance() {
}

NetProto_CancelWaitPVP::NetProto_CancelWaitPVP(const NetProto_CancelWaitPVP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_CancelWaitPVP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_CancelWaitPVP::~NetProto_CancelWaitPVP() {
  SharedDtor();
}

void NetProto_CancelWaitPVP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_CancelWaitPVP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_CancelWaitPVP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CancelWaitPVP_descriptor_;
}

const NetProto_CancelWaitPVP& NetProto_CancelWaitPVP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_CancelWaitPVP* NetProto_CancelWaitPVP::default_instance_ = NULL;

NetProto_CancelWaitPVP* NetProto_CancelWaitPVP::New() const {
  return new NetProto_CancelWaitPVP;
}

void NetProto_CancelWaitPVP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_CancelWaitPVP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_CancelWaitPVP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_CancelWaitPVP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_CancelWaitPVP::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_CancelWaitPVP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_CancelWaitPVP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_CancelWaitPVP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_CancelWaitPVP::MergeFrom(const NetProto_CancelWaitPVP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_CancelWaitPVP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_CancelWaitPVP::CopyFrom(const NetProto_CancelWaitPVP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_CancelWaitPVP::IsInitialized() const {
  
  return true;
}

void NetProto_CancelWaitPVP::Swap(NetProto_CancelWaitPVP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_CancelWaitPVP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_CancelWaitPVP_descriptor_;
  metadata.reflection = NetProto_CancelWaitPVP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GetRes_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetRes_ID_descriptor_;
}
bool NetProto_GetRes_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GetRes_ID NetProto_GetRes::GROUPID;
const NetProto_GetRes_ID NetProto_GetRes::UNITID;
const NetProto_GetRes_ID NetProto_GetRes::ID_MIN;
const NetProto_GetRes_ID NetProto_GetRes::ID_MAX;
const int NetProto_GetRes::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GetRes::kItemsFieldNumber;
#endif  // !_MSC_VER

NetProto_GetRes::NetProto_GetRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GetRes::InitAsDefaultInstance() {
}

NetProto_GetRes::NetProto_GetRes(const NetProto_GetRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GetRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GetRes::~NetProto_GetRes() {
  SharedDtor();
}

void NetProto_GetRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GetRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GetRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetRes_descriptor_;
}

const NetProto_GetRes& NetProto_GetRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GetRes* NetProto_GetRes::default_instance_ = NULL;

NetProto_GetRes* NetProto_GetRes::New() const {
  return new NetProto_GetRes;
}

void NetProto_GetRes::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GetRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_ItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GetRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GetRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GetRes::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_ItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GetRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GetRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GetRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GetRes::MergeFrom(const NetProto_GetRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GetRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GetRes::CopyFrom(const NetProto_GetRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GetRes::IsInitialized() const {
  
  return true;
}

void NetProto_GetRes::Swap(NetProto_GetRes* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GetRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GetRes_descriptor_;
  metadata.reflection = NetProto_GetRes_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Invest_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Invest_ID_descriptor_;
}
bool NetProto_Invest_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Invest_ID NetProto_Invest::GROUPID;
const NetProto_Invest_ID NetProto_Invest::UNITID;
const NetProto_Invest_ID NetProto_Invest::ID_MIN;
const NetProto_Invest_ID NetProto_Invest::ID_MAX;
const int NetProto_Invest::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Invest::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_Invest::NetProto_Invest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Invest::InitAsDefaultInstance() {
}

NetProto_Invest::NetProto_Invest(const NetProto_Invest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Invest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Invest::~NetProto_Invest() {
  SharedDtor();
}

void NetProto_Invest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Invest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Invest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Invest_descriptor_;
}

const NetProto_Invest& NetProto_Invest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Invest* NetProto_Invest::default_instance_ = NULL;

NetProto_Invest* NetProto_Invest::New() const {
  return new NetProto_Invest;
}

void NetProto_Invest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Invest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Invest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Invest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Invest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Invest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Invest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Invest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Invest::MergeFrom(const NetProto_Invest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Invest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Invest::CopyFrom(const NetProto_Invest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Invest::IsInitialized() const {
  
  return true;
}

void NetProto_Invest::Swap(NetProto_Invest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Invest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Invest_descriptor_;
  metadata.reflection = NetProto_Invest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_InvestAward_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_InvestAward_ID_descriptor_;
}
bool NetProto_InvestAward_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_InvestAward_ID NetProto_InvestAward::GROUPID;
const NetProto_InvestAward_ID NetProto_InvestAward::UNITID;
const NetProto_InvestAward_ID NetProto_InvestAward::ID_MIN;
const NetProto_InvestAward_ID NetProto_InvestAward::ID_MAX;
const int NetProto_InvestAward::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_InvestAward::kIdFieldNumber;
const int NetProto_InvestAward::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_InvestAward::NetProto_InvestAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_InvestAward::InitAsDefaultInstance() {
}

NetProto_InvestAward::NetProto_InvestAward(const NetProto_InvestAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_InvestAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_InvestAward::~NetProto_InvestAward() {
  SharedDtor();
}

void NetProto_InvestAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_InvestAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_InvestAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_InvestAward_descriptor_;
}

const NetProto_InvestAward& NetProto_InvestAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_InvestAward* NetProto_InvestAward::default_instance_ = NULL;

NetProto_InvestAward* NetProto_InvestAward::New() const {
  return new NetProto_InvestAward;
}

void NetProto_InvestAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_InvestAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_InvestAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_InvestAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_InvestAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_InvestAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_InvestAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_InvestAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_InvestAward::MergeFrom(const NetProto_InvestAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_InvestAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_InvestAward::CopyFrom(const NetProto_InvestAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_InvestAward::IsInitialized() const {
  
  return true;
}

void NetProto_InvestAward::Swap(NetProto_InvestAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_InvestAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_InvestAward_descriptor_;
  metadata.reflection = NetProto_InvestAward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_InvestAwardInfo_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_InvestAwardInfo_ID_descriptor_;
}
bool NetProto_InvestAwardInfo_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_InvestAwardInfo_ID NetProto_InvestAwardInfo::GROUPID;
const NetProto_InvestAwardInfo_ID NetProto_InvestAwardInfo::UNITID;
const NetProto_InvestAwardInfo_ID NetProto_InvestAwardInfo::ID_MIN;
const NetProto_InvestAwardInfo_ID NetProto_InvestAwardInfo::ID_MAX;
const int NetProto_InvestAwardInfo::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_InvestAwardInfo::kAwardFieldNumber;
#endif  // !_MSC_VER

NetProto_InvestAwardInfo::NetProto_InvestAwardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_InvestAwardInfo::InitAsDefaultInstance() {
}

NetProto_InvestAwardInfo::NetProto_InvestAwardInfo(const NetProto_InvestAwardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_InvestAwardInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_InvestAwardInfo::~NetProto_InvestAwardInfo() {
  SharedDtor();
}

void NetProto_InvestAwardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_InvestAwardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_InvestAwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_InvestAwardInfo_descriptor_;
}

const NetProto_InvestAwardInfo& NetProto_InvestAwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_InvestAwardInfo* NetProto_InvestAwardInfo::default_instance_ = NULL;

NetProto_InvestAwardInfo* NetProto_InvestAwardInfo::New() const {
  return new NetProto_InvestAwardInfo;
}

void NetProto_InvestAwardInfo::Clear() {
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_InvestAwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 award = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_award())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_award())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_award;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_InvestAwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 award = 1;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->award(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_InvestAwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 award = 1;
  for (int i = 0; i < this->award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->award(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_InvestAwardInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 award = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->award_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->award(i));
    }
    total_size += 1 * this->award_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_InvestAwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_InvestAwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_InvestAwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_InvestAwardInfo::MergeFrom(const NetProto_InvestAwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_InvestAwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_InvestAwardInfo::CopyFrom(const NetProto_InvestAwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_InvestAwardInfo::IsInitialized() const {
  
  return true;
}

void NetProto_InvestAwardInfo::Swap(NetProto_InvestAwardInfo* other) {
  if (other != this) {
    award_.Swap(&other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_InvestAwardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_InvestAwardInfo_descriptor_;
  metadata.reflection = NetProto_InvestAwardInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SetDayEvent_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetDayEvent_ID_descriptor_;
}
bool NetProto_SetDayEvent_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SetDayEvent_ID NetProto_SetDayEvent::GROUPID;
const NetProto_SetDayEvent_ID NetProto_SetDayEvent::UNITID;
const NetProto_SetDayEvent_ID NetProto_SetDayEvent::ID_MIN;
const NetProto_SetDayEvent_ID NetProto_SetDayEvent::ID_MAX;
const int NetProto_SetDayEvent::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SetDayEvent::kIdFieldNumber;
const int NetProto_SetDayEvent::kVFieldNumber;
#endif  // !_MSC_VER

NetProto_SetDayEvent::NetProto_SetDayEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SetDayEvent::InitAsDefaultInstance() {
}

NetProto_SetDayEvent::NetProto_SetDayEvent(const NetProto_SetDayEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SetDayEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SetDayEvent::~NetProto_SetDayEvent() {
  SharedDtor();
}

void NetProto_SetDayEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_SetDayEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SetDayEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetDayEvent_descriptor_;
}

const NetProto_SetDayEvent& NetProto_SetDayEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SetDayEvent* NetProto_SetDayEvent::default_instance_ = NULL;

NetProto_SetDayEvent* NetProto_SetDayEvent::New() const {
  return new NetProto_SetDayEvent;
}

void NetProto_SetDayEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SetDayEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }
      
      // optional int32 v = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SetDayEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SetDayEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SetDayEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SetDayEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SetDayEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SetDayEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SetDayEvent::MergeFrom(const NetProto_SetDayEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SetDayEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SetDayEvent::CopyFrom(const NetProto_SetDayEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SetDayEvent::IsInitialized() const {
  
  return true;
}

void NetProto_SetDayEvent::Swap(NetProto_SetDayEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SetDayEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SetDayEvent_descriptor_;
  metadata.reflection = NetProto_SetDayEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SetFixedEvent_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetFixedEvent_ID_descriptor_;
}
bool NetProto_SetFixedEvent_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SetFixedEvent_ID NetProto_SetFixedEvent::GROUPID;
const NetProto_SetFixedEvent_ID NetProto_SetFixedEvent::UNITID;
const NetProto_SetFixedEvent_ID NetProto_SetFixedEvent::ID_MIN;
const NetProto_SetFixedEvent_ID NetProto_SetFixedEvent::ID_MAX;
const int NetProto_SetFixedEvent::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SetFixedEvent::kIdFieldNumber;
const int NetProto_SetFixedEvent::kVFieldNumber;
#endif  // !_MSC_VER

NetProto_SetFixedEvent::NetProto_SetFixedEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SetFixedEvent::InitAsDefaultInstance() {
}

NetProto_SetFixedEvent::NetProto_SetFixedEvent(const NetProto_SetFixedEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SetFixedEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SetFixedEvent::~NetProto_SetFixedEvent() {
  SharedDtor();
}

void NetProto_SetFixedEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_SetFixedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SetFixedEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetFixedEvent_descriptor_;
}

const NetProto_SetFixedEvent& NetProto_SetFixedEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SetFixedEvent* NetProto_SetFixedEvent::default_instance_ = NULL;

NetProto_SetFixedEvent* NetProto_SetFixedEvent::New() const {
  return new NetProto_SetFixedEvent;
}

void NetProto_SetFixedEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SetFixedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_v;
        break;
      }
      
      // optional int32 v = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SetFixedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SetFixedEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SetFixedEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SetFixedEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SetFixedEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SetFixedEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SetFixedEvent::MergeFrom(const NetProto_SetFixedEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SetFixedEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SetFixedEvent::CopyFrom(const NetProto_SetFixedEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SetFixedEvent::IsInitialized() const {
  
  return true;
}

void NetProto_SetFixedEvent::Swap(NetProto_SetFixedEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SetFixedEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SetFixedEvent_descriptor_;
  metadata.reflection = NetProto_SetFixedEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Info_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Info_ID_descriptor_;
}
bool NetProto_Info_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Info_ID NetProto_Info::GROUPID;
const NetProto_Info_ID NetProto_Info::UNITID;
const NetProto_Info_ID NetProto_Info::ID_MIN;
const NetProto_Info_ID NetProto_Info::ID_MAX;
const int NetProto_Info::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Info::kContentFieldNumber;
#endif  // !_MSC_VER

NetProto_Info::NetProto_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Info::InitAsDefaultInstance() {
}

NetProto_Info::NetProto_Info(const NetProto_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Info::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Info::~NetProto_Info() {
  SharedDtor();
}

void NetProto_Info::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Info_descriptor_;
}

const NetProto_Info& NetProto_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Info* NetProto_Info::default_instance_ = NULL;

NetProto_Info* NetProto_Info::New() const {
  return new NetProto_Info;
}

void NetProto_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Info::MergeFrom(const NetProto_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Info::CopyFrom(const NetProto_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Info::IsInitialized() const {
  
  return true;
}

void NetProto_Info::Swap(NetProto_Info* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Info_descriptor_;
  metadata.reflection = NetProto_Info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Error_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Error_ID_descriptor_;
}
bool NetProto_Error_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Error_ID NetProto_Error::GROUPID;
const NetProto_Error_ID NetProto_Error::UNITID;
const NetProto_Error_ID NetProto_Error::ID_MIN;
const NetProto_Error_ID NetProto_Error::ID_MAX;
const int NetProto_Error::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Error::kContentFieldNumber;
#endif  // !_MSC_VER

NetProto_Error::NetProto_Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Error::InitAsDefaultInstance() {
}

NetProto_Error::NetProto_Error(const NetProto_Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Error::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Error::~NetProto_Error() {
  SharedDtor();
}

void NetProto_Error::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Error_descriptor_;
}

const NetProto_Error& NetProto_Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Error* NetProto_Error::default_instance_ = NULL;

NetProto_Error* NetProto_Error::New() const {
  return new NetProto_Error;
}

void NetProto_Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Error::MergeFrom(const NetProto_Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Error::CopyFrom(const NetProto_Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Error::IsInitialized() const {
  
  return true;
}

void NetProto_Error::Swap(NetProto_Error* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Error_descriptor_;
  metadata.reflection = NetProto_Error_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GodAward_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodAward_ID_descriptor_;
}
bool NetProto_GodAward_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GodAward_ID NetProto_GodAward::GROUPID;
const NetProto_GodAward_ID NetProto_GodAward::UNITID;
const NetProto_GodAward_ID NetProto_GodAward::ID_MIN;
const NetProto_GodAward_ID NetProto_GodAward::ID_MAX;
const int NetProto_GodAward::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GodAward::kPrevDayRankFieldNumber;
const int NetProto_GodAward::kPrevDayGoodsFieldNumber;
const int NetProto_GodAward::kPrevWeekRankFieldNumber;
const int NetProto_GodAward::kPrevWeekGoodsFieldNumber;
#endif  // !_MSC_VER

NetProto_GodAward::NetProto_GodAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GodAward::InitAsDefaultInstance() {
}

NetProto_GodAward::NetProto_GodAward(const NetProto_GodAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GodAward::SharedCtor() {
  _cached_size_ = 0;
  prevDayRank_ = GOOGLE_LONGLONG(0);
  prevDayGoods_ = 0;
  prevWeekRank_ = GOOGLE_LONGLONG(0);
  prevWeekGoods_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GodAward::~NetProto_GodAward() {
  SharedDtor();
}

void NetProto_GodAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GodAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GodAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodAward_descriptor_;
}

const NetProto_GodAward& NetProto_GodAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GodAward* NetProto_GodAward::default_instance_ = NULL;

NetProto_GodAward* NetProto_GodAward::New() const {
  return new NetProto_GodAward;
}

void NetProto_GodAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevDayRank_ = GOOGLE_LONGLONG(0);
    prevDayGoods_ = 0;
    prevWeekRank_ = GOOGLE_LONGLONG(0);
    prevWeekGoods_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GodAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 prevDayRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prevDayRank_)));
          set_has_prevDayRank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prevDayGoods;
        break;
      }
      
      // optional int32 prevDayGoods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevDayGoods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevDayGoods_)));
          set_has_prevDayGoods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prevWeekRank;
        break;
      }
      
      // optional int64 prevWeekRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevWeekRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prevWeekRank_)));
          set_has_prevWeekRank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prevWeekGoods;
        break;
      }
      
      // optional int32 prevWeekGoods = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevWeekGoods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevWeekGoods_)));
          set_has_prevWeekGoods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GodAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 prevDayRank = 1;
  if (has_prevDayRank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->prevDayRank(), output);
  }
  
  // optional int32 prevDayGoods = 2;
  if (has_prevDayGoods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prevDayGoods(), output);
  }
  
  // optional int64 prevWeekRank = 3;
  if (has_prevWeekRank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->prevWeekRank(), output);
  }
  
  // optional int32 prevWeekGoods = 4;
  if (has_prevWeekGoods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prevWeekGoods(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GodAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 prevDayRank = 1;
  if (has_prevDayRank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->prevDayRank(), target);
  }
  
  // optional int32 prevDayGoods = 2;
  if (has_prevDayGoods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prevDayGoods(), target);
  }
  
  // optional int64 prevWeekRank = 3;
  if (has_prevWeekRank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->prevWeekRank(), target);
  }
  
  // optional int32 prevWeekGoods = 4;
  if (has_prevWeekGoods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prevWeekGoods(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GodAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 prevDayRank = 1;
    if (has_prevDayRank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prevDayRank());
    }
    
    // optional int32 prevDayGoods = 2;
    if (has_prevDayGoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevDayGoods());
    }
    
    // optional int64 prevWeekRank = 3;
    if (has_prevWeekRank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prevWeekRank());
    }
    
    // optional int32 prevWeekGoods = 4;
    if (has_prevWeekGoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevWeekGoods());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GodAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GodAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GodAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GodAward::MergeFrom(const NetProto_GodAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevDayRank()) {
      set_prevDayRank(from.prevDayRank());
    }
    if (from.has_prevDayGoods()) {
      set_prevDayGoods(from.prevDayGoods());
    }
    if (from.has_prevWeekRank()) {
      set_prevWeekRank(from.prevWeekRank());
    }
    if (from.has_prevWeekGoods()) {
      set_prevWeekGoods(from.prevWeekGoods());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GodAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GodAward::CopyFrom(const NetProto_GodAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GodAward::IsInitialized() const {
  
  return true;
}

void NetProto_GodAward::Swap(NetProto_GodAward* other) {
  if (other != this) {
    std::swap(prevDayRank_, other->prevDayRank_);
    std::swap(prevDayGoods_, other->prevDayGoods_);
    std::swap(prevWeekRank_, other->prevWeekRank_);
    std::swap(prevWeekGoods_, other->prevWeekGoods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GodAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GodAward_descriptor_;
  metadata.reflection = NetProto_GodAward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_CreateRoom_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CreateRoom_ID_descriptor_;
}
bool NetProto_CreateRoom_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_CreateRoom_ID NetProto_CreateRoom::GROUPID;
const NetProto_CreateRoom_ID NetProto_CreateRoom::UNITID;
const NetProto_CreateRoom_ID NetProto_CreateRoom::ID_MIN;
const NetProto_CreateRoom_ID NetProto_CreateRoom::ID_MAX;
const int NetProto_CreateRoom::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_CreateRoom::kMapFieldNumber;
const int NetProto_CreateRoom::kNoPowerFieldNumber;
const int NetProto_CreateRoom::kInfoFieldNumber;
#endif  // !_MSC_VER

NetProto_CreateRoom::NetProto_CreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_CreateRoom::InitAsDefaultInstance() {
  info_ = const_cast< ::RoomInfo*>(&::RoomInfo::default_instance());
}

NetProto_CreateRoom::NetProto_CreateRoom(const NetProto_CreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_CreateRoom::SharedCtor() {
  _cached_size_ = 0;
  map_ = 0;
  noPower_ = false;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_CreateRoom::~NetProto_CreateRoom() {
  SharedDtor();
}

void NetProto_CreateRoom::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NetProto_CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CreateRoom_descriptor_;
}

const NetProto_CreateRoom& NetProto_CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_CreateRoom* NetProto_CreateRoom::default_instance_ = NULL;

NetProto_CreateRoom* NetProto_CreateRoom::New() const {
  return new NetProto_CreateRoom;
}

void NetProto_CreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_ = 0;
    noPower_ = false;
    if (has_info()) {
      if (info_ != NULL) info_->::RoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_noPower;
        break;
      }
      
      // optional bool noPower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noPower_)));
          set_has_noPower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .RoomInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map = 1;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map(), output);
  }
  
  // optional bool noPower = 2;
  if (has_noPower()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->noPower(), output);
  }
  
  // optional .RoomInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_CreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map = 1;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map(), target);
  }
  
  // optional bool noPower = 2;
  if (has_noPower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->noPower(), target);
  }
  
  // optional .RoomInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_CreateRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map = 1;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map());
    }
    
    // optional bool noPower = 2;
    if (has_noPower()) {
      total_size += 1 + 1;
    }
    
    // optional .RoomInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_CreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_CreateRoom::MergeFrom(const NetProto_CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_noPower()) {
      set_noPower(from.noPower());
    }
    if (from.has_info()) {
      mutable_info()->::RoomInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_CreateRoom::CopyFrom(const NetProto_CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_CreateRoom::IsInitialized() const {
  
  return true;
}

void NetProto_CreateRoom::Swap(NetProto_CreateRoom* other) {
  if (other != this) {
    std::swap(map_, other->map_);
    std::swap(noPower_, other->noPower_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_CreateRoom_descriptor_;
  metadata.reflection = NetProto_CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_JoinRoom_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_JoinRoom_ID_descriptor_;
}
bool NetProto_JoinRoom_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_JoinRoom_ID NetProto_JoinRoom::GROUPID;
const NetProto_JoinRoom_ID NetProto_JoinRoom::UNITID;
const NetProto_JoinRoom_ID NetProto_JoinRoom::ID_MIN;
const NetProto_JoinRoom_ID NetProto_JoinRoom::ID_MAX;
const int NetProto_JoinRoom::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_JoinRoom::kIdFieldNumber;
const int NetProto_JoinRoom::kPosFieldNumber;
const int NetProto_JoinRoom::kInfoFieldNumber;
const int NetProto_JoinRoom::kPowerFieldNumber;
const int NetProto_JoinRoom::kNoPowerFieldNumber;
const int NetProto_JoinRoom::kPlayerIDFieldNumber;
const int NetProto_JoinRoom::kAttFieldNumber;
const int NetProto_JoinRoom::kMaleFieldNumber;
const int NetProto_JoinRoom::kMapFieldNumber;
const int NetProto_JoinRoom::kEquipsFieldNumber;
#endif  // !_MSC_VER

NetProto_JoinRoom::NetProto_JoinRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_JoinRoom::InitAsDefaultInstance() {
  info_ = const_cast< ::PB_FriendInfo*>(&::PB_FriendInfo::default_instance());
  att_ = const_cast< ::PB_EquipmentAtt*>(&::PB_EquipmentAtt::default_instance());
}

NetProto_JoinRoom::NetProto_JoinRoom(const NetProto_JoinRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_JoinRoom::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pos_ = 0;
  info_ = NULL;
  power_ = 0;
  noPower_ = false;
  playerID_ = 0;
  att_ = NULL;
  male_ = false;
  map_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_JoinRoom::~NetProto_JoinRoom() {
  SharedDtor();
}

void NetProto_JoinRoom::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete att_;
  }
}

void NetProto_JoinRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_JoinRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_JoinRoom_descriptor_;
}

const NetProto_JoinRoom& NetProto_JoinRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_JoinRoom* NetProto_JoinRoom::default_instance_ = NULL;

NetProto_JoinRoom* NetProto_JoinRoom::New() const {
  return new NetProto_JoinRoom;
}

void NetProto_JoinRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    pos_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::PB_FriendInfo::Clear();
    }
    power_ = 0;
    noPower_ = false;
    playerID_ = 0;
    if (has_att()) {
      if (att_ != NULL) att_->::PB_EquipmentAtt::Clear();
    }
    male_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    map_ = 0;
  }
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_JoinRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .PB_FriendInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_power;
        break;
      }
      
      // optional int32 power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_noPower;
        break;
      }
      
      // optional bool noPower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noPower_)));
          set_has_noPower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerID;
        break;
      }
      
      // optional int32 playerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerID_)));
          set_has_playerID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_att;
        break;
      }
      
      // optional .PB_EquipmentAtt att = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_male;
        break;
      }
      
      // optional bool male = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_male:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &male_)));
          set_has_male();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_map;
        break;
      }
      
      // optional int32 map = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equips;
        break;
      }
      
      // repeated .PB_EquipAsset equips = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_JoinRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }
  
  // optional .PB_FriendInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  // optional int32 power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->power(), output);
  }
  
  // optional bool noPower = 5;
  if (has_noPower()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->noPower(), output);
  }
  
  // optional int32 playerID = 6;
  if (has_playerID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playerID(), output);
  }
  
  // optional .PB_EquipmentAtt att = 7;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->att(), output);
  }
  
  // optional bool male = 8;
  if (has_male()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->male(), output);
  }
  
  // optional int32 map = 9;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->map(), output);
  }
  
  // repeated .PB_EquipAsset equips = 10;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_JoinRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }
  
  // optional .PB_FriendInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  // optional int32 power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->power(), target);
  }
  
  // optional bool noPower = 5;
  if (has_noPower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->noPower(), target);
  }
  
  // optional int32 playerID = 6;
  if (has_playerID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playerID(), target);
  }
  
  // optional .PB_EquipmentAtt att = 7;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->att(), target);
  }
  
  // optional bool male = 8;
  if (has_male()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->male(), target);
  }
  
  // optional int32 map = 9;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->map(), target);
  }
  
  // repeated .PB_EquipAsset equips = 10;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->equips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_JoinRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional .PB_FriendInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional int32 power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional bool noPower = 5;
    if (has_noPower()) {
      total_size += 1 + 1;
    }
    
    // optional int32 playerID = 6;
    if (has_playerID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerID());
    }
    
    // optional .PB_EquipmentAtt att = 7;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional bool male = 8;
    if (has_male()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 map = 9;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map());
    }
    
  }
  // repeated .PB_EquipAsset equips = 10;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_JoinRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_JoinRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_JoinRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_JoinRoom::MergeFrom(const NetProto_JoinRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_info()) {
      mutable_info()->::PB_FriendInfo::MergeFrom(from.info());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_noPower()) {
      set_noPower(from.noPower());
    }
    if (from.has_playerID()) {
      set_playerID(from.playerID());
    }
    if (from.has_att()) {
      mutable_att()->::PB_EquipmentAtt::MergeFrom(from.att());
    }
    if (from.has_male()) {
      set_male(from.male());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_map()) {
      set_map(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_JoinRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_JoinRoom::CopyFrom(const NetProto_JoinRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_JoinRoom::IsInitialized() const {
  
  return true;
}

void NetProto_JoinRoom::Swap(NetProto_JoinRoom* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(info_, other->info_);
    std::swap(power_, other->power_);
    std::swap(noPower_, other->noPower_);
    std::swap(playerID_, other->playerID_);
    std::swap(att_, other->att_);
    std::swap(male_, other->male_);
    std::swap(map_, other->map_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_JoinRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_JoinRoom_descriptor_;
  metadata.reflection = NetProto_JoinRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_LeaveRoom_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LeaveRoom_ID_descriptor_;
}
bool NetProto_LeaveRoom_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_LeaveRoom_ID NetProto_LeaveRoom::GROUPID;
const NetProto_LeaveRoom_ID NetProto_LeaveRoom::UNITID;
const NetProto_LeaveRoom_ID NetProto_LeaveRoom::ID_MIN;
const NetProto_LeaveRoom_ID NetProto_LeaveRoom::ID_MAX;
const int NetProto_LeaveRoom::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_LeaveRoom::kPosFieldNumber;
#endif  // !_MSC_VER

NetProto_LeaveRoom::NetProto_LeaveRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_LeaveRoom::InitAsDefaultInstance() {
}

NetProto_LeaveRoom::NetProto_LeaveRoom(const NetProto_LeaveRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_LeaveRoom::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_LeaveRoom::~NetProto_LeaveRoom() {
  SharedDtor();
}

void NetProto_LeaveRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_LeaveRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_LeaveRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LeaveRoom_descriptor_;
}

const NetProto_LeaveRoom& NetProto_LeaveRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_LeaveRoom* NetProto_LeaveRoom::default_instance_ = NULL;

NetProto_LeaveRoom* NetProto_LeaveRoom::New() const {
  return new NetProto_LeaveRoom;
}

void NetProto_LeaveRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_LeaveRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_LeaveRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_LeaveRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_LeaveRoom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_LeaveRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_LeaveRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_LeaveRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_LeaveRoom::MergeFrom(const NetProto_LeaveRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_LeaveRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_LeaveRoom::CopyFrom(const NetProto_LeaveRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_LeaveRoom::IsInitialized() const {
  
  return true;
}

void NetProto_LeaveRoom::Swap(NetProto_LeaveRoom* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_LeaveRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_LeaveRoom_descriptor_;
  metadata.reflection = NetProto_LeaveRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DestroyRoom_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DestroyRoom_ID_descriptor_;
}
bool NetProto_DestroyRoom_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DestroyRoom_ID NetProto_DestroyRoom::GROUPID;
const NetProto_DestroyRoom_ID NetProto_DestroyRoom::UNITID;
const NetProto_DestroyRoom_ID NetProto_DestroyRoom::ID_MIN;
const NetProto_DestroyRoom_ID NetProto_DestroyRoom::ID_MAX;
const int NetProto_DestroyRoom::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_DestroyRoom::NetProto_DestroyRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DestroyRoom::InitAsDefaultInstance() {
}

NetProto_DestroyRoom::NetProto_DestroyRoom(const NetProto_DestroyRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DestroyRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DestroyRoom::~NetProto_DestroyRoom() {
  SharedDtor();
}

void NetProto_DestroyRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DestroyRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DestroyRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DestroyRoom_descriptor_;
}

const NetProto_DestroyRoom& NetProto_DestroyRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DestroyRoom* NetProto_DestroyRoom::default_instance_ = NULL;

NetProto_DestroyRoom* NetProto_DestroyRoom::New() const {
  return new NetProto_DestroyRoom;
}

void NetProto_DestroyRoom::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DestroyRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_DestroyRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DestroyRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DestroyRoom::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DestroyRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DestroyRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DestroyRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DestroyRoom::MergeFrom(const NetProto_DestroyRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DestroyRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DestroyRoom::CopyFrom(const NetProto_DestroyRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DestroyRoom::IsInitialized() const {
  
  return true;
}

void NetProto_DestroyRoom::Swap(NetProto_DestroyRoom* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DestroyRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DestroyRoom_descriptor_;
  metadata.reflection = NetProto_DestroyRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RoomList_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RoomList_ID_descriptor_;
}
bool NetProto_RoomList_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RoomList_ID NetProto_RoomList::GROUPID;
const NetProto_RoomList_ID NetProto_RoomList::UNITID;
const NetProto_RoomList_ID NetProto_RoomList::ID_MIN;
const NetProto_RoomList_ID NetProto_RoomList::ID_MAX;
const int NetProto_RoomList::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RoomList::kRoomsFieldNumber;
#endif  // !_MSC_VER

NetProto_RoomList::NetProto_RoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RoomList::InitAsDefaultInstance() {
}

NetProto_RoomList::NetProto_RoomList(const NetProto_RoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RoomList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RoomList::~NetProto_RoomList() {
  SharedDtor();
}

void NetProto_RoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RoomList_descriptor_;
}

const NetProto_RoomList& NetProto_RoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RoomList* NetProto_RoomList::default_instance_ = NULL;

NetProto_RoomList* NetProto_RoomList::New() const {
  return new NetProto_RoomList;
}

void NetProto_RoomList::Clear() {
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RoomInfo rooms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RoomInfo rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RoomInfo rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RoomList::ByteSize() const {
  int total_size = 0;
  
  // repeated .RoomInfo rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RoomList::MergeFrom(const NetProto_RoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RoomList::CopyFrom(const NetProto_RoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RoomList::IsInitialized() const {
  
  return true;
}

void NetProto_RoomList::Swap(NetProto_RoomList* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RoomList_descriptor_;
  metadata.reflection = NetProto_RoomList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_EvictRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EvictRole_ID_descriptor_;
}
bool NetProto_EvictRole_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EvictRole_ID NetProto_EvictRole::GROUPID;
const NetProto_EvictRole_ID NetProto_EvictRole::UNITID;
const NetProto_EvictRole_ID NetProto_EvictRole::ID_MIN;
const NetProto_EvictRole_ID NetProto_EvictRole::ID_MAX;
const int NetProto_EvictRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_EvictRole::kPosFieldNumber;
#endif  // !_MSC_VER

NetProto_EvictRole::NetProto_EvictRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_EvictRole::InitAsDefaultInstance() {
}

NetProto_EvictRole::NetProto_EvictRole(const NetProto_EvictRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_EvictRole::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_EvictRole::~NetProto_EvictRole() {
  SharedDtor();
}

void NetProto_EvictRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_EvictRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_EvictRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EvictRole_descriptor_;
}

const NetProto_EvictRole& NetProto_EvictRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_EvictRole* NetProto_EvictRole::default_instance_ = NULL;

NetProto_EvictRole* NetProto_EvictRole::New() const {
  return new NetProto_EvictRole;
}

void NetProto_EvictRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_EvictRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_EvictRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_EvictRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_EvictRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_EvictRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_EvictRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_EvictRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_EvictRole::MergeFrom(const NetProto_EvictRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_EvictRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_EvictRole::CopyFrom(const NetProto_EvictRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_EvictRole::IsInitialized() const {
  
  return true;
}

void NetProto_EvictRole::Swap(NetProto_EvictRole* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_EvictRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_EvictRole_descriptor_;
  metadata.reflection = NetProto_EvictRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_InviteFriend_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_InviteFriend_ID_descriptor_;
}
bool NetProto_InviteFriend_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_InviteFriend_ID NetProto_InviteFriend::GROUPID;
const NetProto_InviteFriend_ID NetProto_InviteFriend::UNITID;
const NetProto_InviteFriend_ID NetProto_InviteFriend::ID_MIN;
const NetProto_InviteFriend_ID NetProto_InviteFriend::ID_MAX;
const int NetProto_InviteFriend::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_InviteFriend::kRoleIDFieldNumber;
const int NetProto_InviteFriend::kIdFieldNumber;
const int NetProto_InviteFriend::kSrcFieldNumber;
const int NetProto_InviteFriend::kMapFieldNumber;
const int NetProto_InviteFriend::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_InviteFriend::NetProto_InviteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_InviteFriend::InitAsDefaultInstance() {
}

NetProto_InviteFriend::NetProto_InviteFriend(const NetProto_InviteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_InviteFriend::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  id_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  map_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_InviteFriend::~NetProto_InviteFriend() {
  SharedDtor();
}

void NetProto_InviteFriend::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_InviteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_InviteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_InviteFriend_descriptor_;
}

const NetProto_InviteFriend& NetProto_InviteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_InviteFriend* NetProto_InviteFriend::default_instance_ = NULL;

NetProto_InviteFriend* NetProto_InviteFriend::New() const {
  return new NetProto_InviteFriend;
}

void NetProto_InviteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    id_ = 0;
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    map_ = 0;
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_InviteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_src;
        break;
      }
      
      // optional string src = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map;
        break;
      }
      
      // optional int32 map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_InviteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional string src = 3;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->src(), output);
  }
  
  // optional int32 map = 4;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map(), output);
  }
  
  // optional int32 flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_InviteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional string src = 3;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->src(), target);
  }
  
  // optional int32 map = 4;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map(), target);
  }
  
  // optional int32 flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_InviteFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string src = 3;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }
    
    // optional int32 map = 4;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map());
    }
    
    // optional int32 flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_InviteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_InviteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_InviteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_InviteFriend::MergeFrom(const NetProto_InviteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_InviteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_InviteFriend::CopyFrom(const NetProto_InviteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_InviteFriend::IsInitialized() const {
  
  return true;
}

void NetProto_InviteFriend::Swap(NetProto_InviteFriend* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(id_, other->id_);
    std::swap(src_, other->src_);
    std::swap(map_, other->map_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_InviteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_InviteFriend_descriptor_;
  metadata.reflection = NetProto_InviteFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BeginMultiRoom_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BeginMultiRoom_ID_descriptor_;
}
bool NetProto_BeginMultiRoom_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 41:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BeginMultiRoom_ID NetProto_BeginMultiRoom::GROUPID;
const NetProto_BeginMultiRoom_ID NetProto_BeginMultiRoom::UNITID;
const NetProto_BeginMultiRoom_ID NetProto_BeginMultiRoom::ID_MIN;
const NetProto_BeginMultiRoom_ID NetProto_BeginMultiRoom::ID_MAX;
const int NetProto_BeginMultiRoom::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_BeginMultiRoom::NetProto_BeginMultiRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BeginMultiRoom::InitAsDefaultInstance() {
}

NetProto_BeginMultiRoom::NetProto_BeginMultiRoom(const NetProto_BeginMultiRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BeginMultiRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BeginMultiRoom::~NetProto_BeginMultiRoom() {
  SharedDtor();
}

void NetProto_BeginMultiRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BeginMultiRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BeginMultiRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BeginMultiRoom_descriptor_;
}

const NetProto_BeginMultiRoom& NetProto_BeginMultiRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BeginMultiRoom* NetProto_BeginMultiRoom::default_instance_ = NULL;

NetProto_BeginMultiRoom* NetProto_BeginMultiRoom::New() const {
  return new NetProto_BeginMultiRoom;
}

void NetProto_BeginMultiRoom::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BeginMultiRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_BeginMultiRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BeginMultiRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BeginMultiRoom::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BeginMultiRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BeginMultiRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BeginMultiRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BeginMultiRoom::MergeFrom(const NetProto_BeginMultiRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BeginMultiRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BeginMultiRoom::CopyFrom(const NetProto_BeginMultiRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BeginMultiRoom::IsInitialized() const {
  
  return true;
}

void NetProto_BeginMultiRoom::Swap(NetProto_BeginMultiRoom* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BeginMultiRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BeginMultiRoom_descriptor_;
  metadata.reflection = NetProto_BeginMultiRoom_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ResetCheckPoint_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ResetCheckPoint_ID_descriptor_;
}
bool NetProto_ResetCheckPoint_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 42:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ResetCheckPoint_ID NetProto_ResetCheckPoint::GROUPID;
const NetProto_ResetCheckPoint_ID NetProto_ResetCheckPoint::UNITID;
const NetProto_ResetCheckPoint_ID NetProto_ResetCheckPoint::ID_MIN;
const NetProto_ResetCheckPoint_ID NetProto_ResetCheckPoint::ID_MAX;
const int NetProto_ResetCheckPoint::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_ResetCheckPoint::NetProto_ResetCheckPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ResetCheckPoint::InitAsDefaultInstance() {
}

NetProto_ResetCheckPoint::NetProto_ResetCheckPoint(const NetProto_ResetCheckPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ResetCheckPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ResetCheckPoint::~NetProto_ResetCheckPoint() {
  SharedDtor();
}

void NetProto_ResetCheckPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ResetCheckPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ResetCheckPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ResetCheckPoint_descriptor_;
}

const NetProto_ResetCheckPoint& NetProto_ResetCheckPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ResetCheckPoint* NetProto_ResetCheckPoint::default_instance_ = NULL;

NetProto_ResetCheckPoint* NetProto_ResetCheckPoint::New() const {
  return new NetProto_ResetCheckPoint;
}

void NetProto_ResetCheckPoint::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ResetCheckPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_ResetCheckPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ResetCheckPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ResetCheckPoint::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ResetCheckPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ResetCheckPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ResetCheckPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ResetCheckPoint::MergeFrom(const NetProto_ResetCheckPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ResetCheckPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ResetCheckPoint::CopyFrom(const NetProto_ResetCheckPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ResetCheckPoint::IsInitialized() const {
  
  return true;
}

void NetProto_ResetCheckPoint::Swap(NetProto_ResetCheckPoint* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ResetCheckPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ResetCheckPoint_descriptor_;
  metadata.reflection = NetProto_ResetCheckPoint_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GenPet_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenPet_ID_descriptor_;
}
bool NetProto_GenPet_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 43:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GenPet_ID NetProto_GenPet::GROUPID;
const NetProto_GenPet_ID NetProto_GenPet::UNITID;
const NetProto_GenPet_ID NetProto_GenPet::ID_MIN;
const NetProto_GenPet_ID NetProto_GenPet::ID_MAX;
const int NetProto_GenPet::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GenPet::kIdFieldNumber;
const int NetProto_GenPet::kPlayerFieldNumber;
#endif  // !_MSC_VER

NetProto_GenPet::NetProto_GenPet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GenPet::InitAsDefaultInstance() {
}

NetProto_GenPet::NetProto_GenPet(const NetProto_GenPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GenPet::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  player_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GenPet::~NetProto_GenPet() {
  SharedDtor();
}

void NetProto_GenPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GenPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GenPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenPet_descriptor_;
}

const NetProto_GenPet& NetProto_GenPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GenPet* NetProto_GenPet::default_instance_ = NULL;

NetProto_GenPet* NetProto_GenPet::New() const {
  return new NetProto_GenPet;
}

void NetProto_GenPet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    player_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GenPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player;
        break;
      }
      
      // optional int32 player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GenPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GenPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GenPet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GenPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GenPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GenPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GenPet::MergeFrom(const NetProto_GenPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_player()) {
      set_player(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GenPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GenPet::CopyFrom(const NetProto_GenPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GenPet::IsInitialized() const {
  
  return true;
}

void NetProto_GenPet::Swap(NetProto_GenPet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GenPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GenPet_descriptor_;
  metadata.reflection = NetProto_GenPet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_OpenObstacle_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_OpenObstacle_ID_descriptor_;
}
bool NetProto_OpenObstacle_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_OpenObstacle_ID NetProto_OpenObstacle::GROUPID;
const NetProto_OpenObstacle_ID NetProto_OpenObstacle::UNITID;
const NetProto_OpenObstacle_ID NetProto_OpenObstacle::ID_MIN;
const NetProto_OpenObstacle_ID NetProto_OpenObstacle::ID_MAX;
const int NetProto_OpenObstacle::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_OpenObstacle::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_OpenObstacle::NetProto_OpenObstacle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_OpenObstacle::InitAsDefaultInstance() {
}

NetProto_OpenObstacle::NetProto_OpenObstacle(const NetProto_OpenObstacle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_OpenObstacle::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_OpenObstacle::~NetProto_OpenObstacle() {
  SharedDtor();
}

void NetProto_OpenObstacle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_OpenObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_OpenObstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_OpenObstacle_descriptor_;
}

const NetProto_OpenObstacle& NetProto_OpenObstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_OpenObstacle* NetProto_OpenObstacle::default_instance_ = NULL;

NetProto_OpenObstacle* NetProto_OpenObstacle::New() const {
  return new NetProto_OpenObstacle;
}

void NetProto_OpenObstacle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_OpenObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_OpenObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_OpenObstacle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_OpenObstacle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_OpenObstacle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_OpenObstacle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_OpenObstacle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_OpenObstacle::MergeFrom(const NetProto_OpenObstacle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_OpenObstacle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_OpenObstacle::CopyFrom(const NetProto_OpenObstacle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_OpenObstacle::IsInitialized() const {
  
  return true;
}

void NetProto_OpenObstacle::Swap(NetProto_OpenObstacle* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_OpenObstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_OpenObstacle_descriptor_;
  metadata.reflection = NetProto_OpenObstacle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RegistDeviceServer_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RegistDeviceServer_ID_descriptor_;
}
bool NetProto_RegistDeviceServer_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 45:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RegistDeviceServer_ID NetProto_RegistDeviceServer::GROUPID;
const NetProto_RegistDeviceServer_ID NetProto_RegistDeviceServer::UNITID;
const NetProto_RegistDeviceServer_ID NetProto_RegistDeviceServer::ID_MIN;
const NetProto_RegistDeviceServer_ID NetProto_RegistDeviceServer::ID_MAX;
const int NetProto_RegistDeviceServer::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RegistDeviceServer::kDeviceIDFieldNumber;
const int NetProto_RegistDeviceServer::kIdfaFieldNumber;
#endif  // !_MSC_VER

NetProto_RegistDeviceServer::NetProto_RegistDeviceServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RegistDeviceServer::InitAsDefaultInstance() {
}

NetProto_RegistDeviceServer::NetProto_RegistDeviceServer(const NetProto_RegistDeviceServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RegistDeviceServer::SharedCtor() {
  _cached_size_ = 0;
  deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RegistDeviceServer::~NetProto_RegistDeviceServer() {
  SharedDtor();
}

void NetProto_RegistDeviceServer::SharedDtor() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceID_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_RegistDeviceServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RegistDeviceServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RegistDeviceServer_descriptor_;
}

const NetProto_RegistDeviceServer& NetProto_RegistDeviceServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RegistDeviceServer* NetProto_RegistDeviceServer::default_instance_ = NULL;

NetProto_RegistDeviceServer* NetProto_RegistDeviceServer::New() const {
  return new NetProto_RegistDeviceServer;
}

void NetProto_RegistDeviceServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deviceID()) {
      if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
        deviceID_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RegistDeviceServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceID()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceID().data(), this->deviceID().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_idfa;
        break;
      }
      
      // optional string idfa = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RegistDeviceServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string deviceID = 1;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->deviceID(), output);
  }
  
  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->idfa(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RegistDeviceServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string deviceID = 1;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceID(), target);
  }
  
  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->idfa(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RegistDeviceServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceID = 1;
    if (has_deviceID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceID());
    }
    
    // optional string idfa = 2;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RegistDeviceServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RegistDeviceServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RegistDeviceServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RegistDeviceServer::MergeFrom(const NetProto_RegistDeviceServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceID()) {
      set_deviceID(from.deviceID());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RegistDeviceServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RegistDeviceServer::CopyFrom(const NetProto_RegistDeviceServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RegistDeviceServer::IsInitialized() const {
  
  return true;
}

void NetProto_RegistDeviceServer::Swap(NetProto_RegistDeviceServer* other) {
  if (other != this) {
    std::swap(deviceID_, other->deviceID_);
    std::swap(idfa_, other->idfa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RegistDeviceServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RegistDeviceServer_descriptor_;
  metadata.reflection = NetProto_RegistDeviceServer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_StartLoad1_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StartLoad1_ID_descriptor_;
}
bool NetProto_StartLoad1_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 46:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StartLoad1_ID NetProto_StartLoad1::GROUPID;
const NetProto_StartLoad1_ID NetProto_StartLoad1::UNITID;
const NetProto_StartLoad1_ID NetProto_StartLoad1::ID_MIN;
const NetProto_StartLoad1_ID NetProto_StartLoad1::ID_MAX;
const int NetProto_StartLoad1::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_StartLoad1::kDeviceIDFieldNumber;
const int NetProto_StartLoad1::kIdfaFieldNumber;
#endif  // !_MSC_VER

NetProto_StartLoad1::NetProto_StartLoad1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_StartLoad1::InitAsDefaultInstance() {
}

NetProto_StartLoad1::NetProto_StartLoad1(const NetProto_StartLoad1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_StartLoad1::SharedCtor() {
  _cached_size_ = 0;
  deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_StartLoad1::~NetProto_StartLoad1() {
  SharedDtor();
}

void NetProto_StartLoad1::SharedDtor() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceID_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_StartLoad1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_StartLoad1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StartLoad1_descriptor_;
}

const NetProto_StartLoad1& NetProto_StartLoad1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_StartLoad1* NetProto_StartLoad1::default_instance_ = NULL;

NetProto_StartLoad1* NetProto_StartLoad1::New() const {
  return new NetProto_StartLoad1;
}

void NetProto_StartLoad1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deviceID()) {
      if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
        deviceID_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_StartLoad1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceID()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceID().data(), this->deviceID().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_idfa;
        break;
      }
      
      // optional string idfa = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_StartLoad1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string deviceID = 1;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->deviceID(), output);
  }
  
  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->idfa(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_StartLoad1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string deviceID = 1;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceID(), target);
  }
  
  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->idfa(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_StartLoad1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceID = 1;
    if (has_deviceID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceID());
    }
    
    // optional string idfa = 2;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_StartLoad1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_StartLoad1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_StartLoad1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_StartLoad1::MergeFrom(const NetProto_StartLoad1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceID()) {
      set_deviceID(from.deviceID());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_StartLoad1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_StartLoad1::CopyFrom(const NetProto_StartLoad1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_StartLoad1::IsInitialized() const {
  
  return true;
}

void NetProto_StartLoad1::Swap(NetProto_StartLoad1* other) {
  if (other != this) {
    std::swap(deviceID_, other->deviceID_);
    std::swap(idfa_, other->idfa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_StartLoad1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_StartLoad1_descriptor_;
  metadata.reflection = NetProto_StartLoad1_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_EndLoad1_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndLoad1_ID_descriptor_;
}
bool NetProto_EndLoad1_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 47:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EndLoad1_ID NetProto_EndLoad1::GROUPID;
const NetProto_EndLoad1_ID NetProto_EndLoad1::UNITID;
const NetProto_EndLoad1_ID NetProto_EndLoad1::ID_MIN;
const NetProto_EndLoad1_ID NetProto_EndLoad1::ID_MAX;
const int NetProto_EndLoad1::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_EndLoad1::kDeviceIDFieldNumber;
const int NetProto_EndLoad1::kIdfaFieldNumber;
#endif  // !_MSC_VER

NetProto_EndLoad1::NetProto_EndLoad1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_EndLoad1::InitAsDefaultInstance() {
}

NetProto_EndLoad1::NetProto_EndLoad1(const NetProto_EndLoad1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_EndLoad1::SharedCtor() {
  _cached_size_ = 0;
  deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_EndLoad1::~NetProto_EndLoad1() {
  SharedDtor();
}

void NetProto_EndLoad1::SharedDtor() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceID_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_EndLoad1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_EndLoad1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndLoad1_descriptor_;
}

const NetProto_EndLoad1& NetProto_EndLoad1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_EndLoad1* NetProto_EndLoad1::default_instance_ = NULL;

NetProto_EndLoad1* NetProto_EndLoad1::New() const {
  return new NetProto_EndLoad1;
}

void NetProto_EndLoad1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deviceID()) {
      if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
        deviceID_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_EndLoad1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceID()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceID().data(), this->deviceID().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_idfa;
        break;
      }
      
      // optional string idfa = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_EndLoad1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string deviceID = 1;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->deviceID(), output);
  }
  
  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->idfa(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_EndLoad1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string deviceID = 1;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceID(), target);
  }
  
  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->idfa(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_EndLoad1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceID = 1;
    if (has_deviceID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceID());
    }
    
    // optional string idfa = 2;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_EndLoad1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_EndLoad1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_EndLoad1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_EndLoad1::MergeFrom(const NetProto_EndLoad1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceID()) {
      set_deviceID(from.deviceID());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_EndLoad1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_EndLoad1::CopyFrom(const NetProto_EndLoad1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_EndLoad1::IsInitialized() const {
  
  return true;
}

void NetProto_EndLoad1::Swap(NetProto_EndLoad1* other) {
  if (other != this) {
    std::swap(deviceID_, other->deviceID_);
    std::swap(idfa_, other->idfa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_EndLoad1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_EndLoad1_descriptor_;
  metadata.reflection = NetProto_EndLoad1_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_StartLoad2_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StartLoad2_ID_descriptor_;
}
bool NetProto_StartLoad2_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 48:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StartLoad2_ID NetProto_StartLoad2::GROUPID;
const NetProto_StartLoad2_ID NetProto_StartLoad2::UNITID;
const NetProto_StartLoad2_ID NetProto_StartLoad2::ID_MIN;
const NetProto_StartLoad2_ID NetProto_StartLoad2::ID_MAX;
const int NetProto_StartLoad2::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_StartLoad2::NetProto_StartLoad2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_StartLoad2::InitAsDefaultInstance() {
}

NetProto_StartLoad2::NetProto_StartLoad2(const NetProto_StartLoad2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_StartLoad2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_StartLoad2::~NetProto_StartLoad2() {
  SharedDtor();
}

void NetProto_StartLoad2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_StartLoad2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_StartLoad2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StartLoad2_descriptor_;
}

const NetProto_StartLoad2& NetProto_StartLoad2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_StartLoad2* NetProto_StartLoad2::default_instance_ = NULL;

NetProto_StartLoad2* NetProto_StartLoad2::New() const {
  return new NetProto_StartLoad2;
}

void NetProto_StartLoad2::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_StartLoad2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_StartLoad2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_StartLoad2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_StartLoad2::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_StartLoad2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_StartLoad2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_StartLoad2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_StartLoad2::MergeFrom(const NetProto_StartLoad2& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_StartLoad2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_StartLoad2::CopyFrom(const NetProto_StartLoad2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_StartLoad2::IsInitialized() const {
  
  return true;
}

void NetProto_StartLoad2::Swap(NetProto_StartLoad2* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_StartLoad2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_StartLoad2_descriptor_;
  metadata.reflection = NetProto_StartLoad2_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_EndLoad2_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndLoad2_ID_descriptor_;
}
bool NetProto_EndLoad2_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 49:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EndLoad2_ID NetProto_EndLoad2::GROUPID;
const NetProto_EndLoad2_ID NetProto_EndLoad2::UNITID;
const NetProto_EndLoad2_ID NetProto_EndLoad2::ID_MIN;
const NetProto_EndLoad2_ID NetProto_EndLoad2::ID_MAX;
const int NetProto_EndLoad2::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_EndLoad2::NetProto_EndLoad2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_EndLoad2::InitAsDefaultInstance() {
}

NetProto_EndLoad2::NetProto_EndLoad2(const NetProto_EndLoad2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_EndLoad2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_EndLoad2::~NetProto_EndLoad2() {
  SharedDtor();
}

void NetProto_EndLoad2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_EndLoad2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_EndLoad2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EndLoad2_descriptor_;
}

const NetProto_EndLoad2& NetProto_EndLoad2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_EndLoad2* NetProto_EndLoad2::default_instance_ = NULL;

NetProto_EndLoad2* NetProto_EndLoad2::New() const {
  return new NetProto_EndLoad2;
}

void NetProto_EndLoad2::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_EndLoad2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_EndLoad2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_EndLoad2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_EndLoad2::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_EndLoad2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_EndLoad2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_EndLoad2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_EndLoad2::MergeFrom(const NetProto_EndLoad2& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_EndLoad2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_EndLoad2::CopyFrom(const NetProto_EndLoad2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_EndLoad2::IsInitialized() const {
  
  return true;
}

void NetProto_EndLoad2::Swap(NetProto_EndLoad2* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_EndLoad2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_EndLoad2_descriptor_;
  metadata.reflection = NetProto_EndLoad2_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BeginFighting_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BeginFighting_ID_descriptor_;
}
bool NetProto_BeginFighting_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BeginFighting_ID NetProto_BeginFighting::GROUPID;
const NetProto_BeginFighting_ID NetProto_BeginFighting::UNITID;
const NetProto_BeginFighting_ID NetProto_BeginFighting::ID_MIN;
const NetProto_BeginFighting_ID NetProto_BeginFighting::ID_MAX;
const int NetProto_BeginFighting::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_BeginFighting::NetProto_BeginFighting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BeginFighting::InitAsDefaultInstance() {
}

NetProto_BeginFighting::NetProto_BeginFighting(const NetProto_BeginFighting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BeginFighting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BeginFighting::~NetProto_BeginFighting() {
  SharedDtor();
}

void NetProto_BeginFighting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BeginFighting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BeginFighting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BeginFighting_descriptor_;
}

const NetProto_BeginFighting& NetProto_BeginFighting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BeginFighting* NetProto_BeginFighting::default_instance_ = NULL;

NetProto_BeginFighting* NetProto_BeginFighting::New() const {
  return new NetProto_BeginFighting;
}

void NetProto_BeginFighting::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BeginFighting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_BeginFighting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BeginFighting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BeginFighting::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BeginFighting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BeginFighting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BeginFighting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BeginFighting::MergeFrom(const NetProto_BeginFighting& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BeginFighting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BeginFighting::CopyFrom(const NetProto_BeginFighting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BeginFighting::IsInitialized() const {
  
  return true;
}

void NetProto_BeginFighting::Swap(NetProto_BeginFighting* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BeginFighting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BeginFighting_descriptor_;
  metadata.reflection = NetProto_BeginFighting_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DelNPCs_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelNPCs_ID_descriptor_;
}
bool NetProto_DelNPCs_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 51:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DelNPCs_ID NetProto_DelNPCs::GROUPID;
const NetProto_DelNPCs_ID NetProto_DelNPCs::UNITID;
const NetProto_DelNPCs_ID NetProto_DelNPCs::ID_MIN;
const NetProto_DelNPCs_ID NetProto_DelNPCs::ID_MAX;
const int NetProto_DelNPCs::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DelNPCs::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_DelNPCs::NetProto_DelNPCs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DelNPCs::InitAsDefaultInstance() {
}

NetProto_DelNPCs::NetProto_DelNPCs(const NetProto_DelNPCs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DelNPCs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DelNPCs::~NetProto_DelNPCs() {
  SharedDtor();
}

void NetProto_DelNPCs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DelNPCs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DelNPCs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelNPCs_descriptor_;
}

const NetProto_DelNPCs& NetProto_DelNPCs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DelNPCs* NetProto_DelNPCs::default_instance_ = NULL;

NetProto_DelNPCs* NetProto_DelNPCs::New() const {
  return new NetProto_DelNPCs;
}

void NetProto_DelNPCs::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DelNPCs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DelNPCs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DelNPCs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DelNPCs::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DelNPCs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DelNPCs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DelNPCs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DelNPCs::MergeFrom(const NetProto_DelNPCs& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DelNPCs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DelNPCs::CopyFrom(const NetProto_DelNPCs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DelNPCs::IsInitialized() const {
  
  return true;
}

void NetProto_DelNPCs::Swap(NetProto_DelNPCs* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DelNPCs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DelNPCs_descriptor_;
  metadata.reflection = NetProto_DelNPCs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_WorldBossCurRank_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_WorldBossCurRank_ID_descriptor_;
}
bool NetProto_WorldBossCurRank_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 52:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_WorldBossCurRank_ID NetProto_WorldBossCurRank::GROUPID;
const NetProto_WorldBossCurRank_ID NetProto_WorldBossCurRank::UNITID;
const NetProto_WorldBossCurRank_ID NetProto_WorldBossCurRank::ID_MIN;
const NetProto_WorldBossCurRank_ID NetProto_WorldBossCurRank::ID_MAX;
const int NetProto_WorldBossCurRank::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_WorldBossCurRank::kRankFieldNumber;
const int NetProto_WorldBossCurRank::kSelfFieldNumber;
const int NetProto_WorldBossCurRank::kSelfRankFieldNumber;
#endif  // !_MSC_VER

NetProto_WorldBossCurRank::NetProto_WorldBossCurRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_WorldBossCurRank::InitAsDefaultInstance() {
  self_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
}

NetProto_WorldBossCurRank::NetProto_WorldBossCurRank(const NetProto_WorldBossCurRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_WorldBossCurRank::SharedCtor() {
  _cached_size_ = 0;
  self_ = NULL;
  selfRank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_WorldBossCurRank::~NetProto_WorldBossCurRank() {
  SharedDtor();
}

void NetProto_WorldBossCurRank::SharedDtor() {
  if (this != default_instance_) {
    delete self_;
  }
}

void NetProto_WorldBossCurRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_WorldBossCurRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_WorldBossCurRank_descriptor_;
}

const NetProto_WorldBossCurRank& NetProto_WorldBossCurRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_WorldBossCurRank* NetProto_WorldBossCurRank::default_instance_ = NULL;

NetProto_WorldBossCurRank* NetProto_WorldBossCurRank::New() const {
  return new NetProto_WorldBossCurRank;
}

void NetProto_WorldBossCurRank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_self()) {
      if (self_ != NULL) self_->::RecordInfo::Clear();
    }
    selfRank_ = 0;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_WorldBossCurRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RecordInfo rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank;
        if (input->ExpectTag(18)) goto parse_self;
        break;
      }
      
      // optional .RecordInfo self = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selfRank;
        break;
      }
      
      // optional int32 selfRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfRank_)));
          set_has_selfRank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_WorldBossCurRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RecordInfo rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(i), output);
  }
  
  // optional .RecordInfo self = 2;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self(), output);
  }
  
  // optional int32 selfRank = 3;
  if (has_selfRank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfRank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_WorldBossCurRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RecordInfo rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(i), target);
  }
  
  // optional .RecordInfo self = 2;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self(), target);
  }
  
  // optional int32 selfRank = 3;
  if (has_selfRank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfRank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_WorldBossCurRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .RecordInfo self = 2;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }
    
    // optional int32 selfRank = 3;
    if (has_selfRank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfRank());
    }
    
  }
  // repeated .RecordInfo rank = 1;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_WorldBossCurRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_WorldBossCurRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_WorldBossCurRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_WorldBossCurRank::MergeFrom(const NetProto_WorldBossCurRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self()) {
      mutable_self()->::RecordInfo::MergeFrom(from.self());
    }
    if (from.has_selfRank()) {
      set_selfRank(from.selfRank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_WorldBossCurRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_WorldBossCurRank::CopyFrom(const NetProto_WorldBossCurRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_WorldBossCurRank::IsInitialized() const {
  
  return true;
}

void NetProto_WorldBossCurRank::Swap(NetProto_WorldBossCurRank* other) {
  if (other != this) {
    rank_.Swap(&other->rank_);
    std::swap(self_, other->self_);
    std::swap(selfRank_, other->selfRank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_WorldBossCurRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_WorldBossCurRank_descriptor_;
  metadata.reflection = NetProto_WorldBossCurRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionWarCurRank_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionWarCurRank_ID_descriptor_;
}
bool NetProto_FactionWarCurRank_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 53:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionWarCurRank_ID NetProto_FactionWarCurRank::GROUPID;
const NetProto_FactionWarCurRank_ID NetProto_FactionWarCurRank::UNITID;
const NetProto_FactionWarCurRank_ID NetProto_FactionWarCurRank::ID_MIN;
const NetProto_FactionWarCurRank_ID NetProto_FactionWarCurRank::ID_MAX;
const int NetProto_FactionWarCurRank::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionWarCurRank::kRankFieldNumber;
const int NetProto_FactionWarCurRank::kSelfFieldNumber;
const int NetProto_FactionWarCurRank::kSelfRankFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionWarCurRank::NetProto_FactionWarCurRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionWarCurRank::InitAsDefaultInstance() {
  self_ = const_cast< ::RecordInfo*>(&::RecordInfo::default_instance());
}

NetProto_FactionWarCurRank::NetProto_FactionWarCurRank(const NetProto_FactionWarCurRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionWarCurRank::SharedCtor() {
  _cached_size_ = 0;
  self_ = NULL;
  selfRank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionWarCurRank::~NetProto_FactionWarCurRank() {
  SharedDtor();
}

void NetProto_FactionWarCurRank::SharedDtor() {
  if (this != default_instance_) {
    delete self_;
  }
}

void NetProto_FactionWarCurRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionWarCurRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionWarCurRank_descriptor_;
}

const NetProto_FactionWarCurRank& NetProto_FactionWarCurRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionWarCurRank* NetProto_FactionWarCurRank::default_instance_ = NULL;

NetProto_FactionWarCurRank* NetProto_FactionWarCurRank::New() const {
  return new NetProto_FactionWarCurRank;
}

void NetProto_FactionWarCurRank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_self()) {
      if (self_ != NULL) self_->::RecordInfo::Clear();
    }
    selfRank_ = 0;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionWarCurRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RecordInfo rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank;
        if (input->ExpectTag(18)) goto parse_self;
        break;
      }
      
      // optional .RecordInfo self = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selfRank;
        break;
      }
      
      // optional int32 selfRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfRank_)));
          set_has_selfRank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionWarCurRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RecordInfo rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(i), output);
  }
  
  // optional .RecordInfo self = 2;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->self(), output);
  }
  
  // optional int32 selfRank = 3;
  if (has_selfRank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfRank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionWarCurRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RecordInfo rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(i), target);
  }
  
  // optional .RecordInfo self = 2;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->self(), target);
  }
  
  // optional int32 selfRank = 3;
  if (has_selfRank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfRank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionWarCurRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .RecordInfo self = 2;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }
    
    // optional int32 selfRank = 3;
    if (has_selfRank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfRank());
    }
    
  }
  // repeated .RecordInfo rank = 1;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionWarCurRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionWarCurRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionWarCurRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionWarCurRank::MergeFrom(const NetProto_FactionWarCurRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_self()) {
      mutable_self()->::RecordInfo::MergeFrom(from.self());
    }
    if (from.has_selfRank()) {
      set_selfRank(from.selfRank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionWarCurRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionWarCurRank::CopyFrom(const NetProto_FactionWarCurRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionWarCurRank::IsInitialized() const {
  
  return true;
}

void NetProto_FactionWarCurRank::Swap(NetProto_FactionWarCurRank* other) {
  if (other != this) {
    rank_.Swap(&other->rank_);
    std::swap(self_, other->self_);
    std::swap(selfRank_, other->selfRank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionWarCurRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionWarCurRank_descriptor_;
  metadata.reflection = NetProto_FactionWarCurRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionWarPrevWinner_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionWarPrevWinner_ID_descriptor_;
}
bool NetProto_FactionWarPrevWinner_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionWarPrevWinner_ID NetProto_FactionWarPrevWinner::GROUPID;
const NetProto_FactionWarPrevWinner_ID NetProto_FactionWarPrevWinner::UNITID;
const NetProto_FactionWarPrevWinner_ID NetProto_FactionWarPrevWinner::ID_MIN;
const NetProto_FactionWarPrevWinner_ID NetProto_FactionWarPrevWinner::ID_MAX;
const int NetProto_FactionWarPrevWinner::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionWarPrevWinner::kNameFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionWarPrevWinner::NetProto_FactionWarPrevWinner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionWarPrevWinner::InitAsDefaultInstance() {
}

NetProto_FactionWarPrevWinner::NetProto_FactionWarPrevWinner(const NetProto_FactionWarPrevWinner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionWarPrevWinner::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionWarPrevWinner::~NetProto_FactionWarPrevWinner() {
  SharedDtor();
}

void NetProto_FactionWarPrevWinner::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_FactionWarPrevWinner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionWarPrevWinner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionWarPrevWinner_descriptor_;
}

const NetProto_FactionWarPrevWinner& NetProto_FactionWarPrevWinner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionWarPrevWinner* NetProto_FactionWarPrevWinner::default_instance_ = NULL;

NetProto_FactionWarPrevWinner* NetProto_FactionWarPrevWinner::New() const {
  return new NetProto_FactionWarPrevWinner;
}

void NetProto_FactionWarPrevWinner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionWarPrevWinner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionWarPrevWinner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionWarPrevWinner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionWarPrevWinner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionWarPrevWinner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionWarPrevWinner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionWarPrevWinner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionWarPrevWinner::MergeFrom(const NetProto_FactionWarPrevWinner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionWarPrevWinner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionWarPrevWinner::CopyFrom(const NetProto_FactionWarPrevWinner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionWarPrevWinner::IsInitialized() const {
  
  return true;
}

void NetProto_FactionWarPrevWinner::Swap(NetProto_FactionWarPrevWinner* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionWarPrevWinner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionWarPrevWinner_descriptor_;
  metadata.reflection = NetProto_FactionWarPrevWinner_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GetMonthCardAward_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetMonthCardAward_ID_descriptor_;
}
bool NetProto_GetMonthCardAward_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 55:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GetMonthCardAward_ID NetProto_GetMonthCardAward::GROUPID;
const NetProto_GetMonthCardAward_ID NetProto_GetMonthCardAward::UNITID;
const NetProto_GetMonthCardAward_ID NetProto_GetMonthCardAward::ID_MIN;
const NetProto_GetMonthCardAward_ID NetProto_GetMonthCardAward::ID_MAX;
const int NetProto_GetMonthCardAward::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_GetMonthCardAward::NetProto_GetMonthCardAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GetMonthCardAward::InitAsDefaultInstance() {
}

NetProto_GetMonthCardAward::NetProto_GetMonthCardAward(const NetProto_GetMonthCardAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GetMonthCardAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GetMonthCardAward::~NetProto_GetMonthCardAward() {
  SharedDtor();
}

void NetProto_GetMonthCardAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GetMonthCardAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GetMonthCardAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetMonthCardAward_descriptor_;
}

const NetProto_GetMonthCardAward& NetProto_GetMonthCardAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GetMonthCardAward* NetProto_GetMonthCardAward::default_instance_ = NULL;

NetProto_GetMonthCardAward* NetProto_GetMonthCardAward::New() const {
  return new NetProto_GetMonthCardAward;
}

void NetProto_GetMonthCardAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GetMonthCardAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_GetMonthCardAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GetMonthCardAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GetMonthCardAward::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GetMonthCardAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GetMonthCardAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GetMonthCardAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GetMonthCardAward::MergeFrom(const NetProto_GetMonthCardAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GetMonthCardAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GetMonthCardAward::CopyFrom(const NetProto_GetMonthCardAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GetMonthCardAward::IsInitialized() const {
  
  return true;
}

void NetProto_GetMonthCardAward::Swap(NetProto_GetMonthCardAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GetMonthCardAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GetMonthCardAward_descriptor_;
  metadata.reflection = NetProto_GetMonthCardAward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ExchangeGoods_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ExchangeGoods_ID_descriptor_;
}
bool NetProto_ExchangeGoods_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 56:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ExchangeGoods_ID NetProto_ExchangeGoods::GROUPID;
const NetProto_ExchangeGoods_ID NetProto_ExchangeGoods::UNITID;
const NetProto_ExchangeGoods_ID NetProto_ExchangeGoods::ID_MIN;
const NetProto_ExchangeGoods_ID NetProto_ExchangeGoods::ID_MAX;
const int NetProto_ExchangeGoods::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ExchangeGoods::kIndexFieldNumber;
const int NetProto_ExchangeGoods::kAllFieldNumber;
#endif  // !_MSC_VER

NetProto_ExchangeGoods::NetProto_ExchangeGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ExchangeGoods::InitAsDefaultInstance() {
}

NetProto_ExchangeGoods::NetProto_ExchangeGoods(const NetProto_ExchangeGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ExchangeGoods::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  all_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ExchangeGoods::~NetProto_ExchangeGoods() {
  SharedDtor();
}

void NetProto_ExchangeGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ExchangeGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ExchangeGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ExchangeGoods_descriptor_;
}

const NetProto_ExchangeGoods& NetProto_ExchangeGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ExchangeGoods* NetProto_ExchangeGoods::default_instance_ = NULL;

NetProto_ExchangeGoods* NetProto_ExchangeGoods::New() const {
  return new NetProto_ExchangeGoods;
}

void NetProto_ExchangeGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    all_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ExchangeGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all;
        break;
      }
      
      // optional bool all = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
          set_has_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ExchangeGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional bool all = 2;
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->all(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ExchangeGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional bool all = 2;
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->all(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ExchangeGoods::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional bool all = 2;
    if (has_all()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ExchangeGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ExchangeGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ExchangeGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ExchangeGoods::MergeFrom(const NetProto_ExchangeGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_all()) {
      set_all(from.all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ExchangeGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ExchangeGoods::CopyFrom(const NetProto_ExchangeGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ExchangeGoods::IsInitialized() const {
  
  return true;
}

void NetProto_ExchangeGoods::Swap(NetProto_ExchangeGoods* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(all_, other->all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ExchangeGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ExchangeGoods_descriptor_;
  metadata.reflection = NetProto_ExchangeGoods_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BuyMonthCard_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyMonthCard_ID_descriptor_;
}
bool NetProto_BuyMonthCard_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 57:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BuyMonthCard_ID NetProto_BuyMonthCard::GROUPID;
const NetProto_BuyMonthCard_ID NetProto_BuyMonthCard::UNITID;
const NetProto_BuyMonthCard_ID NetProto_BuyMonthCard::ID_MIN;
const NetProto_BuyMonthCard_ID NetProto_BuyMonthCard::ID_MAX;
const int NetProto_BuyMonthCard::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BuyMonthCard::kExpireFieldNumber;
#endif  // !_MSC_VER

NetProto_BuyMonthCard::NetProto_BuyMonthCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BuyMonthCard::InitAsDefaultInstance() {
}

NetProto_BuyMonthCard::NetProto_BuyMonthCard(const NetProto_BuyMonthCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BuyMonthCard::SharedCtor() {
  _cached_size_ = 0;
  expire_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BuyMonthCard::~NetProto_BuyMonthCard() {
  SharedDtor();
}

void NetProto_BuyMonthCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BuyMonthCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BuyMonthCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyMonthCard_descriptor_;
}

const NetProto_BuyMonthCard& NetProto_BuyMonthCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BuyMonthCard* NetProto_BuyMonthCard::default_instance_ = NULL;

NetProto_BuyMonthCard* NetProto_BuyMonthCard::New() const {
  return new NetProto_BuyMonthCard;
}

void NetProto_BuyMonthCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expire_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BuyMonthCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 expire = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_)));
          set_has_expire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BuyMonthCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 expire = 1;
  if (has_expire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->expire(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BuyMonthCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 expire = 1;
  if (has_expire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->expire(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BuyMonthCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 expire = 1;
    if (has_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BuyMonthCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BuyMonthCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BuyMonthCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BuyMonthCard::MergeFrom(const NetProto_BuyMonthCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expire()) {
      set_expire(from.expire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BuyMonthCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BuyMonthCard::CopyFrom(const NetProto_BuyMonthCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BuyMonthCard::IsInitialized() const {
  
  return true;
}

void NetProto_BuyMonthCard::Swap(NetProto_BuyMonthCard* other) {
  if (other != this) {
    std::swap(expire_, other->expire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BuyMonthCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BuyMonthCard_descriptor_;
  metadata.reflection = NetProto_BuyMonthCard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UseLuckyCard_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UseLuckyCard_ID_descriptor_;
}
bool NetProto_UseLuckyCard_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 58:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UseLuckyCard_ID NetProto_UseLuckyCard::GROUPID;
const NetProto_UseLuckyCard_ID NetProto_UseLuckyCard::UNITID;
const NetProto_UseLuckyCard_ID NetProto_UseLuckyCard::ID_MIN;
const NetProto_UseLuckyCard_ID NetProto_UseLuckyCard::ID_MAX;
const int NetProto_UseLuckyCard::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_UseLuckyCard::NetProto_UseLuckyCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UseLuckyCard::InitAsDefaultInstance() {
}

NetProto_UseLuckyCard::NetProto_UseLuckyCard(const NetProto_UseLuckyCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UseLuckyCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UseLuckyCard::~NetProto_UseLuckyCard() {
  SharedDtor();
}

void NetProto_UseLuckyCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UseLuckyCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UseLuckyCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UseLuckyCard_descriptor_;
}

const NetProto_UseLuckyCard& NetProto_UseLuckyCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UseLuckyCard* NetProto_UseLuckyCard::default_instance_ = NULL;

NetProto_UseLuckyCard* NetProto_UseLuckyCard::New() const {
  return new NetProto_UseLuckyCard;
}

void NetProto_UseLuckyCard::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UseLuckyCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_UseLuckyCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UseLuckyCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UseLuckyCard::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UseLuckyCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UseLuckyCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UseLuckyCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UseLuckyCard::MergeFrom(const NetProto_UseLuckyCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UseLuckyCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UseLuckyCard::CopyFrom(const NetProto_UseLuckyCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UseLuckyCard::IsInitialized() const {
  
  return true;
}

void NetProto_UseLuckyCard::Swap(NetProto_UseLuckyCard* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UseLuckyCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UseLuckyCard_descriptor_;
  metadata.reflection = NetProto_UseLuckyCard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BIActive_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BIActive_ID_descriptor_;
}
bool NetProto_BIActive_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 59:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BIActive_ID NetProto_BIActive::GROUPID;
const NetProto_BIActive_ID NetProto_BIActive::UNITID;
const NetProto_BIActive_ID NetProto_BIActive::ID_MIN;
const NetProto_BIActive_ID NetProto_BIActive::ID_MAX;
const int NetProto_BIActive::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BIActive::kDeviceIDFieldNumber;
const int NetProto_BIActive::kIdfaFieldNumber;
#endif  // !_MSC_VER

NetProto_BIActive::NetProto_BIActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BIActive::InitAsDefaultInstance() {
}

NetProto_BIActive::NetProto_BIActive(const NetProto_BIActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BIActive::SharedCtor() {
  _cached_size_ = 0;
  deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BIActive::~NetProto_BIActive() {
  SharedDtor();
}

void NetProto_BIActive::SharedDtor() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceID_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_BIActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BIActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BIActive_descriptor_;
}

const NetProto_BIActive& NetProto_BIActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BIActive* NetProto_BIActive::default_instance_ = NULL;

NetProto_BIActive* NetProto_BIActive::New() const {
  return new NetProto_BIActive;
}

void NetProto_BIActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deviceID()) {
      if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
        deviceID_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BIActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceID()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceID().data(), this->deviceID().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_idfa;
        break;
      }
      
      // optional string idfa = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BIActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string deviceID = 1;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->deviceID(), output);
  }
  
  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->idfa(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BIActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string deviceID = 1;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceID().data(), this->deviceID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceID(), target);
  }
  
  // optional string idfa = 2;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->idfa(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BIActive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deviceID = 1;
    if (has_deviceID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceID());
    }
    
    // optional string idfa = 2;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BIActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BIActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BIActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BIActive::MergeFrom(const NetProto_BIActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceID()) {
      set_deviceID(from.deviceID());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BIActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BIActive::CopyFrom(const NetProto_BIActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BIActive::IsInitialized() const {
  
  return true;
}

void NetProto_BIActive::Swap(NetProto_BIActive* other) {
  if (other != this) {
    std::swap(deviceID_, other->deviceID_);
    std::swap(idfa_, other->idfa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BIActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BIActive_descriptor_;
  metadata.reflection = NetProto_BIActive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Move_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Move_ID_descriptor_;
}
bool NetProto_Move_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Move_ID NetProto_Move::GROUPID;
const NetProto_Move_ID NetProto_Move::UNITID;
const NetProto_Move_ID NetProto_Move::ID_MIN;
const NetProto_Move_ID NetProto_Move::ID_MAX;
const int NetProto_Move::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Move_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Move_Type_descriptor_;
}
bool NetProto_Move_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Move_Type NetProto_Move::PLAYER;
const NetProto_Move_Type NetProto_Move::NPC;
const NetProto_Move_Type NetProto_Move::Type_MIN;
const NetProto_Move_Type NetProto_Move::Type_MAX;
const int NetProto_Move::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Move::kTypeFieldNumber;
const int NetProto_Move::kIdFieldNumber;
const int NetProto_Move::kStartFieldNumber;
const int NetProto_Move::kEndFieldNumber;
const int NetProto_Move::kSerialNumFieldNumber;
#endif  // !_MSC_VER

NetProto_Move::NetProto_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Move::InitAsDefaultInstance() {
  start_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
  end_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

NetProto_Move::NetProto_Move(const NetProto_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Move::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  start_ = NULL;
  end_ = NULL;
  serialNum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Move::~NetProto_Move() {
  SharedDtor();
}

void NetProto_Move::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void NetProto_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Move_descriptor_;
}

const NetProto_Move& NetProto_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Move* NetProto_Move::default_instance_ = NULL;

NetProto_Move* NetProto_Move::New() const {
  return new NetProto_Move;
}

void NetProto_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    if (has_start()) {
      if (start_ != NULL) start_->::PB_Vector3f::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::PB_Vector3f::Clear();
    }
    serialNum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Move.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Move_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Move_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start;
        break;
      }
      
      // optional .PB_Vector3f start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_end;
        break;
      }
      
      // optional .PB_Vector3f end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serialNum;
        break;
      }
      
      // optional int32 serialNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serialNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialNum_)));
          set_has_serialNum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Move.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional .PB_Vector3f start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->start(), output);
  }
  
  // optional .PB_Vector3f end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->end(), output);
  }
  
  // optional int32 serialNum = 5;
  if (has_serialNum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->serialNum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Move.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional .PB_Vector3f start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->start(), target);
  }
  
  // optional .PB_Vector3f end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->end(), target);
  }
  
  // optional int32 serialNum = 5;
  if (has_serialNum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->serialNum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Move::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Move.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PB_Vector3f start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }
    
    // optional .PB_Vector3f end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }
    
    // optional int32 serialNum = 5;
    if (has_serialNum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialNum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Move::MergeFrom(const NetProto_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start()) {
      mutable_start()->::PB_Vector3f::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::PB_Vector3f::MergeFrom(from.end());
    }
    if (from.has_serialNum()) {
      set_serialNum(from.serialNum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Move::CopyFrom(const NetProto_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Move::IsInitialized() const {
  
  return true;
}

void NetProto_Move::Swap(NetProto_Move* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(serialNum_, other->serialNum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Move_descriptor_;
  metadata.reflection = NetProto_Move_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Wear_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Wear_ID_descriptor_;
}
bool NetProto_Wear_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Wear_ID NetProto_Wear::GROUPID;
const NetProto_Wear_ID NetProto_Wear::UNITID;
const NetProto_Wear_ID NetProto_Wear::ID_MIN;
const NetProto_Wear_ID NetProto_Wear::ID_MAX;
const int NetProto_Wear::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Wear::kIdFieldNumber;
const int NetProto_Wear::kEquipmentFieldNumber;
#endif  // !_MSC_VER

NetProto_Wear::NetProto_Wear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Wear::InitAsDefaultInstance() {
}

NetProto_Wear::NetProto_Wear(const NetProto_Wear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Wear::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  equipment_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Wear::~NetProto_Wear() {
  SharedDtor();
}

void NetProto_Wear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Wear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Wear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Wear_descriptor_;
}

const NetProto_Wear& NetProto_Wear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Wear* NetProto_Wear::default_instance_ = NULL;

NetProto_Wear* NetProto_Wear::New() const {
  return new NetProto_Wear;
}

void NetProto_Wear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    equipment_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Wear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipment;
        break;
      }
      
      // optional int64 equipment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipment_)));
          set_has_equipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Wear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int64 equipment = 2;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equipment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Wear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int64 equipment = 2;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equipment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Wear::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int64 equipment = 2;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equipment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Wear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Wear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Wear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Wear::MergeFrom(const NetProto_Wear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_equipment()) {
      set_equipment(from.equipment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Wear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Wear::CopyFrom(const NetProto_Wear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Wear::IsInitialized() const {
  
  return true;
}

void NetProto_Wear::Swap(NetProto_Wear* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(equipment_, other->equipment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Wear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Wear_descriptor_;
  metadata.reflection = NetProto_Wear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Unwear_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Unwear_ID_descriptor_;
}
bool NetProto_Unwear_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Unwear_ID NetProto_Unwear::GROUPID;
const NetProto_Unwear_ID NetProto_Unwear::UNITID;
const NetProto_Unwear_ID NetProto_Unwear::ID_MIN;
const NetProto_Unwear_ID NetProto_Unwear::ID_MAX;
const int NetProto_Unwear::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Unwear::kIdFieldNumber;
const int NetProto_Unwear::kPosFieldNumber;
#endif  // !_MSC_VER

NetProto_Unwear::NetProto_Unwear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Unwear::InitAsDefaultInstance() {
}

NetProto_Unwear::NetProto_Unwear(const NetProto_Unwear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Unwear::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Unwear::~NetProto_Unwear() {
  SharedDtor();
}

void NetProto_Unwear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Unwear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Unwear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Unwear_descriptor_;
}

const NetProto_Unwear& NetProto_Unwear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Unwear* NetProto_Unwear::default_instance_ = NULL;

NetProto_Unwear* NetProto_Unwear::New() const {
  return new NetProto_Unwear;
}

void NetProto_Unwear::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Unwear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // optional .EquipmentInfo.Type pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EquipmentInfo_Type_IsValid(value)) {
            set_pos(static_cast< ::EquipmentInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Unwear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .EquipmentInfo.Type pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Unwear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .EquipmentInfo.Type pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Unwear::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .EquipmentInfo.Type pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Unwear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Unwear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Unwear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Unwear::MergeFrom(const NetProto_Unwear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Unwear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Unwear::CopyFrom(const NetProto_Unwear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Unwear::IsInitialized() const {
  
  return true;
}

void NetProto_Unwear::Swap(NetProto_Unwear* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Unwear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Unwear_descriptor_;
  metadata.reflection = NetProto_Unwear_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Attack_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Attack_ID_descriptor_;
}
bool NetProto_Attack_ID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Attack_ID NetProto_Attack::GROUPID;
const NetProto_Attack_ID NetProto_Attack::UNITID;
const NetProto_Attack_ID NetProto_Attack::ID_MIN;
const NetProto_Attack_ID NetProto_Attack::ID_MAX;
const int NetProto_Attack::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Attack_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Attack_Type_descriptor_;
}
bool NetProto_Attack_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Attack_Type NetProto_Attack::PLAYER;
const NetProto_Attack_Type NetProto_Attack::NPC;
const NetProto_Attack_Type NetProto_Attack::Type_MIN;
const NetProto_Attack_Type NetProto_Attack::Type_MAX;
const int NetProto_Attack::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Attack::kATypeFieldNumber;
const int NetProto_Attack::kAIDFieldNumber;
const int NetProto_Attack::kASkillFieldNumber;
const int NetProto_Attack::kDTypeFieldNumber;
const int NetProto_Attack::kDIDFieldNumber;
const int NetProto_Attack::kTPosFieldNumber;
const int NetProto_Attack::kSkillsFieldNumber;
const int NetProto_Attack::kServerTimeFieldNumber;
#endif  // !_MSC_VER

NetProto_Attack::NetProto_Attack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Attack::InitAsDefaultInstance() {
  aSkill_ = const_cast< ::PB_Skill*>(&::PB_Skill::default_instance());
  tPos_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

NetProto_Attack::NetProto_Attack(const NetProto_Attack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Attack::SharedCtor() {
  _cached_size_ = 0;
  aType_ = 0;
  aID_ = 0;
  aSkill_ = NULL;
  dType_ = 0;
  dID_ = 0;
  tPos_ = NULL;
  serverTime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Attack::~NetProto_Attack() {
  SharedDtor();
}

void NetProto_Attack::SharedDtor() {
  if (this != default_instance_) {
    delete aSkill_;
    delete tPos_;
  }
}

void NetProto_Attack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Attack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Attack_descriptor_;
}

const NetProto_Attack& NetProto_Attack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Attack* NetProto_Attack::default_instance_ = NULL;

NetProto_Attack* NetProto_Attack::New() const {
  return new NetProto_Attack;
}

void NetProto_Attack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aType_ = 0;
    aID_ = 0;
    if (has_aSkill()) {
      if (aSkill_ != NULL) aSkill_->::PB_Skill::Clear();
    }
    dType_ = 0;
    dID_ = 0;
    if (has_tPos()) {
      if (tPos_ != NULL) tPos_->::PB_Vector3f::Clear();
    }
    serverTime_ = GOOGLE_LONGLONG(0);
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Attack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Attack.Type aType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Attack_Type_IsValid(value)) {
            set_aType(static_cast< ::NetProto_Attack_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_aID;
        break;
      }
      
      // optional int32 aID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aID_)));
          set_has_aID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_aSkill;
        break;
      }
      
      // optional .PB_Skill aSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aSkill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dType;
        break;
      }
      
      // optional .NetProto_Attack.Type dType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Attack_Type_IsValid(value)) {
            set_dType(static_cast< ::NetProto_Attack_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dID;
        break;
      }
      
      // optional int32 dID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dID_)));
          set_has_dID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tPos;
        break;
      }
      
      // optional .PB_Vector3f tPos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tPos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skills;
        break;
      }
      
      // repeated int32 skills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_skills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skills;
        if (input->ExpectTag(64)) goto parse_serverTime;
        break;
      }
      
      // optional int64 serverTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverTime_)));
          set_has_serverTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Attack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Attack.Type aType = 1;
  if (has_aType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->aType(), output);
  }
  
  // optional int32 aID = 2;
  if (has_aID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->aID(), output);
  }
  
  // optional .PB_Skill aSkill = 3;
  if (has_aSkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->aSkill(), output);
  }
  
  // optional .NetProto_Attack.Type dType = 4;
  if (has_dType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->dType(), output);
  }
  
  // optional int32 dID = 5;
  if (has_dID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dID(), output);
  }
  
  // optional .PB_Vector3f tPos = 6;
  if (has_tPos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tPos(), output);
  }
  
  // repeated int32 skills = 7;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->skills(i), output);
  }
  
  // optional int64 serverTime = 8;
  if (has_serverTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->serverTime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Attack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Attack.Type aType = 1;
  if (has_aType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->aType(), target);
  }
  
  // optional int32 aID = 2;
  if (has_aID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->aID(), target);
  }
  
  // optional .PB_Skill aSkill = 3;
  if (has_aSkill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->aSkill(), target);
  }
  
  // optional .NetProto_Attack.Type dType = 4;
  if (has_dType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->dType(), target);
  }
  
  // optional int32 dID = 5;
  if (has_dID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dID(), target);
  }
  
  // optional .PB_Vector3f tPos = 6;
  if (has_tPos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tPos(), target);
  }
  
  // repeated int32 skills = 7;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->skills(i), target);
  }
  
  // optional int64 serverTime = 8;
  if (has_serverTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->serverTime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Attack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Attack.Type aType = 1;
    if (has_aType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aType());
    }
    
    // optional int32 aID = 2;
    if (has_aID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aID());
    }
    
    // optional .PB_Skill aSkill = 3;
    if (has_aSkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aSkill());
    }
    
    // optional .NetProto_Attack.Type dType = 4;
    if (has_dType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dType());
    }
    
    // optional int32 dID = 5;
    if (has_dID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dID());
    }
    
    // optional .PB_Vector3f tPos = 6;
    if (has_tPos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tPos());
    }
    
    // optional int64 serverTime = 8;
    if (has_serverTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverTime());
    }
    
  }
  // repeated int32 skills = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->skills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skills(i));
    }
    total_size += 1 * this->skills_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Attack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Attack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Attack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Attack::MergeFrom(const NetProto_Attack& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aType()) {
      set_aType(from.aType());
    }
    if (from.has_aID()) {
      set_aID(from.aID());
    }
    if (from.has_aSkill()) {
      mutable_aSkill()->::PB_Skill::MergeFrom(from.aSkill());
    }
    if (from.has_dType()) {
      set_dType(from.dType());
    }
    if (from.has_dID()) {
      set_dID(from.dID());
    }
    if (from.has_tPos()) {
      mutable_tPos()->::PB_Vector3f::MergeFrom(from.tPos());
    }
    if (from.has_serverTime()) {
      set_serverTime(from.serverTime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Attack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Attack::CopyFrom(const NetProto_Attack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Attack::IsInitialized() const {
  
  return true;
}

void NetProto_Attack::Swap(NetProto_Attack* other) {
  if (other != this) {
    std::swap(aType_, other->aType_);
    std::swap(aID_, other->aID_);
    std::swap(aSkill_, other->aSkill_);
    std::swap(dType_, other->dType_);
    std::swap(dID_, other->dID_);
    std::swap(tPos_, other->tPos_);
    skills_.Swap(&other->skills_);
    std::swap(serverTime_, other->serverTime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Attack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Attack_descriptor_;
  metadata.reflection = NetProto_Attack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DoAttack_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DoAttack_ID_descriptor_;
}
bool NetProto_DoAttack_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DoAttack_ID NetProto_DoAttack::GROUPID;
const NetProto_DoAttack_ID NetProto_DoAttack::UNITID;
const NetProto_DoAttack_ID NetProto_DoAttack::ID_MIN;
const NetProto_DoAttack_ID NetProto_DoAttack::ID_MAX;
const int NetProto_DoAttack::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_DoAttack_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DoAttack_Type_descriptor_;
}
bool NetProto_DoAttack_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DoAttack_Type NetProto_DoAttack::PLAYER;
const NetProto_DoAttack_Type NetProto_DoAttack::NPC;
const NetProto_DoAttack_Type NetProto_DoAttack::Type_MIN;
const NetProto_DoAttack_Type NetProto_DoAttack::Type_MAX;
const int NetProto_DoAttack::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DoAttack::kATypeFieldNumber;
const int NetProto_DoAttack::kAIDFieldNumber;
const int NetProto_DoAttack::kASkillFieldNumber;
const int NetProto_DoAttack::kASkillIDFieldNumber;
const int NetProto_DoAttack::kDTypeFieldNumber;
const int NetProto_DoAttack::kDIDFieldNumber;
const int NetProto_DoAttack::kTPosFieldNumber;
const int NetProto_DoAttack::kAPosFieldNumber;
#endif  // !_MSC_VER

NetProto_DoAttack::NetProto_DoAttack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DoAttack::InitAsDefaultInstance() {
  aSkill_ = const_cast< ::PB_Skill*>(&::PB_Skill::default_instance());
  tPos_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
  aPos_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

NetProto_DoAttack::NetProto_DoAttack(const NetProto_DoAttack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DoAttack::SharedCtor() {
  _cached_size_ = 0;
  aType_ = 0;
  aID_ = 0;
  aSkill_ = NULL;
  dType_ = 0;
  dID_ = 0;
  tPos_ = NULL;
  aPos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DoAttack::~NetProto_DoAttack() {
  SharedDtor();
}

void NetProto_DoAttack::SharedDtor() {
  if (this != default_instance_) {
    delete aSkill_;
    delete tPos_;
    delete aPos_;
  }
}

void NetProto_DoAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DoAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DoAttack_descriptor_;
}

const NetProto_DoAttack& NetProto_DoAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DoAttack* NetProto_DoAttack::default_instance_ = NULL;

NetProto_DoAttack* NetProto_DoAttack::New() const {
  return new NetProto_DoAttack;
}

void NetProto_DoAttack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aType_ = 0;
    aID_ = 0;
    if (has_aSkill()) {
      if (aSkill_ != NULL) aSkill_->::PB_Skill::Clear();
    }
    dType_ = 0;
    dID_ = 0;
    if (has_tPos()) {
      if (tPos_ != NULL) tPos_->::PB_Vector3f::Clear();
    }
    if (has_aPos()) {
      if (aPos_ != NULL) aPos_->::PB_Vector3f::Clear();
    }
  }
  aSkillID_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DoAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_DoAttack.Type aType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_DoAttack_Type_IsValid(value)) {
            set_aType(static_cast< ::NetProto_DoAttack_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_aID;
        break;
      }
      
      // optional int32 aID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aID_)));
          set_has_aID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_aSkill;
        break;
      }
      
      // optional .PB_Skill aSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aSkill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_aSkillID;
        break;
      }
      
      // repeated int32 aSkillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_aSkillID())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_aSkillID())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_aSkillID;
        if (input->ExpectTag(40)) goto parse_dType;
        break;
      }
      
      // optional .NetProto_DoAttack.Type dType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_DoAttack_Type_IsValid(value)) {
            set_dType(static_cast< ::NetProto_DoAttack_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dID;
        break;
      }
      
      // optional int32 dID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dID_)));
          set_has_dID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tPos;
        break;
      }
      
      // optional .PB_Vector3f tPos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tPos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_aPos;
        break;
      }
      
      // optional .PB_Vector3f aPos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aPos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DoAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_DoAttack.Type aType = 1;
  if (has_aType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->aType(), output);
  }
  
  // optional int32 aID = 2;
  if (has_aID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->aID(), output);
  }
  
  // optional .PB_Skill aSkill = 3;
  if (has_aSkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->aSkill(), output);
  }
  
  // repeated int32 aSkillID = 4;
  for (int i = 0; i < this->aSkillID_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->aSkillID(i), output);
  }
  
  // optional .NetProto_DoAttack.Type dType = 5;
  if (has_dType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dType(), output);
  }
  
  // optional int32 dID = 6;
  if (has_dID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dID(), output);
  }
  
  // optional .PB_Vector3f tPos = 7;
  if (has_tPos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tPos(), output);
  }
  
  // optional .PB_Vector3f aPos = 8;
  if (has_aPos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->aPos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DoAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_DoAttack.Type aType = 1;
  if (has_aType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->aType(), target);
  }
  
  // optional int32 aID = 2;
  if (has_aID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->aID(), target);
  }
  
  // optional .PB_Skill aSkill = 3;
  if (has_aSkill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->aSkill(), target);
  }
  
  // repeated int32 aSkillID = 4;
  for (int i = 0; i < this->aSkillID_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->aSkillID(i), target);
  }
  
  // optional .NetProto_DoAttack.Type dType = 5;
  if (has_dType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dType(), target);
  }
  
  // optional int32 dID = 6;
  if (has_dID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dID(), target);
  }
  
  // optional .PB_Vector3f tPos = 7;
  if (has_tPos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tPos(), target);
  }
  
  // optional .PB_Vector3f aPos = 8;
  if (has_aPos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->aPos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DoAttack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_DoAttack.Type aType = 1;
    if (has_aType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aType());
    }
    
    // optional int32 aID = 2;
    if (has_aID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aID());
    }
    
    // optional .PB_Skill aSkill = 3;
    if (has_aSkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aSkill());
    }
    
    // optional .NetProto_DoAttack.Type dType = 5;
    if (has_dType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dType());
    }
    
    // optional int32 dID = 6;
    if (has_dID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dID());
    }
    
    // optional .PB_Vector3f tPos = 7;
    if (has_tPos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tPos());
    }
    
    // optional .PB_Vector3f aPos = 8;
    if (has_aPos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aPos());
    }
    
  }
  // repeated int32 aSkillID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->aSkillID_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->aSkillID(i));
    }
    total_size += 1 * this->aSkillID_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DoAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DoAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DoAttack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DoAttack::MergeFrom(const NetProto_DoAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  aSkillID_.MergeFrom(from.aSkillID_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aType()) {
      set_aType(from.aType());
    }
    if (from.has_aID()) {
      set_aID(from.aID());
    }
    if (from.has_aSkill()) {
      mutable_aSkill()->::PB_Skill::MergeFrom(from.aSkill());
    }
    if (from.has_dType()) {
      set_dType(from.dType());
    }
    if (from.has_dID()) {
      set_dID(from.dID());
    }
    if (from.has_tPos()) {
      mutable_tPos()->::PB_Vector3f::MergeFrom(from.tPos());
    }
    if (from.has_aPos()) {
      mutable_aPos()->::PB_Vector3f::MergeFrom(from.aPos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DoAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DoAttack::CopyFrom(const NetProto_DoAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DoAttack::IsInitialized() const {
  
  return true;
}

void NetProto_DoAttack::Swap(NetProto_DoAttack* other) {
  if (other != this) {
    std::swap(aType_, other->aType_);
    std::swap(aID_, other->aID_);
    std::swap(aSkill_, other->aSkill_);
    aSkillID_.Swap(&other->aSkillID_);
    std::swap(dType_, other->dType_);
    std::swap(dID_, other->dID_);
    std::swap(tPos_, other->tPos_);
    std::swap(aPos_, other->aPos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DoAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DoAttack_descriptor_;
  metadata.reflection = NetProto_DoAttack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SetPos_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetPos_ID_descriptor_;
}
bool NetProto_SetPos_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SetPos_ID NetProto_SetPos::GROUPID;
const NetProto_SetPos_ID NetProto_SetPos::UNITID;
const NetProto_SetPos_ID NetProto_SetPos::ID_MIN;
const NetProto_SetPos_ID NetProto_SetPos::ID_MAX;
const int NetProto_SetPos::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SetPos::kIdFieldNumber;
const int NetProto_SetPos::kSerialNumFieldNumber;
const int NetProto_SetPos::kPositionFieldNumber;
#endif  // !_MSC_VER

NetProto_SetPos::NetProto_SetPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SetPos::InitAsDefaultInstance() {
  position_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

NetProto_SetPos::NetProto_SetPos(const NetProto_SetPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SetPos::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  serialNum_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SetPos::~NetProto_SetPos() {
  SharedDtor();
}

void NetProto_SetPos::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void NetProto_SetPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SetPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetPos_descriptor_;
}

const NetProto_SetPos& NetProto_SetPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SetPos* NetProto_SetPos::default_instance_ = NULL;

NetProto_SetPos* NetProto_SetPos::New() const {
  return new NetProto_SetPos;
}

void NetProto_SetPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    serialNum_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::PB_Vector3f::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SetPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serialNum;
        break;
      }
      
      // optional int32 serialNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serialNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialNum_)));
          set_has_serialNum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }
      
      // optional .PB_Vector3f position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SetPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 serialNum = 2;
  if (has_serialNum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serialNum(), output);
  }
  
  // optional .PB_Vector3f position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SetPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 serialNum = 2;
  if (has_serialNum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serialNum(), target);
  }
  
  // optional .PB_Vector3f position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SetPos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 serialNum = 2;
    if (has_serialNum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialNum());
    }
    
    // optional .PB_Vector3f position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SetPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SetPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SetPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SetPos::MergeFrom(const NetProto_SetPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_serialNum()) {
      set_serialNum(from.serialNum());
    }
    if (from.has_position()) {
      mutable_position()->::PB_Vector3f::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SetPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SetPos::CopyFrom(const NetProto_SetPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SetPos::IsInitialized() const {
  
  return true;
}

void NetProto_SetPos::Swap(NetProto_SetPos* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(serialNum_, other->serialNum_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SetPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SetPos_descriptor_;
  metadata.reflection = NetProto_SetPos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Die_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Die_ID_descriptor_;
}
bool NetProto_Die_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Die_ID NetProto_Die::GROUPID;
const NetProto_Die_ID NetProto_Die::UNITID;
const NetProto_Die_ID NetProto_Die::ID_MIN;
const NetProto_Die_ID NetProto_Die::ID_MAX;
const int NetProto_Die::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Die_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Die_Type_descriptor_;
}
bool NetProto_Die_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Die_Type NetProto_Die::PLAYER;
const NetProto_Die_Type NetProto_Die::NPC;
const NetProto_Die_Type NetProto_Die::Type_MIN;
const NetProto_Die_Type NetProto_Die::Type_MAX;
const int NetProto_Die::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Die::kTypeFieldNumber;
const int NetProto_Die::kIdFieldNumber;
const int NetProto_Die::kMTypeFieldNumber;
const int NetProto_Die::kMIDFieldNumber;
#endif  // !_MSC_VER

NetProto_Die::NetProto_Die()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Die::InitAsDefaultInstance() {
}

NetProto_Die::NetProto_Die(const NetProto_Die& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Die::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  mType_ = 0;
  mID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Die::~NetProto_Die() {
  SharedDtor();
}

void NetProto_Die::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Die::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Die::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Die_descriptor_;
}

const NetProto_Die& NetProto_Die::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Die* NetProto_Die::default_instance_ = NULL;

NetProto_Die* NetProto_Die::New() const {
  return new NetProto_Die;
}

void NetProto_Die::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    mType_ = 0;
    mID_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Die::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Die.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Die_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Die_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mType;
        break;
      }
      
      // optional .NetProto_Die.Type mType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Die_Type_IsValid(value)) {
            set_mType(static_cast< ::NetProto_Die_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mID;
        break;
      }
      
      // optional int32 mID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mID_)));
          set_has_mID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Die::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Die.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional .NetProto_Die.Type mType = 3;
  if (has_mType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mType(), output);
  }
  
  // optional int32 mID = 4;
  if (has_mID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Die::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Die.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional .NetProto_Die.Type mType = 3;
  if (has_mType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mType(), target);
  }
  
  // optional int32 mID = 4;
  if (has_mID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Die::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Die.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_Die.Type mType = 3;
    if (has_mType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mType());
    }
    
    // optional int32 mID = 4;
    if (has_mID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Die::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Die* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Die*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Die::MergeFrom(const NetProto_Die& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mType()) {
      set_mType(from.mType());
    }
    if (from.has_mID()) {
      set_mID(from.mID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Die::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Die::CopyFrom(const NetProto_Die& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Die::IsInitialized() const {
  
  return true;
}

void NetProto_Die::Swap(NetProto_Die* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(mType_, other->mType_);
    std::swap(mID_, other->mID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Die::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Die_descriptor_;
  metadata.reflection = NetProto_Die_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Revive_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Revive_ID_descriptor_;
}
bool NetProto_Revive_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Revive_ID NetProto_Revive::GROUPID;
const NetProto_Revive_ID NetProto_Revive::UNITID;
const NetProto_Revive_ID NetProto_Revive::ID_MIN;
const NetProto_Revive_ID NetProto_Revive::ID_MAX;
const int NetProto_Revive::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Revive_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Revive_Type_descriptor_;
}
bool NetProto_Revive_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Revive_Type NetProto_Revive::PLAYER;
const NetProto_Revive_Type NetProto_Revive::NPC;
const NetProto_Revive_Type NetProto_Revive::PET;
const NetProto_Revive_Type NetProto_Revive::Type_MIN;
const NetProto_Revive_Type NetProto_Revive::Type_MAX;
const int NetProto_Revive::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Revive_Way_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Revive_Way_descriptor_;
}
bool NetProto_Revive_Way_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Revive_Way NetProto_Revive::CUR;
const NetProto_Revive_Way NetProto_Revive::BEGIN;
const NetProto_Revive_Way NetProto_Revive::CITY;
const NetProto_Revive_Way NetProto_Revive::Way_MIN;
const NetProto_Revive_Way NetProto_Revive::Way_MAX;
const int NetProto_Revive::Way_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Revive::kTypeFieldNumber;
const int NetProto_Revive::kIdFieldNumber;
const int NetProto_Revive::kCoordFieldNumber;
const int NetProto_Revive::kHpFieldNumber;
const int NetProto_Revive::kChangeSceneFieldNumber;
const int NetProto_Revive::kWayFieldNumber;
#endif  // !_MSC_VER

NetProto_Revive::NetProto_Revive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Revive::InitAsDefaultInstance() {
  coord_ = const_cast< ::PB_Vector2i*>(&::PB_Vector2i::default_instance());
}

NetProto_Revive::NetProto_Revive(const NetProto_Revive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Revive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  coord_ = NULL;
  hp_ = 0;
  changeScene_ = false;
  way_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Revive::~NetProto_Revive() {
  SharedDtor();
}

void NetProto_Revive::SharedDtor() {
  if (this != default_instance_) {
    delete coord_;
  }
}

void NetProto_Revive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Revive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Revive_descriptor_;
}

const NetProto_Revive& NetProto_Revive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Revive* NetProto_Revive::default_instance_ = NULL;

NetProto_Revive* NetProto_Revive::New() const {
  return new NetProto_Revive;
}

void NetProto_Revive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    if (has_coord()) {
      if (coord_ != NULL) coord_->::PB_Vector2i::Clear();
    }
    hp_ = 0;
    changeScene_ = false;
    way_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Revive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Revive.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Revive_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Revive_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_coord;
        break;
      }
      
      // optional .PB_Vector2i coord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_hp;
        break;
      }
      
      // optional float hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_changeScene;
        break;
      }
      
      // optional bool changeScene = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeScene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changeScene_)));
          set_has_changeScene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_way;
        break;
      }
      
      // optional .NetProto_Revive.Way way = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_way:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Revive_Way_IsValid(value)) {
            set_way(static_cast< ::NetProto_Revive_Way >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Revive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Revive.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional .PB_Vector2i coord = 3;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coord(), output);
  }
  
  // optional float hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->hp(), output);
  }
  
  // optional bool changeScene = 5;
  if (has_changeScene()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->changeScene(), output);
  }
  
  // optional .NetProto_Revive.Way way = 6;
  if (has_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->way(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Revive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Revive.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional .PB_Vector2i coord = 3;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coord(), target);
  }
  
  // optional float hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->hp(), target);
  }
  
  // optional bool changeScene = 5;
  if (has_changeScene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->changeScene(), target);
  }
  
  // optional .NetProto_Revive.Way way = 6;
  if (has_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->way(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Revive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Revive.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PB_Vector2i coord = 3;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }
    
    // optional float hp = 4;
    if (has_hp()) {
      total_size += 1 + 4;
    }
    
    // optional bool changeScene = 5;
    if (has_changeScene()) {
      total_size += 1 + 1;
    }
    
    // optional .NetProto_Revive.Way way = 6;
    if (has_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->way());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Revive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Revive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Revive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Revive::MergeFrom(const NetProto_Revive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_coord()) {
      mutable_coord()->::PB_Vector2i::MergeFrom(from.coord());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_changeScene()) {
      set_changeScene(from.changeScene());
    }
    if (from.has_way()) {
      set_way(from.way());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Revive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Revive::CopyFrom(const NetProto_Revive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Revive::IsInitialized() const {
  
  return true;
}

void NetProto_Revive::Swap(NetProto_Revive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(coord_, other->coord_);
    std::swap(hp_, other->hp_);
    std::swap(changeScene_, other->changeScene_);
    std::swap(way_, other->way_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Revive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Revive_descriptor_;
  metadata.reflection = NetProto_Revive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyExp_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyExp_ID_descriptor_;
}
bool NetProto_ModifyExp_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyExp_ID NetProto_ModifyExp::GROUPID;
const NetProto_ModifyExp_ID NetProto_ModifyExp::UNITID;
const NetProto_ModifyExp_ID NetProto_ModifyExp::ID_MIN;
const NetProto_ModifyExp_ID NetProto_ModifyExp::ID_MAX;
const int NetProto_ModifyExp::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyExp::kExpFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyExp::NetProto_ModifyExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyExp::InitAsDefaultInstance() {
}

NetProto_ModifyExp::NetProto_ModifyExp(const NetProto_ModifyExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyExp::SharedCtor() {
  _cached_size_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyExp::~NetProto_ModifyExp() {
  SharedDtor();
}

void NetProto_ModifyExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyExp_descriptor_;
}

const NetProto_ModifyExp& NetProto_ModifyExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyExp* NetProto_ModifyExp::default_instance_ = NULL;

NetProto_ModifyExp* NetProto_ModifyExp::New() const {
  return new NetProto_ModifyExp;
}

void NetProto_ModifyExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyExp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyExp::MergeFrom(const NetProto_ModifyExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyExp::CopyFrom(const NetProto_ModifyExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyExp::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyExp::Swap(NetProto_ModifyExp* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyExp_descriptor_;
  metadata.reflection = NetProto_ModifyExp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PickItem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PickItem_ID_descriptor_;
}
bool NetProto_PickItem_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PickItem_ID NetProto_PickItem::GROUPID;
const NetProto_PickItem_ID NetProto_PickItem::UNITID;
const NetProto_PickItem_ID NetProto_PickItem::ID_MIN;
const NetProto_PickItem_ID NetProto_PickItem::ID_MAX;
const int NetProto_PickItem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PickItem::kDropListFieldNumber;
const int NetProto_PickItem::kIndexFieldNumber;
const int NetProto_PickItem::kPackagePosFieldNumber;
const int NetProto_PickItem::kOwnerFieldNumber;
#endif  // !_MSC_VER

NetProto_PickItem::NetProto_PickItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PickItem::InitAsDefaultInstance() {
}

NetProto_PickItem::NetProto_PickItem(const NetProto_PickItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PickItem::SharedCtor() {
  _cached_size_ = 0;
  dropList_ = 0;
  index_ = 0;
  packagePos_ = 0;
  owner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PickItem::~NetProto_PickItem() {
  SharedDtor();
}

void NetProto_PickItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PickItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PickItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PickItem_descriptor_;
}

const NetProto_PickItem& NetProto_PickItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PickItem* NetProto_PickItem::default_instance_ = NULL;

NetProto_PickItem* NetProto_PickItem::New() const {
  return new NetProto_PickItem;
}

void NetProto_PickItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropList_ = 0;
    index_ = 0;
    packagePos_ = 0;
    owner_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PickItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dropList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropList_)));
          set_has_dropList();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_packagePos;
        break;
      }
      
      // optional int32 packagePos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packagePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packagePos_)));
          set_has_packagePos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_owner;
        break;
      }
      
      // optional int32 owner = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PickItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dropList = 1;
  if (has_dropList()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dropList(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // optional int32 packagePos = 3;
  if (has_packagePos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->packagePos(), output);
  }
  
  // optional int32 owner = 4;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->owner(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PickItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dropList = 1;
  if (has_dropList()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dropList(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // optional int32 packagePos = 3;
  if (has_packagePos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->packagePos(), target);
  }
  
  // optional int32 owner = 4;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->owner(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PickItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dropList = 1;
    if (has_dropList()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropList());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 packagePos = 3;
    if (has_packagePos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packagePos());
    }
    
    // optional int32 owner = 4;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PickItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PickItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PickItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PickItem::MergeFrom(const NetProto_PickItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropList()) {
      set_dropList(from.dropList());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_packagePos()) {
      set_packagePos(from.packagePos());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PickItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PickItem::CopyFrom(const NetProto_PickItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PickItem::IsInitialized() const {
  
  return true;
}

void NetProto_PickItem::Swap(NetProto_PickItem* other) {
  if (other != this) {
    std::swap(dropList_, other->dropList_);
    std::swap(index_, other->index_);
    std::swap(packagePos_, other->packagePos_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PickItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PickItem_descriptor_;
  metadata.reflection = NetProto_PickItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_LevelUp_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LevelUp_ID_descriptor_;
}
bool NetProto_LevelUp_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_LevelUp_ID NetProto_LevelUp::GROUPID;
const NetProto_LevelUp_ID NetProto_LevelUp::UNITID;
const NetProto_LevelUp_ID NetProto_LevelUp::ID_MIN;
const NetProto_LevelUp_ID NetProto_LevelUp::ID_MAX;
const int NetProto_LevelUp::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_LevelUp::kIdFieldNumber;
const int NetProto_LevelUp::kLevelFieldNumber;
#endif  // !_MSC_VER

NetProto_LevelUp::NetProto_LevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_LevelUp::InitAsDefaultInstance() {
}

NetProto_LevelUp::NetProto_LevelUp(const NetProto_LevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_LevelUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_LevelUp::~NetProto_LevelUp() {
  SharedDtor();
}

void NetProto_LevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_LevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_LevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LevelUp_descriptor_;
}

const NetProto_LevelUp& NetProto_LevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_LevelUp* NetProto_LevelUp::default_instance_ = NULL;

NetProto_LevelUp* NetProto_LevelUp::New() const {
  return new NetProto_LevelUp;
}

void NetProto_LevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_LevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_LevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_LevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_LevelUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_LevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_LevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_LevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_LevelUp::MergeFrom(const NetProto_LevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_LevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_LevelUp::CopyFrom(const NetProto_LevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_LevelUp::IsInitialized() const {
  
  return true;
}

void NetProto_LevelUp::Swap(NetProto_LevelUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_LevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_LevelUp_descriptor_;
  metadata.reflection = NetProto_LevelUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyMoney_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyMoney_ID_descriptor_;
}
bool NetProto_ModifyMoney_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyMoney_ID NetProto_ModifyMoney::GROUPID;
const NetProto_ModifyMoney_ID NetProto_ModifyMoney::UNITID;
const NetProto_ModifyMoney_ID NetProto_ModifyMoney::ID_MIN;
const NetProto_ModifyMoney_ID NetProto_ModifyMoney::ID_MAX;
const int NetProto_ModifyMoney::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyMoney::kMoneyFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyMoney::NetProto_ModifyMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyMoney::InitAsDefaultInstance() {
}

NetProto_ModifyMoney::NetProto_ModifyMoney(const NetProto_ModifyMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyMoney::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyMoney::~NetProto_ModifyMoney() {
  SharedDtor();
}

void NetProto_ModifyMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyMoney_descriptor_;
}

const NetProto_ModifyMoney& NetProto_ModifyMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyMoney* NetProto_ModifyMoney::default_instance_ = NULL;

NetProto_ModifyMoney* NetProto_ModifyMoney::New() const {
  return new NetProto_ModifyMoney;
}

void NetProto_ModifyMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyMoney::MergeFrom(const NetProto_ModifyMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyMoney::CopyFrom(const NetProto_ModifyMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyMoney::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyMoney::Swap(NetProto_ModifyMoney* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyMoney_descriptor_;
  metadata.reflection = NetProto_ModifyMoney_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GetItem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetItem_ID_descriptor_;
}
bool NetProto_GetItem_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GetItem_ID NetProto_GetItem::GROUPID;
const NetProto_GetItem_ID NetProto_GetItem::UNITID;
const NetProto_GetItem_ID NetProto_GetItem::ID_MIN;
const NetProto_GetItem_ID NetProto_GetItem::ID_MAX;
const int NetProto_GetItem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GetItem::kItemFieldNumber;
const int NetProto_GetItem::kPosFieldNumber;
#endif  // !_MSC_VER

NetProto_GetItem::NetProto_GetItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GetItem::InitAsDefaultInstance() {
  item_ = const_cast< ::PB_ItemInfo*>(&::PB_ItemInfo::default_instance());
}

NetProto_GetItem::NetProto_GetItem(const NetProto_GetItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GetItem::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GetItem::~NetProto_GetItem() {
  SharedDtor();
}

void NetProto_GetItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void NetProto_GetItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GetItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetItem_descriptor_;
}

const NetProto_GetItem& NetProto_GetItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GetItem* NetProto_GetItem::default_instance_ = NULL;

NetProto_GetItem* NetProto_GetItem::New() const {
  return new NetProto_GetItem;
}

void NetProto_GetItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::PB_ItemInfo::Clear();
    }
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GetItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_ItemInfo item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GetItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_ItemInfo item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GetItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_ItemInfo item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GetItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_ItemInfo item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GetItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GetItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GetItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GetItem::MergeFrom(const NetProto_GetItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::PB_ItemInfo::MergeFrom(from.item());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GetItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GetItem::CopyFrom(const NetProto_GetItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GetItem::IsInitialized() const {
  
  return true;
}

void NetProto_GetItem::Swap(NetProto_GetItem* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GetItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GetItem_descriptor_;
  metadata.reflection = NetProto_GetItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_QueryPlayer_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_QueryPlayer_ID_descriptor_;
}
bool NetProto_QueryPlayer_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_QueryPlayer_ID NetProto_QueryPlayer::GROUPID;
const NetProto_QueryPlayer_ID NetProto_QueryPlayer::UNITID;
const NetProto_QueryPlayer_ID NetProto_QueryPlayer::ID_MIN;
const NetProto_QueryPlayer_ID NetProto_QueryPlayer::ID_MAX;
const int NetProto_QueryPlayer::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_QueryPlayer::kRoleIDFieldNumber;
const int NetProto_QueryPlayer::kAttFieldNumber;
const int NetProto_QueryPlayer::kOnlineFieldNumber;
const int NetProto_QueryPlayer::kNameFieldNumber;
#endif  // !_MSC_VER

NetProto_QueryPlayer::NetProto_QueryPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_QueryPlayer::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

NetProto_QueryPlayer::NetProto_QueryPlayer(const NetProto_QueryPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_QueryPlayer::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  att_ = NULL;
  online_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_QueryPlayer::~NetProto_QueryPlayer() {
  SharedDtor();
}

void NetProto_QueryPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete att_;
  }
}

void NetProto_QueryPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_QueryPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_QueryPlayer_descriptor_;
}

const NetProto_QueryPlayer& NetProto_QueryPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_QueryPlayer* NetProto_QueryPlayer::default_instance_ = NULL;

NetProto_QueryPlayer* NetProto_QueryPlayer::New() const {
  return new NetProto_QueryPlayer;
}

void NetProto_QueryPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_att()) {
      if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
    }
    online_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_QueryPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_att;
        break;
      }
      
      // optional .PB_PlayerAtt att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }
      
      // optional bool online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_QueryPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->att(), output);
  }
  
  // optional bool online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_QueryPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->att(), target);
  }
  
  // optional bool online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_QueryPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional .PB_PlayerAtt att = 2;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_QueryPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_QueryPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_QueryPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_QueryPlayer::MergeFrom(const NetProto_QueryPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_att()) {
      mutable_att()->::PB_PlayerAtt::MergeFrom(from.att());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_QueryPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_QueryPlayer::CopyFrom(const NetProto_QueryPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_QueryPlayer::IsInitialized() const {
  
  return true;
}

void NetProto_QueryPlayer::Swap(NetProto_QueryPlayer* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(att_, other->att_);
    std::swap(online_, other->online_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_QueryPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_QueryPlayer_descriptor_;
  metadata.reflection = NetProto_QueryPlayer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PlayerStatus_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PlayerStatus_ID_descriptor_;
}
bool NetProto_PlayerStatus_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PlayerStatus_ID NetProto_PlayerStatus::GROUPID;
const NetProto_PlayerStatus_ID NetProto_PlayerStatus::UNITID;
const NetProto_PlayerStatus_ID NetProto_PlayerStatus::ID_MIN;
const NetProto_PlayerStatus_ID NetProto_PlayerStatus::ID_MAX;
const int NetProto_PlayerStatus::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_PlayerStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PlayerStatus_Status_descriptor_;
}
bool NetProto_PlayerStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PlayerStatus_Status NetProto_PlayerStatus::OFFLINE;
const NetProto_PlayerStatus_Status NetProto_PlayerStatus::ONLINE;
const NetProto_PlayerStatus_Status NetProto_PlayerStatus::Status_MIN;
const NetProto_PlayerStatus_Status NetProto_PlayerStatus::Status_MAX;
const int NetProto_PlayerStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PlayerStatus::kRolesFieldNumber;
const int NetProto_PlayerStatus::kStatusesFieldNumber;
const int NetProto_PlayerStatus::kLevelFieldNumber;
const int NetProto_PlayerStatus::kVipFieldNumber;
#endif  // !_MSC_VER

NetProto_PlayerStatus::NetProto_PlayerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PlayerStatus::InitAsDefaultInstance() {
}

NetProto_PlayerStatus::NetProto_PlayerStatus(const NetProto_PlayerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PlayerStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PlayerStatus::~NetProto_PlayerStatus() {
  SharedDtor();
}

void NetProto_PlayerStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PlayerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PlayerStatus_descriptor_;
}

const NetProto_PlayerStatus& NetProto_PlayerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PlayerStatus* NetProto_PlayerStatus::default_instance_ = NULL;

NetProto_PlayerStatus* NetProto_PlayerStatus::New() const {
  return new NetProto_PlayerStatus;
}

void NetProto_PlayerStatus::Clear() {
  roles_.Clear();
  statuses_.Clear();
  level_.Clear();
  vip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 roles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_roles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_roles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roles;
        if (input->ExpectTag(16)) goto parse_statuses;
        break;
      }
      
      // repeated .NetProto_PlayerStatus.Status statuses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statuses:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_PlayerStatus_Status_IsValid(value)) {
            add_statuses(static_cast< ::NetProto_PlayerStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::NetProto_PlayerStatus_Status_IsValid,
                 this->mutable_statuses())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_statuses;
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // repeated int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        if (input->ExpectTag(32)) goto parse_vip;
        break;
      }
      
      // repeated int32 vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_vip())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vip())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->roles(i), output);
  }
  
  // repeated .NetProto_PlayerStatus.Status statuses = 2;
  for (int i = 0; i < this->statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->statuses(i), output);
  }
  
  // repeated int32 level = 3;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->level(i), output);
  }
  
  // repeated int32 vip = 4;
  for (int i = 0; i < this->vip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->vip(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PlayerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->roles(i), target);
  }
  
  // repeated .NetProto_PlayerStatus.Status statuses = 2;
  for (int i = 0; i < this->statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->statuses(i), target);
  }
  
  // repeated int32 level = 3;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->level(i), target);
  }
  
  // repeated int32 vip = 4;
  for (int i = 0; i < this->vip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->vip(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PlayerStatus::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 roles = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->roles(i));
    }
    total_size += 1 * this->roles_size() + data_size;
  }
  
  // repeated .NetProto_PlayerStatus.Status statuses = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->statuses_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->statuses(i));
    }
    total_size += 1 * this->statuses_size() + data_size;
  }
  
  // repeated int32 level = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }
  
  // repeated int32 vip = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->vip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vip(i));
    }
    total_size += 1 * this->vip_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PlayerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PlayerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PlayerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PlayerStatus::MergeFrom(const NetProto_PlayerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  statuses_.MergeFrom(from.statuses_);
  level_.MergeFrom(from.level_);
  vip_.MergeFrom(from.vip_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PlayerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PlayerStatus::CopyFrom(const NetProto_PlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PlayerStatus::IsInitialized() const {
  
  return true;
}

void NetProto_PlayerStatus::Swap(NetProto_PlayerStatus* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    statuses_.Swap(&other->statuses_);
    level_.Swap(&other->level_);
    vip_.Swap(&other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PlayerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PlayerStatus_descriptor_;
  metadata.reflection = NetProto_PlayerStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddFriend_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddFriend_ID_descriptor_;
}
bool NetProto_AddFriend_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddFriend_ID NetProto_AddFriend::GROUPID;
const NetProto_AddFriend_ID NetProto_AddFriend::UNITID;
const NetProto_AddFriend_ID NetProto_AddFriend::ID_MIN;
const NetProto_AddFriend_ID NetProto_AddFriend::ID_MAX;
const int NetProto_AddFriend::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddFriend::kRoleIDFieldNumber;
const int NetProto_AddFriend::kNameFieldNumber;
const int NetProto_AddFriend::kProfessionTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_AddFriend::NetProto_AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddFriend::InitAsDefaultInstance() {
}

NetProto_AddFriend::NetProto_AddFriend(const NetProto_AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddFriend::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionType_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddFriend::~NetProto_AddFriend() {
  SharedDtor();
}

void NetProto_AddFriend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddFriend_descriptor_;
}

const NetProto_AddFriend& NetProto_AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddFriend* NetProto_AddFriend::default_instance_ = NULL;

NetProto_AddFriend* NetProto_AddFriend::New() const {
  return new NetProto_AddFriend;
}

void NetProto_AddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    professionType_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_professionType;
        break;
      }
      
      // optional .PB_ProfessionInfo.Type professionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_professionType(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .PB_ProfessionInfo.Type professionType = 3;
  if (has_professionType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->professionType(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .PB_ProfessionInfo.Type professionType = 3;
  if (has_professionType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->professionType(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .PB_ProfessionInfo.Type professionType = 3;
    if (has_professionType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->professionType());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddFriend::MergeFrom(const NetProto_AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_professionType()) {
      set_professionType(from.professionType());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddFriend::CopyFrom(const NetProto_AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddFriend::IsInitialized() const {
  
  return true;
}

void NetProto_AddFriend::Swap(NetProto_AddFriend* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(name_, other->name_);
    std::swap(professionType_, other->professionType_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddFriend_descriptor_;
  metadata.reflection = NetProto_AddFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DelFriend_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelFriend_ID_descriptor_;
}
bool NetProto_DelFriend_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DelFriend_ID NetProto_DelFriend::GROUPID;
const NetProto_DelFriend_ID NetProto_DelFriend::UNITID;
const NetProto_DelFriend_ID NetProto_DelFriend::ID_MIN;
const NetProto_DelFriend_ID NetProto_DelFriend::ID_MAX;
const int NetProto_DelFriend::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DelFriend::kRoleIDFieldNumber;
const int NetProto_DelFriend::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_DelFriend::NetProto_DelFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DelFriend::InitAsDefaultInstance() {
}

NetProto_DelFriend::NetProto_DelFriend(const NetProto_DelFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DelFriend::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DelFriend::~NetProto_DelFriend() {
  SharedDtor();
}

void NetProto_DelFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DelFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DelFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelFriend_descriptor_;
}

const NetProto_DelFriend& NetProto_DelFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DelFriend* NetProto_DelFriend::default_instance_ = NULL;

NetProto_DelFriend* NetProto_DelFriend::New() const {
  return new NetProto_DelFriend;
}

void NetProto_DelFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DelFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DelFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DelFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DelFriend::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DelFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DelFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DelFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DelFriend::MergeFrom(const NetProto_DelFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DelFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DelFriend::CopyFrom(const NetProto_DelFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DelFriend::IsInitialized() const {
  
  return true;
}

void NetProto_DelFriend::Swap(NetProto_DelFriend* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DelFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DelFriend_descriptor_;
  metadata.reflection = NetProto_DelFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyHP_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyHP_ID_descriptor_;
}
bool NetProto_ModifyHP_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyHP_ID NetProto_ModifyHP::GROUPID;
const NetProto_ModifyHP_ID NetProto_ModifyHP::UNITID;
const NetProto_ModifyHP_ID NetProto_ModifyHP::ID_MIN;
const NetProto_ModifyHP_ID NetProto_ModifyHP::ID_MAX;
const int NetProto_ModifyHP::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyHP::kIdFieldNumber;
const int NetProto_ModifyHP::kHpFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyHP::NetProto_ModifyHP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyHP::InitAsDefaultInstance() {
}

NetProto_ModifyHP::NetProto_ModifyHP(const NetProto_ModifyHP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyHP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyHP::~NetProto_ModifyHP() {
  SharedDtor();
}

void NetProto_ModifyHP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyHP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyHP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyHP_descriptor_;
}

const NetProto_ModifyHP& NetProto_ModifyHP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyHP* NetProto_ModifyHP::default_instance_ = NULL;

NetProto_ModifyHP* NetProto_ModifyHP::New() const {
  return new NetProto_ModifyHP;
}

void NetProto_ModifyHP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyHP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyHP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyHP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyHP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyHP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyHP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyHP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyHP::MergeFrom(const NetProto_ModifyHP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyHP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyHP::CopyFrom(const NetProto_ModifyHP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyHP::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyHP::Swap(NetProto_ModifyHP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyHP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyHP_descriptor_;
  metadata.reflection = NetProto_ModifyHP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyMana_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyMana_ID_descriptor_;
}
bool NetProto_ModifyMana_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyMana_ID NetProto_ModifyMana::GROUPID;
const NetProto_ModifyMana_ID NetProto_ModifyMana::UNITID;
const NetProto_ModifyMana_ID NetProto_ModifyMana::ID_MIN;
const NetProto_ModifyMana_ID NetProto_ModifyMana::ID_MAX;
const int NetProto_ModifyMana::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyMana::kIdFieldNumber;
const int NetProto_ModifyMana::kManaFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyMana::NetProto_ModifyMana()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyMana::InitAsDefaultInstance() {
}

NetProto_ModifyMana::NetProto_ModifyMana(const NetProto_ModifyMana& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyMana::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mana_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyMana::~NetProto_ModifyMana() {
  SharedDtor();
}

void NetProto_ModifyMana::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyMana::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyMana::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyMana_descriptor_;
}

const NetProto_ModifyMana& NetProto_ModifyMana::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyMana* NetProto_ModifyMana::default_instance_ = NULL;

NetProto_ModifyMana* NetProto_ModifyMana::New() const {
  return new NetProto_ModifyMana;
}

void NetProto_ModifyMana::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    mana_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyMana::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mana;
        break;
      }
      
      // optional int32 mana = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mana:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mana_)));
          set_has_mana();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyMana::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 mana = 2;
  if (has_mana()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mana(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyMana::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 mana = 2;
  if (has_mana()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mana(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyMana::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 mana = 2;
    if (has_mana()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mana());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyMana::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyMana* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyMana*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyMana::MergeFrom(const NetProto_ModifyMana& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mana()) {
      set_mana(from.mana());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyMana::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyMana::CopyFrom(const NetProto_ModifyMana& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyMana::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyMana::Swap(NetProto_ModifyMana* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mana_, other->mana_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyMana::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyMana_descriptor_;
  metadata.reflection = NetProto_ModifyMana_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyFaction_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyFaction_ID_descriptor_;
}
bool NetProto_ModifyFaction_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyFaction_ID NetProto_ModifyFaction::GROUPID;
const NetProto_ModifyFaction_ID NetProto_ModifyFaction::UNITID;
const NetProto_ModifyFaction_ID NetProto_ModifyFaction::ID_MIN;
const NetProto_ModifyFaction_ID NetProto_ModifyFaction::ID_MAX;
const int NetProto_ModifyFaction::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_ModifyFaction_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyFaction_Type_descriptor_;
}
bool NetProto_ModifyFaction_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyFaction_Type NetProto_ModifyFaction::PLAYER;
const NetProto_ModifyFaction_Type NetProto_ModifyFaction::NPC;
const NetProto_ModifyFaction_Type NetProto_ModifyFaction::Type_MIN;
const NetProto_ModifyFaction_Type NetProto_ModifyFaction::Type_MAX;
const int NetProto_ModifyFaction::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyFaction::kTypeFieldNumber;
const int NetProto_ModifyFaction::kIdFieldNumber;
const int NetProto_ModifyFaction::kSelfFactionFieldNumber;
const int NetProto_ModifyFaction::kFriendlyFactionFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyFaction::NetProto_ModifyFaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyFaction::InitAsDefaultInstance() {
}

NetProto_ModifyFaction::NetProto_ModifyFaction(const NetProto_ModifyFaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyFaction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  selfFaction_ = 0;
  friendlyFaction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyFaction::~NetProto_ModifyFaction() {
  SharedDtor();
}

void NetProto_ModifyFaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyFaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyFaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyFaction_descriptor_;
}

const NetProto_ModifyFaction& NetProto_ModifyFaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyFaction* NetProto_ModifyFaction::default_instance_ = NULL;

NetProto_ModifyFaction* NetProto_ModifyFaction::New() const {
  return new NetProto_ModifyFaction;
}

void NetProto_ModifyFaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    selfFaction_ = 0;
    friendlyFaction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyFaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_ModifyFaction.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_ModifyFaction_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_ModifyFaction_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selfFaction;
        break;
      }
      
      // optional int32 selfFaction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfFaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfFaction_)));
          set_has_selfFaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendlyFaction;
        break;
      }
      
      // optional int32 friendlyFaction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendlyFaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendlyFaction_)));
          set_has_friendlyFaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyFaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_ModifyFaction.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 selfFaction = 3;
  if (has_selfFaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfFaction(), output);
  }
  
  // optional int32 friendlyFaction = 4;
  if (has_friendlyFaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->friendlyFaction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyFaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_ModifyFaction.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 selfFaction = 3;
  if (has_selfFaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfFaction(), target);
  }
  
  // optional int32 friendlyFaction = 4;
  if (has_friendlyFaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->friendlyFaction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyFaction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_ModifyFaction.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 selfFaction = 3;
    if (has_selfFaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfFaction());
    }
    
    // optional int32 friendlyFaction = 4;
    if (has_friendlyFaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendlyFaction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyFaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyFaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyFaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyFaction::MergeFrom(const NetProto_ModifyFaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_selfFaction()) {
      set_selfFaction(from.selfFaction());
    }
    if (from.has_friendlyFaction()) {
      set_friendlyFaction(from.friendlyFaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyFaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyFaction::CopyFrom(const NetProto_ModifyFaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyFaction::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyFaction::Swap(NetProto_ModifyFaction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(selfFaction_, other->selfFaction_);
    std::swap(friendlyFaction_, other->friendlyFaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyFaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyFaction_descriptor_;
  metadata.reflection = NetProto_ModifyFaction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyMaxHP_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyMaxHP_ID_descriptor_;
}
bool NetProto_ModifyMaxHP_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyMaxHP_ID NetProto_ModifyMaxHP::GROUPID;
const NetProto_ModifyMaxHP_ID NetProto_ModifyMaxHP::UNITID;
const NetProto_ModifyMaxHP_ID NetProto_ModifyMaxHP::ID_MIN;
const NetProto_ModifyMaxHP_ID NetProto_ModifyMaxHP::ID_MAX;
const int NetProto_ModifyMaxHP::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyMaxHP::kIdFieldNumber;
const int NetProto_ModifyMaxHP::kMaxHPFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyMaxHP::NetProto_ModifyMaxHP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyMaxHP::InitAsDefaultInstance() {
}

NetProto_ModifyMaxHP::NetProto_ModifyMaxHP(const NetProto_ModifyMaxHP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyMaxHP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  maxHP_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyMaxHP::~NetProto_ModifyMaxHP() {
  SharedDtor();
}

void NetProto_ModifyMaxHP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyMaxHP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyMaxHP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyMaxHP_descriptor_;
}

const NetProto_ModifyMaxHP& NetProto_ModifyMaxHP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyMaxHP* NetProto_ModifyMaxHP::default_instance_ = NULL;

NetProto_ModifyMaxHP* NetProto_ModifyMaxHP::New() const {
  return new NetProto_ModifyMaxHP;
}

void NetProto_ModifyMaxHP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    maxHP_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyMaxHP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxHP;
        break;
      }
      
      // optional int32 maxHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxHP_)));
          set_has_maxHP();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyMaxHP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 maxHP = 2;
  if (has_maxHP()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxHP(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyMaxHP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 maxHP = 2;
  if (has_maxHP()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxHP(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyMaxHP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 maxHP = 2;
    if (has_maxHP()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxHP());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyMaxHP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyMaxHP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyMaxHP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyMaxHP::MergeFrom(const NetProto_ModifyMaxHP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_maxHP()) {
      set_maxHP(from.maxHP());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyMaxHP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyMaxHP::CopyFrom(const NetProto_ModifyMaxHP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyMaxHP::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyMaxHP::Swap(NetProto_ModifyMaxHP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(maxHP_, other->maxHP_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyMaxHP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyMaxHP_descriptor_;
  metadata.reflection = NetProto_ModifyMaxHP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RequestPK_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RequestPK_ID_descriptor_;
}
bool NetProto_RequestPK_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RequestPK_ID NetProto_RequestPK::GROUPID;
const NetProto_RequestPK_ID NetProto_RequestPK::UNITID;
const NetProto_RequestPK_ID NetProto_RequestPK::ID_MIN;
const NetProto_RequestPK_ID NetProto_RequestPK::ID_MAX;
const int NetProto_RequestPK::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RequestPK::kTargetFieldNumber;
const int NetProto_RequestPK::kResFieldNumber;
#endif  // !_MSC_VER

NetProto_RequestPK::NetProto_RequestPK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RequestPK::InitAsDefaultInstance() {
  target_ = const_cast< ::PB_FriendInfo*>(&::PB_FriendInfo::default_instance());
}

NetProto_RequestPK::NetProto_RequestPK(const NetProto_RequestPK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RequestPK::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RequestPK::~NetProto_RequestPK() {
  SharedDtor();
}

void NetProto_RequestPK::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void NetProto_RequestPK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RequestPK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RequestPK_descriptor_;
}

const NetProto_RequestPK& NetProto_RequestPK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RequestPK* NetProto_RequestPK::default_instance_ = NULL;

NetProto_RequestPK* NetProto_RequestPK::New() const {
  return new NetProto_RequestPK;
}

void NetProto_RequestPK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::PB_FriendInfo::Clear();
    }
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RequestPK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_FriendInfo target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }
      
      // optional int32 res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RequestPK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_FriendInfo target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }
  
  // optional int32 res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RequestPK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_FriendInfo target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }
  
  // optional int32 res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RequestPK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_FriendInfo target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // optional int32 res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RequestPK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RequestPK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RequestPK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RequestPK::MergeFrom(const NetProto_RequestPK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::PB_FriendInfo::MergeFrom(from.target());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RequestPK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RequestPK::CopyFrom(const NetProto_RequestPK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RequestPK::IsInitialized() const {
  
  return true;
}

void NetProto_RequestPK::Swap(NetProto_RequestPK* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RequestPK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RequestPK_descriptor_;
  metadata.reflection = NetProto_RequestPK_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ApplyPK_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ApplyPK_ID_descriptor_;
}
bool NetProto_ApplyPK_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ApplyPK_ID NetProto_ApplyPK::GROUPID;
const NetProto_ApplyPK_ID NetProto_ApplyPK::UNITID;
const NetProto_ApplyPK_ID NetProto_ApplyPK::ID_MIN;
const NetProto_ApplyPK_ID NetProto_ApplyPK::ID_MAX;
const int NetProto_ApplyPK::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ApplyPK::kOriginFieldNumber;
#endif  // !_MSC_VER

NetProto_ApplyPK::NetProto_ApplyPK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ApplyPK::InitAsDefaultInstance() {
}

NetProto_ApplyPK::NetProto_ApplyPK(const NetProto_ApplyPK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ApplyPK::SharedCtor() {
  _cached_size_ = 0;
  origin_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ApplyPK::~NetProto_ApplyPK() {
  SharedDtor();
}

void NetProto_ApplyPK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ApplyPK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ApplyPK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ApplyPK_descriptor_;
}

const NetProto_ApplyPK& NetProto_ApplyPK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ApplyPK* NetProto_ApplyPK::default_instance_ = NULL;

NetProto_ApplyPK* NetProto_ApplyPK::New() const {
  return new NetProto_ApplyPK;
}

void NetProto_ApplyPK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    origin_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ApplyPK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &origin_)));
          set_has_origin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ApplyPK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->origin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ApplyPK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->origin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ApplyPK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->origin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ApplyPK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ApplyPK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ApplyPK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ApplyPK::MergeFrom(const NetProto_ApplyPK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      set_origin(from.origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ApplyPK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ApplyPK::CopyFrom(const NetProto_ApplyPK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ApplyPK::IsInitialized() const {
  
  return true;
}

void NetProto_ApplyPK::Swap(NetProto_ApplyPK* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ApplyPK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ApplyPK_descriptor_;
  metadata.reflection = NetProto_ApplyPK_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Strong_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Strong_ID_descriptor_;
}
bool NetProto_Strong_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Strong_ID NetProto_Strong::GROUPID;
const NetProto_Strong_ID NetProto_Strong::UNITID;
const NetProto_Strong_ID NetProto_Strong::ID_MIN;
const NetProto_Strong_ID NetProto_Strong::ID_MAX;
const int NetProto_Strong::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Strong_Pos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Strong_Pos_descriptor_;
}
bool NetProto_Strong_Pos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Strong_Pos NetProto_Strong::BODY;
const NetProto_Strong_Pos NetProto_Strong::PACKAGE;
const NetProto_Strong_Pos NetProto_Strong::Pos_MIN;
const NetProto_Strong_Pos NetProto_Strong::Pos_MAX;
const int NetProto_Strong::Pos_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Strong_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Strong_Result_descriptor_;
}
bool NetProto_Strong_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Strong_Result NetProto_Strong::SUCCESS;
const NetProto_Strong_Result NetProto_Strong::NOTHING;
const NetProto_Strong_Result NetProto_Strong::FAILURE;
const NetProto_Strong_Result NetProto_Strong::Result_MIN;
const NetProto_Strong_Result NetProto_Strong::Result_MAX;
const int NetProto_Strong::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Strong::kPosFieldNumber;
const int NetProto_Strong::kIdFieldNumber;
const int NetProto_Strong::kResultsFieldNumber;
const int NetProto_Strong::kProtectFieldNumber;
#endif  // !_MSC_VER

NetProto_Strong::NetProto_Strong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Strong::InitAsDefaultInstance() {
}

NetProto_Strong::NetProto_Strong(const NetProto_Strong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Strong::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  id_ = 0;
  results_ = 0;
  protect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Strong::~NetProto_Strong() {
  SharedDtor();
}

void NetProto_Strong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Strong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Strong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Strong_descriptor_;
}

const NetProto_Strong& NetProto_Strong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Strong* NetProto_Strong::default_instance_ = NULL;

NetProto_Strong* NetProto_Strong::New() const {
  return new NetProto_Strong;
}

void NetProto_Strong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    id_ = 0;
    results_ = 0;
    protect_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Strong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Strong.Pos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Strong_Pos_IsValid(value)) {
            set_pos(static_cast< ::NetProto_Strong_Pos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_results;
        break;
      }
      
      // optional .NetProto_Strong.Result results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_results:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Strong_Result_IsValid(value)) {
            set_results(static_cast< ::NetProto_Strong_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_protect;
        break;
      }
      
      // optional bool protect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &protect_)));
          set_has_protect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Strong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Strong.Pos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional .NetProto_Strong.Result results = 3;
  if (has_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->results(), output);
  }
  
  // optional bool protect = 4;
  if (has_protect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->protect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Strong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Strong.Pos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional .NetProto_Strong.Result results = 3;
  if (has_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->results(), target);
  }
  
  // optional bool protect = 4;
  if (has_protect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->protect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Strong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Strong.Pos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_Strong.Result results = 3;
    if (has_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->results());
    }
    
    // optional bool protect = 4;
    if (has_protect()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Strong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Strong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Strong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Strong::MergeFrom(const NetProto_Strong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_results()) {
      set_results(from.results());
    }
    if (from.has_protect()) {
      set_protect(from.protect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Strong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Strong::CopyFrom(const NetProto_Strong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Strong::IsInitialized() const {
  
  return true;
}

void NetProto_Strong::Swap(NetProto_Strong* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(id_, other->id_);
    std::swap(results_, other->results_);
    std::swap(protect_, other->protect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Strong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Strong_descriptor_;
  metadata.reflection = NetProto_Strong_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ClearStrong_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ClearStrong_ID_descriptor_;
}
bool NetProto_ClearStrong_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ClearStrong_ID NetProto_ClearStrong::GROUPID;
const NetProto_ClearStrong_ID NetProto_ClearStrong::UNITID;
const NetProto_ClearStrong_ID NetProto_ClearStrong::ID_MIN;
const NetProto_ClearStrong_ID NetProto_ClearStrong::ID_MAX;
const int NetProto_ClearStrong::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_ClearStrong_Pos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ClearStrong_Pos_descriptor_;
}
bool NetProto_ClearStrong_Pos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ClearStrong_Pos NetProto_ClearStrong::BODY;
const NetProto_ClearStrong_Pos NetProto_ClearStrong::PACKAGE;
const NetProto_ClearStrong_Pos NetProto_ClearStrong::Pos_MIN;
const NetProto_ClearStrong_Pos NetProto_ClearStrong::Pos_MAX;
const int NetProto_ClearStrong::Pos_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ClearStrong::kPosFieldNumber;
const int NetProto_ClearStrong::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_ClearStrong::NetProto_ClearStrong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ClearStrong::InitAsDefaultInstance() {
}

NetProto_ClearStrong::NetProto_ClearStrong(const NetProto_ClearStrong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ClearStrong::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ClearStrong::~NetProto_ClearStrong() {
  SharedDtor();
}

void NetProto_ClearStrong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ClearStrong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ClearStrong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ClearStrong_descriptor_;
}

const NetProto_ClearStrong& NetProto_ClearStrong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ClearStrong* NetProto_ClearStrong::default_instance_ = NULL;

NetProto_ClearStrong* NetProto_ClearStrong::New() const {
  return new NetProto_ClearStrong;
}

void NetProto_ClearStrong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ClearStrong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_ClearStrong.Pos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_ClearStrong_Pos_IsValid(value)) {
            set_pos(static_cast< ::NetProto_ClearStrong_Pos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ClearStrong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_ClearStrong.Pos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ClearStrong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_ClearStrong.Pos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ClearStrong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_ClearStrong.Pos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ClearStrong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ClearStrong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ClearStrong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ClearStrong::MergeFrom(const NetProto_ClearStrong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ClearStrong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ClearStrong::CopyFrom(const NetProto_ClearStrong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ClearStrong::IsInitialized() const {
  
  return true;
}

void NetProto_ClearStrong::Swap(NetProto_ClearStrong* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ClearStrong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ClearStrong_descriptor_;
  metadata.reflection = NetProto_ClearStrong_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Transform_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Transform_ID_descriptor_;
}
bool NetProto_Transform_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Transform_ID NetProto_Transform::GROUPID;
const NetProto_Transform_ID NetProto_Transform::UNITID;
const NetProto_Transform_ID NetProto_Transform::ID_MIN;
const NetProto_Transform_ID NetProto_Transform::ID_MAX;
const int NetProto_Transform::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Transform_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Transform_Type_descriptor_;
}
bool NetProto_Transform_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Transform_Type NetProto_Transform::PLAYER;
const NetProto_Transform_Type NetProto_Transform::NPC;
const NetProto_Transform_Type NetProto_Transform::Type_MIN;
const NetProto_Transform_Type NetProto_Transform::Type_MAX;
const int NetProto_Transform::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Transform::kIdFieldNumber;
const int NetProto_Transform::kTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_Transform::NetProto_Transform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Transform::InitAsDefaultInstance() {
}

NetProto_Transform::NetProto_Transform(const NetProto_Transform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Transform::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Transform::~NetProto_Transform() {
  SharedDtor();
}

void NetProto_Transform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Transform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Transform_descriptor_;
}

const NetProto_Transform& NetProto_Transform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Transform* NetProto_Transform::default_instance_ = NULL;

NetProto_Transform* NetProto_Transform::New() const {
  return new NetProto_Transform;
}

void NetProto_Transform::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .NetProto_Transform.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Transform_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Transform_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .NetProto_Transform.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Transform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .NetProto_Transform.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Transform::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_Transform.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Transform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Transform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Transform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Transform::MergeFrom(const NetProto_Transform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Transform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Transform::CopyFrom(const NetProto_Transform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Transform::IsInitialized() const {
  
  return true;
}

void NetProto_Transform::Swap(NetProto_Transform* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Transform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Transform_descriptor_;
  metadata.reflection = NetProto_Transform_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Mount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Mount_ID_descriptor_;
}
bool NetProto_Mount_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Mount_ID NetProto_Mount::GROUPID;
const NetProto_Mount_ID NetProto_Mount::UNITID;
const NetProto_Mount_ID NetProto_Mount::ID_MIN;
const NetProto_Mount_ID NetProto_Mount::ID_MAX;
const int NetProto_Mount::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Mount_Pos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Mount_Pos_descriptor_;
}
bool NetProto_Mount_Pos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Mount_Pos NetProto_Mount::BODY;
const NetProto_Mount_Pos NetProto_Mount::PACKAGE;
const NetProto_Mount_Pos NetProto_Mount::Pos_MIN;
const NetProto_Mount_Pos NetProto_Mount::Pos_MAX;
const int NetProto_Mount::Pos_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Mount::kPosFieldNumber;
const int NetProto_Mount::kIdFieldNumber;
const int NetProto_Mount::kMountPosFieldNumber;
const int NetProto_Mount::kGemPosFieldNumber;
#endif  // !_MSC_VER

NetProto_Mount::NetProto_Mount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Mount::InitAsDefaultInstance() {
}

NetProto_Mount::NetProto_Mount(const NetProto_Mount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Mount::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  id_ = 0;
  mountPos_ = 0;
  gemPos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Mount::~NetProto_Mount() {
  SharedDtor();
}

void NetProto_Mount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Mount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Mount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Mount_descriptor_;
}

const NetProto_Mount& NetProto_Mount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Mount* NetProto_Mount::default_instance_ = NULL;

NetProto_Mount* NetProto_Mount::New() const {
  return new NetProto_Mount;
}

void NetProto_Mount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    id_ = 0;
    mountPos_ = 0;
    gemPos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Mount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Mount.Pos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Mount_Pos_IsValid(value)) {
            set_pos(static_cast< ::NetProto_Mount_Pos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mountPos;
        break;
      }
      
      // optional int32 mountPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mountPos_)));
          set_has_mountPos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gemPos;
        break;
      }
      
      // optional int32 gemPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemPos_)));
          set_has_gemPos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Mount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Mount.Pos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 mountPos = 3;
  if (has_mountPos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mountPos(), output);
  }
  
  // optional int32 gemPos = 4;
  if (has_gemPos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gemPos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Mount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Mount.Pos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 mountPos = 3;
  if (has_mountPos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mountPos(), target);
  }
  
  // optional int32 gemPos = 4;
  if (has_gemPos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gemPos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Mount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Mount.Pos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 mountPos = 3;
    if (has_mountPos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mountPos());
    }
    
    // optional int32 gemPos = 4;
    if (has_gemPos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemPos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Mount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Mount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Mount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Mount::MergeFrom(const NetProto_Mount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mountPos()) {
      set_mountPos(from.mountPos());
    }
    if (from.has_gemPos()) {
      set_gemPos(from.gemPos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Mount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Mount::CopyFrom(const NetProto_Mount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Mount::IsInitialized() const {
  
  return true;
}

void NetProto_Mount::Swap(NetProto_Mount* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(id_, other->id_);
    std::swap(mountPos_, other->mountPos_);
    std::swap(gemPos_, other->gemPos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Mount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Mount_descriptor_;
  metadata.reflection = NetProto_Mount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_TalkTo_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TalkTo_ID_descriptor_;
}
bool NetProto_TalkTo_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_TalkTo_ID NetProto_TalkTo::GROUPID;
const NetProto_TalkTo_ID NetProto_TalkTo::UNITID;
const NetProto_TalkTo_ID NetProto_TalkTo::ID_MIN;
const NetProto_TalkTo_ID NetProto_TalkTo::ID_MAX;
const int NetProto_TalkTo::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_TalkTo::kIdFieldNumber;
const int NetProto_TalkTo::kMapFieldNumber;
const int NetProto_TalkTo::kNpcFieldNumber;
#endif  // !_MSC_VER

NetProto_TalkTo::NetProto_TalkTo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_TalkTo::InitAsDefaultInstance() {
}

NetProto_TalkTo::NetProto_TalkTo(const NetProto_TalkTo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_TalkTo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  map_ = 0;
  npc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_TalkTo::~NetProto_TalkTo() {
  SharedDtor();
}

void NetProto_TalkTo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_TalkTo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_TalkTo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TalkTo_descriptor_;
}

const NetProto_TalkTo& NetProto_TalkTo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_TalkTo* NetProto_TalkTo::default_instance_ = NULL;

NetProto_TalkTo* NetProto_TalkTo::New() const {
  return new NetProto_TalkTo;
}

void NetProto_TalkTo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    map_ = 0;
    npc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_TalkTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map;
        break;
      }
      
      // optional int32 map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_)));
          set_has_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npc;
        break;
      }
      
      // optional int32 npc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_)));
          set_has_npc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_TalkTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 map = 2;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map(), output);
  }
  
  // optional int32 npc = 3;
  if (has_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->npc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_TalkTo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 map = 2;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map(), target);
  }
  
  // optional int32 npc = 3;
  if (has_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->npc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_TalkTo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 map = 2;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map());
    }
    
    // optional int32 npc = 3;
    if (has_npc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_TalkTo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_TalkTo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_TalkTo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_TalkTo::MergeFrom(const NetProto_TalkTo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
    if (from.has_npc()) {
      set_npc(from.npc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_TalkTo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_TalkTo::CopyFrom(const NetProto_TalkTo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_TalkTo::IsInitialized() const {
  
  return true;
}

void NetProto_TalkTo::Swap(NetProto_TalkTo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(map_, other->map_);
    std::swap(npc_, other->npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_TalkTo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_TalkTo_descriptor_;
  metadata.reflection = NetProto_TalkTo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Recover_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Recover_ID_descriptor_;
}
bool NetProto_Recover_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Recover_ID NetProto_Recover::GROUPID;
const NetProto_Recover_ID NetProto_Recover::UNITID;
const NetProto_Recover_ID NetProto_Recover::ID_MIN;
const NetProto_Recover_ID NetProto_Recover::ID_MAX;
const int NetProto_Recover::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Recover::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_Recover::NetProto_Recover()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Recover::InitAsDefaultInstance() {
}

NetProto_Recover::NetProto_Recover(const NetProto_Recover& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Recover::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Recover::~NetProto_Recover() {
  SharedDtor();
}

void NetProto_Recover::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Recover::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Recover::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Recover_descriptor_;
}

const NetProto_Recover& NetProto_Recover::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Recover* NetProto_Recover::default_instance_ = NULL;

NetProto_Recover* NetProto_Recover::New() const {
  return new NetProto_Recover;
}

void NetProto_Recover::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Recover::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Recover::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Recover::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Recover::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Recover::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Recover* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Recover*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Recover::MergeFrom(const NetProto_Recover& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Recover::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Recover::CopyFrom(const NetProto_Recover& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Recover::IsInitialized() const {
  
  return true;
}

void NetProto_Recover::Swap(NetProto_Recover* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Recover::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Recover_descriptor_;
  metadata.reflection = NetProto_Recover_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddBloodNode_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddBloodNode_ID_descriptor_;
}
bool NetProto_AddBloodNode_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddBloodNode_ID NetProto_AddBloodNode::GROUPID;
const NetProto_AddBloodNode_ID NetProto_AddBloodNode::UNITID;
const NetProto_AddBloodNode_ID NetProto_AddBloodNode::ID_MIN;
const NetProto_AddBloodNode_ID NetProto_AddBloodNode::ID_MAX;
const int NetProto_AddBloodNode::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_AddBloodNode_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddBloodNode_Type_descriptor_;
}
bool NetProto_AddBloodNode_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddBloodNode_Type NetProto_AddBloodNode::NORMAL;
const NetProto_AddBloodNode_Type NetProto_AddBloodNode::PERFECT;
const NetProto_AddBloodNode_Type NetProto_AddBloodNode::LINE;
const NetProto_AddBloodNode_Type NetProto_AddBloodNode::Type_MIN;
const NetProto_AddBloodNode_Type NetProto_AddBloodNode::Type_MAX;
const int NetProto_AddBloodNode::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddBloodNode::kTypeFieldNumber;
const int NetProto_AddBloodNode::kResFieldNumber;
#endif  // !_MSC_VER

NetProto_AddBloodNode::NetProto_AddBloodNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddBloodNode::InitAsDefaultInstance() {
}

NetProto_AddBloodNode::NetProto_AddBloodNode(const NetProto_AddBloodNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddBloodNode::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  res_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddBloodNode::~NetProto_AddBloodNode() {
  SharedDtor();
}

void NetProto_AddBloodNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_AddBloodNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddBloodNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddBloodNode_descriptor_;
}

const NetProto_AddBloodNode& NetProto_AddBloodNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddBloodNode* NetProto_AddBloodNode::default_instance_ = NULL;

NetProto_AddBloodNode* NetProto_AddBloodNode::New() const {
  return new NetProto_AddBloodNode;
}

void NetProto_AddBloodNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    res_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddBloodNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_AddBloodNode.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_AddBloodNode_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_AddBloodNode_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }
      
      // optional bool res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddBloodNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_AddBloodNode.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional bool res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddBloodNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_AddBloodNode.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional bool res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddBloodNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_AddBloodNode.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional bool res = 2;
    if (has_res()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddBloodNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddBloodNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddBloodNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddBloodNode::MergeFrom(const NetProto_AddBloodNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddBloodNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddBloodNode::CopyFrom(const NetProto_AddBloodNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddBloodNode::IsInitialized() const {
  
  return true;
}

void NetProto_AddBloodNode::Swap(NetProto_AddBloodNode* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddBloodNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddBloodNode_descriptor_;
  metadata.reflection = NetProto_AddBloodNode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddBloodEffect_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddBloodEffect_ID_descriptor_;
}
bool NetProto_AddBloodEffect_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddBloodEffect_ID NetProto_AddBloodEffect::GROUPID;
const NetProto_AddBloodEffect_ID NetProto_AddBloodEffect::UNITID;
const NetProto_AddBloodEffect_ID NetProto_AddBloodEffect::ID_MIN;
const NetProto_AddBloodEffect_ID NetProto_AddBloodEffect::ID_MAX;
const int NetProto_AddBloodEffect::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_AddBloodEffect_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddBloodEffect_Type_descriptor_;
}
bool NetProto_AddBloodEffect_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddBloodEffect_Type NetProto_AddBloodEffect::NORMAL;
const NetProto_AddBloodEffect_Type NetProto_AddBloodEffect::ALL;
const NetProto_AddBloodEffect_Type NetProto_AddBloodEffect::Type_MIN;
const NetProto_AddBloodEffect_Type NetProto_AddBloodEffect::Type_MAX;
const int NetProto_AddBloodEffect::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddBloodEffect::kTypeFieldNumber;
const int NetProto_AddBloodEffect::kSoulFieldNumber;
const int NetProto_AddBloodEffect::kResFieldNumber;
const int NetProto_AddBloodEffect::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_AddBloodEffect::NetProto_AddBloodEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddBloodEffect::InitAsDefaultInstance() {
}

NetProto_AddBloodEffect::NetProto_AddBloodEffect(const NetProto_AddBloodEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddBloodEffect::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  soul_ = 0;
  res_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddBloodEffect::~NetProto_AddBloodEffect() {
  SharedDtor();
}

void NetProto_AddBloodEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_AddBloodEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddBloodEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddBloodEffect_descriptor_;
}

const NetProto_AddBloodEffect& NetProto_AddBloodEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddBloodEffect* NetProto_AddBloodEffect::default_instance_ = NULL;

NetProto_AddBloodEffect* NetProto_AddBloodEffect::New() const {
  return new NetProto_AddBloodEffect;
}

void NetProto_AddBloodEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    soul_ = 0;
    res_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddBloodEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_AddBloodEffect.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_AddBloodEffect_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_AddBloodEffect_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soul;
        break;
      }
      
      // optional int32 soul = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_)));
          set_has_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }
      
      // optional int32 res = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }
      
      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddBloodEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_AddBloodEffect.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 soul = 2;
  if (has_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soul(), output);
  }
  
  // optional int32 res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->res(), output);
  }
  
  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddBloodEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_AddBloodEffect.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 soul = 2;
  if (has_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->soul(), target);
  }
  
  // optional int32 res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->res(), target);
  }
  
  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddBloodEffect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_AddBloodEffect.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 soul = 2;
    if (has_soul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul());
    }
    
    // optional int32 res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddBloodEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddBloodEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddBloodEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddBloodEffect::MergeFrom(const NetProto_AddBloodEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_soul()) {
      set_soul(from.soul());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddBloodEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddBloodEffect::CopyFrom(const NetProto_AddBloodEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddBloodEffect::IsInitialized() const {
  
  return true;
}

void NetProto_AddBloodEffect::Swap(NetProto_AddBloodEffect* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(soul_, other->soul_);
    std::swap(res_, other->res_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddBloodEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddBloodEffect_descriptor_;
  metadata.reflection = NetProto_AddBloodEffect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Explore_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Explore_ID_descriptor_;
}
bool NetProto_Explore_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Explore_ID NetProto_Explore::GROUPID;
const NetProto_Explore_ID NetProto_Explore::UNITID;
const NetProto_Explore_ID NetProto_Explore::ID_MIN;
const NetProto_Explore_ID NetProto_Explore::ID_MAX;
const int NetProto_Explore::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Explore::kTypeFieldNumber;
const int NetProto_Explore::kEvent1FieldNumber;
const int NetProto_Explore::kEvent2FieldNumber;
#endif  // !_MSC_VER

NetProto_Explore::NetProto_Explore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Explore::InitAsDefaultInstance() {
}

NetProto_Explore::NetProto_Explore(const NetProto_Explore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Explore::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  event1_ = 0;
  event2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Explore::~NetProto_Explore() {
  SharedDtor();
}

void NetProto_Explore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Explore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Explore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Explore_descriptor_;
}

const NetProto_Explore& NetProto_Explore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Explore* NetProto_Explore::default_instance_ = NULL;

NetProto_Explore* NetProto_Explore::New() const {
  return new NetProto_Explore;
}

void NetProto_Explore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    event1_ = 0;
    event2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Explore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ExploreInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExploreInfo_Type_IsValid(value)) {
            set_type(static_cast< ::ExploreInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event1;
        break;
      }
      
      // optional int32 event1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event1_)));
          set_has_event1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event2;
        break;
      }
      
      // optional int32 event2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event2_)));
          set_has_event2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Explore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ExploreInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 event1 = 2;
  if (has_event1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event1(), output);
  }
  
  // optional int32 event2 = 3;
  if (has_event2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Explore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ExploreInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 event1 = 2;
  if (has_event1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event1(), target);
  }
  
  // optional int32 event2 = 3;
  if (has_event2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Explore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ExploreInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 event1 = 2;
    if (has_event1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event1());
    }
    
    // optional int32 event2 = 3;
    if (has_event2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Explore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Explore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Explore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Explore::MergeFrom(const NetProto_Explore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_event1()) {
      set_event1(from.event1());
    }
    if (from.has_event2()) {
      set_event2(from.event2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Explore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Explore::CopyFrom(const NetProto_Explore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Explore::IsInitialized() const {
  
  return true;
}

void NetProto_Explore::Swap(NetProto_Explore* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(event1_, other->event1_);
    std::swap(event2_, other->event2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Explore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Explore_descriptor_;
  metadata.reflection = NetProto_Explore_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UnlockBlood_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnlockBlood_ID_descriptor_;
}
bool NetProto_UnlockBlood_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UnlockBlood_ID NetProto_UnlockBlood::GROUPID;
const NetProto_UnlockBlood_ID NetProto_UnlockBlood::UNITID;
const NetProto_UnlockBlood_ID NetProto_UnlockBlood::ID_MIN;
const NetProto_UnlockBlood_ID NetProto_UnlockBlood::ID_MAX;
const int NetProto_UnlockBlood::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_UnlockBlood::NetProto_UnlockBlood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UnlockBlood::InitAsDefaultInstance() {
}

NetProto_UnlockBlood::NetProto_UnlockBlood(const NetProto_UnlockBlood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UnlockBlood::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UnlockBlood::~NetProto_UnlockBlood() {
  SharedDtor();
}

void NetProto_UnlockBlood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UnlockBlood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UnlockBlood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnlockBlood_descriptor_;
}

const NetProto_UnlockBlood& NetProto_UnlockBlood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UnlockBlood* NetProto_UnlockBlood::default_instance_ = NULL;

NetProto_UnlockBlood* NetProto_UnlockBlood::New() const {
  return new NetProto_UnlockBlood;
}

void NetProto_UnlockBlood::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UnlockBlood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_UnlockBlood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UnlockBlood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UnlockBlood::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UnlockBlood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UnlockBlood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UnlockBlood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UnlockBlood::MergeFrom(const NetProto_UnlockBlood& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UnlockBlood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UnlockBlood::CopyFrom(const NetProto_UnlockBlood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UnlockBlood::IsInitialized() const {
  
  return true;
}

void NetProto_UnlockBlood::Swap(NetProto_UnlockBlood* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UnlockBlood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UnlockBlood_descriptor_;
  metadata.reflection = NetProto_UnlockBlood_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UpdatePos_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UpdatePos_ID_descriptor_;
}
bool NetProto_UpdatePos_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UpdatePos_ID NetProto_UpdatePos::GROUPID;
const NetProto_UpdatePos_ID NetProto_UpdatePos::UNITID;
const NetProto_UpdatePos_ID NetProto_UpdatePos::ID_MIN;
const NetProto_UpdatePos_ID NetProto_UpdatePos::ID_MAX;
const int NetProto_UpdatePos::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_UpdatePos::kIdFieldNumber;
const int NetProto_UpdatePos::kPosFieldNumber;
#endif  // !_MSC_VER

NetProto_UpdatePos::NetProto_UpdatePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UpdatePos::InitAsDefaultInstance() {
  pos_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

NetProto_UpdatePos::NetProto_UpdatePos(const NetProto_UpdatePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UpdatePos::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UpdatePos::~NetProto_UpdatePos() {
  SharedDtor();
}

void NetProto_UpdatePos::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void NetProto_UpdatePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UpdatePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UpdatePos_descriptor_;
}

const NetProto_UpdatePos& NetProto_UpdatePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UpdatePos* NetProto_UpdatePos::default_instance_ = NULL;

NetProto_UpdatePos* NetProto_UpdatePos::New() const {
  return new NetProto_UpdatePos;
}

void NetProto_UpdatePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PB_Vector3f::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UpdatePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // optional .PB_Vector3f pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_UpdatePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .PB_Vector3f pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UpdatePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .PB_Vector3f pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UpdatePos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PB_Vector3f pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UpdatePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UpdatePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UpdatePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UpdatePos::MergeFrom(const NetProto_UpdatePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::PB_Vector3f::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UpdatePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UpdatePos::CopyFrom(const NetProto_UpdatePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UpdatePos::IsInitialized() const {
  
  return true;
}

void NetProto_UpdatePos::Swap(NetProto_UpdatePos* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UpdatePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UpdatePos_descriptor_;
  metadata.reflection = NetProto_UpdatePos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SayHello_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SayHello_ID_descriptor_;
}
bool NetProto_SayHello_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SayHello_ID NetProto_SayHello::GROUPID;
const NetProto_SayHello_ID NetProto_SayHello::UNITID;
const NetProto_SayHello_ID NetProto_SayHello::ID_MIN;
const NetProto_SayHello_ID NetProto_SayHello::ID_MAX;
const int NetProto_SayHello::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SayHello::kSrcIDFieldNumber;
const int NetProto_SayHello::kSrcNameFieldNumber;
const int NetProto_SayHello::kDestIDFieldNumber;
#endif  // !_MSC_VER

NetProto_SayHello::NetProto_SayHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SayHello::InitAsDefaultInstance() {
}

NetProto_SayHello::NetProto_SayHello(const NetProto_SayHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SayHello::SharedCtor() {
  _cached_size_ = 0;
  srcID_ = GOOGLE_LONGLONG(0);
  srcName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SayHello::~NetProto_SayHello() {
  SharedDtor();
}

void NetProto_SayHello::SharedDtor() {
  if (srcName_ != &::google::protobuf::internal::kEmptyString) {
    delete srcName_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_SayHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SayHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SayHello_descriptor_;
}

const NetProto_SayHello& NetProto_SayHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SayHello* NetProto_SayHello::default_instance_ = NULL;

NetProto_SayHello* NetProto_SayHello::New() const {
  return new NetProto_SayHello;
}

void NetProto_SayHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcID_ = GOOGLE_LONGLONG(0);
    if (has_srcName()) {
      if (srcName_ != &::google::protobuf::internal::kEmptyString) {
        srcName_->clear();
      }
    }
    destID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SayHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcID_)));
          set_has_srcID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_srcName;
        break;
      }
      
      // optional string srcName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcName()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srcName().data(), this->srcName().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destID;
        break;
      }
      
      // optional int64 destID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &destID_)));
          set_has_destID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SayHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 srcID = 1;
  if (has_srcID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->srcID(), output);
  }
  
  // optional string srcName = 2;
  if (has_srcName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcName().data(), this->srcName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->srcName(), output);
  }
  
  // optional int64 destID = 3;
  if (has_destID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->destID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SayHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 srcID = 1;
  if (has_srcID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->srcID(), target);
  }
  
  // optional string srcName = 2;
  if (has_srcName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcName().data(), this->srcName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->srcName(), target);
  }
  
  // optional int64 destID = 3;
  if (has_destID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->destID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SayHello::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 srcID = 1;
    if (has_srcID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcID());
    }
    
    // optional string srcName = 2;
    if (has_srcName()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srcName());
    }
    
    // optional int64 destID = 3;
    if (has_destID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->destID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SayHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SayHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SayHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SayHello::MergeFrom(const NetProto_SayHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcID()) {
      set_srcID(from.srcID());
    }
    if (from.has_srcName()) {
      set_srcName(from.srcName());
    }
    if (from.has_destID()) {
      set_destID(from.destID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SayHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SayHello::CopyFrom(const NetProto_SayHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SayHello::IsInitialized() const {
  
  return true;
}

void NetProto_SayHello::Swap(NetProto_SayHello* other) {
  if (other != this) {
    std::swap(srcID_, other->srcID_);
    std::swap(srcName_, other->srcName_);
    std::swap(destID_, other->destID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SayHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SayHello_descriptor_;
  metadata.reflection = NetProto_SayHello_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_CompleteGuide_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CompleteGuide_ID_descriptor_;
}
bool NetProto_CompleteGuide_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_CompleteGuide_ID NetProto_CompleteGuide::GROUPID;
const NetProto_CompleteGuide_ID NetProto_CompleteGuide::UNITID;
const NetProto_CompleteGuide_ID NetProto_CompleteGuide::ID_MIN;
const NetProto_CompleteGuide_ID NetProto_CompleteGuide::ID_MAX;
const int NetProto_CompleteGuide::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_CompleteGuide::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_CompleteGuide::NetProto_CompleteGuide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_CompleteGuide::InitAsDefaultInstance() {
}

NetProto_CompleteGuide::NetProto_CompleteGuide(const NetProto_CompleteGuide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_CompleteGuide::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_CompleteGuide::~NetProto_CompleteGuide() {
  SharedDtor();
}

void NetProto_CompleteGuide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_CompleteGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_CompleteGuide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CompleteGuide_descriptor_;
}

const NetProto_CompleteGuide& NetProto_CompleteGuide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_CompleteGuide* NetProto_CompleteGuide::default_instance_ = NULL;

NetProto_CompleteGuide* NetProto_CompleteGuide::New() const {
  return new NetProto_CompleteGuide;
}

void NetProto_CompleteGuide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_CompleteGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_CompleteGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_CompleteGuide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_CompleteGuide::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_CompleteGuide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_CompleteGuide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_CompleteGuide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_CompleteGuide::MergeFrom(const NetProto_CompleteGuide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_CompleteGuide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_CompleteGuide::CopyFrom(const NetProto_CompleteGuide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_CompleteGuide::IsInitialized() const {
  
  return true;
}

void NetProto_CompleteGuide::Swap(NetProto_CompleteGuide* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_CompleteGuide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_CompleteGuide_descriptor_;
  metadata.reflection = NetProto_CompleteGuide_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Arrange_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Arrange_ID_descriptor_;
}
bool NetProto_Arrange_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Arrange_ID NetProto_Arrange::GROUPID;
const NetProto_Arrange_ID NetProto_Arrange::UNITID;
const NetProto_Arrange_ID NetProto_Arrange::ID_MIN;
const NetProto_Arrange_ID NetProto_Arrange::ID_MAX;
const int NetProto_Arrange::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Arrange::kBeginFieldNumber;
const int NetProto_Arrange::kItemsFieldNumber;
#endif  // !_MSC_VER

NetProto_Arrange::NetProto_Arrange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Arrange::InitAsDefaultInstance() {
}

NetProto_Arrange::NetProto_Arrange(const NetProto_Arrange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Arrange::SharedCtor() {
  _cached_size_ = 0;
  begin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Arrange::~NetProto_Arrange() {
  SharedDtor();
}

void NetProto_Arrange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Arrange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Arrange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Arrange_descriptor_;
}

const NetProto_Arrange& NetProto_Arrange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Arrange* NetProto_Arrange::default_instance_ = NULL;

NetProto_Arrange* NetProto_Arrange::New() const {
  return new NetProto_Arrange;
}

void NetProto_Arrange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Arrange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_ItemPackage.Begin begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ItemPackage_Begin_IsValid(value)) {
            set_begin(static_cast< ::PB_ItemPackage_Begin >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .PB_ItemInfo items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Arrange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_ItemPackage.Begin begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->begin(), output);
  }
  
  // repeated .PB_ItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Arrange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_ItemPackage.Begin begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->begin(), target);
  }
  
  // repeated .PB_ItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Arrange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_ItemPackage.Begin begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->begin());
    }
    
  }
  // repeated .PB_ItemInfo items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Arrange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Arrange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Arrange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Arrange::MergeFrom(const NetProto_Arrange& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Arrange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Arrange::CopyFrom(const NetProto_Arrange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Arrange::IsInitialized() const {
  
  return true;
}

void NetProto_Arrange::Swap(NetProto_Arrange* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Arrange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Arrange_descriptor_;
  metadata.reflection = NetProto_Arrange_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_IgnorePK_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_IgnorePK_ID_descriptor_;
}
bool NetProto_IgnorePK_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_IgnorePK_ID NetProto_IgnorePK::GROUPID;
const NetProto_IgnorePK_ID NetProto_IgnorePK::UNITID;
const NetProto_IgnorePK_ID NetProto_IgnorePK::ID_MIN;
const NetProto_IgnorePK_ID NetProto_IgnorePK::ID_MAX;
const int NetProto_IgnorePK::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_IgnorePK::NetProto_IgnorePK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_IgnorePK::InitAsDefaultInstance() {
}

NetProto_IgnorePK::NetProto_IgnorePK(const NetProto_IgnorePK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_IgnorePK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_IgnorePK::~NetProto_IgnorePK() {
  SharedDtor();
}

void NetProto_IgnorePK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_IgnorePK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_IgnorePK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_IgnorePK_descriptor_;
}

const NetProto_IgnorePK& NetProto_IgnorePK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_IgnorePK* NetProto_IgnorePK::default_instance_ = NULL;

NetProto_IgnorePK* NetProto_IgnorePK::New() const {
  return new NetProto_IgnorePK;
}

void NetProto_IgnorePK::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_IgnorePK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_IgnorePK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_IgnorePK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_IgnorePK::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_IgnorePK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_IgnorePK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_IgnorePK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_IgnorePK::MergeFrom(const NetProto_IgnorePK& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_IgnorePK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_IgnorePK::CopyFrom(const NetProto_IgnorePK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_IgnorePK::IsInitialized() const {
  
  return true;
}

void NetProto_IgnorePK::Swap(NetProto_IgnorePK* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_IgnorePK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_IgnorePK_descriptor_;
  metadata.reflection = NetProto_IgnorePK_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyRMB_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyRMB_ID_descriptor_;
}
bool NetProto_ModifyRMB_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyRMB_ID NetProto_ModifyRMB::GROUPID;
const NetProto_ModifyRMB_ID NetProto_ModifyRMB::UNITID;
const NetProto_ModifyRMB_ID NetProto_ModifyRMB::ID_MIN;
const NetProto_ModifyRMB_ID NetProto_ModifyRMB::ID_MAX;
const int NetProto_ModifyRMB::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyRMB::kValueFieldNumber;
const int NetProto_ModifyRMB::kTotalFieldNumber;
const int NetProto_ModifyRMB::kTotalCostFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyRMB::NetProto_ModifyRMB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyRMB::InitAsDefaultInstance() {
}

NetProto_ModifyRMB::NetProto_ModifyRMB(const NetProto_ModifyRMB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyRMB::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  total_ = GOOGLE_LONGLONG(0);
  totalCost_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyRMB::~NetProto_ModifyRMB() {
  SharedDtor();
}

void NetProto_ModifyRMB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyRMB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyRMB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyRMB_descriptor_;
}

const NetProto_ModifyRMB& NetProto_ModifyRMB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyRMB* NetProto_ModifyRMB::default_instance_ = NULL;

NetProto_ModifyRMB* NetProto_ModifyRMB::New() const {
  return new NetProto_ModifyRMB;
}

void NetProto_ModifyRMB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
    total_ = GOOGLE_LONGLONG(0);
    totalCost_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyRMB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }
      
      // optional int64 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalCost;
        break;
      }
      
      // optional int64 totalCost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalCost_)));
          set_has_totalCost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyRMB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  // optional int64 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total(), output);
  }
  
  // optional int64 totalCost = 3;
  if (has_totalCost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->totalCost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyRMB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  // optional int64 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total(), target);
  }
  
  // optional int64 totalCost = 3;
  if (has_totalCost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->totalCost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyRMB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
    // optional int64 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total());
    }
    
    // optional int64 totalCost = 3;
    if (has_totalCost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalCost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyRMB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyRMB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyRMB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyRMB::MergeFrom(const NetProto_ModifyRMB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_totalCost()) {
      set_totalCost(from.totalCost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyRMB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyRMB::CopyFrom(const NetProto_ModifyRMB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyRMB::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyRMB::Swap(NetProto_ModifyRMB* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(total_, other->total_);
    std::swap(totalCost_, other->totalCost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyRMB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyRMB_descriptor_;
  metadata.reflection = NetProto_ModifyRMB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifySoulJade_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifySoulJade_ID_descriptor_;
}
bool NetProto_ModifySoulJade_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifySoulJade_ID NetProto_ModifySoulJade::GROUPID;
const NetProto_ModifySoulJade_ID NetProto_ModifySoulJade::UNITID;
const NetProto_ModifySoulJade_ID NetProto_ModifySoulJade::ID_MIN;
const NetProto_ModifySoulJade_ID NetProto_ModifySoulJade::ID_MAX;
const int NetProto_ModifySoulJade::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifySoulJade::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifySoulJade::NetProto_ModifySoulJade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifySoulJade::InitAsDefaultInstance() {
}

NetProto_ModifySoulJade::NetProto_ModifySoulJade(const NetProto_ModifySoulJade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifySoulJade::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifySoulJade::~NetProto_ModifySoulJade() {
  SharedDtor();
}

void NetProto_ModifySoulJade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifySoulJade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifySoulJade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifySoulJade_descriptor_;
}

const NetProto_ModifySoulJade& NetProto_ModifySoulJade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifySoulJade* NetProto_ModifySoulJade::default_instance_ = NULL;

NetProto_ModifySoulJade* NetProto_ModifySoulJade::New() const {
  return new NetProto_ModifySoulJade;
}

void NetProto_ModifySoulJade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifySoulJade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifySoulJade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifySoulJade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifySoulJade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifySoulJade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifySoulJade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifySoulJade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifySoulJade::MergeFrom(const NetProto_ModifySoulJade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifySoulJade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifySoulJade::CopyFrom(const NetProto_ModifySoulJade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifySoulJade::IsInitialized() const {
  
  return true;
}

void NetProto_ModifySoulJade::Swap(NetProto_ModifySoulJade* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifySoulJade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifySoulJade_descriptor_;
  metadata.reflection = NetProto_ModifySoulJade_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifySoul_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifySoul_ID_descriptor_;
}
bool NetProto_ModifySoul_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 41:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifySoul_ID NetProto_ModifySoul::GROUPID;
const NetProto_ModifySoul_ID NetProto_ModifySoul::UNITID;
const NetProto_ModifySoul_ID NetProto_ModifySoul::ID_MIN;
const NetProto_ModifySoul_ID NetProto_ModifySoul::ID_MAX;
const int NetProto_ModifySoul::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifySoul::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifySoul::NetProto_ModifySoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifySoul::InitAsDefaultInstance() {
}

NetProto_ModifySoul::NetProto_ModifySoul(const NetProto_ModifySoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifySoul::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifySoul::~NetProto_ModifySoul() {
  SharedDtor();
}

void NetProto_ModifySoul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifySoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifySoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifySoul_descriptor_;
}

const NetProto_ModifySoul& NetProto_ModifySoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifySoul* NetProto_ModifySoul::default_instance_ = NULL;

NetProto_ModifySoul* NetProto_ModifySoul::New() const {
  return new NetProto_ModifySoul;
}

void NetProto_ModifySoul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifySoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifySoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifySoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifySoul::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifySoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifySoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifySoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifySoul::MergeFrom(const NetProto_ModifySoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifySoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifySoul::CopyFrom(const NetProto_ModifySoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifySoul::IsInitialized() const {
  
  return true;
}

void NetProto_ModifySoul::Swap(NetProto_ModifySoul* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifySoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifySoul_descriptor_;
  metadata.reflection = NetProto_ModifySoul_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyHonor_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyHonor_ID_descriptor_;
}
bool NetProto_ModifyHonor_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 42:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyHonor_ID NetProto_ModifyHonor::GROUPID;
const NetProto_ModifyHonor_ID NetProto_ModifyHonor::UNITID;
const NetProto_ModifyHonor_ID NetProto_ModifyHonor::ID_MIN;
const NetProto_ModifyHonor_ID NetProto_ModifyHonor::ID_MAX;
const int NetProto_ModifyHonor::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyHonor::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyHonor::NetProto_ModifyHonor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyHonor::InitAsDefaultInstance() {
}

NetProto_ModifyHonor::NetProto_ModifyHonor(const NetProto_ModifyHonor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyHonor::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyHonor::~NetProto_ModifyHonor() {
  SharedDtor();
}

void NetProto_ModifyHonor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyHonor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyHonor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyHonor_descriptor_;
}

const NetProto_ModifyHonor& NetProto_ModifyHonor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyHonor* NetProto_ModifyHonor::default_instance_ = NULL;

NetProto_ModifyHonor* NetProto_ModifyHonor::New() const {
  return new NetProto_ModifyHonor;
}

void NetProto_ModifyHonor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyHonor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyHonor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyHonor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyHonor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyHonor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyHonor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyHonor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyHonor::MergeFrom(const NetProto_ModifyHonor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyHonor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyHonor::CopyFrom(const NetProto_ModifyHonor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyHonor::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyHonor::Swap(NetProto_ModifyHonor* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyHonor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyHonor_descriptor_;
  metadata.reflection = NetProto_ModifyHonor_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyDurability_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyDurability_ID_descriptor_;
}
bool NetProto_ModifyDurability_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 43:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyDurability_ID NetProto_ModifyDurability::GROUPID;
const NetProto_ModifyDurability_ID NetProto_ModifyDurability::UNITID;
const NetProto_ModifyDurability_ID NetProto_ModifyDurability::ID_MIN;
const NetProto_ModifyDurability_ID NetProto_ModifyDurability::ID_MAX;
const int NetProto_ModifyDurability::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyDurability::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyDurability::NetProto_ModifyDurability()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyDurability::InitAsDefaultInstance() {
}

NetProto_ModifyDurability::NetProto_ModifyDurability(const NetProto_ModifyDurability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyDurability::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyDurability::~NetProto_ModifyDurability() {
  SharedDtor();
}

void NetProto_ModifyDurability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyDurability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyDurability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyDurability_descriptor_;
}

const NetProto_ModifyDurability& NetProto_ModifyDurability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyDurability* NetProto_ModifyDurability::default_instance_ = NULL;

NetProto_ModifyDurability* NetProto_ModifyDurability::New() const {
  return new NetProto_ModifyDurability;
}

void NetProto_ModifyDurability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyDurability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyDurability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyDurability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyDurability::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyDurability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyDurability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyDurability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyDurability::MergeFrom(const NetProto_ModifyDurability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyDurability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyDurability::CopyFrom(const NetProto_ModifyDurability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyDurability::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyDurability::Swap(NetProto_ModifyDurability* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyDurability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyDurability_descriptor_;
  metadata.reflection = NetProto_ModifyDurability_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifySoulStone_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifySoulStone_ID_descriptor_;
}
bool NetProto_ModifySoulStone_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifySoulStone_ID NetProto_ModifySoulStone::GROUPID;
const NetProto_ModifySoulStone_ID NetProto_ModifySoulStone::UNITID;
const NetProto_ModifySoulStone_ID NetProto_ModifySoulStone::ID_MIN;
const NetProto_ModifySoulStone_ID NetProto_ModifySoulStone::ID_MAX;
const int NetProto_ModifySoulStone::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifySoulStone::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifySoulStone::NetProto_ModifySoulStone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifySoulStone::InitAsDefaultInstance() {
}

NetProto_ModifySoulStone::NetProto_ModifySoulStone(const NetProto_ModifySoulStone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifySoulStone::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifySoulStone::~NetProto_ModifySoulStone() {
  SharedDtor();
}

void NetProto_ModifySoulStone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifySoulStone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifySoulStone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifySoulStone_descriptor_;
}

const NetProto_ModifySoulStone& NetProto_ModifySoulStone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifySoulStone* NetProto_ModifySoulStone::default_instance_ = NULL;

NetProto_ModifySoulStone* NetProto_ModifySoulStone::New() const {
  return new NetProto_ModifySoulStone;
}

void NetProto_ModifySoulStone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifySoulStone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifySoulStone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifySoulStone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifySoulStone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifySoulStone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifySoulStone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifySoulStone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifySoulStone::MergeFrom(const NetProto_ModifySoulStone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifySoulStone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifySoulStone::CopyFrom(const NetProto_ModifySoulStone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifySoulStone::IsInitialized() const {
  
  return true;
}

void NetProto_ModifySoulStone::Swap(NetProto_ModifySoulStone* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifySoulStone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifySoulStone_descriptor_;
  metadata.reflection = NetProto_ModifySoulStone_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyPKScore_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyPKScore_ID_descriptor_;
}
bool NetProto_ModifyPKScore_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 45:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyPKScore_ID NetProto_ModifyPKScore::GROUPID;
const NetProto_ModifyPKScore_ID NetProto_ModifyPKScore::UNITID;
const NetProto_ModifyPKScore_ID NetProto_ModifyPKScore::ID_MIN;
const NetProto_ModifyPKScore_ID NetProto_ModifyPKScore::ID_MAX;
const int NetProto_ModifyPKScore::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyPKScore::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyPKScore::NetProto_ModifyPKScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyPKScore::InitAsDefaultInstance() {
}

NetProto_ModifyPKScore::NetProto_ModifyPKScore(const NetProto_ModifyPKScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyPKScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyPKScore::~NetProto_ModifyPKScore() {
  SharedDtor();
}

void NetProto_ModifyPKScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyPKScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyPKScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyPKScore_descriptor_;
}

const NetProto_ModifyPKScore& NetProto_ModifyPKScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyPKScore* NetProto_ModifyPKScore::default_instance_ = NULL;

NetProto_ModifyPKScore* NetProto_ModifyPKScore::New() const {
  return new NetProto_ModifyPKScore;
}

void NetProto_ModifyPKScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyPKScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyPKScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyPKScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyPKScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyPKScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyPKScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyPKScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyPKScore::MergeFrom(const NetProto_ModifyPKScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyPKScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyPKScore::CopyFrom(const NetProto_ModifyPKScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyPKScore::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyPKScore::Swap(NetProto_ModifyPKScore* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyPKScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyPKScore_descriptor_;
  metadata.reflection = NetProto_ModifyPKScore_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DelItem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelItem_ID_descriptor_;
}
bool NetProto_DelItem_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 46:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DelItem_ID NetProto_DelItem::GROUPID;
const NetProto_DelItem_ID NetProto_DelItem::UNITID;
const NetProto_DelItem_ID NetProto_DelItem::ID_MIN;
const NetProto_DelItem_ID NetProto_DelItem::ID_MAX;
const int NetProto_DelItem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DelItem::kPosFieldNumber;
const int NetProto_DelItem::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_DelItem::NetProto_DelItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DelItem::InitAsDefaultInstance() {
}

NetProto_DelItem::NetProto_DelItem(const NetProto_DelItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DelItem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DelItem::~NetProto_DelItem() {
  SharedDtor();
}

void NetProto_DelItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DelItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DelItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelItem_descriptor_;
}

const NetProto_DelItem& NetProto_DelItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DelItem* NetProto_DelItem::default_instance_ = NULL;

NetProto_DelItem* NetProto_DelItem::New() const {
  return new NetProto_DelItem;
}

void NetProto_DelItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DelItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DelItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DelItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DelItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DelItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DelItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DelItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DelItem::MergeFrom(const NetProto_DelItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DelItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DelItem::CopyFrom(const NetProto_DelItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DelItem::IsInitialized() const {
  
  return true;
}

void NetProto_DelItem::Swap(NetProto_DelItem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DelItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DelItem_descriptor_;
  metadata.reflection = NetProto_DelItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyVIP_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyVIP_ID_descriptor_;
}
bool NetProto_ModifyVIP_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 47:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyVIP_ID NetProto_ModifyVIP::GROUPID;
const NetProto_ModifyVIP_ID NetProto_ModifyVIP::UNITID;
const NetProto_ModifyVIP_ID NetProto_ModifyVIP::ID_MIN;
const NetProto_ModifyVIP_ID NetProto_ModifyVIP::ID_MAX;
const int NetProto_ModifyVIP::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyVIP::kPlayerFieldNumber;
const int NetProto_ModifyVIP::kVipFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyVIP::NetProto_ModifyVIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyVIP::InitAsDefaultInstance() {
}

NetProto_ModifyVIP::NetProto_ModifyVIP(const NetProto_ModifyVIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyVIP::SharedCtor() {
  _cached_size_ = 0;
  player_ = 0;
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyVIP::~NetProto_ModifyVIP() {
  SharedDtor();
}

void NetProto_ModifyVIP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyVIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyVIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyVIP_descriptor_;
}

const NetProto_ModifyVIP& NetProto_ModifyVIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyVIP* NetProto_ModifyVIP::default_instance_ = NULL;

NetProto_ModifyVIP* NetProto_ModifyVIP::New() const {
  return new NetProto_ModifyVIP;
}

void NetProto_ModifyVIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_ = 0;
    vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyVIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyVIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }
  
  // optional int32 vip = 2;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyVIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }
  
  // optional int32 vip = 2;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyVIP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }
    
    // optional int32 vip = 2;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyVIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyVIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyVIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyVIP::MergeFrom(const NetProto_ModifyVIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyVIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyVIP::CopyFrom(const NetProto_ModifyVIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyVIP::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyVIP::Swap(NetProto_ModifyVIP* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyVIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyVIP_descriptor_;
  metadata.reflection = NetProto_ModifyVIP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RandomGodTarget_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RandomGodTarget_ID_descriptor_;
}
bool NetProto_RandomGodTarget_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 48:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RandomGodTarget_ID NetProto_RandomGodTarget::GROUPID;
const NetProto_RandomGodTarget_ID NetProto_RandomGodTarget::UNITID;
const NetProto_RandomGodTarget_ID NetProto_RandomGodTarget::ID_MIN;
const NetProto_RandomGodTarget_ID NetProto_RandomGodTarget::ID_MAX;
const int NetProto_RandomGodTarget::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RandomGodTarget::kAttFieldNumber;
const int NetProto_RandomGodTarget::kEventFieldNumber;
#endif  // !_MSC_VER

NetProto_RandomGodTarget::NetProto_RandomGodTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RandomGodTarget::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

NetProto_RandomGodTarget::NetProto_RandomGodTarget(const NetProto_RandomGodTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RandomGodTarget::SharedCtor() {
  _cached_size_ = 0;
  att_ = NULL;
  event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RandomGodTarget::~NetProto_RandomGodTarget() {
  SharedDtor();
}

void NetProto_RandomGodTarget::SharedDtor() {
  if (this != default_instance_) {
    delete att_;
  }
}

void NetProto_RandomGodTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RandomGodTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RandomGodTarget_descriptor_;
}

const NetProto_RandomGodTarget& NetProto_RandomGodTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RandomGodTarget* NetProto_RandomGodTarget::default_instance_ = NULL;

NetProto_RandomGodTarget* NetProto_RandomGodTarget::New() const {
  return new NetProto_RandomGodTarget;
}

void NetProto_RandomGodTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_att()) {
      if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
    }
    event_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RandomGodTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_PlayerAtt att = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event;
        break;
      }
      
      // optional int32 event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RandomGodTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_PlayerAtt att = 1;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->att(), output);
  }
  
  // optional int32 event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RandomGodTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_PlayerAtt att = 1;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->att(), target);
  }
  
  // optional int32 event = 2;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RandomGodTarget::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_PlayerAtt att = 1;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional int32 event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RandomGodTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RandomGodTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RandomGodTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RandomGodTarget::MergeFrom(const NetProto_RandomGodTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_att()) {
      mutable_att()->::PB_PlayerAtt::MergeFrom(from.att());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RandomGodTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RandomGodTarget::CopyFrom(const NetProto_RandomGodTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RandomGodTarget::IsInitialized() const {
  
  return true;
}

void NetProto_RandomGodTarget::Swap(NetProto_RandomGodTarget* other) {
  if (other != this) {
    std::swap(att_, other->att_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RandomGodTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RandomGodTarget_descriptor_;
  metadata.reflection = NetProto_RandomGodTarget_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Inspire_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Inspire_ID_descriptor_;
}
bool NetProto_Inspire_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 49:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Inspire_ID NetProto_Inspire::GROUPID;
const NetProto_Inspire_ID NetProto_Inspire::UNITID;
const NetProto_Inspire_ID NetProto_Inspire::ID_MIN;
const NetProto_Inspire_ID NetProto_Inspire::ID_MAX;
const int NetProto_Inspire::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Inspire_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Inspire_Type_descriptor_;
}
bool NetProto_Inspire_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Inspire_Type NetProto_Inspire::ATK;
const NetProto_Inspire_Type NetProto_Inspire::DEF;
const NetProto_Inspire_Type NetProto_Inspire::SPECIAL;
const NetProto_Inspire_Type NetProto_Inspire::Type_MIN;
const NetProto_Inspire_Type NetProto_Inspire::Type_MAX;
const int NetProto_Inspire::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Inspire_Dest_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Inspire_Dest_descriptor_;
}
bool NetProto_Inspire_Dest_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Inspire_Dest NetProto_Inspire::GOD;
const NetProto_Inspire_Dest NetProto_Inspire::ONE_TO_ONE;
const NetProto_Inspire_Dest NetProto_Inspire::HELL;
const NetProto_Inspire_Dest NetProto_Inspire::WORLD_BOSS;
const NetProto_Inspire_Dest NetProto_Inspire::Dest_MIN;
const NetProto_Inspire_Dest NetProto_Inspire::Dest_MAX;
const int NetProto_Inspire::Dest_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Inspire::kTypeFieldNumber;
const int NetProto_Inspire::kDestFieldNumber;
#endif  // !_MSC_VER

NetProto_Inspire::NetProto_Inspire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Inspire::InitAsDefaultInstance() {
}

NetProto_Inspire::NetProto_Inspire(const NetProto_Inspire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Inspire::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  dest_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Inspire::~NetProto_Inspire() {
  SharedDtor();
}

void NetProto_Inspire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Inspire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Inspire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Inspire_descriptor_;
}

const NetProto_Inspire& NetProto_Inspire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Inspire* NetProto_Inspire::default_instance_ = NULL;

NetProto_Inspire* NetProto_Inspire::New() const {
  return new NetProto_Inspire;
}

void NetProto_Inspire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    dest_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Inspire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Inspire.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Inspire_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Inspire_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest;
        break;
      }
      
      // optional .NetProto_Inspire.Dest dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Inspire_Dest_IsValid(value)) {
            set_dest(static_cast< ::NetProto_Inspire_Dest >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Inspire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Inspire.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .NetProto_Inspire.Dest dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Inspire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Inspire.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .NetProto_Inspire.Dest dest = 2;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Inspire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Inspire.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .NetProto_Inspire.Dest dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Inspire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Inspire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Inspire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Inspire::MergeFrom(const NetProto_Inspire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Inspire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Inspire::CopyFrom(const NetProto_Inspire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Inspire::IsInitialized() const {
  
  return true;
}

void NetProto_Inspire::Swap(NetProto_Inspire* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(dest_, other->dest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Inspire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Inspire_descriptor_;
  metadata.reflection = NetProto_Inspire_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RequestGodTarget_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RequestGodTarget_ID_descriptor_;
}
bool NetProto_RequestGodTarget_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RequestGodTarget_ID NetProto_RequestGodTarget::GROUPID;
const NetProto_RequestGodTarget_ID NetProto_RequestGodTarget::UNITID;
const NetProto_RequestGodTarget_ID NetProto_RequestGodTarget::ID_MIN;
const NetProto_RequestGodTarget_ID NetProto_RequestGodTarget::ID_MAX;
const int NetProto_RequestGodTarget::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_RequestGodTarget::NetProto_RequestGodTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RequestGodTarget::InitAsDefaultInstance() {
}

NetProto_RequestGodTarget::NetProto_RequestGodTarget(const NetProto_RequestGodTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RequestGodTarget::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RequestGodTarget::~NetProto_RequestGodTarget() {
  SharedDtor();
}

void NetProto_RequestGodTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RequestGodTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RequestGodTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RequestGodTarget_descriptor_;
}

const NetProto_RequestGodTarget& NetProto_RequestGodTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RequestGodTarget* NetProto_RequestGodTarget::default_instance_ = NULL;

NetProto_RequestGodTarget* NetProto_RequestGodTarget::New() const {
  return new NetProto_RequestGodTarget;
}

void NetProto_RequestGodTarget::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RequestGodTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_RequestGodTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RequestGodTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RequestGodTarget::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RequestGodTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RequestGodTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RequestGodTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RequestGodTarget::MergeFrom(const NetProto_RequestGodTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RequestGodTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RequestGodTarget::CopyFrom(const NetProto_RequestGodTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RequestGodTarget::IsInitialized() const {
  
  return true;
}

void NetProto_RequestGodTarget::Swap(NetProto_RequestGodTarget* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RequestGodTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RequestGodTarget_descriptor_;
  metadata.reflection = NetProto_RequestGodTarget_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyGodScore_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyGodScore_ID_descriptor_;
}
bool NetProto_ModifyGodScore_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 51:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyGodScore_ID NetProto_ModifyGodScore::GROUPID;
const NetProto_ModifyGodScore_ID NetProto_ModifyGodScore::UNITID;
const NetProto_ModifyGodScore_ID NetProto_ModifyGodScore::ID_MIN;
const NetProto_ModifyGodScore_ID NetProto_ModifyGodScore::ID_MAX;
const int NetProto_ModifyGodScore::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyGodScore::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyGodScore::NetProto_ModifyGodScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyGodScore::InitAsDefaultInstance() {
}

NetProto_ModifyGodScore::NetProto_ModifyGodScore(const NetProto_ModifyGodScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyGodScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyGodScore::~NetProto_ModifyGodScore() {
  SharedDtor();
}

void NetProto_ModifyGodScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyGodScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyGodScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyGodScore_descriptor_;
}

const NetProto_ModifyGodScore& NetProto_ModifyGodScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyGodScore* NetProto_ModifyGodScore::default_instance_ = NULL;

NetProto_ModifyGodScore* NetProto_ModifyGodScore::New() const {
  return new NetProto_ModifyGodScore;
}

void NetProto_ModifyGodScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyGodScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyGodScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyGodScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyGodScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyGodScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyGodScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyGodScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyGodScore::MergeFrom(const NetProto_ModifyGodScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyGodScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyGodScore::CopyFrom(const NetProto_ModifyGodScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyGodScore::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyGodScore::Swap(NetProto_ModifyGodScore* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyGodScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyGodScore_descriptor_;
  metadata.reflection = NetProto_ModifyGodScore_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GodRank_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodRank_ID_descriptor_;
}
bool NetProto_GodRank_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 52:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GodRank_ID NetProto_GodRank::GROUPID;
const NetProto_GodRank_ID NetProto_GodRank::UNITID;
const NetProto_GodRank_ID NetProto_GodRank::ID_MIN;
const NetProto_GodRank_ID NetProto_GodRank::ID_MAX;
const int NetProto_GodRank::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GodRank::kSelfFieldNumber;
const int NetProto_GodRank::kTargetFieldNumber;
#endif  // !_MSC_VER

NetProto_GodRank::NetProto_GodRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GodRank::InitAsDefaultInstance() {
}

NetProto_GodRank::NetProto_GodRank(const NetProto_GodRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GodRank::SharedCtor() {
  _cached_size_ = 0;
  self_ = 0;
  target_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GodRank::~NetProto_GodRank() {
  SharedDtor();
}

void NetProto_GodRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GodRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GodRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodRank_descriptor_;
}

const NetProto_GodRank& NetProto_GodRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GodRank* NetProto_GodRank::default_instance_ = NULL;

NetProto_GodRank* NetProto_GodRank::New() const {
  return new NetProto_GodRank;
}

void NetProto_GodRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    self_ = 0;
    target_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GodRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 self = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_)));
          set_has_self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target;
        break;
      }
      
      // optional int32 target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GodRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 self = 1;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->self(), output);
  }
  
  // optional int32 target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GodRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 self = 1;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->self(), target);
  }
  
  // optional int32 target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GodRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 self = 1;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self());
    }
    
    // optional int32 target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GodRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GodRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GodRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GodRank::MergeFrom(const NetProto_GodRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self()) {
      set_self(from.self());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GodRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GodRank::CopyFrom(const NetProto_GodRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GodRank::IsInitialized() const {
  
  return true;
}

void NetProto_GodRank::Swap(NetProto_GodRank* other) {
  if (other != this) {
    std::swap(self_, other->self_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GodRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GodRank_descriptor_;
  metadata.reflection = NetProto_GodRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GetFashion_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetFashion_ID_descriptor_;
}
bool NetProto_GetFashion_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 53:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GetFashion_ID NetProto_GetFashion::GROUPID;
const NetProto_GetFashion_ID NetProto_GetFashion::UNITID;
const NetProto_GetFashion_ID NetProto_GetFashion::ID_MIN;
const NetProto_GetFashion_ID NetProto_GetFashion::ID_MAX;
const int NetProto_GetFashion::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GetFashion::kVFieldNumber;
const int NetProto_GetFashion::kPosFieldNumber;
#endif  // !_MSC_VER

NetProto_GetFashion::NetProto_GetFashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GetFashion::InitAsDefaultInstance() {
}

NetProto_GetFashion::NetProto_GetFashion(const NetProto_GetFashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GetFashion::SharedCtor() {
  _cached_size_ = 0;
  v_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GetFashion::~NetProto_GetFashion() {
  SharedDtor();
}

void NetProto_GetFashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GetFashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GetFashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetFashion_descriptor_;
}

const NetProto_GetFashion& NetProto_GetFashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GetFashion* NetProto_GetFashion::default_instance_ = NULL;

NetProto_GetFashion* NetProto_GetFashion::New() const {
  return new NetProto_GetFashion;
}

void NetProto_GetFashion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GetFashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 v = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GetFashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 v = 1;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v(), output);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GetFashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 v = 1;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v(), target);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GetFashion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 v = 1;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }
    
    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GetFashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GetFashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GetFashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GetFashion::MergeFrom(const NetProto_GetFashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GetFashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GetFashion::CopyFrom(const NetProto_GetFashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GetFashion::IsInitialized() const {
  
  return true;
}

void NetProto_GetFashion::Swap(NetProto_GetFashion* other) {
  if (other != this) {
    std::swap(v_, other->v_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GetFashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GetFashion_descriptor_;
  metadata.reflection = NetProto_GetFashion_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SyncAtt_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SyncAtt_ID_descriptor_;
}
bool NetProto_SyncAtt_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SyncAtt_ID NetProto_SyncAtt::GROUPID;
const NetProto_SyncAtt_ID NetProto_SyncAtt::UNITID;
const NetProto_SyncAtt_ID NetProto_SyncAtt::ID_MIN;
const NetProto_SyncAtt_ID NetProto_SyncAtt::ID_MAX;
const int NetProto_SyncAtt::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SyncAtt::kPropertiesFieldNumber;
const int NetProto_SyncAtt::kPropertiesDeltaFieldNumber;
const int NetProto_SyncAtt::kIndexFieldNumber;
const int NetProto_SyncAtt::kTimeFieldNumber;
const int NetProto_SyncAtt::kMd5FieldNumber;
#endif  // !_MSC_VER

NetProto_SyncAtt::NetProto_SyncAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SyncAtt::InitAsDefaultInstance() {
}

NetProto_SyncAtt::NetProto_SyncAtt(const NetProto_SyncAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SyncAtt::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SyncAtt::~NetProto_SyncAtt() {
  SharedDtor();
}

void NetProto_SyncAtt::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_SyncAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SyncAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SyncAtt_descriptor_;
}

const NetProto_SyncAtt& NetProto_SyncAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SyncAtt* NetProto_SyncAtt::default_instance_ = NULL;

NetProto_SyncAtt* NetProto_SyncAtt::New() const {
  return new NetProto_SyncAtt;
}

void NetProto_SyncAtt::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    index_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
  }
  properties_.Clear();
  propertiesDelta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SyncAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 properties = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_properties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_properties())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_properties())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_properties;
        if (input->ExpectTag(18)) goto parse_propertiesDelta;
        break;
      }
      
      // repeated .PB_FightPropertyDelta propertiesDelta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propertiesDelta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propertiesDelta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_propertiesDelta;
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_md5;
        break;
      }
      
      // optional string md5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SyncAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 properties = 1;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->properties(i), output);
  }
  
  // repeated .PB_FightPropertyDelta propertiesDelta = 2;
  for (int i = 0; i < this->propertiesDelta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->propertiesDelta(i), output);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }
  
  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->md5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SyncAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 properties = 1;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->properties(i), target);
  }
  
  // repeated .PB_FightPropertyDelta propertiesDelta = 2;
  for (int i = 0; i < this->propertiesDelta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->propertiesDelta(i), target);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }
  
  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->md5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SyncAtt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional string md5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }
    
  }
  // repeated int32 properties = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->properties_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->properties(i));
    }
    total_size += 1 * this->properties_size() + data_size;
  }
  
  // repeated .PB_FightPropertyDelta propertiesDelta = 2;
  total_size += 1 * this->propertiesDelta_size();
  for (int i = 0; i < this->propertiesDelta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propertiesDelta(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SyncAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SyncAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SyncAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SyncAtt::MergeFrom(const NetProto_SyncAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  propertiesDelta_.MergeFrom(from.propertiesDelta_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SyncAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SyncAtt::CopyFrom(const NetProto_SyncAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SyncAtt::IsInitialized() const {
  
  return true;
}

void NetProto_SyncAtt::Swap(NetProto_SyncAtt* other) {
  if (other != this) {
    properties_.Swap(&other->properties_);
    propertiesDelta_.Swap(&other->propertiesDelta_);
    std::swap(index_, other->index_);
    std::swap(time_, other->time_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SyncAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SyncAtt_descriptor_;
  metadata.reflection = NetProto_SyncAtt_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifySubRMB_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifySubRMB_ID_descriptor_;
}
bool NetProto_ModifySubRMB_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 55:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifySubRMB_ID NetProto_ModifySubRMB::GROUPID;
const NetProto_ModifySubRMB_ID NetProto_ModifySubRMB::UNITID;
const NetProto_ModifySubRMB_ID NetProto_ModifySubRMB::ID_MIN;
const NetProto_ModifySubRMB_ID NetProto_ModifySubRMB::ID_MAX;
const int NetProto_ModifySubRMB::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifySubRMB::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifySubRMB::NetProto_ModifySubRMB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifySubRMB::InitAsDefaultInstance() {
}

NetProto_ModifySubRMB::NetProto_ModifySubRMB(const NetProto_ModifySubRMB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifySubRMB::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifySubRMB::~NetProto_ModifySubRMB() {
  SharedDtor();
}

void NetProto_ModifySubRMB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifySubRMB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifySubRMB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifySubRMB_descriptor_;
}

const NetProto_ModifySubRMB& NetProto_ModifySubRMB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifySubRMB* NetProto_ModifySubRMB::default_instance_ = NULL;

NetProto_ModifySubRMB* NetProto_ModifySubRMB::New() const {
  return new NetProto_ModifySubRMB;
}

void NetProto_ModifySubRMB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifySubRMB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifySubRMB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifySubRMB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifySubRMB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifySubRMB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifySubRMB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifySubRMB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifySubRMB::MergeFrom(const NetProto_ModifySubRMB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifySubRMB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifySubRMB::CopyFrom(const NetProto_ModifySubRMB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifySubRMB::IsInitialized() const {
  
  return true;
}

void NetProto_ModifySubRMB::Swap(NetProto_ModifySubRMB* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifySubRMB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifySubRMB_descriptor_;
  metadata.reflection = NetProto_ModifySubRMB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GenEquip_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenEquip_ID_descriptor_;
}
bool NetProto_GenEquip_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 56:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GenEquip_ID NetProto_GenEquip::GROUPID;
const NetProto_GenEquip_ID NetProto_GenEquip::UNITID;
const NetProto_GenEquip_ID NetProto_GenEquip::ID_MIN;
const NetProto_GenEquip_ID NetProto_GenEquip::ID_MAX;
const int NetProto_GenEquip::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GenEquip::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_GenEquip::NetProto_GenEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GenEquip::InitAsDefaultInstance() {
}

NetProto_GenEquip::NetProto_GenEquip(const NetProto_GenEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GenEquip::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GenEquip::~NetProto_GenEquip() {
  SharedDtor();
}

void NetProto_GenEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GenEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GenEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenEquip_descriptor_;
}

const NetProto_GenEquip& NetProto_GenEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GenEquip* NetProto_GenEquip::default_instance_ = NULL;

NetProto_GenEquip* NetProto_GenEquip::New() const {
  return new NetProto_GenEquip;
}

void NetProto_GenEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GenEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GenEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GenEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GenEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GenEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GenEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GenEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GenEquip::MergeFrom(const NetProto_GenEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GenEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GenEquip::CopyFrom(const NetProto_GenEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GenEquip::IsInitialized() const {
  
  return true;
}

void NetProto_GenEquip::Swap(NetProto_GenEquip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GenEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GenEquip_descriptor_;
  metadata.reflection = NetProto_GenEquip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GenGem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenGem_ID_descriptor_;
}
bool NetProto_GenGem_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 57:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GenGem_ID NetProto_GenGem::GROUPID;
const NetProto_GenGem_ID NetProto_GenGem::UNITID;
const NetProto_GenGem_ID NetProto_GenGem::ID_MIN;
const NetProto_GenGem_ID NetProto_GenGem::ID_MAX;
const int NetProto_GenGem::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_GenGem_Way_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenGem_Way_descriptor_;
}
bool NetProto_GenGem_Way_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GenGem_Way NetProto_GenGem::NEXT_LEVEL;
const NetProto_GenGem_Way NetProto_GenGem::TOP_LEVEL;
const NetProto_GenGem_Way NetProto_GenGem::ALL_TOP_LEVEL;
const NetProto_GenGem_Way NetProto_GenGem::Way_MIN;
const NetProto_GenGem_Way NetProto_GenGem::Way_MAX;
const int NetProto_GenGem::Way_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GenGem::kWayFieldNumber;
const int NetProto_GenGem::kTypeFieldNumber;
const int NetProto_GenGem::kLevelFieldNumber;
const int NetProto_GenGem::kResultsFieldNumber;
const int NetProto_GenGem::kSuccessFieldNumber;
const int NetProto_GenGem::kFailFieldNumber;
#endif  // !_MSC_VER

NetProto_GenGem::NetProto_GenGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GenGem::InitAsDefaultInstance() {
}

NetProto_GenGem::NetProto_GenGem(const NetProto_GenGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GenGem::SharedCtor() {
  _cached_size_ = 0;
  way_ = 0;
  type_ = 0;
  level_ = 0;
  success_ = 0;
  fail_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GenGem::~NetProto_GenGem() {
  SharedDtor();
}

void NetProto_GenGem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GenGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GenGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenGem_descriptor_;
}

const NetProto_GenGem& NetProto_GenGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GenGem* NetProto_GenGem::default_instance_ = NULL;

NetProto_GenGem* NetProto_GenGem::New() const {
  return new NetProto_GenGem;
}

void NetProto_GenGem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    way_ = 0;
    type_ = 0;
    level_ = 0;
    success_ = 0;
    fail_ = 0;
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GenGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GenGem.Way way = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_GenGem_Way_IsValid(value)) {
            set_way(static_cast< ::NetProto_GenGem_Way >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_results;
        break;
      }
      
      // repeated .PB_ItemInfo results = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_results;
        if (input->ExpectTag(40)) goto parse_success;
        break;
      }
      
      // optional int32 success = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fail;
        break;
      }
      
      // optional int32 fail = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_)));
          set_has_fail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GenGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GenGem.Way way = 1;
  if (has_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->way(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // repeated .PB_ItemInfo results = 4;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->results(i), output);
  }
  
  // optional int32 success = 5;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->success(), output);
  }
  
  // optional int32 fail = 6;
  if (has_fail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GenGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GenGem.Way way = 1;
  if (has_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->way(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // repeated .PB_ItemInfo results = 4;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->results(i), target);
  }
  
  // optional int32 success = 5;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->success(), target);
  }
  
  // optional int32 fail = 6;
  if (has_fail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GenGem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GenGem.Way way = 1;
    if (has_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->way());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 success = 5;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }
    
    // optional int32 fail = 6;
    if (has_fail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail());
    }
    
  }
  // repeated .PB_ItemInfo results = 4;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GenGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GenGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GenGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GenGem::MergeFrom(const NetProto_GenGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_way()) {
      set_way(from.way());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_fail()) {
      set_fail(from.fail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GenGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GenGem::CopyFrom(const NetProto_GenGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GenGem::IsInitialized() const {
  
  return true;
}

void NetProto_GenGem::Swap(NetProto_GenGem* other) {
  if (other != this) {
    std::swap(way_, other->way_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    results_.Swap(&other->results_);
    std::swap(success_, other->success_);
    std::swap(fail_, other->fail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GenGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GenGem_descriptor_;
  metadata.reflection = NetProto_GenGem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UnlockHole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnlockHole_ID_descriptor_;
}
bool NetProto_UnlockHole_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 58:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UnlockHole_ID NetProto_UnlockHole::GROUPID;
const NetProto_UnlockHole_ID NetProto_UnlockHole::UNITID;
const NetProto_UnlockHole_ID NetProto_UnlockHole::ID_MIN;
const NetProto_UnlockHole_ID NetProto_UnlockHole::ID_MAX;
const int NetProto_UnlockHole::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_UnlockHole_Pos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnlockHole_Pos_descriptor_;
}
bool NetProto_UnlockHole_Pos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UnlockHole_Pos NetProto_UnlockHole::BODY;
const NetProto_UnlockHole_Pos NetProto_UnlockHole::PACKAGE;
const NetProto_UnlockHole_Pos NetProto_UnlockHole::Pos_MIN;
const NetProto_UnlockHole_Pos NetProto_UnlockHole::Pos_MAX;
const int NetProto_UnlockHole::Pos_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_UnlockHole::kPosFieldNumber;
const int NetProto_UnlockHole::kIdFieldNumber;
const int NetProto_UnlockHole::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_UnlockHole::NetProto_UnlockHole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UnlockHole::InitAsDefaultInstance() {
}

NetProto_UnlockHole::NetProto_UnlockHole(const NetProto_UnlockHole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UnlockHole::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UnlockHole::~NetProto_UnlockHole() {
  SharedDtor();
}

void NetProto_UnlockHole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UnlockHole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UnlockHole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnlockHole_descriptor_;
}

const NetProto_UnlockHole& NetProto_UnlockHole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UnlockHole* NetProto_UnlockHole::default_instance_ = NULL;

NetProto_UnlockHole* NetProto_UnlockHole::New() const {
  return new NetProto_UnlockHole;
}

void NetProto_UnlockHole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UnlockHole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_UnlockHole.Pos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_UnlockHole_Pos_IsValid(value)) {
            set_pos(static_cast< ::NetProto_UnlockHole_Pos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_UnlockHole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_UnlockHole.Pos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UnlockHole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_UnlockHole.Pos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UnlockHole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_UnlockHole.Pos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UnlockHole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UnlockHole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UnlockHole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UnlockHole::MergeFrom(const NetProto_UnlockHole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UnlockHole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UnlockHole::CopyFrom(const NetProto_UnlockHole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UnlockHole::IsInitialized() const {
  
  return true;
}

void NetProto_UnlockHole::Swap(NetProto_UnlockHole* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UnlockHole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UnlockHole_descriptor_;
  metadata.reflection = NetProto_UnlockHole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UnmountGem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnmountGem_ID_descriptor_;
}
bool NetProto_UnmountGem_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 59:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UnmountGem_ID NetProto_UnmountGem::GROUPID;
const NetProto_UnmountGem_ID NetProto_UnmountGem::UNITID;
const NetProto_UnmountGem_ID NetProto_UnmountGem::ID_MIN;
const NetProto_UnmountGem_ID NetProto_UnmountGem::ID_MAX;
const int NetProto_UnmountGem::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_UnmountGem_Pos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnmountGem_Pos_descriptor_;
}
bool NetProto_UnmountGem_Pos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UnmountGem_Pos NetProto_UnmountGem::BODY;
const NetProto_UnmountGem_Pos NetProto_UnmountGem::PACKAGE;
const NetProto_UnmountGem_Pos NetProto_UnmountGem::Pos_MIN;
const NetProto_UnmountGem_Pos NetProto_UnmountGem::Pos_MAX;
const int NetProto_UnmountGem::Pos_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_UnmountGem::kPosFieldNumber;
const int NetProto_UnmountGem::kIdFieldNumber;
const int NetProto_UnmountGem::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_UnmountGem::NetProto_UnmountGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UnmountGem::InitAsDefaultInstance() {
}

NetProto_UnmountGem::NetProto_UnmountGem(const NetProto_UnmountGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UnmountGem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UnmountGem::~NetProto_UnmountGem() {
  SharedDtor();
}

void NetProto_UnmountGem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UnmountGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UnmountGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnmountGem_descriptor_;
}

const NetProto_UnmountGem& NetProto_UnmountGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UnmountGem* NetProto_UnmountGem::default_instance_ = NULL;

NetProto_UnmountGem* NetProto_UnmountGem::New() const {
  return new NetProto_UnmountGem;
}

void NetProto_UnmountGem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UnmountGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_UnmountGem.Pos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_UnmountGem_Pos_IsValid(value)) {
            set_pos(static_cast< ::NetProto_UnmountGem_Pos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_UnmountGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_UnmountGem.Pos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UnmountGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_UnmountGem.Pos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UnmountGem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_UnmountGem.Pos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UnmountGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UnmountGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UnmountGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UnmountGem::MergeFrom(const NetProto_UnmountGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UnmountGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UnmountGem::CopyFrom(const NetProto_UnmountGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UnmountGem::IsInitialized() const {
  
  return true;
}

void NetProto_UnmountGem::Swap(NetProto_UnmountGem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UnmountGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UnmountGem_descriptor_;
  metadata.reflection = NetProto_UnmountGem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_EnhanceDelta_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EnhanceDelta_ID_descriptor_;
}
bool NetProto_EnhanceDelta_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 60:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EnhanceDelta_ID NetProto_EnhanceDelta::GROUPID;
const NetProto_EnhanceDelta_ID NetProto_EnhanceDelta::UNITID;
const NetProto_EnhanceDelta_ID NetProto_EnhanceDelta::ID_MIN;
const NetProto_EnhanceDelta_ID NetProto_EnhanceDelta::ID_MAX;
const int NetProto_EnhanceDelta::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_EnhanceDelta_Pos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EnhanceDelta_Pos_descriptor_;
}
bool NetProto_EnhanceDelta_Pos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EnhanceDelta_Pos NetProto_EnhanceDelta::BODY;
const NetProto_EnhanceDelta_Pos NetProto_EnhanceDelta::PACKAGE;
const NetProto_EnhanceDelta_Pos NetProto_EnhanceDelta::Pos_MIN;
const NetProto_EnhanceDelta_Pos NetProto_EnhanceDelta::Pos_MAX;
const int NetProto_EnhanceDelta::Pos_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_EnhanceDelta::kPosFieldNumber;
const int NetProto_EnhanceDelta::kIdFieldNumber;
const int NetProto_EnhanceDelta::kTenFieldNumber;
const int NetProto_EnhanceDelta::kDeltaFieldNumber;
#endif  // !_MSC_VER

NetProto_EnhanceDelta::NetProto_EnhanceDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_EnhanceDelta::InitAsDefaultInstance() {
}

NetProto_EnhanceDelta::NetProto_EnhanceDelta(const NetProto_EnhanceDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_EnhanceDelta::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  id_ = 0;
  ten_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_EnhanceDelta::~NetProto_EnhanceDelta() {
  SharedDtor();
}

void NetProto_EnhanceDelta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_EnhanceDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_EnhanceDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EnhanceDelta_descriptor_;
}

const NetProto_EnhanceDelta& NetProto_EnhanceDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_EnhanceDelta* NetProto_EnhanceDelta::default_instance_ = NULL;

NetProto_EnhanceDelta* NetProto_EnhanceDelta::New() const {
  return new NetProto_EnhanceDelta;
}

void NetProto_EnhanceDelta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    id_ = 0;
    ten_ = false;
  }
  delta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_EnhanceDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_EnhanceDelta.Pos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_EnhanceDelta_Pos_IsValid(value)) {
            set_pos(static_cast< ::NetProto_EnhanceDelta_Pos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ten;
        break;
      }
      
      // optional bool ten = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ten_)));
          set_has_ten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delta;
        break;
      }
      
      // repeated int32 delta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_delta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_delta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delta;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_EnhanceDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_EnhanceDelta.Pos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional bool ten = 3;
  if (has_ten()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ten(), output);
  }
  
  // repeated int32 delta = 4;
  for (int i = 0; i < this->delta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->delta(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_EnhanceDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_EnhanceDelta.Pos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional bool ten = 3;
  if (has_ten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ten(), target);
  }
  
  // repeated int32 delta = 4;
  for (int i = 0; i < this->delta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->delta(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_EnhanceDelta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_EnhanceDelta.Pos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool ten = 3;
    if (has_ten()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 delta = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->delta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->delta(i));
    }
    total_size += 1 * this->delta_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_EnhanceDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_EnhanceDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_EnhanceDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_EnhanceDelta::MergeFrom(const NetProto_EnhanceDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  delta_.MergeFrom(from.delta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ten()) {
      set_ten(from.ten());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_EnhanceDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_EnhanceDelta::CopyFrom(const NetProto_EnhanceDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_EnhanceDelta::IsInitialized() const {
  
  return true;
}

void NetProto_EnhanceDelta::Swap(NetProto_EnhanceDelta* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(id_, other->id_);
    std::swap(ten_, other->ten_);
    delta_.Swap(&other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_EnhanceDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_EnhanceDelta_descriptor_;
  metadata.reflection = NetProto_EnhanceDelta_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Enhance_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Enhance_ID_descriptor_;
}
bool NetProto_Enhance_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 61:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Enhance_ID NetProto_Enhance::GROUPID;
const NetProto_Enhance_ID NetProto_Enhance::UNITID;
const NetProto_Enhance_ID NetProto_Enhance::ID_MIN;
const NetProto_Enhance_ID NetProto_Enhance::ID_MAX;
const int NetProto_Enhance::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Enhance_Pos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Enhance_Pos_descriptor_;
}
bool NetProto_Enhance_Pos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Enhance_Pos NetProto_Enhance::BODY;
const NetProto_Enhance_Pos NetProto_Enhance::PACKAGE;
const NetProto_Enhance_Pos NetProto_Enhance::Pos_MIN;
const NetProto_Enhance_Pos NetProto_Enhance::Pos_MAX;
const int NetProto_Enhance::Pos_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Enhance::kPosFieldNumber;
const int NetProto_Enhance::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_Enhance::NetProto_Enhance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Enhance::InitAsDefaultInstance() {
}

NetProto_Enhance::NetProto_Enhance(const NetProto_Enhance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Enhance::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Enhance::~NetProto_Enhance() {
  SharedDtor();
}

void NetProto_Enhance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Enhance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Enhance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Enhance_descriptor_;
}

const NetProto_Enhance& NetProto_Enhance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Enhance* NetProto_Enhance::default_instance_ = NULL;

NetProto_Enhance* NetProto_Enhance::New() const {
  return new NetProto_Enhance;
}

void NetProto_Enhance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Enhance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Enhance.Pos pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Enhance_Pos_IsValid(value)) {
            set_pos(static_cast< ::NetProto_Enhance_Pos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Enhance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Enhance.Pos pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Enhance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Enhance.Pos pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Enhance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Enhance.Pos pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Enhance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Enhance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Enhance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Enhance::MergeFrom(const NetProto_Enhance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Enhance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Enhance::CopyFrom(const NetProto_Enhance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Enhance::IsInitialized() const {
  
  return true;
}

void NetProto_Enhance::Swap(NetProto_Enhance* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Enhance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Enhance_descriptor_;
  metadata.reflection = NetProto_Enhance_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Inherit_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Inherit_ID_descriptor_;
}
bool NetProto_Inherit_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 62:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Inherit_ID NetProto_Inherit::GROUPID;
const NetProto_Inherit_ID NetProto_Inherit::UNITID;
const NetProto_Inherit_ID NetProto_Inherit::ID_MIN;
const NetProto_Inherit_ID NetProto_Inherit::ID_MAX;
const int NetProto_Inherit::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Inherit_Pos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Inherit_Pos_descriptor_;
}
bool NetProto_Inherit_Pos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Inherit_Pos NetProto_Inherit::BODY;
const NetProto_Inherit_Pos NetProto_Inherit::PACKAGE;
const NetProto_Inherit_Pos NetProto_Inherit::Pos_MIN;
const NetProto_Inherit_Pos NetProto_Inherit::Pos_MAX;
const int NetProto_Inherit::Pos_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Inherit::kParentPosFieldNumber;
const int NetProto_Inherit::kParentIDFieldNumber;
const int NetProto_Inherit::kChildPosFieldNumber;
const int NetProto_Inherit::kChildIDFieldNumber;
const int NetProto_Inherit::kUseRMBFieldNumber;
#endif  // !_MSC_VER

NetProto_Inherit::NetProto_Inherit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Inherit::InitAsDefaultInstance() {
}

NetProto_Inherit::NetProto_Inherit(const NetProto_Inherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Inherit::SharedCtor() {
  _cached_size_ = 0;
  parentPos_ = 0;
  parentID_ = 0;
  childPos_ = 0;
  childID_ = 0;
  useRMB_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Inherit::~NetProto_Inherit() {
  SharedDtor();
}

void NetProto_Inherit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Inherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Inherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Inherit_descriptor_;
}

const NetProto_Inherit& NetProto_Inherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Inherit* NetProto_Inherit::default_instance_ = NULL;

NetProto_Inherit* NetProto_Inherit::New() const {
  return new NetProto_Inherit;
}

void NetProto_Inherit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    parentPos_ = 0;
    parentID_ = 0;
    childPos_ = 0;
    childID_ = 0;
    useRMB_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Inherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Inherit.Pos parentPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Inherit_Pos_IsValid(value)) {
            set_parentPos(static_cast< ::NetProto_Inherit_Pos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parentID;
        break;
      }
      
      // optional int32 parentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentID_)));
          set_has_parentID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_childPos;
        break;
      }
      
      // optional .NetProto_Inherit.Pos childPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_childPos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Inherit_Pos_IsValid(value)) {
            set_childPos(static_cast< ::NetProto_Inherit_Pos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_childID;
        break;
      }
      
      // optional int32 childID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_childID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childID_)));
          set_has_childID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useRMB;
        break;
      }
      
      // optional bool useRMB = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useRMB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useRMB_)));
          set_has_useRMB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Inherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Inherit.Pos parentPos = 1;
  if (has_parentPos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->parentPos(), output);
  }
  
  // optional int32 parentID = 2;
  if (has_parentID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parentID(), output);
  }
  
  // optional .NetProto_Inherit.Pos childPos = 3;
  if (has_childPos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->childPos(), output);
  }
  
  // optional int32 childID = 4;
  if (has_childID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->childID(), output);
  }
  
  // optional bool useRMB = 5;
  if (has_useRMB()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->useRMB(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Inherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Inherit.Pos parentPos = 1;
  if (has_parentPos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->parentPos(), target);
  }
  
  // optional int32 parentID = 2;
  if (has_parentID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parentID(), target);
  }
  
  // optional .NetProto_Inherit.Pos childPos = 3;
  if (has_childPos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->childPos(), target);
  }
  
  // optional int32 childID = 4;
  if (has_childID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->childID(), target);
  }
  
  // optional bool useRMB = 5;
  if (has_useRMB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->useRMB(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Inherit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Inherit.Pos parentPos = 1;
    if (has_parentPos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->parentPos());
    }
    
    // optional int32 parentID = 2;
    if (has_parentID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentID());
    }
    
    // optional .NetProto_Inherit.Pos childPos = 3;
    if (has_childPos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->childPos());
    }
    
    // optional int32 childID = 4;
    if (has_childID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childID());
    }
    
    // optional bool useRMB = 5;
    if (has_useRMB()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Inherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Inherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Inherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Inherit::MergeFrom(const NetProto_Inherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parentPos()) {
      set_parentPos(from.parentPos());
    }
    if (from.has_parentID()) {
      set_parentID(from.parentID());
    }
    if (from.has_childPos()) {
      set_childPos(from.childPos());
    }
    if (from.has_childID()) {
      set_childID(from.childID());
    }
    if (from.has_useRMB()) {
      set_useRMB(from.useRMB());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Inherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Inherit::CopyFrom(const NetProto_Inherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Inherit::IsInitialized() const {
  
  return true;
}

void NetProto_Inherit::Swap(NetProto_Inherit* other) {
  if (other != this) {
    std::swap(parentPos_, other->parentPos_);
    std::swap(parentID_, other->parentID_);
    std::swap(childPos_, other->childPos_);
    std::swap(childID_, other->childID_);
    std::swap(useRMB_, other->useRMB_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Inherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Inherit_descriptor_;
  metadata.reflection = NetProto_Inherit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_StrongBaseWing_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StrongBaseWing_ID_descriptor_;
}
bool NetProto_StrongBaseWing_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 63:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StrongBaseWing_ID NetProto_StrongBaseWing::GROUPID;
const NetProto_StrongBaseWing_ID NetProto_StrongBaseWing::UNITID;
const NetProto_StrongBaseWing_ID NetProto_StrongBaseWing::ID_MIN;
const NetProto_StrongBaseWing_ID NetProto_StrongBaseWing::ID_MAX;
const int NetProto_StrongBaseWing::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_StrongBaseWing::kUseRMBFieldNumber;
#endif  // !_MSC_VER

NetProto_StrongBaseWing::NetProto_StrongBaseWing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_StrongBaseWing::InitAsDefaultInstance() {
}

NetProto_StrongBaseWing::NetProto_StrongBaseWing(const NetProto_StrongBaseWing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_StrongBaseWing::SharedCtor() {
  _cached_size_ = 0;
  useRMB_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_StrongBaseWing::~NetProto_StrongBaseWing() {
  SharedDtor();
}

void NetProto_StrongBaseWing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_StrongBaseWing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_StrongBaseWing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StrongBaseWing_descriptor_;
}

const NetProto_StrongBaseWing& NetProto_StrongBaseWing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_StrongBaseWing* NetProto_StrongBaseWing::default_instance_ = NULL;

NetProto_StrongBaseWing* NetProto_StrongBaseWing::New() const {
  return new NetProto_StrongBaseWing;
}

void NetProto_StrongBaseWing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    useRMB_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_StrongBaseWing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool useRMB = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useRMB_)));
          set_has_useRMB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_StrongBaseWing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool useRMB = 1;
  if (has_useRMB()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->useRMB(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_StrongBaseWing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool useRMB = 1;
  if (has_useRMB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->useRMB(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_StrongBaseWing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool useRMB = 1;
    if (has_useRMB()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_StrongBaseWing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_StrongBaseWing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_StrongBaseWing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_StrongBaseWing::MergeFrom(const NetProto_StrongBaseWing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useRMB()) {
      set_useRMB(from.useRMB());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_StrongBaseWing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_StrongBaseWing::CopyFrom(const NetProto_StrongBaseWing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_StrongBaseWing::IsInitialized() const {
  
  return true;
}

void NetProto_StrongBaseWing::Swap(NetProto_StrongBaseWing* other) {
  if (other != this) {
    std::swap(useRMB_, other->useRMB_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_StrongBaseWing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_StrongBaseWing_descriptor_;
  metadata.reflection = NetProto_StrongBaseWing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BuyWing_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyWing_ID_descriptor_;
}
bool NetProto_BuyWing_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 64:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BuyWing_ID NetProto_BuyWing::GROUPID;
const NetProto_BuyWing_ID NetProto_BuyWing::UNITID;
const NetProto_BuyWing_ID NetProto_BuyWing::ID_MIN;
const NetProto_BuyWing_ID NetProto_BuyWing::ID_MAX;
const int NetProto_BuyWing::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BuyWing::kIdFieldNumber;
const int NetProto_BuyWing::kForeverFieldNumber;
#endif  // !_MSC_VER

NetProto_BuyWing::NetProto_BuyWing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BuyWing::InitAsDefaultInstance() {
}

NetProto_BuyWing::NetProto_BuyWing(const NetProto_BuyWing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BuyWing::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  forever_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BuyWing::~NetProto_BuyWing() {
  SharedDtor();
}

void NetProto_BuyWing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BuyWing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BuyWing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyWing_descriptor_;
}

const NetProto_BuyWing& NetProto_BuyWing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BuyWing* NetProto_BuyWing::default_instance_ = NULL;

NetProto_BuyWing* NetProto_BuyWing::New() const {
  return new NetProto_BuyWing;
}

void NetProto_BuyWing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    forever_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BuyWing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_forever;
        break;
      }
      
      // optional bool forever = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forever_)));
          set_has_forever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BuyWing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional bool forever = 2;
  if (has_forever()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->forever(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BuyWing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional bool forever = 2;
  if (has_forever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->forever(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BuyWing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool forever = 2;
    if (has_forever()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BuyWing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BuyWing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BuyWing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BuyWing::MergeFrom(const NetProto_BuyWing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_forever()) {
      set_forever(from.forever());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BuyWing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BuyWing::CopyFrom(const NetProto_BuyWing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BuyWing::IsInitialized() const {
  
  return true;
}

void NetProto_BuyWing::Swap(NetProto_BuyWing* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(forever_, other->forever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BuyWing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BuyWing_descriptor_;
  metadata.reflection = NetProto_BuyWing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_WearWing_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_WearWing_ID_descriptor_;
}
bool NetProto_WearWing_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 65:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_WearWing_ID NetProto_WearWing::GROUPID;
const NetProto_WearWing_ID NetProto_WearWing::UNITID;
const NetProto_WearWing_ID NetProto_WearWing::ID_MIN;
const NetProto_WearWing_ID NetProto_WearWing::ID_MAX;
const int NetProto_WearWing::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_WearWing::kIdFieldNumber;
const int NetProto_WearWing::kBaseWingFieldNumber;
#endif  // !_MSC_VER

NetProto_WearWing::NetProto_WearWing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_WearWing::InitAsDefaultInstance() {
}

NetProto_WearWing::NetProto_WearWing(const NetProto_WearWing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_WearWing::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  baseWing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_WearWing::~NetProto_WearWing() {
  SharedDtor();
}

void NetProto_WearWing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_WearWing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_WearWing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_WearWing_descriptor_;
}

const NetProto_WearWing& NetProto_WearWing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_WearWing* NetProto_WearWing::default_instance_ = NULL;

NetProto_WearWing* NetProto_WearWing::New() const {
  return new NetProto_WearWing;
}

void NetProto_WearWing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    baseWing_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_WearWing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_baseWing;
        break;
      }
      
      // optional bool baseWing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseWing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &baseWing_)));
          set_has_baseWing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_WearWing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional bool baseWing = 2;
  if (has_baseWing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->baseWing(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_WearWing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional bool baseWing = 2;
  if (has_baseWing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->baseWing(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_WearWing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool baseWing = 2;
    if (has_baseWing()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_WearWing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_WearWing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_WearWing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_WearWing::MergeFrom(const NetProto_WearWing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_baseWing()) {
      set_baseWing(from.baseWing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_WearWing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_WearWing::CopyFrom(const NetProto_WearWing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_WearWing::IsInitialized() const {
  
  return true;
}

void NetProto_WearWing::Swap(NetProto_WearWing* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(baseWing_, other->baseWing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_WearWing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_WearWing_descriptor_;
  metadata.reflection = NetProto_WearWing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GetWing_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetWing_ID_descriptor_;
}
bool NetProto_GetWing_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 66:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GetWing_ID NetProto_GetWing::GROUPID;
const NetProto_GetWing_ID NetProto_GetWing::UNITID;
const NetProto_GetWing_ID NetProto_GetWing::ID_MIN;
const NetProto_GetWing_ID NetProto_GetWing::ID_MAX;
const int NetProto_GetWing::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GetWing::kVFieldNumber;
const int NetProto_GetWing::kPosFieldNumber;
#endif  // !_MSC_VER

NetProto_GetWing::NetProto_GetWing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GetWing::InitAsDefaultInstance() {
}

NetProto_GetWing::NetProto_GetWing(const NetProto_GetWing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GetWing::SharedCtor() {
  _cached_size_ = 0;
  v_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GetWing::~NetProto_GetWing() {
  SharedDtor();
}

void NetProto_GetWing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GetWing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GetWing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetWing_descriptor_;
}

const NetProto_GetWing& NetProto_GetWing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GetWing* NetProto_GetWing::default_instance_ = NULL;

NetProto_GetWing* NetProto_GetWing::New() const {
  return new NetProto_GetWing;
}

void NetProto_GetWing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GetWing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 v = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GetWing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 v = 1;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v(), output);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GetWing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 v = 1;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v(), target);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GetWing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 v = 1;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }
    
    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GetWing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GetWing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GetWing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GetWing::MergeFrom(const NetProto_GetWing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GetWing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GetWing::CopyFrom(const NetProto_GetWing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GetWing::IsInitialized() const {
  
  return true;
}

void NetProto_GetWing::Swap(NetProto_GetWing* other) {
  if (other != this) {
    std::swap(v_, other->v_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GetWing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GetWing_descriptor_;
  metadata.reflection = NetProto_GetWing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BuyFashion_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyFashion_ID_descriptor_;
}
bool NetProto_BuyFashion_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 67:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BuyFashion_ID NetProto_BuyFashion::GROUPID;
const NetProto_BuyFashion_ID NetProto_BuyFashion::UNITID;
const NetProto_BuyFashion_ID NetProto_BuyFashion::ID_MIN;
const NetProto_BuyFashion_ID NetProto_BuyFashion::ID_MAX;
const int NetProto_BuyFashion::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BuyFashion::kIdFieldNumber;
const int NetProto_BuyFashion::kForeverFieldNumber;
#endif  // !_MSC_VER

NetProto_BuyFashion::NetProto_BuyFashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BuyFashion::InitAsDefaultInstance() {
}

NetProto_BuyFashion::NetProto_BuyFashion(const NetProto_BuyFashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BuyFashion::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  forever_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BuyFashion::~NetProto_BuyFashion() {
  SharedDtor();
}

void NetProto_BuyFashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BuyFashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BuyFashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyFashion_descriptor_;
}

const NetProto_BuyFashion& NetProto_BuyFashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BuyFashion* NetProto_BuyFashion::default_instance_ = NULL;

NetProto_BuyFashion* NetProto_BuyFashion::New() const {
  return new NetProto_BuyFashion;
}

void NetProto_BuyFashion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    forever_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BuyFashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_forever;
        break;
      }
      
      // optional bool forever = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forever_)));
          set_has_forever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BuyFashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional bool forever = 2;
  if (has_forever()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->forever(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BuyFashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional bool forever = 2;
  if (has_forever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->forever(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BuyFashion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool forever = 2;
    if (has_forever()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BuyFashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BuyFashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BuyFashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BuyFashion::MergeFrom(const NetProto_BuyFashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_forever()) {
      set_forever(from.forever());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BuyFashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BuyFashion::CopyFrom(const NetProto_BuyFashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BuyFashion::IsInitialized() const {
  
  return true;
}

void NetProto_BuyFashion::Swap(NetProto_BuyFashion* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(forever_, other->forever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BuyFashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BuyFashion_descriptor_;
  metadata.reflection = NetProto_BuyFashion_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_MakeFashionHole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_MakeFashionHole_ID_descriptor_;
}
bool NetProto_MakeFashionHole_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 68:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_MakeFashionHole_ID NetProto_MakeFashionHole::GROUPID;
const NetProto_MakeFashionHole_ID NetProto_MakeFashionHole::UNITID;
const NetProto_MakeFashionHole_ID NetProto_MakeFashionHole::ID_MIN;
const NetProto_MakeFashionHole_ID NetProto_MakeFashionHole::ID_MAX;
const int NetProto_MakeFashionHole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_MakeFashionHole::kIdFieldNumber;
const int NetProto_MakeFashionHole::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_MakeFashionHole::NetProto_MakeFashionHole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_MakeFashionHole::InitAsDefaultInstance() {
}

NetProto_MakeFashionHole::NetProto_MakeFashionHole(const NetProto_MakeFashionHole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_MakeFashionHole::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_MakeFashionHole::~NetProto_MakeFashionHole() {
  SharedDtor();
}

void NetProto_MakeFashionHole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_MakeFashionHole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_MakeFashionHole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_MakeFashionHole_descriptor_;
}

const NetProto_MakeFashionHole& NetProto_MakeFashionHole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_MakeFashionHole* NetProto_MakeFashionHole::default_instance_ = NULL;

NetProto_MakeFashionHole* NetProto_MakeFashionHole::New() const {
  return new NetProto_MakeFashionHole;
}

void NetProto_MakeFashionHole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_MakeFashionHole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_MakeFashionHole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_MakeFashionHole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_MakeFashionHole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_MakeFashionHole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_MakeFashionHole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_MakeFashionHole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_MakeFashionHole::MergeFrom(const NetProto_MakeFashionHole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_MakeFashionHole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_MakeFashionHole::CopyFrom(const NetProto_MakeFashionHole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_MakeFashionHole::IsInitialized() const {
  
  return true;
}

void NetProto_MakeFashionHole::Swap(NetProto_MakeFashionHole* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_MakeFashionHole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_MakeFashionHole_descriptor_;
  metadata.reflection = NetProto_MakeFashionHole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FashionInlay_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FashionInlay_ID_descriptor_;
}
bool NetProto_FashionInlay_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 69:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FashionInlay_ID NetProto_FashionInlay::GROUPID;
const NetProto_FashionInlay_ID NetProto_FashionInlay::UNITID;
const NetProto_FashionInlay_ID NetProto_FashionInlay::ID_MIN;
const NetProto_FashionInlay_ID NetProto_FashionInlay::ID_MAX;
const int NetProto_FashionInlay::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FashionInlay::kIdFieldNumber;
const int NetProto_FashionInlay::kIndexFieldNumber;
const int NetProto_FashionInlay::kRuneidFieldNumber;
const int NetProto_FashionInlay::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_FashionInlay::NetProto_FashionInlay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FashionInlay::InitAsDefaultInstance() {
}

NetProto_FashionInlay::NetProto_FashionInlay(const NetProto_FashionInlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FashionInlay::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0;
  runeid_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FashionInlay::~NetProto_FashionInlay() {
  SharedDtor();
}

void NetProto_FashionInlay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_FashionInlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FashionInlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FashionInlay_descriptor_;
}

const NetProto_FashionInlay& NetProto_FashionInlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FashionInlay* NetProto_FashionInlay::default_instance_ = NULL;

NetProto_FashionInlay* NetProto_FashionInlay::New() const {
  return new NetProto_FashionInlay;
}

void NetProto_FashionInlay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    index_ = 0;
    runeid_ = 0;
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FashionInlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_runeid;
        break;
      }
      
      // optional int32 runeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_runeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &runeid_)));
          set_has_runeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FashionInlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // optional int32 runeid = 3;
  if (has_runeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->runeid(), output);
  }
  
  // optional bool flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FashionInlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // optional int32 runeid = 3;
  if (has_runeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->runeid(), target);
  }
  
  // optional bool flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FashionInlay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 runeid = 3;
    if (has_runeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->runeid());
    }
    
    // optional bool flag = 4;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FashionInlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FashionInlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FashionInlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FashionInlay::MergeFrom(const NetProto_FashionInlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_runeid()) {
      set_runeid(from.runeid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FashionInlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FashionInlay::CopyFrom(const NetProto_FashionInlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FashionInlay::IsInitialized() const {
  
  return true;
}

void NetProto_FashionInlay::Swap(NetProto_FashionInlay* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(runeid_, other->runeid_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FashionInlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FashionInlay_descriptor_;
  metadata.reflection = NetProto_FashionInlay_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FashionUnInlay_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FashionUnInlay_ID_descriptor_;
}
bool NetProto_FashionUnInlay_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 70:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FashionUnInlay_ID NetProto_FashionUnInlay::GROUPID;
const NetProto_FashionUnInlay_ID NetProto_FashionUnInlay::UNITID;
const NetProto_FashionUnInlay_ID NetProto_FashionUnInlay::ID_MIN;
const NetProto_FashionUnInlay_ID NetProto_FashionUnInlay::ID_MAX;
const int NetProto_FashionUnInlay::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FashionUnInlay::kIdFieldNumber;
const int NetProto_FashionUnInlay::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_FashionUnInlay::NetProto_FashionUnInlay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FashionUnInlay::InitAsDefaultInstance() {
}

NetProto_FashionUnInlay::NetProto_FashionUnInlay(const NetProto_FashionUnInlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FashionUnInlay::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FashionUnInlay::~NetProto_FashionUnInlay() {
  SharedDtor();
}

void NetProto_FashionUnInlay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_FashionUnInlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FashionUnInlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FashionUnInlay_descriptor_;
}

const NetProto_FashionUnInlay& NetProto_FashionUnInlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FashionUnInlay* NetProto_FashionUnInlay::default_instance_ = NULL;

NetProto_FashionUnInlay* NetProto_FashionUnInlay::New() const {
  return new NetProto_FashionUnInlay;
}

void NetProto_FashionUnInlay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FashionUnInlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FashionUnInlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FashionUnInlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FashionUnInlay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FashionUnInlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FashionUnInlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FashionUnInlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FashionUnInlay::MergeFrom(const NetProto_FashionUnInlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FashionUnInlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FashionUnInlay::CopyFrom(const NetProto_FashionUnInlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FashionUnInlay::IsInitialized() const {
  
  return true;
}

void NetProto_FashionUnInlay::Swap(NetProto_FashionUnInlay* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FashionUnInlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FashionUnInlay_descriptor_;
  metadata.reflection = NetProto_FashionUnInlay_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ServerLimitItem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ServerLimitItem_ID_descriptor_;
}
bool NetProto_ServerLimitItem_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 71:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ServerLimitItem_ID NetProto_ServerLimitItem::GROUPID;
const NetProto_ServerLimitItem_ID NetProto_ServerLimitItem::UNITID;
const NetProto_ServerLimitItem_ID NetProto_ServerLimitItem::ID_MIN;
const NetProto_ServerLimitItem_ID NetProto_ServerLimitItem::ID_MAX;
const int NetProto_ServerLimitItem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ServerLimitItem::kTypeFieldNumber;
const int NetProto_ServerLimitItem::kIdFieldNumber;
const int NetProto_ServerLimitItem::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_ServerLimitItem::NetProto_ServerLimitItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ServerLimitItem::InitAsDefaultInstance() {
}

NetProto_ServerLimitItem::NetProto_ServerLimitItem(const NetProto_ServerLimitItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ServerLimitItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ServerLimitItem::~NetProto_ServerLimitItem() {
  SharedDtor();
}

void NetProto_ServerLimitItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ServerLimitItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ServerLimitItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ServerLimitItem_descriptor_;
}

const NetProto_ServerLimitItem& NetProto_ServerLimitItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ServerLimitItem* NetProto_ServerLimitItem::default_instance_ = NULL;

NetProto_ServerLimitItem* NetProto_ServerLimitItem::New() const {
  return new NetProto_ServerLimitItem;
}

void NetProto_ServerLimitItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ServerLimitItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_ItemInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ItemInfo_Type_IsValid(value)) {
            set_type(static_cast< ::PB_ItemInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ServerLimitItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_ItemInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ServerLimitItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_ItemInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ServerLimitItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_ItemInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ServerLimitItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ServerLimitItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ServerLimitItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ServerLimitItem::MergeFrom(const NetProto_ServerLimitItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ServerLimitItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ServerLimitItem::CopyFrom(const NetProto_ServerLimitItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ServerLimitItem::IsInitialized() const {
  
  return true;
}

void NetProto_ServerLimitItem::Swap(NetProto_ServerLimitItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ServerLimitItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ServerLimitItem_descriptor_;
  metadata.reflection = NetProto_ServerLimitItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FriendsLove_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FriendsLove_ID_descriptor_;
}
bool NetProto_FriendsLove_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 72:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FriendsLove_ID NetProto_FriendsLove::GROUPID;
const NetProto_FriendsLove_ID NetProto_FriendsLove::UNITID;
const NetProto_FriendsLove_ID NetProto_FriendsLove::ID_MIN;
const NetProto_FriendsLove_ID NetProto_FriendsLove::ID_MAX;
const int NetProto_FriendsLove::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FriendsLove::kRoleIDFieldNumber;
const int NetProto_FriendsLove::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_FriendsLove::NetProto_FriendsLove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FriendsLove::InitAsDefaultInstance() {
}

NetProto_FriendsLove::NetProto_FriendsLove(const NetProto_FriendsLove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FriendsLove::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FriendsLove::~NetProto_FriendsLove() {
  SharedDtor();
}

void NetProto_FriendsLove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_FriendsLove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FriendsLove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FriendsLove_descriptor_;
}

const NetProto_FriendsLove& NetProto_FriendsLove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FriendsLove* NetProto_FriendsLove::default_instance_ = NULL;

NetProto_FriendsLove* NetProto_FriendsLove::New() const {
  return new NetProto_FriendsLove;
}

void NetProto_FriendsLove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FriendsLove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FriendsLove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FriendsLove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FriendsLove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FriendsLove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FriendsLove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FriendsLove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FriendsLove::MergeFrom(const NetProto_FriendsLove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FriendsLove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FriendsLove::CopyFrom(const NetProto_FriendsLove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FriendsLove::IsInitialized() const {
  
  return true;
}

void NetProto_FriendsLove::Swap(NetProto_FriendsLove* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FriendsLove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FriendsLove_descriptor_;
  metadata.reflection = NetProto_FriendsLove_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ChangePartner_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ChangePartner_ID_descriptor_;
}
bool NetProto_ChangePartner_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 73:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ChangePartner_ID NetProto_ChangePartner::GROUPID;
const NetProto_ChangePartner_ID NetProto_ChangePartner::UNITID;
const NetProto_ChangePartner_ID NetProto_ChangePartner::ID_MIN;
const NetProto_ChangePartner_ID NetProto_ChangePartner::ID_MAX;
const int NetProto_ChangePartner::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ChangePartner::kIndexFieldNumber;
const int NetProto_ChangePartner::kFansFieldNumber;
#endif  // !_MSC_VER

NetProto_ChangePartner::NetProto_ChangePartner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ChangePartner::InitAsDefaultInstance() {
  fans_ = const_cast< ::PB_FriendInfo*>(&::PB_FriendInfo::default_instance());
}

NetProto_ChangePartner::NetProto_ChangePartner(const NetProto_ChangePartner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ChangePartner::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  fans_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ChangePartner::~NetProto_ChangePartner() {
  SharedDtor();
}

void NetProto_ChangePartner::SharedDtor() {
  if (this != default_instance_) {
    delete fans_;
  }
}

void NetProto_ChangePartner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ChangePartner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ChangePartner_descriptor_;
}

const NetProto_ChangePartner& NetProto_ChangePartner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ChangePartner* NetProto_ChangePartner::default_instance_ = NULL;

NetProto_ChangePartner* NetProto_ChangePartner::New() const {
  return new NetProto_ChangePartner;
}

void NetProto_ChangePartner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_fans()) {
      if (fans_ != NULL) fans_->::PB_FriendInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ChangePartner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fans;
        break;
      }
      
      // optional .PB_FriendInfo fans = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ChangePartner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional .PB_FriendInfo fans = 2;
  if (has_fans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fans(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ChangePartner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional .PB_FriendInfo fans = 2;
  if (has_fans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fans(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ChangePartner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional .PB_FriendInfo fans = 2;
    if (has_fans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fans());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ChangePartner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ChangePartner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ChangePartner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ChangePartner::MergeFrom(const NetProto_ChangePartner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_fans()) {
      mutable_fans()->::PB_FriendInfo::MergeFrom(from.fans());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ChangePartner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ChangePartner::CopyFrom(const NetProto_ChangePartner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ChangePartner::IsInitialized() const {
  
  return true;
}

void NetProto_ChangePartner::Swap(NetProto_ChangePartner* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(fans_, other->fans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ChangePartner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ChangePartner_descriptor_;
  metadata.reflection = NetProto_ChangePartner_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddFansLove_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddFansLove_ID_descriptor_;
}
bool NetProto_AddFansLove_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 74:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddFansLove_ID NetProto_AddFansLove::GROUPID;
const NetProto_AddFansLove_ID NetProto_AddFansLove::UNITID;
const NetProto_AddFansLove_ID NetProto_AddFansLove::ID_MIN;
const NetProto_AddFansLove_ID NetProto_AddFansLove::ID_MAX;
const int NetProto_AddFansLove::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddFansLove::kRoleIDFieldNumber;
#endif  // !_MSC_VER

NetProto_AddFansLove::NetProto_AddFansLove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddFansLove::InitAsDefaultInstance() {
}

NetProto_AddFansLove::NetProto_AddFansLove(const NetProto_AddFansLove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddFansLove::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddFansLove::~NetProto_AddFansLove() {
  SharedDtor();
}

void NetProto_AddFansLove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_AddFansLove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddFansLove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddFansLove_descriptor_;
}

const NetProto_AddFansLove& NetProto_AddFansLove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddFansLove* NetProto_AddFansLove::default_instance_ = NULL;

NetProto_AddFansLove* NetProto_AddFansLove::New() const {
  return new NetProto_AddFansLove;
}

void NetProto_AddFansLove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddFansLove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddFansLove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddFansLove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddFansLove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddFansLove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddFansLove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddFansLove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddFansLove::MergeFrom(const NetProto_AddFansLove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddFansLove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddFansLove::CopyFrom(const NetProto_AddFansLove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddFansLove::IsInitialized() const {
  
  return true;
}

void NetProto_AddFansLove::Swap(NetProto_AddFansLove* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddFansLove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddFansLove_descriptor_;
  metadata.reflection = NetProto_AddFansLove_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyLovePoint_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyLovePoint_ID_descriptor_;
}
bool NetProto_ModifyLovePoint_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 75:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyLovePoint_ID NetProto_ModifyLovePoint::GROUPID;
const NetProto_ModifyLovePoint_ID NetProto_ModifyLovePoint::UNITID;
const NetProto_ModifyLovePoint_ID NetProto_ModifyLovePoint::ID_MIN;
const NetProto_ModifyLovePoint_ID NetProto_ModifyLovePoint::ID_MAX;
const int NetProto_ModifyLovePoint::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyLovePoint::kLovePointFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyLovePoint::NetProto_ModifyLovePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyLovePoint::InitAsDefaultInstance() {
}

NetProto_ModifyLovePoint::NetProto_ModifyLovePoint(const NetProto_ModifyLovePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyLovePoint::SharedCtor() {
  _cached_size_ = 0;
  lovePoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyLovePoint::~NetProto_ModifyLovePoint() {
  SharedDtor();
}

void NetProto_ModifyLovePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyLovePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyLovePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyLovePoint_descriptor_;
}

const NetProto_ModifyLovePoint& NetProto_ModifyLovePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyLovePoint* NetProto_ModifyLovePoint::default_instance_ = NULL;

NetProto_ModifyLovePoint* NetProto_ModifyLovePoint::New() const {
  return new NetProto_ModifyLovePoint;
}

void NetProto_ModifyLovePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lovePoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyLovePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lovePoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lovePoint_)));
          set_has_lovePoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyLovePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lovePoint = 1;
  if (has_lovePoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lovePoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyLovePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lovePoint = 1;
  if (has_lovePoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lovePoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyLovePoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lovePoint = 1;
    if (has_lovePoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lovePoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyLovePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyLovePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyLovePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyLovePoint::MergeFrom(const NetProto_ModifyLovePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lovePoint()) {
      set_lovePoint(from.lovePoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyLovePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyLovePoint::CopyFrom(const NetProto_ModifyLovePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyLovePoint::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyLovePoint::Swap(NetProto_ModifyLovePoint* other) {
  if (other != this) {
    std::swap(lovePoint_, other->lovePoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyLovePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyLovePoint_descriptor_;
  metadata.reflection = NetProto_ModifyLovePoint_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BuyDurability_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyDurability_ID_descriptor_;
}
bool NetProto_BuyDurability_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 76:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BuyDurability_ID NetProto_BuyDurability::GROUPID;
const NetProto_BuyDurability_ID NetProto_BuyDurability::UNITID;
const NetProto_BuyDurability_ID NetProto_BuyDurability::ID_MIN;
const NetProto_BuyDurability_ID NetProto_BuyDurability::ID_MAX;
const int NetProto_BuyDurability::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BuyDurability::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_BuyDurability::NetProto_BuyDurability()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BuyDurability::InitAsDefaultInstance() {
}

NetProto_BuyDurability::NetProto_BuyDurability(const NetProto_BuyDurability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BuyDurability::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BuyDurability::~NetProto_BuyDurability() {
  SharedDtor();
}

void NetProto_BuyDurability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BuyDurability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BuyDurability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyDurability_descriptor_;
}

const NetProto_BuyDurability& NetProto_BuyDurability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BuyDurability* NetProto_BuyDurability::default_instance_ = NULL;

NetProto_BuyDurability* NetProto_BuyDurability::New() const {
  return new NetProto_BuyDurability;
}

void NetProto_BuyDurability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BuyDurability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BuyDurability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BuyDurability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BuyDurability::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BuyDurability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BuyDurability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BuyDurability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BuyDurability::MergeFrom(const NetProto_BuyDurability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BuyDurability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BuyDurability::CopyFrom(const NetProto_BuyDurability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BuyDurability::IsInitialized() const {
  
  return true;
}

void NetProto_BuyDurability::Swap(NetProto_BuyDurability* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BuyDurability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BuyDurability_descriptor_;
  metadata.reflection = NetProto_BuyDurability_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_LoginObtRMB_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoginObtRMB_ID_descriptor_;
}
bool NetProto_LoginObtRMB_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 77:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_LoginObtRMB_ID NetProto_LoginObtRMB::GROUPID;
const NetProto_LoginObtRMB_ID NetProto_LoginObtRMB::UNITID;
const NetProto_LoginObtRMB_ID NetProto_LoginObtRMB::ID_MIN;
const NetProto_LoginObtRMB_ID NetProto_LoginObtRMB::ID_MAX;
const int NetProto_LoginObtRMB::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_LoginObtRMB::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_LoginObtRMB::NetProto_LoginObtRMB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_LoginObtRMB::InitAsDefaultInstance() {
}

NetProto_LoginObtRMB::NetProto_LoginObtRMB(const NetProto_LoginObtRMB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_LoginObtRMB::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_LoginObtRMB::~NetProto_LoginObtRMB() {
  SharedDtor();
}

void NetProto_LoginObtRMB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_LoginObtRMB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_LoginObtRMB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_LoginObtRMB_descriptor_;
}

const NetProto_LoginObtRMB& NetProto_LoginObtRMB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_LoginObtRMB* NetProto_LoginObtRMB::default_instance_ = NULL;

NetProto_LoginObtRMB* NetProto_LoginObtRMB::New() const {
  return new NetProto_LoginObtRMB;
}

void NetProto_LoginObtRMB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_LoginObtRMB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_LoginObtRMB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_LoginObtRMB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_LoginObtRMB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_LoginObtRMB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_LoginObtRMB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_LoginObtRMB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_LoginObtRMB::MergeFrom(const NetProto_LoginObtRMB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_LoginObtRMB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_LoginObtRMB::CopyFrom(const NetProto_LoginObtRMB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_LoginObtRMB::IsInitialized() const {
  
  return true;
}

void NetProto_LoginObtRMB::Swap(NetProto_LoginObtRMB* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_LoginObtRMB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_LoginObtRMB_descriptor_;
  metadata.reflection = NetProto_LoginObtRMB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UnwearWing_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnwearWing_ID_descriptor_;
}
bool NetProto_UnwearWing_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 78:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UnwearWing_ID NetProto_UnwearWing::GROUPID;
const NetProto_UnwearWing_ID NetProto_UnwearWing::UNITID;
const NetProto_UnwearWing_ID NetProto_UnwearWing::ID_MIN;
const NetProto_UnwearWing_ID NetProto_UnwearWing::ID_MAX;
const int NetProto_UnwearWing::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_UnwearWing::NetProto_UnwearWing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UnwearWing::InitAsDefaultInstance() {
}

NetProto_UnwearWing::NetProto_UnwearWing(const NetProto_UnwearWing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UnwearWing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UnwearWing::~NetProto_UnwearWing() {
  SharedDtor();
}

void NetProto_UnwearWing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UnwearWing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UnwearWing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnwearWing_descriptor_;
}

const NetProto_UnwearWing& NetProto_UnwearWing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UnwearWing* NetProto_UnwearWing::default_instance_ = NULL;

NetProto_UnwearWing* NetProto_UnwearWing::New() const {
  return new NetProto_UnwearWing;
}

void NetProto_UnwearWing::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UnwearWing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_UnwearWing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UnwearWing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UnwearWing::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UnwearWing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UnwearWing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UnwearWing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UnwearWing::MergeFrom(const NetProto_UnwearWing& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UnwearWing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UnwearWing::CopyFrom(const NetProto_UnwearWing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UnwearWing::IsInitialized() const {
  
  return true;
}

void NetProto_UnwearWing::Swap(NetProto_UnwearWing* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UnwearWing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UnwearWing_descriptor_;
  metadata.reflection = NetProto_UnwearWing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GetEquip_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetEquip_ID_descriptor_;
}
bool NetProto_GetEquip_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 79:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GetEquip_ID NetProto_GetEquip::GROUPID;
const NetProto_GetEquip_ID NetProto_GetEquip::UNITID;
const NetProto_GetEquip_ID NetProto_GetEquip::ID_MIN;
const NetProto_GetEquip_ID NetProto_GetEquip::ID_MAX;
const int NetProto_GetEquip::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GetEquip::kIdFieldNumber;
const int NetProto_GetEquip::kAssetFieldNumber;
#endif  // !_MSC_VER

NetProto_GetEquip::NetProto_GetEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GetEquip::InitAsDefaultInstance() {
  asset_ = const_cast< ::PB_EquipAsset*>(&::PB_EquipAsset::default_instance());
}

NetProto_GetEquip::NetProto_GetEquip(const NetProto_GetEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GetEquip::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  asset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GetEquip::~NetProto_GetEquip() {
  SharedDtor();
}

void NetProto_GetEquip::SharedDtor() {
  if (this != default_instance_) {
    delete asset_;
  }
}

void NetProto_GetEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GetEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetEquip_descriptor_;
}

const NetProto_GetEquip& NetProto_GetEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GetEquip* NetProto_GetEquip::default_instance_ = NULL;

NetProto_GetEquip* NetProto_GetEquip::New() const {
  return new NetProto_GetEquip;
}

void NetProto_GetEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_asset()) {
      if (asset_ != NULL) asset_->::PB_EquipAsset::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GetEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_asset;
        break;
      }
      
      // optional .PB_EquipAsset asset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GetEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .PB_EquipAsset asset = 2;
  if (has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->asset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GetEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .PB_EquipAsset asset = 2;
  if (has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->asset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GetEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PB_EquipAsset asset = 2;
    if (has_asset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GetEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GetEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GetEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GetEquip::MergeFrom(const NetProto_GetEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_asset()) {
      mutable_asset()->::PB_EquipAsset::MergeFrom(from.asset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GetEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GetEquip::CopyFrom(const NetProto_GetEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GetEquip::IsInitialized() const {
  
  return true;
}

void NetProto_GetEquip::Swap(NetProto_GetEquip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(asset_, other->asset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GetEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GetEquip_descriptor_;
  metadata.reflection = NetProto_GetEquip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ResetCount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ResetCount_ID_descriptor_;
}
bool NetProto_ResetCount_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 80:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ResetCount_ID NetProto_ResetCount::GROUPID;
const NetProto_ResetCount_ID NetProto_ResetCount::UNITID;
const NetProto_ResetCount_ID NetProto_ResetCount::ID_MIN;
const NetProto_ResetCount_ID NetProto_ResetCount::ID_MAX;
const int NetProto_ResetCount::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_ResetCount_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ResetCount_Type_descriptor_;
}
bool NetProto_ResetCount_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ResetCount_Type NetProto_ResetCount::SINGLE_ENHANCE;
const NetProto_ResetCount_Type NetProto_ResetCount::BOSS;
const NetProto_ResetCount_Type NetProto_ResetCount::GOD;
const NetProto_ResetCount_Type NetProto_ResetCount::GOD_CD;
const NetProto_ResetCount_Type NetProto_ResetCount::QUICK_FIGHT_CD;
const NetProto_ResetCount_Type NetProto_ResetCount::Type_MIN;
const NetProto_ResetCount_Type NetProto_ResetCount::Type_MAX;
const int NetProto_ResetCount::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ResetCount::kTypeFieldNumber;
const int NetProto_ResetCount::kArgFieldNumber;
#endif  // !_MSC_VER

NetProto_ResetCount::NetProto_ResetCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ResetCount::InitAsDefaultInstance() {
}

NetProto_ResetCount::NetProto_ResetCount(const NetProto_ResetCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ResetCount::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  arg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ResetCount::~NetProto_ResetCount() {
  SharedDtor();
}

void NetProto_ResetCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ResetCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ResetCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ResetCount_descriptor_;
}

const NetProto_ResetCount& NetProto_ResetCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ResetCount* NetProto_ResetCount::default_instance_ = NULL;

NetProto_ResetCount* NetProto_ResetCount::New() const {
  return new NetProto_ResetCount;
}

void NetProto_ResetCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    arg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ResetCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_ResetCount.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_ResetCount_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_ResetCount_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arg;
        break;
      }
      
      // optional int32 arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
          set_has_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ResetCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_ResetCount.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 arg = 2;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ResetCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_ResetCount.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 arg = 2;
  if (has_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ResetCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_ResetCount.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 arg = 2;
    if (has_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ResetCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ResetCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ResetCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ResetCount::MergeFrom(const NetProto_ResetCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_arg()) {
      set_arg(from.arg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ResetCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ResetCount::CopyFrom(const NetProto_ResetCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ResetCount::IsInitialized() const {
  
  return true;
}

void NetProto_ResetCount::Swap(NetProto_ResetCount* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(arg_, other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ResetCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ResetCount_descriptor_;
  metadata.reflection = NetProto_ResetCount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GodPlayer_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodPlayer_ID_descriptor_;
}
bool NetProto_GodPlayer_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 81:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GodPlayer_ID NetProto_GodPlayer::GROUPID;
const NetProto_GodPlayer_ID NetProto_GodPlayer::UNITID;
const NetProto_GodPlayer_ID NetProto_GodPlayer::ID_MIN;
const NetProto_GodPlayer_ID NetProto_GodPlayer::ID_MAX;
const int NetProto_GodPlayer::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GodPlayer::kProfessionTypeFieldNumber;
const int NetProto_GodPlayer::kGodRankFieldNumber;
const int NetProto_GodPlayer::kPowerFieldNumber;
const int NetProto_GodPlayer::kInspireFieldNumber;
const int NetProto_GodPlayer::kRoleIDFieldNumber;
const int NetProto_GodPlayer::kStrFieldNumber;
const int NetProto_GodPlayer::kLevelFieldNumber;
#endif  // !_MSC_VER

NetProto_GodPlayer::NetProto_GodPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GodPlayer::InitAsDefaultInstance() {
}

NetProto_GodPlayer::NetProto_GodPlayer(const NetProto_GodPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GodPlayer::SharedCtor() {
  _cached_size_ = 0;
  professionType_ = 0;
  godRank_ = 0;
  power_ = 0;
  inspire_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GodPlayer::~NetProto_GodPlayer() {
  SharedDtor();
}

void NetProto_GodPlayer::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_GodPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GodPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodPlayer_descriptor_;
}

const NetProto_GodPlayer& NetProto_GodPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GodPlayer* NetProto_GodPlayer::default_instance_ = NULL;

NetProto_GodPlayer* NetProto_GodPlayer::New() const {
  return new NetProto_GodPlayer;
}

void NetProto_GodPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    professionType_ = 0;
    godRank_ = 0;
    power_ = 0;
    inspire_ = 0;
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GodPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_ProfessionInfo.Type professionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_professionType(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_godRank;
        break;
      }
      
      // optional int32 godRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godRank_)));
          set_has_godRank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }
      
      // optional int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inspire;
        break;
      }
      
      // optional int32 inspire = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inspire_)));
          set_has_inspire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_str;
        break;
      }
      
      // optional string str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }
      
      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GodPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_ProfessionInfo.Type professionType = 1;
  if (has_professionType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->professionType(), output);
  }
  
  // optional int32 godRank = 2;
  if (has_godRank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->godRank(), output);
  }
  
  // optional int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }
  
  // optional int32 inspire = 4;
  if (has_inspire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inspire(), output);
  }
  
  // optional int64 roleID = 5;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->roleID(), output);
  }
  
  // optional string str = 6;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->str(), output);
  }
  
  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GodPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_ProfessionInfo.Type professionType = 1;
  if (has_professionType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->professionType(), target);
  }
  
  // optional int32 godRank = 2;
  if (has_godRank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->godRank(), target);
  }
  
  // optional int32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power(), target);
  }
  
  // optional int32 inspire = 4;
  if (has_inspire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inspire(), target);
  }
  
  // optional int64 roleID = 5;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->roleID(), target);
  }
  
  // optional string str = 6;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->str(), target);
  }
  
  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GodPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_ProfessionInfo.Type professionType = 1;
    if (has_professionType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->professionType());
    }
    
    // optional int32 godRank = 2;
    if (has_godRank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godRank());
    }
    
    // optional int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 inspire = 4;
    if (has_inspire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inspire());
    }
    
    // optional int64 roleID = 5;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional string str = 6;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GodPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GodPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GodPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GodPlayer::MergeFrom(const NetProto_GodPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_professionType()) {
      set_professionType(from.professionType());
    }
    if (from.has_godRank()) {
      set_godRank(from.godRank());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_inspire()) {
      set_inspire(from.inspire());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GodPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GodPlayer::CopyFrom(const NetProto_GodPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GodPlayer::IsInitialized() const {
  
  return true;
}

void NetProto_GodPlayer::Swap(NetProto_GodPlayer* other) {
  if (other != this) {
    std::swap(professionType_, other->professionType_);
    std::swap(godRank_, other->godRank_);
    std::swap(power_, other->power_);
    std::swap(inspire_, other->inspire_);
    std::swap(roleID_, other->roleID_);
    std::swap(str_, other->str_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GodPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GodPlayer_descriptor_;
  metadata.reflection = NetProto_GodPlayer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GodRandomPlayer_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodRandomPlayer_ID_descriptor_;
}
bool NetProto_GodRandomPlayer_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 82:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GodRandomPlayer_ID NetProto_GodRandomPlayer::GROUPID;
const NetProto_GodRandomPlayer_ID NetProto_GodRandomPlayer::UNITID;
const NetProto_GodRandomPlayer_ID NetProto_GodRandomPlayer::ID_MIN;
const NetProto_GodRandomPlayer_ID NetProto_GodRandomPlayer::ID_MAX;
const int NetProto_GodRandomPlayer::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GodRandomPlayer::kPlayerFieldNumber;
#endif  // !_MSC_VER

NetProto_GodRandomPlayer::NetProto_GodRandomPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GodRandomPlayer::InitAsDefaultInstance() {
}

NetProto_GodRandomPlayer::NetProto_GodRandomPlayer(const NetProto_GodRandomPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GodRandomPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GodRandomPlayer::~NetProto_GodRandomPlayer() {
  SharedDtor();
}

void NetProto_GodRandomPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GodRandomPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GodRandomPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodRandomPlayer_descriptor_;
}

const NetProto_GodRandomPlayer& NetProto_GodRandomPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GodRandomPlayer* NetProto_GodRandomPlayer::default_instance_ = NULL;

NetProto_GodRandomPlayer* NetProto_GodRandomPlayer::New() const {
  return new NetProto_GodRandomPlayer;
}

void NetProto_GodRandomPlayer::Clear() {
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GodRandomPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto_GodPlayer player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GodRandomPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NetProto_GodPlayer player = 1;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GodRandomPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NetProto_GodPlayer player = 1;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GodRandomPlayer::ByteSize() const {
  int total_size = 0;
  
  // repeated .NetProto_GodPlayer player = 1;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GodRandomPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GodRandomPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GodRandomPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GodRandomPlayer::MergeFrom(const NetProto_GodRandomPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GodRandomPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GodRandomPlayer::CopyFrom(const NetProto_GodRandomPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GodRandomPlayer::IsInitialized() const {
  
  return true;
}

void NetProto_GodRandomPlayer::Swap(NetProto_GodRandomPlayer* other) {
  if (other != this) {
    player_.Swap(&other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GodRandomPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GodRandomPlayer_descriptor_;
  metadata.reflection = NetProto_GodRandomPlayer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GodRecords_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodRecords_ID_descriptor_;
}
bool NetProto_GodRecords_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 83:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GodRecords_ID NetProto_GodRecords::GROUPID;
const NetProto_GodRecords_ID NetProto_GodRecords::UNITID;
const NetProto_GodRecords_ID NetProto_GodRecords::ID_MIN;
const NetProto_GodRecords_ID NetProto_GodRecords::ID_MAX;
const int NetProto_GodRecords::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GodRecords::kFlagFieldNumber;
const int NetProto_GodRecords::kNumFieldNumber;
const int NetProto_GodRecords::kProfessionTypeFieldNumber;
const int NetProto_GodRecords::kLevelFieldNumber;
const int NetProto_GodRecords::kNameFieldNumber;
const int NetProto_GodRecords::kTimeFieldNumber;
const int NetProto_GodRecords::kRoleIDFieldNumber;
#endif  // !_MSC_VER

NetProto_GodRecords::NetProto_GodRecords()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GodRecords::InitAsDefaultInstance() {
}

NetProto_GodRecords::NetProto_GodRecords(const NetProto_GodRecords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GodRecords::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GodRecords::~NetProto_GodRecords() {
  SharedDtor();
}

void NetProto_GodRecords::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GodRecords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GodRecords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodRecords_descriptor_;
}

const NetProto_GodRecords& NetProto_GodRecords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GodRecords* NetProto_GodRecords::default_instance_ = NULL;

NetProto_GodRecords* NetProto_GodRecords::New() const {
  return new NetProto_GodRecords;
}

void NetProto_GodRecords::Clear() {
  flag_.Clear();
  num_.Clear();
  professionType_.Clear();
  level_.Clear();
  name_.Clear();
  time_.Clear();
  roleID_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GodRecords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_flag())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_flag())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_flag;
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // repeated int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        if (input->ExpectTag(24)) goto parse_professionType;
        break;
      }
      
      // repeated .PB_ProfessionInfo.Type professionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            add_professionType(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::PB_ProfessionInfo_Type_IsValid,
                 this->mutable_professionType())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_professionType;
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // repeated int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // repeated string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(0).data(), this->name(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // repeated int32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        if (input->ExpectTag(56)) goto parse_roleID;
        break;
      }
      
      // repeated int64 roleID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_roleID())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_roleID())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roleID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GodRecords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool flag = 1;
  for (int i = 0; i < this->flag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->flag(i), output);
  }
  
  // repeated int32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->num(i), output);
  }
  
  // repeated .PB_ProfessionInfo.Type professionType = 3;
  for (int i = 0; i < this->professionType_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->professionType(i), output);
  }
  
  // repeated int32 level = 4;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->level(i), output);
  }
  
  // repeated string name = 5;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(i), output);
  }
  
  // repeated int32 time = 6;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->time(i), output);
  }
  
  // repeated int64 roleID = 7;
  for (int i = 0; i < this->roleID_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->roleID(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GodRecords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool flag = 1;
  for (int i = 0; i < this->flag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->flag(i), target);
  }
  
  // repeated int32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->num(i), target);
  }
  
  // repeated .PB_ProfessionInfo.Type professionType = 3;
  for (int i = 0; i < this->professionType_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->professionType(i), target);
  }
  
  // repeated int32 level = 4;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->level(i), target);
  }
  
  // repeated string name = 5;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->name(i), target);
  }
  
  // repeated int32 time = 6;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->time(i), target);
  }
  
  // repeated int64 roleID = 7;
  for (int i = 0; i < this->roleID_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->roleID(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GodRecords::ByteSize() const {
  int total_size = 0;
  
  // repeated bool flag = 1;
  {
    int data_size = 0;
    data_size = 1 * this->flag_size();
    total_size += 1 * this->flag_size() + data_size;
  }
  
  // repeated int32 num = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }
  
  // repeated .PB_ProfessionInfo.Type professionType = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->professionType_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->professionType(i));
    }
    total_size += 1 * this->professionType_size() + data_size;
  }
  
  // repeated int32 level = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }
  
  // repeated string name = 5;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }
  
  // repeated int32 time = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->time(i));
    }
    total_size += 1 * this->time_size() + data_size;
  }
  
  // repeated int64 roleID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleID_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->roleID(i));
    }
    total_size += 1 * this->roleID_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GodRecords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GodRecords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GodRecords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GodRecords::MergeFrom(const NetProto_GodRecords& from) {
  GOOGLE_CHECK_NE(&from, this);
  flag_.MergeFrom(from.flag_);
  num_.MergeFrom(from.num_);
  professionType_.MergeFrom(from.professionType_);
  level_.MergeFrom(from.level_);
  name_.MergeFrom(from.name_);
  time_.MergeFrom(from.time_);
  roleID_.MergeFrom(from.roleID_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GodRecords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GodRecords::CopyFrom(const NetProto_GodRecords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GodRecords::IsInitialized() const {
  
  return true;
}

void NetProto_GodRecords::Swap(NetProto_GodRecords* other) {
  if (other != this) {
    flag_.Swap(&other->flag_);
    num_.Swap(&other->num_);
    professionType_.Swap(&other->professionType_);
    level_.Swap(&other->level_);
    name_.Swap(&other->name_);
    time_.Swap(&other->time_);
    roleID_.Swap(&other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GodRecords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GodRecords_descriptor_;
  metadata.reflection = NetProto_GodRecords_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GodPanel_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodPanel_ID_descriptor_;
}
bool NetProto_GodPanel_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 84:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GodPanel_ID NetProto_GodPanel::GROUPID;
const NetProto_GodPanel_ID NetProto_GodPanel::UNITID;
const NetProto_GodPanel_ID NetProto_GodPanel::ID_MIN;
const NetProto_GodPanel_ID NetProto_GodPanel::ID_MAX;
const int NetProto_GodPanel::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GodPanel::kPlayerFieldNumber;
const int NetProto_GodPanel::kNumFieldNumber;
const int NetProto_GodPanel::kNextTimeFieldNumber;
#endif  // !_MSC_VER

NetProto_GodPanel::NetProto_GodPanel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GodPanel::InitAsDefaultInstance() {
  player_ = const_cast< ::NetProto_GodPlayer*>(&::NetProto_GodPlayer::default_instance());
}

NetProto_GodPanel::NetProto_GodPanel(const NetProto_GodPanel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GodPanel::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  num_ = 0;
  nextTime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GodPanel::~NetProto_GodPanel() {
  SharedDtor();
}

void NetProto_GodPanel::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void NetProto_GodPanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GodPanel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodPanel_descriptor_;
}

const NetProto_GodPanel& NetProto_GodPanel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GodPanel* NetProto_GodPanel::default_instance_ = NULL;

NetProto_GodPanel* NetProto_GodPanel::New() const {
  return new NetProto_GodPanel;
}

void NetProto_GodPanel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::NetProto_GodPlayer::Clear();
    }
    num_ = 0;
    nextTime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GodPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GodPlayer player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextTime;
        break;
      }
      
      // optional int32 nextTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextTime_)));
          set_has_nextTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GodPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GodPlayer player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // optional int32 nextTime = 3;
  if (has_nextTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nextTime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GodPanel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GodPlayer player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // optional int32 nextTime = 3;
  if (has_nextTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nextTime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GodPanel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GodPlayer player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional int32 nextTime = 3;
    if (has_nextTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextTime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GodPanel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GodPanel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GodPanel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GodPanel::MergeFrom(const NetProto_GodPanel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::NetProto_GodPlayer::MergeFrom(from.player());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_nextTime()) {
      set_nextTime(from.nextTime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GodPanel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GodPanel::CopyFrom(const NetProto_GodPanel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GodPanel::IsInitialized() const {
  
  return true;
}

void NetProto_GodPanel::Swap(NetProto_GodPanel* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(num_, other->num_);
    std::swap(nextTime_, other->nextTime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GodPanel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GodPanel_descriptor_;
  metadata.reflection = NetProto_GodPanel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SelectGodRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SelectGodRole_ID_descriptor_;
}
bool NetProto_SelectGodRole_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 85:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SelectGodRole_ID NetProto_SelectGodRole::GROUPID;
const NetProto_SelectGodRole_ID NetProto_SelectGodRole::UNITID;
const NetProto_SelectGodRole_ID NetProto_SelectGodRole::ID_MIN;
const NetProto_SelectGodRole_ID NetProto_SelectGodRole::ID_MAX;
const int NetProto_SelectGodRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SelectGodRole::kRoleIDFieldNumber;
const int NetProto_SelectGodRole::kAttFieldNumber;
#endif  // !_MSC_VER

NetProto_SelectGodRole::NetProto_SelectGodRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SelectGodRole::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

NetProto_SelectGodRole::NetProto_SelectGodRole(const NetProto_SelectGodRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SelectGodRole::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  att_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SelectGodRole::~NetProto_SelectGodRole() {
  SharedDtor();
}

void NetProto_SelectGodRole::SharedDtor() {
  if (this != default_instance_) {
    delete att_;
  }
}

void NetProto_SelectGodRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SelectGodRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SelectGodRole_descriptor_;
}

const NetProto_SelectGodRole& NetProto_SelectGodRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SelectGodRole* NetProto_SelectGodRole::default_instance_ = NULL;

NetProto_SelectGodRole* NetProto_SelectGodRole::New() const {
  return new NetProto_SelectGodRole;
}

void NetProto_SelectGodRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_att()) {
      if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SelectGodRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_att;
        break;
      }
      
      // optional .PB_PlayerAtt att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SelectGodRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->att(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SelectGodRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional .PB_PlayerAtt att = 2;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->att(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SelectGodRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional .PB_PlayerAtt att = 2;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SelectGodRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SelectGodRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SelectGodRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SelectGodRole::MergeFrom(const NetProto_SelectGodRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_att()) {
      mutable_att()->::PB_PlayerAtt::MergeFrom(from.att());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SelectGodRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SelectGodRole::CopyFrom(const NetProto_SelectGodRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SelectGodRole::IsInitialized() const {
  
  return true;
}

void NetProto_SelectGodRole::Swap(NetProto_SelectGodRole* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(att_, other->att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SelectGodRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SelectGodRole_descriptor_;
  metadata.reflection = NetProto_SelectGodRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SetSpecial_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetSpecial_ID_descriptor_;
}
bool NetProto_SetSpecial_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 86:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SetSpecial_ID NetProto_SetSpecial::GROUPID;
const NetProto_SetSpecial_ID NetProto_SetSpecial::UNITID;
const NetProto_SetSpecial_ID NetProto_SetSpecial::ID_MIN;
const NetProto_SetSpecial_ID NetProto_SetSpecial::ID_MAX;
const int NetProto_SetSpecial::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SetSpecial::kNpcFieldNumber;
const int NetProto_SetSpecial::kEnableFieldNumber;
#endif  // !_MSC_VER

NetProto_SetSpecial::NetProto_SetSpecial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SetSpecial::InitAsDefaultInstance() {
}

NetProto_SetSpecial::NetProto_SetSpecial(const NetProto_SetSpecial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SetSpecial::SharedCtor() {
  _cached_size_ = 0;
  npc_ = 0;
  enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SetSpecial::~NetProto_SetSpecial() {
  SharedDtor();
}

void NetProto_SetSpecial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_SetSpecial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SetSpecial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SetSpecial_descriptor_;
}

const NetProto_SetSpecial& NetProto_SetSpecial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SetSpecial* NetProto_SetSpecial::default_instance_ = NULL;

NetProto_SetSpecial* NetProto_SetSpecial::New() const {
  return new NetProto_SetSpecial;
}

void NetProto_SetSpecial::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_ = 0;
    enable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SetSpecial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_)));
          set_has_npc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enable;
        break;
      }
      
      // optional bool enable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SetSpecial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 npc = 1;
  if (has_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc(), output);
  }
  
  // optional bool enable = 2;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SetSpecial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 npc = 1;
  if (has_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc(), target);
  }
  
  // optional bool enable = 2;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SetSpecial::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npc = 1;
    if (has_npc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc());
    }
    
    // optional bool enable = 2;
    if (has_enable()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SetSpecial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SetSpecial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SetSpecial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SetSpecial::MergeFrom(const NetProto_SetSpecial& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc()) {
      set_npc(from.npc());
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SetSpecial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SetSpecial::CopyFrom(const NetProto_SetSpecial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SetSpecial::IsInitialized() const {
  
  return true;
}

void NetProto_SetSpecial::Swap(NetProto_SetSpecial* other) {
  if (other != this) {
    std::swap(npc_, other->npc_);
    std::swap(enable_, other->enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SetSpecial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SetSpecial_descriptor_;
  metadata.reflection = NetProto_SetSpecial_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ResolveEquips_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ResolveEquips_ID_descriptor_;
}
bool NetProto_ResolveEquips_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 87:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ResolveEquips_ID NetProto_ResolveEquips::GROUPID;
const NetProto_ResolveEquips_ID NetProto_ResolveEquips::UNITID;
const NetProto_ResolveEquips_ID NetProto_ResolveEquips::ID_MIN;
const NetProto_ResolveEquips_ID NetProto_ResolveEquips::ID_MAX;
const int NetProto_ResolveEquips::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ResolveEquips::kOpFieldNumber;
#endif  // !_MSC_VER

NetProto_ResolveEquips::NetProto_ResolveEquips()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ResolveEquips::InitAsDefaultInstance() {
}

NetProto_ResolveEquips::NetProto_ResolveEquips(const NetProto_ResolveEquips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ResolveEquips::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ResolveEquips::~NetProto_ResolveEquips() {
  SharedDtor();
}

void NetProto_ResolveEquips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ResolveEquips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ResolveEquips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ResolveEquips_descriptor_;
}

const NetProto_ResolveEquips& NetProto_ResolveEquips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ResolveEquips* NetProto_ResolveEquips::default_instance_ = NULL;

NetProto_ResolveEquips* NetProto_ResolveEquips::New() const {
  return new NetProto_ResolveEquips;
}

void NetProto_ResolveEquips::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ResolveEquips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ResolveEquips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ResolveEquips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ResolveEquips::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ResolveEquips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ResolveEquips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ResolveEquips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ResolveEquips::MergeFrom(const NetProto_ResolveEquips& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ResolveEquips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ResolveEquips::CopyFrom(const NetProto_ResolveEquips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ResolveEquips::IsInitialized() const {
  
  return true;
}

void NetProto_ResolveEquips::Swap(NetProto_ResolveEquips* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ResolveEquips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ResolveEquips_descriptor_;
  metadata.reflection = NetProto_ResolveEquips_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyPKScoreActive_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyPKScoreActive_ID_descriptor_;
}
bool NetProto_ModifyPKScoreActive_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 88:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyPKScoreActive_ID NetProto_ModifyPKScoreActive::GROUPID;
const NetProto_ModifyPKScoreActive_ID NetProto_ModifyPKScoreActive::UNITID;
const NetProto_ModifyPKScoreActive_ID NetProto_ModifyPKScoreActive::ID_MIN;
const NetProto_ModifyPKScoreActive_ID NetProto_ModifyPKScoreActive::ID_MAX;
const int NetProto_ModifyPKScoreActive::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyPKScoreActive::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyPKScoreActive::NetProto_ModifyPKScoreActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyPKScoreActive::InitAsDefaultInstance() {
}

NetProto_ModifyPKScoreActive::NetProto_ModifyPKScoreActive(const NetProto_ModifyPKScoreActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyPKScoreActive::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyPKScoreActive::~NetProto_ModifyPKScoreActive() {
  SharedDtor();
}

void NetProto_ModifyPKScoreActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyPKScoreActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyPKScoreActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyPKScoreActive_descriptor_;
}

const NetProto_ModifyPKScoreActive& NetProto_ModifyPKScoreActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyPKScoreActive* NetProto_ModifyPKScoreActive::default_instance_ = NULL;

NetProto_ModifyPKScoreActive* NetProto_ModifyPKScoreActive::New() const {
  return new NetProto_ModifyPKScoreActive;
}

void NetProto_ModifyPKScoreActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyPKScoreActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyPKScoreActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyPKScoreActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyPKScoreActive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyPKScoreActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyPKScoreActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyPKScoreActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyPKScoreActive::MergeFrom(const NetProto_ModifyPKScoreActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyPKScoreActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyPKScoreActive::CopyFrom(const NetProto_ModifyPKScoreActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyPKScoreActive::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyPKScoreActive::Swap(NetProto_ModifyPKScoreActive* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyPKScoreActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyPKScoreActive_descriptor_;
  metadata.reflection = NetProto_ModifyPKScoreActive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyRMBActive_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyRMBActive_ID_descriptor_;
}
bool NetProto_ModifyRMBActive_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 89:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyRMBActive_ID NetProto_ModifyRMBActive::GROUPID;
const NetProto_ModifyRMBActive_ID NetProto_ModifyRMBActive::UNITID;
const NetProto_ModifyRMBActive_ID NetProto_ModifyRMBActive::ID_MIN;
const NetProto_ModifyRMBActive_ID NetProto_ModifyRMBActive::ID_MAX;
const int NetProto_ModifyRMBActive::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyRMBActive::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyRMBActive::NetProto_ModifyRMBActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyRMBActive::InitAsDefaultInstance() {
}

NetProto_ModifyRMBActive::NetProto_ModifyRMBActive(const NetProto_ModifyRMBActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyRMBActive::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyRMBActive::~NetProto_ModifyRMBActive() {
  SharedDtor();
}

void NetProto_ModifyRMBActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyRMBActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyRMBActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyRMBActive_descriptor_;
}

const NetProto_ModifyRMBActive& NetProto_ModifyRMBActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyRMBActive* NetProto_ModifyRMBActive::default_instance_ = NULL;

NetProto_ModifyRMBActive* NetProto_ModifyRMBActive::New() const {
  return new NetProto_ModifyRMBActive;
}

void NetProto_ModifyRMBActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyRMBActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyRMBActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyRMBActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyRMBActive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyRMBActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyRMBActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyRMBActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyRMBActive::MergeFrom(const NetProto_ModifyRMBActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyRMBActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyRMBActive::CopyFrom(const NetProto_ModifyRMBActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyRMBActive::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyRMBActive::Swap(NetProto_ModifyRMBActive* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyRMBActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyRMBActive_descriptor_;
  metadata.reflection = NetProto_ModifyRMBActive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DropItem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DropItem_ID_descriptor_;
}
bool NetProto_DropItem_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 90:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DropItem_ID NetProto_DropItem::GROUPID;
const NetProto_DropItem_ID NetProto_DropItem::UNITID;
const NetProto_DropItem_ID NetProto_DropItem::ID_MIN;
const NetProto_DropItem_ID NetProto_DropItem::ID_MAX;
const int NetProto_DropItem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DropItem::kNpcFieldNumber;
const int NetProto_DropItem::kIndexFieldNumber;
const int NetProto_DropItem::kVFieldNumber;
const int NetProto_DropItem::kV1FieldNumber;
const int NetProto_DropItem::kV2FieldNumber;
#endif  // !_MSC_VER

NetProto_DropItem::NetProto_DropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DropItem::InitAsDefaultInstance() {
}

NetProto_DropItem::NetProto_DropItem(const NetProto_DropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DropItem::SharedCtor() {
  _cached_size_ = 0;
  npc_ = 0;
  index_ = 0;
  v_ = 0;
  v1_ = 0;
  v2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DropItem::~NetProto_DropItem() {
  SharedDtor();
}

void NetProto_DropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DropItem_descriptor_;
}

const NetProto_DropItem& NetProto_DropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DropItem* NetProto_DropItem::default_instance_ = NULL;

NetProto_DropItem* NetProto_DropItem::New() const {
  return new NetProto_DropItem;
}

void NetProto_DropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_ = 0;
    index_ = 0;
    v_ = 0;
    v1_ = 0;
    v2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_)));
          set_has_npc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_v;
        break;
      }
      
      // optional int32 v = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_v1;
        break;
      }
      
      // optional int32 v1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v1_)));
          set_has_v1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_v2;
        break;
      }
      
      // optional int32 v2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v2_)));
          set_has_v2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 npc = 1;
  if (has_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // optional int32 v = 3;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->v(), output);
  }
  
  // optional int32 v1 = 4;
  if (has_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->v1(), output);
  }
  
  // optional int32 v2 = 5;
  if (has_v2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->v2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 npc = 1;
  if (has_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // optional int32 v = 3;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->v(), target);
  }
  
  // optional int32 v1 = 4;
  if (has_v1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->v1(), target);
  }
  
  // optional int32 v2 = 5;
  if (has_v2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->v2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DropItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npc = 1;
    if (has_npc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 v = 3;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }
    
    // optional int32 v1 = 4;
    if (has_v1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v1());
    }
    
    // optional int32 v2 = 5;
    if (has_v2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DropItem::MergeFrom(const NetProto_DropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc()) {
      set_npc(from.npc());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_v1()) {
      set_v1(from.v1());
    }
    if (from.has_v2()) {
      set_v2(from.v2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DropItem::CopyFrom(const NetProto_DropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DropItem::IsInitialized() const {
  
  return true;
}

void NetProto_DropItem::Swap(NetProto_DropItem* other) {
  if (other != this) {
    std::swap(npc_, other->npc_);
    std::swap(index_, other->index_);
    std::swap(v_, other->v_);
    std::swap(v1_, other->v1_);
    std::swap(v2_, other->v2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DropItem_descriptor_;
  metadata.reflection = NetProto_DropItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SellGoods_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SellGoods_ID_descriptor_;
}
bool NetProto_SellGoods_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 91:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SellGoods_ID NetProto_SellGoods::GROUPID;
const NetProto_SellGoods_ID NetProto_SellGoods::UNITID;
const NetProto_SellGoods_ID NetProto_SellGoods::ID_MIN;
const NetProto_SellGoods_ID NetProto_SellGoods::ID_MAX;
const int NetProto_SellGoods::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SellGoods::kOpFieldNumber;
const int NetProto_SellGoods::kTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_SellGoods::NetProto_SellGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SellGoods::InitAsDefaultInstance() {
}

NetProto_SellGoods::NetProto_SellGoods(const NetProto_SellGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SellGoods::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SellGoods::~NetProto_SellGoods() {
  SharedDtor();
}

void NetProto_SellGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_SellGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SellGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SellGoods_descriptor_;
}

const NetProto_SellGoods& NetProto_SellGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SellGoods* NetProto_SellGoods::default_instance_ = NULL;

NetProto_SellGoods* NetProto_SellGoods::New() const {
  return new NetProto_SellGoods;
}

void NetProto_SellGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SellGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GoodsInfo.ColorType op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GoodsInfo_ColorType_IsValid(value)) {
            set_op(static_cast< ::GoodsInfo_ColorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .PB_ItemPackage.Begin type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ItemPackage_Begin_IsValid(value)) {
            set_type(static_cast< ::PB_ItemPackage_Begin >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SellGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GoodsInfo.ColorType op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }
  
  // optional .PB_ItemPackage.Begin type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SellGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GoodsInfo.ColorType op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }
  
  // optional .PB_ItemPackage.Begin type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SellGoods::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GoodsInfo.ColorType op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }
    
    // optional .PB_ItemPackage.Begin type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SellGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SellGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SellGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SellGoods::MergeFrom(const NetProto_SellGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SellGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SellGoods::CopyFrom(const NetProto_SellGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SellGoods::IsInitialized() const {
  
  return true;
}

void NetProto_SellGoods::Swap(NetProto_SellGoods* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SellGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SellGoods_descriptor_;
  metadata.reflection = NetProto_SellGoods_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Luck_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Luck_ID_descriptor_;
}
bool NetProto_Luck_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 92:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Luck_ID NetProto_Luck::GROUPID;
const NetProto_Luck_ID NetProto_Luck::UNITID;
const NetProto_Luck_ID NetProto_Luck::ID_MIN;
const NetProto_Luck_ID NetProto_Luck::ID_MAX;
const int NetProto_Luck::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Luck::kIndexFieldNumber;
const int NetProto_Luck::kFreeFieldNumber;
#endif  // !_MSC_VER

NetProto_Luck::NetProto_Luck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Luck::InitAsDefaultInstance() {
}

NetProto_Luck::NetProto_Luck(const NetProto_Luck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Luck::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  free_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Luck::~NetProto_Luck() {
  SharedDtor();
}

void NetProto_Luck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Luck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Luck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Luck_descriptor_;
}

const NetProto_Luck& NetProto_Luck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Luck* NetProto_Luck::default_instance_ = NULL;

NetProto_Luck* NetProto_Luck::New() const {
  return new NetProto_Luck;
}

void NetProto_Luck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    free_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Luck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_free;
        break;
      }
      
      // optional bool free = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_)));
          set_has_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Luck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional bool free = 2;
  if (has_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->free(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Luck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional bool free = 2;
  if (has_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->free(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Luck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional bool free = 2;
    if (has_free()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Luck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Luck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Luck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Luck::MergeFrom(const NetProto_Luck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_free()) {
      set_free(from.free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Luck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Luck::CopyFrom(const NetProto_Luck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Luck::IsInitialized() const {
  
  return true;
}

void NetProto_Luck::Swap(NetProto_Luck* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(free_, other->free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Luck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Luck_descriptor_;
  metadata.reflection = NetProto_Luck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GrabRedEnvelope_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GrabRedEnvelope_ID_descriptor_;
}
bool NetProto_GrabRedEnvelope_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 93:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GrabRedEnvelope_ID NetProto_GrabRedEnvelope::GROUPID;
const NetProto_GrabRedEnvelope_ID NetProto_GrabRedEnvelope::UNITID;
const NetProto_GrabRedEnvelope_ID NetProto_GrabRedEnvelope::ID_MIN;
const NetProto_GrabRedEnvelope_ID NetProto_GrabRedEnvelope::ID_MAX;
const int NetProto_GrabRedEnvelope::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GrabRedEnvelope::kStrFieldNumber;
const int NetProto_GrabRedEnvelope::kGrFieldNumber;
#endif  // !_MSC_VER

NetProto_GrabRedEnvelope::NetProto_GrabRedEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GrabRedEnvelope::InitAsDefaultInstance() {
  gr_ = const_cast< ::NetProto_GetRes*>(&::NetProto_GetRes::default_instance());
}

NetProto_GrabRedEnvelope::NetProto_GrabRedEnvelope(const NetProto_GrabRedEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GrabRedEnvelope::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GrabRedEnvelope::~NetProto_GrabRedEnvelope() {
  SharedDtor();
}

void NetProto_GrabRedEnvelope::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete gr_;
  }
}

void NetProto_GrabRedEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GrabRedEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GrabRedEnvelope_descriptor_;
}

const NetProto_GrabRedEnvelope& NetProto_GrabRedEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GrabRedEnvelope* NetProto_GrabRedEnvelope::default_instance_ = NULL;

NetProto_GrabRedEnvelope* NetProto_GrabRedEnvelope::New() const {
  return new NetProto_GrabRedEnvelope;
}

void NetProto_GrabRedEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    if (has_gr()) {
      if (gr_ != NULL) gr_->::NetProto_GetRes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GrabRedEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gr;
        break;
      }
      
      // optional .NetProto_GetRes gr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GrabRedEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }
  
  // optional .NetProto_GetRes gr = 2;
  if (has_gr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GrabRedEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }
  
  // optional .NetProto_GetRes gr = 2;
  if (has_gr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GrabRedEnvelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional .NetProto_GetRes gr = 2;
    if (has_gr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GrabRedEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GrabRedEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GrabRedEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GrabRedEnvelope::MergeFrom(const NetProto_GrabRedEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_gr()) {
      mutable_gr()->::NetProto_GetRes::MergeFrom(from.gr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GrabRedEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GrabRedEnvelope::CopyFrom(const NetProto_GrabRedEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GrabRedEnvelope::IsInitialized() const {
  
  return true;
}

void NetProto_GrabRedEnvelope::Swap(NetProto_GrabRedEnvelope* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(gr_, other->gr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GrabRedEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GrabRedEnvelope_descriptor_;
  metadata.reflection = NetProto_GrabRedEnvelope_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_CatGift_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CatGift_ID_descriptor_;
}
bool NetProto_CatGift_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 94:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_CatGift_ID NetProto_CatGift::GROUPID;
const NetProto_CatGift_ID NetProto_CatGift::UNITID;
const NetProto_CatGift_ID NetProto_CatGift::ID_MIN;
const NetProto_CatGift_ID NetProto_CatGift::ID_MAX;
const int NetProto_CatGift::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_CatGift::kAllCountFieldNumber;
const int NetProto_CatGift::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_CatGift::NetProto_CatGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_CatGift::InitAsDefaultInstance() {
}

NetProto_CatGift::NetProto_CatGift(const NetProto_CatGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_CatGift::SharedCtor() {
  _cached_size_ = 0;
  allCount_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_CatGift::~NetProto_CatGift() {
  SharedDtor();
}

void NetProto_CatGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_CatGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_CatGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CatGift_descriptor_;
}

const NetProto_CatGift& NetProto_CatGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_CatGift* NetProto_CatGift::default_instance_ = NULL;

NetProto_CatGift* NetProto_CatGift::New() const {
  return new NetProto_CatGift;
}

void NetProto_CatGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allCount_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_CatGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 allCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allCount_)));
          set_has_allCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_CatGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 allCount = 1;
  if (has_allCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->allCount(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_CatGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 allCount = 1;
  if (has_allCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->allCount(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_CatGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 allCount = 1;
    if (has_allCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allCount());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_CatGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_CatGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_CatGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_CatGift::MergeFrom(const NetProto_CatGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allCount()) {
      set_allCount(from.allCount());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_CatGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_CatGift::CopyFrom(const NetProto_CatGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_CatGift::IsInitialized() const {
  
  return true;
}

void NetProto_CatGift::Swap(NetProto_CatGift* other) {
  if (other != this) {
    std::swap(allCount_, other->allCount_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_CatGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_CatGift_descriptor_;
  metadata.reflection = NetProto_CatGift_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GroupPurchase_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GroupPurchase_ID_descriptor_;
}
bool NetProto_GroupPurchase_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 95:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GroupPurchase_ID NetProto_GroupPurchase::GROUPID;
const NetProto_GroupPurchase_ID NetProto_GroupPurchase::UNITID;
const NetProto_GroupPurchase_ID NetProto_GroupPurchase::ID_MIN;
const NetProto_GroupPurchase_ID NetProto_GroupPurchase::ID_MAX;
const int NetProto_GroupPurchase::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GroupPurchase::kAllCountFieldNumber;
#endif  // !_MSC_VER

NetProto_GroupPurchase::NetProto_GroupPurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GroupPurchase::InitAsDefaultInstance() {
}

NetProto_GroupPurchase::NetProto_GroupPurchase(const NetProto_GroupPurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GroupPurchase::SharedCtor() {
  _cached_size_ = 0;
  allCount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GroupPurchase::~NetProto_GroupPurchase() {
  SharedDtor();
}

void NetProto_GroupPurchase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GroupPurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GroupPurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GroupPurchase_descriptor_;
}

const NetProto_GroupPurchase& NetProto_GroupPurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GroupPurchase* NetProto_GroupPurchase::default_instance_ = NULL;

NetProto_GroupPurchase* NetProto_GroupPurchase::New() const {
  return new NetProto_GroupPurchase;
}

void NetProto_GroupPurchase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    allCount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GroupPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 allCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allCount_)));
          set_has_allCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GroupPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 allCount = 1;
  if (has_allCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->allCount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GroupPurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 allCount = 1;
  if (has_allCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->allCount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GroupPurchase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 allCount = 1;
    if (has_allCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allCount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GroupPurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GroupPurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GroupPurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GroupPurchase::MergeFrom(const NetProto_GroupPurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allCount()) {
      set_allCount(from.allCount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GroupPurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GroupPurchase::CopyFrom(const NetProto_GroupPurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GroupPurchase::IsInitialized() const {
  
  return true;
}

void NetProto_GroupPurchase::Swap(NetProto_GroupPurchase* other) {
  if (other != this) {
    std::swap(allCount_, other->allCount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GroupPurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GroupPurchase_descriptor_;
  metadata.reflection = NetProto_GroupPurchase_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Rides_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Rides_ID_descriptor_;
}
bool NetProto_Rides_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 96:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Rides_ID NetProto_Rides::GROUPID;
const NetProto_Rides_ID NetProto_Rides::UNITID;
const NetProto_Rides_ID NetProto_Rides::ID_MIN;
const NetProto_Rides_ID NetProto_Rides::ID_MAX;
const int NetProto_Rides::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Rides::kRidesFieldNumber;
#endif  // !_MSC_VER

NetProto_Rides::NetProto_Rides()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Rides::InitAsDefaultInstance() {
}

NetProto_Rides::NetProto_Rides(const NetProto_Rides& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Rides::SharedCtor() {
  _cached_size_ = 0;
  rides_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Rides::~NetProto_Rides() {
  SharedDtor();
}

void NetProto_Rides::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Rides::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Rides::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Rides_descriptor_;
}

const NetProto_Rides& NetProto_Rides::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Rides* NetProto_Rides::default_instance_ = NULL;

NetProto_Rides* NetProto_Rides::New() const {
  return new NetProto_Rides;
}

void NetProto_Rides::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rides_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Rides::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rides = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rides_)));
          set_has_rides();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Rides::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rides = 1;
  if (has_rides()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rides(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Rides::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rides = 1;
  if (has_rides()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rides(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Rides::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rides = 1;
    if (has_rides()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rides());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Rides::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Rides* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Rides*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Rides::MergeFrom(const NetProto_Rides& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rides()) {
      set_rides(from.rides());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Rides::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Rides::CopyFrom(const NetProto_Rides& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Rides::IsInitialized() const {
  
  return true;
}

void NetProto_Rides::Swap(NetProto_Rides* other) {
  if (other != this) {
    std::swap(rides_, other->rides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Rides::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Rides_descriptor_;
  metadata.reflection = NetProto_Rides_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RidesTrain_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesTrain_ID_descriptor_;
}
bool NetProto_RidesTrain_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 97:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RidesTrain_ID NetProto_RidesTrain::GROUPID;
const NetProto_RidesTrain_ID NetProto_RidesTrain::UNITID;
const NetProto_RidesTrain_ID NetProto_RidesTrain::ID_MIN;
const NetProto_RidesTrain_ID NetProto_RidesTrain::ID_MAX;
const int NetProto_RidesTrain::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RidesTrain::kIndexFieldNumber;
const int NetProto_RidesTrain::kHighFieldNumber;
const int NetProto_RidesTrain::kUpPropertyFieldNumber;
const int NetProto_RidesTrain::kDownPropertyFieldNumber;
const int NetProto_RidesTrain::kUpvFieldNumber;
const int NetProto_RidesTrain::kDownvFieldNumber;
#endif  // !_MSC_VER

NetProto_RidesTrain::NetProto_RidesTrain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RidesTrain::InitAsDefaultInstance() {
}

NetProto_RidesTrain::NetProto_RidesTrain(const NetProto_RidesTrain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RidesTrain::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  high_ = false;
  upProperty_ = 0;
  downProperty_ = 0;
  upv_ = 0;
  downv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RidesTrain::~NetProto_RidesTrain() {
  SharedDtor();
}

void NetProto_RidesTrain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RidesTrain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RidesTrain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesTrain_descriptor_;
}

const NetProto_RidesTrain& NetProto_RidesTrain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RidesTrain* NetProto_RidesTrain::default_instance_ = NULL;

NetProto_RidesTrain* NetProto_RidesTrain::New() const {
  return new NetProto_RidesTrain;
}

void NetProto_RidesTrain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    high_ = false;
    upProperty_ = 0;
    downProperty_ = 0;
    upv_ = 0;
    downv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RidesTrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_high;
        break;
      }
      
      // optional bool high = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_upProperty;
        break;
      }
      
      // optional int32 upProperty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upProperty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upProperty_)));
          set_has_upProperty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_downProperty;
        break;
      }
      
      // optional int32 downProperty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downProperty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downProperty_)));
          set_has_downProperty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upv;
        break;
      }
      
      // optional int32 upv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upv_)));
          set_has_upv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_downv;
        break;
      }
      
      // optional int32 downv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downv_)));
          set_has_downv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RidesTrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional bool high = 2;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->high(), output);
  }
  
  // optional int32 upProperty = 3;
  if (has_upProperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->upProperty(), output);
  }
  
  // optional int32 downProperty = 4;
  if (has_downProperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->downProperty(), output);
  }
  
  // optional int32 upv = 5;
  if (has_upv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->upv(), output);
  }
  
  // optional int32 downv = 6;
  if (has_downv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->downv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RidesTrain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional bool high = 2;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->high(), target);
  }
  
  // optional int32 upProperty = 3;
  if (has_upProperty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->upProperty(), target);
  }
  
  // optional int32 downProperty = 4;
  if (has_downProperty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->downProperty(), target);
  }
  
  // optional int32 upv = 5;
  if (has_upv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->upv(), target);
  }
  
  // optional int32 downv = 6;
  if (has_downv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->downv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RidesTrain::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional bool high = 2;
    if (has_high()) {
      total_size += 1 + 1;
    }
    
    // optional int32 upProperty = 3;
    if (has_upProperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upProperty());
    }
    
    // optional int32 downProperty = 4;
    if (has_downProperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downProperty());
    }
    
    // optional int32 upv = 5;
    if (has_upv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upv());
    }
    
    // optional int32 downv = 6;
    if (has_downv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RidesTrain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RidesTrain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RidesTrain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RidesTrain::MergeFrom(const NetProto_RidesTrain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_upProperty()) {
      set_upProperty(from.upProperty());
    }
    if (from.has_downProperty()) {
      set_downProperty(from.downProperty());
    }
    if (from.has_upv()) {
      set_upv(from.upv());
    }
    if (from.has_downv()) {
      set_downv(from.downv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RidesTrain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RidesTrain::CopyFrom(const NetProto_RidesTrain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RidesTrain::IsInitialized() const {
  
  return true;
}

void NetProto_RidesTrain::Swap(NetProto_RidesTrain* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(high_, other->high_);
    std::swap(upProperty_, other->upProperty_);
    std::swap(downProperty_, other->downProperty_);
    std::swap(upv_, other->upv_);
    std::swap(downv_, other->downv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RidesTrain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RidesTrain_descriptor_;
  metadata.reflection = NetProto_RidesTrain_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GenRides_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenRides_ID_descriptor_;
}
bool NetProto_GenRides_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 98:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GenRides_ID NetProto_GenRides::GROUPID;
const NetProto_GenRides_ID NetProto_GenRides::UNITID;
const NetProto_GenRides_ID NetProto_GenRides::ID_MIN;
const NetProto_GenRides_ID NetProto_GenRides::ID_MAX;
const int NetProto_GenRides::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GenRides::kIndexesFieldNumber;
const int NetProto_GenRides::kIdsFieldNumber;
#endif  // !_MSC_VER

NetProto_GenRides::NetProto_GenRides()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GenRides::InitAsDefaultInstance() {
}

NetProto_GenRides::NetProto_GenRides(const NetProto_GenRides& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GenRides::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GenRides::~NetProto_GenRides() {
  SharedDtor();
}

void NetProto_GenRides::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GenRides::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GenRides::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GenRides_descriptor_;
}

const NetProto_GenRides& NetProto_GenRides::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GenRides* NetProto_GenRides::default_instance_ = NULL;

NetProto_GenRides* NetProto_GenRides::New() const {
  return new NetProto_GenRides;
}

void NetProto_GenRides::Clear() {
  indexes_.Clear();
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GenRides::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 indexes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_indexes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indexes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_indexes;
        if (input->ExpectTag(16)) goto parse_ids;
        break;
      }
      
      // repeated int32 ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GenRides::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 indexes = 1;
  for (int i = 0; i < this->indexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->indexes(i), output);
  }
  
  // repeated int32 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GenRides::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 indexes = 1;
  for (int i = 0; i < this->indexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->indexes(i), target);
  }
  
  // repeated int32 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GenRides::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 indexes = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indexes(i));
    }
    total_size += 1 * this->indexes_size() + data_size;
  }
  
  // repeated int32 ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GenRides::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GenRides* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GenRides*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GenRides::MergeFrom(const NetProto_GenRides& from) {
  GOOGLE_CHECK_NE(&from, this);
  indexes_.MergeFrom(from.indexes_);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GenRides::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GenRides::CopyFrom(const NetProto_GenRides& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GenRides::IsInitialized() const {
  
  return true;
}

void NetProto_GenRides::Swap(NetProto_GenRides* other) {
  if (other != this) {
    indexes_.Swap(&other->indexes_);
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GenRides::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GenRides_descriptor_;
  metadata.reflection = NetProto_GenRides_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GodShip_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodShip_ID_descriptor_;
}
bool NetProto_GodShip_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GodShip_ID NetProto_GodShip::GROUPID;
const NetProto_GodShip_ID NetProto_GodShip::UNITID;
const NetProto_GodShip_ID NetProto_GodShip::ID_MIN;
const NetProto_GodShip_ID NetProto_GodShip::ID_MAX;
const int NetProto_GodShip::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GodShip::kIndexFieldNumber;
const int NetProto_GodShip::kNextFieldNumber;
const int NetProto_GodShip::kCutFieldNumber;
#endif  // !_MSC_VER

NetProto_GodShip::NetProto_GodShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GodShip::InitAsDefaultInstance() {
}

NetProto_GodShip::NetProto_GodShip(const NetProto_GodShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GodShip::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  next_ = false;
  cut_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GodShip::~NetProto_GodShip() {
  SharedDtor();
}

void NetProto_GodShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GodShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GodShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodShip_descriptor_;
}

const NetProto_GodShip& NetProto_GodShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GodShip* NetProto_GodShip::default_instance_ = NULL;

NetProto_GodShip* NetProto_GodShip::New() const {
  return new NetProto_GodShip;
}

void NetProto_GodShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    next_ = false;
    cut_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GodShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next;
        break;
      }
      
      // optional bool next = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &next_)));
          set_has_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cut;
        break;
      }
      
      // optional int32 cut = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cut_)));
          set_has_cut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GodShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional bool next = 2;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->next(), output);
  }
  
  // optional int32 cut = 3;
  if (has_cut()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cut(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GodShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional bool next = 2;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->next(), target);
  }
  
  // optional int32 cut = 3;
  if (has_cut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cut(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GodShip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional bool next = 2;
    if (has_next()) {
      total_size += 1 + 1;
    }
    
    // optional int32 cut = 3;
    if (has_cut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cut());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GodShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GodShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GodShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GodShip::MergeFrom(const NetProto_GodShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
    if (from.has_cut()) {
      set_cut(from.cut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GodShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GodShip::CopyFrom(const NetProto_GodShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GodShip::IsInitialized() const {
  
  return true;
}

void NetProto_GodShip::Swap(NetProto_GodShip* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(next_, other->next_);
    std::swap(cut_, other->cut_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GodShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GodShip_descriptor_;
  metadata.reflection = NetProto_GodShip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Swallow_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Swallow_ID_descriptor_;
}
bool NetProto_Swallow_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Swallow_ID NetProto_Swallow::GROUPID;
const NetProto_Swallow_ID NetProto_Swallow::UNITID;
const NetProto_Swallow_ID NetProto_Swallow::ID_MIN;
const NetProto_Swallow_ID NetProto_Swallow::ID_MAX;
const int NetProto_Swallow::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Swallow::kIndexFieldNumber;
const int NetProto_Swallow::kSelectFieldNumber;
#endif  // !_MSC_VER

NetProto_Swallow::NetProto_Swallow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Swallow::InitAsDefaultInstance() {
}

NetProto_Swallow::NetProto_Swallow(const NetProto_Swallow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Swallow::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  select_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Swallow::~NetProto_Swallow() {
  SharedDtor();
}

void NetProto_Swallow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Swallow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Swallow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Swallow_descriptor_;
}

const NetProto_Swallow& NetProto_Swallow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Swallow* NetProto_Swallow::default_instance_ = NULL;

NetProto_Swallow* NetProto_Swallow::New() const {
  return new NetProto_Swallow;
}

void NetProto_Swallow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    select_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Swallow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_select;
        break;
      }
      
      // optional int32 select = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_select:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &select_)));
          set_has_select();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Swallow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 select = 2;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->select(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Swallow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 select = 2;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->select(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Swallow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 select = 2;
    if (has_select()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->select());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Swallow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Swallow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Swallow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Swallow::MergeFrom(const NetProto_Swallow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_select()) {
      set_select(from.select());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Swallow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Swallow::CopyFrom(const NetProto_Swallow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Swallow::IsInitialized() const {
  
  return true;
}

void NetProto_Swallow::Swap(NetProto_Swallow* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(select_, other->select_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Swallow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Swallow_descriptor_;
  metadata.reflection = NetProto_Swallow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GodPackage_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodPackage_ID_descriptor_;
}
bool NetProto_GodPackage_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 101:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GodPackage_ID NetProto_GodPackage::GROUPID;
const NetProto_GodPackage_ID NetProto_GodPackage::UNITID;
const NetProto_GodPackage_ID NetProto_GodPackage::ID_MIN;
const NetProto_GodPackage_ID NetProto_GodPackage::ID_MAX;
const int NetProto_GodPackage::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GodPackage::kPoolFieldNumber;
const int NetProto_GodPackage::kPackageFieldNumber;
const int NetProto_GodPackage::kIdFieldNumber;
const int NetProto_GodPackage::kExpFieldNumber;
const int NetProto_GodPackage::kLevelFieldNumber;
const int NetProto_GodPackage::kQualityFieldNumber;
#endif  // !_MSC_VER

NetProto_GodPackage::NetProto_GodPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GodPackage::InitAsDefaultInstance() {
}

NetProto_GodPackage::NetProto_GodPackage(const NetProto_GodPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GodPackage::SharedCtor() {
  _cached_size_ = 0;
  pool_ = 0;
  package_ = 0;
  id_ = 0;
  exp_ = 0;
  level_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GodPackage::~NetProto_GodPackage() {
  SharedDtor();
}

void NetProto_GodPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GodPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GodPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GodPackage_descriptor_;
}

const NetProto_GodPackage& NetProto_GodPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GodPackage* NetProto_GodPackage::default_instance_ = NULL;

NetProto_GodPackage* NetProto_GodPackage::New() const {
  return new NetProto_GodPackage;
}

void NetProto_GodPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pool_ = 0;
    package_ = 0;
    id_ = 0;
    exp_ = 0;
    level_ = 0;
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GodPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pool = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pool_)));
          set_has_pool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_package;
        break;
      }
      
      // optional int32 package = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_)));
          set_has_package();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GodPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pool = 1;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pool(), output);
  }
  
  // optional int32 package = 2;
  if (has_package()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->package(), output);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // optional int32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quality(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GodPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pool = 1;
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pool(), target);
  }
  
  // optional int32 package = 2;
  if (has_package()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->package(), target);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // optional int32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quality(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GodPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pool = 1;
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pool());
    }
    
    // optional int32 package = 2;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package());
    }
    
    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GodPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GodPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GodPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GodPackage::MergeFrom(const NetProto_GodPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GodPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GodPackage::CopyFrom(const NetProto_GodPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GodPackage::IsInitialized() const {
  
  return true;
}

void NetProto_GodPackage::Swap(NetProto_GodPackage* other) {
  if (other != this) {
    std::swap(pool_, other->pool_);
    std::swap(package_, other->package_);
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GodPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GodPackage_descriptor_;
  metadata.reflection = NetProto_GodPackage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_WearGodShip_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_WearGodShip_ID_descriptor_;
}
bool NetProto_WearGodShip_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_WearGodShip_ID NetProto_WearGodShip::GROUPID;
const NetProto_WearGodShip_ID NetProto_WearGodShip::UNITID;
const NetProto_WearGodShip_ID NetProto_WearGodShip::ID_MIN;
const NetProto_WearGodShip_ID NetProto_WearGodShip::ID_MAX;
const int NetProto_WearGodShip::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_WearGodShip::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_WearGodShip::NetProto_WearGodShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_WearGodShip::InitAsDefaultInstance() {
}

NetProto_WearGodShip::NetProto_WearGodShip(const NetProto_WearGodShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_WearGodShip::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_WearGodShip::~NetProto_WearGodShip() {
  SharedDtor();
}

void NetProto_WearGodShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_WearGodShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_WearGodShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_WearGodShip_descriptor_;
}

const NetProto_WearGodShip& NetProto_WearGodShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_WearGodShip* NetProto_WearGodShip::default_instance_ = NULL;

NetProto_WearGodShip* NetProto_WearGodShip::New() const {
  return new NetProto_WearGodShip;
}

void NetProto_WearGodShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_WearGodShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_WearGodShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_WearGodShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_WearGodShip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_WearGodShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_WearGodShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_WearGodShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_WearGodShip::MergeFrom(const NetProto_WearGodShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_WearGodShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_WearGodShip::CopyFrom(const NetProto_WearGodShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_WearGodShip::IsInitialized() const {
  
  return true;
}

void NetProto_WearGodShip::Swap(NetProto_WearGodShip* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_WearGodShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_WearGodShip_descriptor_;
  metadata.reflection = NetProto_WearGodShip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UnWearGodShip_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnWearGodShip_ID_descriptor_;
}
bool NetProto_UnWearGodShip_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 103:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UnWearGodShip_ID NetProto_UnWearGodShip::GROUPID;
const NetProto_UnWearGodShip_ID NetProto_UnWearGodShip::UNITID;
const NetProto_UnWearGodShip_ID NetProto_UnWearGodShip::ID_MIN;
const NetProto_UnWearGodShip_ID NetProto_UnWearGodShip::ID_MAX;
const int NetProto_UnWearGodShip::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_UnWearGodShip::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_UnWearGodShip::NetProto_UnWearGodShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UnWearGodShip::InitAsDefaultInstance() {
}

NetProto_UnWearGodShip::NetProto_UnWearGodShip(const NetProto_UnWearGodShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UnWearGodShip::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UnWearGodShip::~NetProto_UnWearGodShip() {
  SharedDtor();
}

void NetProto_UnWearGodShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UnWearGodShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UnWearGodShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnWearGodShip_descriptor_;
}

const NetProto_UnWearGodShip& NetProto_UnWearGodShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UnWearGodShip* NetProto_UnWearGodShip::default_instance_ = NULL;

NetProto_UnWearGodShip* NetProto_UnWearGodShip::New() const {
  return new NetProto_UnWearGodShip;
}

void NetProto_UnWearGodShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UnWearGodShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_UnWearGodShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UnWearGodShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UnWearGodShip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UnWearGodShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UnWearGodShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UnWearGodShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UnWearGodShip::MergeFrom(const NetProto_UnWearGodShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UnWearGodShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UnWearGodShip::CopyFrom(const NetProto_UnWearGodShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UnWearGodShip::IsInitialized() const {
  
  return true;
}

void NetProto_UnWearGodShip::Swap(NetProto_UnWearGodShip* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UnWearGodShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UnWearGodShip_descriptor_;
  metadata.reflection = NetProto_UnWearGodShip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ArrangeGodShip_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ArrangeGodShip_ID_descriptor_;
}
bool NetProto_ArrangeGodShip_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 104:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ArrangeGodShip_ID NetProto_ArrangeGodShip::GROUPID;
const NetProto_ArrangeGodShip_ID NetProto_ArrangeGodShip::UNITID;
const NetProto_ArrangeGodShip_ID NetProto_ArrangeGodShip::ID_MIN;
const NetProto_ArrangeGodShip_ID NetProto_ArrangeGodShip::ID_MAX;
const int NetProto_ArrangeGodShip::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_ArrangeGodShip::NetProto_ArrangeGodShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ArrangeGodShip::InitAsDefaultInstance() {
}

NetProto_ArrangeGodShip::NetProto_ArrangeGodShip(const NetProto_ArrangeGodShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ArrangeGodShip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ArrangeGodShip::~NetProto_ArrangeGodShip() {
  SharedDtor();
}

void NetProto_ArrangeGodShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ArrangeGodShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ArrangeGodShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ArrangeGodShip_descriptor_;
}

const NetProto_ArrangeGodShip& NetProto_ArrangeGodShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ArrangeGodShip* NetProto_ArrangeGodShip::default_instance_ = NULL;

NetProto_ArrangeGodShip* NetProto_ArrangeGodShip::New() const {
  return new NetProto_ArrangeGodShip;
}

void NetProto_ArrangeGodShip::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ArrangeGodShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_ArrangeGodShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ArrangeGodShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ArrangeGodShip::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ArrangeGodShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ArrangeGodShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ArrangeGodShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ArrangeGodShip::MergeFrom(const NetProto_ArrangeGodShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ArrangeGodShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ArrangeGodShip::CopyFrom(const NetProto_ArrangeGodShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ArrangeGodShip::IsInitialized() const {
  
  return true;
}

void NetProto_ArrangeGodShip::Swap(NetProto_ArrangeGodShip* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ArrangeGodShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ArrangeGodShip_descriptor_;
  metadata.reflection = NetProto_ArrangeGodShip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RidesUP_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesUP_ID_descriptor_;
}
bool NetProto_RidesUP_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 105:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RidesUP_ID NetProto_RidesUP::GROUPID;
const NetProto_RidesUP_ID NetProto_RidesUP::UNITID;
const NetProto_RidesUP_ID NetProto_RidesUP::ID_MIN;
const NetProto_RidesUP_ID NetProto_RidesUP::ID_MAX;
const int NetProto_RidesUP::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RidesUP::kIndexFieldNumber;
const int NetProto_RidesUP::kStarFieldNumber;
#endif  // !_MSC_VER

NetProto_RidesUP::NetProto_RidesUP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RidesUP::InitAsDefaultInstance() {
}

NetProto_RidesUP::NetProto_RidesUP(const NetProto_RidesUP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RidesUP::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RidesUP::~NetProto_RidesUP() {
  SharedDtor();
}

void NetProto_RidesUP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RidesUP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RidesUP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesUP_descriptor_;
}

const NetProto_RidesUP& NetProto_RidesUP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RidesUP* NetProto_RidesUP::default_instance_ = NULL;

NetProto_RidesUP* NetProto_RidesUP::New() const {
  return new NetProto_RidesUP;
}

void NetProto_RidesUP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RidesUP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RidesUP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RidesUP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RidesUP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RidesUP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RidesUP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RidesUP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RidesUP::MergeFrom(const NetProto_RidesUP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RidesUP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RidesUP::CopyFrom(const NetProto_RidesUP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RidesUP::IsInitialized() const {
  
  return true;
}

void NetProto_RidesUP::Swap(NetProto_RidesUP* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RidesUP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RidesUP_descriptor_;
  metadata.reflection = NetProto_RidesUP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RidesInherit_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesInherit_ID_descriptor_;
}
bool NetProto_RidesInherit_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 106:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RidesInherit_ID NetProto_RidesInherit::GROUPID;
const NetProto_RidesInherit_ID NetProto_RidesInherit::UNITID;
const NetProto_RidesInherit_ID NetProto_RidesInherit::ID_MIN;
const NetProto_RidesInherit_ID NetProto_RidesInherit::ID_MAX;
const int NetProto_RidesInherit::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RidesInherit::kTargetFieldNumber;
const int NetProto_RidesInherit::kRidesExpendFieldNumber;
const int NetProto_RidesInherit::kCurExpFieldNumber;
const int NetProto_RidesInherit::kLevelFieldNumber;
const int NetProto_RidesInherit::kPotentialFieldNumber;
#endif  // !_MSC_VER

NetProto_RidesInherit::NetProto_RidesInherit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RidesInherit::InitAsDefaultInstance() {
}

NetProto_RidesInherit::NetProto_RidesInherit(const NetProto_RidesInherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RidesInherit::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0;
  curExp_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  potential_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RidesInherit::~NetProto_RidesInherit() {
  SharedDtor();
}

void NetProto_RidesInherit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RidesInherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RidesInherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesInherit_descriptor_;
}

const NetProto_RidesInherit& NetProto_RidesInherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RidesInherit* NetProto_RidesInherit::default_instance_ = NULL;

NetProto_RidesInherit* NetProto_RidesInherit::New() const {
  return new NetProto_RidesInherit;
}

void NetProto_RidesInherit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = 0;
    curExp_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    potential_ = 0;
  }
  ridesExpend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RidesInherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ridesExpend;
        break;
      }
      
      // repeated int32 ridesExpend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ridesExpend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ridesExpend())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ridesExpend())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ridesExpend;
        if (input->ExpectTag(24)) goto parse_curExp;
        break;
      }
      
      // optional int64 curExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curExp_)));
          set_has_curExp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_potential;
        break;
      }
      
      // optional int32 potential = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_potential:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &potential_)));
          set_has_potential();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RidesInherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }
  
  // repeated int32 ridesExpend = 2;
  for (int i = 0; i < this->ridesExpend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ridesExpend(i), output);
  }
  
  // optional int64 curExp = 3;
  if (has_curExp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curExp(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 potential = 5;
  if (has_potential()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->potential(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RidesInherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }
  
  // repeated int32 ridesExpend = 2;
  for (int i = 0; i < this->ridesExpend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ridesExpend(i), target);
  }
  
  // optional int64 curExp = 3;
  if (has_curExp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curExp(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 potential = 5;
  if (has_potential()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->potential(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RidesInherit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }
    
    // optional int64 curExp = 3;
    if (has_curExp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curExp());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 potential = 5;
    if (has_potential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->potential());
    }
    
  }
  // repeated int32 ridesExpend = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridesExpend_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ridesExpend(i));
    }
    total_size += 1 * this->ridesExpend_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RidesInherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RidesInherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RidesInherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RidesInherit::MergeFrom(const NetProto_RidesInherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridesExpend_.MergeFrom(from.ridesExpend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_curExp()) {
      set_curExp(from.curExp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_potential()) {
      set_potential(from.potential());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RidesInherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RidesInherit::CopyFrom(const NetProto_RidesInherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RidesInherit::IsInitialized() const {
  
  return true;
}

void NetProto_RidesInherit::Swap(NetProto_RidesInherit* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    ridesExpend_.Swap(&other->ridesExpend_);
    std::swap(curExp_, other->curExp_);
    std::swap(level_, other->level_);
    std::swap(potential_, other->potential_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RidesInherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RidesInherit_descriptor_;
  metadata.reflection = NetProto_RidesInherit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SingleGodShip_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SingleGodShip_ID_descriptor_;
}
bool NetProto_SingleGodShip_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 107:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SingleGodShip_ID NetProto_SingleGodShip::GROUPID;
const NetProto_SingleGodShip_ID NetProto_SingleGodShip::UNITID;
const NetProto_SingleGodShip_ID NetProto_SingleGodShip::ID_MIN;
const NetProto_SingleGodShip_ID NetProto_SingleGodShip::ID_MAX;
const int NetProto_SingleGodShip::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SingleGodShip::kIndexFieldNumber;
const int NetProto_SingleGodShip::kEatFieldNumber;
#endif  // !_MSC_VER

NetProto_SingleGodShip::NetProto_SingleGodShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SingleGodShip::InitAsDefaultInstance() {
}

NetProto_SingleGodShip::NetProto_SingleGodShip(const NetProto_SingleGodShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SingleGodShip::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SingleGodShip::~NetProto_SingleGodShip() {
  SharedDtor();
}

void NetProto_SingleGodShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_SingleGodShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SingleGodShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SingleGodShip_descriptor_;
}

const NetProto_SingleGodShip& NetProto_SingleGodShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SingleGodShip* NetProto_SingleGodShip::default_instance_ = NULL;

NetProto_SingleGodShip* NetProto_SingleGodShip::New() const {
  return new NetProto_SingleGodShip;
}

void NetProto_SingleGodShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  eat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SingleGodShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eat;
        break;
      }
      
      // repeated int32 eat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_eat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_eat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eat;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SingleGodShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // repeated int32 eat = 2;
  for (int i = 0; i < this->eat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->eat(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SingleGodShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // repeated int32 eat = 2;
  for (int i = 0; i < this->eat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->eat(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SingleGodShip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  // repeated int32 eat = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->eat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->eat(i));
    }
    total_size += 1 * this->eat_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SingleGodShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SingleGodShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SingleGodShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SingleGodShip::MergeFrom(const NetProto_SingleGodShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  eat_.MergeFrom(from.eat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SingleGodShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SingleGodShip::CopyFrom(const NetProto_SingleGodShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SingleGodShip::IsInitialized() const {
  
  return true;
}

void NetProto_SingleGodShip::Swap(NetProto_SingleGodShip* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    eat_.Swap(&other->eat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SingleGodShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SingleGodShip_descriptor_;
  metadata.reflection = NetProto_SingleGodShip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RidesLockAtt_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesLockAtt_ID_descriptor_;
}
bool NetProto_RidesLockAtt_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 108:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RidesLockAtt_ID NetProto_RidesLockAtt::GROUPID;
const NetProto_RidesLockAtt_ID NetProto_RidesLockAtt::UNITID;
const NetProto_RidesLockAtt_ID NetProto_RidesLockAtt::ID_MIN;
const NetProto_RidesLockAtt_ID NetProto_RidesLockAtt::ID_MAX;
const int NetProto_RidesLockAtt::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RidesLockAtt::kIndexFieldNumber;
const int NetProto_RidesLockAtt::kLockIndexFieldNumber;
const int NetProto_RidesLockAtt::kLockFieldNumber;
#endif  // !_MSC_VER

NetProto_RidesLockAtt::NetProto_RidesLockAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RidesLockAtt::InitAsDefaultInstance() {
}

NetProto_RidesLockAtt::NetProto_RidesLockAtt(const NetProto_RidesLockAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RidesLockAtt::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  lockIndex_ = 0;
  lock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RidesLockAtt::~NetProto_RidesLockAtt() {
  SharedDtor();
}

void NetProto_RidesLockAtt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RidesLockAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RidesLockAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesLockAtt_descriptor_;
}

const NetProto_RidesLockAtt& NetProto_RidesLockAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RidesLockAtt* NetProto_RidesLockAtt::default_instance_ = NULL;

NetProto_RidesLockAtt* NetProto_RidesLockAtt::New() const {
  return new NetProto_RidesLockAtt;
}

void NetProto_RidesLockAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    lockIndex_ = 0;
    lock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RidesLockAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lockIndex;
        break;
      }
      
      // optional int32 lockIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockIndex_)));
          set_has_lockIndex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lock;
        break;
      }
      
      // optional bool lock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RidesLockAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 lockIndex = 2;
  if (has_lockIndex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lockIndex(), output);
  }
  
  // optional bool lock = 3;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lock(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RidesLockAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 lockIndex = 2;
  if (has_lockIndex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lockIndex(), target);
  }
  
  // optional bool lock = 3;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lock(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RidesLockAtt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 lockIndex = 2;
    if (has_lockIndex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lockIndex());
    }
    
    // optional bool lock = 3;
    if (has_lock()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RidesLockAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RidesLockAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RidesLockAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RidesLockAtt::MergeFrom(const NetProto_RidesLockAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_lockIndex()) {
      set_lockIndex(from.lockIndex());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RidesLockAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RidesLockAtt::CopyFrom(const NetProto_RidesLockAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RidesLockAtt::IsInitialized() const {
  
  return true;
}

void NetProto_RidesLockAtt::Swap(NetProto_RidesLockAtt* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(lockIndex_, other->lockIndex_);
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RidesLockAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RidesLockAtt_descriptor_;
  metadata.reflection = NetProto_RidesLockAtt_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RidesConfirmTrain_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesConfirmTrain_ID_descriptor_;
}
bool NetProto_RidesConfirmTrain_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 109:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RidesConfirmTrain_ID NetProto_RidesConfirmTrain::GROUPID;
const NetProto_RidesConfirmTrain_ID NetProto_RidesConfirmTrain::UNITID;
const NetProto_RidesConfirmTrain_ID NetProto_RidesConfirmTrain::ID_MIN;
const NetProto_RidesConfirmTrain_ID NetProto_RidesConfirmTrain::ID_MAX;
const int NetProto_RidesConfirmTrain::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RidesConfirmTrain::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_RidesConfirmTrain::NetProto_RidesConfirmTrain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RidesConfirmTrain::InitAsDefaultInstance() {
}

NetProto_RidesConfirmTrain::NetProto_RidesConfirmTrain(const NetProto_RidesConfirmTrain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RidesConfirmTrain::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RidesConfirmTrain::~NetProto_RidesConfirmTrain() {
  SharedDtor();
}

void NetProto_RidesConfirmTrain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RidesConfirmTrain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RidesConfirmTrain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesConfirmTrain_descriptor_;
}

const NetProto_RidesConfirmTrain& NetProto_RidesConfirmTrain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RidesConfirmTrain* NetProto_RidesConfirmTrain::default_instance_ = NULL;

NetProto_RidesConfirmTrain* NetProto_RidesConfirmTrain::New() const {
  return new NetProto_RidesConfirmTrain;
}

void NetProto_RidesConfirmTrain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RidesConfirmTrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RidesConfirmTrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RidesConfirmTrain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RidesConfirmTrain::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RidesConfirmTrain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RidesConfirmTrain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RidesConfirmTrain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RidesConfirmTrain::MergeFrom(const NetProto_RidesConfirmTrain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RidesConfirmTrain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RidesConfirmTrain::CopyFrom(const NetProto_RidesConfirmTrain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RidesConfirmTrain::IsInitialized() const {
  
  return true;
}

void NetProto_RidesConfirmTrain::Swap(NetProto_RidesConfirmTrain* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RidesConfirmTrain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RidesConfirmTrain_descriptor_;
  metadata.reflection = NetProto_RidesConfirmTrain_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RidesUnLockAtt_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesUnLockAtt_ID_descriptor_;
}
bool NetProto_RidesUnLockAtt_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 110:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RidesUnLockAtt_ID NetProto_RidesUnLockAtt::GROUPID;
const NetProto_RidesUnLockAtt_ID NetProto_RidesUnLockAtt::UNITID;
const NetProto_RidesUnLockAtt_ID NetProto_RidesUnLockAtt::ID_MIN;
const NetProto_RidesUnLockAtt_ID NetProto_RidesUnLockAtt::ID_MAX;
const int NetProto_RidesUnLockAtt::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RidesUnLockAtt::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_RidesUnLockAtt::NetProto_RidesUnLockAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RidesUnLockAtt::InitAsDefaultInstance() {
}

NetProto_RidesUnLockAtt::NetProto_RidesUnLockAtt(const NetProto_RidesUnLockAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RidesUnLockAtt::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RidesUnLockAtt::~NetProto_RidesUnLockAtt() {
  SharedDtor();
}

void NetProto_RidesUnLockAtt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RidesUnLockAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RidesUnLockAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RidesUnLockAtt_descriptor_;
}

const NetProto_RidesUnLockAtt& NetProto_RidesUnLockAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RidesUnLockAtt* NetProto_RidesUnLockAtt::default_instance_ = NULL;

NetProto_RidesUnLockAtt* NetProto_RidesUnLockAtt::New() const {
  return new NetProto_RidesUnLockAtt;
}

void NetProto_RidesUnLockAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RidesUnLockAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RidesUnLockAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RidesUnLockAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RidesUnLockAtt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RidesUnLockAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RidesUnLockAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RidesUnLockAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RidesUnLockAtt::MergeFrom(const NetProto_RidesUnLockAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RidesUnLockAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RidesUnLockAtt::CopyFrom(const NetProto_RidesUnLockAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RidesUnLockAtt::IsInitialized() const {
  
  return true;
}

void NetProto_RidesUnLockAtt::Swap(NetProto_RidesUnLockAtt* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RidesUnLockAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RidesUnLockAtt_descriptor_;
  metadata.reflection = NetProto_RidesUnLockAtt_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddStatus_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddStatus_ID_descriptor_;
}
bool NetProto_AddStatus_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddStatus_ID NetProto_AddStatus::GROUPID;
const NetProto_AddStatus_ID NetProto_AddStatus::UNITID;
const NetProto_AddStatus_ID NetProto_AddStatus::ID_MIN;
const NetProto_AddStatus_ID NetProto_AddStatus::ID_MAX;
const int NetProto_AddStatus::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_AddStatus_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddStatus_Type_descriptor_;
}
bool NetProto_AddStatus_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddStatus_Type NetProto_AddStatus::PLAYER;
const NetProto_AddStatus_Type NetProto_AddStatus::NPC;
const NetProto_AddStatus_Type NetProto_AddStatus::Type_MIN;
const NetProto_AddStatus_Type NetProto_AddStatus::Type_MAX;
const int NetProto_AddStatus::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddStatus::kStatusIDFieldNumber;
const int NetProto_AddStatus::kTypeFieldNumber;
const int NetProto_AddStatus::kTargetIDFieldNumber;
const int NetProto_AddStatus::kTimeFieldNumber;
const int NetProto_AddStatus::kDestFieldNumber;
const int NetProto_AddStatus::kDelSkillsFieldNumber;
const int NetProto_AddStatus::kAIDFieldNumber;
#endif  // !_MSC_VER

NetProto_AddStatus::NetProto_AddStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddStatus::InitAsDefaultInstance() {
  dest_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

NetProto_AddStatus::NetProto_AddStatus(const NetProto_AddStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddStatus::SharedCtor() {
  _cached_size_ = 0;
  statusID_ = 0;
  type_ = 0;
  targetID_ = 0;
  time_ = 0;
  dest_ = NULL;
  aID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddStatus::~NetProto_AddStatus() {
  SharedDtor();
}

void NetProto_AddStatus::SharedDtor() {
  if (this != default_instance_) {
    delete dest_;
  }
}

void NetProto_AddStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddStatus_descriptor_;
}

const NetProto_AddStatus& NetProto_AddStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddStatus* NetProto_AddStatus::default_instance_ = NULL;

NetProto_AddStatus* NetProto_AddStatus::New() const {
  return new NetProto_AddStatus;
}

void NetProto_AddStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statusID_ = 0;
    type_ = 0;
    targetID_ = 0;
    time_ = 0;
    if (has_dest()) {
      if (dest_ != NULL) dest_->::PB_Vector3f::Clear();
    }
    aID_ = 0;
  }
  delSkills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 statusID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusID_)));
          set_has_statusID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .NetProto_AddStatus.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_AddStatus_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_AddStatus_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetID;
        break;
      }
      
      // optional int32 targetID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetID_)));
          set_has_targetID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dest;
        break;
      }
      
      // optional .PB_Vector3f dest = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delSkills;
        break;
      }
      
      // repeated int32 delSkills = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_delSkills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_delSkills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delSkills;
        if (input->ExpectTag(56)) goto parse_aID;
        break;
      }
      
      // optional int32 aID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aID_)));
          set_has_aID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 statusID = 1;
  if (has_statusID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statusID(), output);
  }
  
  // optional .NetProto_AddStatus.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional int32 targetID = 3;
  if (has_targetID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetID(), output);
  }
  
  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }
  
  // optional .PB_Vector3f dest = 5;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dest(), output);
  }
  
  // repeated int32 delSkills = 6;
  for (int i = 0; i < this->delSkills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->delSkills(i), output);
  }
  
  // optional int32 aID = 7;
  if (has_aID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->aID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 statusID = 1;
  if (has_statusID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statusID(), target);
  }
  
  // optional .NetProto_AddStatus.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional int32 targetID = 3;
  if (has_targetID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetID(), target);
  }
  
  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }
  
  // optional .PB_Vector3f dest = 5;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dest(), target);
  }
  
  // repeated int32 delSkills = 6;
  for (int i = 0; i < this->delSkills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->delSkills(i), target);
  }
  
  // optional int32 aID = 7;
  if (has_aID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->aID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 statusID = 1;
    if (has_statusID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusID());
    }
    
    // optional .NetProto_AddStatus.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 targetID = 3;
    if (has_targetID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetID());
    }
    
    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional .PB_Vector3f dest = 5;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest());
    }
    
    // optional int32 aID = 7;
    if (has_aID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aID());
    }
    
  }
  // repeated int32 delSkills = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->delSkills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->delSkills(i));
    }
    total_size += 1 * this->delSkills_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddStatus::MergeFrom(const NetProto_AddStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  delSkills_.MergeFrom(from.delSkills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statusID()) {
      set_statusID(from.statusID());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetID()) {
      set_targetID(from.targetID());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dest()) {
      mutable_dest()->::PB_Vector3f::MergeFrom(from.dest());
    }
    if (from.has_aID()) {
      set_aID(from.aID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddStatus::CopyFrom(const NetProto_AddStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddStatus::IsInitialized() const {
  
  return true;
}

void NetProto_AddStatus::Swap(NetProto_AddStatus* other) {
  if (other != this) {
    std::swap(statusID_, other->statusID_);
    std::swap(type_, other->type_);
    std::swap(targetID_, other->targetID_);
    std::swap(time_, other->time_);
    std::swap(dest_, other->dest_);
    delSkills_.Swap(&other->delSkills_);
    std::swap(aID_, other->aID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddStatus_descriptor_;
  metadata.reflection = NetProto_AddStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Hit_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Hit_ID_descriptor_;
}
bool NetProto_Hit_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Hit_ID NetProto_Hit::GROUPID;
const NetProto_Hit_ID NetProto_Hit::UNITID;
const NetProto_Hit_ID NetProto_Hit::ID_MIN;
const NetProto_Hit_ID NetProto_Hit::ID_MAX;
const int NetProto_Hit::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Hit_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Hit_Type_descriptor_;
}
bool NetProto_Hit_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Hit_Type NetProto_Hit::PLAYER;
const NetProto_Hit_Type NetProto_Hit::NPC;
const NetProto_Hit_Type NetProto_Hit::Type_MIN;
const NetProto_Hit_Type NetProto_Hit::Type_MAX;
const int NetProto_Hit::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Hit::kASkillIDFieldNumber;
const int NetProto_Hit::kDTypeFieldNumber;
const int NetProto_Hit::kDIDFieldNumber;
const int NetProto_Hit::kATypeFieldNumber;
const int NetProto_Hit::kAIDFieldNumber;
const int NetProto_Hit::kStatusesFieldNumber;
const int NetProto_Hit::kResistControlFieldNumber;
#endif  // !_MSC_VER

NetProto_Hit::NetProto_Hit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Hit::InitAsDefaultInstance() {
}

NetProto_Hit::NetProto_Hit(const NetProto_Hit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Hit::SharedCtor() {
  _cached_size_ = 0;
  aSkillID_ = 0;
  aType_ = 0;
  aID_ = 0;
  resistControl_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Hit::~NetProto_Hit() {
  SharedDtor();
}

void NetProto_Hit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Hit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Hit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Hit_descriptor_;
}

const NetProto_Hit& NetProto_Hit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Hit* NetProto_Hit::default_instance_ = NULL;

NetProto_Hit* NetProto_Hit::New() const {
  return new NetProto_Hit;
}

void NetProto_Hit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aSkillID_ = 0;
    aType_ = 0;
    aID_ = 0;
    resistControl_ = false;
  }
  dType_.Clear();
  dID_.Clear();
  statuses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Hit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 aSkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aSkillID_)));
          set_has_aSkillID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dType;
        break;
      }
      
      // repeated .NetProto_Hit.Type dType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Hit_Type_IsValid(value)) {
            add_dType(static_cast< ::NetProto_Hit_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::NetProto_Hit_Type_IsValid,
                 this->mutable_dType())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dType;
        if (input->ExpectTag(24)) goto parse_dID;
        break;
      }
      
      // repeated int32 dID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_dID())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dID())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dID;
        if (input->ExpectTag(32)) goto parse_aType;
        break;
      }
      
      // optional .NetProto_Hit.Type aType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Hit_Type_IsValid(value)) {
            set_aType(static_cast< ::NetProto_Hit_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_aID;
        break;
      }
      
      // optional int32 aID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aID_)));
          set_has_aID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_statuses;
        break;
      }
      
      // repeated .NetProto_AddStatus statuses = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statuses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_statuses;
        if (input->ExpectTag(56)) goto parse_resistControl;
        break;
      }
      
      // optional bool resistControl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resistControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resistControl_)));
          set_has_resistControl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Hit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 aSkillID = 1;
  if (has_aSkillID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aSkillID(), output);
  }
  
  // repeated .NetProto_Hit.Type dType = 2;
  for (int i = 0; i < this->dType_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dType(i), output);
  }
  
  // repeated int32 dID = 3;
  for (int i = 0; i < this->dID_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->dID(i), output);
  }
  
  // optional .NetProto_Hit.Type aType = 4;
  if (has_aType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->aType(), output);
  }
  
  // optional int32 aID = 5;
  if (has_aID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->aID(), output);
  }
  
  // repeated .NetProto_AddStatus statuses = 6;
  for (int i = 0; i < this->statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->statuses(i), output);
  }
  
  // optional bool resistControl = 7;
  if (has_resistControl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->resistControl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Hit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 aSkillID = 1;
  if (has_aSkillID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->aSkillID(), target);
  }
  
  // repeated .NetProto_Hit.Type dType = 2;
  for (int i = 0; i < this->dType_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dType(i), target);
  }
  
  // repeated int32 dID = 3;
  for (int i = 0; i < this->dID_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->dID(i), target);
  }
  
  // optional .NetProto_Hit.Type aType = 4;
  if (has_aType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->aType(), target);
  }
  
  // optional int32 aID = 5;
  if (has_aID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->aID(), target);
  }
  
  // repeated .NetProto_AddStatus statuses = 6;
  for (int i = 0; i < this->statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->statuses(i), target);
  }
  
  // optional bool resistControl = 7;
  if (has_resistControl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->resistControl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Hit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 aSkillID = 1;
    if (has_aSkillID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aSkillID());
    }
    
    // optional .NetProto_Hit.Type aType = 4;
    if (has_aType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aType());
    }
    
    // optional int32 aID = 5;
    if (has_aID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aID());
    }
    
    // optional bool resistControl = 7;
    if (has_resistControl()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .NetProto_Hit.Type dType = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dType_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dType(i));
    }
    total_size += 1 * this->dType_size() + data_size;
  }
  
  // repeated int32 dID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dID_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dID(i));
    }
    total_size += 1 * this->dID_size() + data_size;
  }
  
  // repeated .NetProto_AddStatus statuses = 6;
  total_size += 1 * this->statuses_size();
  for (int i = 0; i < this->statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statuses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Hit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Hit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Hit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Hit::MergeFrom(const NetProto_Hit& from) {
  GOOGLE_CHECK_NE(&from, this);
  dType_.MergeFrom(from.dType_);
  dID_.MergeFrom(from.dID_);
  statuses_.MergeFrom(from.statuses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aSkillID()) {
      set_aSkillID(from.aSkillID());
    }
    if (from.has_aType()) {
      set_aType(from.aType());
    }
    if (from.has_aID()) {
      set_aID(from.aID());
    }
    if (from.has_resistControl()) {
      set_resistControl(from.resistControl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Hit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Hit::CopyFrom(const NetProto_Hit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Hit::IsInitialized() const {
  
  return true;
}

void NetProto_Hit::Swap(NetProto_Hit* other) {
  if (other != this) {
    std::swap(aSkillID_, other->aSkillID_);
    dType_.Swap(&other->dType_);
    dID_.Swap(&other->dID_);
    std::swap(aType_, other->aType_);
    std::swap(aID_, other->aID_);
    statuses_.Swap(&other->statuses_);
    std::swap(resistControl_, other->resistControl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Hit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Hit_descriptor_;
  metadata.reflection = NetProto_Hit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_StatusEffect_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatusEffect_ID_descriptor_;
}
bool NetProto_StatusEffect_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StatusEffect_ID NetProto_StatusEffect::GROUPID;
const NetProto_StatusEffect_ID NetProto_StatusEffect::UNITID;
const NetProto_StatusEffect_ID NetProto_StatusEffect::ID_MIN;
const NetProto_StatusEffect_ID NetProto_StatusEffect::ID_MAX;
const int NetProto_StatusEffect::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_StatusEffect_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatusEffect_Type_descriptor_;
}
bool NetProto_StatusEffect_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StatusEffect_Type NetProto_StatusEffect::PLAYER;
const NetProto_StatusEffect_Type NetProto_StatusEffect::NPC;
const NetProto_StatusEffect_Type NetProto_StatusEffect::Type_MIN;
const NetProto_StatusEffect_Type NetProto_StatusEffect::Type_MAX;
const int NetProto_StatusEffect::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_StatusEffect_Effect_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatusEffect_Effect_descriptor_;
}
bool NetProto_StatusEffect_Effect_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StatusEffect_Effect NetProto_StatusEffect::NONE;
const NetProto_StatusEffect_Effect NetProto_StatusEffect::DODGE;
const NetProto_StatusEffect_Effect NetProto_StatusEffect::CRIT;
const NetProto_StatusEffect_Effect NetProto_StatusEffect::Effect_MIN;
const NetProto_StatusEffect_Effect NetProto_StatusEffect::Effect_MAX;
const int NetProto_StatusEffect::Effect_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_StatusEffect::kStatusTypeFieldNumber;
const int NetProto_StatusEffect::kValueFieldNumber;
const int NetProto_StatusEffect::kTypeFieldNumber;
const int NetProto_StatusEffect::kIdFieldNumber;
const int NetProto_StatusEffect::kEffectFieldNumber;
const int NetProto_StatusEffect::kSkillIDFieldNumber;
#endif  // !_MSC_VER

NetProto_StatusEffect::NetProto_StatusEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_StatusEffect::InitAsDefaultInstance() {
}

NetProto_StatusEffect::NetProto_StatusEffect(const NetProto_StatusEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_StatusEffect::SharedCtor() {
  _cached_size_ = 0;
  statusType_ = 0;
  value_ = 0;
  type_ = 0;
  id_ = 0;
  effect_ = 0;
  skillID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_StatusEffect::~NetProto_StatusEffect() {
  SharedDtor();
}

void NetProto_StatusEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_StatusEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_StatusEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatusEffect_descriptor_;
}

const NetProto_StatusEffect& NetProto_StatusEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_StatusEffect* NetProto_StatusEffect::default_instance_ = NULL;

NetProto_StatusEffect* NetProto_StatusEffect::New() const {
  return new NetProto_StatusEffect;
}

void NetProto_StatusEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statusType_ = 0;
    value_ = 0;
    type_ = 0;
    id_ = 0;
    effect_ = 0;
    skillID_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_StatusEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .StatusInfo.StatusType statusType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatusInfo_StatusType_IsValid(value)) {
            set_statusType(static_cast< ::StatusInfo_StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .NetProto_StatusEffect.Type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_StatusEffect_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_StatusEffect_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }
      
      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_effect;
        break;
      }
      
      // optional .NetProto_StatusEffect.Effect effect = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_StatusEffect_Effect_IsValid(value)) {
            set_effect(static_cast< ::NetProto_StatusEffect_Effect >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skillID;
        break;
      }
      
      // optional int32 skillID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillID_)));
          set_has_skillID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_StatusEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .StatusInfo.StatusType statusType = 1;
  if (has_statusType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statusType(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  // optional .NetProto_StatusEffect.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }
  
  // optional .NetProto_StatusEffect.Effect effect = 5;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->effect(), output);
  }
  
  // optional int32 skillID = 6;
  if (has_skillID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skillID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_StatusEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .StatusInfo.StatusType statusType = 1;
  if (has_statusType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->statusType(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  // optional .NetProto_StatusEffect.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }
  
  // optional .NetProto_StatusEffect.Effect effect = 5;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->effect(), target);
  }
  
  // optional int32 skillID = 6;
  if (has_skillID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skillID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_StatusEffect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .StatusInfo.StatusType statusType = 1;
    if (has_statusType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->statusType());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional .NetProto_StatusEffect.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .NetProto_StatusEffect.Effect effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
    }
    
    // optional int32 skillID = 6;
    if (has_skillID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_StatusEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_StatusEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_StatusEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_StatusEffect::MergeFrom(const NetProto_StatusEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statusType()) {
      set_statusType(from.statusType());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_skillID()) {
      set_skillID(from.skillID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_StatusEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_StatusEffect::CopyFrom(const NetProto_StatusEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_StatusEffect::IsInitialized() const {
  
  return true;
}

void NetProto_StatusEffect::Swap(NetProto_StatusEffect* other) {
  if (other != this) {
    std::swap(statusType_, other->statusType_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(effect_, other->effect_);
    std::swap(skillID_, other->skillID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_StatusEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_StatusEffect_descriptor_;
  metadata.reflection = NetProto_StatusEffect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_StaticOver_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StaticOver_ID_descriptor_;
}
bool NetProto_StaticOver_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StaticOver_ID NetProto_StaticOver::GROUPID;
const NetProto_StaticOver_ID NetProto_StaticOver::UNITID;
const NetProto_StaticOver_ID NetProto_StaticOver::ID_MIN;
const NetProto_StaticOver_ID NetProto_StaticOver::ID_MAX;
const int NetProto_StaticOver::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_StaticOver_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StaticOver_Type_descriptor_;
}
bool NetProto_StaticOver_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StaticOver_Type NetProto_StaticOver::PLAYER;
const NetProto_StaticOver_Type NetProto_StaticOver::NPC;
const NetProto_StaticOver_Type NetProto_StaticOver::Type_MIN;
const NetProto_StaticOver_Type NetProto_StaticOver::Type_MAX;
const int NetProto_StaticOver::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_StaticOver::kTypeFieldNumber;
const int NetProto_StaticOver::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_StaticOver::NetProto_StaticOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_StaticOver::InitAsDefaultInstance() {
}

NetProto_StaticOver::NetProto_StaticOver(const NetProto_StaticOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_StaticOver::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_StaticOver::~NetProto_StaticOver() {
  SharedDtor();
}

void NetProto_StaticOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_StaticOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_StaticOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StaticOver_descriptor_;
}

const NetProto_StaticOver& NetProto_StaticOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_StaticOver* NetProto_StaticOver::default_instance_ = NULL;

NetProto_StaticOver* NetProto_StaticOver::New() const {
  return new NetProto_StaticOver;
}

void NetProto_StaticOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_StaticOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_StaticOver.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_StaticOver_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_StaticOver_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_StaticOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_StaticOver.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_StaticOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_StaticOver.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_StaticOver::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_StaticOver.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_StaticOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_StaticOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_StaticOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_StaticOver::MergeFrom(const NetProto_StaticOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_StaticOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_StaticOver::CopyFrom(const NetProto_StaticOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_StaticOver::IsInitialized() const {
  
  return true;
}

void NetProto_StaticOver::Swap(NetProto_StaticOver* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_StaticOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_StaticOver_descriptor_;
  metadata.reflection = NetProto_StaticOver_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Standup_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Standup_ID_descriptor_;
}
bool NetProto_Standup_ID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Standup_ID NetProto_Standup::GROUPID;
const NetProto_Standup_ID NetProto_Standup::UNITID;
const NetProto_Standup_ID NetProto_Standup::ID_MIN;
const NetProto_Standup_ID NetProto_Standup::ID_MAX;
const int NetProto_Standup::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Standup_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Standup_Type_descriptor_;
}
bool NetProto_Standup_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Standup_Type NetProto_Standup::PLAYER;
const NetProto_Standup_Type NetProto_Standup::NPC;
const NetProto_Standup_Type NetProto_Standup::Type_MIN;
const NetProto_Standup_Type NetProto_Standup::Type_MAX;
const int NetProto_Standup::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Standup::kTypeFieldNumber;
const int NetProto_Standup::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_Standup::NetProto_Standup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Standup::InitAsDefaultInstance() {
}

NetProto_Standup::NetProto_Standup(const NetProto_Standup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Standup::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Standup::~NetProto_Standup() {
  SharedDtor();
}

void NetProto_Standup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Standup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Standup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Standup_descriptor_;
}

const NetProto_Standup& NetProto_Standup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Standup* NetProto_Standup::default_instance_ = NULL;

NetProto_Standup* NetProto_Standup::New() const {
  return new NetProto_Standup;
}

void NetProto_Standup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Standup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Standup.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Standup_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Standup_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Standup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Standup.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Standup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Standup.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Standup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Standup.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Standup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Standup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Standup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Standup::MergeFrom(const NetProto_Standup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Standup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Standup::CopyFrom(const NetProto_Standup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Standup::IsInitialized() const {
  
  return true;
}

void NetProto_Standup::Swap(NetProto_Standup* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Standup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Standup_descriptor_;
  metadata.reflection = NetProto_Standup_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SkillLevelUp_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SkillLevelUp_ID_descriptor_;
}
bool NetProto_SkillLevelUp_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SkillLevelUp_ID NetProto_SkillLevelUp::GROUPID;
const NetProto_SkillLevelUp_ID NetProto_SkillLevelUp::UNITID;
const NetProto_SkillLevelUp_ID NetProto_SkillLevelUp::ID_MIN;
const NetProto_SkillLevelUp_ID NetProto_SkillLevelUp::ID_MAX;
const int NetProto_SkillLevelUp::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SkillLevelUp::kIdFieldNumber;
const int NetProto_SkillLevelUp::kDeltaFieldNumber;
const int NetProto_SkillLevelUp::kMoneyFieldNumber;
#endif  // !_MSC_VER

NetProto_SkillLevelUp::NetProto_SkillLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SkillLevelUp::InitAsDefaultInstance() {
}

NetProto_SkillLevelUp::NetProto_SkillLevelUp(const NetProto_SkillLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SkillLevelUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  delta_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SkillLevelUp::~NetProto_SkillLevelUp() {
  SharedDtor();
}

void NetProto_SkillLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_SkillLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SkillLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SkillLevelUp_descriptor_;
}

const NetProto_SkillLevelUp& NetProto_SkillLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SkillLevelUp* NetProto_SkillLevelUp::default_instance_ = NULL;

NetProto_SkillLevelUp* NetProto_SkillLevelUp::New() const {
  return new NetProto_SkillLevelUp;
}

void NetProto_SkillLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    delta_ = 0;
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SkillLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delta;
        break;
      }
      
      // optional int32 delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }
      
      // optional int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SkillLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 delta = 2;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delta(), output);
  }
  
  // optional int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SkillLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 delta = 2;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delta(), target);
  }
  
  // optional int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SkillLevelUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }
    
    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SkillLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SkillLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SkillLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SkillLevelUp::MergeFrom(const NetProto_SkillLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SkillLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SkillLevelUp::CopyFrom(const NetProto_SkillLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SkillLevelUp::IsInitialized() const {
  
  return true;
}

void NetProto_SkillLevelUp::Swap(NetProto_SkillLevelUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(delta_, other->delta_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SkillLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SkillLevelUp_descriptor_;
  metadata.reflection = NetProto_SkillLevelUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ClearSkill_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ClearSkill_ID_descriptor_;
}
bool NetProto_ClearSkill_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ClearSkill_ID NetProto_ClearSkill::GROUPID;
const NetProto_ClearSkill_ID NetProto_ClearSkill::UNITID;
const NetProto_ClearSkill_ID NetProto_ClearSkill::ID_MIN;
const NetProto_ClearSkill_ID NetProto_ClearSkill::ID_MAX;
const int NetProto_ClearSkill::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ClearSkill::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_ClearSkill::NetProto_ClearSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ClearSkill::InitAsDefaultInstance() {
}

NetProto_ClearSkill::NetProto_ClearSkill(const NetProto_ClearSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ClearSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ClearSkill::~NetProto_ClearSkill() {
  SharedDtor();
}

void NetProto_ClearSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ClearSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ClearSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ClearSkill_descriptor_;
}

const NetProto_ClearSkill& NetProto_ClearSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ClearSkill* NetProto_ClearSkill::default_instance_ = NULL;

NetProto_ClearSkill* NetProto_ClearSkill::New() const {
  return new NetProto_ClearSkill;
}

void NetProto_ClearSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ClearSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ClearSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ClearSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ClearSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ClearSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ClearSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ClearSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ClearSkill::MergeFrom(const NetProto_ClearSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ClearSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ClearSkill::CopyFrom(const NetProto_ClearSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ClearSkill::IsInitialized() const {
  
  return true;
}

void NetProto_ClearSkill::Swap(NetProto_ClearSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ClearSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ClearSkill_descriptor_;
  metadata.reflection = NetProto_ClearSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DestroySkill_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DestroySkill_ID_descriptor_;
}
bool NetProto_DestroySkill_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DestroySkill_ID NetProto_DestroySkill::GROUPID;
const NetProto_DestroySkill_ID NetProto_DestroySkill::UNITID;
const NetProto_DestroySkill_ID NetProto_DestroySkill::ID_MIN;
const NetProto_DestroySkill_ID NetProto_DestroySkill::ID_MAX;
const int NetProto_DestroySkill::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DestroySkill::kIdFieldNumber;
const int NetProto_DestroySkill::kSkillFieldNumber;
const int NetProto_DestroySkill::kImmediatelyFieldNumber;
#endif  // !_MSC_VER

NetProto_DestroySkill::NetProto_DestroySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DestroySkill::InitAsDefaultInstance() {
}

NetProto_DestroySkill::NetProto_DestroySkill(const NetProto_DestroySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DestroySkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  immediately_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DestroySkill::~NetProto_DestroySkill() {
  SharedDtor();
}

void NetProto_DestroySkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DestroySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DestroySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DestroySkill_descriptor_;
}

const NetProto_DestroySkill& NetProto_DestroySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DestroySkill* NetProto_DestroySkill::default_instance_ = NULL;

NetProto_DestroySkill* NetProto_DestroySkill::New() const {
  return new NetProto_DestroySkill;
}

void NetProto_DestroySkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    immediately_ = false;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DestroySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill;
        break;
      }
      
      // repeated int32 skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_skill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill;
        if (input->ExpectTag(24)) goto parse_immediately;
        break;
      }
      
      // optional bool immediately = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_immediately:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &immediately_)));
          set_has_immediately();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DestroySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated int32 skill = 2;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->skill(i), output);
  }
  
  // optional bool immediately = 3;
  if (has_immediately()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->immediately(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DestroySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated int32 skill = 2;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->skill(i), target);
  }
  
  // optional bool immediately = 3;
  if (has_immediately()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->immediately(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DestroySkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool immediately = 3;
    if (has_immediately()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 skill = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill(i));
    }
    total_size += 1 * this->skill_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DestroySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DestroySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DestroySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DestroySkill::MergeFrom(const NetProto_DestroySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_immediately()) {
      set_immediately(from.immediately());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DestroySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DestroySkill::CopyFrom(const NetProto_DestroySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DestroySkill::IsInitialized() const {
  
  return true;
}

void NetProto_DestroySkill::Swap(NetProto_DestroySkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    skill_.Swap(&other->skill_);
    std::swap(immediately_, other->immediately_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DestroySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DestroySkill_descriptor_;
  metadata.reflection = NetProto_DestroySkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddGoods_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddGoods_ID_descriptor_;
}
bool NetProto_AddGoods_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddGoods_ID NetProto_AddGoods::GROUPID;
const NetProto_AddGoods_ID NetProto_AddGoods::UNITID;
const NetProto_AddGoods_ID NetProto_AddGoods::ID_MIN;
const NetProto_AddGoods_ID NetProto_AddGoods::ID_MAX;
const int NetProto_AddGoods::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_AddGoods_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddGoods_Type_descriptor_;
}
bool NetProto_AddGoods_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddGoods_Type NetProto_AddGoods::PACKAGE;
const NetProto_AddGoods_Type NetProto_AddGoods::BODY;
const NetProto_AddGoods_Type NetProto_AddGoods::Type_MIN;
const NetProto_AddGoods_Type NetProto_AddGoods::Type_MAX;
const int NetProto_AddGoods::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddGoods::kGoodsFieldNumber;
const int NetProto_AddGoods::kPosFieldNumber;
const int NetProto_AddGoods::kTypeFieldNumber;
const int NetProto_AddGoods::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_AddGoods::NetProto_AddGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddGoods::InitAsDefaultInstance() {
}

NetProto_AddGoods::NetProto_AddGoods(const NetProto_AddGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddGoods::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddGoods::~NetProto_AddGoods() {
  SharedDtor();
}

void NetProto_AddGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_AddGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddGoods_descriptor_;
}

const NetProto_AddGoods& NetProto_AddGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddGoods* NetProto_AddGoods::default_instance_ = NULL;

NetProto_AddGoods* NetProto_AddGoods::New() const {
  return new NetProto_AddGoods;
}

void NetProto_AddGoods::Clear() {
  goods_.Clear();
  pos_.Clear();
  type_.Clear();
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GoodsInfo goods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods;
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // repeated int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // repeated .NetProto_AddGoods.Type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_AddGoods_Type_IsValid(value)) {
            add_type(static_cast< ::NetProto_AddGoods_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::NetProto_AddGoods_Type_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }
      
      // repeated int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GoodsInfo goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods(i), output);
  }
  
  // repeated int32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pos(i), output);
  }
  
  // repeated .NetProto_AddGoods.Type type = 3;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(i), output);
  }
  
  // repeated int32 id = 4;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GoodsInfo goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods(i), target);
  }
  
  // repeated int32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pos(i), target);
  }
  
  // repeated .NetProto_AddGoods.Type type = 3;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(i), target);
  }
  
  // repeated int32 id = 4;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddGoods::ByteSize() const {
  int total_size = 0;
  
  // repeated .GoodsInfo goods = 1;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }
  
  // repeated int32 pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }
  
  // repeated .NetProto_AddGoods.Type type = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  // repeated int32 id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddGoods::MergeFrom(const NetProto_AddGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  pos_.MergeFrom(from.pos_);
  type_.MergeFrom(from.type_);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddGoods::CopyFrom(const NetProto_AddGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddGoods::IsInitialized() const {
  
  return true;
}

void NetProto_AddGoods::Swap(NetProto_AddGoods* other) {
  if (other != this) {
    goods_.Swap(&other->goods_);
    pos_.Swap(&other->pos_);
    type_.Swap(&other->type_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddGoods_descriptor_;
  metadata.reflection = NetProto_AddGoods_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddEquipments_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddEquipments_ID_descriptor_;
}
bool NetProto_AddEquipments_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddEquipments_ID NetProto_AddEquipments::GROUPID;
const NetProto_AddEquipments_ID NetProto_AddEquipments::UNITID;
const NetProto_AddEquipments_ID NetProto_AddEquipments::ID_MIN;
const NetProto_AddEquipments_ID NetProto_AddEquipments::ID_MAX;
const int NetProto_AddEquipments::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_AddEquipments_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddEquipments_Type_descriptor_;
}
bool NetProto_AddEquipments_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddEquipments_Type NetProto_AddEquipments::PACKAGE;
const NetProto_AddEquipments_Type NetProto_AddEquipments::BODY;
const NetProto_AddEquipments_Type NetProto_AddEquipments::Type_MIN;
const NetProto_AddEquipments_Type NetProto_AddEquipments::Type_MAX;
const int NetProto_AddEquipments::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddEquipments::kEquipmentsFieldNumber;
const int NetProto_AddEquipments::kPosFieldNumber;
const int NetProto_AddEquipments::kTypeFieldNumber;
const int NetProto_AddEquipments::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_AddEquipments::NetProto_AddEquipments()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddEquipments::InitAsDefaultInstance() {
}

NetProto_AddEquipments::NetProto_AddEquipments(const NetProto_AddEquipments& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddEquipments::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddEquipments::~NetProto_AddEquipments() {
  SharedDtor();
}

void NetProto_AddEquipments::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_AddEquipments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddEquipments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddEquipments_descriptor_;
}

const NetProto_AddEquipments& NetProto_AddEquipments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddEquipments* NetProto_AddEquipments::default_instance_ = NULL;

NetProto_AddEquipments* NetProto_AddEquipments::New() const {
  return new NetProto_AddEquipments;
}

void NetProto_AddEquipments::Clear() {
  equipments_.Clear();
  pos_.Clear();
  type_.Clear();
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddEquipments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipmentInfo equipments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipments;
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // repeated int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // repeated .NetProto_AddEquipments.Type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_AddEquipments_Type_IsValid(value)) {
            add_type(static_cast< ::NetProto_AddEquipments_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::NetProto_AddEquipments_Type_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }
      
      // repeated int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddEquipments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipmentInfo equipments = 1;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipments(i), output);
  }
  
  // repeated int32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pos(i), output);
  }
  
  // repeated .NetProto_AddEquipments.Type type = 3;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(i), output);
  }
  
  // repeated int32 id = 4;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddEquipments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipmentInfo equipments = 1;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipments(i), target);
  }
  
  // repeated int32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pos(i), target);
  }
  
  // repeated .NetProto_AddEquipments.Type type = 3;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(i), target);
  }
  
  // repeated int32 id = 4;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddEquipments::ByteSize() const {
  int total_size = 0;
  
  // repeated .EquipmentInfo equipments = 1;
  total_size += 1 * this->equipments_size();
  for (int i = 0; i < this->equipments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipments(i));
  }
  
  // repeated int32 pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }
  
  // repeated .NetProto_AddEquipments.Type type = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  // repeated int32 id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddEquipments::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddEquipments* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddEquipments*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddEquipments::MergeFrom(const NetProto_AddEquipments& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipments_.MergeFrom(from.equipments_);
  pos_.MergeFrom(from.pos_);
  type_.MergeFrom(from.type_);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddEquipments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddEquipments::CopyFrom(const NetProto_AddEquipments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddEquipments::IsInitialized() const {
  
  return true;
}

void NetProto_AddEquipments::Swap(NetProto_AddEquipments* other) {
  if (other != this) {
    equipments_.Swap(&other->equipments_);
    pos_.Swap(&other->pos_);
    type_.Swap(&other->type_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddEquipments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddEquipments_descriptor_;
  metadata.reflection = NetProto_AddEquipments_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ShiftItem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ShiftItem_ID_descriptor_;
}
bool NetProto_ShiftItem_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ShiftItem_ID NetProto_ShiftItem::GROUPID;
const NetProto_ShiftItem_ID NetProto_ShiftItem::UNITID;
const NetProto_ShiftItem_ID NetProto_ShiftItem::ID_MIN;
const NetProto_ShiftItem_ID NetProto_ShiftItem::ID_MAX;
const int NetProto_ShiftItem::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_ShiftItem_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ShiftItem_Type_descriptor_;
}
bool NetProto_ShiftItem_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ShiftItem_Type NetProto_ShiftItem::PACKAGE;
const NetProto_ShiftItem_Type NetProto_ShiftItem::BODY;
const NetProto_ShiftItem_Type NetProto_ShiftItem::ALT;
const NetProto_ShiftItem_Type NetProto_ShiftItem::SKILL;
const NetProto_ShiftItem_Type NetProto_ShiftItem::FASHION;
const NetProto_ShiftItem_Type NetProto_ShiftItem::WING;
const NetProto_ShiftItem_Type NetProto_ShiftItem::Type_MIN;
const NetProto_ShiftItem_Type NetProto_ShiftItem::Type_MAX;
const int NetProto_ShiftItem::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ShiftItem::kPrevTypeFieldNumber;
const int NetProto_ShiftItem::kPrevPosFieldNumber;
const int NetProto_ShiftItem::kNewTypeFieldNumber;
const int NetProto_ShiftItem::kNewPosFieldNumber;
const int NetProto_ShiftItem::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_ShiftItem::NetProto_ShiftItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ShiftItem::InitAsDefaultInstance() {
}

NetProto_ShiftItem::NetProto_ShiftItem(const NetProto_ShiftItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ShiftItem::SharedCtor() {
  _cached_size_ = 0;
  prevType_ = 0;
  prevPos_ = 0;
  newType_ = 0;
  newPos_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ShiftItem::~NetProto_ShiftItem() {
  SharedDtor();
}

void NetProto_ShiftItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ShiftItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ShiftItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ShiftItem_descriptor_;
}

const NetProto_ShiftItem& NetProto_ShiftItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ShiftItem* NetProto_ShiftItem::default_instance_ = NULL;

NetProto_ShiftItem* NetProto_ShiftItem::New() const {
  return new NetProto_ShiftItem;
}

void NetProto_ShiftItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevType_ = 0;
    prevPos_ = 0;
    newType_ = 0;
    newPos_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ShiftItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_ShiftItem.Type prevType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_ShiftItem_Type_IsValid(value)) {
            set_prevType(static_cast< ::NetProto_ShiftItem_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prevPos;
        break;
      }
      
      // optional int32 prevPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevPos_)));
          set_has_prevPos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newType;
        break;
      }
      
      // optional .NetProto_ShiftItem.Type newType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_ShiftItem_Type_IsValid(value)) {
            set_newType(static_cast< ::NetProto_ShiftItem_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newPos;
        break;
      }
      
      // optional int32 newPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newPos_)));
          set_has_newPos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }
      
      // optional int32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ShiftItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_ShiftItem.Type prevType = 1;
  if (has_prevType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->prevType(), output);
  }
  
  // optional int32 prevPos = 2;
  if (has_prevPos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prevPos(), output);
  }
  
  // optional .NetProto_ShiftItem.Type newType = 3;
  if (has_newType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->newType(), output);
  }
  
  // optional int32 newPos = 4;
  if (has_newPos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->newPos(), output);
  }
  
  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ShiftItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_ShiftItem.Type prevType = 1;
  if (has_prevType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->prevType(), target);
  }
  
  // optional int32 prevPos = 2;
  if (has_prevPos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prevPos(), target);
  }
  
  // optional .NetProto_ShiftItem.Type newType = 3;
  if (has_newType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->newType(), target);
  }
  
  // optional int32 newPos = 4;
  if (has_newPos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->newPos(), target);
  }
  
  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ShiftItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_ShiftItem.Type prevType = 1;
    if (has_prevType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prevType());
    }
    
    // optional int32 prevPos = 2;
    if (has_prevPos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevPos());
    }
    
    // optional .NetProto_ShiftItem.Type newType = 3;
    if (has_newType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->newType());
    }
    
    // optional int32 newPos = 4;
    if (has_newPos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newPos());
    }
    
    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ShiftItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ShiftItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ShiftItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ShiftItem::MergeFrom(const NetProto_ShiftItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevType()) {
      set_prevType(from.prevType());
    }
    if (from.has_prevPos()) {
      set_prevPos(from.prevPos());
    }
    if (from.has_newType()) {
      set_newType(from.newType());
    }
    if (from.has_newPos()) {
      set_newPos(from.newPos());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ShiftItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ShiftItem::CopyFrom(const NetProto_ShiftItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ShiftItem::IsInitialized() const {
  
  return true;
}

void NetProto_ShiftItem::Swap(NetProto_ShiftItem* other) {
  if (other != this) {
    std::swap(prevType_, other->prevType_);
    std::swap(prevPos_, other->prevPos_);
    std::swap(newType_, other->newType_);
    std::swap(newPos_, other->newPos_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ShiftItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ShiftItem_descriptor_;
  metadata.reflection = NetProto_ShiftItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_QueryItemInfo_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_QueryItemInfo_ID_descriptor_;
}
bool NetProto_QueryItemInfo_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_QueryItemInfo_ID NetProto_QueryItemInfo::GROUPID;
const NetProto_QueryItemInfo_ID NetProto_QueryItemInfo::UNITID;
const NetProto_QueryItemInfo_ID NetProto_QueryItemInfo::ID_MIN;
const NetProto_QueryItemInfo_ID NetProto_QueryItemInfo::ID_MAX;
const int NetProto_QueryItemInfo::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_QueryItemInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_QueryItemInfo_Type_descriptor_;
}
bool NetProto_QueryItemInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_QueryItemInfo_Type NetProto_QueryItemInfo::GOODS;
const NetProto_QueryItemInfo_Type NetProto_QueryItemInfo::EQUIPMENT;
const NetProto_QueryItemInfo_Type NetProto_QueryItemInfo::Type_MIN;
const NetProto_QueryItemInfo_Type NetProto_QueryItemInfo::Type_MAX;
const int NetProto_QueryItemInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_QueryItemInfo::kTypeFieldNumber;
const int NetProto_QueryItemInfo::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_QueryItemInfo::NetProto_QueryItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_QueryItemInfo::InitAsDefaultInstance() {
}

NetProto_QueryItemInfo::NetProto_QueryItemInfo(const NetProto_QueryItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_QueryItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_QueryItemInfo::~NetProto_QueryItemInfo() {
  SharedDtor();
}

void NetProto_QueryItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_QueryItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_QueryItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_QueryItemInfo_descriptor_;
}

const NetProto_QueryItemInfo& NetProto_QueryItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_QueryItemInfo* NetProto_QueryItemInfo::default_instance_ = NULL;

NetProto_QueryItemInfo* NetProto_QueryItemInfo::New() const {
  return new NetProto_QueryItemInfo;
}

void NetProto_QueryItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_QueryItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_QueryItemInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_QueryItemInfo_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_QueryItemInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_QueryItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_QueryItemInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_QueryItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_QueryItemInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_QueryItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_QueryItemInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_QueryItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_QueryItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_QueryItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_QueryItemInfo::MergeFrom(const NetProto_QueryItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_QueryItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_QueryItemInfo::CopyFrom(const NetProto_QueryItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_QueryItemInfo::IsInitialized() const {
  
  return true;
}

void NetProto_QueryItemInfo::Swap(NetProto_QueryItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_QueryItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_QueryItemInfo_descriptor_;
  metadata.reflection = NetProto_QueryItemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BuyItem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyItem_ID_descriptor_;
}
bool NetProto_BuyItem_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BuyItem_ID NetProto_BuyItem::GROUPID;
const NetProto_BuyItem_ID NetProto_BuyItem::UNITID;
const NetProto_BuyItem_ID NetProto_BuyItem::ID_MIN;
const NetProto_BuyItem_ID NetProto_BuyItem::ID_MAX;
const int NetProto_BuyItem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BuyItem::kBusinessFieldNumber;
const int NetProto_BuyItem::kIdFieldNumber;
const int NetProto_BuyItem::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_BuyItem::NetProto_BuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BuyItem::InitAsDefaultInstance() {
}

NetProto_BuyItem::NetProto_BuyItem(const NetProto_BuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BuyItem::SharedCtor() {
  _cached_size_ = 0;
  business_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BuyItem::~NetProto_BuyItem() {
  SharedDtor();
}

void NetProto_BuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BuyItem_descriptor_;
}

const NetProto_BuyItem& NetProto_BuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BuyItem* NetProto_BuyItem::default_instance_ = NULL;

NetProto_BuyItem* NetProto_BuyItem::New() const {
  return new NetProto_BuyItem;
}

void NetProto_BuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    business_ = 0;
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 business = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &business_)));
          set_has_business();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 business = 1;
  if (has_business()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->business(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 business = 1;
  if (has_business()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->business(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BuyItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 business = 1;
    if (has_business()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->business());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BuyItem::MergeFrom(const NetProto_BuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_business()) {
      set_business(from.business());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BuyItem::CopyFrom(const NetProto_BuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BuyItem::IsInitialized() const {
  
  return true;
}

void NetProto_BuyItem::Swap(NetProto_BuyItem* other) {
  if (other != this) {
    std::swap(business_, other->business_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BuyItem_descriptor_;
  metadata.reflection = NetProto_BuyItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SellItem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SellItem_ID_descriptor_;
}
bool NetProto_SellItem_ID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SellItem_ID NetProto_SellItem::GROUPID;
const NetProto_SellItem_ID NetProto_SellItem::UNITID;
const NetProto_SellItem_ID NetProto_SellItem::ID_MIN;
const NetProto_SellItem_ID NetProto_SellItem::ID_MAX;
const int NetProto_SellItem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SellItem::kIdFieldNumber;
const int NetProto_SellItem::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_SellItem::NetProto_SellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SellItem::InitAsDefaultInstance() {
}

NetProto_SellItem::NetProto_SellItem(const NetProto_SellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SellItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SellItem::~NetProto_SellItem() {
  SharedDtor();
}

void NetProto_SellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_SellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SellItem_descriptor_;
}

const NetProto_SellItem& NetProto_SellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SellItem* NetProto_SellItem::default_instance_ = NULL;

NetProto_SellItem* NetProto_SellItem::New() const {
  return new NetProto_SellItem;
}

void NetProto_SellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SellItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SellItem::MergeFrom(const NetProto_SellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SellItem::CopyFrom(const NetProto_SellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SellItem::IsInitialized() const {
  
  return true;
}

void NetProto_SellItem::Swap(NetProto_SellItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SellItem_descriptor_;
  metadata.reflection = NetProto_SellItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Repair_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Repair_ID_descriptor_;
}
bool NetProto_Repair_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Repair_ID NetProto_Repair::GROUPID;
const NetProto_Repair_ID NetProto_Repair::UNITID;
const NetProto_Repair_ID NetProto_Repair::ID_MIN;
const NetProto_Repair_ID NetProto_Repair::ID_MAX;
const int NetProto_Repair::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Repair::kIdFieldNumber;
const int NetProto_Repair::kPriceFieldNumber;
#endif  // !_MSC_VER

NetProto_Repair::NetProto_Repair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Repair::InitAsDefaultInstance() {
}

NetProto_Repair::NetProto_Repair(const NetProto_Repair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Repair::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Repair::~NetProto_Repair() {
  SharedDtor();
}

void NetProto_Repair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Repair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Repair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Repair_descriptor_;
}

const NetProto_Repair& NetProto_Repair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Repair* NetProto_Repair::default_instance_ = NULL;

NetProto_Repair* NetProto_Repair::New() const {
  return new NetProto_Repair;
}

void NetProto_Repair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Repair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }
      
      // optional int32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Repair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Repair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Repair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Repair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Repair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Repair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Repair::MergeFrom(const NetProto_Repair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Repair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Repair::CopyFrom(const NetProto_Repair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Repair::IsInitialized() const {
  
  return true;
}

void NetProto_Repair::Swap(NetProto_Repair* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Repair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Repair_descriptor_;
  metadata.reflection = NetProto_Repair_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UseGoods_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UseGoods_ID_descriptor_;
}
bool NetProto_UseGoods_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UseGoods_ID NetProto_UseGoods::GROUPID;
const NetProto_UseGoods_ID NetProto_UseGoods::UNITID;
const NetProto_UseGoods_ID NetProto_UseGoods::ID_MIN;
const NetProto_UseGoods_ID NetProto_UseGoods::ID_MAX;
const int NetProto_UseGoods::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_UseGoods::kIdFieldNumber;
const int NetProto_UseGoods::kBoxItemsFieldNumber;
const int NetProto_UseGoods::kAllFieldNumber;
#endif  // !_MSC_VER

NetProto_UseGoods::NetProto_UseGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UseGoods::InitAsDefaultInstance() {
}

NetProto_UseGoods::NetProto_UseGoods(const NetProto_UseGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UseGoods::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  all_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UseGoods::~NetProto_UseGoods() {
  SharedDtor();
}

void NetProto_UseGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UseGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UseGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UseGoods_descriptor_;
}

const NetProto_UseGoods& NetProto_UseGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UseGoods* NetProto_UseGoods::default_instance_ = NULL;

NetProto_UseGoods* NetProto_UseGoods::New() const {
  return new NetProto_UseGoods;
}

void NetProto_UseGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    all_ = false;
  }
  boxItems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UseGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxItems;
        break;
      }
      
      // repeated int32 boxItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_boxItems())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boxItems())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxItems;
        if (input->ExpectTag(24)) goto parse_all;
        break;
      }
      
      // optional bool all = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
          set_has_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_UseGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated int32 boxItems = 2;
  for (int i = 0; i < this->boxItems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->boxItems(i), output);
  }
  
  // optional bool all = 3;
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->all(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UseGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated int32 boxItems = 2;
  for (int i = 0; i < this->boxItems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->boxItems(i), target);
  }
  
  // optional bool all = 3;
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->all(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UseGoods::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool all = 3;
    if (has_all()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 boxItems = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->boxItems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boxItems(i));
    }
    total_size += 1 * this->boxItems_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UseGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UseGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UseGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UseGoods::MergeFrom(const NetProto_UseGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxItems_.MergeFrom(from.boxItems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_all()) {
      set_all(from.all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UseGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UseGoods::CopyFrom(const NetProto_UseGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UseGoods::IsInitialized() const {
  
  return true;
}

void NetProto_UseGoods::Swap(NetProto_UseGoods* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    boxItems_.Swap(&other->boxItems_);
    std::swap(all_, other->all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UseGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UseGoods_descriptor_;
  metadata.reflection = NetProto_UseGoods_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UnlockPackage_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnlockPackage_ID_descriptor_;
}
bool NetProto_UnlockPackage_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UnlockPackage_ID NetProto_UnlockPackage::GROUPID;
const NetProto_UnlockPackage_ID NetProto_UnlockPackage::UNITID;
const NetProto_UnlockPackage_ID NetProto_UnlockPackage::ID_MIN;
const NetProto_UnlockPackage_ID NetProto_UnlockPackage::ID_MAX;
const int NetProto_UnlockPackage::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_UnlockPackage::kBeginFieldNumber;
const int NetProto_UnlockPackage::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_UnlockPackage::NetProto_UnlockPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UnlockPackage::InitAsDefaultInstance() {
}

NetProto_UnlockPackage::NetProto_UnlockPackage(const NetProto_UnlockPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UnlockPackage::SharedCtor() {
  _cached_size_ = 0;
  begin_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UnlockPackage::~NetProto_UnlockPackage() {
  SharedDtor();
}

void NetProto_UnlockPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UnlockPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UnlockPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnlockPackage_descriptor_;
}

const NetProto_UnlockPackage& NetProto_UnlockPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UnlockPackage* NetProto_UnlockPackage::default_instance_ = NULL;

NetProto_UnlockPackage* NetProto_UnlockPackage::New() const {
  return new NetProto_UnlockPackage;
}

void NetProto_UnlockPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UnlockPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_ItemPackage.Begin begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ItemPackage_Begin_IsValid(value)) {
            set_begin(static_cast< ::PB_ItemPackage_Begin >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_UnlockPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_ItemPackage.Begin begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->begin(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UnlockPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_ItemPackage.Begin begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->begin(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UnlockPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_ItemPackage.Begin begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->begin());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UnlockPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UnlockPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UnlockPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UnlockPackage::MergeFrom(const NetProto_UnlockPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UnlockPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UnlockPackage::CopyFrom(const NetProto_UnlockPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UnlockPackage::IsInitialized() const {
  
  return true;
}

void NetProto_UnlockPackage::Swap(NetProto_UnlockPackage* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UnlockPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UnlockPackage_descriptor_;
  metadata.reflection = NetProto_UnlockPackage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RecoverDurability_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RecoverDurability_ID_descriptor_;
}
bool NetProto_RecoverDurability_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RecoverDurability_ID NetProto_RecoverDurability::GROUPID;
const NetProto_RecoverDurability_ID NetProto_RecoverDurability::UNITID;
const NetProto_RecoverDurability_ID NetProto_RecoverDurability::ID_MIN;
const NetProto_RecoverDurability_ID NetProto_RecoverDurability::ID_MAX;
const int NetProto_RecoverDurability::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_RecoverDurability::NetProto_RecoverDurability()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RecoverDurability::InitAsDefaultInstance() {
}

NetProto_RecoverDurability::NetProto_RecoverDurability(const NetProto_RecoverDurability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RecoverDurability::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RecoverDurability::~NetProto_RecoverDurability() {
  SharedDtor();
}

void NetProto_RecoverDurability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_RecoverDurability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RecoverDurability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RecoverDurability_descriptor_;
}

const NetProto_RecoverDurability& NetProto_RecoverDurability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RecoverDurability* NetProto_RecoverDurability::default_instance_ = NULL;

NetProto_RecoverDurability* NetProto_RecoverDurability::New() const {
  return new NetProto_RecoverDurability;
}

void NetProto_RecoverDurability::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RecoverDurability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_RecoverDurability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RecoverDurability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RecoverDurability::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RecoverDurability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RecoverDurability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RecoverDurability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RecoverDurability::MergeFrom(const NetProto_RecoverDurability& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RecoverDurability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RecoverDurability::CopyFrom(const NetProto_RecoverDurability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RecoverDurability::IsInitialized() const {
  
  return true;
}

void NetProto_RecoverDurability::Swap(NetProto_RecoverDurability* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RecoverDurability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RecoverDurability_descriptor_;
  metadata.reflection = NetProto_RecoverDurability_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddDesignation_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddDesignation_ID_descriptor_;
}
bool NetProto_AddDesignation_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddDesignation_ID NetProto_AddDesignation::GROUPID;
const NetProto_AddDesignation_ID NetProto_AddDesignation::UNITID;
const NetProto_AddDesignation_ID NetProto_AddDesignation::ID_MIN;
const NetProto_AddDesignation_ID NetProto_AddDesignation::ID_MAX;
const int NetProto_AddDesignation::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddDesignation::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_AddDesignation::NetProto_AddDesignation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddDesignation::InitAsDefaultInstance() {
}

NetProto_AddDesignation::NetProto_AddDesignation(const NetProto_AddDesignation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddDesignation::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddDesignation::~NetProto_AddDesignation() {
  SharedDtor();
}

void NetProto_AddDesignation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_AddDesignation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddDesignation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddDesignation_descriptor_;
}

const NetProto_AddDesignation& NetProto_AddDesignation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddDesignation* NetProto_AddDesignation::default_instance_ = NULL;

NetProto_AddDesignation* NetProto_AddDesignation::New() const {
  return new NetProto_AddDesignation;
}

void NetProto_AddDesignation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddDesignation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddDesignation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddDesignation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddDesignation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddDesignation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddDesignation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddDesignation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddDesignation::MergeFrom(const NetProto_AddDesignation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddDesignation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddDesignation::CopyFrom(const NetProto_AddDesignation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddDesignation::IsInitialized() const {
  
  return true;
}

void NetProto_AddDesignation::Swap(NetProto_AddDesignation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddDesignation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddDesignation_descriptor_;
  metadata.reflection = NetProto_AddDesignation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DelDesignation_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelDesignation_ID_descriptor_;
}
bool NetProto_DelDesignation_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DelDesignation_ID NetProto_DelDesignation::GROUPID;
const NetProto_DelDesignation_ID NetProto_DelDesignation::UNITID;
const NetProto_DelDesignation_ID NetProto_DelDesignation::ID_MIN;
const NetProto_DelDesignation_ID NetProto_DelDesignation::ID_MAX;
const int NetProto_DelDesignation::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DelDesignation::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_DelDesignation::NetProto_DelDesignation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DelDesignation::InitAsDefaultInstance() {
}

NetProto_DelDesignation::NetProto_DelDesignation(const NetProto_DelDesignation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DelDesignation::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DelDesignation::~NetProto_DelDesignation() {
  SharedDtor();
}

void NetProto_DelDesignation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DelDesignation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DelDesignation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelDesignation_descriptor_;
}

const NetProto_DelDesignation& NetProto_DelDesignation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DelDesignation* NetProto_DelDesignation::default_instance_ = NULL;

NetProto_DelDesignation* NetProto_DelDesignation::New() const {
  return new NetProto_DelDesignation;
}

void NetProto_DelDesignation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DelDesignation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DelDesignation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DelDesignation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DelDesignation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DelDesignation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DelDesignation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DelDesignation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DelDesignation::MergeFrom(const NetProto_DelDesignation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DelDesignation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DelDesignation::CopyFrom(const NetProto_DelDesignation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DelDesignation::IsInitialized() const {
  
  return true;
}

void NetProto_DelDesignation::Swap(NetProto_DelDesignation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DelDesignation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DelDesignation_descriptor_;
  metadata.reflection = NetProto_DelDesignation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ShowDesignation_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ShowDesignation_ID_descriptor_;
}
bool NetProto_ShowDesignation_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ShowDesignation_ID NetProto_ShowDesignation::GROUPID;
const NetProto_ShowDesignation_ID NetProto_ShowDesignation::UNITID;
const NetProto_ShowDesignation_ID NetProto_ShowDesignation::ID_MIN;
const NetProto_ShowDesignation_ID NetProto_ShowDesignation::ID_MAX;
const int NetProto_ShowDesignation::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ShowDesignation::kPlayerFieldNumber;
const int NetProto_ShowDesignation::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_ShowDesignation::NetProto_ShowDesignation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ShowDesignation::InitAsDefaultInstance() {
}

NetProto_ShowDesignation::NetProto_ShowDesignation(const NetProto_ShowDesignation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ShowDesignation::SharedCtor() {
  _cached_size_ = 0;
  player_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ShowDesignation::~NetProto_ShowDesignation() {
  SharedDtor();
}

void NetProto_ShowDesignation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ShowDesignation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ShowDesignation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ShowDesignation_descriptor_;
}

const NetProto_ShowDesignation& NetProto_ShowDesignation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ShowDesignation* NetProto_ShowDesignation::default_instance_ = NULL;

NetProto_ShowDesignation* NetProto_ShowDesignation::New() const {
  return new NetProto_ShowDesignation;
}

void NetProto_ShowDesignation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ShowDesignation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ShowDesignation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ShowDesignation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ShowDesignation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ShowDesignation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ShowDesignation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ShowDesignation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ShowDesignation::MergeFrom(const NetProto_ShowDesignation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ShowDesignation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ShowDesignation::CopyFrom(const NetProto_ShowDesignation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ShowDesignation::IsInitialized() const {
  
  return true;
}

void NetProto_ShowDesignation::Swap(NetProto_ShowDesignation* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ShowDesignation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ShowDesignation_descriptor_;
  metadata.reflection = NetProto_ShowDesignation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UnshowDesignation_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnshowDesignation_ID_descriptor_;
}
bool NetProto_UnshowDesignation_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UnshowDesignation_ID NetProto_UnshowDesignation::GROUPID;
const NetProto_UnshowDesignation_ID NetProto_UnshowDesignation::UNITID;
const NetProto_UnshowDesignation_ID NetProto_UnshowDesignation::ID_MIN;
const NetProto_UnshowDesignation_ID NetProto_UnshowDesignation::ID_MAX;
const int NetProto_UnshowDesignation::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_UnshowDesignation::kPlayerFieldNumber;
const int NetProto_UnshowDesignation::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_UnshowDesignation::NetProto_UnshowDesignation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UnshowDesignation::InitAsDefaultInstance() {
}

NetProto_UnshowDesignation::NetProto_UnshowDesignation(const NetProto_UnshowDesignation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UnshowDesignation::SharedCtor() {
  _cached_size_ = 0;
  player_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UnshowDesignation::~NetProto_UnshowDesignation() {
  SharedDtor();
}

void NetProto_UnshowDesignation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UnshowDesignation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UnshowDesignation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UnshowDesignation_descriptor_;
}

const NetProto_UnshowDesignation& NetProto_UnshowDesignation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UnshowDesignation* NetProto_UnshowDesignation::default_instance_ = NULL;

NetProto_UnshowDesignation* NetProto_UnshowDesignation::New() const {
  return new NetProto_UnshowDesignation;
}

void NetProto_UnshowDesignation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UnshowDesignation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_UnshowDesignation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UnshowDesignation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UnshowDesignation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UnshowDesignation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UnshowDesignation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UnshowDesignation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UnshowDesignation::MergeFrom(const NetProto_UnshowDesignation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UnshowDesignation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UnshowDesignation::CopyFrom(const NetProto_UnshowDesignation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UnshowDesignation::IsInitialized() const {
  
  return true;
}

void NetProto_UnshowDesignation::Swap(NetProto_UnshowDesignation* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UnshowDesignation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UnshowDesignation_descriptor_;
  metadata.reflection = NetProto_UnshowDesignation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Recharge_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Recharge_ID_descriptor_;
}
bool NetProto_Recharge_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Recharge_ID NetProto_Recharge::GROUPID;
const NetProto_Recharge_ID NetProto_Recharge::UNITID;
const NetProto_Recharge_ID NetProto_Recharge::ID_MIN;
const NetProto_Recharge_ID NetProto_Recharge::ID_MAX;
const int NetProto_Recharge::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Recharge::kOrderFieldNumber;
const int NetProto_Recharge::kProductFieldNumber;
const int NetProto_Recharge::kVFieldNumber;
#endif  // !_MSC_VER

NetProto_Recharge::NetProto_Recharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Recharge::InitAsDefaultInstance() {
}

NetProto_Recharge::NetProto_Recharge(const NetProto_Recharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Recharge::SharedCtor() {
  _cached_size_ = 0;
  order_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Recharge::~NetProto_Recharge() {
  SharedDtor();
}

void NetProto_Recharge::SharedDtor() {
  if (order_ != &::google::protobuf::internal::kEmptyString) {
    delete order_;
  }
  if (product_ != &::google::protobuf::internal::kEmptyString) {
    delete product_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_Recharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Recharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Recharge_descriptor_;
}

const NetProto_Recharge& NetProto_Recharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Recharge* NetProto_Recharge::default_instance_ = NULL;

NetProto_Recharge* NetProto_Recharge::New() const {
  return new NetProto_Recharge;
}

void NetProto_Recharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order()) {
      if (order_ != &::google::protobuf::internal::kEmptyString) {
        order_->clear();
      }
    }
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::kEmptyString) {
        product_->clear();
      }
    }
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Recharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string order = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order().data(), this->order().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_product;
        break;
      }
      
      // optional string product = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_v;
        break;
      }
      
      // optional int32 v = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Recharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order().data(), this->order().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->order(), output);
  }
  
  // optional string product = 2;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->product(), output);
  }
  
  // optional int32 v = 3;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->v(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Recharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order().data(), this->order().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order(), target);
  }
  
  // optional string product = 2;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product(), target);
  }
  
  // optional int32 v = 3;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->v(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Recharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order());
    }
    
    // optional string product = 2;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }
    
    // optional int32 v = 3;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Recharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Recharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Recharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Recharge::MergeFrom(const NetProto_Recharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Recharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Recharge::CopyFrom(const NetProto_Recharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Recharge::IsInitialized() const {
  
  return true;
}

void NetProto_Recharge::Swap(NetProto_Recharge* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(product_, other->product_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Recharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Recharge_descriptor_;
  metadata.reflection = NetProto_Recharge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BusinessInfo_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BusinessInfo_ID_descriptor_;
}
bool NetProto_BusinessInfo_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BusinessInfo_ID NetProto_BusinessInfo::GROUPID;
const NetProto_BusinessInfo_ID NetProto_BusinessInfo::UNITID;
const NetProto_BusinessInfo_ID NetProto_BusinessInfo::ID_MIN;
const NetProto_BusinessInfo_ID NetProto_BusinessInfo::ID_MAX;
const int NetProto_BusinessInfo::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BusinessInfo::kIdFieldNumber;
const int NetProto_BusinessInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

NetProto_BusinessInfo::NetProto_BusinessInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BusinessInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::BusinessInfo*>(&::BusinessInfo::default_instance());
}

NetProto_BusinessInfo::NetProto_BusinessInfo(const NetProto_BusinessInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BusinessInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BusinessInfo::~NetProto_BusinessInfo() {
  SharedDtor();
}

void NetProto_BusinessInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NetProto_BusinessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BusinessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BusinessInfo_descriptor_;
}

const NetProto_BusinessInfo& NetProto_BusinessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BusinessInfo* NetProto_BusinessInfo::default_instance_ = NULL;

NetProto_BusinessInfo* NetProto_BusinessInfo::New() const {
  return new NetProto_BusinessInfo;
}

void NetProto_BusinessInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::BusinessInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BusinessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .BusinessInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BusinessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .BusinessInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BusinessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .BusinessInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BusinessInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .BusinessInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BusinessInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BusinessInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BusinessInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BusinessInfo::MergeFrom(const NetProto_BusinessInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::BusinessInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BusinessInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BusinessInfo::CopyFrom(const NetProto_BusinessInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BusinessInfo::IsInitialized() const {
  
  return true;
}

void NetProto_BusinessInfo::Swap(NetProto_BusinessInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BusinessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BusinessInfo_descriptor_;
  metadata.reflection = NetProto_BusinessInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_TransformWar_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TransformWar_ID_descriptor_;
}
bool NetProto_TransformWar_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_TransformWar_ID NetProto_TransformWar::GROUPID;
const NetProto_TransformWar_ID NetProto_TransformWar::UNITID;
const NetProto_TransformWar_ID NetProto_TransformWar::ID_MIN;
const NetProto_TransformWar_ID NetProto_TransformWar::ID_MAX;
const int NetProto_TransformWar::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_TransformWar::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_TransformWar::NetProto_TransformWar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_TransformWar::InitAsDefaultInstance() {
}

NetProto_TransformWar::NetProto_TransformWar(const NetProto_TransformWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_TransformWar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_TransformWar::~NetProto_TransformWar() {
  SharedDtor();
}

void NetProto_TransformWar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_TransformWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_TransformWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TransformWar_descriptor_;
}

const NetProto_TransformWar& NetProto_TransformWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_TransformWar* NetProto_TransformWar::default_instance_ = NULL;

NetProto_TransformWar* NetProto_TransformWar::New() const {
  return new NetProto_TransformWar;
}

void NetProto_TransformWar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_TransformWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_TransformWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_TransformWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_TransformWar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_TransformWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_TransformWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_TransformWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_TransformWar::MergeFrom(const NetProto_TransformWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_TransformWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_TransformWar::CopyFrom(const NetProto_TransformWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_TransformWar::IsInitialized() const {
  
  return true;
}

void NetProto_TransformWar::Swap(NetProto_TransformWar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_TransformWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_TransformWar_descriptor_;
  metadata.reflection = NetProto_TransformWar_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_TransformLevelUp_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TransformLevelUp_ID_descriptor_;
}
bool NetProto_TransformLevelUp_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_TransformLevelUp_ID NetProto_TransformLevelUp::GROUPID;
const NetProto_TransformLevelUp_ID NetProto_TransformLevelUp::UNITID;
const NetProto_TransformLevelUp_ID NetProto_TransformLevelUp::ID_MIN;
const NetProto_TransformLevelUp_ID NetProto_TransformLevelUp::ID_MAX;
const int NetProto_TransformLevelUp::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_TransformLevelUp::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_TransformLevelUp::NetProto_TransformLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_TransformLevelUp::InitAsDefaultInstance() {
}

NetProto_TransformLevelUp::NetProto_TransformLevelUp(const NetProto_TransformLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_TransformLevelUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_TransformLevelUp::~NetProto_TransformLevelUp() {
  SharedDtor();
}

void NetProto_TransformLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_TransformLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_TransformLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TransformLevelUp_descriptor_;
}

const NetProto_TransformLevelUp& NetProto_TransformLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_TransformLevelUp* NetProto_TransformLevelUp::default_instance_ = NULL;

NetProto_TransformLevelUp* NetProto_TransformLevelUp::New() const {
  return new NetProto_TransformLevelUp;
}

void NetProto_TransformLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_TransformLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_TransformLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_TransformLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_TransformLevelUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_TransformLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_TransformLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_TransformLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_TransformLevelUp::MergeFrom(const NetProto_TransformLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_TransformLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_TransformLevelUp::CopyFrom(const NetProto_TransformLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_TransformLevelUp::IsInitialized() const {
  
  return true;
}

void NetProto_TransformLevelUp::Swap(NetProto_TransformLevelUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_TransformLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_TransformLevelUp_descriptor_;
  metadata.reflection = NetProto_TransformLevelUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_TransformActive_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TransformActive_ID_descriptor_;
}
bool NetProto_TransformActive_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_TransformActive_ID NetProto_TransformActive::GROUPID;
const NetProto_TransformActive_ID NetProto_TransformActive::UNITID;
const NetProto_TransformActive_ID NetProto_TransformActive::ID_MIN;
const NetProto_TransformActive_ID NetProto_TransformActive::ID_MAX;
const int NetProto_TransformActive::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_TransformActive::kIdFieldNumber;
const int NetProto_TransformActive::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_TransformActive::NetProto_TransformActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_TransformActive::InitAsDefaultInstance() {
}

NetProto_TransformActive::NetProto_TransformActive(const NetProto_TransformActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_TransformActive::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_TransformActive::~NetProto_TransformActive() {
  SharedDtor();
}

void NetProto_TransformActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_TransformActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_TransformActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TransformActive_descriptor_;
}

const NetProto_TransformActive& NetProto_TransformActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_TransformActive* NetProto_TransformActive::default_instance_ = NULL;

NetProto_TransformActive* NetProto_TransformActive::New() const {
  return new NetProto_TransformActive;
}

void NetProto_TransformActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_TransformActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_TransformActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_TransformActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_TransformActive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_TransformActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_TransformActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_TransformActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_TransformActive::MergeFrom(const NetProto_TransformActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_TransformActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_TransformActive::CopyFrom(const NetProto_TransformActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_TransformActive::IsInitialized() const {
  
  return true;
}

void NetProto_TransformActive::Swap(NetProto_TransformActive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_TransformActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_TransformActive_descriptor_;
  metadata.reflection = NetProto_TransformActive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Reservation_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Reservation_ID_descriptor_;
}
bool NetProto_Reservation_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Reservation_ID NetProto_Reservation::GROUPID;
const NetProto_Reservation_ID NetProto_Reservation::UNITID;
const NetProto_Reservation_ID NetProto_Reservation::ID_MIN;
const NetProto_Reservation_ID NetProto_Reservation::ID_MAX;
const int NetProto_Reservation::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Reservation::kRoleIDFieldNumber;
const int NetProto_Reservation::kRmbFieldNumber;
const int NetProto_Reservation::kTimeFieldNumber;
#endif  // !_MSC_VER

NetProto_Reservation::NetProto_Reservation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Reservation::InitAsDefaultInstance() {
}

NetProto_Reservation::NetProto_Reservation(const NetProto_Reservation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Reservation::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  rmb_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Reservation::~NetProto_Reservation() {
  SharedDtor();
}

void NetProto_Reservation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Reservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Reservation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Reservation_descriptor_;
}

const NetProto_Reservation& NetProto_Reservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Reservation* NetProto_Reservation::default_instance_ = NULL;

NetProto_Reservation* NetProto_Reservation::New() const {
  return new NetProto_Reservation;
}

void NetProto_Reservation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    rmb_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Reservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Reservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional int32 rmb = 2;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rmb(), output);
  }
  
  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Reservation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional int32 rmb = 2;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rmb(), target);
  }
  
  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Reservation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 rmb = 2;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Reservation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Reservation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Reservation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Reservation::MergeFrom(const NetProto_Reservation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Reservation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Reservation::CopyFrom(const NetProto_Reservation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Reservation::IsInitialized() const {
  
  return true;
}

void NetProto_Reservation::Swap(NetProto_Reservation* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(rmb_, other->rmb_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Reservation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Reservation_descriptor_;
  metadata.reflection = NetProto_Reservation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetProto_OneReservation::kIndexFieldNumber;
const int NetProto_OneReservation::kPowerTypeFieldNumber;
const int NetProto_OneReservation::kRoleID1FieldNumber;
const int NetProto_OneReservation::kRoleID2FieldNumber;
const int NetProto_OneReservation::kName1FieldNumber;
const int NetProto_OneReservation::kName2FieldNumber;
const int NetProto_OneReservation::kFans1FieldNumber;
const int NetProto_OneReservation::kFans2FieldNumber;
const int NetProto_OneReservation::kRmbFieldNumber;
const int NetProto_OneReservation::kType1FieldNumber;
const int NetProto_OneReservation::kType2FieldNumber;
#endif  // !_MSC_VER

NetProto_OneReservation::NetProto_OneReservation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_OneReservation::InitAsDefaultInstance() {
}

NetProto_OneReservation::NetProto_OneReservation(const NetProto_OneReservation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_OneReservation::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  powerType_ = 0;
  roleID1_ = GOOGLE_LONGLONG(0);
  roleID2_ = GOOGLE_LONGLONG(0);
  name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fans1_ = 0;
  fans2_ = 0;
  rmb_ = 0;
  type1_ = 0;
  type2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_OneReservation::~NetProto_OneReservation() {
  SharedDtor();
}

void NetProto_OneReservation::SharedDtor() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_OneReservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_OneReservation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_OneReservation_descriptor_;
}

const NetProto_OneReservation& NetProto_OneReservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_OneReservation* NetProto_OneReservation::default_instance_ = NULL;

NetProto_OneReservation* NetProto_OneReservation::New() const {
  return new NetProto_OneReservation;
}

void NetProto_OneReservation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    powerType_ = 0;
    roleID1_ = GOOGLE_LONGLONG(0);
    roleID2_ = GOOGLE_LONGLONG(0);
    if (has_name1()) {
      if (name1_ != &::google::protobuf::internal::kEmptyString) {
        name1_->clear();
      }
    }
    if (has_name2()) {
      if (name2_ != &::google::protobuf::internal::kEmptyString) {
        name2_->clear();
      }
    }
    fans1_ = 0;
    fans2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rmb_ = 0;
    type1_ = 0;
    type2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_OneReservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_powerType;
        break;
      }
      
      // optional int32 powerType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powerType_)));
          set_has_powerType();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roleID1;
        break;
      }
      
      // optional int64 roleID1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID1_)));
          set_has_roleID1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleID2;
        break;
      }
      
      // optional int64 roleID2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID2_)));
          set_has_roleID2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name1;
        break;
      }
      
      // optional string name1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name1().data(), this->name1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name2;
        break;
      }
      
      // optional string name2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fans1;
        break;
      }
      
      // optional int32 fans1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fans1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fans1_)));
          set_has_fans1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fans2;
        break;
      }
      
      // optional int32 fans2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fans2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fans2_)));
          set_has_fans2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type1;
        break;
      }
      
      // optional .PB_ProfessionInfo.Type type1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_type1(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_type2;
        break;
      }
      
      // optional .PB_ProfessionInfo.Type type2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_type2(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_OneReservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 powerType = 2;
  if (has_powerType()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->powerType(), output);
  }
  
  // optional int64 roleID1 = 3;
  if (has_roleID1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roleID1(), output);
  }
  
  // optional int64 roleID2 = 4;
  if (has_roleID2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->roleID2(), output);
  }
  
  // optional string name1 = 5;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name1(), output);
  }
  
  // optional string name2 = 6;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name2(), output);
  }
  
  // optional int32 fans1 = 7;
  if (has_fans1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fans1(), output);
  }
  
  // optional int32 fans2 = 8;
  if (has_fans2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fans2(), output);
  }
  
  // optional int32 rmb = 9;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rmb(), output);
  }
  
  // optional .PB_ProfessionInfo.Type type1 = 10;
  if (has_type1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type1(), output);
  }
  
  // optional .PB_ProfessionInfo.Type type2 = 11;
  if (has_type2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->type2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_OneReservation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 powerType = 2;
  if (has_powerType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->powerType(), target);
  }
  
  // optional int64 roleID1 = 3;
  if (has_roleID1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roleID1(), target);
  }
  
  // optional int64 roleID2 = 4;
  if (has_roleID2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->roleID2(), target);
  }
  
  // optional string name1 = 5;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name1(), target);
  }
  
  // optional string name2 = 6;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name2(), target);
  }
  
  // optional int32 fans1 = 7;
  if (has_fans1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fans1(), target);
  }
  
  // optional int32 fans2 = 8;
  if (has_fans2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fans2(), target);
  }
  
  // optional int32 rmb = 9;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rmb(), target);
  }
  
  // optional .PB_ProfessionInfo.Type type1 = 10;
  if (has_type1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type1(), target);
  }
  
  // optional .PB_ProfessionInfo.Type type2 = 11;
  if (has_type2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->type2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_OneReservation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 powerType = 2;
    if (has_powerType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powerType());
    }
    
    // optional int64 roleID1 = 3;
    if (has_roleID1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID1());
    }
    
    // optional int64 roleID2 = 4;
    if (has_roleID2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID2());
    }
    
    // optional string name1 = 5;
    if (has_name1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name1());
    }
    
    // optional string name2 = 6;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }
    
    // optional int32 fans1 = 7;
    if (has_fans1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fans1());
    }
    
    // optional int32 fans2 = 8;
    if (has_fans2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fans2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 rmb = 9;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional .PB_ProfessionInfo.Type type1 = 10;
    if (has_type1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type1());
    }
    
    // optional .PB_ProfessionInfo.Type type2 = 11;
    if (has_type2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_OneReservation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_OneReservation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_OneReservation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_OneReservation::MergeFrom(const NetProto_OneReservation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_powerType()) {
      set_powerType(from.powerType());
    }
    if (from.has_roleID1()) {
      set_roleID1(from.roleID1());
    }
    if (from.has_roleID2()) {
      set_roleID2(from.roleID2());
    }
    if (from.has_name1()) {
      set_name1(from.name1());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
    if (from.has_fans1()) {
      set_fans1(from.fans1());
    }
    if (from.has_fans2()) {
      set_fans2(from.fans2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_type1()) {
      set_type1(from.type1());
    }
    if (from.has_type2()) {
      set_type2(from.type2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_OneReservation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_OneReservation::CopyFrom(const NetProto_OneReservation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_OneReservation::IsInitialized() const {
  
  return true;
}

void NetProto_OneReservation::Swap(NetProto_OneReservation* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(powerType_, other->powerType_);
    std::swap(roleID1_, other->roleID1_);
    std::swap(roleID2_, other->roleID2_);
    std::swap(name1_, other->name1_);
    std::swap(name2_, other->name2_);
    std::swap(fans1_, other->fans1_);
    std::swap(fans2_, other->fans2_);
    std::swap(rmb_, other->rmb_);
    std::swap(type1_, other->type1_);
    std::swap(type2_, other->type2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_OneReservation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_OneReservation_descriptor_;
  metadata.reflection = NetProto_OneReservation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ReservationList_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReservationList_ID_descriptor_;
}
bool NetProto_ReservationList_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ReservationList_ID NetProto_ReservationList::GROUPID;
const NetProto_ReservationList_ID NetProto_ReservationList::UNITID;
const NetProto_ReservationList_ID NetProto_ReservationList::ID_MIN;
const NetProto_ReservationList_ID NetProto_ReservationList::ID_MAX;
const int NetProto_ReservationList::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ReservationList::kListFieldNumber;
#endif  // !_MSC_VER

NetProto_ReservationList::NetProto_ReservationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ReservationList::InitAsDefaultInstance() {
}

NetProto_ReservationList::NetProto_ReservationList(const NetProto_ReservationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ReservationList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ReservationList::~NetProto_ReservationList() {
  SharedDtor();
}

void NetProto_ReservationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ReservationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ReservationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReservationList_descriptor_;
}

const NetProto_ReservationList& NetProto_ReservationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ReservationList* NetProto_ReservationList::default_instance_ = NULL;

NetProto_ReservationList* NetProto_ReservationList::New() const {
  return new NetProto_ReservationList;
}

void NetProto_ReservationList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ReservationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto_OneReservation list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ReservationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NetProto_OneReservation list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ReservationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NetProto_OneReservation list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ReservationList::ByteSize() const {
  int total_size = 0;
  
  // repeated .NetProto_OneReservation list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ReservationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ReservationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ReservationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ReservationList::MergeFrom(const NetProto_ReservationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ReservationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ReservationList::CopyFrom(const NetProto_ReservationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ReservationList::IsInitialized() const {
  
  return true;
}

void NetProto_ReservationList::Swap(NetProto_ReservationList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ReservationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ReservationList_descriptor_;
  metadata.reflection = NetProto_ReservationList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Talk_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Talk_ID_descriptor_;
}
bool NetProto_Talk_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Talk_ID NetProto_Talk::GROUPID;
const NetProto_Talk_ID NetProto_Talk::UNITID;
const NetProto_Talk_ID NetProto_Talk::ID_MIN;
const NetProto_Talk_ID NetProto_Talk::ID_MAX;
const int NetProto_Talk::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Talk::kIdFieldNumber;
const int NetProto_Talk::kPosFieldNumber;
#endif  // !_MSC_VER

NetProto_Talk::NetProto_Talk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Talk::InitAsDefaultInstance() {
  pos_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

NetProto_Talk::NetProto_Talk(const NetProto_Talk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Talk::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Talk::~NetProto_Talk() {
  SharedDtor();
}

void NetProto_Talk::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void NetProto_Talk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Talk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Talk_descriptor_;
}

const NetProto_Talk& NetProto_Talk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Talk* NetProto_Talk::default_instance_ = NULL;

NetProto_Talk* NetProto_Talk::New() const {
  return new NetProto_Talk;
}

void NetProto_Talk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PB_Vector3f::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Talk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // optional .PB_Vector3f pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Talk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .PB_Vector3f pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Talk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .PB_Vector3f pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Talk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PB_Vector3f pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Talk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Talk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Talk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Talk::MergeFrom(const NetProto_Talk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::PB_Vector3f::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Talk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Talk::CopyFrom(const NetProto_Talk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Talk::IsInitialized() const {
  
  return true;
}

void NetProto_Talk::Swap(NetProto_Talk* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Talk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Talk_descriptor_;
  metadata.reflection = NetProto_Talk_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Answer_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Answer_ID_descriptor_;
}
bool NetProto_Answer_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Answer_ID NetProto_Answer::GROUPID;
const NetProto_Answer_ID NetProto_Answer::UNITID;
const NetProto_Answer_ID NetProto_Answer::ID_MIN;
const NetProto_Answer_ID NetProto_Answer::ID_MAX;
const int NetProto_Answer::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Answer::kIdFieldNumber;
const int NetProto_Answer::kFuncFieldNumber;
const int NetProto_Answer::kStrFieldNumber;
#endif  // !_MSC_VER

NetProto_Answer::NetProto_Answer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Answer::InitAsDefaultInstance() {
}

NetProto_Answer::NetProto_Answer(const NetProto_Answer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Answer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Answer::~NetProto_Answer() {
  SharedDtor();
}

void NetProto_Answer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Answer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Answer_descriptor_;
}

const NetProto_Answer& NetProto_Answer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Answer* NetProto_Answer::default_instance_ = NULL;

NetProto_Answer* NetProto_Answer::New() const {
  return new NetProto_Answer;
}

void NetProto_Answer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  func_.Clear();
  str_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_func;
        break;
      }
      
      // repeated .PB_FuncInfo func = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_func:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_func()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_func;
        if (input->ExpectTag(26)) goto parse_str;
        break;
      }
      
      // repeated string str = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str(0).data(), this->str(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .PB_FuncInfo func = 2;
  for (int i = 0; i < this->func_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->func(i), output);
  }
  
  // repeated string str = 3;
  for (int i = 0; i < this->str_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->str(i).data(), this->str(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Answer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .PB_FuncInfo func = 2;
  for (int i = 0; i < this->func_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->func(i), target);
  }
  
  // repeated string str = 3;
  for (int i = 0; i < this->str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str(i).data(), this->str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->str(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Answer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  // repeated .PB_FuncInfo func = 2;
  total_size += 1 * this->func_size();
  for (int i = 0; i < this->func_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->func(i));
  }
  
  // repeated string str = 3;
  total_size += 1 * this->str_size();
  for (int i = 0; i < this->str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Answer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Answer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Answer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Answer::MergeFrom(const NetProto_Answer& from) {
  GOOGLE_CHECK_NE(&from, this);
  func_.MergeFrom(from.func_);
  str_.MergeFrom(from.str_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Answer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Answer::CopyFrom(const NetProto_Answer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Answer::IsInitialized() const {
  
  return true;
}

void NetProto_Answer::Swap(NetProto_Answer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    func_.Swap(&other->func_);
    str_.Swap(&other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Answer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Answer_descriptor_;
  metadata.reflection = NetProto_Answer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_RequestFunc_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RequestFunc_ID_descriptor_;
}
bool NetProto_RequestFunc_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_RequestFunc_ID NetProto_RequestFunc::GROUPID;
const NetProto_RequestFunc_ID NetProto_RequestFunc::UNITID;
const NetProto_RequestFunc_ID NetProto_RequestFunc::ID_MIN;
const NetProto_RequestFunc_ID NetProto_RequestFunc::ID_MAX;
const int NetProto_RequestFunc::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_RequestFunc::kFuncFieldNumber;
#endif  // !_MSC_VER

NetProto_RequestFunc::NetProto_RequestFunc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_RequestFunc::InitAsDefaultInstance() {
  func_ = const_cast< ::PB_FuncInfo*>(&::PB_FuncInfo::default_instance());
}

NetProto_RequestFunc::NetProto_RequestFunc(const NetProto_RequestFunc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_RequestFunc::SharedCtor() {
  _cached_size_ = 0;
  func_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_RequestFunc::~NetProto_RequestFunc() {
  SharedDtor();
}

void NetProto_RequestFunc::SharedDtor() {
  if (this != default_instance_) {
    delete func_;
  }
}

void NetProto_RequestFunc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_RequestFunc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_RequestFunc_descriptor_;
}

const NetProto_RequestFunc& NetProto_RequestFunc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_RequestFunc* NetProto_RequestFunc::default_instance_ = NULL;

NetProto_RequestFunc* NetProto_RequestFunc::New() const {
  return new NetProto_RequestFunc;
}

void NetProto_RequestFunc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_func()) {
      if (func_ != NULL) func_->::PB_FuncInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_RequestFunc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_FuncInfo func = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_func()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_RequestFunc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_FuncInfo func = 1;
  if (has_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->func(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_RequestFunc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_FuncInfo func = 1;
  if (has_func()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->func(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_RequestFunc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_FuncInfo func = 1;
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->func());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_RequestFunc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_RequestFunc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_RequestFunc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_RequestFunc::MergeFrom(const NetProto_RequestFunc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func()) {
      mutable_func()->::PB_FuncInfo::MergeFrom(from.func());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_RequestFunc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_RequestFunc::CopyFrom(const NetProto_RequestFunc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_RequestFunc::IsInitialized() const {
  
  return true;
}

void NetProto_RequestFunc::Swap(NetProto_RequestFunc* other) {
  if (other != this) {
    std::swap(func_, other->func_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_RequestFunc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_RequestFunc_descriptor_;
  metadata.reflection = NetProto_RequestFunc_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ReplyFunc_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReplyFunc_ID_descriptor_;
}
bool NetProto_ReplyFunc_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ReplyFunc_ID NetProto_ReplyFunc::GROUPID;
const NetProto_ReplyFunc_ID NetProto_ReplyFunc::UNITID;
const NetProto_ReplyFunc_ID NetProto_ReplyFunc::ID_MIN;
const NetProto_ReplyFunc_ID NetProto_ReplyFunc::ID_MAX;
const int NetProto_ReplyFunc::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ReplyFunc::kFuncFieldNumber;
const int NetProto_ReplyFunc::kMissionFieldNumber;
#endif  // !_MSC_VER

NetProto_ReplyFunc::NetProto_ReplyFunc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ReplyFunc::InitAsDefaultInstance() {
  func_ = const_cast< ::PB_FuncInfo*>(&::PB_FuncInfo::default_instance());
  mission_ = const_cast< ::MissionContent*>(&::MissionContent::default_instance());
}

NetProto_ReplyFunc::NetProto_ReplyFunc(const NetProto_ReplyFunc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ReplyFunc::SharedCtor() {
  _cached_size_ = 0;
  func_ = NULL;
  mission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ReplyFunc::~NetProto_ReplyFunc() {
  SharedDtor();
}

void NetProto_ReplyFunc::SharedDtor() {
  if (this != default_instance_) {
    delete func_;
    delete mission_;
  }
}

void NetProto_ReplyFunc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ReplyFunc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReplyFunc_descriptor_;
}

const NetProto_ReplyFunc& NetProto_ReplyFunc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ReplyFunc* NetProto_ReplyFunc::default_instance_ = NULL;

NetProto_ReplyFunc* NetProto_ReplyFunc::New() const {
  return new NetProto_ReplyFunc;
}

void NetProto_ReplyFunc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_func()) {
      if (func_ != NULL) func_->::PB_FuncInfo::Clear();
    }
    if (has_mission()) {
      if (mission_ != NULL) mission_->::MissionContent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ReplyFunc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_FuncInfo func = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_func()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mission;
        break;
      }
      
      // optional .MissionContent mission = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ReplyFunc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_FuncInfo func = 1;
  if (has_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->func(), output);
  }
  
  // optional .MissionContent mission = 2;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mission(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ReplyFunc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_FuncInfo func = 1;
  if (has_func()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->func(), target);
  }
  
  // optional .MissionContent mission = 2;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mission(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ReplyFunc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_FuncInfo func = 1;
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->func());
    }
    
    // optional .MissionContent mission = 2;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ReplyFunc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ReplyFunc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ReplyFunc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ReplyFunc::MergeFrom(const NetProto_ReplyFunc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func()) {
      mutable_func()->::PB_FuncInfo::MergeFrom(from.func());
    }
    if (from.has_mission()) {
      mutable_mission()->::MissionContent::MergeFrom(from.mission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ReplyFunc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ReplyFunc::CopyFrom(const NetProto_ReplyFunc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ReplyFunc::IsInitialized() const {
  
  return true;
}

void NetProto_ReplyFunc::Swap(NetProto_ReplyFunc* other) {
  if (other != this) {
    std::swap(func_, other->func_);
    std::swap(mission_, other->mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ReplyFunc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ReplyFunc_descriptor_;
  metadata.reflection = NetProto_ReplyFunc_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ApplyMission_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ApplyMission_ID_descriptor_;
}
bool NetProto_ApplyMission_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ApplyMission_ID NetProto_ApplyMission::GROUPID;
const NetProto_ApplyMission_ID NetProto_ApplyMission::UNITID;
const NetProto_ApplyMission_ID NetProto_ApplyMission::ID_MIN;
const NetProto_ApplyMission_ID NetProto_ApplyMission::ID_MAX;
const int NetProto_ApplyMission::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ApplyMission::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_ApplyMission::NetProto_ApplyMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ApplyMission::InitAsDefaultInstance() {
}

NetProto_ApplyMission::NetProto_ApplyMission(const NetProto_ApplyMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ApplyMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ApplyMission::~NetProto_ApplyMission() {
  SharedDtor();
}

void NetProto_ApplyMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ApplyMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ApplyMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ApplyMission_descriptor_;
}

const NetProto_ApplyMission& NetProto_ApplyMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ApplyMission* NetProto_ApplyMission::default_instance_ = NULL;

NetProto_ApplyMission* NetProto_ApplyMission::New() const {
  return new NetProto_ApplyMission;
}

void NetProto_ApplyMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ApplyMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ApplyMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ApplyMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ApplyMission::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ApplyMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ApplyMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ApplyMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ApplyMission::MergeFrom(const NetProto_ApplyMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ApplyMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ApplyMission::CopyFrom(const NetProto_ApplyMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ApplyMission::IsInitialized() const {
  
  return true;
}

void NetProto_ApplyMission::Swap(NetProto_ApplyMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ApplyMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ApplyMission_descriptor_;
  metadata.reflection = NetProto_ApplyMission_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_CompleteMission_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CompleteMission_ID_descriptor_;
}
bool NetProto_CompleteMission_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_CompleteMission_ID NetProto_CompleteMission::GROUPID;
const NetProto_CompleteMission_ID NetProto_CompleteMission::UNITID;
const NetProto_CompleteMission_ID NetProto_CompleteMission::ID_MIN;
const NetProto_CompleteMission_ID NetProto_CompleteMission::ID_MAX;
const int NetProto_CompleteMission::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_CompleteMission::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_CompleteMission::NetProto_CompleteMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_CompleteMission::InitAsDefaultInstance() {
}

NetProto_CompleteMission::NetProto_CompleteMission(const NetProto_CompleteMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_CompleteMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_CompleteMission::~NetProto_CompleteMission() {
  SharedDtor();
}

void NetProto_CompleteMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_CompleteMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_CompleteMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CompleteMission_descriptor_;
}

const NetProto_CompleteMission& NetProto_CompleteMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_CompleteMission* NetProto_CompleteMission::default_instance_ = NULL;

NetProto_CompleteMission* NetProto_CompleteMission::New() const {
  return new NetProto_CompleteMission;
}

void NetProto_CompleteMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_CompleteMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_CompleteMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_CompleteMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_CompleteMission::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_CompleteMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_CompleteMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_CompleteMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_CompleteMission::MergeFrom(const NetProto_CompleteMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_CompleteMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_CompleteMission::CopyFrom(const NetProto_CompleteMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_CompleteMission::IsInitialized() const {
  
  return true;
}

void NetProto_CompleteMission::Swap(NetProto_CompleteMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_CompleteMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_CompleteMission_descriptor_;
  metadata.reflection = NetProto_CompleteMission_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GiveUpMission_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GiveUpMission_ID_descriptor_;
}
bool NetProto_GiveUpMission_ID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GiveUpMission_ID NetProto_GiveUpMission::GROUPID;
const NetProto_GiveUpMission_ID NetProto_GiveUpMission::UNITID;
const NetProto_GiveUpMission_ID NetProto_GiveUpMission::ID_MIN;
const NetProto_GiveUpMission_ID NetProto_GiveUpMission::ID_MAX;
const int NetProto_GiveUpMission::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GiveUpMission::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_GiveUpMission::NetProto_GiveUpMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GiveUpMission::InitAsDefaultInstance() {
}

NetProto_GiveUpMission::NetProto_GiveUpMission(const NetProto_GiveUpMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GiveUpMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GiveUpMission::~NetProto_GiveUpMission() {
  SharedDtor();
}

void NetProto_GiveUpMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GiveUpMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GiveUpMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GiveUpMission_descriptor_;
}

const NetProto_GiveUpMission& NetProto_GiveUpMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GiveUpMission* NetProto_GiveUpMission::default_instance_ = NULL;

NetProto_GiveUpMission* NetProto_GiveUpMission::New() const {
  return new NetProto_GiveUpMission;
}

void NetProto_GiveUpMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GiveUpMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GiveUpMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GiveUpMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GiveUpMission::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GiveUpMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GiveUpMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GiveUpMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GiveUpMission::MergeFrom(const NetProto_GiveUpMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GiveUpMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GiveUpMission::CopyFrom(const NetProto_GiveUpMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GiveUpMission::IsInitialized() const {
  
  return true;
}

void NetProto_GiveUpMission::Swap(NetProto_GiveUpMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GiveUpMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GiveUpMission_descriptor_;
  metadata.reflection = NetProto_GiveUpMission_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Chat_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Chat_ID_descriptor_;
}
bool NetProto_Chat_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Chat_ID NetProto_Chat::GROUPID;
const NetProto_Chat_ID NetProto_Chat::UNITID;
const NetProto_Chat_ID NetProto_Chat::ID_MIN;
const NetProto_Chat_ID NetProto_Chat::ID_MAX;
const int NetProto_Chat::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Chat_Channel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Chat_Channel_descriptor_;
}
bool NetProto_Chat_Channel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Chat_Channel NetProto_Chat::SYSTEM;
const NetProto_Chat_Channel NetProto_Chat::GUILD;
const NetProto_Chat_Channel NetProto_Chat::TEAM;
const NetProto_Chat_Channel NetProto_Chat::WORLD;
const NetProto_Chat_Channel NetProto_Chat::SECRET;
const NetProto_Chat_Channel NetProto_Chat::CURSENCE;
const NetProto_Chat_Channel NetProto_Chat::Channel_MIN;
const NetProto_Chat_Channel NetProto_Chat::Channel_MAX;
const int NetProto_Chat::Channel_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_Chat_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Chat_Type_descriptor_;
}
bool NetProto_Chat_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Chat_Type NetProto_Chat::PLAYER;
const NetProto_Chat_Type NetProto_Chat::NPC;
const NetProto_Chat_Type NetProto_Chat::Type_MIN;
const NetProto_Chat_Type NetProto_Chat::Type_MAX;
const int NetProto_Chat::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Chat::kChannelFieldNumber;
const int NetProto_Chat::kContentFieldNumber;
const int NetProto_Chat::kSTypeFieldNumber;
const int NetProto_Chat::kSenderFieldNumber;
const int NetProto_Chat::kReceiverFieldNumber;
const int NetProto_Chat::kVipFieldNumber;
#endif  // !_MSC_VER

NetProto_Chat::NetProto_Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Chat::InitAsDefaultInstance() {
  sender_ = const_cast< ::PB_FriendInfo*>(&::PB_FriendInfo::default_instance());
}

NetProto_Chat::NetProto_Chat(const NetProto_Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Chat::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sType_ = 0;
  sender_ = NULL;
  receiver_ = GOOGLE_LONGLONG(0);
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Chat::~NetProto_Chat() {
  SharedDtor();
}

void NetProto_Chat::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void NetProto_Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Chat_descriptor_;
}

const NetProto_Chat& NetProto_Chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Chat* NetProto_Chat::default_instance_ = NULL;

NetProto_Chat* NetProto_Chat::New() const {
  return new NetProto_Chat;
}

void NetProto_Chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    sType_ = 0;
    if (has_sender()) {
      if (sender_ != NULL) sender_->::PB_FriendInfo::Clear();
    }
    receiver_ = GOOGLE_LONGLONG(0);
    vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Chat.Channel channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Chat_Channel_IsValid(value)) {
            set_channel(static_cast< ::NetProto_Chat_Channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sType;
        break;
      }
      
      // optional .NetProto_Chat.Type sType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Chat_Type_IsValid(value)) {
            set_sType(static_cast< ::NetProto_Chat_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sender;
        break;
      }
      
      // optional .PB_FriendInfo sender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_receiver;
        break;
      }
      
      // optional int64 receiver = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiver_)));
          set_has_receiver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Chat.Channel channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  // optional .NetProto_Chat.Type sType = 3;
  if (has_sType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sType(), output);
  }
  
  // optional .PB_FriendInfo sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sender(), output);
  }
  
  // optional int64 receiver = 5;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->receiver(), output);
  }
  
  // optional int32 vip = 6;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Chat.Channel channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  // optional .NetProto_Chat.Type sType = 3;
  if (has_sType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sType(), target);
  }
  
  // optional .PB_FriendInfo sender = 4;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sender(), target);
  }
  
  // optional int64 receiver = 5;
  if (has_receiver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->receiver(), target);
  }
  
  // optional int32 vip = 6;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Chat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Chat.Channel channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }
    
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional .NetProto_Chat.Type sType = 3;
    if (has_sType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sType());
    }
    
    // optional .PB_FriendInfo sender = 4;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // optional int64 receiver = 5;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiver());
    }
    
    // optional int32 vip = 6;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Chat::MergeFrom(const NetProto_Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sType()) {
      set_sType(from.sType());
    }
    if (from.has_sender()) {
      mutable_sender()->::PB_FriendInfo::MergeFrom(from.sender());
    }
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Chat::CopyFrom(const NetProto_Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Chat::IsInitialized() const {
  
  return true;
}

void NetProto_Chat::Swap(NetProto_Chat* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(content_, other->content_);
    std::swap(sType_, other->sType_);
    std::swap(sender_, other->sender_);
    std::swap(receiver_, other->receiver_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Chat_descriptor_;
  metadata.reflection = NetProto_Chat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Message_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Message_ID_descriptor_;
}
bool NetProto_Message_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Message_ID NetProto_Message::GROUPID;
const NetProto_Message_ID NetProto_Message::UNITID;
const NetProto_Message_ID NetProto_Message::ID_MIN;
const NetProto_Message_ID NetProto_Message::ID_MAX;
const int NetProto_Message::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Message::kContentFieldNumber;
const int NetProto_Message::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_Message::NetProto_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Message::InitAsDefaultInstance() {
}

NetProto_Message::NetProto_Message(const NetProto_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Message::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Message::~NetProto_Message() {
  SharedDtor();
}

void NetProto_Message::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Message_descriptor_;
}

const NetProto_Message& NetProto_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Message* NetProto_Message::default_instance_ = NULL;

NetProto_Message* NetProto_Message::New() const {
  return new NetProto_Message;
}

void NetProto_Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Message::MergeFrom(const NetProto_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Message::CopyFrom(const NetProto_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Message::IsInitialized() const {
  
  return true;
}

void NetProto_Message::Swap(NetProto_Message* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Message_descriptor_;
  metadata.reflection = NetProto_Message_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_SendMail_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SendMail_ID_descriptor_;
}
bool NetProto_SendMail_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_SendMail_ID NetProto_SendMail::GROUPID;
const NetProto_SendMail_ID NetProto_SendMail::UNITID;
const NetProto_SendMail_ID NetProto_SendMail::ID_MIN;
const NetProto_SendMail_ID NetProto_SendMail::ID_MAX;
const int NetProto_SendMail::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_SendMail::kReceiverFieldNumber;
const int NetProto_SendMail::kMailFieldNumber;
const int NetProto_SendMail::kPosFieldNumber;
#endif  // !_MSC_VER

NetProto_SendMail::NetProto_SendMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_SendMail::InitAsDefaultInstance() {
  mail_ = const_cast< ::PB_MailInfo*>(&::PB_MailInfo::default_instance());
}

NetProto_SendMail::NetProto_SendMail(const NetProto_SendMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_SendMail::SharedCtor() {
  _cached_size_ = 0;
  receiver_ = GOOGLE_LONGLONG(0);
  mail_ = NULL;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_SendMail::~NetProto_SendMail() {
  SharedDtor();
}

void NetProto_SendMail::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void NetProto_SendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_SendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_SendMail_descriptor_;
}

const NetProto_SendMail& NetProto_SendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_SendMail* NetProto_SendMail::default_instance_ = NULL;

NetProto_SendMail* NetProto_SendMail::New() const {
  return new NetProto_SendMail;
}

void NetProto_SendMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    receiver_ = GOOGLE_LONGLONG(0);
    if (has_mail()) {
      if (mail_ != NULL) mail_->::PB_MailInfo::Clear();
    }
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_SendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 receiver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiver_)));
          set_has_receiver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }
      
      // optional .PB_MailInfo mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_SendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 receiver = 1;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->receiver(), output);
  }
  
  // optional .PB_MailInfo mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }
  
  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_SendMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 receiver = 1;
  if (has_receiver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->receiver(), target);
  }
  
  // optional .PB_MailInfo mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }
  
  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_SendMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 receiver = 1;
    if (has_receiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiver());
    }
    
    // optional .PB_MailInfo mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }
    
    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_SendMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_SendMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_SendMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_SendMail::MergeFrom(const NetProto_SendMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiver()) {
      set_receiver(from.receiver());
    }
    if (from.has_mail()) {
      mutable_mail()->::PB_MailInfo::MergeFrom(from.mail());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_SendMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_SendMail::CopyFrom(const NetProto_SendMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_SendMail::IsInitialized() const {
  
  return true;
}

void NetProto_SendMail::Swap(NetProto_SendMail* other) {
  if (other != this) {
    std::swap(receiver_, other->receiver_);
    std::swap(mail_, other->mail_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_SendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_SendMail_descriptor_;
  metadata.reflection = NetProto_SendMail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GetMailItem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetMailItem_ID_descriptor_;
}
bool NetProto_GetMailItem_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GetMailItem_ID NetProto_GetMailItem::GROUPID;
const NetProto_GetMailItem_ID NetProto_GetMailItem::UNITID;
const NetProto_GetMailItem_ID NetProto_GetMailItem::ID_MIN;
const NetProto_GetMailItem_ID NetProto_GetMailItem::ID_MAX;
const int NetProto_GetMailItem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GetMailItem::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_GetMailItem::NetProto_GetMailItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GetMailItem::InitAsDefaultInstance() {
}

NetProto_GetMailItem::NetProto_GetMailItem(const NetProto_GetMailItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GetMailItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GetMailItem::~NetProto_GetMailItem() {
  SharedDtor();
}

void NetProto_GetMailItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GetMailItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GetMailItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GetMailItem_descriptor_;
}

const NetProto_GetMailItem& NetProto_GetMailItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GetMailItem* NetProto_GetMailItem::default_instance_ = NULL;

NetProto_GetMailItem* NetProto_GetMailItem::New() const {
  return new NetProto_GetMailItem;
}

void NetProto_GetMailItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GetMailItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GetMailItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GetMailItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GetMailItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GetMailItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GetMailItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GetMailItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GetMailItem::MergeFrom(const NetProto_GetMailItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GetMailItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GetMailItem::CopyFrom(const NetProto_GetMailItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GetMailItem::IsInitialized() const {
  
  return true;
}

void NetProto_GetMailItem::Swap(NetProto_GetMailItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GetMailItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GetMailItem_descriptor_;
  metadata.reflection = NetProto_GetMailItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ReadMail_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReadMail_ID_descriptor_;
}
bool NetProto_ReadMail_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ReadMail_ID NetProto_ReadMail::GROUPID;
const NetProto_ReadMail_ID NetProto_ReadMail::UNITID;
const NetProto_ReadMail_ID NetProto_ReadMail::ID_MIN;
const NetProto_ReadMail_ID NetProto_ReadMail::ID_MAX;
const int NetProto_ReadMail::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ReadMail::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_ReadMail::NetProto_ReadMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ReadMail::InitAsDefaultInstance() {
}

NetProto_ReadMail::NetProto_ReadMail(const NetProto_ReadMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ReadMail::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ReadMail::~NetProto_ReadMail() {
  SharedDtor();
}

void NetProto_ReadMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ReadMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ReadMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ReadMail_descriptor_;
}

const NetProto_ReadMail& NetProto_ReadMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ReadMail* NetProto_ReadMail::default_instance_ = NULL;

NetProto_ReadMail* NetProto_ReadMail::New() const {
  return new NetProto_ReadMail;
}

void NetProto_ReadMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ReadMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ReadMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ReadMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ReadMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ReadMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ReadMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ReadMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ReadMail::MergeFrom(const NetProto_ReadMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ReadMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ReadMail::CopyFrom(const NetProto_ReadMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ReadMail::IsInitialized() const {
  
  return true;
}

void NetProto_ReadMail::Swap(NetProto_ReadMail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ReadMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ReadMail_descriptor_;
  metadata.reflection = NetProto_ReadMail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DelMail_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelMail_ID_descriptor_;
}
bool NetProto_DelMail_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DelMail_ID NetProto_DelMail::GROUPID;
const NetProto_DelMail_ID NetProto_DelMail::UNITID;
const NetProto_DelMail_ID NetProto_DelMail::ID_MIN;
const NetProto_DelMail_ID NetProto_DelMail::ID_MAX;
const int NetProto_DelMail::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DelMail::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_DelMail::NetProto_DelMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DelMail::InitAsDefaultInstance() {
}

NetProto_DelMail::NetProto_DelMail(const NetProto_DelMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DelMail::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DelMail::~NetProto_DelMail() {
  SharedDtor();
}

void NetProto_DelMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DelMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DelMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelMail_descriptor_;
}

const NetProto_DelMail& NetProto_DelMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DelMail* NetProto_DelMail::default_instance_ = NULL;

NetProto_DelMail* NetProto_DelMail::New() const {
  return new NetProto_DelMail;
}

void NetProto_DelMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DelMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DelMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DelMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DelMail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DelMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DelMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DelMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DelMail::MergeFrom(const NetProto_DelMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DelMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DelMail::CopyFrom(const NetProto_DelMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DelMail::IsInitialized() const {
  
  return true;
}

void NetProto_DelMail::Swap(NetProto_DelMail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DelMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DelMail_descriptor_;
  metadata.reflection = NetProto_DelMail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMLogin_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMLogin_ID_descriptor_;
}
bool NetProto_GMLogin_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMLogin_ID NetProto_GMLogin::GROUPID;
const NetProto_GMLogin_ID NetProto_GMLogin::UNITID;
const NetProto_GMLogin_ID NetProto_GMLogin::ID_MIN;
const NetProto_GMLogin_ID NetProto_GMLogin::ID_MAX;
const int NetProto_GMLogin::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_GMLogin_OP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMLogin_OP_descriptor_;
}
bool NetProto_GMLogin_OP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMLogin_OP NetProto_GMLogin::NONE;
const NetProto_GMLogin_OP NetProto_GMLogin::CP;
const NetProto_GMLogin_OP NetProto_GMLogin::YUNYING;
const NetProto_GMLogin_OP NetProto_GMLogin::CUSTOM;
const NetProto_GMLogin_OP NetProto_GMLogin::OP_MIN;
const NetProto_GMLogin_OP NetProto_GMLogin::OP_MAX;
const int NetProto_GMLogin::OP_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMLogin::kAccountFieldNumber;
const int NetProto_GMLogin::kPasswdFieldNumber;
const int NetProto_GMLogin::kPermissionFieldNumber;
#endif  // !_MSC_VER

NetProto_GMLogin::NetProto_GMLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMLogin::InitAsDefaultInstance() {
}

NetProto_GMLogin::NetProto_GMLogin(const NetProto_GMLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMLogin::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  permission_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMLogin::~NetProto_GMLogin() {
  SharedDtor();
}

void NetProto_GMLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_GMLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMLogin_descriptor_;
}

const NetProto_GMLogin& NetProto_GMLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMLogin* NetProto_GMLogin::default_instance_ = NULL;

NetProto_GMLogin* NetProto_GMLogin::New() const {
  return new NetProto_GMLogin;
}

void NetProto_GMLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    permission_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }
      
      // optional string passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_permission;
        break;
      }
      
      // optional .NetProto_GMLogin.OP permission = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permission:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_GMLogin_OP_IsValid(value)) {
            set_permission(static_cast< ::NetProto_GMLogin_OP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passwd(), output);
  }
  
  // optional .NetProto_GMLogin.OP permission = 3;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->permission(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional string passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }
  
  // optional .NetProto_GMLogin.OP permission = 3;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->permission(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
    // optional .NetProto_GMLogin.OP permission = 3;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->permission());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMLogin::MergeFrom(const NetProto_GMLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMLogin::CopyFrom(const NetProto_GMLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMLogin::IsInitialized() const {
  
  return true;
}

void NetProto_GMLogin::Swap(NetProto_GMLogin* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(permission_, other->permission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMLogin_descriptor_;
  metadata.reflection = NetProto_GMLogin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMOrder_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMOrder_ID_descriptor_;
}
bool NetProto_GMOrder_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMOrder_ID NetProto_GMOrder::GROUPID;
const NetProto_GMOrder_ID NetProto_GMOrder::UNITID;
const NetProto_GMOrder_ID NetProto_GMOrder::ID_MIN;
const NetProto_GMOrder_ID NetProto_GMOrder::ID_MAX;
const int NetProto_GMOrder::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_GMOrder_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMOrder_Type_descriptor_;
}
bool NetProto_GMOrder_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMOrder_Type NetProto_GMOrder::ONLINE_NUM;
const NetProto_GMOrder_Type NetProto_GMOrder::GET_GOODS;
const NetProto_GMOrder_Type NetProto_GMOrder::GET_RMB;
const NetProto_GMOrder_Type NetProto_GMOrder::GET_MONEY;
const NetProto_GMOrder_Type NetProto_GMOrder::MESSAGE;
const NetProto_GMOrder_Type NetProto_GMOrder::SYSTEM;
const NetProto_GMOrder_Type NetProto_GMOrder::GET_EQUIPMENT;
const NetProto_GMOrder_Type NetProto_GMOrder::RELOAD;
const NetProto_GMOrder_Type NetProto_GMOrder::MUL_EXP;
const NetProto_GMOrder_Type NetProto_GMOrder::Type_MIN;
const NetProto_GMOrder_Type NetProto_GMOrder::Type_MAX;
const int NetProto_GMOrder::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMOrder::kTypeFieldNumber;
const int NetProto_GMOrder::kTargetFieldNumber;
const int NetProto_GMOrder::kNValueFieldNumber;
const int NetProto_GMOrder::kFValueFieldNumber;
const int NetProto_GMOrder::kSValueFieldNumber;
const int NetProto_GMOrder::kResFieldNumber;
#endif  // !_MSC_VER

NetProto_GMOrder::NetProto_GMOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMOrder::InitAsDefaultInstance() {
}

NetProto_GMOrder::NetProto_GMOrder(const NetProto_GMOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMOrder::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  target_ = GOOGLE_LONGLONG(0);
  nValue_ = GOOGLE_LONGLONG(0);
  fValue_ = 0;
  sValue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMOrder::~NetProto_GMOrder() {
  SharedDtor();
}

void NetProto_GMOrder::SharedDtor() {
  if (sValue_ != &::google::protobuf::internal::kEmptyString) {
    delete sValue_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_GMOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMOrder_descriptor_;
}

const NetProto_GMOrder& NetProto_GMOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMOrder* NetProto_GMOrder::default_instance_ = NULL;

NetProto_GMOrder* NetProto_GMOrder::New() const {
  return new NetProto_GMOrder;
}

void NetProto_GMOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    target_ = GOOGLE_LONGLONG(0);
    nValue_ = GOOGLE_LONGLONG(0);
    fValue_ = 0;
    if (has_sValue()) {
      if (sValue_ != &::google::protobuf::internal::kEmptyString) {
        sValue_->clear();
      }
    }
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GMOrder.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_GMOrder_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_GMOrder_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target;
        break;
      }
      
      // optional int64 target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nValue;
        break;
      }
      
      // optional int64 nValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nValue_)));
          set_has_nValue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_fValue;
        break;
      }
      
      // optional float fValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fValue_)));
          set_has_fValue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sValue;
        break;
      }
      
      // optional string sValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sValue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sValue().data(), this->sValue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_res;
        break;
      }
      
      // optional int32 res = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GMOrder.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int64 target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->target(), output);
  }
  
  // optional int64 nValue = 3;
  if (has_nValue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->nValue(), output);
  }
  
  // optional float fValue = 4;
  if (has_fValue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fValue(), output);
  }
  
  // optional string sValue = 5;
  if (has_sValue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sValue().data(), this->sValue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sValue(), output);
  }
  
  // optional int32 res = 6;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GMOrder.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int64 target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->target(), target);
  }
  
  // optional int64 nValue = 3;
  if (has_nValue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->nValue(), target);
  }
  
  // optional float fValue = 4;
  if (has_fValue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fValue(), target);
  }
  
  // optional string sValue = 5;
  if (has_sValue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sValue().data(), this->sValue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sValue(), target);
  }
  
  // optional int32 res = 6;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GMOrder.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int64 target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target());
    }
    
    // optional int64 nValue = 3;
    if (has_nValue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nValue());
    }
    
    // optional float fValue = 4;
    if (has_fValue()) {
      total_size += 1 + 4;
    }
    
    // optional string sValue = 5;
    if (has_sValue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sValue());
    }
    
    // optional int32 res = 6;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMOrder::MergeFrom(const NetProto_GMOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_nValue()) {
      set_nValue(from.nValue());
    }
    if (from.has_fValue()) {
      set_fValue(from.fValue());
    }
    if (from.has_sValue()) {
      set_sValue(from.sValue());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMOrder::CopyFrom(const NetProto_GMOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMOrder::IsInitialized() const {
  
  return true;
}

void NetProto_GMOrder::Swap(NetProto_GMOrder* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(target_, other->target_);
    std::swap(nValue_, other->nValue_);
    std::swap(fValue_, other->fValue_);
    std::swap(sValue_, other->sValue_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMOrder_descriptor_;
  metadata.reflection = NetProto_GMOrder_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMOnlinePlayers_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMOnlinePlayers_ID_descriptor_;
}
bool NetProto_GMOnlinePlayers_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMOnlinePlayers_ID NetProto_GMOnlinePlayers::GROUPID;
const NetProto_GMOnlinePlayers_ID NetProto_GMOnlinePlayers::UNITID;
const NetProto_GMOnlinePlayers_ID NetProto_GMOnlinePlayers::ID_MIN;
const NetProto_GMOnlinePlayers_ID NetProto_GMOnlinePlayers::ID_MAX;
const int NetProto_GMOnlinePlayers::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMOnlinePlayers::kNameFieldNumber;
const int NetProto_GMOnlinePlayers::kRoleIDFieldNumber;
#endif  // !_MSC_VER

NetProto_GMOnlinePlayers::NetProto_GMOnlinePlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMOnlinePlayers::InitAsDefaultInstance() {
}

NetProto_GMOnlinePlayers::NetProto_GMOnlinePlayers(const NetProto_GMOnlinePlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMOnlinePlayers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMOnlinePlayers::~NetProto_GMOnlinePlayers() {
  SharedDtor();
}

void NetProto_GMOnlinePlayers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMOnlinePlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMOnlinePlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMOnlinePlayers_descriptor_;
}

const NetProto_GMOnlinePlayers& NetProto_GMOnlinePlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMOnlinePlayers* NetProto_GMOnlinePlayers::default_instance_ = NULL;

NetProto_GMOnlinePlayers* NetProto_GMOnlinePlayers::New() const {
  return new NetProto_GMOnlinePlayers;
}

void NetProto_GMOnlinePlayers::Clear() {
  name_.Clear();
  roleID_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMOnlinePlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(0).data(), this->name(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }
      
      // repeated int64 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_roleID())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_roleID())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMOnlinePlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }
  
  // repeated int64 roleID = 2;
  for (int i = 0; i < this->roleID_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->roleID(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMOnlinePlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }
  
  // repeated int64 roleID = 2;
  for (int i = 0; i < this->roleID_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->roleID(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMOnlinePlayers::ByteSize() const {
  int total_size = 0;
  
  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }
  
  // repeated int64 roleID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleID_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->roleID(i));
    }
    total_size += 1 * this->roleID_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMOnlinePlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMOnlinePlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMOnlinePlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMOnlinePlayers::MergeFrom(const NetProto_GMOnlinePlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  roleID_.MergeFrom(from.roleID_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMOnlinePlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMOnlinePlayers::CopyFrom(const NetProto_GMOnlinePlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMOnlinePlayers::IsInitialized() const {
  
  return true;
}

void NetProto_GMOnlinePlayers::Swap(NetProto_GMOnlinePlayers* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    roleID_.Swap(&other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMOnlinePlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMOnlinePlayers_descriptor_;
  metadata.reflection = NetProto_GMOnlinePlayers_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMChat_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMChat_ID_descriptor_;
}
bool NetProto_GMChat_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMChat_ID NetProto_GMChat::GROUPID;
const NetProto_GMChat_ID NetProto_GMChat::UNITID;
const NetProto_GMChat_ID NetProto_GMChat::ID_MIN;
const NetProto_GMChat_ID NetProto_GMChat::ID_MAX;
const int NetProto_GMChat::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMChat::kChannelFieldNumber;
const int NetProto_GMChat::kContentFieldNumber;
const int NetProto_GMChat::kSenderFieldNumber;
const int NetProto_GMChat::kRecverFieldNumber;
const int NetProto_GMChat::kTimeFieldNumber;
#endif  // !_MSC_VER

NetProto_GMChat::NetProto_GMChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMChat::InitAsDefaultInstance() {
  sender_ = const_cast< ::PB_FriendInfo*>(&::PB_FriendInfo::default_instance());
  recver_ = const_cast< ::PB_FriendInfo*>(&::PB_FriendInfo::default_instance());
}

NetProto_GMChat::NetProto_GMChat(const NetProto_GMChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMChat::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_ = NULL;
  recver_ = NULL;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMChat::~NetProto_GMChat() {
  SharedDtor();
}

void NetProto_GMChat::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete sender_;
    delete recver_;
  }
}

void NetProto_GMChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMChat_descriptor_;
}

const NetProto_GMChat& NetProto_GMChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMChat* NetProto_GMChat::default_instance_ = NULL;

NetProto_GMChat* NetProto_GMChat::New() const {
  return new NetProto_GMChat;
}

void NetProto_GMChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != NULL) sender_->::PB_FriendInfo::Clear();
    }
    if (has_recver()) {
      if (recver_ != NULL) recver_->::PB_FriendInfo::Clear();
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Chat.Channel channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Chat_Channel_IsValid(value)) {
            set_channel(static_cast< ::NetProto_Chat_Channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }
      
      // optional .PB_FriendInfo sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recver;
        break;
      }
      
      // optional .PB_FriendInfo recver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Chat.Channel channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  // optional .PB_FriendInfo sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sender(), output);
  }
  
  // optional .PB_FriendInfo recver = 4;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recver(), output);
  }
  
  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Chat.Channel channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  // optional .PB_FriendInfo sender = 3;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sender(), target);
  }
  
  // optional .PB_FriendInfo recver = 4;
  if (has_recver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recver(), target);
  }
  
  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Chat.Channel channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }
    
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional .PB_FriendInfo sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // optional .PB_FriendInfo recver = 4;
    if (has_recver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recver());
    }
    
    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMChat::MergeFrom(const NetProto_GMChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sender()) {
      mutable_sender()->::PB_FriendInfo::MergeFrom(from.sender());
    }
    if (from.has_recver()) {
      mutable_recver()->::PB_FriendInfo::MergeFrom(from.recver());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMChat::CopyFrom(const NetProto_GMChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMChat::IsInitialized() const {
  
  return true;
}

void NetProto_GMChat::Swap(NetProto_GMChat* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(content_, other->content_);
    std::swap(sender_, other->sender_);
    std::swap(recver_, other->recver_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMChat_descriptor_;
  metadata.reflection = NetProto_GMChat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMServerMgr_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMServerMgr_ID_descriptor_;
}
bool NetProto_GMServerMgr_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMServerMgr_ID NetProto_GMServerMgr::GROUPID;
const NetProto_GMServerMgr_ID NetProto_GMServerMgr::UNITID;
const NetProto_GMServerMgr_ID NetProto_GMServerMgr::ID_MIN;
const NetProto_GMServerMgr_ID NetProto_GMServerMgr::ID_MAX;
const int NetProto_GMServerMgr::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMServerMgr::kTimeFieldNumber;
const int NetProto_GMServerMgr::kNumFieldNumber;
#endif  // !_MSC_VER

NetProto_GMServerMgr::NetProto_GMServerMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMServerMgr::InitAsDefaultInstance() {
}

NetProto_GMServerMgr::NetProto_GMServerMgr(const NetProto_GMServerMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMServerMgr::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMServerMgr::~NetProto_GMServerMgr() {
  SharedDtor();
}

void NetProto_GMServerMgr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMServerMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMServerMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMServerMgr_descriptor_;
}

const NetProto_GMServerMgr& NetProto_GMServerMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMServerMgr* NetProto_GMServerMgr::default_instance_ = NULL;

NetProto_GMServerMgr* NetProto_GMServerMgr::New() const {
  return new NetProto_GMServerMgr;
}

void NetProto_GMServerMgr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMServerMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMServerMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMServerMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMServerMgr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMServerMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMServerMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMServerMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMServerMgr::MergeFrom(const NetProto_GMServerMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMServerMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMServerMgr::CopyFrom(const NetProto_GMServerMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMServerMgr::IsInitialized() const {
  
  return true;
}

void NetProto_GMServerMgr::Swap(NetProto_GMServerMgr* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMServerMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMServerMgr_descriptor_;
  metadata.reflection = NetProto_GMServerMgr_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMPlayerQuery_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMPlayerQuery_ID_descriptor_;
}
bool NetProto_GMPlayerQuery_ID_IsValid(int value) {
  switch(value) {
    case 6:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMPlayerQuery_ID NetProto_GMPlayerQuery::GROUPID;
const NetProto_GMPlayerQuery_ID NetProto_GMPlayerQuery::UNITID;
const NetProto_GMPlayerQuery_ID NetProto_GMPlayerQuery::ID_MIN;
const NetProto_GMPlayerQuery_ID NetProto_GMPlayerQuery::ID_MAX;
const int NetProto_GMPlayerQuery::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMPlayerQuery::kAttFieldNumber;
const int NetProto_GMPlayerQuery::kOnlineFieldNumber;
#endif  // !_MSC_VER

NetProto_GMPlayerQuery::NetProto_GMPlayerQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMPlayerQuery::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

NetProto_GMPlayerQuery::NetProto_GMPlayerQuery(const NetProto_GMPlayerQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMPlayerQuery::SharedCtor() {
  _cached_size_ = 0;
  att_ = NULL;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMPlayerQuery::~NetProto_GMPlayerQuery() {
  SharedDtor();
}

void NetProto_GMPlayerQuery::SharedDtor() {
  if (this != default_instance_) {
    delete att_;
  }
}

void NetProto_GMPlayerQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMPlayerQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMPlayerQuery_descriptor_;
}

const NetProto_GMPlayerQuery& NetProto_GMPlayerQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMPlayerQuery* NetProto_GMPlayerQuery::default_instance_ = NULL;

NetProto_GMPlayerQuery* NetProto_GMPlayerQuery::New() const {
  return new NetProto_GMPlayerQuery;
}

void NetProto_GMPlayerQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_att()) {
      if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
    }
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMPlayerQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_PlayerAtt att = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }
      
      // optional bool online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMPlayerQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_PlayerAtt att = 1;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->att(), output);
  }
  
  // optional bool online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->online(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMPlayerQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_PlayerAtt att = 1;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->att(), target);
  }
  
  // optional bool online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->online(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMPlayerQuery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_PlayerAtt att = 1;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional bool online = 2;
    if (has_online()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMPlayerQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMPlayerQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMPlayerQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMPlayerQuery::MergeFrom(const NetProto_GMPlayerQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_att()) {
      mutable_att()->::PB_PlayerAtt::MergeFrom(from.att());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMPlayerQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMPlayerQuery::CopyFrom(const NetProto_GMPlayerQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMPlayerQuery::IsInitialized() const {
  
  return true;
}

void NetProto_GMPlayerQuery::Swap(NetProto_GMPlayerQuery* other) {
  if (other != this) {
    std::swap(att_, other->att_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMPlayerQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMPlayerQuery_descriptor_;
  metadata.reflection = NetProto_GMPlayerQuery_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMForbid_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMForbid_ID_descriptor_;
}
bool NetProto_GMForbid_ID_IsValid(int value) {
  switch(value) {
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMForbid_ID NetProto_GMForbid::GROUPID;
const NetProto_GMForbid_ID NetProto_GMForbid::UNITID;
const NetProto_GMForbid_ID NetProto_GMForbid::ID_MIN;
const NetProto_GMForbid_ID NetProto_GMForbid::ID_MAX;
const int NetProto_GMForbid::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_GMForbid_Select_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMForbid_Select_descriptor_;
}
bool NetProto_GMForbid_Select_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMForbid_Select NetProto_GMForbid::NOTALKING;
const NetProto_GMForbid_Select NetProto_GMForbid::FREEZE;
const NetProto_GMForbid_Select NetProto_GMForbid::Select_MIN;
const NetProto_GMForbid_Select NetProto_GMForbid::Select_MAX;
const int NetProto_GMForbid::Select_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMForbid::kSelectFieldNumber;
const int NetProto_GMForbid::kFlagFieldNumber;
const int NetProto_GMForbid::kStartTimeFieldNumber;
const int NetProto_GMForbid::kEndTimeFieldNumber;
const int NetProto_GMForbid::kRoleIDFieldNumber;
const int NetProto_GMForbid::kGMFieldNumber;
const int NetProto_GMForbid::kNameFieldNumber;
const int NetProto_GMForbid::kLevelFieldNumber;
const int NetProto_GMForbid::kProfessionTypeFieldNumber;
const int NetProto_GMForbid::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_GMForbid::NetProto_GMForbid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMForbid::InitAsDefaultInstance() {
}

NetProto_GMForbid::NetProto_GMForbid(const NetProto_GMForbid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMForbid::SharedCtor() {
  _cached_size_ = 0;
  select_ = 1;
  flag_ = false;
  startTime_ = 0;
  endTime_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  GM_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  professionType_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMForbid::~NetProto_GMForbid() {
  SharedDtor();
}

void NetProto_GMForbid::SharedDtor() {
  if (GM_ != &::google::protobuf::internal::kEmptyString) {
    delete GM_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_GMForbid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMForbid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMForbid_descriptor_;
}

const NetProto_GMForbid& NetProto_GMForbid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMForbid* NetProto_GMForbid::default_instance_ = NULL;

NetProto_GMForbid* NetProto_GMForbid::New() const {
  return new NetProto_GMForbid;
}

void NetProto_GMForbid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    select_ = 1;
    flag_ = false;
    startTime_ = 0;
    endTime_ = 0;
    roleID_ = GOOGLE_LONGLONG(0);
    if (has_GM()) {
      if (GM_ != &::google::protobuf::internal::kEmptyString) {
        GM_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    professionType_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMForbid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GMForbid.Select select = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_GMForbid_Select_IsValid(value)) {
            set_select(static_cast< ::NetProto_GMForbid_Select >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }
      
      // optional int32 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startTime_)));
          set_has_startTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endTime_)));
          set_has_endTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_GM;
        break;
      }
      
      // optional string GM = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_GM()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->GM().data(), this->GM().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }
      
      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }
      
      // optional int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_professionType;
        break;
      }
      
      // optional .PB_ProfessionInfo.Type professionType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_professionType(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_id;
        break;
      }
      
      // optional int32 id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMForbid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GMForbid.Select select = 1;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->select(), output);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }
  
  // optional int32 startTime = 3;
  if (has_startTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startTime(), output);
  }
  
  // optional int32 endTime = 4;
  if (has_endTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endTime(), output);
  }
  
  // optional int64 roleID = 5;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->roleID(), output);
  }
  
  // optional string GM = 6;
  if (has_GM()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->GM().data(), this->GM().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->GM(), output);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }
  
  // optional .PB_ProfessionInfo.Type professionType = 9;
  if (has_professionType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->professionType(), output);
  }
  
  // optional int32 id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMForbid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GMForbid.Select select = 1;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->select(), target);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }
  
  // optional int32 startTime = 3;
  if (has_startTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startTime(), target);
  }
  
  // optional int32 endTime = 4;
  if (has_endTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endTime(), target);
  }
  
  // optional int64 roleID = 5;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->roleID(), target);
  }
  
  // optional string GM = 6;
  if (has_GM()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->GM().data(), this->GM().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->GM(), target);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }
  
  // optional int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }
  
  // optional .PB_ProfessionInfo.Type professionType = 9;
  if (has_professionType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->professionType(), target);
  }
  
  // optional int32 id = 10;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMForbid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GMForbid.Select select = 1;
    if (has_select()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->select());
    }
    
    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
    // optional int32 startTime = 3;
    if (has_startTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startTime());
    }
    
    // optional int32 endTime = 4;
    if (has_endTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endTime());
    }
    
    // optional int64 roleID = 5;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional string GM = 6;
    if (has_GM()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->GM());
    }
    
    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PB_ProfessionInfo.Type professionType = 9;
    if (has_professionType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->professionType());
    }
    
    // optional int32 id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMForbid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMForbid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMForbid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMForbid::MergeFrom(const NetProto_GMForbid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_select()) {
      set_select(from.select());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_startTime()) {
      set_startTime(from.startTime());
    }
    if (from.has_endTime()) {
      set_endTime(from.endTime());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_GM()) {
      set_GM(from.GM());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_professionType()) {
      set_professionType(from.professionType());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMForbid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMForbid::CopyFrom(const NetProto_GMForbid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMForbid::IsInitialized() const {
  
  return true;
}

void NetProto_GMForbid::Swap(NetProto_GMForbid* other) {
  if (other != this) {
    std::swap(select_, other->select_);
    std::swap(flag_, other->flag_);
    std::swap(startTime_, other->startTime_);
    std::swap(endTime_, other->endTime_);
    std::swap(roleID_, other->roleID_);
    std::swap(GM_, other->GM_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(professionType_, other->professionType_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMForbid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMForbid_descriptor_;
  metadata.reflection = NetProto_GMForbid_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMNotice_GMOP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMNotice_GMOP_descriptor_;
}
bool NetProto_GMNotice_GMOP_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMNotice_GMOP NetProto_GMNotice::ADD;
const NetProto_GMNotice_GMOP NetProto_GMNotice::DEL;
const NetProto_GMNotice_GMOP NetProto_GMNotice::ALTER;
const NetProto_GMNotice_GMOP NetProto_GMNotice::GMOP_MIN;
const NetProto_GMNotice_GMOP NetProto_GMNotice::GMOP_MAX;
const int NetProto_GMNotice::GMOP_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMNotice::kIdFieldNumber;
const int NetProto_GMNotice::kStartTimeFieldNumber;
const int NetProto_GMNotice::kEndTimeFieldNumber;
const int NetProto_GMNotice::kHzFieldNumber;
const int NetProto_GMNotice::kContentFieldNumber;
const int NetProto_GMNotice::kState1FieldNumber;
const int NetProto_GMNotice::kState2FieldNumber;
const int NetProto_GMNotice::kOpFieldNumber;
#endif  // !_MSC_VER

NetProto_GMNotice::NetProto_GMNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMNotice::InitAsDefaultInstance() {
}

NetProto_GMNotice::NetProto_GMNotice(const NetProto_GMNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMNotice::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  startTime_ = 0;
  endTime_ = 0;
  hz_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state1_ = false;
  state2_ = false;
  op_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMNotice::~NetProto_GMNotice() {
  SharedDtor();
}

void NetProto_GMNotice::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_GMNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMNotice_descriptor_;
}

const NetProto_GMNotice& NetProto_GMNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMNotice* NetProto_GMNotice::default_instance_ = NULL;

NetProto_GMNotice* NetProto_GMNotice::New() const {
  return new NetProto_GMNotice;
}

void NetProto_GMNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    startTime_ = 0;
    endTime_ = 0;
    hz_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    state1_ = false;
    state2_ = false;
    op_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startTime;
        break;
      }
      
      // optional int32 startTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startTime_)));
          set_has_startTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endTime_)));
          set_has_endTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hz;
        break;
      }
      
      // optional int32 hz = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hz_)));
          set_has_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }
      
      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state1;
        break;
      }
      
      // optional bool state1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state1_)));
          set_has_state1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_state2;
        break;
      }
      
      // optional bool state2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state2_)));
          set_has_state2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_op;
        break;
      }
      
      // optional .NetProto_GMNotice.GMOP op = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_GMNotice_GMOP_IsValid(value)) {
            set_op(static_cast< ::NetProto_GMNotice_GMOP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 startTime = 2;
  if (has_startTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startTime(), output);
  }
  
  // optional int32 endTime = 3;
  if (has_endTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endTime(), output);
  }
  
  // optional int32 hz = 4;
  if (has_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hz(), output);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }
  
  // optional bool state1 = 6;
  if (has_state1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->state1(), output);
  }
  
  // optional bool state2 = 7;
  if (has_state2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->state2(), output);
  }
  
  // optional .NetProto_GMNotice.GMOP op = 8;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->op(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 startTime = 2;
  if (has_startTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startTime(), target);
  }
  
  // optional int32 endTime = 3;
  if (has_endTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endTime(), target);
  }
  
  // optional int32 hz = 4;
  if (has_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hz(), target);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }
  
  // optional bool state1 = 6;
  if (has_state1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->state1(), target);
  }
  
  // optional bool state2 = 7;
  if (has_state2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->state2(), target);
  }
  
  // optional .NetProto_GMNotice.GMOP op = 8;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->op(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 startTime = 2;
    if (has_startTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startTime());
    }
    
    // optional int32 endTime = 3;
    if (has_endTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endTime());
    }
    
    // optional int32 hz = 4;
    if (has_hz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hz());
    }
    
    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional bool state1 = 6;
    if (has_state1()) {
      total_size += 1 + 1;
    }
    
    // optional bool state2 = 7;
    if (has_state2()) {
      total_size += 1 + 1;
    }
    
    // optional .NetProto_GMNotice.GMOP op = 8;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMNotice::MergeFrom(const NetProto_GMNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_startTime()) {
      set_startTime(from.startTime());
    }
    if (from.has_endTime()) {
      set_endTime(from.endTime());
    }
    if (from.has_hz()) {
      set_hz(from.hz());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_state1()) {
      set_state1(from.state1());
    }
    if (from.has_state2()) {
      set_state2(from.state2());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMNotice::CopyFrom(const NetProto_GMNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMNotice::IsInitialized() const {
  
  return true;
}

void NetProto_GMNotice::Swap(NetProto_GMNotice* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(startTime_, other->startTime_);
    std::swap(endTime_, other->endTime_);
    std::swap(hz_, other->hz_);
    std::swap(content_, other->content_);
    std::swap(state1_, other->state1_);
    std::swap(state2_, other->state2_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMNotice_descriptor_;
  metadata.reflection = NetProto_GMNotice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMRequest_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRequest_ID_descriptor_;
}
bool NetProto_GMRequest_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMRequest_ID NetProto_GMRequest::GROUPID;
const NetProto_GMRequest_ID NetProto_GMRequest::UNITID;
const NetProto_GMRequest_ID NetProto_GMRequest::ID_MIN;
const NetProto_GMRequest_ID NetProto_GMRequest::ID_MAX;
const int NetProto_GMRequest::ID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetProto_GMRequest_Select_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRequest_Select_descriptor_;
}
bool NetProto_GMRequest_Select_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMRequest_Select NetProto_GMRequest::ALL;
const NetProto_GMRequest_Select NetProto_GMRequest::NOTALKING;
const NetProto_GMRequest_Select NetProto_GMRequest::FREEZE;
const NetProto_GMRequest_Select NetProto_GMRequest::Select_MIN;
const NetProto_GMRequest_Select NetProto_GMRequest::Select_MAX;
const int NetProto_GMRequest::Select_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMRequest::kSelectFieldNumber;
const int NetProto_GMRequest::kForbidFieldNumber;
#endif  // !_MSC_VER

NetProto_GMRequest::NetProto_GMRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMRequest::InitAsDefaultInstance() {
}

NetProto_GMRequest::NetProto_GMRequest(const NetProto_GMRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMRequest::SharedCtor() {
  _cached_size_ = 0;
  select_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMRequest::~NetProto_GMRequest() {
  SharedDtor();
}

void NetProto_GMRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRequest_descriptor_;
}

const NetProto_GMRequest& NetProto_GMRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMRequest* NetProto_GMRequest::default_instance_ = NULL;

NetProto_GMRequest* NetProto_GMRequest::New() const {
  return new NetProto_GMRequest;
}

void NetProto_GMRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    select_ = 1;
  }
  forbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_GMRequest.Select select = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_GMRequest_Select_IsValid(value)) {
            set_select(static_cast< ::NetProto_GMRequest_Select >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_forbid;
        break;
      }
      
      // repeated .NetProto_GMForbid forbid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forbid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_forbid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_GMRequest.Select select = 1;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->select(), output);
  }
  
  // repeated .NetProto_GMForbid forbid = 2;
  for (int i = 0; i < this->forbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forbid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_GMRequest.Select select = 1;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->select(), target);
  }
  
  // repeated .NetProto_GMForbid forbid = 2;
  for (int i = 0; i < this->forbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forbid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_GMRequest.Select select = 1;
    if (has_select()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->select());
    }
    
  }
  // repeated .NetProto_GMForbid forbid = 2;
  total_size += 1 * this->forbid_size();
  for (int i = 0; i < this->forbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forbid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMRequest::MergeFrom(const NetProto_GMRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  forbid_.MergeFrom(from.forbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_select()) {
      set_select(from.select());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMRequest::CopyFrom(const NetProto_GMRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMRequest::IsInitialized() const {
  
  return true;
}

void NetProto_GMRequest::Swap(NetProto_GMRequest* other) {
  if (other != this) {
    std::swap(select_, other->select_);
    forbid_.Swap(&other->forbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMRequest_descriptor_;
  metadata.reflection = NetProto_GMRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMShutDownServer_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMShutDownServer_ID_descriptor_;
}
bool NetProto_GMShutDownServer_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMShutDownServer_ID NetProto_GMShutDownServer::GROUPID;
const NetProto_GMShutDownServer_ID NetProto_GMShutDownServer::UNITID;
const NetProto_GMShutDownServer_ID NetProto_GMShutDownServer::ID_MIN;
const NetProto_GMShutDownServer_ID NetProto_GMShutDownServer::ID_MAX;
const int NetProto_GMShutDownServer::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_GMShutDownServer::NetProto_GMShutDownServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMShutDownServer::InitAsDefaultInstance() {
}

NetProto_GMShutDownServer::NetProto_GMShutDownServer(const NetProto_GMShutDownServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMShutDownServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMShutDownServer::~NetProto_GMShutDownServer() {
  SharedDtor();
}

void NetProto_GMShutDownServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMShutDownServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMShutDownServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMShutDownServer_descriptor_;
}

const NetProto_GMShutDownServer& NetProto_GMShutDownServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMShutDownServer* NetProto_GMShutDownServer::default_instance_ = NULL;

NetProto_GMShutDownServer* NetProto_GMShutDownServer::New() const {
  return new NetProto_GMShutDownServer;
}

void NetProto_GMShutDownServer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMShutDownServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_GMShutDownServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMShutDownServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMShutDownServer::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMShutDownServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMShutDownServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMShutDownServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMShutDownServer::MergeFrom(const NetProto_GMShutDownServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMShutDownServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMShutDownServer::CopyFrom(const NetProto_GMShutDownServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMShutDownServer::IsInitialized() const {
  
  return true;
}

void NetProto_GMShutDownServer::Swap(NetProto_GMShutDownServer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMShutDownServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMShutDownServer_descriptor_;
  metadata.reflection = NetProto_GMShutDownServer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMChatRecords_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMChatRecords_ID_descriptor_;
}
bool NetProto_GMChatRecords_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMChatRecords_ID NetProto_GMChatRecords::GROUPID;
const NetProto_GMChatRecords_ID NetProto_GMChatRecords::UNITID;
const NetProto_GMChatRecords_ID NetProto_GMChatRecords::ID_MIN;
const NetProto_GMChatRecords_ID NetProto_GMChatRecords::ID_MAX;
const int NetProto_GMChatRecords::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMChatRecords::kStartTimeFieldNumber;
const int NetProto_GMChatRecords::kEndTimeFieldNumber;
const int NetProto_GMChatRecords::kChatFieldNumber;
#endif  // !_MSC_VER

NetProto_GMChatRecords::NetProto_GMChatRecords()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMChatRecords::InitAsDefaultInstance() {
}

NetProto_GMChatRecords::NetProto_GMChatRecords(const NetProto_GMChatRecords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMChatRecords::SharedCtor() {
  _cached_size_ = 0;
  startTime_ = 0;
  endTime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMChatRecords::~NetProto_GMChatRecords() {
  SharedDtor();
}

void NetProto_GMChatRecords::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMChatRecords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMChatRecords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMChatRecords_descriptor_;
}

const NetProto_GMChatRecords& NetProto_GMChatRecords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMChatRecords* NetProto_GMChatRecords::default_instance_ = NULL;

NetProto_GMChatRecords* NetProto_GMChatRecords::New() const {
  return new NetProto_GMChatRecords;
}

void NetProto_GMChatRecords::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startTime_ = 0;
    endTime_ = 0;
  }
  chat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMChatRecords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startTime_)));
          set_has_startTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endTime_)));
          set_has_endTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat;
        break;
      }
      
      // repeated .NetProto_GMChat chat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMChatRecords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 startTime = 1;
  if (has_startTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startTime(), output);
  }
  
  // optional int32 endTime = 2;
  if (has_endTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endTime(), output);
  }
  
  // repeated .NetProto_GMChat chat = 3;
  for (int i = 0; i < this->chat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chat(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMChatRecords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 startTime = 1;
  if (has_startTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startTime(), target);
  }
  
  // optional int32 endTime = 2;
  if (has_endTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endTime(), target);
  }
  
  // repeated .NetProto_GMChat chat = 3;
  for (int i = 0; i < this->chat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chat(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMChatRecords::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 startTime = 1;
    if (has_startTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startTime());
    }
    
    // optional int32 endTime = 2;
    if (has_endTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endTime());
    }
    
  }
  // repeated .NetProto_GMChat chat = 3;
  total_size += 1 * this->chat_size();
  for (int i = 0; i < this->chat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMChatRecords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMChatRecords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMChatRecords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMChatRecords::MergeFrom(const NetProto_GMChatRecords& from) {
  GOOGLE_CHECK_NE(&from, this);
  chat_.MergeFrom(from.chat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startTime()) {
      set_startTime(from.startTime());
    }
    if (from.has_endTime()) {
      set_endTime(from.endTime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMChatRecords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMChatRecords::CopyFrom(const NetProto_GMChatRecords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMChatRecords::IsInitialized() const {
  
  return true;
}

void NetProto_GMChatRecords::Swap(NetProto_GMChatRecords* other) {
  if (other != this) {
    std::swap(startTime_, other->startTime_);
    std::swap(endTime_, other->endTime_);
    chat_.Swap(&other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMChatRecords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMChatRecords_descriptor_;
  metadata.reflection = NetProto_GMChatRecords_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMRegistrCount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRegistrCount_ID_descriptor_;
}
bool NetProto_GMRegistrCount_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMRegistrCount_ID NetProto_GMRegistrCount::GROUPID;
const NetProto_GMRegistrCount_ID NetProto_GMRegistrCount::UNITID;
const NetProto_GMRegistrCount_ID NetProto_GMRegistrCount::ID_MIN;
const NetProto_GMRegistrCount_ID NetProto_GMRegistrCount::ID_MAX;
const int NetProto_GMRegistrCount::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMRegistrCount::kStartTimeFieldNumber;
const int NetProto_GMRegistrCount::kEndTimeFieldNumber;
const int NetProto_GMRegistrCount::kDeviceIDFieldNumber;
const int NetProto_GMRegistrCount::kAllDeviceIDFieldNumber;
const int NetProto_GMRegistrCount::kAccountIDFieldNumber;
const int NetProto_GMRegistrCount::kAllAccountIDFieldNumber;
const int NetProto_GMRegistrCount::kRoleIDFieldNumber;
const int NetProto_GMRegistrCount::kAllRoleIDFieldNumber;
#endif  // !_MSC_VER

NetProto_GMRegistrCount::NetProto_GMRegistrCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMRegistrCount::InitAsDefaultInstance() {
}

NetProto_GMRegistrCount::NetProto_GMRegistrCount(const NetProto_GMRegistrCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMRegistrCount::SharedCtor() {
  _cached_size_ = 0;
  startTime_ = 0;
  endTime_ = 0;
  deviceID_ = 0;
  allDeviceID_ = 0;
  accountID_ = 0;
  allAccountID_ = 0;
  roleID_ = 0;
  allRoleID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMRegistrCount::~NetProto_GMRegistrCount() {
  SharedDtor();
}

void NetProto_GMRegistrCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMRegistrCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMRegistrCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRegistrCount_descriptor_;
}

const NetProto_GMRegistrCount& NetProto_GMRegistrCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMRegistrCount* NetProto_GMRegistrCount::default_instance_ = NULL;

NetProto_GMRegistrCount* NetProto_GMRegistrCount::New() const {
  return new NetProto_GMRegistrCount;
}

void NetProto_GMRegistrCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startTime_ = 0;
    endTime_ = 0;
    deviceID_ = 0;
    allDeviceID_ = 0;
    accountID_ = 0;
    allAccountID_ = 0;
    roleID_ = 0;
    allRoleID_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMRegistrCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startTime_)));
          set_has_startTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endTime_)));
          set_has_endTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deviceID;
        break;
      }
      
      // optional int32 deviceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceID_)));
          set_has_deviceID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_allDeviceID;
        break;
      }
      
      // optional int32 allDeviceID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allDeviceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allDeviceID_)));
          set_has_allDeviceID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accountID;
        break;
      }
      
      // optional int32 accountID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountID_)));
          set_has_accountID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allAccountID;
        break;
      }
      
      // optional int32 allAccountID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allAccountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allAccountID_)));
          set_has_allAccountID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roleID;
        break;
      }
      
      // optional int32 roleID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_allRoleID;
        break;
      }
      
      // optional int32 allRoleID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allRoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allRoleID_)));
          set_has_allRoleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMRegistrCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 startTime = 1;
  if (has_startTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startTime(), output);
  }
  
  // optional int32 endTime = 2;
  if (has_endTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endTime(), output);
  }
  
  // optional int32 deviceID = 3;
  if (has_deviceID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deviceID(), output);
  }
  
  // optional int32 allDeviceID = 4;
  if (has_allDeviceID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->allDeviceID(), output);
  }
  
  // optional int32 accountID = 5;
  if (has_accountID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->accountID(), output);
  }
  
  // optional int32 allAccountID = 6;
  if (has_allAccountID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->allAccountID(), output);
  }
  
  // optional int32 roleID = 7;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roleID(), output);
  }
  
  // optional int32 allRoleID = 8;
  if (has_allRoleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->allRoleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMRegistrCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 startTime = 1;
  if (has_startTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startTime(), target);
  }
  
  // optional int32 endTime = 2;
  if (has_endTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endTime(), target);
  }
  
  // optional int32 deviceID = 3;
  if (has_deviceID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deviceID(), target);
  }
  
  // optional int32 allDeviceID = 4;
  if (has_allDeviceID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->allDeviceID(), target);
  }
  
  // optional int32 accountID = 5;
  if (has_accountID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->accountID(), target);
  }
  
  // optional int32 allAccountID = 6;
  if (has_allAccountID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->allAccountID(), target);
  }
  
  // optional int32 roleID = 7;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roleID(), target);
  }
  
  // optional int32 allRoleID = 8;
  if (has_allRoleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->allRoleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMRegistrCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 startTime = 1;
    if (has_startTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startTime());
    }
    
    // optional int32 endTime = 2;
    if (has_endTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endTime());
    }
    
    // optional int32 deviceID = 3;
    if (has_deviceID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deviceID());
    }
    
    // optional int32 allDeviceID = 4;
    if (has_allDeviceID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allDeviceID());
    }
    
    // optional int32 accountID = 5;
    if (has_accountID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountID());
    }
    
    // optional int32 allAccountID = 6;
    if (has_allAccountID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allAccountID());
    }
    
    // optional int32 roleID = 7;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleID());
    }
    
    // optional int32 allRoleID = 8;
    if (has_allRoleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allRoleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMRegistrCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMRegistrCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMRegistrCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMRegistrCount::MergeFrom(const NetProto_GMRegistrCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startTime()) {
      set_startTime(from.startTime());
    }
    if (from.has_endTime()) {
      set_endTime(from.endTime());
    }
    if (from.has_deviceID()) {
      set_deviceID(from.deviceID());
    }
    if (from.has_allDeviceID()) {
      set_allDeviceID(from.allDeviceID());
    }
    if (from.has_accountID()) {
      set_accountID(from.accountID());
    }
    if (from.has_allAccountID()) {
      set_allAccountID(from.allAccountID());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_allRoleID()) {
      set_allRoleID(from.allRoleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMRegistrCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMRegistrCount::CopyFrom(const NetProto_GMRegistrCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMRegistrCount::IsInitialized() const {
  
  return true;
}

void NetProto_GMRegistrCount::Swap(NetProto_GMRegistrCount* other) {
  if (other != this) {
    std::swap(startTime_, other->startTime_);
    std::swap(endTime_, other->endTime_);
    std::swap(deviceID_, other->deviceID_);
    std::swap(allDeviceID_, other->allDeviceID_);
    std::swap(accountID_, other->accountID_);
    std::swap(allAccountID_, other->allAccountID_);
    std::swap(roleID_, other->roleID_);
    std::swap(allRoleID_, other->allRoleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMRegistrCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMRegistrCount_descriptor_;
  metadata.reflection = NetProto_GMRegistrCount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMRoleCount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRoleCount_ID_descriptor_;
}
bool NetProto_GMRoleCount_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMRoleCount_ID NetProto_GMRoleCount::GROUPID;
const NetProto_GMRoleCount_ID NetProto_GMRoleCount::UNITID;
const NetProto_GMRoleCount_ID NetProto_GMRoleCount::ID_MIN;
const NetProto_GMRoleCount_ID NetProto_GMRoleCount::ID_MAX;
const int NetProto_GMRoleCount::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMRoleCount::kStartTimeFieldNumber;
const int NetProto_GMRoleCount::kEndTimeFieldNumber;
const int NetProto_GMRoleCount::kMaxCountFieldNumber;
const int NetProto_GMRoleCount::kMaxCountTimeFieldNumber;
const int NetProto_GMRoleCount::kMinCountFieldNumber;
const int NetProto_GMRoleCount::kMinCountTimeFieldNumber;
const int NetProto_GMRoleCount::kCountFieldNumber;
const int NetProto_GMRoleCount::kTimeFieldNumber;
const int NetProto_GMRoleCount::kIntervalFieldNumber;
#endif  // !_MSC_VER

NetProto_GMRoleCount::NetProto_GMRoleCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMRoleCount::InitAsDefaultInstance() {
}

NetProto_GMRoleCount::NetProto_GMRoleCount(const NetProto_GMRoleCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMRoleCount::SharedCtor() {
  _cached_size_ = 0;
  startTime_ = 0;
  endTime_ = 0;
  maxCount_ = 0;
  maxCountTime_ = 0;
  minCount_ = 0;
  minCountTime_ = 0;
  interval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMRoleCount::~NetProto_GMRoleCount() {
  SharedDtor();
}

void NetProto_GMRoleCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMRoleCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMRoleCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRoleCount_descriptor_;
}

const NetProto_GMRoleCount& NetProto_GMRoleCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMRoleCount* NetProto_GMRoleCount::default_instance_ = NULL;

NetProto_GMRoleCount* NetProto_GMRoleCount::New() const {
  return new NetProto_GMRoleCount;
}

void NetProto_GMRoleCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startTime_ = 0;
    endTime_ = 0;
    maxCount_ = 0;
    maxCountTime_ = 0;
    minCount_ = 0;
    minCountTime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    interval_ = 0;
  }
  count_.Clear();
  time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMRoleCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startTime_)));
          set_has_startTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endTime_)));
          set_has_endTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxCount;
        break;
      }
      
      // optional int32 maxCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxCount_)));
          set_has_maxCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxCountTime;
        break;
      }
      
      // optional int32 maxCountTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCountTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxCountTime_)));
          set_has_maxCountTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minCount;
        break;
      }
      
      // optional int32 minCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minCount_)));
          set_has_minCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minCountTime;
        break;
      }
      
      // optional int32 minCountTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minCountTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minCountTime_)));
          set_has_minCountTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }
      
      // repeated int32 count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count;
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }
      
      // repeated int32 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        if (input->ExpectTag(72)) goto parse_interval;
        break;
      }
      
      // optional int32 interval = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMRoleCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 startTime = 1;
  if (has_startTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startTime(), output);
  }
  
  // optional int32 endTime = 2;
  if (has_endTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endTime(), output);
  }
  
  // optional int32 maxCount = 3;
  if (has_maxCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxCount(), output);
  }
  
  // optional int32 maxCountTime = 4;
  if (has_maxCountTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxCountTime(), output);
  }
  
  // optional int32 minCount = 5;
  if (has_minCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minCount(), output);
  }
  
  // optional int32 minCountTime = 6;
  if (has_minCountTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minCountTime(), output);
  }
  
  // repeated int32 count = 7;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->count(i), output);
  }
  
  // repeated int32 time = 8;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->time(i), output);
  }
  
  // optional int32 interval = 9;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->interval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMRoleCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 startTime = 1;
  if (has_startTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startTime(), target);
  }
  
  // optional int32 endTime = 2;
  if (has_endTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endTime(), target);
  }
  
  // optional int32 maxCount = 3;
  if (has_maxCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxCount(), target);
  }
  
  // optional int32 maxCountTime = 4;
  if (has_maxCountTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxCountTime(), target);
  }
  
  // optional int32 minCount = 5;
  if (has_minCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minCount(), target);
  }
  
  // optional int32 minCountTime = 6;
  if (has_minCountTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minCountTime(), target);
  }
  
  // repeated int32 count = 7;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->count(i), target);
  }
  
  // repeated int32 time = 8;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->time(i), target);
  }
  
  // optional int32 interval = 9;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->interval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMRoleCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 startTime = 1;
    if (has_startTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startTime());
    }
    
    // optional int32 endTime = 2;
    if (has_endTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endTime());
    }
    
    // optional int32 maxCount = 3;
    if (has_maxCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxCount());
    }
    
    // optional int32 maxCountTime = 4;
    if (has_maxCountTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxCountTime());
    }
    
    // optional int32 minCount = 5;
    if (has_minCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minCount());
    }
    
    // optional int32 minCountTime = 6;
    if (has_minCountTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minCountTime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 interval = 9;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }
    
  }
  // repeated int32 count = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->count(i));
    }
    total_size += 1 * this->count_size() + data_size;
  }
  
  // repeated int32 time = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->time(i));
    }
    total_size += 1 * this->time_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMRoleCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMRoleCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMRoleCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMRoleCount::MergeFrom(const NetProto_GMRoleCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  count_.MergeFrom(from.count_);
  time_.MergeFrom(from.time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startTime()) {
      set_startTime(from.startTime());
    }
    if (from.has_endTime()) {
      set_endTime(from.endTime());
    }
    if (from.has_maxCount()) {
      set_maxCount(from.maxCount());
    }
    if (from.has_maxCountTime()) {
      set_maxCountTime(from.maxCountTime());
    }
    if (from.has_minCount()) {
      set_minCount(from.minCount());
    }
    if (from.has_minCountTime()) {
      set_minCountTime(from.minCountTime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMRoleCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMRoleCount::CopyFrom(const NetProto_GMRoleCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMRoleCount::IsInitialized() const {
  
  return true;
}

void NetProto_GMRoleCount::Swap(NetProto_GMRoleCount* other) {
  if (other != this) {
    std::swap(startTime_, other->startTime_);
    std::swap(endTime_, other->endTime_);
    std::swap(maxCount_, other->maxCount_);
    std::swap(maxCountTime_, other->maxCountTime_);
    std::swap(minCount_, other->minCount_);
    std::swap(minCountTime_, other->minCountTime_);
    count_.Swap(&other->count_);
    time_.Swap(&other->time_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMRoleCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMRoleCount_descriptor_;
  metadata.reflection = NetProto_GMRoleCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelStatistics::kLevelFieldNumber;
const int LevelStatistics::kCountFieldNumber;
#endif  // !_MSC_VER

LevelStatistics::LevelStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelStatistics::InitAsDefaultInstance() {
}

LevelStatistics::LevelStatistics(const LevelStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelStatistics::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelStatistics::~LevelStatistics() {
  SharedDtor();
}

void LevelStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelStatistics_descriptor_;
}

const LevelStatistics& LevelStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

LevelStatistics* LevelStatistics::default_instance_ = NULL;

LevelStatistics* LevelStatistics::New() const {
  return new LevelStatistics;
}

void LevelStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelStatistics::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelStatistics::MergeFrom(const LevelStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelStatistics::CopyFrom(const LevelStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelStatistics::IsInitialized() const {
  
  return true;
}

void LevelStatistics::Swap(LevelStatistics* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelStatistics_descriptor_;
  metadata.reflection = LevelStatistics_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMLevelStatistics_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMLevelStatistics_ID_descriptor_;
}
bool NetProto_GMLevelStatistics_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMLevelStatistics_ID NetProto_GMLevelStatistics::GROUPID;
const NetProto_GMLevelStatistics_ID NetProto_GMLevelStatistics::UNITID;
const NetProto_GMLevelStatistics_ID NetProto_GMLevelStatistics::ID_MIN;
const NetProto_GMLevelStatistics_ID NetProto_GMLevelStatistics::ID_MAX;
const int NetProto_GMLevelStatistics::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMLevelStatistics::kStartTimeFieldNumber;
const int NetProto_GMLevelStatistics::kEndTimeFieldNumber;
const int NetProto_GMLevelStatistics::kArrayFieldNumber;
#endif  // !_MSC_VER

NetProto_GMLevelStatistics::NetProto_GMLevelStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMLevelStatistics::InitAsDefaultInstance() {
}

NetProto_GMLevelStatistics::NetProto_GMLevelStatistics(const NetProto_GMLevelStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMLevelStatistics::SharedCtor() {
  _cached_size_ = 0;
  startTime_ = 0;
  endTime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMLevelStatistics::~NetProto_GMLevelStatistics() {
  SharedDtor();
}

void NetProto_GMLevelStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMLevelStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMLevelStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMLevelStatistics_descriptor_;
}

const NetProto_GMLevelStatistics& NetProto_GMLevelStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMLevelStatistics* NetProto_GMLevelStatistics::default_instance_ = NULL;

NetProto_GMLevelStatistics* NetProto_GMLevelStatistics::New() const {
  return new NetProto_GMLevelStatistics;
}

void NetProto_GMLevelStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startTime_ = 0;
    endTime_ = 0;
  }
  array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMLevelStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startTime_)));
          set_has_startTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endTime_)));
          set_has_endTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_array;
        break;
      }
      
      // repeated .LevelStatistics array = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_array;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMLevelStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 startTime = 1;
  if (has_startTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startTime(), output);
  }
  
  // optional int32 endTime = 2;
  if (has_endTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endTime(), output);
  }
  
  // repeated .LevelStatistics array = 3;
  for (int i = 0; i < this->array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->array(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMLevelStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 startTime = 1;
  if (has_startTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startTime(), target);
  }
  
  // optional int32 endTime = 2;
  if (has_endTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endTime(), target);
  }
  
  // repeated .LevelStatistics array = 3;
  for (int i = 0; i < this->array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->array(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMLevelStatistics::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 startTime = 1;
    if (has_startTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startTime());
    }
    
    // optional int32 endTime = 2;
    if (has_endTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endTime());
    }
    
  }
  // repeated .LevelStatistics array = 3;
  total_size += 1 * this->array_size();
  for (int i = 0; i < this->array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->array(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMLevelStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMLevelStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMLevelStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMLevelStatistics::MergeFrom(const NetProto_GMLevelStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  array_.MergeFrom(from.array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startTime()) {
      set_startTime(from.startTime());
    }
    if (from.has_endTime()) {
      set_endTime(from.endTime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMLevelStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMLevelStatistics::CopyFrom(const NetProto_GMLevelStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMLevelStatistics::IsInitialized() const {
  
  return true;
}

void NetProto_GMLevelStatistics::Swap(NetProto_GMLevelStatistics* other) {
  if (other != this) {
    std::swap(startTime_, other->startTime_);
    std::swap(endTime_, other->endTime_);
    array_.Swap(&other->array_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMLevelStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMLevelStatistics_descriptor_;
  metadata.reflection = NetProto_GMLevelStatistics_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMRankStatistics_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRankStatistics_ID_descriptor_;
}
bool NetProto_GMRankStatistics_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMRankStatistics_ID NetProto_GMRankStatistics::GROUPID;
const NetProto_GMRankStatistics_ID NetProto_GMRankStatistics::UNITID;
const NetProto_GMRankStatistics_ID NetProto_GMRankStatistics::ID_MIN;
const NetProto_GMRankStatistics_ID NetProto_GMRankStatistics::ID_MAX;
const int NetProto_GMRankStatistics::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMRankStatistics::kTypeFieldNumber;
const int NetProto_GMRankStatistics::kCountFieldNumber;
const int NetProto_GMRankStatistics::kRankFieldNumber;
#endif  // !_MSC_VER

NetProto_GMRankStatistics::NetProto_GMRankStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMRankStatistics::InitAsDefaultInstance() {
}

NetProto_GMRankStatistics::NetProto_GMRankStatistics(const NetProto_GMRankStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMRankStatistics::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMRankStatistics::~NetProto_GMRankStatistics() {
  SharedDtor();
}

void NetProto_GMRankStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMRankStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMRankStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRankStatistics_descriptor_;
}

const NetProto_GMRankStatistics& NetProto_GMRankStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMRankStatistics* NetProto_GMRankStatistics::default_instance_ = NULL;

NetProto_GMRankStatistics* NetProto_GMRankStatistics::New() const {
  return new NetProto_GMRankStatistics;
}

void NetProto_GMRankStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    count_ = 0;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMRankStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_Rank.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_Rank_Type_IsValid(value)) {
            set_type(static_cast< ::NetProto_Rank_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank;
        break;
      }
      
      // repeated .RecordInfo rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMRankStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // repeated .RecordInfo rank = 3;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rank(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMRankStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_Rank.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // repeated .RecordInfo rank = 3;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rank(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMRankStatistics::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_Rank.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  // repeated .RecordInfo rank = 3;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMRankStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMRankStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMRankStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMRankStatistics::MergeFrom(const NetProto_GMRankStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMRankStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMRankStatistics::CopyFrom(const NetProto_GMRankStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMRankStatistics::IsInitialized() const {
  
  return true;
}

void NetProto_GMRankStatistics::Swap(NetProto_GMRankStatistics* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMRankStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMRankStatistics_descriptor_;
  metadata.reflection = NetProto_GMRankStatistics_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMOpenGuide_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMOpenGuide_ID_descriptor_;
}
bool NetProto_GMOpenGuide_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMOpenGuide_ID NetProto_GMOpenGuide::GROUPID;
const NetProto_GMOpenGuide_ID NetProto_GMOpenGuide::UNITID;
const NetProto_GMOpenGuide_ID NetProto_GMOpenGuide::ID_MIN;
const NetProto_GMOpenGuide_ID NetProto_GMOpenGuide::ID_MAX;
const int NetProto_GMOpenGuide::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMOpenGuide::kRoleIDFieldNumber;
const int NetProto_GMOpenGuide::kIdFieldNumber;
const int NetProto_GMOpenGuide::kOpenFieldNumber;
#endif  // !_MSC_VER

NetProto_GMOpenGuide::NetProto_GMOpenGuide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMOpenGuide::InitAsDefaultInstance() {
}

NetProto_GMOpenGuide::NetProto_GMOpenGuide(const NetProto_GMOpenGuide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMOpenGuide::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  id_ = 0;
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMOpenGuide::~NetProto_GMOpenGuide() {
  SharedDtor();
}

void NetProto_GMOpenGuide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMOpenGuide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMOpenGuide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMOpenGuide_descriptor_;
}

const NetProto_GMOpenGuide& NetProto_GMOpenGuide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMOpenGuide* NetProto_GMOpenGuide::default_instance_ = NULL;

NetProto_GMOpenGuide* NetProto_GMOpenGuide::New() const {
  return new NetProto_GMOpenGuide;
}

void NetProto_GMOpenGuide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    id_ = 0;
    open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMOpenGuide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }
      
      // optional bool open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMOpenGuide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional bool open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMOpenGuide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional bool open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMOpenGuide::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool open = 3;
    if (has_open()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMOpenGuide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMOpenGuide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMOpenGuide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMOpenGuide::MergeFrom(const NetProto_GMOpenGuide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMOpenGuide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMOpenGuide::CopyFrom(const NetProto_GMOpenGuide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMOpenGuide::IsInitialized() const {
  
  return true;
}

void NetProto_GMOpenGuide::Swap(NetProto_GMOpenGuide* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(id_, other->id_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMOpenGuide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMOpenGuide_descriptor_;
  metadata.reflection = NetProto_GMOpenGuide_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMNoticeMgr_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMNoticeMgr_ID_descriptor_;
}
bool NetProto_GMNoticeMgr_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMNoticeMgr_ID NetProto_GMNoticeMgr::GROUPID;
const NetProto_GMNoticeMgr_ID NetProto_GMNoticeMgr::UNITID;
const NetProto_GMNoticeMgr_ID NetProto_GMNoticeMgr::ID_MIN;
const NetProto_GMNoticeMgr_ID NetProto_GMNoticeMgr::ID_MAX;
const int NetProto_GMNoticeMgr::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMNoticeMgr::kNoticeFieldNumber;
const int NetProto_GMNoticeMgr::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_GMNoticeMgr::NetProto_GMNoticeMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMNoticeMgr::InitAsDefaultInstance() {
}

NetProto_GMNoticeMgr::NetProto_GMNoticeMgr(const NetProto_GMNoticeMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMNoticeMgr::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMNoticeMgr::~NetProto_GMNoticeMgr() {
  SharedDtor();
}

void NetProto_GMNoticeMgr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMNoticeMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMNoticeMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMNoticeMgr_descriptor_;
}

const NetProto_GMNoticeMgr& NetProto_GMNoticeMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMNoticeMgr* NetProto_GMNoticeMgr::default_instance_ = NULL;

NetProto_GMNoticeMgr* NetProto_GMNoticeMgr::New() const {
  return new NetProto_GMNoticeMgr;
}

void NetProto_GMNoticeMgr::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    flag_ = false;
  }
  notice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMNoticeMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto_GMNotice notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notice;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMNoticeMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NetProto_GMNotice notice = 1;
  for (int i = 0; i < this->notice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notice(i), output);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMNoticeMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NetProto_GMNotice notice = 1;
  for (int i = 0; i < this->notice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notice(i), target);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMNoticeMgr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .NetProto_GMNotice notice = 1;
  total_size += 1 * this->notice_size();
  for (int i = 0; i < this->notice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notice(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMNoticeMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMNoticeMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMNoticeMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMNoticeMgr::MergeFrom(const NetProto_GMNoticeMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  notice_.MergeFrom(from.notice_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMNoticeMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMNoticeMgr::CopyFrom(const NetProto_GMNoticeMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMNoticeMgr::IsInitialized() const {
  
  return true;
}

void NetProto_GMNoticeMgr::Swap(NetProto_GMNoticeMgr* other) {
  if (other != this) {
    notice_.Swap(&other->notice_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMNoticeMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMNoticeMgr_descriptor_;
  metadata.reflection = NetProto_GMNoticeMgr_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMRegister_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRegister_ID_descriptor_;
}
bool NetProto_GMRegister_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMRegister_ID NetProto_GMRegister::GROUPID;
const NetProto_GMRegister_ID NetProto_GMRegister::UNITID;
const NetProto_GMRegister_ID NetProto_GMRegister::ID_MIN;
const NetProto_GMRegister_ID NetProto_GMRegister::ID_MAX;
const int NetProto_GMRegister::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMRegister::kAccountFieldNumber;
const int NetProto_GMRegister::kPasswordFieldNumber;
const int NetProto_GMRegister::kPermissionFieldNumber;
#endif  // !_MSC_VER

NetProto_GMRegister::NetProto_GMRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMRegister::InitAsDefaultInstance() {
}

NetProto_GMRegister::NetProto_GMRegister(const NetProto_GMRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMRegister::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  permission_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMRegister::~NetProto_GMRegister() {
  SharedDtor();
}

void NetProto_GMRegister::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_GMRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMRegister_descriptor_;
}

const NetProto_GMRegister& NetProto_GMRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMRegister* NetProto_GMRegister::default_instance_ = NULL;

NetProto_GMRegister* NetProto_GMRegister::New() const {
  return new NetProto_GMRegister;
}

void NetProto_GMRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    permission_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_permission;
        break;
      }
      
      // optional .NetProto_GMLogin.OP permission = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permission:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProto_GMLogin_OP_IsValid(value)) {
            set_permission(static_cast< ::NetProto_GMLogin_OP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional .NetProto_GMLogin.OP permission = 3;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->permission(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional .NetProto_GMLogin.OP permission = 3;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->permission(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMRegister::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .NetProto_GMLogin.OP permission = 3;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->permission());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMRegister::MergeFrom(const NetProto_GMRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMRegister::CopyFrom(const NetProto_GMRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMRegister::IsInitialized() const {
  
  return true;
}

void NetProto_GMRegister::Swap(NetProto_GMRegister* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(permission_, other->permission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMRegister_descriptor_;
  metadata.reflection = NetProto_GMRegister_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMShutDownMessage_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMShutDownMessage_ID_descriptor_;
}
bool NetProto_GMShutDownMessage_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMShutDownMessage_ID NetProto_GMShutDownMessage::GROUPID;
const NetProto_GMShutDownMessage_ID NetProto_GMShutDownMessage::UNITID;
const NetProto_GMShutDownMessage_ID NetProto_GMShutDownMessage::ID_MIN;
const NetProto_GMShutDownMessage_ID NetProto_GMShutDownMessage::ID_MAX;
const int NetProto_GMShutDownMessage::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMShutDownMessage::kGroupIDFieldNumber;
const int NetProto_GMShutDownMessage::kUnitIDFieldNumber;
#endif  // !_MSC_VER

NetProto_GMShutDownMessage::NetProto_GMShutDownMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMShutDownMessage::InitAsDefaultInstance() {
}

NetProto_GMShutDownMessage::NetProto_GMShutDownMessage(const NetProto_GMShutDownMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMShutDownMessage::SharedCtor() {
  _cached_size_ = 0;
  groupID_ = 0;
  unitID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMShutDownMessage::~NetProto_GMShutDownMessage() {
  SharedDtor();
}

void NetProto_GMShutDownMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMShutDownMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMShutDownMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMShutDownMessage_descriptor_;
}

const NetProto_GMShutDownMessage& NetProto_GMShutDownMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMShutDownMessage* NetProto_GMShutDownMessage::default_instance_ = NULL;

NetProto_GMShutDownMessage* NetProto_GMShutDownMessage::New() const {
  return new NetProto_GMShutDownMessage;
}

void NetProto_GMShutDownMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupID_ = 0;
    unitID_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMShutDownMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupID_)));
          set_has_groupID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitID;
        break;
      }
      
      // optional int32 unitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitID_)));
          set_has_unitID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMShutDownMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 groupID = 1;
  if (has_groupID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupID(), output);
  }
  
  // optional int32 unitID = 2;
  if (has_unitID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unitID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMShutDownMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 groupID = 1;
  if (has_groupID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupID(), target);
  }
  
  // optional int32 unitID = 2;
  if (has_unitID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unitID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMShutDownMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 groupID = 1;
    if (has_groupID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupID());
    }
    
    // optional int32 unitID = 2;
    if (has_unitID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMShutDownMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMShutDownMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMShutDownMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMShutDownMessage::MergeFrom(const NetProto_GMShutDownMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupID()) {
      set_groupID(from.groupID());
    }
    if (from.has_unitID()) {
      set_unitID(from.unitID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMShutDownMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMShutDownMessage::CopyFrom(const NetProto_GMShutDownMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMShutDownMessage::IsInitialized() const {
  
  return true;
}

void NetProto_GMShutDownMessage::Swap(NetProto_GMShutDownMessage* other) {
  if (other != this) {
    std::swap(groupID_, other->groupID_);
    std::swap(unitID_, other->unitID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMShutDownMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMShutDownMessage_descriptor_;
  metadata.reflection = NetProto_GMShutDownMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMOpenMessage_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMOpenMessage_ID_descriptor_;
}
bool NetProto_GMOpenMessage_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMOpenMessage_ID NetProto_GMOpenMessage::GROUPID;
const NetProto_GMOpenMessage_ID NetProto_GMOpenMessage::UNITID;
const NetProto_GMOpenMessage_ID NetProto_GMOpenMessage::ID_MIN;
const NetProto_GMOpenMessage_ID NetProto_GMOpenMessage::ID_MAX;
const int NetProto_GMOpenMessage::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMOpenMessage::kGroupIDFieldNumber;
const int NetProto_GMOpenMessage::kUnitIDFieldNumber;
#endif  // !_MSC_VER

NetProto_GMOpenMessage::NetProto_GMOpenMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMOpenMessage::InitAsDefaultInstance() {
}

NetProto_GMOpenMessage::NetProto_GMOpenMessage(const NetProto_GMOpenMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMOpenMessage::SharedCtor() {
  _cached_size_ = 0;
  groupID_ = 0;
  unitID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMOpenMessage::~NetProto_GMOpenMessage() {
  SharedDtor();
}

void NetProto_GMOpenMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMOpenMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMOpenMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMOpenMessage_descriptor_;
}

const NetProto_GMOpenMessage& NetProto_GMOpenMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMOpenMessage* NetProto_GMOpenMessage::default_instance_ = NULL;

NetProto_GMOpenMessage* NetProto_GMOpenMessage::New() const {
  return new NetProto_GMOpenMessage;
}

void NetProto_GMOpenMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupID_ = 0;
    unitID_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMOpenMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupID_)));
          set_has_groupID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitID;
        break;
      }
      
      // optional int32 unitID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitID_)));
          set_has_unitID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMOpenMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 groupID = 1;
  if (has_groupID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupID(), output);
  }
  
  // optional int32 unitID = 2;
  if (has_unitID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unitID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMOpenMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 groupID = 1;
  if (has_groupID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupID(), target);
  }
  
  // optional int32 unitID = 2;
  if (has_unitID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unitID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMOpenMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 groupID = 1;
    if (has_groupID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupID());
    }
    
    // optional int32 unitID = 2;
    if (has_unitID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMOpenMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMOpenMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMOpenMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMOpenMessage::MergeFrom(const NetProto_GMOpenMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupID()) {
      set_groupID(from.groupID());
    }
    if (from.has_unitID()) {
      set_unitID(from.unitID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMOpenMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMOpenMessage::CopyFrom(const NetProto_GMOpenMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMOpenMessage::IsInitialized() const {
  
  return true;
}

void NetProto_GMOpenMessage::Swap(NetProto_GMOpenMessage* other) {
  if (other != this) {
    std::swap(groupID_, other->groupID_);
    std::swap(unitID_, other->unitID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMOpenMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMOpenMessage_descriptor_;
  metadata.reflection = NetProto_GMOpenMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMModifyVIP_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMModifyVIP_ID_descriptor_;
}
bool NetProto_GMModifyVIP_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMModifyVIP_ID NetProto_GMModifyVIP::GROUPID;
const NetProto_GMModifyVIP_ID NetProto_GMModifyVIP::UNITID;
const NetProto_GMModifyVIP_ID NetProto_GMModifyVIP::ID_MIN;
const NetProto_GMModifyVIP_ID NetProto_GMModifyVIP::ID_MAX;
const int NetProto_GMModifyVIP::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMModifyVIP::kRoleIDFieldNumber;
const int NetProto_GMModifyVIP::kDeltaFieldNumber;
#endif  // !_MSC_VER

NetProto_GMModifyVIP::NetProto_GMModifyVIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMModifyVIP::InitAsDefaultInstance() {
}

NetProto_GMModifyVIP::NetProto_GMModifyVIP(const NetProto_GMModifyVIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMModifyVIP::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMModifyVIP::~NetProto_GMModifyVIP() {
  SharedDtor();
}

void NetProto_GMModifyVIP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMModifyVIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMModifyVIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMModifyVIP_descriptor_;
}

const NetProto_GMModifyVIP& NetProto_GMModifyVIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMModifyVIP* NetProto_GMModifyVIP::default_instance_ = NULL;

NetProto_GMModifyVIP* NetProto_GMModifyVIP::New() const {
  return new NetProto_GMModifyVIP;
}

void NetProto_GMModifyVIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    delta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMModifyVIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delta;
        break;
      }
      
      // optional int32 delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMModifyVIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional int32 delta = 2;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMModifyVIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional int32 delta = 2;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMModifyVIP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 delta = 2;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMModifyVIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMModifyVIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMModifyVIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMModifyVIP::MergeFrom(const NetProto_GMModifyVIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMModifyVIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMModifyVIP::CopyFrom(const NetProto_GMModifyVIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMModifyVIP::IsInitialized() const {
  
  return true;
}

void NetProto_GMModifyVIP::Swap(NetProto_GMModifyVIP* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(delta_, other->delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMModifyVIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMModifyVIP_descriptor_;
  metadata.reflection = NetProto_GMModifyVIP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMAddExchange_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMAddExchange_ID_descriptor_;
}
bool NetProto_GMAddExchange_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMAddExchange_ID NetProto_GMAddExchange::GROUPID;
const NetProto_GMAddExchange_ID NetProto_GMAddExchange::UNITID;
const NetProto_GMAddExchange_ID NetProto_GMAddExchange::ID_MIN;
const NetProto_GMAddExchange_ID NetProto_GMAddExchange::ID_MAX;
const int NetProto_GMAddExchange::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMAddExchange::kExchangeFieldNumber;
const int NetProto_GMAddExchange::kGroupFieldNumber;
const int NetProto_GMAddExchange::kEndTimeFieldNumber;
const int NetProto_GMAddExchange::kGiftIDFieldNumber;
#endif  // !_MSC_VER

NetProto_GMAddExchange::NetProto_GMAddExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMAddExchange::InitAsDefaultInstance() {
}

NetProto_GMAddExchange::NetProto_GMAddExchange(const NetProto_GMAddExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMAddExchange::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0;
  endTime_ = 0;
  giftID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMAddExchange::~NetProto_GMAddExchange() {
  SharedDtor();
}

void NetProto_GMAddExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMAddExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMAddExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMAddExchange_descriptor_;
}

const NetProto_GMAddExchange& NetProto_GMAddExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMAddExchange* NetProto_GMAddExchange::default_instance_ = NULL;

NetProto_GMAddExchange* NetProto_GMAddExchange::New() const {
  return new NetProto_GMAddExchange;
}

void NetProto_GMAddExchange::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    group_ = 0;
    endTime_ = 0;
    giftID_ = 0;
  }
  exchange_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMAddExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string exchange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchange(0).data(), this->exchange(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_exchange;
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }
      
      // optional int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }
      
      // optional int32 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endTime_)));
          set_has_endTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_giftID;
        break;
      }
      
      // optional int32 giftID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftID_)));
          set_has_giftID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMAddExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string exchange = 1;
  for (int i = 0; i < this->exchange_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->exchange(i).data(), this->exchange(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->exchange(i), output);
  }
  
  // optional int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }
  
  // optional int32 endTime = 3;
  if (has_endTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endTime(), output);
  }
  
  // optional int32 giftID = 4;
  if (has_giftID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->giftID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMAddExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string exchange = 1;
  for (int i = 0; i < this->exchange_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange(i).data(), this->exchange(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->exchange(i), target);
  }
  
  // optional int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }
  
  // optional int32 endTime = 3;
  if (has_endTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endTime(), target);
  }
  
  // optional int32 giftID = 4;
  if (has_giftID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->giftID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMAddExchange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }
    
    // optional int32 endTime = 3;
    if (has_endTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endTime());
    }
    
    // optional int32 giftID = 4;
    if (has_giftID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftID());
    }
    
  }
  // repeated string exchange = 1;
  total_size += 1 * this->exchange_size();
  for (int i = 0; i < this->exchange_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exchange(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMAddExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMAddExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMAddExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMAddExchange::MergeFrom(const NetProto_GMAddExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchange_.MergeFrom(from.exchange_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_endTime()) {
      set_endTime(from.endTime());
    }
    if (from.has_giftID()) {
      set_giftID(from.giftID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMAddExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMAddExchange::CopyFrom(const NetProto_GMAddExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMAddExchange::IsInitialized() const {
  
  return true;
}

void NetProto_GMAddExchange::Swap(NetProto_GMAddExchange* other) {
  if (other != this) {
    exchange_.Swap(&other->exchange_);
    std::swap(group_, other->group_);
    std::swap(endTime_, other->endTime_);
    std::swap(giftID_, other->giftID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMAddExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMAddExchange_descriptor_;
  metadata.reflection = NetProto_GMAddExchange_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMQueryFaction_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMQueryFaction_ID_descriptor_;
}
bool NetProto_GMQueryFaction_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMQueryFaction_ID NetProto_GMQueryFaction::GROUPID;
const NetProto_GMQueryFaction_ID NetProto_GMQueryFaction::UNITID;
const NetProto_GMQueryFaction_ID NetProto_GMQueryFaction::ID_MIN;
const NetProto_GMQueryFaction_ID NetProto_GMQueryFaction::ID_MAX;
const int NetProto_GMQueryFaction::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMQueryFaction::kInfoFieldNumber;
const int NetProto_GMQueryFaction::kMemFieldNumber;
const int NetProto_GMQueryFaction::kWinNameFieldNumber;
#endif  // !_MSC_VER

NetProto_GMQueryFaction::NetProto_GMQueryFaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMQueryFaction::InitAsDefaultInstance() {
  info_ = const_cast< ::NetProto_FactionInfo*>(&::NetProto_FactionInfo::default_instance());
}

NetProto_GMQueryFaction::NetProto_GMQueryFaction(const NetProto_GMQueryFaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMQueryFaction::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  winName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMQueryFaction::~NetProto_GMQueryFaction() {
  SharedDtor();
}

void NetProto_GMQueryFaction::SharedDtor() {
  if (winName_ != &::google::protobuf::internal::kEmptyString) {
    delete winName_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void NetProto_GMQueryFaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMQueryFaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMQueryFaction_descriptor_;
}

const NetProto_GMQueryFaction& NetProto_GMQueryFaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMQueryFaction* NetProto_GMQueryFaction::default_instance_ = NULL;

NetProto_GMQueryFaction* NetProto_GMQueryFaction::New() const {
  return new NetProto_GMQueryFaction;
}

void NetProto_GMQueryFaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::NetProto_FactionInfo::Clear();
    }
    if (has_winName()) {
      if (winName_ != &::google::protobuf::internal::kEmptyString) {
        winName_->clear();
      }
    }
  }
  mem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMQueryFaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NetProto_FactionInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mem;
        break;
      }
      
      // repeated .NetProto_FactionMem mem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mem;
        if (input->ExpectTag(26)) goto parse_winName;
        break;
      }
      
      // optional string winName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winName()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winName().data(), this->winName().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMQueryFaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NetProto_FactionInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // repeated .NetProto_FactionMem mem = 2;
  for (int i = 0; i < this->mem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mem(i), output);
  }
  
  // optional string winName = 3;
  if (has_winName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winName().data(), this->winName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->winName(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMQueryFaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NetProto_FactionInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // repeated .NetProto_FactionMem mem = 2;
  for (int i = 0; i < this->mem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mem(i), target);
  }
  
  // optional string winName = 3;
  if (has_winName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winName().data(), this->winName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->winName(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMQueryFaction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NetProto_FactionInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional string winName = 3;
    if (has_winName()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winName());
    }
    
  }
  // repeated .NetProto_FactionMem mem = 2;
  total_size += 1 * this->mem_size();
  for (int i = 0; i < this->mem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMQueryFaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMQueryFaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMQueryFaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMQueryFaction::MergeFrom(const NetProto_GMQueryFaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_.MergeFrom(from.mem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::NetProto_FactionInfo::MergeFrom(from.info());
    }
    if (from.has_winName()) {
      set_winName(from.winName());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMQueryFaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMQueryFaction::CopyFrom(const NetProto_GMQueryFaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMQueryFaction::IsInitialized() const {
  
  return true;
}

void NetProto_GMQueryFaction::Swap(NetProto_GMQueryFaction* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    mem_.Swap(&other->mem_);
    std::swap(winName_, other->winName_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMQueryFaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMQueryFaction_descriptor_;
  metadata.reflection = NetProto_GMQueryFaction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMChangeFactionMem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMChangeFactionMem_ID_descriptor_;
}
bool NetProto_GMChangeFactionMem_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMChangeFactionMem_ID NetProto_GMChangeFactionMem::GROUPID;
const NetProto_GMChangeFactionMem_ID NetProto_GMChangeFactionMem::UNITID;
const NetProto_GMChangeFactionMem_ID NetProto_GMChangeFactionMem::ID_MIN;
const NetProto_GMChangeFactionMem_ID NetProto_GMChangeFactionMem::ID_MAX;
const int NetProto_GMChangeFactionMem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMChangeFactionMem::kFactionNameFieldNumber;
const int NetProto_GMChangeFactionMem::kRoleIDFieldNumber;
const int NetProto_GMChangeFactionMem::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_GMChangeFactionMem::NetProto_GMChangeFactionMem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMChangeFactionMem::InitAsDefaultInstance() {
}

NetProto_GMChangeFactionMem::NetProto_GMChangeFactionMem(const NetProto_GMChangeFactionMem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMChangeFactionMem::SharedCtor() {
  _cached_size_ = 0;
  factionName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleID_ = GOOGLE_LONGLONG(0);
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMChangeFactionMem::~NetProto_GMChangeFactionMem() {
  SharedDtor();
}

void NetProto_GMChangeFactionMem::SharedDtor() {
  if (factionName_ != &::google::protobuf::internal::kEmptyString) {
    delete factionName_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_GMChangeFactionMem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMChangeFactionMem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMChangeFactionMem_descriptor_;
}

const NetProto_GMChangeFactionMem& NetProto_GMChangeFactionMem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMChangeFactionMem* NetProto_GMChangeFactionMem::default_instance_ = NULL;

NetProto_GMChangeFactionMem* NetProto_GMChangeFactionMem::New() const {
  return new NetProto_GMChangeFactionMem;
}

void NetProto_GMChangeFactionMem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_factionName()) {
      if (factionName_ != &::google::protobuf::internal::kEmptyString) {
        factionName_->clear();
      }
    }
    roleID_ = GOOGLE_LONGLONG(0);
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMChangeFactionMem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string factionName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_factionName()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->factionName().data(), this->factionName().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMChangeFactionMem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string factionName = 1;
  if (has_factionName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionName().data(), this->factionName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->factionName(), output);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleID(), output);
  }
  
  // optional bool flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMChangeFactionMem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string factionName = 1;
  if (has_factionName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionName().data(), this->factionName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->factionName(), target);
  }
  
  // optional int64 roleID = 2;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleID(), target);
  }
  
  // optional bool flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMChangeFactionMem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string factionName = 1;
    if (has_factionName()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->factionName());
    }
    
    // optional int64 roleID = 2;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional bool flag = 3;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMChangeFactionMem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMChangeFactionMem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMChangeFactionMem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMChangeFactionMem::MergeFrom(const NetProto_GMChangeFactionMem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionName()) {
      set_factionName(from.factionName());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMChangeFactionMem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMChangeFactionMem::CopyFrom(const NetProto_GMChangeFactionMem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMChangeFactionMem::IsInitialized() const {
  
  return true;
}

void NetProto_GMChangeFactionMem::Swap(NetProto_GMChangeFactionMem* other) {
  if (other != this) {
    std::swap(factionName_, other->factionName_);
    std::swap(roleID_, other->roleID_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMChangeFactionMem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMChangeFactionMem_descriptor_;
  metadata.reflection = NetProto_GMChangeFactionMem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMAddRekooRole_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMAddRekooRole_ID_descriptor_;
}
bool NetProto_GMAddRekooRole_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMAddRekooRole_ID NetProto_GMAddRekooRole::GROUPID;
const NetProto_GMAddRekooRole_ID NetProto_GMAddRekooRole::UNITID;
const NetProto_GMAddRekooRole_ID NetProto_GMAddRekooRole::ID_MIN;
const NetProto_GMAddRekooRole_ID NetProto_GMAddRekooRole::ID_MAX;
const int NetProto_GMAddRekooRole::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMAddRekooRole::kRoleIDFieldNumber;
#endif  // !_MSC_VER

NetProto_GMAddRekooRole::NetProto_GMAddRekooRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMAddRekooRole::InitAsDefaultInstance() {
}

NetProto_GMAddRekooRole::NetProto_GMAddRekooRole(const NetProto_GMAddRekooRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMAddRekooRole::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMAddRekooRole::~NetProto_GMAddRekooRole() {
  SharedDtor();
}

void NetProto_GMAddRekooRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_GMAddRekooRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMAddRekooRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMAddRekooRole_descriptor_;
}

const NetProto_GMAddRekooRole& NetProto_GMAddRekooRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMAddRekooRole* NetProto_GMAddRekooRole::default_instance_ = NULL;

NetProto_GMAddRekooRole* NetProto_GMAddRekooRole::New() const {
  return new NetProto_GMAddRekooRole;
}

void NetProto_GMAddRekooRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMAddRekooRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMAddRekooRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMAddRekooRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMAddRekooRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMAddRekooRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMAddRekooRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMAddRekooRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMAddRekooRole::MergeFrom(const NetProto_GMAddRekooRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMAddRekooRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMAddRekooRole::CopyFrom(const NetProto_GMAddRekooRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMAddRekooRole::IsInitialized() const {
  
  return true;
}

void NetProto_GMAddRekooRole::Swap(NetProto_GMAddRekooRole* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMAddRekooRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMAddRekooRole_descriptor_;
  metadata.reflection = NetProto_GMAddRekooRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_GMLoginInfo_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMLoginInfo_ID_descriptor_;
}
bool NetProto_GMLoginInfo_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_GMLoginInfo_ID NetProto_GMLoginInfo::GROUPID;
const NetProto_GMLoginInfo_ID NetProto_GMLoginInfo::UNITID;
const NetProto_GMLoginInfo_ID NetProto_GMLoginInfo::ID_MIN;
const NetProto_GMLoginInfo_ID NetProto_GMLoginInfo::ID_MAX;
const int NetProto_GMLoginInfo::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_GMLoginInfo::kCountFieldNumber;
const int NetProto_GMLoginInfo::kStrFieldNumber;
#endif  // !_MSC_VER

NetProto_GMLoginInfo::NetProto_GMLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_GMLoginInfo::InitAsDefaultInstance() {
}

NetProto_GMLoginInfo::NetProto_GMLoginInfo(const NetProto_GMLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_GMLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_GMLoginInfo::~NetProto_GMLoginInfo() {
  SharedDtor();
}

void NetProto_GMLoginInfo::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_GMLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_GMLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_GMLoginInfo_descriptor_;
}

const NetProto_GMLoginInfo& NetProto_GMLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_GMLoginInfo* NetProto_GMLoginInfo::default_instance_ = NULL;

NetProto_GMLoginInfo* NetProto_GMLoginInfo::New() const {
  return new NetProto_GMLoginInfo;
}

void NetProto_GMLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_GMLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }
      
      // optional string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_GMLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_GMLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_GMLoginInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_GMLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_GMLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_GMLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_GMLoginInfo::MergeFrom(const NetProto_GMLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_GMLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_GMLoginInfo::CopyFrom(const NetProto_GMLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_GMLoginInfo::IsInitialized() const {
  
  return true;
}

void NetProto_GMLoginInfo::Swap(NetProto_GMLoginInfo* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_GMLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_GMLoginInfo_descriptor_;
  metadata.reflection = NetProto_GMLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ObtainPet_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ObtainPet_ID_descriptor_;
}
bool NetProto_ObtainPet_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ObtainPet_ID NetProto_ObtainPet::GROUPID;
const NetProto_ObtainPet_ID NetProto_ObtainPet::UNITID;
const NetProto_ObtainPet_ID NetProto_ObtainPet::ID_MIN;
const NetProto_ObtainPet_ID NetProto_ObtainPet::ID_MAX;
const int NetProto_ObtainPet::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ObtainPet::kIdFieldNumber;
const int NetProto_ObtainPet::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_ObtainPet::NetProto_ObtainPet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ObtainPet::InitAsDefaultInstance() {
}

NetProto_ObtainPet::NetProto_ObtainPet(const NetProto_ObtainPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ObtainPet::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ObtainPet::~NetProto_ObtainPet() {
  SharedDtor();
}

void NetProto_ObtainPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ObtainPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ObtainPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ObtainPet_descriptor_;
}

const NetProto_ObtainPet& NetProto_ObtainPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ObtainPet* NetProto_ObtainPet::default_instance_ = NULL;

NetProto_ObtainPet* NetProto_ObtainPet::New() const {
  return new NetProto_ObtainPet;
}

void NetProto_ObtainPet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ObtainPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ObtainPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ObtainPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ObtainPet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ObtainPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ObtainPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ObtainPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ObtainPet::MergeFrom(const NetProto_ObtainPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ObtainPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ObtainPet::CopyFrom(const NetProto_ObtainPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ObtainPet::IsInitialized() const {
  
  return true;
}

void NetProto_ObtainPet::Swap(NetProto_ObtainPet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ObtainPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ObtainPet_descriptor_;
  metadata.reflection = NetProto_ObtainPet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PetFighting_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetFighting_ID_descriptor_;
}
bool NetProto_PetFighting_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PetFighting_ID NetProto_PetFighting::GROUPID;
const NetProto_PetFighting_ID NetProto_PetFighting::UNITID;
const NetProto_PetFighting_ID NetProto_PetFighting::ID_MIN;
const NetProto_PetFighting_ID NetProto_PetFighting::ID_MAX;
const int NetProto_PetFighting::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PetFighting::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_PetFighting::NetProto_PetFighting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PetFighting::InitAsDefaultInstance() {
}

NetProto_PetFighting::NetProto_PetFighting(const NetProto_PetFighting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PetFighting::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PetFighting::~NetProto_PetFighting() {
  SharedDtor();
}

void NetProto_PetFighting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PetFighting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PetFighting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetFighting_descriptor_;
}

const NetProto_PetFighting& NetProto_PetFighting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PetFighting* NetProto_PetFighting::default_instance_ = NULL;

NetProto_PetFighting* NetProto_PetFighting::New() const {
  return new NetProto_PetFighting;
}

void NetProto_PetFighting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PetFighting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PetFighting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PetFighting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PetFighting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PetFighting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PetFighting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PetFighting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PetFighting::MergeFrom(const NetProto_PetFighting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PetFighting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PetFighting::CopyFrom(const NetProto_PetFighting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PetFighting::IsInitialized() const {
  
  return true;
}

void NetProto_PetFighting::Swap(NetProto_PetFighting* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PetFighting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PetFighting_descriptor_;
  metadata.reflection = NetProto_PetFighting_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PetRest_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetRest_ID_descriptor_;
}
bool NetProto_PetRest_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PetRest_ID NetProto_PetRest::GROUPID;
const NetProto_PetRest_ID NetProto_PetRest::UNITID;
const NetProto_PetRest_ID NetProto_PetRest::ID_MIN;
const NetProto_PetRest_ID NetProto_PetRest::ID_MAX;
const int NetProto_PetRest::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PetRest::kIndexFieldNumber;
const int NetProto_PetRest::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_PetRest::NetProto_PetRest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PetRest::InitAsDefaultInstance() {
}

NetProto_PetRest::NetProto_PetRest(const NetProto_PetRest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PetRest::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PetRest::~NetProto_PetRest() {
  SharedDtor();
}

void NetProto_PetRest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PetRest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PetRest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetRest_descriptor_;
}

const NetProto_PetRest& NetProto_PetRest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PetRest* NetProto_PetRest::default_instance_ = NULL;

NetProto_PetRest* NetProto_PetRest::New() const {
  return new NetProto_PetRest;
}

void NetProto_PetRest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PetRest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PetRest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PetRest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PetRest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PetRest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PetRest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PetRest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PetRest::MergeFrom(const NetProto_PetRest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PetRest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PetRest::CopyFrom(const NetProto_PetRest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PetRest::IsInitialized() const {
  
  return true;
}

void NetProto_PetRest::Swap(NetProto_PetRest* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PetRest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PetRest_descriptor_;
  metadata.reflection = NetProto_PetRest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PetAttach_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetAttach_ID_descriptor_;
}
bool NetProto_PetAttach_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PetAttach_ID NetProto_PetAttach::GROUPID;
const NetProto_PetAttach_ID NetProto_PetAttach::UNITID;
const NetProto_PetAttach_ID NetProto_PetAttach::ID_MIN;
const NetProto_PetAttach_ID NetProto_PetAttach::ID_MAX;
const int NetProto_PetAttach::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PetAttach::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_PetAttach::NetProto_PetAttach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PetAttach::InitAsDefaultInstance() {
}

NetProto_PetAttach::NetProto_PetAttach(const NetProto_PetAttach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PetAttach::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PetAttach::~NetProto_PetAttach() {
  SharedDtor();
}

void NetProto_PetAttach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PetAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PetAttach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetAttach_descriptor_;
}

const NetProto_PetAttach& NetProto_PetAttach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PetAttach* NetProto_PetAttach::default_instance_ = NULL;

NetProto_PetAttach* NetProto_PetAttach::New() const {
  return new NetProto_PetAttach;
}

void NetProto_PetAttach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PetAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PetAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PetAttach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PetAttach::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PetAttach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PetAttach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PetAttach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PetAttach::MergeFrom(const NetProto_PetAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PetAttach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PetAttach::CopyFrom(const NetProto_PetAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PetAttach::IsInitialized() const {
  
  return true;
}

void NetProto_PetAttach::Swap(NetProto_PetAttach* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PetAttach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PetAttach_descriptor_;
  metadata.reflection = NetProto_PetAttach_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PetLevelUp_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetLevelUp_ID_descriptor_;
}
bool NetProto_PetLevelUp_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PetLevelUp_ID NetProto_PetLevelUp::GROUPID;
const NetProto_PetLevelUp_ID NetProto_PetLevelUp::UNITID;
const NetProto_PetLevelUp_ID NetProto_PetLevelUp::ID_MIN;
const NetProto_PetLevelUp_ID NetProto_PetLevelUp::ID_MAX;
const int NetProto_PetLevelUp::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PetLevelUp::kIndexFieldNumber;
const int NetProto_PetLevelUp::kChangeFieldNumber;
#endif  // !_MSC_VER

NetProto_PetLevelUp::NetProto_PetLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PetLevelUp::InitAsDefaultInstance() {
}

NetProto_PetLevelUp::NetProto_PetLevelUp(const NetProto_PetLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PetLevelUp::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  change_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PetLevelUp::~NetProto_PetLevelUp() {
  SharedDtor();
}

void NetProto_PetLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PetLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PetLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetLevelUp_descriptor_;
}

const NetProto_PetLevelUp& NetProto_PetLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PetLevelUp* NetProto_PetLevelUp::default_instance_ = NULL;

NetProto_PetLevelUp* NetProto_PetLevelUp::New() const {
  return new NetProto_PetLevelUp;
}

void NetProto_PetLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    change_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PetLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change;
        break;
      }
      
      // optional int32 change = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PetLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 change = 2;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->change(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PetLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 change = 2;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->change(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PetLevelUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 change = 2;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PetLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PetLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PetLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PetLevelUp::MergeFrom(const NetProto_PetLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PetLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PetLevelUp::CopyFrom(const NetProto_PetLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PetLevelUp::IsInitialized() const {
  
  return true;
}

void NetProto_PetLevelUp::Swap(NetProto_PetLevelUp* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(change_, other->change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PetLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PetLevelUp_descriptor_;
  metadata.reflection = NetProto_PetLevelUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PetLearnSkill_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetLearnSkill_ID_descriptor_;
}
bool NetProto_PetLearnSkill_ID_IsValid(int value) {
  switch(value) {
    case 6:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PetLearnSkill_ID NetProto_PetLearnSkill::GROUPID;
const NetProto_PetLearnSkill_ID NetProto_PetLearnSkill::UNITID;
const NetProto_PetLearnSkill_ID NetProto_PetLearnSkill::ID_MIN;
const NetProto_PetLearnSkill_ID NetProto_PetLearnSkill::ID_MAX;
const int NetProto_PetLearnSkill::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PetLearnSkill::kIndexFieldNumber;
const int NetProto_PetLearnSkill::kSkillIDFieldNumber;
const int NetProto_PetLearnSkill::kSkillsIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_PetLearnSkill::NetProto_PetLearnSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PetLearnSkill::InitAsDefaultInstance() {
}

NetProto_PetLearnSkill::NetProto_PetLearnSkill(const NetProto_PetLearnSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PetLearnSkill::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  skillID_ = 0;
  skillsIndex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PetLearnSkill::~NetProto_PetLearnSkill() {
  SharedDtor();
}

void NetProto_PetLearnSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PetLearnSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PetLearnSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetLearnSkill_descriptor_;
}

const NetProto_PetLearnSkill& NetProto_PetLearnSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PetLearnSkill* NetProto_PetLearnSkill::default_instance_ = NULL;

NetProto_PetLearnSkill* NetProto_PetLearnSkill::New() const {
  return new NetProto_PetLearnSkill;
}

void NetProto_PetLearnSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    skillID_ = 0;
    skillsIndex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PetLearnSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }
      
      // optional int32 skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillID_)));
          set_has_skillID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillsIndex;
        break;
      }
      
      // optional int32 skillsIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillsIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillsIndex_)));
          set_has_skillsIndex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PetLearnSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 skillID = 2;
  if (has_skillID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillID(), output);
  }
  
  // optional int32 skillsIndex = 3;
  if (has_skillsIndex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillsIndex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PetLearnSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 skillID = 2;
  if (has_skillID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillID(), target);
  }
  
  // optional int32 skillsIndex = 3;
  if (has_skillsIndex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillsIndex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PetLearnSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 skillID = 2;
    if (has_skillID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillID());
    }
    
    // optional int32 skillsIndex = 3;
    if (has_skillsIndex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillsIndex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PetLearnSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PetLearnSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PetLearnSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PetLearnSkill::MergeFrom(const NetProto_PetLearnSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_skillID()) {
      set_skillID(from.skillID());
    }
    if (from.has_skillsIndex()) {
      set_skillsIndex(from.skillsIndex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PetLearnSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PetLearnSkill::CopyFrom(const NetProto_PetLearnSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PetLearnSkill::IsInitialized() const {
  
  return true;
}

void NetProto_PetLearnSkill::Swap(NetProto_PetLearnSkill* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(skillID_, other->skillID_);
    std::swap(skillsIndex_, other->skillsIndex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PetLearnSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PetLearnSkill_descriptor_;
  metadata.reflection = NetProto_PetLearnSkill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PetInherit_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetInherit_ID_descriptor_;
}
bool NetProto_PetInherit_ID_IsValid(int value) {
  switch(value) {
    case 7:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PetInherit_ID NetProto_PetInherit::GROUPID;
const NetProto_PetInherit_ID NetProto_PetInherit::UNITID;
const NetProto_PetInherit_ID NetProto_PetInherit::ID_MIN;
const NetProto_PetInherit_ID NetProto_PetInherit::ID_MAX;
const int NetProto_PetInherit::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PetInherit::kIndexPreFieldNumber;
const int NetProto_PetInherit::kIndexAfterFieldNumber;
const int NetProto_PetInherit::kInheritSkillFieldNumber;
const int NetProto_PetInherit::kPetFieldNumber;
#endif  // !_MSC_VER

NetProto_PetInherit::NetProto_PetInherit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PetInherit::InitAsDefaultInstance() {
  pet_ = const_cast< ::PB_PetAsset*>(&::PB_PetAsset::default_instance());
}

NetProto_PetInherit::NetProto_PetInherit(const NetProto_PetInherit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PetInherit::SharedCtor() {
  _cached_size_ = 0;
  indexPre_ = 0;
  indexAfter_ = 0;
  inheritSkill_ = false;
  pet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PetInherit::~NetProto_PetInherit() {
  SharedDtor();
}

void NetProto_PetInherit::SharedDtor() {
  if (this != default_instance_) {
    delete pet_;
  }
}

void NetProto_PetInherit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PetInherit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetInherit_descriptor_;
}

const NetProto_PetInherit& NetProto_PetInherit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PetInherit* NetProto_PetInherit::default_instance_ = NULL;

NetProto_PetInherit* NetProto_PetInherit::New() const {
  return new NetProto_PetInherit;
}

void NetProto_PetInherit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    indexPre_ = 0;
    indexAfter_ = 0;
    inheritSkill_ = false;
    if (has_pet()) {
      if (pet_ != NULL) pet_->::PB_PetAsset::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PetInherit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 indexPre = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indexPre_)));
          set_has_indexPre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_indexAfter;
        break;
      }
      
      // optional int32 indexAfter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indexAfter_)));
          set_has_indexAfter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inheritSkill;
        break;
      }
      
      // optional bool inheritSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inheritSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inheritSkill_)));
          set_has_inheritSkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pet;
        break;
      }
      
      // optional .PB_PetAsset pet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PetInherit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 indexPre = 1;
  if (has_indexPre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->indexPre(), output);
  }
  
  // optional int32 indexAfter = 2;
  if (has_indexAfter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->indexAfter(), output);
  }
  
  // optional bool inheritSkill = 3;
  if (has_inheritSkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inheritSkill(), output);
  }
  
  // optional .PB_PetAsset pet = 4;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PetInherit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 indexPre = 1;
  if (has_indexPre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->indexPre(), target);
  }
  
  // optional int32 indexAfter = 2;
  if (has_indexAfter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->indexAfter(), target);
  }
  
  // optional bool inheritSkill = 3;
  if (has_inheritSkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inheritSkill(), target);
  }
  
  // optional .PB_PetAsset pet = 4;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PetInherit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 indexPre = 1;
    if (has_indexPre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indexPre());
    }
    
    // optional int32 indexAfter = 2;
    if (has_indexAfter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indexAfter());
    }
    
    // optional bool inheritSkill = 3;
    if (has_inheritSkill()) {
      total_size += 1 + 1;
    }
    
    // optional .PB_PetAsset pet = 4;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PetInherit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PetInherit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PetInherit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PetInherit::MergeFrom(const NetProto_PetInherit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_indexPre()) {
      set_indexPre(from.indexPre());
    }
    if (from.has_indexAfter()) {
      set_indexAfter(from.indexAfter());
    }
    if (from.has_inheritSkill()) {
      set_inheritSkill(from.inheritSkill());
    }
    if (from.has_pet()) {
      mutable_pet()->::PB_PetAsset::MergeFrom(from.pet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PetInherit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PetInherit::CopyFrom(const NetProto_PetInherit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PetInherit::IsInitialized() const {
  
  return true;
}

void NetProto_PetInherit::Swap(NetProto_PetInherit* other) {
  if (other != this) {
    std::swap(indexPre_, other->indexPre_);
    std::swap(indexAfter_, other->indexAfter_);
    std::swap(inheritSkill_, other->inheritSkill_);
    std::swap(pet_, other->pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PetInherit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PetInherit_descriptor_;
  metadata.reflection = NetProto_PetInherit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PetAdvance_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetAdvance_ID_descriptor_;
}
bool NetProto_PetAdvance_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PetAdvance_ID NetProto_PetAdvance::GROUPID;
const NetProto_PetAdvance_ID NetProto_PetAdvance::UNITID;
const NetProto_PetAdvance_ID NetProto_PetAdvance::ID_MIN;
const NetProto_PetAdvance_ID NetProto_PetAdvance::ID_MAX;
const int NetProto_PetAdvance::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PetAdvance::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_PetAdvance::NetProto_PetAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PetAdvance::InitAsDefaultInstance() {
}

NetProto_PetAdvance::NetProto_PetAdvance(const NetProto_PetAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PetAdvance::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PetAdvance::~NetProto_PetAdvance() {
  SharedDtor();
}

void NetProto_PetAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PetAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PetAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetAdvance_descriptor_;
}

const NetProto_PetAdvance& NetProto_PetAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PetAdvance* NetProto_PetAdvance::default_instance_ = NULL;

NetProto_PetAdvance* NetProto_PetAdvance::New() const {
  return new NetProto_PetAdvance;
}

void NetProto_PetAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PetAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PetAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PetAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PetAdvance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PetAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PetAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PetAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PetAdvance::MergeFrom(const NetProto_PetAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PetAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PetAdvance::CopyFrom(const NetProto_PetAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PetAdvance::IsInitialized() const {
  
  return true;
}

void NetProto_PetAdvance::Swap(NetProto_PetAdvance* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PetAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PetAdvance_descriptor_;
  metadata.reflection = NetProto_PetAdvance_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PetPsychicsLevelUp_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetPsychicsLevelUp_ID_descriptor_;
}
bool NetProto_PetPsychicsLevelUp_ID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PetPsychicsLevelUp_ID NetProto_PetPsychicsLevelUp::GROUPID;
const NetProto_PetPsychicsLevelUp_ID NetProto_PetPsychicsLevelUp::UNITID;
const NetProto_PetPsychicsLevelUp_ID NetProto_PetPsychicsLevelUp::ID_MIN;
const NetProto_PetPsychicsLevelUp_ID NetProto_PetPsychicsLevelUp::ID_MAX;
const int NetProto_PetPsychicsLevelUp::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PetPsychicsLevelUp::kIndexFieldNumber;
const int NetProto_PetPsychicsLevelUp::kResFieldNumber;
#endif  // !_MSC_VER

NetProto_PetPsychicsLevelUp::NetProto_PetPsychicsLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PetPsychicsLevelUp::InitAsDefaultInstance() {
}

NetProto_PetPsychicsLevelUp::NetProto_PetPsychicsLevelUp(const NetProto_PetPsychicsLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PetPsychicsLevelUp::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PetPsychicsLevelUp::~NetProto_PetPsychicsLevelUp() {
  SharedDtor();
}

void NetProto_PetPsychicsLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PetPsychicsLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PetPsychicsLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PetPsychicsLevelUp_descriptor_;
}

const NetProto_PetPsychicsLevelUp& NetProto_PetPsychicsLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PetPsychicsLevelUp* NetProto_PetPsychicsLevelUp::default_instance_ = NULL;

NetProto_PetPsychicsLevelUp* NetProto_PetPsychicsLevelUp::New() const {
  return new NetProto_PetPsychicsLevelUp;
}

void NetProto_PetPsychicsLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PetPsychicsLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }
      
      // optional int32 res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PetPsychicsLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PetPsychicsLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PetPsychicsLevelUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PetPsychicsLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PetPsychicsLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PetPsychicsLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PetPsychicsLevelUp::MergeFrom(const NetProto_PetPsychicsLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PetPsychicsLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PetPsychicsLevelUp::CopyFrom(const NetProto_PetPsychicsLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PetPsychicsLevelUp::IsInitialized() const {
  
  return true;
}

void NetProto_PetPsychicsLevelUp::Swap(NetProto_PetPsychicsLevelUp* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PetPsychicsLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PetPsychicsLevelUp_descriptor_;
  metadata.reflection = NetProto_PetPsychicsLevelUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ActiveGemRequest_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveGemRequest_ID_descriptor_;
}
bool NetProto_ActiveGemRequest_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ActiveGemRequest_ID NetProto_ActiveGemRequest::GROUPID;
const NetProto_ActiveGemRequest_ID NetProto_ActiveGemRequest::UNITID;
const NetProto_ActiveGemRequest_ID NetProto_ActiveGemRequest::ID_MIN;
const NetProto_ActiveGemRequest_ID NetProto_ActiveGemRequest::ID_MAX;
const int NetProto_ActiveGemRequest::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ActiveGemRequest::kValueFieldNumber;
#endif  // !_MSC_VER

NetProto_ActiveGemRequest::NetProto_ActiveGemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ActiveGemRequest::InitAsDefaultInstance() {
}

NetProto_ActiveGemRequest::NetProto_ActiveGemRequest(const NetProto_ActiveGemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ActiveGemRequest::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ActiveGemRequest::~NetProto_ActiveGemRequest() {
  SharedDtor();
}

void NetProto_ActiveGemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ActiveGemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ActiveGemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveGemRequest_descriptor_;
}

const NetProto_ActiveGemRequest& NetProto_ActiveGemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ActiveGemRequest* NetProto_ActiveGemRequest::default_instance_ = NULL;

NetProto_ActiveGemRequest* NetProto_ActiveGemRequest::New() const {
  return new NetProto_ActiveGemRequest;
}

void NetProto_ActiveGemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ActiveGemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ActiveGemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ActiveGemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ActiveGemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ActiveGemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ActiveGemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ActiveGemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ActiveGemRequest::MergeFrom(const NetProto_ActiveGemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ActiveGemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ActiveGemRequest::CopyFrom(const NetProto_ActiveGemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ActiveGemRequest::IsInitialized() const {
  
  return true;
}

void NetProto_ActiveGemRequest::Swap(NetProto_ActiveGemRequest* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ActiveGemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ActiveGemRequest_descriptor_;
  metadata.reflection = NetProto_ActiveGemRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ActiveDoubleGem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveDoubleGem_ID_descriptor_;
}
bool NetProto_ActiveDoubleGem_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ActiveDoubleGem_ID NetProto_ActiveDoubleGem::GROUPID;
const NetProto_ActiveDoubleGem_ID NetProto_ActiveDoubleGem::UNITID;
const NetProto_ActiveDoubleGem_ID NetProto_ActiveDoubleGem::ID_MIN;
const NetProto_ActiveDoubleGem_ID NetProto_ActiveDoubleGem::ID_MAX;
const int NetProto_ActiveDoubleGem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_ActiveDoubleGem::NetProto_ActiveDoubleGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ActiveDoubleGem::InitAsDefaultInstance() {
}

NetProto_ActiveDoubleGem::NetProto_ActiveDoubleGem(const NetProto_ActiveDoubleGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ActiveDoubleGem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ActiveDoubleGem::~NetProto_ActiveDoubleGem() {
  SharedDtor();
}

void NetProto_ActiveDoubleGem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ActiveDoubleGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ActiveDoubleGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveDoubleGem_descriptor_;
}

const NetProto_ActiveDoubleGem& NetProto_ActiveDoubleGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ActiveDoubleGem* NetProto_ActiveDoubleGem::default_instance_ = NULL;

NetProto_ActiveDoubleGem* NetProto_ActiveDoubleGem::New() const {
  return new NetProto_ActiveDoubleGem;
}

void NetProto_ActiveDoubleGem::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ActiveDoubleGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_ActiveDoubleGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ActiveDoubleGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ActiveDoubleGem::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ActiveDoubleGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ActiveDoubleGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ActiveDoubleGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ActiveDoubleGem::MergeFrom(const NetProto_ActiveDoubleGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ActiveDoubleGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ActiveDoubleGem::CopyFrom(const NetProto_ActiveDoubleGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ActiveDoubleGem::IsInitialized() const {
  
  return true;
}

void NetProto_ActiveDoubleGem::Swap(NetProto_ActiveDoubleGem* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ActiveDoubleGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ActiveDoubleGem_descriptor_;
  metadata.reflection = NetProto_ActiveDoubleGem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ActiveUpGradeGem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveUpGradeGem_ID_descriptor_;
}
bool NetProto_ActiveUpGradeGem_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ActiveUpGradeGem_ID NetProto_ActiveUpGradeGem::GROUPID;
const NetProto_ActiveUpGradeGem_ID NetProto_ActiveUpGradeGem::UNITID;
const NetProto_ActiveUpGradeGem_ID NetProto_ActiveUpGradeGem::ID_MIN;
const NetProto_ActiveUpGradeGem_ID NetProto_ActiveUpGradeGem::ID_MAX;
const int NetProto_ActiveUpGradeGem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ActiveUpGradeGem::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_ActiveUpGradeGem::NetProto_ActiveUpGradeGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ActiveUpGradeGem::InitAsDefaultInstance() {
}

NetProto_ActiveUpGradeGem::NetProto_ActiveUpGradeGem(const NetProto_ActiveUpGradeGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ActiveUpGradeGem::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ActiveUpGradeGem::~NetProto_ActiveUpGradeGem() {
  SharedDtor();
}

void NetProto_ActiveUpGradeGem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ActiveUpGradeGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ActiveUpGradeGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveUpGradeGem_descriptor_;
}

const NetProto_ActiveUpGradeGem& NetProto_ActiveUpGradeGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ActiveUpGradeGem* NetProto_ActiveUpGradeGem::default_instance_ = NULL;

NetProto_ActiveUpGradeGem* NetProto_ActiveUpGradeGem::New() const {
  return new NetProto_ActiveUpGradeGem;
}

void NetProto_ActiveUpGradeGem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ActiveUpGradeGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ActiveUpGradeGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ActiveUpGradeGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ActiveUpGradeGem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ActiveUpGradeGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ActiveUpGradeGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ActiveUpGradeGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ActiveUpGradeGem::MergeFrom(const NetProto_ActiveUpGradeGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ActiveUpGradeGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ActiveUpGradeGem::CopyFrom(const NetProto_ActiveUpGradeGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ActiveUpGradeGem::IsInitialized() const {
  
  return true;
}

void NetProto_ActiveUpGradeGem::Swap(NetProto_ActiveUpGradeGem* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ActiveUpGradeGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ActiveUpGradeGem_descriptor_;
  metadata.reflection = NetProto_ActiveUpGradeGem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ActiveGetGem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveGetGem_ID_descriptor_;
}
bool NetProto_ActiveGetGem_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ActiveGetGem_ID NetProto_ActiveGetGem::GROUPID;
const NetProto_ActiveGetGem_ID NetProto_ActiveGetGem::UNITID;
const NetProto_ActiveGetGem_ID NetProto_ActiveGetGem::ID_MIN;
const NetProto_ActiveGetGem_ID NetProto_ActiveGetGem::ID_MAX;
const int NetProto_ActiveGetGem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ActiveGetGem::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_ActiveGetGem::NetProto_ActiveGetGem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ActiveGetGem::InitAsDefaultInstance() {
}

NetProto_ActiveGetGem::NetProto_ActiveGetGem(const NetProto_ActiveGetGem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ActiveGetGem::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ActiveGetGem::~NetProto_ActiveGetGem() {
  SharedDtor();
}

void NetProto_ActiveGetGem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ActiveGetGem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ActiveGetGem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveGetGem_descriptor_;
}

const NetProto_ActiveGetGem& NetProto_ActiveGetGem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ActiveGetGem* NetProto_ActiveGetGem::default_instance_ = NULL;

NetProto_ActiveGetGem* NetProto_ActiveGetGem::New() const {
  return new NetProto_ActiveGetGem;
}

void NetProto_ActiveGetGem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ActiveGetGem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ActiveGetGem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ActiveGetGem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ActiveGetGem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ActiveGetGem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ActiveGetGem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ActiveGetGem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ActiveGetGem::MergeFrom(const NetProto_ActiveGetGem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ActiveGetGem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ActiveGetGem::CopyFrom(const NetProto_ActiveGetGem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ActiveGetGem::IsInitialized() const {
  
  return true;
}

void NetProto_ActiveGetGem::Swap(NetProto_ActiveGetGem* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ActiveGetGem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ActiveGetGem_descriptor_;
  metadata.reflection = NetProto_ActiveGetGem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ActiveFight_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveFight_ID_descriptor_;
}
bool NetProto_ActiveFight_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ActiveFight_ID NetProto_ActiveFight::GROUPID;
const NetProto_ActiveFight_ID NetProto_ActiveFight::UNITID;
const NetProto_ActiveFight_ID NetProto_ActiveFight::ID_MIN;
const NetProto_ActiveFight_ID NetProto_ActiveFight::ID_MAX;
const int NetProto_ActiveFight::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_ActiveFight::NetProto_ActiveFight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ActiveFight::InitAsDefaultInstance() {
}

NetProto_ActiveFight::NetProto_ActiveFight(const NetProto_ActiveFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ActiveFight::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ActiveFight::~NetProto_ActiveFight() {
  SharedDtor();
}

void NetProto_ActiveFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ActiveFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ActiveFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveFight_descriptor_;
}

const NetProto_ActiveFight& NetProto_ActiveFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ActiveFight* NetProto_ActiveFight::default_instance_ = NULL;

NetProto_ActiveFight* NetProto_ActiveFight::New() const {
  return new NetProto_ActiveFight;
}

void NetProto_ActiveFight::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ActiveFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_ActiveFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ActiveFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ActiveFight::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ActiveFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ActiveFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ActiveFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ActiveFight::MergeFrom(const NetProto_ActiveFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ActiveFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ActiveFight::CopyFrom(const NetProto_ActiveFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ActiveFight::IsInitialized() const {
  
  return true;
}

void NetProto_ActiveFight::Swap(NetProto_ActiveFight* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ActiveFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ActiveFight_descriptor_;
  metadata.reflection = NetProto_ActiveFight_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ActiveStrongeSolider_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveStrongeSolider_ID_descriptor_;
}
bool NetProto_ActiveStrongeSolider_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ActiveStrongeSolider_ID NetProto_ActiveStrongeSolider::GROUPID;
const NetProto_ActiveStrongeSolider_ID NetProto_ActiveStrongeSolider::UNITID;
const NetProto_ActiveStrongeSolider_ID NetProto_ActiveStrongeSolider::ID_MIN;
const NetProto_ActiveStrongeSolider_ID NetProto_ActiveStrongeSolider::ID_MAX;
const int NetProto_ActiveStrongeSolider::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ActiveStrongeSolider::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_ActiveStrongeSolider::NetProto_ActiveStrongeSolider()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ActiveStrongeSolider::InitAsDefaultInstance() {
}

NetProto_ActiveStrongeSolider::NetProto_ActiveStrongeSolider(const NetProto_ActiveStrongeSolider& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ActiveStrongeSolider::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ActiveStrongeSolider::~NetProto_ActiveStrongeSolider() {
  SharedDtor();
}

void NetProto_ActiveStrongeSolider::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ActiveStrongeSolider::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ActiveStrongeSolider::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ActiveStrongeSolider_descriptor_;
}

const NetProto_ActiveStrongeSolider& NetProto_ActiveStrongeSolider::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ActiveStrongeSolider* NetProto_ActiveStrongeSolider::default_instance_ = NULL;

NetProto_ActiveStrongeSolider* NetProto_ActiveStrongeSolider::New() const {
  return new NetProto_ActiveStrongeSolider;
}

void NetProto_ActiveStrongeSolider::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ActiveStrongeSolider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ActiveStrongeSolider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ActiveStrongeSolider::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ActiveStrongeSolider::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ActiveStrongeSolider::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ActiveStrongeSolider* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ActiveStrongeSolider*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ActiveStrongeSolider::MergeFrom(const NetProto_ActiveStrongeSolider& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ActiveStrongeSolider::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ActiveStrongeSolider::CopyFrom(const NetProto_ActiveStrongeSolider& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ActiveStrongeSolider::IsInitialized() const {
  
  return true;
}

void NetProto_ActiveStrongeSolider::Swap(NetProto_ActiveStrongeSolider* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ActiveStrongeSolider::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ActiveStrongeSolider_descriptor_;
  metadata.reflection = NetProto_ActiveStrongeSolider_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_EnterPlayOff_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EnterPlayOff_ID_descriptor_;
}
bool NetProto_EnterPlayOff_ID_IsValid(int value) {
  switch(value) {
    case 6:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_EnterPlayOff_ID NetProto_EnterPlayOff::GROUPID;
const NetProto_EnterPlayOff_ID NetProto_EnterPlayOff::UNITID;
const NetProto_EnterPlayOff_ID NetProto_EnterPlayOff::ID_MIN;
const NetProto_EnterPlayOff_ID NetProto_EnterPlayOff::ID_MAX;
const int NetProto_EnterPlayOff::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_EnterPlayOff::kIdFieldNumber;
#endif  // !_MSC_VER

NetProto_EnterPlayOff::NetProto_EnterPlayOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_EnterPlayOff::InitAsDefaultInstance() {
}

NetProto_EnterPlayOff::NetProto_EnterPlayOff(const NetProto_EnterPlayOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_EnterPlayOff::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_EnterPlayOff::~NetProto_EnterPlayOff() {
  SharedDtor();
}

void NetProto_EnterPlayOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_EnterPlayOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_EnterPlayOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_EnterPlayOff_descriptor_;
}

const NetProto_EnterPlayOff& NetProto_EnterPlayOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_EnterPlayOff* NetProto_EnterPlayOff::default_instance_ = NULL;

NetProto_EnterPlayOff* NetProto_EnterPlayOff::New() const {
  return new NetProto_EnterPlayOff;
}

void NetProto_EnterPlayOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_EnterPlayOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_EnterPlayOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_EnterPlayOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_EnterPlayOff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_EnterPlayOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_EnterPlayOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_EnterPlayOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_EnterPlayOff::MergeFrom(const NetProto_EnterPlayOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_EnterPlayOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_EnterPlayOff::CopyFrom(const NetProto_EnterPlayOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_EnterPlayOff::IsInitialized() const {
  
  return true;
}

void NetProto_EnterPlayOff::Swap(NetProto_EnterPlayOff* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_EnterPlayOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_EnterPlayOff_descriptor_;
  metadata.reflection = NetProto_EnterPlayOff_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PlayOffInfo_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PlayOffInfo_ID_descriptor_;
}
bool NetProto_PlayOffInfo_ID_IsValid(int value) {
  switch(value) {
    case 7:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PlayOffInfo_ID NetProto_PlayOffInfo::GROUPID;
const NetProto_PlayOffInfo_ID NetProto_PlayOffInfo::UNITID;
const NetProto_PlayOffInfo_ID NetProto_PlayOffInfo::ID_MIN;
const NetProto_PlayOffInfo_ID NetProto_PlayOffInfo::ID_MAX;
const int NetProto_PlayOffInfo::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_PlayOffInfo::kIdFieldNumber;
const int NetProto_PlayOffInfo::kDayFieldNumber;
const int NetProto_PlayOffInfo::kPassFieldNumber;
const int NetProto_PlayOffInfo::kOverTimeFieldNumber;
const int NetProto_PlayOffInfo::kResultFieldNumber;
const int NetProto_PlayOffInfo::kAttFieldNumber;
const int NetProto_PlayOffInfo::kResFieldNumber;
const int NetProto_PlayOffInfo::kTurnFieldNumber;
#endif  // !_MSC_VER

NetProto_PlayOffInfo::NetProto_PlayOffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PlayOffInfo::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_PlayerAtt*>(&::PB_PlayerAtt::default_instance());
}

NetProto_PlayOffInfo::NetProto_PlayOffInfo(const NetProto_PlayOffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PlayOffInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  day_ = 0;
  pass_ = 0;
  overTime_ = 0;
  result_ = 0;
  att_ = NULL;
  res_ = 0;
  turn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PlayOffInfo::~NetProto_PlayOffInfo() {
  SharedDtor();
}

void NetProto_PlayOffInfo::SharedDtor() {
  if (this != default_instance_) {
    delete att_;
  }
}

void NetProto_PlayOffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PlayOffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PlayOffInfo_descriptor_;
}

const NetProto_PlayOffInfo& NetProto_PlayOffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PlayOffInfo* NetProto_PlayOffInfo::default_instance_ = NULL;

NetProto_PlayOffInfo* NetProto_PlayOffInfo::New() const {
  return new NetProto_PlayOffInfo;
}

void NetProto_PlayOffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    day_ = 0;
    pass_ = 0;
    overTime_ = 0;
    result_ = 0;
    if (has_att()) {
      if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
    }
    res_ = 0;
    turn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PlayOffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }
      
      // optional int32 day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass;
        break;
      }
      
      // optional int32 pass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_overTime;
        break;
      }
      
      // optional int32 overTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overTime_)));
          set_has_overTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }
      
      // optional int32 result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_att;
        break;
      }
      
      // optional .PB_PlayerAtt att = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_res;
        break;
      }
      
      // optional int32 res = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_turn;
        break;
      }
      
      // optional int32 turn = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_)));
          set_has_turn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_PlayOffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }
  
  // optional int32 pass = 3;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pass(), output);
  }
  
  // optional int32 overTime = 4;
  if (has_overTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->overTime(), output);
  }
  
  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }
  
  // optional .PB_PlayerAtt att = 6;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->att(), output);
  }
  
  // optional int32 res = 7;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->res(), output);
  }
  
  // optional int32 turn = 8;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->turn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PlayOffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }
  
  // optional int32 pass = 3;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pass(), target);
  }
  
  // optional int32 overTime = 4;
  if (has_overTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->overTime(), target);
  }
  
  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }
  
  // optional .PB_PlayerAtt att = 6;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->att(), target);
  }
  
  // optional int32 res = 7;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->res(), target);
  }
  
  // optional int32 turn = 8;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->turn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PlayOffInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }
    
    // optional int32 pass = 3;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }
    
    // optional int32 overTime = 4;
    if (has_overTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overTime());
    }
    
    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional .PB_PlayerAtt att = 6;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional int32 res = 7;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
    // optional int32 turn = 8;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PlayOffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PlayOffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PlayOffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PlayOffInfo::MergeFrom(const NetProto_PlayOffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_overTime()) {
      set_overTime(from.overTime());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_att()) {
      mutable_att()->::PB_PlayerAtt::MergeFrom(from.att());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_turn()) {
      set_turn(from.turn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PlayOffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PlayOffInfo::CopyFrom(const NetProto_PlayOffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PlayOffInfo::IsInitialized() const {
  
  return true;
}

void NetProto_PlayOffInfo::Swap(NetProto_PlayOffInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(day_, other->day_);
    std::swap(pass_, other->pass_);
    std::swap(overTime_, other->overTime_);
    std::swap(result_, other->result_);
    std::swap(att_, other->att_);
    std::swap(res_, other->res_);
    std::swap(turn_, other->turn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PlayOffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PlayOffInfo_descriptor_;
  metadata.reflection = NetProto_PlayOffInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_PreparePlayOff_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PreparePlayOff_ID_descriptor_;
}
bool NetProto_PreparePlayOff_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_PreparePlayOff_ID NetProto_PreparePlayOff::GROUPID;
const NetProto_PreparePlayOff_ID NetProto_PreparePlayOff::UNITID;
const NetProto_PreparePlayOff_ID NetProto_PreparePlayOff::ID_MIN;
const NetProto_PreparePlayOff_ID NetProto_PreparePlayOff::ID_MAX;
const int NetProto_PreparePlayOff::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_PreparePlayOff::NetProto_PreparePlayOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_PreparePlayOff::InitAsDefaultInstance() {
}

NetProto_PreparePlayOff::NetProto_PreparePlayOff(const NetProto_PreparePlayOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_PreparePlayOff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_PreparePlayOff::~NetProto_PreparePlayOff() {
  SharedDtor();
}

void NetProto_PreparePlayOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_PreparePlayOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_PreparePlayOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_PreparePlayOff_descriptor_;
}

const NetProto_PreparePlayOff& NetProto_PreparePlayOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_PreparePlayOff* NetProto_PreparePlayOff::default_instance_ = NULL;

NetProto_PreparePlayOff* NetProto_PreparePlayOff::New() const {
  return new NetProto_PreparePlayOff;
}

void NetProto_PreparePlayOff::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_PreparePlayOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_PreparePlayOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_PreparePlayOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_PreparePlayOff::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_PreparePlayOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_PreparePlayOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_PreparePlayOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_PreparePlayOff::MergeFrom(const NetProto_PreparePlayOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_PreparePlayOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_PreparePlayOff::CopyFrom(const NetProto_PreparePlayOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_PreparePlayOff::IsInitialized() const {
  
  return true;
}

void NetProto_PreparePlayOff::Swap(NetProto_PreparePlayOff* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_PreparePlayOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_PreparePlayOff_descriptor_;
  metadata.reflection = NetProto_PreparePlayOff_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Treasure_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Treasure_ID_descriptor_;
}
bool NetProto_Treasure_ID_IsValid(int value) {
  switch(value) {
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Treasure_ID NetProto_Treasure::GROUPID;
const NetProto_Treasure_ID NetProto_Treasure::UNITID;
const NetProto_Treasure_ID NetProto_Treasure::ID_MIN;
const NetProto_Treasure_ID NetProto_Treasure::ID_MAX;
const int NetProto_Treasure::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Treasure::kIndexFieldNumber;
const int NetProto_Treasure::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_Treasure::NetProto_Treasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Treasure::InitAsDefaultInstance() {
}

NetProto_Treasure::NetProto_Treasure(const NetProto_Treasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Treasure::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Treasure::~NetProto_Treasure() {
  SharedDtor();
}

void NetProto_Treasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Treasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Treasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Treasure_descriptor_;
}

const NetProto_Treasure& NetProto_Treasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Treasure* NetProto_Treasure::default_instance_ = NULL;

NetProto_Treasure* NetProto_Treasure::New() const {
  return new NetProto_Treasure;
}

void NetProto_Treasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Treasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Treasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Treasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Treasure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Treasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Treasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Treasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Treasure::MergeFrom(const NetProto_Treasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Treasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Treasure::CopyFrom(const NetProto_Treasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Treasure::IsInitialized() const {
  
  return true;
}

void NetProto_Treasure::Swap(NetProto_Treasure* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Treasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Treasure_descriptor_;
  metadata.reflection = NetProto_Treasure_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Hire_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Hire_ID_descriptor_;
}
bool NetProto_Hire_ID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Hire_ID NetProto_Hire::GROUPID;
const NetProto_Hire_ID NetProto_Hire::UNITID;
const NetProto_Hire_ID NetProto_Hire::ID_MIN;
const NetProto_Hire_ID NetProto_Hire::ID_MAX;
const int NetProto_Hire::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Hire::kAttFieldNumber;
const int NetProto_Hire::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_Hire::NetProto_Hire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Hire::InitAsDefaultInstance() {
}

NetProto_Hire::NetProto_Hire(const NetProto_Hire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Hire::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Hire::~NetProto_Hire() {
  SharedDtor();
}

void NetProto_Hire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Hire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Hire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Hire_descriptor_;
}

const NetProto_Hire& NetProto_Hire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Hire* NetProto_Hire::default_instance_ = NULL;

NetProto_Hire* NetProto_Hire::New() const {
  return new NetProto_Hire;
}

void NetProto_Hire::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    index_ = 0;
  }
  att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Hire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_PlayerAtt att = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_att;
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Hire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_PlayerAtt att = 1;
  for (int i = 0; i < this->att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->att(i), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Hire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_PlayerAtt att = 1;
  for (int i = 0; i < this->att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->att(i), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Hire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  // repeated .PB_PlayerAtt att = 1;
  total_size += 1 * this->att_size();
  for (int i = 0; i < this->att_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->att(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Hire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Hire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Hire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Hire::MergeFrom(const NetProto_Hire& from) {
  GOOGLE_CHECK_NE(&from, this);
  att_.MergeFrom(from.att_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Hire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Hire::CopyFrom(const NetProto_Hire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Hire::IsInitialized() const {
  
  return true;
}

void NetProto_Hire::Swap(NetProto_Hire* other) {
  if (other != this) {
    att_.Swap(&other->att_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Hire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Hire_descriptor_;
  metadata.reflection = NetProto_Hire_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_MoneyTree_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_MoneyTree_ID_descriptor_;
}
bool NetProto_MoneyTree_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_MoneyTree_ID NetProto_MoneyTree::GROUPID;
const NetProto_MoneyTree_ID NetProto_MoneyTree::UNITID;
const NetProto_MoneyTree_ID NetProto_MoneyTree::ID_MIN;
const NetProto_MoneyTree_ID NetProto_MoneyTree::ID_MAX;
const int NetProto_MoneyTree::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_MoneyTree::kIndexFieldNumber;
const int NetProto_MoneyTree::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_MoneyTree::NetProto_MoneyTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_MoneyTree::InitAsDefaultInstance() {
}

NetProto_MoneyTree::NetProto_MoneyTree(const NetProto_MoneyTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_MoneyTree::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_MoneyTree::~NetProto_MoneyTree() {
  SharedDtor();
}

void NetProto_MoneyTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_MoneyTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_MoneyTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_MoneyTree_descriptor_;
}

const NetProto_MoneyTree& NetProto_MoneyTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_MoneyTree* NetProto_MoneyTree::default_instance_ = NULL;

NetProto_MoneyTree* NetProto_MoneyTree::New() const {
  return new NetProto_MoneyTree;
}

void NetProto_MoneyTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_MoneyTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_MoneyTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_MoneyTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_MoneyTree::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_MoneyTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_MoneyTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_MoneyTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_MoneyTree::MergeFrom(const NetProto_MoneyTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_MoneyTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_MoneyTree::CopyFrom(const NetProto_MoneyTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_MoneyTree::IsInitialized() const {
  
  return true;
}

void NetProto_MoneyTree::Swap(NetProto_MoneyTree* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_MoneyTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_MoneyTree_descriptor_;
  metadata.reflection = NetProto_MoneyTree_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_TreasureBox_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TreasureBox_ID_descriptor_;
}
bool NetProto_TreasureBox_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_TreasureBox_ID NetProto_TreasureBox::GROUPID;
const NetProto_TreasureBox_ID NetProto_TreasureBox::UNITID;
const NetProto_TreasureBox_ID NetProto_TreasureBox::ID_MIN;
const NetProto_TreasureBox_ID NetProto_TreasureBox::ID_MAX;
const int NetProto_TreasureBox::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_TreasureBox::kItemsFieldNumber;
#endif  // !_MSC_VER

NetProto_TreasureBox::NetProto_TreasureBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_TreasureBox::InitAsDefaultInstance() {
}

NetProto_TreasureBox::NetProto_TreasureBox(const NetProto_TreasureBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_TreasureBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_TreasureBox::~NetProto_TreasureBox() {
  SharedDtor();
}

void NetProto_TreasureBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_TreasureBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_TreasureBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TreasureBox_descriptor_;
}

const NetProto_TreasureBox& NetProto_TreasureBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_TreasureBox* NetProto_TreasureBox::default_instance_ = NULL;

NetProto_TreasureBox* NetProto_TreasureBox::New() const {
  return new NetProto_TreasureBox;
}

void NetProto_TreasureBox::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_TreasureBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_ItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_TreasureBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_TreasureBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_TreasureBox::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_ItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_TreasureBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_TreasureBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_TreasureBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_TreasureBox::MergeFrom(const NetProto_TreasureBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_TreasureBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_TreasureBox::CopyFrom(const NetProto_TreasureBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_TreasureBox::IsInitialized() const {
  
  return true;
}

void NetProto_TreasureBox::Swap(NetProto_TreasureBox* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_TreasureBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_TreasureBox_descriptor_;
  metadata.reflection = NetProto_TreasureBox_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FlyPlan_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FlyPlan_ID_descriptor_;
}
bool NetProto_FlyPlan_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FlyPlan_ID NetProto_FlyPlan::GROUPID;
const NetProto_FlyPlan_ID NetProto_FlyPlan::UNITID;
const NetProto_FlyPlan_ID NetProto_FlyPlan::ID_MIN;
const NetProto_FlyPlan_ID NetProto_FlyPlan::ID_MAX;
const int NetProto_FlyPlan::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FlyPlan::kIndexFieldNumber;
#endif  // !_MSC_VER

NetProto_FlyPlan::NetProto_FlyPlan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FlyPlan::InitAsDefaultInstance() {
}

NetProto_FlyPlan::NetProto_FlyPlan(const NetProto_FlyPlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FlyPlan::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FlyPlan::~NetProto_FlyPlan() {
  SharedDtor();
}

void NetProto_FlyPlan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_FlyPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FlyPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FlyPlan_descriptor_;
}

const NetProto_FlyPlan& NetProto_FlyPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FlyPlan* NetProto_FlyPlan::default_instance_ = NULL;

NetProto_FlyPlan* NetProto_FlyPlan::New() const {
  return new NetProto_FlyPlan;
}

void NetProto_FlyPlan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FlyPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FlyPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FlyPlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FlyPlan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FlyPlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FlyPlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FlyPlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FlyPlan::MergeFrom(const NetProto_FlyPlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FlyPlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FlyPlan::CopyFrom(const NetProto_FlyPlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FlyPlan::IsInitialized() const {
  
  return true;
}

void NetProto_FlyPlan::Swap(NetProto_FlyPlan* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FlyPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FlyPlan_descriptor_;
  metadata.reflection = NetProto_FlyPlan_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_BlessCome_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BlessCome_ID_descriptor_;
}
bool NetProto_BlessCome_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_BlessCome_ID NetProto_BlessCome::GROUPID;
const NetProto_BlessCome_ID NetProto_BlessCome::UNITID;
const NetProto_BlessCome_ID NetProto_BlessCome::ID_MIN;
const NetProto_BlessCome_ID NetProto_BlessCome::ID_MAX;
const int NetProto_BlessCome::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_BlessCome::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_BlessCome::NetProto_BlessCome()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_BlessCome::InitAsDefaultInstance() {
}

NetProto_BlessCome::NetProto_BlessCome(const NetProto_BlessCome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_BlessCome::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_BlessCome::~NetProto_BlessCome() {
  SharedDtor();
}

void NetProto_BlessCome::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_BlessCome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_BlessCome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_BlessCome_descriptor_;
}

const NetProto_BlessCome& NetProto_BlessCome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_BlessCome* NetProto_BlessCome::default_instance_ = NULL;

NetProto_BlessCome* NetProto_BlessCome::New() const {
  return new NetProto_BlessCome;
}

void NetProto_BlessCome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_BlessCome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_BlessCome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_BlessCome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_BlessCome::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_BlessCome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_BlessCome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_BlessCome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_BlessCome::MergeFrom(const NetProto_BlessCome& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_BlessCome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_BlessCome::CopyFrom(const NetProto_BlessCome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_BlessCome::IsInitialized() const {
  
  return true;
}

void NetProto_BlessCome::Swap(NetProto_BlessCome* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_BlessCome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_BlessCome_descriptor_;
  metadata.reflection = NetProto_BlessCome_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ModifyBlessScore_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyBlessScore_ID_descriptor_;
}
bool NetProto_ModifyBlessScore_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ModifyBlessScore_ID NetProto_ModifyBlessScore::GROUPID;
const NetProto_ModifyBlessScore_ID NetProto_ModifyBlessScore::UNITID;
const NetProto_ModifyBlessScore_ID NetProto_ModifyBlessScore::ID_MIN;
const NetProto_ModifyBlessScore_ID NetProto_ModifyBlessScore::ID_MAX;
const int NetProto_ModifyBlessScore::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ModifyBlessScore::kBlessFieldNumber;
#endif  // !_MSC_VER

NetProto_ModifyBlessScore::NetProto_ModifyBlessScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ModifyBlessScore::InitAsDefaultInstance() {
}

NetProto_ModifyBlessScore::NetProto_ModifyBlessScore(const NetProto_ModifyBlessScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ModifyBlessScore::SharedCtor() {
  _cached_size_ = 0;
  bless_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ModifyBlessScore::~NetProto_ModifyBlessScore() {
  SharedDtor();
}

void NetProto_ModifyBlessScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ModifyBlessScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ModifyBlessScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ModifyBlessScore_descriptor_;
}

const NetProto_ModifyBlessScore& NetProto_ModifyBlessScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ModifyBlessScore* NetProto_ModifyBlessScore::default_instance_ = NULL;

NetProto_ModifyBlessScore* NetProto_ModifyBlessScore::New() const {
  return new NetProto_ModifyBlessScore;
}

void NetProto_ModifyBlessScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bless_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ModifyBlessScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bless = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_)));
          set_has_bless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ModifyBlessScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bless = 1;
  if (has_bless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bless(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ModifyBlessScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bless = 1;
  if (has_bless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bless(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ModifyBlessScore::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bless = 1;
    if (has_bless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ModifyBlessScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ModifyBlessScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ModifyBlessScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ModifyBlessScore::MergeFrom(const NetProto_ModifyBlessScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bless()) {
      set_bless(from.bless());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ModifyBlessScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ModifyBlessScore::CopyFrom(const NetProto_ModifyBlessScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ModifyBlessScore::IsInitialized() const {
  
  return true;
}

void NetProto_ModifyBlessScore::Swap(NetProto_ModifyBlessScore* other) {
  if (other != this) {
    std::swap(bless_, other->bless_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ModifyBlessScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ModifyBlessScore_descriptor_;
  metadata.reflection = NetProto_ModifyBlessScore_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_TopUpObtRMB_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TopUpObtRMB_ID_descriptor_;
}
bool NetProto_TopUpObtRMB_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_TopUpObtRMB_ID NetProto_TopUpObtRMB::GROUPID;
const NetProto_TopUpObtRMB_ID NetProto_TopUpObtRMB::UNITID;
const NetProto_TopUpObtRMB_ID NetProto_TopUpObtRMB::ID_MIN;
const NetProto_TopUpObtRMB_ID NetProto_TopUpObtRMB::ID_MAX;
const int NetProto_TopUpObtRMB::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

NetProto_TopUpObtRMB::NetProto_TopUpObtRMB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_TopUpObtRMB::InitAsDefaultInstance() {
}

NetProto_TopUpObtRMB::NetProto_TopUpObtRMB(const NetProto_TopUpObtRMB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_TopUpObtRMB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_TopUpObtRMB::~NetProto_TopUpObtRMB() {
  SharedDtor();
}

void NetProto_TopUpObtRMB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_TopUpObtRMB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_TopUpObtRMB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_TopUpObtRMB_descriptor_;
}

const NetProto_TopUpObtRMB& NetProto_TopUpObtRMB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_TopUpObtRMB* NetProto_TopUpObtRMB::default_instance_ = NULL;

NetProto_TopUpObtRMB* NetProto_TopUpObtRMB::New() const {
  return new NetProto_TopUpObtRMB;
}

void NetProto_TopUpObtRMB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_TopUpObtRMB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NetProto_TopUpObtRMB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_TopUpObtRMB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_TopUpObtRMB::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_TopUpObtRMB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_TopUpObtRMB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_TopUpObtRMB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_TopUpObtRMB::MergeFrom(const NetProto_TopUpObtRMB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_TopUpObtRMB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_TopUpObtRMB::CopyFrom(const NetProto_TopUpObtRMB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_TopUpObtRMB::IsInitialized() const {
  
  return true;
}

void NetProto_TopUpObtRMB::Swap(NetProto_TopUpObtRMB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_TopUpObtRMB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_TopUpObtRMB_descriptor_;
  metadata.reflection = NetProto_TopUpObtRMB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_ServerOpenTime_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ServerOpenTime_ID_descriptor_;
}
bool NetProto_ServerOpenTime_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_ServerOpenTime_ID NetProto_ServerOpenTime::GROUPID;
const NetProto_ServerOpenTime_ID NetProto_ServerOpenTime::UNITID;
const NetProto_ServerOpenTime_ID NetProto_ServerOpenTime::ID_MIN;
const NetProto_ServerOpenTime_ID NetProto_ServerOpenTime::ID_MAX;
const int NetProto_ServerOpenTime::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_ServerOpenTime::kServerOpenTimeFieldNumber;
#endif  // !_MSC_VER

NetProto_ServerOpenTime::NetProto_ServerOpenTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_ServerOpenTime::InitAsDefaultInstance() {
}

NetProto_ServerOpenTime::NetProto_ServerOpenTime(const NetProto_ServerOpenTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_ServerOpenTime::SharedCtor() {
  _cached_size_ = 0;
  serverOpenTime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_ServerOpenTime::~NetProto_ServerOpenTime() {
  SharedDtor();
}

void NetProto_ServerOpenTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_ServerOpenTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_ServerOpenTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_ServerOpenTime_descriptor_;
}

const NetProto_ServerOpenTime& NetProto_ServerOpenTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_ServerOpenTime* NetProto_ServerOpenTime::default_instance_ = NULL;

NetProto_ServerOpenTime* NetProto_ServerOpenTime::New() const {
  return new NetProto_ServerOpenTime;
}

void NetProto_ServerOpenTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverOpenTime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_ServerOpenTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serverOpenTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverOpenTime_)));
          set_has_serverOpenTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_ServerOpenTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 serverOpenTime = 1;
  if (has_serverOpenTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverOpenTime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_ServerOpenTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 serverOpenTime = 1;
  if (has_serverOpenTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverOpenTime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_ServerOpenTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 serverOpenTime = 1;
    if (has_serverOpenTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverOpenTime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_ServerOpenTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_ServerOpenTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_ServerOpenTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_ServerOpenTime::MergeFrom(const NetProto_ServerOpenTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverOpenTime()) {
      set_serverOpenTime(from.serverOpenTime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_ServerOpenTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_ServerOpenTime::CopyFrom(const NetProto_ServerOpenTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_ServerOpenTime::IsInitialized() const {
  
  return true;
}

void NetProto_ServerOpenTime::Swap(NetProto_ServerOpenTime* other) {
  if (other != this) {
    std::swap(serverOpenTime_, other->serverOpenTime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_ServerOpenTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_ServerOpenTime_descriptor_;
  metadata.reflection = NetProto_ServerOpenTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_InvateCode_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_InvateCode_ID_descriptor_;
}
bool NetProto_InvateCode_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_InvateCode_ID NetProto_InvateCode::GROUPID;
const NetProto_InvateCode_ID NetProto_InvateCode::UNITID;
const NetProto_InvateCode_ID NetProto_InvateCode::ID_MIN;
const NetProto_InvateCode_ID NetProto_InvateCode::ID_MAX;
const int NetProto_InvateCode::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_InvateCode::kOthercodeFieldNumber;
#endif  // !_MSC_VER

NetProto_InvateCode::NetProto_InvateCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_InvateCode::InitAsDefaultInstance() {
}

NetProto_InvateCode::NetProto_InvateCode(const NetProto_InvateCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_InvateCode::SharedCtor() {
  _cached_size_ = 0;
  othercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_InvateCode::~NetProto_InvateCode() {
  SharedDtor();
}

void NetProto_InvateCode::SharedDtor() {
  if (othercode_ != &::google::protobuf::internal::kEmptyString) {
    delete othercode_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_InvateCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_InvateCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_InvateCode_descriptor_;
}

const NetProto_InvateCode& NetProto_InvateCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_InvateCode* NetProto_InvateCode::default_instance_ = NULL;

NetProto_InvateCode* NetProto_InvateCode::New() const {
  return new NetProto_InvateCode;
}

void NetProto_InvateCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_othercode()) {
      if (othercode_ != &::google::protobuf::internal::kEmptyString) {
        othercode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_InvateCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string othercode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othercode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->othercode().data(), this->othercode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_InvateCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string othercode = 1;
  if (has_othercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othercode().data(), this->othercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->othercode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_InvateCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string othercode = 1;
  if (has_othercode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othercode().data(), this->othercode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->othercode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_InvateCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string othercode = 1;
    if (has_othercode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othercode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_InvateCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_InvateCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_InvateCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_InvateCode::MergeFrom(const NetProto_InvateCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othercode()) {
      set_othercode(from.othercode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_InvateCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_InvateCode::CopyFrom(const NetProto_InvateCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_InvateCode::IsInitialized() const {
  
  return true;
}

void NetProto_InvateCode::Swap(NetProto_InvateCode* other) {
  if (other != this) {
    std::swap(othercode_, other->othercode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_InvateCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_InvateCode_descriptor_;
  metadata.reflection = NetProto_InvateCode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_UpdateInvateCount_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UpdateInvateCount_ID_descriptor_;
}
bool NetProto_UpdateInvateCount_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_UpdateInvateCount_ID NetProto_UpdateInvateCount::GROUPID;
const NetProto_UpdateInvateCount_ID NetProto_UpdateInvateCount::UNITID;
const NetProto_UpdateInvateCount_ID NetProto_UpdateInvateCount::ID_MIN;
const NetProto_UpdateInvateCount_ID NetProto_UpdateInvateCount::ID_MAX;
const int NetProto_UpdateInvateCount::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_UpdateInvateCount::kCountFieldNumber;
#endif  // !_MSC_VER

NetProto_UpdateInvateCount::NetProto_UpdateInvateCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_UpdateInvateCount::InitAsDefaultInstance() {
}

NetProto_UpdateInvateCount::NetProto_UpdateInvateCount(const NetProto_UpdateInvateCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_UpdateInvateCount::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_UpdateInvateCount::~NetProto_UpdateInvateCount() {
  SharedDtor();
}

void NetProto_UpdateInvateCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_UpdateInvateCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_UpdateInvateCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_UpdateInvateCount_descriptor_;
}

const NetProto_UpdateInvateCount& NetProto_UpdateInvateCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_UpdateInvateCount* NetProto_UpdateInvateCount::default_instance_ = NULL;

NetProto_UpdateInvateCount* NetProto_UpdateInvateCount::New() const {
  return new NetProto_UpdateInvateCount;
}

void NetProto_UpdateInvateCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_UpdateInvateCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_UpdateInvateCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_UpdateInvateCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_UpdateInvateCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_UpdateInvateCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_UpdateInvateCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_UpdateInvateCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_UpdateInvateCount::MergeFrom(const NetProto_UpdateInvateCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_UpdateInvateCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_UpdateInvateCount::CopyFrom(const NetProto_UpdateInvateCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_UpdateInvateCount::IsInitialized() const {
  
  return true;
}

void NetProto_UpdateInvateCount::Swap(NetProto_UpdateInvateCount* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_UpdateInvateCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_UpdateInvateCount_descriptor_;
  metadata.reflection = NetProto_UpdateInvateCount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_CreateFaction_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CreateFaction_ID_descriptor_;
}
bool NetProto_CreateFaction_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_CreateFaction_ID NetProto_CreateFaction::GROUPID;
const NetProto_CreateFaction_ID NetProto_CreateFaction::UNITID;
const NetProto_CreateFaction_ID NetProto_CreateFaction::ID_MIN;
const NetProto_CreateFaction_ID NetProto_CreateFaction::ID_MAX;
const int NetProto_CreateFaction::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_CreateFaction::kStrFieldNumber;
const int NetProto_CreateFaction::kResFieldNumber;
#endif  // !_MSC_VER

NetProto_CreateFaction::NetProto_CreateFaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_CreateFaction::InitAsDefaultInstance() {
}

NetProto_CreateFaction::NetProto_CreateFaction(const NetProto_CreateFaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_CreateFaction::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_CreateFaction::~NetProto_CreateFaction() {
  SharedDtor();
}

void NetProto_CreateFaction::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_CreateFaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_CreateFaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_CreateFaction_descriptor_;
}

const NetProto_CreateFaction& NetProto_CreateFaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_CreateFaction* NetProto_CreateFaction::default_instance_ = NULL;

NetProto_CreateFaction* NetProto_CreateFaction::New() const {
  return new NetProto_CreateFaction;
}

void NetProto_CreateFaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_CreateFaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }
      
      // optional int32 res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_CreateFaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }
  
  // optional int32 res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_CreateFaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }
  
  // optional int32 res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_CreateFaction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional int32 res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_CreateFaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_CreateFaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_CreateFaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_CreateFaction::MergeFrom(const NetProto_CreateFaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_CreateFaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_CreateFaction::CopyFrom(const NetProto_CreateFaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_CreateFaction::IsInitialized() const {
  
  return true;
}

void NetProto_CreateFaction::Swap(NetProto_CreateFaction* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_CreateFaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_CreateFaction_descriptor_;
  metadata.reflection = NetProto_CreateFaction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DelFaction_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelFaction_ID_descriptor_;
}
bool NetProto_DelFaction_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DelFaction_ID NetProto_DelFaction::GROUPID;
const NetProto_DelFaction_ID NetProto_DelFaction::UNITID;
const NetProto_DelFaction_ID NetProto_DelFaction::ID_MIN;
const NetProto_DelFaction_ID NetProto_DelFaction::ID_MAX;
const int NetProto_DelFaction::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DelFaction::kResFieldNumber;
#endif  // !_MSC_VER

NetProto_DelFaction::NetProto_DelFaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DelFaction::InitAsDefaultInstance() {
}

NetProto_DelFaction::NetProto_DelFaction(const NetProto_DelFaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DelFaction::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DelFaction::~NetProto_DelFaction() {
  SharedDtor();
}

void NetProto_DelFaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DelFaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DelFaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelFaction_descriptor_;
}

const NetProto_DelFaction& NetProto_DelFaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DelFaction* NetProto_DelFaction::default_instance_ = NULL;

NetProto_DelFaction* NetProto_DelFaction::New() const {
  return new NetProto_DelFaction;
}

void NetProto_DelFaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DelFaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DelFaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DelFaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DelFaction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DelFaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DelFaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DelFaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DelFaction::MergeFrom(const NetProto_DelFaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DelFaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DelFaction::CopyFrom(const NetProto_DelFaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DelFaction::IsInitialized() const {
  
  return true;
}

void NetProto_DelFaction::Swap(NetProto_DelFaction* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DelFaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DelFaction_descriptor_;
  metadata.reflection = NetProto_DelFaction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Donate_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Donate_ID_descriptor_;
}
bool NetProto_Donate_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Donate_ID NetProto_Donate::GROUPID;
const NetProto_Donate_ID NetProto_Donate::UNITID;
const NetProto_Donate_ID NetProto_Donate::ID_MIN;
const NetProto_Donate_ID NetProto_Donate::ID_MAX;
const int NetProto_Donate::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Donate::kTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_Donate::NetProto_Donate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Donate::InitAsDefaultInstance() {
}

NetProto_Donate::NetProto_Donate(const NetProto_Donate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Donate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Donate::~NetProto_Donate() {
  SharedDtor();
}

void NetProto_Donate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Donate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Donate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Donate_descriptor_;
}

const NetProto_Donate& NetProto_Donate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Donate* NetProto_Donate::default_instance_ = NULL;

NetProto_Donate* NetProto_Donate::New() const {
  return new NetProto_Donate;
}

void NetProto_Donate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Donate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Donate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Donate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Donate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Donate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Donate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Donate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Donate::MergeFrom(const NetProto_Donate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Donate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Donate::CopyFrom(const NetProto_Donate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Donate::IsInitialized() const {
  
  return true;
}

void NetProto_Donate::Swap(NetProto_Donate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Donate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Donate_descriptor_;
  metadata.reflection = NetProto_Donate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionNotice_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionNotice_ID_descriptor_;
}
bool NetProto_FactionNotice_ID_IsValid(int value) {
  switch(value) {
    case 3:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionNotice_ID NetProto_FactionNotice::GROUPID;
const NetProto_FactionNotice_ID NetProto_FactionNotice::UNITID;
const NetProto_FactionNotice_ID NetProto_FactionNotice::ID_MIN;
const NetProto_FactionNotice_ID NetProto_FactionNotice::ID_MAX;
const int NetProto_FactionNotice::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionNotice::kStrFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionNotice::NetProto_FactionNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionNotice::InitAsDefaultInstance() {
}

NetProto_FactionNotice::NetProto_FactionNotice(const NetProto_FactionNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionNotice::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionNotice::~NetProto_FactionNotice() {
  SharedDtor();
}

void NetProto_FactionNotice::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_FactionNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionNotice_descriptor_;
}

const NetProto_FactionNotice& NetProto_FactionNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionNotice* NetProto_FactionNotice::default_instance_ = NULL;

NetProto_FactionNotice* NetProto_FactionNotice::New() const {
  return new NetProto_FactionNotice;
}

void NetProto_FactionNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionNotice::MergeFrom(const NetProto_FactionNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionNotice::CopyFrom(const NetProto_FactionNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionNotice::IsInitialized() const {
  
  return true;
}

void NetProto_FactionNotice::Swap(NetProto_FactionNotice* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionNotice_descriptor_;
  metadata.reflection = NetProto_FactionNotice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Designate_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Designate_ID_descriptor_;
}
bool NetProto_Designate_ID_IsValid(int value) {
  switch(value) {
    case 4:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Designate_ID NetProto_Designate::GROUPID;
const NetProto_Designate_ID NetProto_Designate::UNITID;
const NetProto_Designate_ID NetProto_Designate::ID_MIN;
const NetProto_Designate_ID NetProto_Designate::ID_MAX;
const int NetProto_Designate::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Designate::kRoleIDFieldNumber;
const int NetProto_Designate::kTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_Designate::NetProto_Designate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Designate::InitAsDefaultInstance() {
}

NetProto_Designate::NetProto_Designate(const NetProto_Designate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Designate::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Designate::~NetProto_Designate() {
  SharedDtor();
}

void NetProto_Designate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Designate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Designate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Designate_descriptor_;
}

const NetProto_Designate& NetProto_Designate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Designate* NetProto_Designate::default_instance_ = NULL;

NetProto_Designate* NetProto_Designate::New() const {
  return new NetProto_Designate;
}

void NetProto_Designate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Designate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Designate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Designate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Designate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Designate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Designate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Designate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Designate::MergeFrom(const NetProto_Designate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Designate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Designate::CopyFrom(const NetProto_Designate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Designate::IsInitialized() const {
  
  return true;
}

void NetProto_Designate::Swap(NetProto_Designate* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Designate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Designate_descriptor_;
  metadata.reflection = NetProto_Designate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AddMem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddMem_ID_descriptor_;
}
bool NetProto_AddMem_ID_IsValid(int value) {
  switch(value) {
    case 5:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AddMem_ID NetProto_AddMem::GROUPID;
const NetProto_AddMem_ID NetProto_AddMem::UNITID;
const NetProto_AddMem_ID NetProto_AddMem::ID_MIN;
const NetProto_AddMem_ID NetProto_AddMem::ID_MAX;
const int NetProto_AddMem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AddMem::kRoleIDFieldNumber;
const int NetProto_AddMem::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_AddMem::NetProto_AddMem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AddMem::InitAsDefaultInstance() {
}

NetProto_AddMem::NetProto_AddMem(const NetProto_AddMem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AddMem::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AddMem::~NetProto_AddMem() {
  SharedDtor();
}

void NetProto_AddMem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_AddMem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AddMem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AddMem_descriptor_;
}

const NetProto_AddMem& NetProto_AddMem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AddMem* NetProto_AddMem::default_instance_ = NULL;

NetProto_AddMem* NetProto_AddMem::New() const {
  return new NetProto_AddMem;
}

void NetProto_AddMem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AddMem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AddMem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AddMem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AddMem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AddMem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AddMem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AddMem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AddMem::MergeFrom(const NetProto_AddMem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AddMem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AddMem::CopyFrom(const NetProto_AddMem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AddMem::IsInitialized() const {
  
  return true;
}

void NetProto_AddMem::Swap(NetProto_AddMem* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AddMem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AddMem_descriptor_;
  metadata.reflection = NetProto_AddMem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_DelMem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelMem_ID_descriptor_;
}
bool NetProto_DelMem_ID_IsValid(int value) {
  switch(value) {
    case 6:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_DelMem_ID NetProto_DelMem::GROUPID;
const NetProto_DelMem_ID NetProto_DelMem::UNITID;
const NetProto_DelMem_ID NetProto_DelMem::ID_MIN;
const NetProto_DelMem_ID NetProto_DelMem::ID_MAX;
const int NetProto_DelMem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_DelMem::kRoleIDFieldNumber;
#endif  // !_MSC_VER

NetProto_DelMem::NetProto_DelMem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_DelMem::InitAsDefaultInstance() {
}

NetProto_DelMem::NetProto_DelMem(const NetProto_DelMem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_DelMem::SharedCtor() {
  _cached_size_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_DelMem::~NetProto_DelMem() {
  SharedDtor();
}

void NetProto_DelMem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_DelMem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_DelMem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_DelMem_descriptor_;
}

const NetProto_DelMem& NetProto_DelMem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_DelMem* NetProto_DelMem::default_instance_ = NULL;

NetProto_DelMem* NetProto_DelMem::New() const {
  return new NetProto_DelMem;
}

void NetProto_DelMem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_DelMem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_DelMem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_DelMem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID = 1;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_DelMem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID = 1;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_DelMem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_DelMem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_DelMem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_DelMem::MergeFrom(const NetProto_DelMem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_DelMem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_DelMem::CopyFrom(const NetProto_DelMem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_DelMem::IsInitialized() const {
  
  return true;
}

void NetProto_DelMem::Swap(NetProto_DelMem* other) {
  if (other != this) {
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_DelMem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_DelMem_descriptor_;
  metadata.reflection = NetProto_DelMem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Applicant_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Applicant_ID_descriptor_;
}
bool NetProto_Applicant_ID_IsValid(int value) {
  switch(value) {
    case 7:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Applicant_ID NetProto_Applicant::GROUPID;
const NetProto_Applicant_ID NetProto_Applicant::UNITID;
const NetProto_Applicant_ID NetProto_Applicant::ID_MIN;
const NetProto_Applicant_ID NetProto_Applicant::ID_MAX;
const int NetProto_Applicant::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Applicant::kStrFieldNumber;
#endif  // !_MSC_VER

NetProto_Applicant::NetProto_Applicant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Applicant::InitAsDefaultInstance() {
}

NetProto_Applicant::NetProto_Applicant(const NetProto_Applicant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Applicant::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Applicant::~NetProto_Applicant() {
  SharedDtor();
}

void NetProto_Applicant::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_Applicant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Applicant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Applicant_descriptor_;
}

const NetProto_Applicant& NetProto_Applicant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Applicant* NetProto_Applicant::default_instance_ = NULL;

NetProto_Applicant* NetProto_Applicant::New() const {
  return new NetProto_Applicant;
}

void NetProto_Applicant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Applicant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Applicant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Applicant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Applicant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Applicant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Applicant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Applicant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Applicant::MergeFrom(const NetProto_Applicant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Applicant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Applicant::CopyFrom(const NetProto_Applicant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Applicant::IsInitialized() const {
  
  return true;
}

void NetProto_Applicant::Swap(NetProto_Applicant* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Applicant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Applicant_descriptor_;
  metadata.reflection = NetProto_Applicant_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_Guardian_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Guardian_ID_descriptor_;
}
bool NetProto_Guardian_ID_IsValid(int value) {
  switch(value) {
    case 8:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_Guardian_ID NetProto_Guardian::GROUPID;
const NetProto_Guardian_ID NetProto_Guardian::UNITID;
const NetProto_Guardian_ID NetProto_Guardian::ID_MIN;
const NetProto_Guardian_ID NetProto_Guardian::ID_MAX;
const int NetProto_Guardian::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_Guardian::kTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_Guardian::NetProto_Guardian()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_Guardian::InitAsDefaultInstance() {
}

NetProto_Guardian::NetProto_Guardian(const NetProto_Guardian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_Guardian::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_Guardian::~NetProto_Guardian() {
  SharedDtor();
}

void NetProto_Guardian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_Guardian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_Guardian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_Guardian_descriptor_;
}

const NetProto_Guardian& NetProto_Guardian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_Guardian* NetProto_Guardian::default_instance_ = NULL;

NetProto_Guardian* NetProto_Guardian::New() const {
  return new NetProto_Guardian;
}

void NetProto_Guardian::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_Guardian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_Guardian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_Guardian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_Guardian::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_Guardian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_Guardian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_Guardian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_Guardian::MergeFrom(const NetProto_Guardian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_Guardian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_Guardian::CopyFrom(const NetProto_Guardian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_Guardian::IsInitialized() const {
  
  return true;
}

void NetProto_Guardian::Swap(NetProto_Guardian* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_Guardian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_Guardian_descriptor_;
  metadata.reflection = NetProto_Guardian_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionInfo_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionInfo_ID_descriptor_;
}
bool NetProto_FactionInfo_ID_IsValid(int value) {
  switch(value) {
    case 9:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionInfo_ID NetProto_FactionInfo::GROUPID;
const NetProto_FactionInfo_ID NetProto_FactionInfo::UNITID;
const NetProto_FactionInfo_ID NetProto_FactionInfo::ID_MIN;
const NetProto_FactionInfo_ID NetProto_FactionInfo::ID_MAX;
const int NetProto_FactionInfo::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionInfo::kNameFieldNumber;
const int NetProto_FactionInfo::kRankFieldNumber;
const int NetProto_FactionInfo::kExpFieldNumber;
const int NetProto_FactionInfo::kNumFieldNumber;
const int NetProto_FactionInfo::kStrFieldNumber;
const int NetProto_FactionInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionInfo::NetProto_FactionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionInfo::InitAsDefaultInstance() {
}

NetProto_FactionInfo::NetProto_FactionInfo(const NetProto_FactionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionInfo::~NetProto_FactionInfo() {
  SharedDtor();
}

void NetProto_FactionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_FactionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionInfo_descriptor_;
}

const NetProto_FactionInfo& NetProto_FactionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionInfo* NetProto_FactionInfo::default_instance_ = NULL;

NetProto_FactionInfo* NetProto_FactionInfo::New() const {
  return new NetProto_FactionInfo;
}

void NetProto_FactionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rank_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }
      
      // optional int64 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }
      
      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_str;
        break;
      }
      
      // optional string str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }
  
  // optional int64 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->exp(), output);
  }
  
  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }
  
  // optional string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->str(), output);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }
  
  // optional int64 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->exp(), target);
  }
  
  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }
  
  // optional string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str(), target);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional string str = 5;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionInfo::MergeFrom(const NetProto_FactionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionInfo::CopyFrom(const NetProto_FactionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionInfo::IsInitialized() const {
  
  return true;
}

void NetProto_FactionInfo::Swap(NetProto_FactionInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(rank_, other->rank_);
    std::swap(exp_, other->exp_);
    std::swap(num_, other->num_);
    std::swap(str_, other->str_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionInfo_descriptor_;
  metadata.reflection = NetProto_FactionInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionMem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionMem_ID_descriptor_;
}
bool NetProto_FactionMem_ID_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionMem_ID NetProto_FactionMem::GROUPID;
const NetProto_FactionMem_ID NetProto_FactionMem::UNITID;
const NetProto_FactionMem_ID NetProto_FactionMem::ID_MIN;
const NetProto_FactionMem_ID NetProto_FactionMem::ID_MAX;
const int NetProto_FactionMem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionMem::kContributeFieldNumber;
const int NetProto_FactionMem::kNameFieldNumber;
const int NetProto_FactionMem::kOfficeFieldNumber;
const int NetProto_FactionMem::kLastLoginTimeFieldNumber;
const int NetProto_FactionMem::kTypeFieldNumber;
const int NetProto_FactionMem::kRoleIDFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionMem::NetProto_FactionMem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionMem::InitAsDefaultInstance() {
}

NetProto_FactionMem::NetProto_FactionMem(const NetProto_FactionMem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionMem::SharedCtor() {
  _cached_size_ = 0;
  contribute_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  office_ = 0;
  lastLoginTime_ = 0;
  type_ = 0;
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionMem::~NetProto_FactionMem() {
  SharedDtor();
}

void NetProto_FactionMem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_FactionMem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionMem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionMem_descriptor_;
}

const NetProto_FactionMem& NetProto_FactionMem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionMem* NetProto_FactionMem::default_instance_ = NULL;

NetProto_FactionMem* NetProto_FactionMem::New() const {
  return new NetProto_FactionMem;
}

void NetProto_FactionMem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contribute_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    office_ = 0;
    lastLoginTime_ = 0;
    type_ = 0;
    roleID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionMem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 contribute = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_office;
        break;
      }
      
      // optional int32 office = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &office_)));
          set_has_office();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastLoginTime;
        break;
      }
      
      // optional int32 lastLoginTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastLoginTime_)));
          set_has_lastLoginTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }
      
      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionMem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 contribute = 1;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->contribute(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 office = 3;
  if (has_office()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->office(), output);
  }
  
  // optional int32 lastLoginTime = 4;
  if (has_lastLoginTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastLoginTime(), output);
  }
  
  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }
  
  // optional int64 roleID = 6;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionMem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 contribute = 1;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->contribute(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 office = 3;
  if (has_office()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->office(), target);
  }
  
  // optional int32 lastLoginTime = 4;
  if (has_lastLoginTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastLoginTime(), target);
  }
  
  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }
  
  // optional int64 roleID = 6;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionMem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 contribute = 1;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 office = 3;
    if (has_office()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->office());
    }
    
    // optional int32 lastLoginTime = 4;
    if (has_lastLoginTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastLoginTime());
    }
    
    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 roleID = 6;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionMem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionMem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionMem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionMem::MergeFrom(const NetProto_FactionMem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_office()) {
      set_office(from.office());
    }
    if (from.has_lastLoginTime()) {
      set_lastLoginTime(from.lastLoginTime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionMem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionMem::CopyFrom(const NetProto_FactionMem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionMem::IsInitialized() const {
  
  return true;
}

void NetProto_FactionMem::Swap(NetProto_FactionMem* other) {
  if (other != this) {
    std::swap(contribute_, other->contribute_);
    std::swap(name_, other->name_);
    std::swap(office_, other->office_);
    std::swap(lastLoginTime_, other->lastLoginTime_);
    std::swap(type_, other->type_);
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionMem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionMem_descriptor_;
  metadata.reflection = NetProto_FactionMem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionChangeMem_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionChangeMem_ID_descriptor_;
}
bool NetProto_FactionChangeMem_ID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionChangeMem_ID NetProto_FactionChangeMem::GROUPID;
const NetProto_FactionChangeMem_ID NetProto_FactionChangeMem::UNITID;
const NetProto_FactionChangeMem_ID NetProto_FactionChangeMem::ID_MIN;
const NetProto_FactionChangeMem_ID NetProto_FactionChangeMem::ID_MAX;
const int NetProto_FactionChangeMem::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionChangeMem::kDataFieldNumber;
const int NetProto_FactionChangeMem::kFlagFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionChangeMem::NetProto_FactionChangeMem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionChangeMem::InitAsDefaultInstance() {
}

NetProto_FactionChangeMem::NetProto_FactionChangeMem(const NetProto_FactionChangeMem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionChangeMem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionChangeMem::~NetProto_FactionChangeMem() {
  SharedDtor();
}

void NetProto_FactionChangeMem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_FactionChangeMem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionChangeMem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionChangeMem_descriptor_;
}

const NetProto_FactionChangeMem& NetProto_FactionChangeMem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionChangeMem* NetProto_FactionChangeMem::default_instance_ = NULL;

NetProto_FactionChangeMem* NetProto_FactionChangeMem::New() const {
  return new NetProto_FactionChangeMem;
}

void NetProto_FactionChangeMem::Clear() {
  data_.Clear();
  flag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionChangeMem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto_FactionMem data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }
      
      // repeated bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_flag())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_flag())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionChangeMem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NetProto_FactionMem data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  // repeated bool flag = 2;
  for (int i = 0; i < this->flag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->flag(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionChangeMem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NetProto_FactionMem data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  // repeated bool flag = 2;
  for (int i = 0; i < this->flag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->flag(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionChangeMem::ByteSize() const {
  int total_size = 0;
  
  // repeated .NetProto_FactionMem data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  // repeated bool flag = 2;
  {
    int data_size = 0;
    data_size = 1 * this->flag_size();
    total_size += 1 * this->flag_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionChangeMem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionChangeMem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionChangeMem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionChangeMem::MergeFrom(const NetProto_FactionChangeMem& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  flag_.MergeFrom(from.flag_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionChangeMem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionChangeMem::CopyFrom(const NetProto_FactionChangeMem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionChangeMem::IsInitialized() const {
  
  return true;
}

void NetProto_FactionChangeMem::Swap(NetProto_FactionChangeMem* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    flag_.Swap(&other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionChangeMem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionChangeMem_descriptor_;
  metadata.reflection = NetProto_FactionChangeMem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionGuardian_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionGuardian_ID_descriptor_;
}
bool NetProto_FactionGuardian_ID_IsValid(int value) {
  switch(value) {
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionGuardian_ID NetProto_FactionGuardian::GROUPID;
const NetProto_FactionGuardian_ID NetProto_FactionGuardian::UNITID;
const NetProto_FactionGuardian_ID NetProto_FactionGuardian::ID_MIN;
const NetProto_FactionGuardian_ID NetProto_FactionGuardian::ID_MAX;
const int NetProto_FactionGuardian::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionGuardian::kItemFieldNumber;
const int NetProto_FactionGuardian::kStrFieldNumber;
const int NetProto_FactionGuardian::kTypeFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionGuardian::NetProto_FactionGuardian()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionGuardian::InitAsDefaultInstance() {
}

NetProto_FactionGuardian::NetProto_FactionGuardian(const NetProto_FactionGuardian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionGuardian::SharedCtor() {
  _cached_size_ = 0;
  item_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionGuardian::~NetProto_FactionGuardian() {
  SharedDtor();
}

void NetProto_FactionGuardian::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_FactionGuardian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionGuardian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionGuardian_descriptor_;
}

const NetProto_FactionGuardian& NetProto_FactionGuardian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionGuardian* NetProto_FactionGuardian::default_instance_ = NULL;

NetProto_FactionGuardian* NetProto_FactionGuardian::New() const {
  return new NetProto_FactionGuardian;
}

void NetProto_FactionGuardian::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_ = 0;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionGuardian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }
      
      // optional string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionGuardian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item(), output);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionGuardian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item(), target);
  }
  
  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionGuardian::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }
    
    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionGuardian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionGuardian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionGuardian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionGuardian::MergeFrom(const NetProto_FactionGuardian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionGuardian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionGuardian::CopyFrom(const NetProto_FactionGuardian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionGuardian::IsInitialized() const {
  
  return true;
}

void NetProto_FactionGuardian::Swap(NetProto_FactionGuardian* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(str_, other->str_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionGuardian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionGuardian_descriptor_;
  metadata.reflection = NetProto_FactionGuardian_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionApplicant_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionApplicant_ID_descriptor_;
}
bool NetProto_FactionApplicant_ID_IsValid(int value) {
  switch(value) {
    case 11:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionApplicant_ID NetProto_FactionApplicant::GROUPID;
const NetProto_FactionApplicant_ID NetProto_FactionApplicant::UNITID;
const NetProto_FactionApplicant_ID NetProto_FactionApplicant::ID_MIN;
const NetProto_FactionApplicant_ID NetProto_FactionApplicant::ID_MAX;
const int NetProto_FactionApplicant::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionApplicant::kLevelFieldNumber;
const int NetProto_FactionApplicant::kPowerFieldNumber;
const int NetProto_FactionApplicant::kVipFieldNumber;
const int NetProto_FactionApplicant::kNameFieldNumber;
const int NetProto_FactionApplicant::kRoleIDFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionApplicant::NetProto_FactionApplicant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionApplicant::InitAsDefaultInstance() {
}

NetProto_FactionApplicant::NetProto_FactionApplicant(const NetProto_FactionApplicant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionApplicant::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  power_ = 0;
  vip_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleID_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionApplicant::~NetProto_FactionApplicant() {
  SharedDtor();
}

void NetProto_FactionApplicant::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_FactionApplicant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionApplicant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionApplicant_descriptor_;
}

const NetProto_FactionApplicant& NetProto_FactionApplicant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionApplicant* NetProto_FactionApplicant::default_instance_ = NULL;

NetProto_FactionApplicant* NetProto_FactionApplicant::New() const {
  return new NetProto_FactionApplicant;
}

void NetProto_FactionApplicant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    power_ = 0;
    vip_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    roleID_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionApplicant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_power;
        break;
      }
      
      // optional int32 power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleID;
        break;
      }
      
      // optional int64 roleID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID_)));
          set_has_roleID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionApplicant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 power = 2;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->power(), output);
  }
  
  // optional int32 vip = 3;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vip(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional int64 roleID = 5;
  if (has_roleID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->roleID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionApplicant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 power = 2;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->power(), target);
  }
  
  // optional int32 vip = 3;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vip(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional int64 roleID = 5;
  if (has_roleID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->roleID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionApplicant::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 power = 2;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 vip = 3;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 roleID = 5;
    if (has_roleID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionApplicant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionApplicant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionApplicant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionApplicant::MergeFrom(const NetProto_FactionApplicant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_roleID()) {
      set_roleID(from.roleID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionApplicant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionApplicant::CopyFrom(const NetProto_FactionApplicant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionApplicant::IsInitialized() const {
  
  return true;
}

void NetProto_FactionApplicant::Swap(NetProto_FactionApplicant* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(vip_, other->vip_);
    std::swap(name_, other->name_);
    std::swap(roleID_, other->roleID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionApplicant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionApplicant_descriptor_;
  metadata.reflection = NetProto_FactionApplicant_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionAllApplicant_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionAllApplicant_ID_descriptor_;
}
bool NetProto_FactionAllApplicant_ID_IsValid(int value) {
  switch(value) {
    case 11:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionAllApplicant_ID NetProto_FactionAllApplicant::GROUPID;
const NetProto_FactionAllApplicant_ID NetProto_FactionAllApplicant::UNITID;
const NetProto_FactionAllApplicant_ID NetProto_FactionAllApplicant::ID_MIN;
const NetProto_FactionAllApplicant_ID NetProto_FactionAllApplicant::ID_MAX;
const int NetProto_FactionAllApplicant::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionAllApplicant::kDataFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionAllApplicant::NetProto_FactionAllApplicant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionAllApplicant::InitAsDefaultInstance() {
}

NetProto_FactionAllApplicant::NetProto_FactionAllApplicant(const NetProto_FactionAllApplicant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionAllApplicant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionAllApplicant::~NetProto_FactionAllApplicant() {
  SharedDtor();
}

void NetProto_FactionAllApplicant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_FactionAllApplicant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionAllApplicant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionAllApplicant_descriptor_;
}

const NetProto_FactionAllApplicant& NetProto_FactionAllApplicant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionAllApplicant* NetProto_FactionAllApplicant::default_instance_ = NULL;

NetProto_FactionAllApplicant* NetProto_FactionAllApplicant::New() const {
  return new NetProto_FactionAllApplicant;
}

void NetProto_FactionAllApplicant::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionAllApplicant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto_FactionApplicant data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionAllApplicant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NetProto_FactionApplicant data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionAllApplicant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NetProto_FactionApplicant data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionAllApplicant::ByteSize() const {
  int total_size = 0;
  
  // repeated .NetProto_FactionApplicant data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionAllApplicant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionAllApplicant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionAllApplicant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionAllApplicant::MergeFrom(const NetProto_FactionAllApplicant& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionAllApplicant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionAllApplicant::CopyFrom(const NetProto_FactionAllApplicant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionAllApplicant::IsInitialized() const {
  
  return true;
}

void NetProto_FactionAllApplicant::Swap(NetProto_FactionAllApplicant* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionAllApplicant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionAllApplicant_descriptor_;
  metadata.reflection = NetProto_FactionAllApplicant_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_FactionList_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionList_ID_descriptor_;
}
bool NetProto_FactionList_ID_IsValid(int value) {
  switch(value) {
    case 11:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_FactionList_ID NetProto_FactionList::GROUPID;
const NetProto_FactionList_ID NetProto_FactionList::UNITID;
const NetProto_FactionList_ID NetProto_FactionList::ID_MIN;
const NetProto_FactionList_ID NetProto_FactionList::ID_MAX;
const int NetProto_FactionList::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_FactionList::kInfoFieldNumber;
const int NetProto_FactionList::kStrFieldNumber;
#endif  // !_MSC_VER

NetProto_FactionList::NetProto_FactionList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_FactionList::InitAsDefaultInstance() {
}

NetProto_FactionList::NetProto_FactionList(const NetProto_FactionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_FactionList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_FactionList::~NetProto_FactionList() {
  SharedDtor();
}

void NetProto_FactionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_FactionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_FactionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_FactionList_descriptor_;
}

const NetProto_FactionList& NetProto_FactionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_FactionList* NetProto_FactionList::default_instance_ = NULL;

NetProto_FactionList* NetProto_FactionList::New() const {
  return new NetProto_FactionList;
}

void NetProto_FactionList::Clear() {
  info_.Clear();
  str_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_FactionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProto_FactionInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }
      
      // repeated string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str(0).data(), this->str(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_FactionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NetProto_FactionInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  // repeated string str = 2;
  for (int i = 0; i < this->str_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->str(i).data(), this->str(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_FactionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NetProto_FactionInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  // repeated string str = 2;
  for (int i = 0; i < this->str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str(i).data(), this->str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->str(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_FactionList::ByteSize() const {
  int total_size = 0;
  
  // repeated .NetProto_FactionInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  // repeated string str = 2;
  total_size += 1 * this->str_size();
  for (int i = 0; i < this->str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_FactionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_FactionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_FactionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_FactionList::MergeFrom(const NetProto_FactionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  str_.MergeFrom(from.str_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_FactionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_FactionList::CopyFrom(const NetProto_FactionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_FactionList::IsInitialized() const {
  
  return true;
}

void NetProto_FactionList::Swap(NetProto_FactionList* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    str_.Swap(&other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_FactionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_FactionList_descriptor_;
  metadata.reflection = NetProto_FactionList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AcceptToFaction_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AcceptToFaction_ID_descriptor_;
}
bool NetProto_AcceptToFaction_ID_IsValid(int value) {
  switch(value) {
    case 11:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AcceptToFaction_ID NetProto_AcceptToFaction::GROUPID;
const NetProto_AcceptToFaction_ID NetProto_AcceptToFaction::UNITID;
const NetProto_AcceptToFaction_ID NetProto_AcceptToFaction::ID_MIN;
const NetProto_AcceptToFaction_ID NetProto_AcceptToFaction::ID_MAX;
const int NetProto_AcceptToFaction::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AcceptToFaction::kFactionNameFieldNumber;
#endif  // !_MSC_VER

NetProto_AcceptToFaction::NetProto_AcceptToFaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AcceptToFaction::InitAsDefaultInstance() {
}

NetProto_AcceptToFaction::NetProto_AcceptToFaction(const NetProto_AcceptToFaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AcceptToFaction::SharedCtor() {
  _cached_size_ = 0;
  factionName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AcceptToFaction::~NetProto_AcceptToFaction() {
  SharedDtor();
}

void NetProto_AcceptToFaction::SharedDtor() {
  if (factionName_ != &::google::protobuf::internal::kEmptyString) {
    delete factionName_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_AcceptToFaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AcceptToFaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AcceptToFaction_descriptor_;
}

const NetProto_AcceptToFaction& NetProto_AcceptToFaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AcceptToFaction* NetProto_AcceptToFaction::default_instance_ = NULL;

NetProto_AcceptToFaction* NetProto_AcceptToFaction::New() const {
  return new NetProto_AcceptToFaction;
}

void NetProto_AcceptToFaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_factionName()) {
      if (factionName_ != &::google::protobuf::internal::kEmptyString) {
        factionName_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AcceptToFaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string factionName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_factionName()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->factionName().data(), this->factionName().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AcceptToFaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string factionName = 1;
  if (has_factionName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionName().data(), this->factionName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->factionName(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AcceptToFaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string factionName = 1;
  if (has_factionName()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factionName().data(), this->factionName().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->factionName(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AcceptToFaction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string factionName = 1;
    if (has_factionName()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->factionName());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AcceptToFaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AcceptToFaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AcceptToFaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AcceptToFaction::MergeFrom(const NetProto_AcceptToFaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionName()) {
      set_factionName(from.factionName());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AcceptToFaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AcceptToFaction::CopyFrom(const NetProto_AcceptToFaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AcceptToFaction::IsInitialized() const {
  
  return true;
}

void NetProto_AcceptToFaction::Swap(NetProto_AcceptToFaction* other) {
  if (other != this) {
    std::swap(factionName_, other->factionName_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AcceptToFaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AcceptToFaction_descriptor_;
  metadata.reflection = NetProto_AcceptToFaction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_AsyncStatistics_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AsyncStatistics_ID_descriptor_;
}
bool NetProto_AsyncStatistics_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_AsyncStatistics_ID NetProto_AsyncStatistics::GROUPID;
const NetProto_AsyncStatistics_ID NetProto_AsyncStatistics::UNITID;
const NetProto_AsyncStatistics_ID NetProto_AsyncStatistics::ID_MIN;
const NetProto_AsyncStatistics_ID NetProto_AsyncStatistics::ID_MAX;
const int NetProto_AsyncStatistics::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_AsyncStatistics::kIsFirstINFieldNumber;
const int NetProto_AsyncStatistics::kBeginAutoInitFieldNumber;
const int NetProto_AsyncStatistics::kBeginDecompressFieldNumber;
const int NetProto_AsyncStatistics::kDecompressCurFieldNumber;
const int NetProto_AsyncStatistics::kDecompressTotalFieldNumber;
const int NetProto_AsyncStatistics::kBeginInitFieldNumber;
const int NetProto_AsyncStatistics::kCheckVersionFieldNumber;
const int NetProto_AsyncStatistics::kBeginDownloadFieldNumber;
const int NetProto_AsyncStatistics::kMd5FieldNumber;
const int NetProto_AsyncStatistics::kNeedDownloadFieldNumber;
const int NetProto_AsyncStatistics::kDownloadFileFieldNumber;
const int NetProto_AsyncStatistics::kOverDownloadFileFieldNumber;
const int NetProto_AsyncStatistics::kEndDownloadFieldNumber;
const int NetProto_AsyncStatistics::kBeginLoadFieldNumber;
const int NetProto_AsyncStatistics::kEndLoadFieldNumber;
#endif  // !_MSC_VER

NetProto_AsyncStatistics::NetProto_AsyncStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_AsyncStatistics::InitAsDefaultInstance() {
}

NetProto_AsyncStatistics::NetProto_AsyncStatistics(const NetProto_AsyncStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_AsyncStatistics::SharedCtor() {
  _cached_size_ = 0;
  isFirstIN_ = false;
  beginAutoInit_ = false;
  beginDecompress_ = false;
  decompressCur_ = 0;
  decompressTotal_ = 0;
  beginInit_ = false;
  checkVersion_ = false;
  beginDownload_ = false;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadFile_ = 0;
  overDownloadFile_ = 0;
  endDownload_ = false;
  beginLoad_ = false;
  endLoad_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_AsyncStatistics::~NetProto_AsyncStatistics() {
  SharedDtor();
}

void NetProto_AsyncStatistics::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void NetProto_AsyncStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_AsyncStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_AsyncStatistics_descriptor_;
}

const NetProto_AsyncStatistics& NetProto_AsyncStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_AsyncStatistics* NetProto_AsyncStatistics::default_instance_ = NULL;

NetProto_AsyncStatistics* NetProto_AsyncStatistics::New() const {
  return new NetProto_AsyncStatistics;
}

void NetProto_AsyncStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isFirstIN_ = false;
    beginAutoInit_ = false;
    beginDecompress_ = false;
    decompressCur_ = 0;
    decompressTotal_ = 0;
    beginInit_ = false;
    checkVersion_ = false;
    beginDownload_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
    downloadFile_ = 0;
    overDownloadFile_ = 0;
    endDownload_ = false;
    beginLoad_ = false;
    endLoad_ = false;
  }
  needDownload_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_AsyncStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isFirstIN = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isFirstIN_)));
          set_has_isFirstIN();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginAutoInit;
        break;
      }
      
      // optional bool beginAutoInit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginAutoInit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beginAutoInit_)));
          set_has_beginAutoInit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beginDecompress;
        break;
      }
      
      // optional bool beginDecompress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginDecompress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beginDecompress_)));
          set_has_beginDecompress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_decompressCur;
        break;
      }
      
      // optional int32 decompressCur = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decompressCur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decompressCur_)));
          set_has_decompressCur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_decompressTotal;
        break;
      }
      
      // optional int32 decompressTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decompressTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decompressTotal_)));
          set_has_decompressTotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_beginInit;
        break;
      }
      
      // optional bool beginInit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginInit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beginInit_)));
          set_has_beginInit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_checkVersion;
        break;
      }
      
      // optional bool checkVersion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkVersion_)));
          set_has_checkVersion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_beginDownload;
        break;
      }
      
      // optional bool beginDownload = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginDownload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beginDownload_)));
          set_has_beginDownload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_md5;
        break;
      }
      
      // optional string md5 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_needDownload;
        break;
      }
      
      // repeated int32 needDownload = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needDownload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_needDownload())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_needDownload())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_needDownload;
        if (input->ExpectTag(88)) goto parse_downloadFile;
        break;
      }
      
      // optional int32 downloadFile = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downloadFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downloadFile_)));
          set_has_downloadFile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_overDownloadFile;
        break;
      }
      
      // optional int32 overDownloadFile = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overDownloadFile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overDownloadFile_)));
          set_has_overDownloadFile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_endDownload;
        break;
      }
      
      // optional bool endDownload = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endDownload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endDownload_)));
          set_has_endDownload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_beginLoad;
        break;
      }
      
      // optional bool beginLoad = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginLoad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beginLoad_)));
          set_has_beginLoad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_endLoad;
        break;
      }
      
      // optional bool endLoad = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endLoad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endLoad_)));
          set_has_endLoad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_AsyncStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isFirstIN = 1;
  if (has_isFirstIN()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isFirstIN(), output);
  }
  
  // optional bool beginAutoInit = 2;
  if (has_beginAutoInit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->beginAutoInit(), output);
  }
  
  // optional bool beginDecompress = 3;
  if (has_beginDecompress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->beginDecompress(), output);
  }
  
  // optional int32 decompressCur = 4;
  if (has_decompressCur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->decompressCur(), output);
  }
  
  // optional int32 decompressTotal = 5;
  if (has_decompressTotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decompressTotal(), output);
  }
  
  // optional bool beginInit = 6;
  if (has_beginInit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->beginInit(), output);
  }
  
  // optional bool checkVersion = 7;
  if (has_checkVersion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->checkVersion(), output);
  }
  
  // optional bool beginDownload = 8;
  if (has_beginDownload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->beginDownload(), output);
  }
  
  // optional string md5 = 9;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->md5(), output);
  }
  
  // repeated int32 needDownload = 10;
  for (int i = 0; i < this->needDownload_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->needDownload(i), output);
  }
  
  // optional int32 downloadFile = 11;
  if (has_downloadFile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->downloadFile(), output);
  }
  
  // optional int32 overDownloadFile = 12;
  if (has_overDownloadFile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->overDownloadFile(), output);
  }
  
  // optional bool endDownload = 13;
  if (has_endDownload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->endDownload(), output);
  }
  
  // optional bool beginLoad = 14;
  if (has_beginLoad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->beginLoad(), output);
  }
  
  // optional bool endLoad = 15;
  if (has_endLoad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->endLoad(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_AsyncStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isFirstIN = 1;
  if (has_isFirstIN()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isFirstIN(), target);
  }
  
  // optional bool beginAutoInit = 2;
  if (has_beginAutoInit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->beginAutoInit(), target);
  }
  
  // optional bool beginDecompress = 3;
  if (has_beginDecompress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->beginDecompress(), target);
  }
  
  // optional int32 decompressCur = 4;
  if (has_decompressCur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->decompressCur(), target);
  }
  
  // optional int32 decompressTotal = 5;
  if (has_decompressTotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decompressTotal(), target);
  }
  
  // optional bool beginInit = 6;
  if (has_beginInit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->beginInit(), target);
  }
  
  // optional bool checkVersion = 7;
  if (has_checkVersion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->checkVersion(), target);
  }
  
  // optional bool beginDownload = 8;
  if (has_beginDownload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->beginDownload(), target);
  }
  
  // optional string md5 = 9;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->md5(), target);
  }
  
  // repeated int32 needDownload = 10;
  for (int i = 0; i < this->needDownload_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->needDownload(i), target);
  }
  
  // optional int32 downloadFile = 11;
  if (has_downloadFile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->downloadFile(), target);
  }
  
  // optional int32 overDownloadFile = 12;
  if (has_overDownloadFile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->overDownloadFile(), target);
  }
  
  // optional bool endDownload = 13;
  if (has_endDownload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->endDownload(), target);
  }
  
  // optional bool beginLoad = 14;
  if (has_beginLoad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->beginLoad(), target);
  }
  
  // optional bool endLoad = 15;
  if (has_endLoad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->endLoad(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_AsyncStatistics::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isFirstIN = 1;
    if (has_isFirstIN()) {
      total_size += 1 + 1;
    }
    
    // optional bool beginAutoInit = 2;
    if (has_beginAutoInit()) {
      total_size += 1 + 1;
    }
    
    // optional bool beginDecompress = 3;
    if (has_beginDecompress()) {
      total_size += 1 + 1;
    }
    
    // optional int32 decompressCur = 4;
    if (has_decompressCur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decompressCur());
    }
    
    // optional int32 decompressTotal = 5;
    if (has_decompressTotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decompressTotal());
    }
    
    // optional bool beginInit = 6;
    if (has_beginInit()) {
      total_size += 1 + 1;
    }
    
    // optional bool checkVersion = 7;
    if (has_checkVersion()) {
      total_size += 1 + 1;
    }
    
    // optional bool beginDownload = 8;
    if (has_beginDownload()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string md5 = 9;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }
    
    // optional int32 downloadFile = 11;
    if (has_downloadFile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downloadFile());
    }
    
    // optional int32 overDownloadFile = 12;
    if (has_overDownloadFile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overDownloadFile());
    }
    
    // optional bool endDownload = 13;
    if (has_endDownload()) {
      total_size += 1 + 1;
    }
    
    // optional bool beginLoad = 14;
    if (has_beginLoad()) {
      total_size += 1 + 1;
    }
    
    // optional bool endLoad = 15;
    if (has_endLoad()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 needDownload = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->needDownload_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->needDownload(i));
    }
    total_size += 1 * this->needDownload_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_AsyncStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_AsyncStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_AsyncStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_AsyncStatistics::MergeFrom(const NetProto_AsyncStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  needDownload_.MergeFrom(from.needDownload_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isFirstIN()) {
      set_isFirstIN(from.isFirstIN());
    }
    if (from.has_beginAutoInit()) {
      set_beginAutoInit(from.beginAutoInit());
    }
    if (from.has_beginDecompress()) {
      set_beginDecompress(from.beginDecompress());
    }
    if (from.has_decompressCur()) {
      set_decompressCur(from.decompressCur());
    }
    if (from.has_decompressTotal()) {
      set_decompressTotal(from.decompressTotal());
    }
    if (from.has_beginInit()) {
      set_beginInit(from.beginInit());
    }
    if (from.has_checkVersion()) {
      set_checkVersion(from.checkVersion());
    }
    if (from.has_beginDownload()) {
      set_beginDownload(from.beginDownload());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_downloadFile()) {
      set_downloadFile(from.downloadFile());
    }
    if (from.has_overDownloadFile()) {
      set_overDownloadFile(from.overDownloadFile());
    }
    if (from.has_endDownload()) {
      set_endDownload(from.endDownload());
    }
    if (from.has_beginLoad()) {
      set_beginLoad(from.beginLoad());
    }
    if (from.has_endLoad()) {
      set_endLoad(from.endLoad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_AsyncStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_AsyncStatistics::CopyFrom(const NetProto_AsyncStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_AsyncStatistics::IsInitialized() const {
  
  return true;
}

void NetProto_AsyncStatistics::Swap(NetProto_AsyncStatistics* other) {
  if (other != this) {
    std::swap(isFirstIN_, other->isFirstIN_);
    std::swap(beginAutoInit_, other->beginAutoInit_);
    std::swap(beginDecompress_, other->beginDecompress_);
    std::swap(decompressCur_, other->decompressCur_);
    std::swap(decompressTotal_, other->decompressTotal_);
    std::swap(beginInit_, other->beginInit_);
    std::swap(checkVersion_, other->checkVersion_);
    std::swap(beginDownload_, other->beginDownload_);
    std::swap(md5_, other->md5_);
    needDownload_.Swap(&other->needDownload_);
    std::swap(downloadFile_, other->downloadFile_);
    std::swap(overDownloadFile_, other->overDownloadFile_);
    std::swap(endDownload_, other->endDownload_);
    std::swap(beginLoad_, other->beginLoad_);
    std::swap(endLoad_, other->endLoad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_AsyncStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_AsyncStatistics_descriptor_;
  metadata.reflection = NetProto_AsyncStatistics_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_StatisticsAGSLoadScene_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatisticsAGSLoadScene_ID_descriptor_;
}
bool NetProto_StatisticsAGSLoadScene_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StatisticsAGSLoadScene_ID NetProto_StatisticsAGSLoadScene::GROUPID;
const NetProto_StatisticsAGSLoadScene_ID NetProto_StatisticsAGSLoadScene::UNITID;
const NetProto_StatisticsAGSLoadScene_ID NetProto_StatisticsAGSLoadScene::ID_MIN;
const NetProto_StatisticsAGSLoadScene_ID NetProto_StatisticsAGSLoadScene::ID_MAX;
const int NetProto_StatisticsAGSLoadScene::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_StatisticsAGSLoadScene::kAfterFieldNumber;
#endif  // !_MSC_VER

NetProto_StatisticsAGSLoadScene::NetProto_StatisticsAGSLoadScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_StatisticsAGSLoadScene::InitAsDefaultInstance() {
}

NetProto_StatisticsAGSLoadScene::NetProto_StatisticsAGSLoadScene(const NetProto_StatisticsAGSLoadScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_StatisticsAGSLoadScene::SharedCtor() {
  _cached_size_ = 0;
  after_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_StatisticsAGSLoadScene::~NetProto_StatisticsAGSLoadScene() {
  SharedDtor();
}

void NetProto_StatisticsAGSLoadScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_StatisticsAGSLoadScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_StatisticsAGSLoadScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatisticsAGSLoadScene_descriptor_;
}

const NetProto_StatisticsAGSLoadScene& NetProto_StatisticsAGSLoadScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_StatisticsAGSLoadScene* NetProto_StatisticsAGSLoadScene::default_instance_ = NULL;

NetProto_StatisticsAGSLoadScene* NetProto_StatisticsAGSLoadScene::New() const {
  return new NetProto_StatisticsAGSLoadScene;
}

void NetProto_StatisticsAGSLoadScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    after_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_StatisticsAGSLoadScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool after = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_StatisticsAGSLoadScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool after = 1;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->after(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_StatisticsAGSLoadScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool after = 1;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->after(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_StatisticsAGSLoadScene::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool after = 1;
    if (has_after()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_StatisticsAGSLoadScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_StatisticsAGSLoadScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_StatisticsAGSLoadScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_StatisticsAGSLoadScene::MergeFrom(const NetProto_StatisticsAGSLoadScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_after()) {
      set_after(from.after());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_StatisticsAGSLoadScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_StatisticsAGSLoadScene::CopyFrom(const NetProto_StatisticsAGSLoadScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_StatisticsAGSLoadScene::IsInitialized() const {
  
  return true;
}

void NetProto_StatisticsAGSLoadScene::Swap(NetProto_StatisticsAGSLoadScene* other) {
  if (other != this) {
    std::swap(after_, other->after_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_StatisticsAGSLoadScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_StatisticsAGSLoadScene_descriptor_;
  metadata.reflection = NetProto_StatisticsAGSLoadScene_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetProto_StatisticsAGSLoadNPC_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatisticsAGSLoadNPC_ID_descriptor_;
}
bool NetProto_StatisticsAGSLoadNPC_ID_IsValid(int value) {
  switch(value) {
    case 2:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetProto_StatisticsAGSLoadNPC_ID NetProto_StatisticsAGSLoadNPC::GROUPID;
const NetProto_StatisticsAGSLoadNPC_ID NetProto_StatisticsAGSLoadNPC::UNITID;
const NetProto_StatisticsAGSLoadNPC_ID NetProto_StatisticsAGSLoadNPC::ID_MIN;
const NetProto_StatisticsAGSLoadNPC_ID NetProto_StatisticsAGSLoadNPC::ID_MAX;
const int NetProto_StatisticsAGSLoadNPC::ID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetProto_StatisticsAGSLoadNPC::kIndexFieldNumber;
const int NetProto_StatisticsAGSLoadNPC::kAfterFieldNumber;
#endif  // !_MSC_VER

NetProto_StatisticsAGSLoadNPC::NetProto_StatisticsAGSLoadNPC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetProto_StatisticsAGSLoadNPC::InitAsDefaultInstance() {
}

NetProto_StatisticsAGSLoadNPC::NetProto_StatisticsAGSLoadNPC(const NetProto_StatisticsAGSLoadNPC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetProto_StatisticsAGSLoadNPC::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  after_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProto_StatisticsAGSLoadNPC::~NetProto_StatisticsAGSLoadNPC() {
  SharedDtor();
}

void NetProto_StatisticsAGSLoadNPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetProto_StatisticsAGSLoadNPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProto_StatisticsAGSLoadNPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProto_StatisticsAGSLoadNPC_descriptor_;
}

const NetProto_StatisticsAGSLoadNPC& NetProto_StatisticsAGSLoadNPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetProto_2eproto();  return *default_instance_;
}

NetProto_StatisticsAGSLoadNPC* NetProto_StatisticsAGSLoadNPC::default_instance_ = NULL;

NetProto_StatisticsAGSLoadNPC* NetProto_StatisticsAGSLoadNPC::New() const {
  return new NetProto_StatisticsAGSLoadNPC;
}

void NetProto_StatisticsAGSLoadNPC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    after_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetProto_StatisticsAGSLoadNPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_after;
        break;
      }
      
      // optional bool after = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &after_)));
          set_has_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetProto_StatisticsAGSLoadNPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional bool after = 2;
  if (has_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->after(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetProto_StatisticsAGSLoadNPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional bool after = 2;
  if (has_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->after(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetProto_StatisticsAGSLoadNPC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional bool after = 2;
    if (has_after()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProto_StatisticsAGSLoadNPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetProto_StatisticsAGSLoadNPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetProto_StatisticsAGSLoadNPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetProto_StatisticsAGSLoadNPC::MergeFrom(const NetProto_StatisticsAGSLoadNPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_after()) {
      set_after(from.after());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetProto_StatisticsAGSLoadNPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProto_StatisticsAGSLoadNPC::CopyFrom(const NetProto_StatisticsAGSLoadNPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProto_StatisticsAGSLoadNPC::IsInitialized() const {
  
  return true;
}

void NetProto_StatisticsAGSLoadNPC::Swap(NetProto_StatisticsAGSLoadNPC* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(after_, other->after_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetProto_StatisticsAGSLoadNPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProto_StatisticsAGSLoadNPC_descriptor_;
  metadata.reflection = NetProto_StatisticsAGSLoadNPC_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EquipmentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipmentInfo_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipmentInfo_ColorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllEquipments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllEquipments_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_EquipAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_EquipAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipRecipe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipRecipe_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllEquipRecipes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllEquipRecipes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseWing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseWing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BaseWing_ColorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllBaseWings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllBaseWings_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Wing_ColorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllWings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllWings_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_EquipmentAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_EquipmentAtt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipmentInfo_2eproto() {
  protobuf_AddDesc_EquipmentInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipmentInfo.proto");
  GOOGLE_CHECK(file != NULL);
  EquipmentInfo_descriptor_ = file->message_type(0);
  static const int EquipmentInfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, professionType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, requiredLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, equipmentLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, isSell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, colorType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, baseType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, baseDelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, effect1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, effect2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, stampCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, enhanceType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, enhanceLimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, lovePoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, pvpScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, godScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, factionContribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, decomposeItems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, helpNode_),
  };
  EquipmentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentInfo_descriptor_,
      EquipmentInfo::default_instance_,
      EquipmentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentInfo));
  EquipmentInfo_Type_descriptor_ = EquipmentInfo_descriptor_->enum_type(0);
  EquipmentInfo_ColorType_descriptor_ = EquipmentInfo_descriptor_->enum_type(1);
  AllEquipments_descriptor_ = file->message_type(1);
  static const int AllEquipments_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipments, equipments_),
  };
  AllEquipments_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllEquipments_descriptor_,
      AllEquipments::default_instance_,
      AllEquipments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipments, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipments, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllEquipments));
  PB_EquipAsset_descriptor_ = file->message_type(2);
  static const int PB_EquipAsset_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipAsset, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipAsset, strongLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipAsset, gemModel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipAsset, gemType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipAsset, enhanceDelta_),
  };
  PB_EquipAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_EquipAsset_descriptor_,
      PB_EquipAsset::default_instance_,
      PB_EquipAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_EquipAsset));
  EquipRecipe_descriptor_ = file->message_type(3);
  static const int EquipRecipe_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRecipe, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRecipe, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRecipe, materials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRecipe, nums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRecipe, equipments_),
  };
  EquipRecipe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipRecipe_descriptor_,
      EquipRecipe::default_instance_,
      EquipRecipe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRecipe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipRecipe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipRecipe));
  AllEquipRecipes_descriptor_ = file->message_type(4);
  static const int AllEquipRecipes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipRecipes, recipes_),
  };
  AllEquipRecipes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllEquipRecipes_descriptor_,
      AllEquipRecipes::default_instance_,
      AllEquipRecipes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipRecipes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipRecipes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllEquipRecipes));
  BaseWing_descriptor_ = file->message_type(5);
  static const int BaseWing_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, colorType_),
  };
  BaseWing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseWing_descriptor_,
      BaseWing::default_instance_,
      BaseWing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseWing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseWing));
  BaseWing_ColorType_descriptor_ = BaseWing_descriptor_->enum_type(0);
  AllBaseWings_descriptor_ = file->message_type(6);
  static const int AllBaseWings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBaseWings, wings_),
  };
  AllBaseWings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllBaseWings_descriptor_,
      AllBaseWings::default_instance_,
      AllBaseWings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBaseWings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBaseWings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllBaseWings));
  Wing_descriptor_ = file->message_type(7);
  static const int Wing_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, colorType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, pvpScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, lovePoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, godScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, factionContribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, helpNode_),
  };
  Wing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Wing_descriptor_,
      Wing::default_instance_,
      Wing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Wing));
  Wing_ColorType_descriptor_ = Wing_descriptor_->enum_type(0);
  AllWings_descriptor_ = file->message_type(8);
  static const int AllWings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWings, wings_),
  };
  AllWings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllWings_descriptor_,
      AllWings::default_instance_,
      AllWings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllWings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllWings));
  PB_EquipmentAtt_descriptor_ = file->message_type(9);
  static const int PB_EquipmentAtt_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipmentAtt, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipmentAtt, wing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipmentAtt, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipmentAtt, baseWing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipmentAtt, rides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipmentAtt, godShips_),
  };
  PB_EquipmentAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_EquipmentAtt_descriptor_,
      PB_EquipmentAtt::default_instance_,
      PB_EquipmentAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipmentAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_EquipmentAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_EquipmentAtt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipmentInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentInfo_descriptor_, &EquipmentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllEquipments_descriptor_, &AllEquipments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_EquipAsset_descriptor_, &PB_EquipAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipRecipe_descriptor_, &EquipRecipe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllEquipRecipes_descriptor_, &AllEquipRecipes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseWing_descriptor_, &BaseWing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllBaseWings_descriptor_, &AllBaseWings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Wing_descriptor_, &Wing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllWings_descriptor_, &AllWings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_EquipmentAtt_descriptor_, &PB_EquipmentAtt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipmentInfo_2eproto() {
  delete EquipmentInfo::default_instance_;
  delete EquipmentInfo_reflection_;
  delete AllEquipments::default_instance_;
  delete AllEquipments_reflection_;
  delete PB_EquipAsset::default_instance_;
  delete PB_EquipAsset_reflection_;
  delete EquipRecipe::default_instance_;
  delete EquipRecipe_reflection_;
  delete AllEquipRecipes::default_instance_;
  delete AllEquipRecipes_reflection_;
  delete BaseWing::default_instance_;
  delete BaseWing_reflection_;
  delete AllBaseWings::default_instance_;
  delete AllBaseWings_reflection_;
  delete Wing::default_instance_;
  delete Wing_reflection_;
  delete AllWings::default_instance_;
  delete AllWings_reflection_;
  delete PB_EquipmentAtt::default_instance_;
  delete PB_EquipmentAtt_reflection_;
}

void protobuf_AddDesc_EquipmentInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_FightInfo_2eproto();
  ::protobuf_AddDesc_ItemBaseInfo_2eproto();
  ::protobuf_AddDesc_GodShip_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023EquipmentInfo.proto\032\017FightInfo.proto\032\022"
    "ItemBaseInfo.proto\032\rGodShip.proto\"\272\006\n\rEq"
    "uipmentInfo\022\n\n\002id\030\001 \001(\003\022!\n\004type\030\002 \001(\0162\023."
    "EquipmentInfo.Type\022\014\n\004name\030\003 \001(\t\022\r\n\005mode"
    "l\030\004 \001(\005\022\017\n\007picture\030\005 \001(\005\022\014\n\004desc\030\006 \001(\t\022\026"
    "\n\016professionType\030\007 \001(\005\022\025\n\rrequiredLevel\030"
    "\010 \001(\005\022\026\n\016equipmentLevel\030\t \001(\005\022\016\n\006isSell\030"
    "\n \001(\010\022\r\n\005price\030\013 \001(\003\022+\n\tcolorType\030\014 \001(\0162"
    "\030.EquipmentInfo.ColorType\022+\n\010baseType\030\r "
    "\003(\0162\031.PB_FightAtt.PropertyType\022\021\n\tbaseDe"
    "lta\030\016 \003(\005\022\013\n\003rmb\030\025 \001(\003\022\017\n\007effect1\030\026 \001(\005\022"
    "\017\n\007effect2\030\027 \001(\005\022\022\n\nstampCount\030\030 \001(\005\022.\n\013"
    "enhanceType\030\031 \003(\0162\031.PB_FightAtt.Property"
    "Type\022\024\n\014enhanceLimit\030\033 \003(\005\022\021\n\tlovePoint\030"
    "\034 \001(\005\022\020\n\010pvpScore\030\035 \001(\005\022\020\n\010godScore\030\036 \001("
    "\005\022\031\n\021factionContribute\030\037 \001(\005\022$\n\016decompos"
    "eItems\030  \003(\0132\014.PB_ItemInfo\022\020\n\010helpNode\030!"
    " \001(\005\"\225\001\n\004Type\022\010\n\004HEAD\020\000\022\t\n\005CHEST\020\001\022\014\n\010SH"
    "OULDER\020\002\022\t\n\005BOOTS\020\003\022\010\n\004HAND\020\004\022\n\n\006WEAPON\020"
    "\005\022\014\n\010NECKLACE\020\006\022\010\n\004RING\020\007\022\010\n\004BELT\020\010\022\014\n\010T"
    "ROUSERS\020\t\022\013\n\007JEWELRY\020\n\022\014\n\010BRACELET\020\013\"@\n\t"
    "ColorType\022\t\n\005WHITE\020\000\022\t\n\005GREEN\020\001\022\010\n\004BLUE\020"
    "\002\022\n\n\006YELLOW\020\003\022\007\n\003RED\020\004\"3\n\rAllEquipments\022"
    "\"\n\nequipments\030\001 \003(\0132\016.EquipmentInfo\"o\n\rP"
    "B_EquipAsset\022\020\n\004mode\030\001 \001(\005:\002-1\022\023\n\013strong"
    "Level\030\002 \001(\005\022\020\n\010gemModel\030\003 \003(\005\022\017\n\007gemType"
    "\030\004 \003(\005\022\024\n\014enhanceDelta\030\005 \003(\005\"q\n\013EquipRec"
    "ipe\022\n\n\002id\030\001 \001(\005\022!\n\004type\030\002 \001(\0162\023.Equipmen"
    "tInfo.Type\022\021\n\tmaterials\030\003 \003(\005\022\014\n\004nums\030\004 "
    "\003(\005\022\022\n\nequipments\030\005 \003(\005\"0\n\017AllEquipRecip"
    "es\022\035\n\007recipes\030\001 \003(\0132\014.EquipRecipe\"\206\002\n\010Ba"
    "seWing\022\r\n\005level\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005m"
    "odel\030\003 \003(\005\022\016\n\006effect\030\004 \003(\005\022\014\n\004desc\030\005 \001(\t"
    "\022\016\n\006degree\030\006 \001(\005\022\013\n\003att\030\007 \003(\005\022\r\n\005goods\030\010"
    " \001(\005\022\r\n\005count\030\t \001(\005\022\013\n\003pic\030\n \001(\005\022&\n\tcolo"
    "rType\030\013 \001(\0162\023.BaseWing.ColorType\"@\n\tColo"
    "rType\022\t\n\005WHITE\020\000\022\t\n\005GREEN\020\001\022\010\n\004BLUE\020\002\022\n\n"
    "\006YELLOW\020\003\022\007\n\003RED\020\004\"(\n\014AllBaseWings\022\030\n\005wi"
    "ngs\030\001 \003(\0132\t.BaseWing\"\276\002\n\004Wing\022\n\n\002id\030\001 \001("
    "\005\022\r\n\005model\030\002 \003(\005\022\016\n\006effect\030\003 \003(\005\022\013\n\003att\030"
    "\004 \003(\005\022\014\n\004desc\030\005 \001(\t\022\013\n\003pic\030\006 \001(\005\022\013\n\003rmb\030"
    "\007 \001(\005\022\"\n\tcolorType\030\010 \001(\0162\017.Wing.ColorTyp"
    "e\022\014\n\004name\030\t \001(\t\022\020\n\010pvpScore\030\n \001(\005\022\021\n\tlov"
    "ePoint\030\013 \001(\005\022\020\n\010godScore\030\014 \001(\005\022\031\n\021factio"
    "nContribute\030\r \001(\005\022\020\n\010helpNode\030\016 \001(\005\"@\n\tC"
    "olorType\022\t\n\005WHITE\020\000\022\t\n\005GREEN\020\001\022\010\n\004BLUE\020\002"
    "\022\n\n\006YELLOW\020\003\022\007\n\003RED\020\004\" \n\010AllWings\022\024\n\005win"
    "gs\030\001 \003(\0132\005.Wing\"\177\n\017PB_EquipmentAtt\022\022\n\neq"
    "uipments\030\001 \003(\003\022\020\n\004wing\030\003 \001(\005:\002-1\022\023\n\007fash"
    "ion\030\004 \001(\005:\002-1\022\020\n\010baseWing\030\005 \001(\010\022\r\n\005rides"
    "\030\006 \001(\005\022\020\n\010godShips\030\007 \003(\005", 2024);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipmentInfo.proto", &protobuf_RegisterTypes);
  EquipmentInfo::default_instance_ = new EquipmentInfo();
  AllEquipments::default_instance_ = new AllEquipments();
  PB_EquipAsset::default_instance_ = new PB_EquipAsset();
  EquipRecipe::default_instance_ = new EquipRecipe();
  AllEquipRecipes::default_instance_ = new AllEquipRecipes();
  BaseWing::default_instance_ = new BaseWing();
  AllBaseWings::default_instance_ = new AllBaseWings();
  Wing::default_instance_ = new Wing();
  AllWings::default_instance_ = new AllWings();
  PB_EquipmentAtt::default_instance_ = new PB_EquipmentAtt();
  EquipmentInfo::default_instance_->InitAsDefaultInstance();
  AllEquipments::default_instance_->InitAsDefaultInstance();
  PB_EquipAsset::default_instance_->InitAsDefaultInstance();
  EquipRecipe::default_instance_->InitAsDefaultInstance();
  AllEquipRecipes::default_instance_->InitAsDefaultInstance();
  BaseWing::default_instance_->InitAsDefaultInstance();
  AllBaseWings::default_instance_->InitAsDefaultInstance();
  Wing::default_instance_->InitAsDefaultInstance();
  AllWings::default_instance_->InitAsDefaultInstance();
  PB_EquipmentAtt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentInfo_2eproto {
  StaticDescriptorInitializer_EquipmentInfo_2eproto() {
    protobuf_AddDesc_EquipmentInfo_2eproto();
  }
} static_descriptor_initializer_EquipmentInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* EquipmentInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentInfo_Type_descriptor_;
}
bool EquipmentInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EquipmentInfo_Type EquipmentInfo::HEAD;
const EquipmentInfo_Type EquipmentInfo::CHEST;
const EquipmentInfo_Type EquipmentInfo::SHOULDER;
const EquipmentInfo_Type EquipmentInfo::BOOTS;
const EquipmentInfo_Type EquipmentInfo::HAND;
const EquipmentInfo_Type EquipmentInfo::WEAPON;
const EquipmentInfo_Type EquipmentInfo::NECKLACE;
const EquipmentInfo_Type EquipmentInfo::RING;
const EquipmentInfo_Type EquipmentInfo::BELT;
const EquipmentInfo_Type EquipmentInfo::TROUSERS;
const EquipmentInfo_Type EquipmentInfo::JEWELRY;
const EquipmentInfo_Type EquipmentInfo::BRACELET;
const EquipmentInfo_Type EquipmentInfo::Type_MIN;
const EquipmentInfo_Type EquipmentInfo::Type_MAX;
const int EquipmentInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* EquipmentInfo_ColorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentInfo_ColorType_descriptor_;
}
bool EquipmentInfo_ColorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EquipmentInfo_ColorType EquipmentInfo::WHITE;
const EquipmentInfo_ColorType EquipmentInfo::GREEN;
const EquipmentInfo_ColorType EquipmentInfo::BLUE;
const EquipmentInfo_ColorType EquipmentInfo::YELLOW;
const EquipmentInfo_ColorType EquipmentInfo::RED;
const EquipmentInfo_ColorType EquipmentInfo::ColorType_MIN;
const EquipmentInfo_ColorType EquipmentInfo::ColorType_MAX;
const int EquipmentInfo::ColorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EquipmentInfo::kIdFieldNumber;
const int EquipmentInfo::kTypeFieldNumber;
const int EquipmentInfo::kNameFieldNumber;
const int EquipmentInfo::kModelFieldNumber;
const int EquipmentInfo::kPictureFieldNumber;
const int EquipmentInfo::kDescFieldNumber;
const int EquipmentInfo::kProfessionTypeFieldNumber;
const int EquipmentInfo::kRequiredLevelFieldNumber;
const int EquipmentInfo::kEquipmentLevelFieldNumber;
const int EquipmentInfo::kIsSellFieldNumber;
const int EquipmentInfo::kPriceFieldNumber;
const int EquipmentInfo::kColorTypeFieldNumber;
const int EquipmentInfo::kBaseTypeFieldNumber;
const int EquipmentInfo::kBaseDeltaFieldNumber;
const int EquipmentInfo::kRmbFieldNumber;
const int EquipmentInfo::kEffect1FieldNumber;
const int EquipmentInfo::kEffect2FieldNumber;
const int EquipmentInfo::kStampCountFieldNumber;
const int EquipmentInfo::kEnhanceTypeFieldNumber;
const int EquipmentInfo::kEnhanceLimitFieldNumber;
const int EquipmentInfo::kLovePointFieldNumber;
const int EquipmentInfo::kPvpScoreFieldNumber;
const int EquipmentInfo::kGodScoreFieldNumber;
const int EquipmentInfo::kFactionContributeFieldNumber;
const int EquipmentInfo::kDecomposeItemsFieldNumber;
const int EquipmentInfo::kHelpNodeFieldNumber;
#endif  // !_MSC_VER

EquipmentInfo::EquipmentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentInfo::InitAsDefaultInstance() {
}

EquipmentInfo::EquipmentInfo(const EquipmentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = 0;
  picture_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionType_ = 0;
  requiredLevel_ = 0;
  equipmentLevel_ = 0;
  isSell_ = false;
  price_ = GOOGLE_LONGLONG(0);
  colorType_ = 0;
  rmb_ = GOOGLE_LONGLONG(0);
  effect1_ = 0;
  effect2_ = 0;
  stampCount_ = 0;
  lovePoint_ = 0;
  pvpScore_ = 0;
  godScore_ = 0;
  factionContribute_ = 0;
  helpNode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentInfo::~EquipmentInfo() {
  SharedDtor();
}

void EquipmentInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void EquipmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentInfo_descriptor_;
}

const EquipmentInfo& EquipmentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

EquipmentInfo* EquipmentInfo::default_instance_ = NULL;

EquipmentInfo* EquipmentInfo::New() const {
  return new EquipmentInfo;
}

void EquipmentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    model_ = 0;
    picture_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    professionType_ = 0;
    requiredLevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    equipmentLevel_ = 0;
    isSell_ = false;
    price_ = GOOGLE_LONGLONG(0);
    colorType_ = 0;
    rmb_ = GOOGLE_LONGLONG(0);
    effect1_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    effect2_ = 0;
    stampCount_ = 0;
    lovePoint_ = 0;
    pvpScore_ = 0;
    godScore_ = 0;
    factionContribute_ = 0;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    helpNode_ = 0;
  }
  baseType_.Clear();
  baseDelta_.Clear();
  enhanceType_.Clear();
  enhanceLimit_.Clear();
  decomposeItems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .EquipmentInfo.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EquipmentInfo_Type_IsValid(value)) {
            set_type(static_cast< ::EquipmentInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_model;
        break;
      }
      
      // optional int32 model = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_picture;
        break;
      }
      
      // optional int32 picture = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_)));
          set_has_picture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }
      
      // optional string desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_professionType;
        break;
      }
      
      // optional int32 professionType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionType_)));
          set_has_professionType();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_requiredLevel;
        break;
      }
      
      // optional int32 requiredLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredLevel_)));
          set_has_requiredLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_equipmentLevel;
        break;
      }
      
      // optional int32 equipmentLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipmentLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentLevel_)));
          set_has_equipmentLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isSell;
        break;
      }
      
      // optional bool isSell = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isSell_)));
          set_has_isSell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_price;
        break;
      }
      
      // optional int64 price = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_colorType;
        break;
      }
      
      // optional .EquipmentInfo.ColorType colorType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EquipmentInfo_ColorType_IsValid(value)) {
            set_colorType(static_cast< ::EquipmentInfo_ColorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_baseType;
        break;
      }
      
      // repeated .PB_FightAtt.PropertyType baseType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_FightAtt_PropertyType_IsValid(value)) {
            add_baseType(static_cast< ::PB_FightAtt_PropertyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::PB_FightAtt_PropertyType_IsValid,
                 this->mutable_baseType())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_baseType;
        if (input->ExpectTag(112)) goto parse_baseDelta;
        break;
      }
      
      // repeated int32 baseDelta = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_baseDelta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_baseDelta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_baseDelta;
        if (input->ExpectTag(168)) goto parse_rmb;
        break;
      }
      
      // optional int64 rmb = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_effect1;
        break;
      }
      
      // optional int32 effect1 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect1_)));
          set_has_effect1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_effect2;
        break;
      }
      
      // optional int32 effect2 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect2_)));
          set_has_effect2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_stampCount;
        break;
      }
      
      // optional int32 stampCount = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stampCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stampCount_)));
          set_has_stampCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_enhanceType;
        break;
      }
      
      // repeated .PB_FightAtt.PropertyType enhanceType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhanceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_FightAtt_PropertyType_IsValid(value)) {
            add_enhanceType(static_cast< ::PB_FightAtt_PropertyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::PB_FightAtt_PropertyType_IsValid,
                 this->mutable_enhanceType())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_enhanceType;
        if (input->ExpectTag(216)) goto parse_enhanceLimit;
        break;
      }
      
      // repeated int32 enhanceLimit = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhanceLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216, input, this->mutable_enhanceLimit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enhanceLimit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_enhanceLimit;
        if (input->ExpectTag(224)) goto parse_lovePoint;
        break;
      }
      
      // optional int32 lovePoint = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lovePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lovePoint_)));
          set_has_lovePoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_pvpScore;
        break;
      }
      
      // optional int32 pvpScore = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpScore_)));
          set_has_pvpScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_godScore;
        break;
      }
      
      // optional int32 godScore = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godScore_)));
          set_has_godScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_factionContribute;
        break;
      }
      
      // optional int32 factionContribute = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factionContribute_)));
          set_has_factionContribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_decomposeItems;
        break;
      }
      
      // repeated .PB_ItemInfo decomposeItems = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decomposeItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decomposeItems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_decomposeItems;
        if (input->ExpectTag(264)) goto parse_helpNode;
        break;
      }
      
      // optional int32 helpNode = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpNode_)));
          set_has_helpNode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional .EquipmentInfo.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 model = 4;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->model(), output);
  }
  
  // optional int32 picture = 5;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->picture(), output);
  }
  
  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->desc(), output);
  }
  
  // optional int32 professionType = 7;
  if (has_professionType()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->professionType(), output);
  }
  
  // optional int32 requiredLevel = 8;
  if (has_requiredLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->requiredLevel(), output);
  }
  
  // optional int32 equipmentLevel = 9;
  if (has_equipmentLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->equipmentLevel(), output);
  }
  
  // optional bool isSell = 10;
  if (has_isSell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isSell(), output);
  }
  
  // optional int64 price = 11;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->price(), output);
  }
  
  // optional .EquipmentInfo.ColorType colorType = 12;
  if (has_colorType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->colorType(), output);
  }
  
  // repeated .PB_FightAtt.PropertyType baseType = 13;
  for (int i = 0; i < this->baseType_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->baseType(i), output);
  }
  
  // repeated int32 baseDelta = 14;
  for (int i = 0; i < this->baseDelta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->baseDelta(i), output);
  }
  
  // optional int64 rmb = 21;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->rmb(), output);
  }
  
  // optional int32 effect1 = 22;
  if (has_effect1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->effect1(), output);
  }
  
  // optional int32 effect2 = 23;
  if (has_effect2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->effect2(), output);
  }
  
  // optional int32 stampCount = 24;
  if (has_stampCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->stampCount(), output);
  }
  
  // repeated .PB_FightAtt.PropertyType enhanceType = 25;
  for (int i = 0; i < this->enhanceType_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->enhanceType(i), output);
  }
  
  // repeated int32 enhanceLimit = 27;
  for (int i = 0; i < this->enhanceLimit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->enhanceLimit(i), output);
  }
  
  // optional int32 lovePoint = 28;
  if (has_lovePoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->lovePoint(), output);
  }
  
  // optional int32 pvpScore = 29;
  if (has_pvpScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->pvpScore(), output);
  }
  
  // optional int32 godScore = 30;
  if (has_godScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->godScore(), output);
  }
  
  // optional int32 factionContribute = 31;
  if (has_factionContribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->factionContribute(), output);
  }
  
  // repeated .PB_ItemInfo decomposeItems = 32;
  for (int i = 0; i < this->decomposeItems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->decomposeItems(i), output);
  }
  
  // optional int32 helpNode = 33;
  if (has_helpNode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->helpNode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional .EquipmentInfo.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 model = 4;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->model(), target);
  }
  
  // optional int32 picture = 5;
  if (has_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->picture(), target);
  }
  
  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desc(), target);
  }
  
  // optional int32 professionType = 7;
  if (has_professionType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->professionType(), target);
  }
  
  // optional int32 requiredLevel = 8;
  if (has_requiredLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->requiredLevel(), target);
  }
  
  // optional int32 equipmentLevel = 9;
  if (has_equipmentLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->equipmentLevel(), target);
  }
  
  // optional bool isSell = 10;
  if (has_isSell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isSell(), target);
  }
  
  // optional int64 price = 11;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->price(), target);
  }
  
  // optional .EquipmentInfo.ColorType colorType = 12;
  if (has_colorType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->colorType(), target);
  }
  
  // repeated .PB_FightAtt.PropertyType baseType = 13;
  for (int i = 0; i < this->baseType_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->baseType(i), target);
  }
  
  // repeated int32 baseDelta = 14;
  for (int i = 0; i < this->baseDelta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->baseDelta(i), target);
  }
  
  // optional int64 rmb = 21;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->rmb(), target);
  }
  
  // optional int32 effect1 = 22;
  if (has_effect1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->effect1(), target);
  }
  
  // optional int32 effect2 = 23;
  if (has_effect2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->effect2(), target);
  }
  
  // optional int32 stampCount = 24;
  if (has_stampCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->stampCount(), target);
  }
  
  // repeated .PB_FightAtt.PropertyType enhanceType = 25;
  for (int i = 0; i < this->enhanceType_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->enhanceType(i), target);
  }
  
  // repeated int32 enhanceLimit = 27;
  for (int i = 0; i < this->enhanceLimit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(27, this->enhanceLimit(i), target);
  }
  
  // optional int32 lovePoint = 28;
  if (has_lovePoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->lovePoint(), target);
  }
  
  // optional int32 pvpScore = 29;
  if (has_pvpScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->pvpScore(), target);
  }
  
  // optional int32 godScore = 30;
  if (has_godScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->godScore(), target);
  }
  
  // optional int32 factionContribute = 31;
  if (has_factionContribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->factionContribute(), target);
  }
  
  // repeated .PB_ItemInfo decomposeItems = 32;
  for (int i = 0; i < this->decomposeItems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->decomposeItems(i), target);
  }
  
  // optional int32 helpNode = 33;
  if (has_helpNode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->helpNode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional .EquipmentInfo.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model());
    }
    
    // optional int32 picture = 5;
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->picture());
    }
    
    // optional string desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 professionType = 7;
    if (has_professionType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionType());
    }
    
    // optional int32 requiredLevel = 8;
    if (has_requiredLevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredLevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 equipmentLevel = 9;
    if (has_equipmentLevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentLevel());
    }
    
    // optional bool isSell = 10;
    if (has_isSell()) {
      total_size += 1 + 1;
    }
    
    // optional int64 price = 11;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->price());
    }
    
    // optional .EquipmentInfo.ColorType colorType = 12;
    if (has_colorType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->colorType());
    }
    
    // optional int64 rmb = 21;
    if (has_rmb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rmb());
    }
    
    // optional int32 effect1 = 22;
    if (has_effect1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect1());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 effect2 = 23;
    if (has_effect2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect2());
    }
    
    // optional int32 stampCount = 24;
    if (has_stampCount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stampCount());
    }
    
    // optional int32 lovePoint = 28;
    if (has_lovePoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lovePoint());
    }
    
    // optional int32 pvpScore = 29;
    if (has_pvpScore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpScore());
    }
    
    // optional int32 godScore = 30;
    if (has_godScore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godScore());
    }
    
    // optional int32 factionContribute = 31;
    if (has_factionContribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factionContribute());
    }
    
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional int32 helpNode = 33;
    if (has_helpNode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpNode());
    }
    
  }
  // repeated .PB_FightAtt.PropertyType baseType = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->baseType_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->baseType(i));
    }
    total_size += 1 * this->baseType_size() + data_size;
  }
  
  // repeated int32 baseDelta = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->baseDelta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->baseDelta(i));
    }
    total_size += 1 * this->baseDelta_size() + data_size;
  }
  
  // repeated .PB_FightAtt.PropertyType enhanceType = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->enhanceType_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->enhanceType(i));
    }
    total_size += 2 * this->enhanceType_size() + data_size;
  }
  
  // repeated int32 enhanceLimit = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->enhanceLimit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enhanceLimit(i));
    }
    total_size += 2 * this->enhanceLimit_size() + data_size;
  }
  
  // repeated .PB_ItemInfo decomposeItems = 32;
  total_size += 2 * this->decomposeItems_size();
  for (int i = 0; i < this->decomposeItems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->decomposeItems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentInfo::MergeFrom(const EquipmentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  baseType_.MergeFrom(from.baseType_);
  baseDelta_.MergeFrom(from.baseDelta_);
  enhanceType_.MergeFrom(from.enhanceType_);
  enhanceLimit_.MergeFrom(from.enhanceLimit_);
  decomposeItems_.MergeFrom(from.decomposeItems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_picture()) {
      set_picture(from.picture());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_professionType()) {
      set_professionType(from.professionType());
    }
    if (from.has_requiredLevel()) {
      set_requiredLevel(from.requiredLevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_equipmentLevel()) {
      set_equipmentLevel(from.equipmentLevel());
    }
    if (from.has_isSell()) {
      set_isSell(from.isSell());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_colorType()) {
      set_colorType(from.colorType());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_effect1()) {
      set_effect1(from.effect1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_effect2()) {
      set_effect2(from.effect2());
    }
    if (from.has_stampCount()) {
      set_stampCount(from.stampCount());
    }
    if (from.has_lovePoint()) {
      set_lovePoint(from.lovePoint());
    }
    if (from.has_pvpScore()) {
      set_pvpScore(from.pvpScore());
    }
    if (from.has_godScore()) {
      set_godScore(from.godScore());
    }
    if (from.has_factionContribute()) {
      set_factionContribute(from.factionContribute());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_helpNode()) {
      set_helpNode(from.helpNode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentInfo::CopyFrom(const EquipmentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentInfo::IsInitialized() const {
  
  return true;
}

void EquipmentInfo::Swap(EquipmentInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(model_, other->model_);
    std::swap(picture_, other->picture_);
    std::swap(desc_, other->desc_);
    std::swap(professionType_, other->professionType_);
    std::swap(requiredLevel_, other->requiredLevel_);
    std::swap(equipmentLevel_, other->equipmentLevel_);
    std::swap(isSell_, other->isSell_);
    std::swap(price_, other->price_);
    std::swap(colorType_, other->colorType_);
    baseType_.Swap(&other->baseType_);
    baseDelta_.Swap(&other->baseDelta_);
    std::swap(rmb_, other->rmb_);
    std::swap(effect1_, other->effect1_);
    std::swap(effect2_, other->effect2_);
    std::swap(stampCount_, other->stampCount_);
    enhanceType_.Swap(&other->enhanceType_);
    enhanceLimit_.Swap(&other->enhanceLimit_);
    std::swap(lovePoint_, other->lovePoint_);
    std::swap(pvpScore_, other->pvpScore_);
    std::swap(godScore_, other->godScore_);
    std::swap(factionContribute_, other->factionContribute_);
    decomposeItems_.Swap(&other->decomposeItems_);
    std::swap(helpNode_, other->helpNode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentInfo_descriptor_;
  metadata.reflection = EquipmentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllEquipments::kEquipmentsFieldNumber;
#endif  // !_MSC_VER

AllEquipments::AllEquipments()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllEquipments::InitAsDefaultInstance() {
}

AllEquipments::AllEquipments(const AllEquipments& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllEquipments::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllEquipments::~AllEquipments() {
  SharedDtor();
}

void AllEquipments::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllEquipments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllEquipments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllEquipments_descriptor_;
}

const AllEquipments& AllEquipments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

AllEquipments* AllEquipments::default_instance_ = NULL;

AllEquipments* AllEquipments::New() const {
  return new AllEquipments;
}

void AllEquipments::Clear() {
  equipments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllEquipments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipmentInfo equipments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllEquipments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipmentInfo equipments = 1;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllEquipments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipmentInfo equipments = 1;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllEquipments::ByteSize() const {
  int total_size = 0;
  
  // repeated .EquipmentInfo equipments = 1;
  total_size += 1 * this->equipments_size();
  for (int i = 0; i < this->equipments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllEquipments::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllEquipments* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllEquipments*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllEquipments::MergeFrom(const AllEquipments& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipments_.MergeFrom(from.equipments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllEquipments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllEquipments::CopyFrom(const AllEquipments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllEquipments::IsInitialized() const {
  
  return true;
}

void AllEquipments::Swap(AllEquipments* other) {
  if (other != this) {
    equipments_.Swap(&other->equipments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllEquipments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllEquipments_descriptor_;
  metadata.reflection = AllEquipments_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_EquipAsset::kModeFieldNumber;
const int PB_EquipAsset::kStrongLevelFieldNumber;
const int PB_EquipAsset::kGemModelFieldNumber;
const int PB_EquipAsset::kGemTypeFieldNumber;
const int PB_EquipAsset::kEnhanceDeltaFieldNumber;
#endif  // !_MSC_VER

PB_EquipAsset::PB_EquipAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_EquipAsset::InitAsDefaultInstance() {
}

PB_EquipAsset::PB_EquipAsset(const PB_EquipAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_EquipAsset::SharedCtor() {
  _cached_size_ = 0;
  mode_ = -1;
  strongLevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_EquipAsset::~PB_EquipAsset() {
  SharedDtor();
}

void PB_EquipAsset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_EquipAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_EquipAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_EquipAsset_descriptor_;
}

const PB_EquipAsset& PB_EquipAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

PB_EquipAsset* PB_EquipAsset::default_instance_ = NULL;

PB_EquipAsset* PB_EquipAsset::New() const {
  return new PB_EquipAsset;
}

void PB_EquipAsset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = -1;
    strongLevel_ = 0;
  }
  gemModel_.Clear();
  gemType_.Clear();
  enhanceDelta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_EquipAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strongLevel;
        break;
      }
      
      // optional int32 strongLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strongLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strongLevel_)));
          set_has_strongLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gemModel;
        break;
      }
      
      // repeated int32 gemModel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemModel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_gemModel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gemModel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gemModel;
        if (input->ExpectTag(32)) goto parse_gemType;
        break;
      }
      
      // repeated int32 gemType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_gemType())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gemType())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gemType;
        if (input->ExpectTag(40)) goto parse_enhanceDelta;
        break;
      }
      
      // repeated int32 enhanceDelta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhanceDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_enhanceDelta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enhanceDelta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enhanceDelta;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_EquipAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mode = 1 [default = -1];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }
  
  // optional int32 strongLevel = 2;
  if (has_strongLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->strongLevel(), output);
  }
  
  // repeated int32 gemModel = 3;
  for (int i = 0; i < this->gemModel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->gemModel(i), output);
  }
  
  // repeated int32 gemType = 4;
  for (int i = 0; i < this->gemType_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->gemType(i), output);
  }
  
  // repeated int32 enhanceDelta = 5;
  for (int i = 0; i < this->enhanceDelta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->enhanceDelta(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_EquipAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mode = 1 [default = -1];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }
  
  // optional int32 strongLevel = 2;
  if (has_strongLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->strongLevel(), target);
  }
  
  // repeated int32 gemModel = 3;
  for (int i = 0; i < this->gemModel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->gemModel(i), target);
  }
  
  // repeated int32 gemType = 4;
  for (int i = 0; i < this->gemType_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->gemType(i), target);
  }
  
  // repeated int32 enhanceDelta = 5;
  for (int i = 0; i < this->enhanceDelta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->enhanceDelta(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_EquipAsset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mode = 1 [default = -1];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // optional int32 strongLevel = 2;
    if (has_strongLevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strongLevel());
    }
    
  }
  // repeated int32 gemModel = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gemModel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gemModel(i));
    }
    total_size += 1 * this->gemModel_size() + data_size;
  }
  
  // repeated int32 gemType = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->gemType_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gemType(i));
    }
    total_size += 1 * this->gemType_size() + data_size;
  }
  
  // repeated int32 enhanceDelta = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->enhanceDelta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enhanceDelta(i));
    }
    total_size += 1 * this->enhanceDelta_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_EquipAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_EquipAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_EquipAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_EquipAsset::MergeFrom(const PB_EquipAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  gemModel_.MergeFrom(from.gemModel_);
  gemType_.MergeFrom(from.gemType_);
  enhanceDelta_.MergeFrom(from.enhanceDelta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_strongLevel()) {
      set_strongLevel(from.strongLevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_EquipAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_EquipAsset::CopyFrom(const PB_EquipAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_EquipAsset::IsInitialized() const {
  
  return true;
}

void PB_EquipAsset::Swap(PB_EquipAsset* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(strongLevel_, other->strongLevel_);
    gemModel_.Swap(&other->gemModel_);
    gemType_.Swap(&other->gemType_);
    enhanceDelta_.Swap(&other->enhanceDelta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_EquipAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_EquipAsset_descriptor_;
  metadata.reflection = PB_EquipAsset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipRecipe::kIdFieldNumber;
const int EquipRecipe::kTypeFieldNumber;
const int EquipRecipe::kMaterialsFieldNumber;
const int EquipRecipe::kNumsFieldNumber;
const int EquipRecipe::kEquipmentsFieldNumber;
#endif  // !_MSC_VER

EquipRecipe::EquipRecipe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipRecipe::InitAsDefaultInstance() {
}

EquipRecipe::EquipRecipe(const EquipRecipe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipRecipe::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipRecipe::~EquipRecipe() {
  SharedDtor();
}

void EquipRecipe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipRecipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipRecipe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipRecipe_descriptor_;
}

const EquipRecipe& EquipRecipe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

EquipRecipe* EquipRecipe::default_instance_ = NULL;

EquipRecipe* EquipRecipe::New() const {
  return new EquipRecipe;
}

void EquipRecipe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
  }
  materials_.Clear();
  nums_.Clear();
  equipments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipRecipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .EquipmentInfo.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EquipmentInfo_Type_IsValid(value)) {
            set_type(static_cast< ::EquipmentInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materials;
        break;
      }
      
      // repeated int32 materials = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_materials())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_materials())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materials;
        if (input->ExpectTag(32)) goto parse_nums;
        break;
      }
      
      // repeated int32 nums = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_nums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nums;
        if (input->ExpectTag(40)) goto parse_equipments;
        break;
      }
      
      // repeated int32 equipments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_equipments())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equipments())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equipments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipRecipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .EquipmentInfo.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // repeated int32 materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->materials(i), output);
  }
  
  // repeated int32 nums = 4;
  for (int i = 0; i < this->nums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->nums(i), output);
  }
  
  // repeated int32 equipments = 5;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->equipments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipRecipe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .EquipmentInfo.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // repeated int32 materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->materials(i), target);
  }
  
  // repeated int32 nums = 4;
  for (int i = 0; i < this->nums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->nums(i), target);
  }
  
  // repeated int32 equipments = 5;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->equipments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipRecipe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .EquipmentInfo.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated int32 materials = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->materials_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->materials(i));
    }
    total_size += 1 * this->materials_size() + data_size;
  }
  
  // repeated int32 nums = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->nums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nums(i));
    }
    total_size += 1 * this->nums_size() + data_size;
  }
  
  // repeated int32 equipments = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipments_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equipments(i));
    }
    total_size += 1 * this->equipments_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipRecipe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipRecipe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipRecipe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipRecipe::MergeFrom(const EquipRecipe& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  nums_.MergeFrom(from.nums_);
  equipments_.MergeFrom(from.equipments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipRecipe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipRecipe::CopyFrom(const EquipRecipe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRecipe::IsInitialized() const {
  
  return true;
}

void EquipRecipe::Swap(EquipRecipe* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    materials_.Swap(&other->materials_);
    nums_.Swap(&other->nums_);
    equipments_.Swap(&other->equipments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipRecipe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipRecipe_descriptor_;
  metadata.reflection = EquipRecipe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllEquipRecipes::kRecipesFieldNumber;
#endif  // !_MSC_VER

AllEquipRecipes::AllEquipRecipes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllEquipRecipes::InitAsDefaultInstance() {
}

AllEquipRecipes::AllEquipRecipes(const AllEquipRecipes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllEquipRecipes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllEquipRecipes::~AllEquipRecipes() {
  SharedDtor();
}

void AllEquipRecipes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllEquipRecipes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllEquipRecipes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllEquipRecipes_descriptor_;
}

const AllEquipRecipes& AllEquipRecipes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

AllEquipRecipes* AllEquipRecipes::default_instance_ = NULL;

AllEquipRecipes* AllEquipRecipes::New() const {
  return new AllEquipRecipes;
}

void AllEquipRecipes::Clear() {
  recipes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllEquipRecipes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipRecipe recipes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recipes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recipes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllEquipRecipes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipRecipe recipes = 1;
  for (int i = 0; i < this->recipes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recipes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllEquipRecipes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipRecipe recipes = 1;
  for (int i = 0; i < this->recipes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recipes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllEquipRecipes::ByteSize() const {
  int total_size = 0;
  
  // repeated .EquipRecipe recipes = 1;
  total_size += 1 * this->recipes_size();
  for (int i = 0; i < this->recipes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recipes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllEquipRecipes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllEquipRecipes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllEquipRecipes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllEquipRecipes::MergeFrom(const AllEquipRecipes& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipes_.MergeFrom(from.recipes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllEquipRecipes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllEquipRecipes::CopyFrom(const AllEquipRecipes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllEquipRecipes::IsInitialized() const {
  
  return true;
}

void AllEquipRecipes::Swap(AllEquipRecipes* other) {
  if (other != this) {
    recipes_.Swap(&other->recipes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllEquipRecipes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllEquipRecipes_descriptor_;
  metadata.reflection = AllEquipRecipes_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BaseWing_ColorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseWing_ColorType_descriptor_;
}
bool BaseWing_ColorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BaseWing_ColorType BaseWing::WHITE;
const BaseWing_ColorType BaseWing::GREEN;
const BaseWing_ColorType BaseWing::BLUE;
const BaseWing_ColorType BaseWing::YELLOW;
const BaseWing_ColorType BaseWing::RED;
const BaseWing_ColorType BaseWing::ColorType_MIN;
const BaseWing_ColorType BaseWing::ColorType_MAX;
const int BaseWing::ColorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BaseWing::kLevelFieldNumber;
const int BaseWing::kNameFieldNumber;
const int BaseWing::kModelFieldNumber;
const int BaseWing::kEffectFieldNumber;
const int BaseWing::kDescFieldNumber;
const int BaseWing::kDegreeFieldNumber;
const int BaseWing::kAttFieldNumber;
const int BaseWing::kGoodsFieldNumber;
const int BaseWing::kCountFieldNumber;
const int BaseWing::kPicFieldNumber;
const int BaseWing::kColorTypeFieldNumber;
#endif  // !_MSC_VER

BaseWing::BaseWing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseWing::InitAsDefaultInstance() {
}

BaseWing::BaseWing(const BaseWing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseWing::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  degree_ = 0;
  goods_ = 0;
  count_ = 0;
  pic_ = 0;
  colorType_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseWing::~BaseWing() {
  SharedDtor();
}

void BaseWing::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void BaseWing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseWing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseWing_descriptor_;
}

const BaseWing& BaseWing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

BaseWing* BaseWing::default_instance_ = NULL;

BaseWing* BaseWing::New() const {
  return new BaseWing;
}

void BaseWing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    degree_ = 0;
    goods_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    count_ = 0;
    pic_ = 0;
    colorType_ = 0;
  }
  model_.Clear();
  effect_.Clear();
  att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseWing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_model;
        break;
      }
      
      // repeated int32 model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_model())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_model())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_model;
        if (input->ExpectTag(32)) goto parse_effect;
        break;
      }
      
      // repeated int32 effect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_effect())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_effect())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_effect;
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }
      
      // optional string desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_degree;
        break;
      }
      
      // optional int32 degree = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_att;
        break;
      }
      
      // repeated int32 att = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_att;
        if (input->ExpectTag(64)) goto parse_goods;
        break;
      }
      
      // optional int32 goods = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_)));
          set_has_goods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_count;
        break;
      }
      
      // optional int32 count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pic;
        break;
      }
      
      // optional int32 pic = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_colorType;
        break;
      }
      
      // optional .BaseWing.ColorType colorType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BaseWing_ColorType_IsValid(value)) {
            set_colorType(static_cast< ::BaseWing_ColorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseWing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated int32 model = 3;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->model(i), output);
  }
  
  // repeated int32 effect = 4;
  for (int i = 0; i < this->effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->effect(i), output);
  }
  
  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc(), output);
  }
  
  // optional int32 degree = 6;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->degree(), output);
  }
  
  // repeated int32 att = 7;
  for (int i = 0; i < this->att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->att(i), output);
  }
  
  // optional int32 goods = 8;
  if (has_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->goods(), output);
  }
  
  // optional int32 count = 9;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->count(), output);
  }
  
  // optional int32 pic = 10;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pic(), output);
  }
  
  // optional .BaseWing.ColorType colorType = 11;
  if (has_colorType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->colorType(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseWing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated int32 model = 3;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->model(i), target);
  }
  
  // repeated int32 effect = 4;
  for (int i = 0; i < this->effect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->effect(i), target);
  }
  
  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }
  
  // optional int32 degree = 6;
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->degree(), target);
  }
  
  // repeated int32 att = 7;
  for (int i = 0; i < this->att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->att(i), target);
  }
  
  // optional int32 goods = 8;
  if (has_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->goods(), target);
  }
  
  // optional int32 count = 9;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->count(), target);
  }
  
  // optional int32 pic = 10;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pic(), target);
  }
  
  // optional .BaseWing.ColorType colorType = 11;
  if (has_colorType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->colorType(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseWing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 degree = 6;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->degree());
    }
    
    // optional int32 goods = 8;
    if (has_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 pic = 10;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }
    
    // optional .BaseWing.ColorType colorType = 11;
    if (has_colorType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->colorType());
    }
    
  }
  // repeated int32 model = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->model_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->model(i));
    }
    total_size += 1 * this->model_size() + data_size;
  }
  
  // repeated int32 effect = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->effect_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->effect(i));
    }
    total_size += 1 * this->effect_size() + data_size;
  }
  
  // repeated int32 att = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->att(i));
    }
    total_size += 1 * this->att_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseWing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseWing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseWing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseWing::MergeFrom(const BaseWing& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  effect_.MergeFrom(from.effect_);
  att_.MergeFrom(from.att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_goods()) {
      set_goods(from.goods());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_colorType()) {
      set_colorType(from.colorType());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseWing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseWing::CopyFrom(const BaseWing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseWing::IsInitialized() const {
  
  return true;
}

void BaseWing::Swap(BaseWing* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    model_.Swap(&other->model_);
    effect_.Swap(&other->effect_);
    std::swap(desc_, other->desc_);
    std::swap(degree_, other->degree_);
    att_.Swap(&other->att_);
    std::swap(goods_, other->goods_);
    std::swap(count_, other->count_);
    std::swap(pic_, other->pic_);
    std::swap(colorType_, other->colorType_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseWing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseWing_descriptor_;
  metadata.reflection = BaseWing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllBaseWings::kWingsFieldNumber;
#endif  // !_MSC_VER

AllBaseWings::AllBaseWings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllBaseWings::InitAsDefaultInstance() {
}

AllBaseWings::AllBaseWings(const AllBaseWings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllBaseWings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllBaseWings::~AllBaseWings() {
  SharedDtor();
}

void AllBaseWings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllBaseWings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllBaseWings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllBaseWings_descriptor_;
}

const AllBaseWings& AllBaseWings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

AllBaseWings* AllBaseWings::default_instance_ = NULL;

AllBaseWings* AllBaseWings::New() const {
  return new AllBaseWings;
}

void AllBaseWings::Clear() {
  wings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllBaseWings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BaseWing wings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllBaseWings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BaseWing wings = 1;
  for (int i = 0; i < this->wings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllBaseWings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BaseWing wings = 1;
  for (int i = 0; i < this->wings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllBaseWings::ByteSize() const {
  int total_size = 0;
  
  // repeated .BaseWing wings = 1;
  total_size += 1 * this->wings_size();
  for (int i = 0; i < this->wings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllBaseWings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllBaseWings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllBaseWings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllBaseWings::MergeFrom(const AllBaseWings& from) {
  GOOGLE_CHECK_NE(&from, this);
  wings_.MergeFrom(from.wings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllBaseWings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllBaseWings::CopyFrom(const AllBaseWings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllBaseWings::IsInitialized() const {
  
  return true;
}

void AllBaseWings::Swap(AllBaseWings* other) {
  if (other != this) {
    wings_.Swap(&other->wings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllBaseWings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllBaseWings_descriptor_;
  metadata.reflection = AllBaseWings_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Wing_ColorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wing_ColorType_descriptor_;
}
bool Wing_ColorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Wing_ColorType Wing::WHITE;
const Wing_ColorType Wing::GREEN;
const Wing_ColorType Wing::BLUE;
const Wing_ColorType Wing::YELLOW;
const Wing_ColorType Wing::RED;
const Wing_ColorType Wing::ColorType_MIN;
const Wing_ColorType Wing::ColorType_MAX;
const int Wing::ColorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Wing::kIdFieldNumber;
const int Wing::kModelFieldNumber;
const int Wing::kEffectFieldNumber;
const int Wing::kAttFieldNumber;
const int Wing::kDescFieldNumber;
const int Wing::kPicFieldNumber;
const int Wing::kRmbFieldNumber;
const int Wing::kColorTypeFieldNumber;
const int Wing::kNameFieldNumber;
const int Wing::kPvpScoreFieldNumber;
const int Wing::kLovePointFieldNumber;
const int Wing::kGodScoreFieldNumber;
const int Wing::kFactionContributeFieldNumber;
const int Wing::kHelpNodeFieldNumber;
#endif  // !_MSC_VER

Wing::Wing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Wing::InitAsDefaultInstance() {
}

Wing::Wing(const Wing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Wing::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_ = 0;
  rmb_ = 0;
  colorType_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pvpScore_ = 0;
  lovePoint_ = 0;
  godScore_ = 0;
  factionContribute_ = 0;
  helpNode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wing::~Wing() {
  SharedDtor();
}

void Wing::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Wing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wing_descriptor_;
}

const Wing& Wing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

Wing* Wing::default_instance_ = NULL;

Wing* Wing::New() const {
  return new Wing;
}

void Wing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    pic_ = 0;
    rmb_ = 0;
    colorType_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    pvpScore_ = 0;
    lovePoint_ = 0;
    godScore_ = 0;
    factionContribute_ = 0;
    helpNode_ = 0;
  }
  model_.Clear();
  effect_.Clear();
  att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Wing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_model;
        break;
      }
      
      // repeated int32 model = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_model())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_model())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_model;
        if (input->ExpectTag(24)) goto parse_effect;
        break;
      }
      
      // repeated int32 effect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_effect())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_effect())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_effect;
        if (input->ExpectTag(32)) goto parse_att;
        break;
      }
      
      // repeated int32 att = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_att;
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }
      
      // optional string desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pic;
        break;
      }
      
      // optional int32 pic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_colorType;
        break;
      }
      
      // optional .Wing.ColorType colorType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Wing_ColorType_IsValid(value)) {
            set_colorType(static_cast< ::Wing_ColorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }
      
      // optional string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pvpScore;
        break;
      }
      
      // optional int32 pvpScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpScore_)));
          set_has_pvpScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lovePoint;
        break;
      }
      
      // optional int32 lovePoint = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lovePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lovePoint_)));
          set_has_lovePoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_godScore;
        break;
      }
      
      // optional int32 godScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godScore_)));
          set_has_godScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_factionContribute;
        break;
      }
      
      // optional int32 factionContribute = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factionContribute_)));
          set_has_factionContribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_helpNode;
        break;
      }
      
      // optional int32 helpNode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpNode_)));
          set_has_helpNode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Wing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated int32 model = 2;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->model(i), output);
  }
  
  // repeated int32 effect = 3;
  for (int i = 0; i < this->effect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->effect(i), output);
  }
  
  // repeated int32 att = 4;
  for (int i = 0; i < this->att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->att(i), output);
  }
  
  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc(), output);
  }
  
  // optional int32 pic = 6;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pic(), output);
  }
  
  // optional int32 rmb = 7;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rmb(), output);
  }
  
  // optional .Wing.ColorType colorType = 8;
  if (has_colorType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->colorType(), output);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }
  
  // optional int32 pvpScore = 10;
  if (has_pvpScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pvpScore(), output);
  }
  
  // optional int32 lovePoint = 11;
  if (has_lovePoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lovePoint(), output);
  }
  
  // optional int32 godScore = 12;
  if (has_godScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->godScore(), output);
  }
  
  // optional int32 factionContribute = 13;
  if (has_factionContribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->factionContribute(), output);
  }
  
  // optional int32 helpNode = 14;
  if (has_helpNode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->helpNode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Wing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated int32 model = 2;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->model(i), target);
  }
  
  // repeated int32 effect = 3;
  for (int i = 0; i < this->effect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->effect(i), target);
  }
  
  // repeated int32 att = 4;
  for (int i = 0; i < this->att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->att(i), target);
  }
  
  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }
  
  // optional int32 pic = 6;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pic(), target);
  }
  
  // optional int32 rmb = 7;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rmb(), target);
  }
  
  // optional .Wing.ColorType colorType = 8;
  if (has_colorType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->colorType(), target);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }
  
  // optional int32 pvpScore = 10;
  if (has_pvpScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pvpScore(), target);
  }
  
  // optional int32 lovePoint = 11;
  if (has_lovePoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lovePoint(), target);
  }
  
  // optional int32 godScore = 12;
  if (has_godScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->godScore(), target);
  }
  
  // optional int32 factionContribute = 13;
  if (has_factionContribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->factionContribute(), target);
  }
  
  // optional int32 helpNode = 14;
  if (has_helpNode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->helpNode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Wing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 pic = 6;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }
    
    // optional int32 rmb = 7;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional .Wing.ColorType colorType = 8;
    if (has_colorType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->colorType());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 pvpScore = 10;
    if (has_pvpScore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpScore());
    }
    
    // optional int32 lovePoint = 11;
    if (has_lovePoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lovePoint());
    }
    
    // optional int32 godScore = 12;
    if (has_godScore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godScore());
    }
    
    // optional int32 factionContribute = 13;
    if (has_factionContribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factionContribute());
    }
    
    // optional int32 helpNode = 14;
    if (has_helpNode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpNode());
    }
    
  }
  // repeated int32 model = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->model_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->model(i));
    }
    total_size += 1 * this->model_size() + data_size;
  }
  
  // repeated int32 effect = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->effect_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->effect(i));
    }
    total_size += 1 * this->effect_size() + data_size;
  }
  
  // repeated int32 att = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->att(i));
    }
    total_size += 1 * this->att_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Wing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wing::MergeFrom(const Wing& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  effect_.MergeFrom(from.effect_);
  att_.MergeFrom(from.att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_colorType()) {
      set_colorType(from.colorType());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pvpScore()) {
      set_pvpScore(from.pvpScore());
    }
    if (from.has_lovePoint()) {
      set_lovePoint(from.lovePoint());
    }
    if (from.has_godScore()) {
      set_godScore(from.godScore());
    }
    if (from.has_factionContribute()) {
      set_factionContribute(from.factionContribute());
    }
    if (from.has_helpNode()) {
      set_helpNode(from.helpNode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Wing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wing::CopyFrom(const Wing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wing::IsInitialized() const {
  
  return true;
}

void Wing::Swap(Wing* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    model_.Swap(&other->model_);
    effect_.Swap(&other->effect_);
    att_.Swap(&other->att_);
    std::swap(desc_, other->desc_);
    std::swap(pic_, other->pic_);
    std::swap(rmb_, other->rmb_);
    std::swap(colorType_, other->colorType_);
    std::swap(name_, other->name_);
    std::swap(pvpScore_, other->pvpScore_);
    std::swap(lovePoint_, other->lovePoint_);
    std::swap(godScore_, other->godScore_);
    std::swap(factionContribute_, other->factionContribute_);
    std::swap(helpNode_, other->helpNode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Wing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wing_descriptor_;
  metadata.reflection = Wing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllWings::kWingsFieldNumber;
#endif  // !_MSC_VER

AllWings::AllWings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllWings::InitAsDefaultInstance() {
}

AllWings::AllWings(const AllWings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllWings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllWings::~AllWings() {
  SharedDtor();
}

void AllWings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllWings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllWings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllWings_descriptor_;
}

const AllWings& AllWings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

AllWings* AllWings::default_instance_ = NULL;

AllWings* AllWings::New() const {
  return new AllWings;
}

void AllWings::Clear() {
  wings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllWings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Wing wings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wings;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllWings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Wing wings = 1;
  for (int i = 0; i < this->wings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wings(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllWings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Wing wings = 1;
  for (int i = 0; i < this->wings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wings(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllWings::ByteSize() const {
  int total_size = 0;
  
  // repeated .Wing wings = 1;
  total_size += 1 * this->wings_size();
  for (int i = 0; i < this->wings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllWings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllWings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllWings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllWings::MergeFrom(const AllWings& from) {
  GOOGLE_CHECK_NE(&from, this);
  wings_.MergeFrom(from.wings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllWings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllWings::CopyFrom(const AllWings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllWings::IsInitialized() const {
  
  return true;
}

void AllWings::Swap(AllWings* other) {
  if (other != this) {
    wings_.Swap(&other->wings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllWings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllWings_descriptor_;
  metadata.reflection = AllWings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_EquipmentAtt::kEquipmentsFieldNumber;
const int PB_EquipmentAtt::kWingFieldNumber;
const int PB_EquipmentAtt::kFashionFieldNumber;
const int PB_EquipmentAtt::kBaseWingFieldNumber;
const int PB_EquipmentAtt::kRidesFieldNumber;
const int PB_EquipmentAtt::kGodShipsFieldNumber;
#endif  // !_MSC_VER

PB_EquipmentAtt::PB_EquipmentAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_EquipmentAtt::InitAsDefaultInstance() {
}

PB_EquipmentAtt::PB_EquipmentAtt(const PB_EquipmentAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_EquipmentAtt::SharedCtor() {
  _cached_size_ = 0;
  wing_ = -1;
  fashion_ = -1;
  baseWing_ = false;
  rides_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_EquipmentAtt::~PB_EquipmentAtt() {
  SharedDtor();
}

void PB_EquipmentAtt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_EquipmentAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_EquipmentAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_EquipmentAtt_descriptor_;
}

const PB_EquipmentAtt& PB_EquipmentAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentInfo_2eproto();  return *default_instance_;
}

PB_EquipmentAtt* PB_EquipmentAtt::default_instance_ = NULL;

PB_EquipmentAtt* PB_EquipmentAtt::New() const {
  return new PB_EquipmentAtt;
}

void PB_EquipmentAtt::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    wing_ = -1;
    fashion_ = -1;
    baseWing_ = false;
    rides_ = 0;
  }
  equipments_.Clear();
  godShips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_EquipmentAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 equipments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_equipments())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_equipments())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_equipments;
        if (input->ExpectTag(24)) goto parse_wing;
        break;
      }
      
      // optional int32 wing = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_)));
          set_has_wing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fashion;
        break;
      }
      
      // optional int32 fashion = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_)));
          set_has_fashion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_baseWing;
        break;
      }
      
      // optional bool baseWing = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseWing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &baseWing_)));
          set_has_baseWing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rides;
        break;
      }
      
      // optional int32 rides = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rides_)));
          set_has_rides();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_godShips;
        break;
      }
      
      // repeated int32 godShips = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godShips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_godShips())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_godShips())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_godShips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_EquipmentAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 equipments = 1;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->equipments(i), output);
  }
  
  // optional int32 wing = 3 [default = -1];
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wing(), output);
  }
  
  // optional int32 fashion = 4 [default = -1];
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fashion(), output);
  }
  
  // optional bool baseWing = 5;
  if (has_baseWing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->baseWing(), output);
  }
  
  // optional int32 rides = 6;
  if (has_rides()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rides(), output);
  }
  
  // repeated int32 godShips = 7;
  for (int i = 0; i < this->godShips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->godShips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_EquipmentAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 equipments = 1;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->equipments(i), target);
  }
  
  // optional int32 wing = 3 [default = -1];
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wing(), target);
  }
  
  // optional int32 fashion = 4 [default = -1];
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fashion(), target);
  }
  
  // optional bool baseWing = 5;
  if (has_baseWing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->baseWing(), target);
  }
  
  // optional int32 rides = 6;
  if (has_rides()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rides(), target);
  }
  
  // repeated int32 godShips = 7;
  for (int i = 0; i < this->godShips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->godShips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_EquipmentAtt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 wing = 3 [default = -1];
    if (has_wing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing());
    }
    
    // optional int32 fashion = 4 [default = -1];
    if (has_fashion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion());
    }
    
    // optional bool baseWing = 5;
    if (has_baseWing()) {
      total_size += 1 + 1;
    }
    
    // optional int32 rides = 6;
    if (has_rides()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rides());
    }
    
  }
  // repeated int64 equipments = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipments_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->equipments(i));
    }
    total_size += 1 * this->equipments_size() + data_size;
  }
  
  // repeated int32 godShips = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->godShips_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->godShips(i));
    }
    total_size += 1 * this->godShips_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_EquipmentAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_EquipmentAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_EquipmentAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_EquipmentAtt::MergeFrom(const PB_EquipmentAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipments_.MergeFrom(from.equipments_);
  godShips_.MergeFrom(from.godShips_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_wing()) {
      set_wing(from.wing());
    }
    if (from.has_fashion()) {
      set_fashion(from.fashion());
    }
    if (from.has_baseWing()) {
      set_baseWing(from.baseWing());
    }
    if (from.has_rides()) {
      set_rides(from.rides());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_EquipmentAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_EquipmentAtt::CopyFrom(const PB_EquipmentAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_EquipmentAtt::IsInitialized() const {
  
  return true;
}

void PB_EquipmentAtt::Swap(PB_EquipmentAtt* other) {
  if (other != this) {
    equipments_.Swap(&other->equipments_);
    std::swap(wing_, other->wing_);
    std::swap(fashion_, other->fashion_);
    std::swap(baseWing_, other->baseWing_);
    std::swap(rides_, other->rides_);
    godShips_.Swap(&other->godShips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_EquipmentAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_EquipmentAtt_descriptor_;
  metadata.reflection = PB_EquipmentAtt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemBaseInfo.proto

#ifndef PROTOBUF_ItemBaseInfo_2eproto__INCLUDED
#define PROTOBUF_ItemBaseInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ItemBaseInfo_2eproto();
void protobuf_AssignDesc_ItemBaseInfo_2eproto();
void protobuf_ShutdownFile_ItemBaseInfo_2eproto();

class PB_ItemInfo;

enum PB_ItemInfo_Type {
  PB_ItemInfo_Type_NONE = 0,
  PB_ItemInfo_Type_GOODS = 1,
  PB_ItemInfo_Type_EQUIPMENT = 2,
  PB_ItemInfo_Type_MONEY = 3,
  PB_ItemInfo_Type_SKILL = 4,
  PB_ItemInfo_Type_FASHION = 5,
  PB_ItemInfo_Type_DESIGNATION = 6,
  PB_ItemInfo_Type_RMB = 7,
  PB_ItemInfo_Type_SOULJADE = 8,
  PB_ItemInfo_Type_SOUL = 9,
  PB_ItemInfo_Type_SOULSTONE = 10,
  PB_ItemInfo_Type_EXP = 11,
  PB_ItemInfo_Type_HONOR = 12,
  PB_ItemInfo_Type_DURABILITY = 13,
  PB_ItemInfo_Type_SUBRMB = 14,
  PB_ItemInfo_Type_WING = 15,
  PB_ItemInfo_Type_RUNE = 16,
  PB_ItemInfo_Type_GODSCORE = 17,
  PB_ItemInfo_Type_TRANSFORM = 18,
  PB_ItemInfo_Type_HP = 19,
  PB_ItemInfo_Type_PET = 20,
  PB_ItemInfo_Type_VIP = 21,
  PB_ItemInfo_Type_RIDES = 22,
  PB_ItemInfo_Type_GODSHIP = 23,
  PB_ItemInfo_Type_RIDES_FOOD = 24
};
bool PB_ItemInfo_Type_IsValid(int value);
const PB_ItemInfo_Type PB_ItemInfo_Type_Type_MIN = PB_ItemInfo_Type_NONE;
const PB_ItemInfo_Type PB_ItemInfo_Type_Type_MAX = PB_ItemInfo_Type_RIDES_FOOD;
const int PB_ItemInfo_Type_Type_ARRAYSIZE = PB_ItemInfo_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_ItemInfo_Type_descriptor();
inline const ::std::string& PB_ItemInfo_Type_Name(PB_ItemInfo_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_ItemInfo_Type_descriptor(), value);
}
inline bool PB_ItemInfo_Type_Parse(
    const ::std::string& name, PB_ItemInfo_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_ItemInfo_Type>(
    PB_ItemInfo_Type_descriptor(), name, value);
}
// ===================================================================

class PB_ItemInfo : public ::google::protobuf::Message {
 public:
  PB_ItemInfo();
  virtual ~PB_ItemInfo();
  
  PB_ItemInfo(const PB_ItemInfo& from);
  
  inline PB_ItemInfo& operator=(const PB_ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_ItemInfo& default_instance();
  
  void Swap(PB_ItemInfo* other);
  
  // implements Message ----------------------------------------------
  
  PB_ItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_ItemInfo& from);
  void MergeFrom(const PB_ItemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PB_ItemInfo_Type Type;
  static const Type NONE = PB_ItemInfo_Type_NONE;
  static const Type GOODS = PB_ItemInfo_Type_GOODS;
  static const Type EQUIPMENT = PB_ItemInfo_Type_EQUIPMENT;
  static const Type MONEY = PB_ItemInfo_Type_MONEY;
  static const Type SKILL = PB_ItemInfo_Type_SKILL;
  static const Type FASHION = PB_ItemInfo_Type_FASHION;
  static const Type DESIGNATION = PB_ItemInfo_Type_DESIGNATION;
  static const Type RMB = PB_ItemInfo_Type_RMB;
  static const Type SOULJADE = PB_ItemInfo_Type_SOULJADE;
  static const Type SOUL = PB_ItemInfo_Type_SOUL;
  static const Type SOULSTONE = PB_ItemInfo_Type_SOULSTONE;
  static const Type EXP = PB_ItemInfo_Type_EXP;
  static const Type HONOR = PB_ItemInfo_Type_HONOR;
  static const Type DURABILITY = PB_ItemInfo_Type_DURABILITY;
  static const Type SUBRMB = PB_ItemInfo_Type_SUBRMB;
  static const Type WING = PB_ItemInfo_Type_WING;
  static const Type RUNE = PB_ItemInfo_Type_RUNE;
  static const Type GODSCORE = PB_ItemInfo_Type_GODSCORE;
  static const Type TRANSFORM = PB_ItemInfo_Type_TRANSFORM;
  static const Type HP = PB_ItemInfo_Type_HP;
  static const Type PET = PB_ItemInfo_Type_PET;
  static const Type VIP = PB_ItemInfo_Type_VIP;
  static const Type RIDES = PB_ItemInfo_Type_RIDES;
  static const Type GODSHIP = PB_ItemInfo_Type_GODSHIP;
  static const Type RIDES_FOOD = PB_ItemInfo_Type_RIDES_FOOD;
  static inline bool Type_IsValid(int value) {
    return PB_ItemInfo_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PB_ItemInfo_Type_Type_MIN;
  static const Type Type_MAX =
    PB_ItemInfo_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PB_ItemInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PB_ItemInfo_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PB_ItemInfo_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PB_ItemInfo_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_ItemInfo.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB_ItemInfo_Type type() const;
  inline void set_type(::PB_ItemInfo_Type value);
  
  // optional int64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PB_ItemInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  int type_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ItemBaseInfo_2eproto();
  friend void protobuf_AssignDesc_ItemBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_ItemBaseInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_ItemInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_ItemInfo

// optional .PB_ItemInfo.Type type = 1;
inline bool PB_ItemInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_ItemInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_ItemInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_ItemInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PB_ItemInfo_Type PB_ItemInfo::type() const {
  return static_cast< ::PB_ItemInfo_Type >(type_);
}
inline void PB_ItemInfo::set_type(::PB_ItemInfo_Type value) {
  GOOGLE_DCHECK(::PB_ItemInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 id = 2;
inline bool PB_ItemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_ItemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_ItemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_ItemInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PB_ItemInfo::id() const {
  return id_;
}
inline void PB_ItemInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 3;
inline bool PB_ItemInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_ItemInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_ItemInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_ItemInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PB_ItemInfo::count() const {
  return count_;
}
inline void PB_ItemInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_ItemInfo_Type>() {
  return ::PB_ItemInfo_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ItemBaseInfo_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GodShip.proto

#ifndef PROTOBUF_GodShip_2eproto__INCLUDED
#define PROTOBUF_GodShip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GodShip_2eproto();
void protobuf_AssignDesc_GodShip_2eproto();
void protobuf_ShutdownFile_GodShip_2eproto();

class GodShip;
class PB_GodShipAsset;
class AllGodShips;

enum GodShip_Quali {
  GodShip_Quali_GREEN = 0,
  GodShip_Quali_BLUE = 1,
  GodShip_Quali_PURPLE = 2,
  GodShip_Quali_GOLD = 3,
  GodShip_Quali_RED = 4
};
bool GodShip_Quali_IsValid(int value);
const GodShip_Quali GodShip_Quali_Quali_MIN = GodShip_Quali_GREEN;
const GodShip_Quali GodShip_Quali_Quali_MAX = GodShip_Quali_RED;
const int GodShip_Quali_Quali_ARRAYSIZE = GodShip_Quali_Quali_MAX + 1;

const ::google::protobuf::EnumDescriptor* GodShip_Quali_descriptor();
inline const ::std::string& GodShip_Quali_Name(GodShip_Quali value) {
  return ::google::protobuf::internal::NameOfEnum(
    GodShip_Quali_descriptor(), value);
}
inline bool GodShip_Quali_Parse(
    const ::std::string& name, GodShip_Quali* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GodShip_Quali>(
    GodShip_Quali_descriptor(), name, value);
}
// ===================================================================

class GodShip : public ::google::protobuf::Message {
 public:
  GodShip();
  virtual ~GodShip();
  
  GodShip(const GodShip& from);
  
  inline GodShip& operator=(const GodShip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GodShip& default_instance();
  
  void Swap(GodShip* other);
  
  // implements Message ----------------------------------------------
  
  GodShip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GodShip& from);
  void MergeFrom(const GodShip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GodShip_Quali Quali;
  static const Quali GREEN = GodShip_Quali_GREEN;
  static const Quali BLUE = GodShip_Quali_BLUE;
  static const Quali PURPLE = GodShip_Quali_PURPLE;
  static const Quali GOLD = GodShip_Quali_GOLD;
  static const Quali RED = GodShip_Quali_RED;
  static inline bool Quali_IsValid(int value) {
    return GodShip_Quali_IsValid(value);
  }
  static const Quali Quali_MIN =
    GodShip_Quali_Quali_MIN;
  static const Quali Quali_MAX =
    GodShip_Quali_Quali_MAX;
  static const int Quali_ARRAYSIZE =
    GodShip_Quali_Quali_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Quali_descriptor() {
    return GodShip_Quali_descriptor();
  }
  static inline const ::std::string& Quali_Name(Quali value) {
    return GodShip_Quali_Name(value);
  }
  static inline bool Quali_Parse(const ::std::string& name,
      Quali* value) {
    return GodShip_Quali_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 Pic = 3;
  inline bool has_Pic() const;
  inline void clear_Pic();
  static const int kPicFieldNumber = 3;
  inline ::google::protobuf::int32 Pic() const;
  inline void set_Pic(::google::protobuf::int32 value);
  
  // optional int32 Type = 4;
  inline bool has_Type() const;
  inline void clear_Type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 Type() const;
  inline void set_Type(::google::protobuf::int32 value);
  
  // optional .GodShip.Quali Quality = 5;
  inline bool has_Quality() const;
  inline void clear_Quality();
  static const int kQualityFieldNumber = 5;
  inline ::GodShip_Quali Quality() const;
  inline void set_Quality(::GodShip_Quali value);
  
  // optional int32 Level = 6;
  inline bool has_Level() const;
  inline void clear_Level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 Level() const;
  inline void set_Level(::google::protobuf::int32 value);
  
  // optional int32 ATK = 7;
  inline bool has_ATK() const;
  inline void clear_ATK();
  static const int kATKFieldNumber = 7;
  inline ::google::protobuf::int32 ATK() const;
  inline void set_ATK(::google::protobuf::int32 value);
  
  // optional int32 DEF = 8;
  inline bool has_DEF() const;
  inline void clear_DEF();
  static const int kDEFFieldNumber = 8;
  inline ::google::protobuf::int32 DEF() const;
  inline void set_DEF(::google::protobuf::int32 value);
  
  // optional int32 MAXHP = 9;
  inline bool has_MAXHP() const;
  inline void clear_MAXHP();
  static const int kMAXHPFieldNumber = 9;
  inline ::google::protobuf::int32 MAXHP() const;
  inline void set_MAXHP(::google::protobuf::int32 value);
  
  // optional int32 CRIT = 10;
  inline bool has_CRIT() const;
  inline void clear_CRIT();
  static const int kCRITFieldNumber = 10;
  inline ::google::protobuf::int32 CRIT() const;
  inline void set_CRIT(::google::protobuf::int32 value);
  
  // optional int32 ACCURACY = 11;
  inline bool has_ACCURACY() const;
  inline void clear_ACCURACY();
  static const int kACCURACYFieldNumber = 11;
  inline ::google::protobuf::int32 ACCURACY() const;
  inline void set_ACCURACY(::google::protobuf::int32 value);
  
  // optional int32 DODGE = 12;
  inline bool has_DODGE() const;
  inline void clear_DODGE();
  static const int kDODGEFieldNumber = 12;
  inline ::google::protobuf::int32 DODGE() const;
  inline void set_DODGE(::google::protobuf::int32 value);
  
  // optional int32 CRITDEF = 13;
  inline bool has_CRITDEF() const;
  inline void clear_CRITDEF();
  static const int kCRITDEFFieldNumber = 13;
  inline ::google::protobuf::int32 CRITDEF() const;
  inline void set_CRITDEF(::google::protobuf::int32 value);
  
  // optional int32 CRITDamage = 14;
  inline bool has_CRITDamage() const;
  inline void clear_CRITDamage();
  static const int kCRITDamageFieldNumber = 14;
  inline ::google::protobuf::int32 CRITDamage() const;
  inline void set_CRITDamage(::google::protobuf::int32 value);
  
  // optional int32 EXP = 15;
  inline bool has_EXP() const;
  inline void clear_EXP();
  static const int kEXPFieldNumber = 15;
  inline ::google::protobuf::int32 EXP() const;
  inline void set_EXP(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:GodShip)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_Pic();
  inline void clear_has_Pic();
  inline void set_has_Type();
  inline void clear_has_Type();
  inline void set_has_Quality();
  inline void clear_has_Quality();
  inline void set_has_Level();
  inline void clear_has_Level();
  inline void set_has_ATK();
  inline void clear_has_ATK();
  inline void set_has_DEF();
  inline void clear_has_DEF();
  inline void set_has_MAXHP();
  inline void clear_has_MAXHP();
  inline void set_has_CRIT();
  inline void clear_has_CRIT();
  inline void set_has_ACCURACY();
  inline void clear_has_ACCURACY();
  inline void set_has_DODGE();
  inline void clear_has_DODGE();
  inline void set_has_CRITDEF();
  inline void clear_has_CRITDEF();
  inline void set_has_CRITDamage();
  inline void clear_has_CRITDamage();
  inline void set_has_EXP();
  inline void clear_has_EXP();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 Pic_;
  ::google::protobuf::int32 Type_;
  int Quality_;
  ::google::protobuf::int32 Level_;
  ::google::protobuf::int32 ATK_;
  ::google::protobuf::int32 DEF_;
  ::google::protobuf::int32 MAXHP_;
  ::google::protobuf::int32 CRIT_;
  ::google::protobuf::int32 ACCURACY_;
  ::google::protobuf::int32 DODGE_;
  ::google::protobuf::int32 CRITDEF_;
  ::google::protobuf::int32 CRITDamage_;
  ::google::protobuf::int32 EXP_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_GodShip_2eproto();
  friend void protobuf_AssignDesc_GodShip_2eproto();
  friend void protobuf_ShutdownFile_GodShip_2eproto();
  
  void InitAsDefaultInstance();
  static GodShip* default_instance_;
};
// -------------------------------------------------------------------

class PB_GodShipAsset : public ::google::protobuf::Message {
 public:
  PB_GodShipAsset();
  virtual ~PB_GodShipAsset();
  
  PB_GodShipAsset(const PB_GodShipAsset& from);
  
  inline PB_GodShipAsset& operator=(const PB_GodShipAsset& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_GodShipAsset& default_instance();
  
  void Swap(PB_GodShipAsset* other);
  
  // implements Message ----------------------------------------------
  
  PB_GodShipAsset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_GodShipAsset& from);
  void MergeFrom(const PB_GodShipAsset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PB_GodShipAsset)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GodShip_2eproto();
  friend void protobuf_AssignDesc_GodShip_2eproto();
  friend void protobuf_ShutdownFile_GodShip_2eproto();
  
  void InitAsDefaultInstance();
  static PB_GodShipAsset* default_instance_;
};
// -------------------------------------------------------------------

class AllGodShips : public ::google::protobuf::Message {
 public:
  AllGodShips();
  virtual ~AllGodShips();
  
  AllGodShips(const AllGodShips& from);
  
  inline AllGodShips& operator=(const AllGodShips& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllGodShips& default_instance();
  
  void Swap(AllGodShips* other);
  
  // implements Message ----------------------------------------------
  
  AllGodShips* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllGodShips& from);
  void MergeFrom(const AllGodShips& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .GodShip godShips = 1;
  inline int godShips_size() const;
  inline void clear_godShips();
  static const int kGodShipsFieldNumber = 1;
  inline const ::GodShip& godShips(int index) const;
  inline ::GodShip* mutable_godShips(int index);
  inline ::GodShip* add_godShips();
  inline const ::google::protobuf::RepeatedPtrField< ::GodShip >&
      godShips() const;
  inline ::google::protobuf::RepeatedPtrField< ::GodShip >*
      mutable_godShips();
  
  // @@protoc_insertion_point(class_scope:AllGodShips)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::GodShip > godShips_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_GodShip_2eproto();
  friend void protobuf_AssignDesc_GodShip_2eproto();
  friend void protobuf_ShutdownFile_GodShip_2eproto();
  
  void InitAsDefaultInstance();
  static AllGodShips* default_instance_;
};
// ===================================================================


// ===================================================================

// GodShip

// optional int32 id = 1;
inline bool GodShip::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GodShip::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GodShip::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GodShip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GodShip::id() const {
  return id_;
}
inline void GodShip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool GodShip::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GodShip::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GodShip::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GodShip::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GodShip::name() const {
  return *name_;
}
inline void GodShip::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GodShip::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GodShip::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GodShip::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GodShip::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 Pic = 3;
inline bool GodShip::has_Pic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GodShip::set_has_Pic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GodShip::clear_has_Pic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GodShip::clear_Pic() {
  Pic_ = 0;
  clear_has_Pic();
}
inline ::google::protobuf::int32 GodShip::Pic() const {
  return Pic_;
}
inline void GodShip::set_Pic(::google::protobuf::int32 value) {
  set_has_Pic();
  Pic_ = value;
}

// optional int32 Type = 4;
inline bool GodShip::has_Type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GodShip::set_has_Type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GodShip::clear_has_Type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GodShip::clear_Type() {
  Type_ = 0;
  clear_has_Type();
}
inline ::google::protobuf::int32 GodShip::Type() const {
  return Type_;
}
inline void GodShip::set_Type(::google::protobuf::int32 value) {
  set_has_Type();
  Type_ = value;
}

// optional .GodShip.Quali Quality = 5;
inline bool GodShip::has_Quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GodShip::set_has_Quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GodShip::clear_has_Quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GodShip::clear_Quality() {
  Quality_ = 0;
  clear_has_Quality();
}
inline ::GodShip_Quali GodShip::Quality() const {
  return static_cast< ::GodShip_Quali >(Quality_);
}
inline void GodShip::set_Quality(::GodShip_Quali value) {
  GOOGLE_DCHECK(::GodShip_Quali_IsValid(value));
  set_has_Quality();
  Quality_ = value;
}

// optional int32 Level = 6;
inline bool GodShip::has_Level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GodShip::set_has_Level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GodShip::clear_has_Level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GodShip::clear_Level() {
  Level_ = 0;
  clear_has_Level();
}
inline ::google::protobuf::int32 GodShip::Level() const {
  return Level_;
}
inline void GodShip::set_Level(::google::protobuf::int32 value) {
  set_has_Level();
  Level_ = value;
}

// optional int32 ATK = 7;
inline bool GodShip::has_ATK() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GodShip::set_has_ATK() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GodShip::clear_has_ATK() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GodShip::clear_ATK() {
  ATK_ = 0;
  clear_has_ATK();
}
inline ::google::protobuf::int32 GodShip::ATK() const {
  return ATK_;
}
inline void GodShip::set_ATK(::google::protobuf::int32 value) {
  set_has_ATK();
  ATK_ = value;
}

// optional int32 DEF = 8;
inline bool GodShip::has_DEF() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GodShip::set_has_DEF() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GodShip::clear_has_DEF() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GodShip::clear_DEF() {
  DEF_ = 0;
  clear_has_DEF();
}
inline ::google::protobuf::int32 GodShip::DEF() const {
  return DEF_;
}
inline void GodShip::set_DEF(::google::protobuf::int32 value) {
  set_has_DEF();
  DEF_ = value;
}

// optional int32 MAXHP = 9;
inline bool GodShip::has_MAXHP() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GodShip::set_has_MAXHP() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GodShip::clear_has_MAXHP() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GodShip::clear_MAXHP() {
  MAXHP_ = 0;
  clear_has_MAXHP();
}
inline ::google::protobuf::int32 GodShip::MAXHP() const {
  return MAXHP_;
}
inline void GodShip::set_MAXHP(::google::protobuf::int32 value) {
  set_has_MAXHP();
  MAXHP_ = value;
}

// optional int32 CRIT = 10;
inline bool GodShip::has_CRIT() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GodShip::set_has_CRIT() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GodShip::clear_has_CRIT() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GodShip::clear_CRIT() {
  CRIT_ = 0;
  clear_has_CRIT();
}
inline ::google::protobuf::int32 GodShip::CRIT() const {
  return CRIT_;
}
inline void GodShip::set_CRIT(::google::protobuf::int32 value) {
  set_has_CRIT();
  CRIT_ = value;
}

// optional int32 ACCURACY = 11;
inline bool GodShip::has_ACCURACY() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GodShip::set_has_ACCURACY() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GodShip::clear_has_ACCURACY() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GodShip::clear_ACCURACY() {
  ACCURACY_ = 0;
  clear_has_ACCURACY();
}
inline ::google::protobuf::int32 GodShip::ACCURACY() const {
  return ACCURACY_;
}
inline void GodShip::set_ACCURACY(::google::protobuf::int32 value) {
  set_has_ACCURACY();
  ACCURACY_ = value;
}

// optional int32 DODGE = 12;
inline bool GodShip::has_DODGE() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GodShip::set_has_DODGE() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GodShip::clear_has_DODGE() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GodShip::clear_DODGE() {
  DODGE_ = 0;
  clear_has_DODGE();
}
inline ::google::protobuf::int32 GodShip::DODGE() const {
  return DODGE_;
}
inline void GodShip::set_DODGE(::google::protobuf::int32 value) {
  set_has_DODGE();
  DODGE_ = value;
}

// optional int32 CRITDEF = 13;
inline bool GodShip::has_CRITDEF() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GodShip::set_has_CRITDEF() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GodShip::clear_has_CRITDEF() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GodShip::clear_CRITDEF() {
  CRITDEF_ = 0;
  clear_has_CRITDEF();
}
inline ::google::protobuf::int32 GodShip::CRITDEF() const {
  return CRITDEF_;
}
inline void GodShip::set_CRITDEF(::google::protobuf::int32 value) {
  set_has_CRITDEF();
  CRITDEF_ = value;
}

// optional int32 CRITDamage = 14;
inline bool GodShip::has_CRITDamage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GodShip::set_has_CRITDamage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GodShip::clear_has_CRITDamage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GodShip::clear_CRITDamage() {
  CRITDamage_ = 0;
  clear_has_CRITDamage();
}
inline ::google::protobuf::int32 GodShip::CRITDamage() const {
  return CRITDamage_;
}
inline void GodShip::set_CRITDamage(::google::protobuf::int32 value) {
  set_has_CRITDamage();
  CRITDamage_ = value;
}

// optional int32 EXP = 15;
inline bool GodShip::has_EXP() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GodShip::set_has_EXP() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GodShip::clear_has_EXP() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GodShip::clear_EXP() {
  EXP_ = 0;
  clear_has_EXP();
}
inline ::google::protobuf::int32 GodShip::EXP() const {
  return EXP_;
}
inline void GodShip::set_EXP(::google::protobuf::int32 value) {
  set_has_EXP();
  EXP_ = value;
}

// -------------------------------------------------------------------

// PB_GodShipAsset

// optional int32 id = 1 [default = -1];
inline bool PB_GodShipAsset::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_GodShipAsset::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_GodShipAsset::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_GodShipAsset::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 PB_GodShipAsset::id() const {
  return id_;
}
inline void PB_GodShipAsset::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 exp = 2;
inline bool PB_GodShipAsset::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_GodShipAsset::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_GodShipAsset::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_GodShipAsset::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 PB_GodShipAsset::exp() const {
  return exp_;
}
inline void PB_GodShipAsset::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 quality = 3;
inline bool PB_GodShipAsset::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_GodShipAsset::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_GodShipAsset::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_GodShipAsset::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 PB_GodShipAsset::quality() const {
  return quality_;
}
inline void PB_GodShipAsset::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 level = 4;
inline bool PB_GodShipAsset::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_GodShipAsset::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_GodShipAsset::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_GodShipAsset::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PB_GodShipAsset::level() const {
  return level_;
}
inline void PB_GodShipAsset::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// AllGodShips

// repeated .GodShip godShips = 1;
inline int AllGodShips::godShips_size() const {
  return godShips_.size();
}
inline void AllGodShips::clear_godShips() {
  godShips_.Clear();
}
inline const ::GodShip& AllGodShips::godShips(int index) const {
  return godShips_.Get(index);
}
inline ::GodShip* AllGodShips::mutable_godShips(int index) {
  return godShips_.Mutable(index);
}
inline ::GodShip* AllGodShips::add_godShips() {
  return godShips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GodShip >&
AllGodShips::godShips() const {
  return godShips_;
}
inline ::google::protobuf::RepeatedPtrField< ::GodShip >*
AllGodShips::mutable_godShips() {
  return &godShips_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GodShip_Quali>() {
  return ::GodShip_Quali_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GodShip_2eproto__INCLUDED

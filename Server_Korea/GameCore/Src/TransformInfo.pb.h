// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransformInfo.proto

#ifndef PROTOBUF_TransformInfo_2eproto__INCLUDED
#define PROTOBUF_TransformInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "ProfessionInfo.pb.h"
#include "FightInfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TransformInfo_2eproto();
void protobuf_AssignDesc_TransformInfo_2eproto();
void protobuf_ShutdownFile_TransformInfo_2eproto();

class TransformInfo;
class AllTransforms;

enum TransformInfo_Type {
  TransformInfo_Type_BALANCE = 0,
  TransformInfo_Type_ATTACK = 1,
  TransformInfo_Type_DEFEND = 2,
  TransformInfo_Type_ASSIST = 3
};
bool TransformInfo_Type_IsValid(int value);
const TransformInfo_Type TransformInfo_Type_Type_MIN = TransformInfo_Type_BALANCE;
const TransformInfo_Type TransformInfo_Type_Type_MAX = TransformInfo_Type_ASSIST;
const int TransformInfo_Type_Type_ARRAYSIZE = TransformInfo_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransformInfo_Type_descriptor();
inline const ::std::string& TransformInfo_Type_Name(TransformInfo_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransformInfo_Type_descriptor(), value);
}
inline bool TransformInfo_Type_Parse(
    const ::std::string& name, TransformInfo_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransformInfo_Type>(
    TransformInfo_Type_descriptor(), name, value);
}
// ===================================================================

class TransformInfo : public ::google::protobuf::Message {
 public:
  TransformInfo();
  virtual ~TransformInfo();
  
  TransformInfo(const TransformInfo& from);
  
  inline TransformInfo& operator=(const TransformInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformInfo& default_instance();
  
  void Swap(TransformInfo* other);
  
  // implements Message ----------------------------------------------
  
  TransformInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformInfo& from);
  void MergeFrom(const TransformInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TransformInfo_Type Type;
  static const Type BALANCE = TransformInfo_Type_BALANCE;
  static const Type ATTACK = TransformInfo_Type_ATTACK;
  static const Type DEFEND = TransformInfo_Type_DEFEND;
  static const Type ASSIST = TransformInfo_Type_ASSIST;
  static inline bool Type_IsValid(int value) {
    return TransformInfo_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TransformInfo_Type_Type_MIN;
  static const Type Type_MAX =
    TransformInfo_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TransformInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TransformInfo_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TransformInfo_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TransformInfo_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // repeated int32 model = 3;
  inline int model_size() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline ::google::protobuf::int32 model(int index) const;
  inline void set_model(int index, ::google::protobuf::int32 value);
  inline void add_model(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      model() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_model();
  
  // optional int32 quality = 4;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 4;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // repeated int32 materials = 6;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 6;
  inline ::google::protobuf::int32 materials(int index) const;
  inline void set_materials(int index, ::google::protobuf::int32 value);
  inline void add_materials(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      materials() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_materials();
  
  // repeated int32 count = 7;
  inline int count_size() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::int32 count(int index) const;
  inline void set_count(int index, ::google::protobuf::int32 value);
  inline void add_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_count();
  
  // repeated int32 atts = 8;
  inline int atts_size() const;
  inline void clear_atts();
  static const int kAttsFieldNumber = 8;
  inline ::google::protobuf::int32 atts(int index) const;
  inline void set_atts(int index, ::google::protobuf::int32 value);
  inline void add_atts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      atts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_atts();
  
  // repeated int32 skill = 9;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 9;
  inline ::google::protobuf::int32 skill(int index) const;
  inline void set_skill(int index, ::google::protobuf::int32 value);
  inline void add_skill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skill();
  
  // repeated int32 status = 10;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 10;
  inline ::google::protobuf::int32 status(int index) const;
  inline void set_status(int index, ::google::protobuf::int32 value);
  inline void add_status(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_status();
  
  // optional .TransformInfo.Type type = 11;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 11;
  inline ::TransformInfo_Type type() const;
  inline void set_type(::TransformInfo_Type value);
  
  // optional string name = 12;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 12;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 pic = 13;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 13;
  inline ::google::protobuf::int32 pic() const;
  inline void set_pic(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:TransformInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pic();
  inline void clear_has_pic();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* desc_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > model_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > materials_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > atts_;
  ::google::protobuf::int32 level_;
  int type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > status_;
  ::std::string* name_;
  ::google::protobuf::int32 pic_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_TransformInfo_2eproto();
  friend void protobuf_AssignDesc_TransformInfo_2eproto();
  friend void protobuf_ShutdownFile_TransformInfo_2eproto();
  
  void InitAsDefaultInstance();
  static TransformInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllTransforms : public ::google::protobuf::Message {
 public:
  AllTransforms();
  virtual ~AllTransforms();
  
  AllTransforms(const AllTransforms& from);
  
  inline AllTransforms& operator=(const AllTransforms& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllTransforms& default_instance();
  
  void Swap(AllTransforms* other);
  
  // implements Message ----------------------------------------------
  
  AllTransforms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllTransforms& from);
  void MergeFrom(const AllTransforms& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .TransformInfo transforms = 1;
  inline int transforms_size() const;
  inline void clear_transforms();
  static const int kTransformsFieldNumber = 1;
  inline const ::TransformInfo& transforms(int index) const;
  inline ::TransformInfo* mutable_transforms(int index);
  inline ::TransformInfo* add_transforms();
  inline const ::google::protobuf::RepeatedPtrField< ::TransformInfo >&
      transforms() const;
  inline ::google::protobuf::RepeatedPtrField< ::TransformInfo >*
      mutable_transforms();
  
  // @@protoc_insertion_point(class_scope:AllTransforms)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::TransformInfo > transforms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TransformInfo_2eproto();
  friend void protobuf_AssignDesc_TransformInfo_2eproto();
  friend void protobuf_ShutdownFile_TransformInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllTransforms* default_instance_;
};
// ===================================================================


// ===================================================================

// TransformInfo

// optional int32 id = 1;
inline bool TransformInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TransformInfo::id() const {
  return id_;
}
inline void TransformInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string desc = 2;
inline bool TransformInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& TransformInfo::desc() const {
  return *desc_;
}
inline void TransformInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void TransformInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void TransformInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransformInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* TransformInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 model = 3;
inline int TransformInfo::model_size() const {
  return model_.size();
}
inline void TransformInfo::clear_model() {
  model_.Clear();
}
inline ::google::protobuf::int32 TransformInfo::model(int index) const {
  return model_.Get(index);
}
inline void TransformInfo::set_model(int index, ::google::protobuf::int32 value) {
  model_.Set(index, value);
}
inline void TransformInfo::add_model(::google::protobuf::int32 value) {
  model_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransformInfo::model() const {
  return model_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransformInfo::mutable_model() {
  return &model_;
}

// optional int32 quality = 4;
inline bool TransformInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformInfo::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 TransformInfo::quality() const {
  return quality_;
}
inline void TransformInfo::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 level = 5;
inline bool TransformInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransformInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransformInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransformInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TransformInfo::level() const {
  return level_;
}
inline void TransformInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated int32 materials = 6;
inline int TransformInfo::materials_size() const {
  return materials_.size();
}
inline void TransformInfo::clear_materials() {
  materials_.Clear();
}
inline ::google::protobuf::int32 TransformInfo::materials(int index) const {
  return materials_.Get(index);
}
inline void TransformInfo::set_materials(int index, ::google::protobuf::int32 value) {
  materials_.Set(index, value);
}
inline void TransformInfo::add_materials(::google::protobuf::int32 value) {
  materials_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransformInfo::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransformInfo::mutable_materials() {
  return &materials_;
}

// repeated int32 count = 7;
inline int TransformInfo::count_size() const {
  return count_.size();
}
inline void TransformInfo::clear_count() {
  count_.Clear();
}
inline ::google::protobuf::int32 TransformInfo::count(int index) const {
  return count_.Get(index);
}
inline void TransformInfo::set_count(int index, ::google::protobuf::int32 value) {
  count_.Set(index, value);
}
inline void TransformInfo::add_count(::google::protobuf::int32 value) {
  count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransformInfo::count() const {
  return count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransformInfo::mutable_count() {
  return &count_;
}

// repeated int32 atts = 8;
inline int TransformInfo::atts_size() const {
  return atts_.size();
}
inline void TransformInfo::clear_atts() {
  atts_.Clear();
}
inline ::google::protobuf::int32 TransformInfo::atts(int index) const {
  return atts_.Get(index);
}
inline void TransformInfo::set_atts(int index, ::google::protobuf::int32 value) {
  atts_.Set(index, value);
}
inline void TransformInfo::add_atts(::google::protobuf::int32 value) {
  atts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransformInfo::atts() const {
  return atts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransformInfo::mutable_atts() {
  return &atts_;
}

// repeated int32 skill = 9;
inline int TransformInfo::skill_size() const {
  return skill_.size();
}
inline void TransformInfo::clear_skill() {
  skill_.Clear();
}
inline ::google::protobuf::int32 TransformInfo::skill(int index) const {
  return skill_.Get(index);
}
inline void TransformInfo::set_skill(int index, ::google::protobuf::int32 value) {
  skill_.Set(index, value);
}
inline void TransformInfo::add_skill(::google::protobuf::int32 value) {
  skill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransformInfo::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransformInfo::mutable_skill() {
  return &skill_;
}

// repeated int32 status = 10;
inline int TransformInfo::status_size() const {
  return status_.size();
}
inline void TransformInfo::clear_status() {
  status_.Clear();
}
inline ::google::protobuf::int32 TransformInfo::status(int index) const {
  return status_.Get(index);
}
inline void TransformInfo::set_status(int index, ::google::protobuf::int32 value) {
  status_.Set(index, value);
}
inline void TransformInfo::add_status(::google::protobuf::int32 value) {
  status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransformInfo::status() const {
  return status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransformInfo::mutable_status() {
  return &status_;
}

// optional .TransformInfo.Type type = 11;
inline bool TransformInfo::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TransformInfo::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TransformInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TransformInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::TransformInfo_Type TransformInfo::type() const {
  return static_cast< ::TransformInfo_Type >(type_);
}
inline void TransformInfo::set_type(::TransformInfo_Type value) {
  GOOGLE_DCHECK(::TransformInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string name = 12;
inline bool TransformInfo::has_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TransformInfo::set_has_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TransformInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TransformInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TransformInfo::name() const {
  return *name_;
}
inline void TransformInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TransformInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TransformInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransformInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TransformInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pic = 13;
inline bool TransformInfo::has_pic() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TransformInfo::set_has_pic() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TransformInfo::clear_has_pic() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TransformInfo::clear_pic() {
  pic_ = 0;
  clear_has_pic();
}
inline ::google::protobuf::int32 TransformInfo::pic() const {
  return pic_;
}
inline void TransformInfo::set_pic(::google::protobuf::int32 value) {
  set_has_pic();
  pic_ = value;
}

// -------------------------------------------------------------------

// AllTransforms

// repeated .TransformInfo transforms = 1;
inline int AllTransforms::transforms_size() const {
  return transforms_.size();
}
inline void AllTransforms::clear_transforms() {
  transforms_.Clear();
}
inline const ::TransformInfo& AllTransforms::transforms(int index) const {
  return transforms_.Get(index);
}
inline ::TransformInfo* AllTransforms::mutable_transforms(int index) {
  return transforms_.Mutable(index);
}
inline ::TransformInfo* AllTransforms::add_transforms() {
  return transforms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TransformInfo >&
AllTransforms::transforms() const {
  return transforms_;
}
inline ::google::protobuf::RepeatedPtrField< ::TransformInfo >*
AllTransforms::mutable_transforms() {
  return &transforms_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TransformInfo_Type>() {
  return ::TransformInfo_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TransformInfo_2eproto__INCLUDED

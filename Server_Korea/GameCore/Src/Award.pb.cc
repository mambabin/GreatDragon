// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Award.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AwardInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AwardInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllAwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllAwardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailGift_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MailGift_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllMailGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllMailGift_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Award_2eproto() {
  protobuf_AddDesc_Award_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Award.proto");
  GOOGLE_CHECK(file != NULL);
  AwardInfo_descriptor_ = file->message_type(0);
  static const int AwardInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardInfo, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardInfo, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardInfo, content_),
  };
  AwardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AwardInfo_descriptor_,
      AwardInfo::default_instance_,
      AwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AwardInfo));
  AwardInfo_Type_descriptor_ = AwardInfo_descriptor_->enum_type(0);
  AllAwardInfo_descriptor_ = file->message_type(1);
  static const int AllAwardInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardInfo, awardInfo_),
  };
  AllAwardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllAwardInfo_descriptor_,
      AllAwardInfo::default_instance_,
      AllAwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllAwardInfo));
  MailGift_descriptor_ = file->message_type(2);
  static const int MailGift_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGift, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGift, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGift, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGift, arg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGift, arg3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGift, arg4_),
  };
  MailGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailGift_descriptor_,
      MailGift::default_instance_,
      MailGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailGift));
  MailGift_Type_descriptor_ = MailGift_descriptor_->enum_type(0);
  AllMailGift_descriptor_ = file->message_type(3);
  static const int AllMailGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMailGift, mailGift_),
  };
  AllMailGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllMailGift_descriptor_,
      AllMailGift::default_instance_,
      AllMailGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMailGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMailGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllMailGift));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Award_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AwardInfo_descriptor_, &AwardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllAwardInfo_descriptor_, &AllAwardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailGift_descriptor_, &MailGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllMailGift_descriptor_, &AllMailGift::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Award_2eproto() {
  delete AwardInfo::default_instance_;
  delete AwardInfo_reflection_;
  delete AllAwardInfo::default_instance_;
  delete AllAwardInfo_reflection_;
  delete MailGift::default_instance_;
  delete MailGift_reflection_;
  delete AllMailGift::default_instance_;
  delete AllMailGift_reflection_;
}

void protobuf_AddDesc_Award_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ItemInfo_2eproto();
  ::protobuf_AddDesc_MailInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Award.proto\032\016ItemInfo.proto\032\016MailInfo."
    "proto\"\334\006\n\tAwardInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030"
    "\002 \001(\t\022\035\n\004type\030\003 \001(\0162\017.AwardInfo.Type\022\013\n\003"
    "arg\030\004 \001(\005\022\r\n\005award\030\005 \001(\005\022\017\n\007content\030\006 \001("
    "\t\"\350\005\n\004Type\022\n\n\006ONLINE\020\000\022\010\n\004COME\020\001\022\t\n\005LEVE"
    "L\020\002\022\t\n\005POWER\020\003\022\007\n\003RMB\020\004\022\007\n\003VIP\020\005\022\r\n\tDAIL"
    "Y_GOD\020\006\022\016\n\nWEEKLY_GOD\020\007\022\016\n\nWORLD_BOSS\020\010\022"
    "\023\n\017WORLD_BOSS_LAST\020\t\022\016\n\nTOTAL_COME\020\n\022\016\n\n"
    "PLAY_OFF_1\020\013\022\014\n\010INVEST_1\020\014\022\014\n\010INVEST_2\020\r"
    "\022\014\n\010INVEST_3\020\016\022\021\n\rUNIT_RECHARGE\020\017\022\016\n\nTOT"
    "AL_COST\020\020\022\025\n\021RANDOM_RETURN_RMB\020\021\022\t\n\005BLES"
    "S\020\022\022\023\n\017FACTION_WAR_WIN\020\023\022\030\n\024FACTION_WAR_"
    "CONTINUE\020\024\022\023\n\017LEVEL_SEVEN_DAY\020\025\022\023\n\017POWER"
    "_SEVEN_DAY\020\026\022\014\n\010TEN_GIFT\020\027\022\022\n\016FIRST_RECH"
    "ARGE\020\030\022\t\n\005DEVIL\020\031\022\013\n\007QIUBITE\020\032\022\026\n\022AWARD_"
    "FROM_SKY_TOP\020\033\022\030\n\024AWARD_FROM_SKY_FINAL\020\034"
    "\022\020\n\014NEWYEAR_GIFT\020\035\022\010\n\004LUCK\020\036\022\024\n\020MISSION_"
    "ACTIVITY\020\037\022\027\n\023AWARD_FROM_RECHARGE\020 \022\024\n\020A"
    "WARD_FROM_SPEND\020!\022\020\n\014ROOM_CHAPTER\020\"\022\016\n\nT"
    "OP_WEAPON\020#\022\013\n\007CONSUME\020$\022\016\n\nINVITECODE\020%"
    "\022\013\n\007CATGIFT\020&\022\021\n\rGROUPPURCHASE\020\'\022\013\n\007REDR"
    "OSE\020(\022\013\n\007YUEZHAN\020)\022\023\n\017OPENSERVERSCORE\020*\022"
    "\014\n\010DAILY_PK\020+\022\r\n\tWEEKLY_PK\020,\"-\n\014AllAward"
    "Info\022\035\n\tawardInfo\030\001 \003(\0132\n.AwardInfo\"\304\001\n\010"
    "MailGift\022\034\n\004type\030\001 \001(\0162\016.MailGift.Type\022\032"
    "\n\004mail\030\002 \001(\0132\014.PB_MailInfo\022\014\n\004arg1\030\003 \001(\005"
    "\022\014\n\004arg2\030\004 \001(\005\022\014\n\004arg3\030\005 \001(\005\022\014\n\004arg4\030\006 \001"
    "(\005\"F\n\004Type\022\017\n\013CREATE_ROLE\020\000\022\r\n\tEVERY_DAY"
    "\020\001\022\020\n\014COMPENSATION\020\002\022\014\n\010RECHARGE\020\003\"*\n\013Al"
    "lMailGift\022\033\n\010mailGift\030\001 \003(\0132\t.MailGift", 1198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Award.proto", &protobuf_RegisterTypes);
  AwardInfo::default_instance_ = new AwardInfo();
  AllAwardInfo::default_instance_ = new AllAwardInfo();
  MailGift::default_instance_ = new MailGift();
  AllMailGift::default_instance_ = new AllMailGift();
  AwardInfo::default_instance_->InitAsDefaultInstance();
  AllAwardInfo::default_instance_->InitAsDefaultInstance();
  MailGift::default_instance_->InitAsDefaultInstance();
  AllMailGift::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Award_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Award_2eproto {
  StaticDescriptorInitializer_Award_2eproto() {
    protobuf_AddDesc_Award_2eproto();
  }
} static_descriptor_initializer_Award_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* AwardInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AwardInfo_Type_descriptor_;
}
bool AwardInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AwardInfo_Type AwardInfo::ONLINE;
const AwardInfo_Type AwardInfo::COME;
const AwardInfo_Type AwardInfo::LEVEL;
const AwardInfo_Type AwardInfo::POWER;
const AwardInfo_Type AwardInfo::RMB;
const AwardInfo_Type AwardInfo::VIP;
const AwardInfo_Type AwardInfo::DAILY_GOD;
const AwardInfo_Type AwardInfo::WEEKLY_GOD;
const AwardInfo_Type AwardInfo::WORLD_BOSS;
const AwardInfo_Type AwardInfo::WORLD_BOSS_LAST;
const AwardInfo_Type AwardInfo::TOTAL_COME;
const AwardInfo_Type AwardInfo::PLAY_OFF_1;
const AwardInfo_Type AwardInfo::INVEST_1;
const AwardInfo_Type AwardInfo::INVEST_2;
const AwardInfo_Type AwardInfo::INVEST_3;
const AwardInfo_Type AwardInfo::UNIT_RECHARGE;
const AwardInfo_Type AwardInfo::TOTAL_COST;
const AwardInfo_Type AwardInfo::RANDOM_RETURN_RMB;
const AwardInfo_Type AwardInfo::BLESS;
const AwardInfo_Type AwardInfo::FACTION_WAR_WIN;
const AwardInfo_Type AwardInfo::FACTION_WAR_CONTINUE;
const AwardInfo_Type AwardInfo::LEVEL_SEVEN_DAY;
const AwardInfo_Type AwardInfo::POWER_SEVEN_DAY;
const AwardInfo_Type AwardInfo::TEN_GIFT;
const AwardInfo_Type AwardInfo::FIRST_RECHARGE;
const AwardInfo_Type AwardInfo::DEVIL;
const AwardInfo_Type AwardInfo::QIUBITE;
const AwardInfo_Type AwardInfo::AWARD_FROM_SKY_TOP;
const AwardInfo_Type AwardInfo::AWARD_FROM_SKY_FINAL;
const AwardInfo_Type AwardInfo::NEWYEAR_GIFT;
const AwardInfo_Type AwardInfo::LUCK;
const AwardInfo_Type AwardInfo::MISSION_ACTIVITY;
const AwardInfo_Type AwardInfo::AWARD_FROM_RECHARGE;
const AwardInfo_Type AwardInfo::AWARD_FROM_SPEND;
const AwardInfo_Type AwardInfo::ROOM_CHAPTER;
const AwardInfo_Type AwardInfo::TOP_WEAPON;
const AwardInfo_Type AwardInfo::CONSUME;
const AwardInfo_Type AwardInfo::INVITECODE;
const AwardInfo_Type AwardInfo::CATGIFT;
const AwardInfo_Type AwardInfo::GROUPPURCHASE;
const AwardInfo_Type AwardInfo::REDROSE;
const AwardInfo_Type AwardInfo::YUEZHAN;
const AwardInfo_Type AwardInfo::OPENSERVERSCORE;
const AwardInfo_Type AwardInfo::DAILY_PK;
const AwardInfo_Type AwardInfo::WEEKLY_PK;
const AwardInfo_Type AwardInfo::Type_MIN;
const AwardInfo_Type AwardInfo::Type_MAX;
const int AwardInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AwardInfo::kIdFieldNumber;
const int AwardInfo::kNameFieldNumber;
const int AwardInfo::kTypeFieldNumber;
const int AwardInfo::kArgFieldNumber;
const int AwardInfo::kAwardFieldNumber;
const int AwardInfo::kContentFieldNumber;
#endif  // !_MSC_VER

AwardInfo::AwardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AwardInfo::InitAsDefaultInstance() {
}

AwardInfo::AwardInfo(const AwardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AwardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  arg_ = 0;
  award_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AwardInfo::~AwardInfo() {
  SharedDtor();
}

void AwardInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void AwardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AwardInfo_descriptor_;
}

const AwardInfo& AwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Award_2eproto();  return *default_instance_;
}

AwardInfo* AwardInfo::default_instance_ = NULL;

AwardInfo* AwardInfo::New() const {
  return new AwardInfo;
}

void AwardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    arg_ = 0;
    award_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .AwardInfo.Type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AwardInfo_Type_IsValid(value)) {
            set_type(static_cast< ::AwardInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arg;
        break;
      }
      
      // optional int32 arg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
          set_has_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_award;
        break;
      }
      
      // optional int32 award = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }
      
      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .AwardInfo.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional int32 arg = 4;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->arg(), output);
  }
  
  // optional int32 award = 5;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->award(), output);
  }
  
  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .AwardInfo.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional int32 arg = 4;
  if (has_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->arg(), target);
  }
  
  // optional int32 award = 5;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->award(), target);
  }
  
  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AwardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .AwardInfo.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 arg = 4;
    if (has_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg());
    }
    
    // optional int32 award = 5;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award());
    }
    
    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AwardInfo::MergeFrom(const AwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_arg()) {
      set_arg(from.arg());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwardInfo::CopyFrom(const AwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardInfo::IsInitialized() const {
  
  return true;
}

void AwardInfo::Swap(AwardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(arg_, other->arg_);
    std::swap(award_, other->award_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AwardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AwardInfo_descriptor_;
  metadata.reflection = AwardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllAwardInfo::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

AllAwardInfo::AllAwardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllAwardInfo::InitAsDefaultInstance() {
}

AllAwardInfo::AllAwardInfo(const AllAwardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllAwardInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllAwardInfo::~AllAwardInfo() {
  SharedDtor();
}

void AllAwardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllAwardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllAwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllAwardInfo_descriptor_;
}

const AllAwardInfo& AllAwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Award_2eproto();  return *default_instance_;
}

AllAwardInfo* AllAwardInfo::default_instance_ = NULL;

AllAwardInfo* AllAwardInfo::New() const {
  return new AllAwardInfo;
}

void AllAwardInfo::Clear() {
  awardInfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllAwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AwardInfo awardInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_awardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllAwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AwardInfo awardInfo = 1;
  for (int i = 0; i < this->awardInfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->awardInfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllAwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AwardInfo awardInfo = 1;
  for (int i = 0; i < this->awardInfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->awardInfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllAwardInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .AwardInfo awardInfo = 1;
  total_size += 1 * this->awardInfo_size();
  for (int i = 0; i < this->awardInfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardInfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllAwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllAwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllAwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllAwardInfo::MergeFrom(const AllAwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardInfo_.MergeFrom(from.awardInfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllAwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllAwardInfo::CopyFrom(const AllAwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllAwardInfo::IsInitialized() const {
  
  return true;
}

void AllAwardInfo::Swap(AllAwardInfo* other) {
  if (other != this) {
    awardInfo_.Swap(&other->awardInfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllAwardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllAwardInfo_descriptor_;
  metadata.reflection = AllAwardInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MailGift_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailGift_Type_descriptor_;
}
bool MailGift_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MailGift_Type MailGift::CREATE_ROLE;
const MailGift_Type MailGift::EVERY_DAY;
const MailGift_Type MailGift::COMPENSATION;
const MailGift_Type MailGift::RECHARGE;
const MailGift_Type MailGift::Type_MIN;
const MailGift_Type MailGift::Type_MAX;
const int MailGift::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MailGift::kTypeFieldNumber;
const int MailGift::kMailFieldNumber;
const int MailGift::kArg1FieldNumber;
const int MailGift::kArg2FieldNumber;
const int MailGift::kArg3FieldNumber;
const int MailGift::kArg4FieldNumber;
#endif  // !_MSC_VER

MailGift::MailGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailGift::InitAsDefaultInstance() {
  mail_ = const_cast< ::PB_MailInfo*>(&::PB_MailInfo::default_instance());
}

MailGift::MailGift(const MailGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailGift::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  mail_ = NULL;
  arg1_ = 0;
  arg2_ = 0;
  arg3_ = 0;
  arg4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailGift::~MailGift() {
  SharedDtor();
}

void MailGift::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void MailGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailGift_descriptor_;
}

const MailGift& MailGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Award_2eproto();  return *default_instance_;
}

MailGift* MailGift::default_instance_ = NULL;

MailGift* MailGift::New() const {
  return new MailGift;
}

void MailGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::PB_MailInfo::Clear();
    }
    arg1_ = 0;
    arg2_ = 0;
    arg3_ = 0;
    arg4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MailGift.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MailGift_Type_IsValid(value)) {
            set_type(static_cast< ::MailGift_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }
      
      // optional .PB_MailInfo mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arg1;
        break;
      }
      
      // optional int32 arg1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg1_)));
          set_has_arg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arg2;
        break;
      }
      
      // optional int32 arg2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg2_)));
          set_has_arg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arg3;
        break;
      }
      
      // optional int32 arg3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg3_)));
          set_has_arg3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_arg4;
        break;
      }
      
      // optional int32 arg4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg4_)));
          set_has_arg4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MailGift.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .PB_MailInfo mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }
  
  // optional int32 arg1 = 3;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arg1(), output);
  }
  
  // optional int32 arg2 = 4;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->arg2(), output);
  }
  
  // optional int32 arg3 = 5;
  if (has_arg3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->arg3(), output);
  }
  
  // optional int32 arg4 = 6;
  if (has_arg4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->arg4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MailGift.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .PB_MailInfo mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }
  
  // optional int32 arg1 = 3;
  if (has_arg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->arg1(), target);
  }
  
  // optional int32 arg2 = 4;
  if (has_arg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->arg2(), target);
  }
  
  // optional int32 arg3 = 5;
  if (has_arg3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->arg3(), target);
  }
  
  // optional int32 arg4 = 6;
  if (has_arg4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->arg4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MailGift.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .PB_MailInfo mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }
    
    // optional int32 arg1 = 3;
    if (has_arg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg1());
    }
    
    // optional int32 arg2 = 4;
    if (has_arg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg2());
    }
    
    // optional int32 arg3 = 5;
    if (has_arg3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg3());
    }
    
    // optional int32 arg4 = 6;
    if (has_arg4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg4());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailGift::MergeFrom(const MailGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_mail()) {
      mutable_mail()->::PB_MailInfo::MergeFrom(from.mail());
    }
    if (from.has_arg1()) {
      set_arg1(from.arg1());
    }
    if (from.has_arg2()) {
      set_arg2(from.arg2());
    }
    if (from.has_arg3()) {
      set_arg3(from.arg3());
    }
    if (from.has_arg4()) {
      set_arg4(from.arg4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailGift::CopyFrom(const MailGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailGift::IsInitialized() const {
  
  return true;
}

void MailGift::Swap(MailGift* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(mail_, other->mail_);
    std::swap(arg1_, other->arg1_);
    std::swap(arg2_, other->arg2_);
    std::swap(arg3_, other->arg3_);
    std::swap(arg4_, other->arg4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailGift_descriptor_;
  metadata.reflection = MailGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllMailGift::kMailGiftFieldNumber;
#endif  // !_MSC_VER

AllMailGift::AllMailGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllMailGift::InitAsDefaultInstance() {
}

AllMailGift::AllMailGift(const AllMailGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllMailGift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllMailGift::~AllMailGift() {
  SharedDtor();
}

void AllMailGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllMailGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllMailGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllMailGift_descriptor_;
}

const AllMailGift& AllMailGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Award_2eproto();  return *default_instance_;
}

AllMailGift* AllMailGift::default_instance_ = NULL;

AllMailGift* AllMailGift::New() const {
  return new AllMailGift;
}

void AllMailGift::Clear() {
  mailGift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllMailGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MailGift mailGift = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailGift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailGift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mailGift;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllMailGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MailGift mailGift = 1;
  for (int i = 0; i < this->mailGift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailGift(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllMailGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MailGift mailGift = 1;
  for (int i = 0; i < this->mailGift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailGift(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllMailGift::ByteSize() const {
  int total_size = 0;
  
  // repeated .MailGift mailGift = 1;
  total_size += 1 * this->mailGift_size();
  for (int i = 0; i < this->mailGift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mailGift(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllMailGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllMailGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllMailGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllMailGift::MergeFrom(const AllMailGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailGift_.MergeFrom(from.mailGift_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllMailGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllMailGift::CopyFrom(const AllMailGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllMailGift::IsInitialized() const {
  
  return true;
}

void AllMailGift::Swap(AllMailGift* other) {
  if (other != this) {
    mailGift_.Swap(&other->mailGift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllMailGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllMailGift_descriptor_;
  metadata.reflection = AllMailGift_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

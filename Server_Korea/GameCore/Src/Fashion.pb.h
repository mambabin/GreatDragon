// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Fashion.proto

#ifndef PROTOBUF_Fashion_2eproto__INCLUDED
#define PROTOBUF_Fashion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Fashion_2eproto();
void protobuf_AssignDesc_Fashion_2eproto();
void protobuf_ShutdownFile_Fashion_2eproto();

class FashionInfo;
class PB_FashionAsset;
class AllFashions;

enum FashionInfo_ColorType {
  FashionInfo_ColorType_WHITE = 0,
  FashionInfo_ColorType_GREEN = 1,
  FashionInfo_ColorType_BLUE = 2,
  FashionInfo_ColorType_YELLOW = 3,
  FashionInfo_ColorType_RED = 4
};
bool FashionInfo_ColorType_IsValid(int value);
const FashionInfo_ColorType FashionInfo_ColorType_ColorType_MIN = FashionInfo_ColorType_WHITE;
const FashionInfo_ColorType FashionInfo_ColorType_ColorType_MAX = FashionInfo_ColorType_RED;
const int FashionInfo_ColorType_ColorType_ARRAYSIZE = FashionInfo_ColorType_ColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FashionInfo_ColorType_descriptor();
inline const ::std::string& FashionInfo_ColorType_Name(FashionInfo_ColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FashionInfo_ColorType_descriptor(), value);
}
inline bool FashionInfo_ColorType_Parse(
    const ::std::string& name, FashionInfo_ColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FashionInfo_ColorType>(
    FashionInfo_ColorType_descriptor(), name, value);
}
// ===================================================================

class FashionInfo : public ::google::protobuf::Message {
 public:
  FashionInfo();
  virtual ~FashionInfo();
  
  FashionInfo(const FashionInfo& from);
  
  inline FashionInfo& operator=(const FashionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FashionInfo& default_instance();
  
  void Swap(FashionInfo* other);
  
  // implements Message ----------------------------------------------
  
  FashionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FashionInfo& from);
  void MergeFrom(const FashionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FashionInfo_ColorType ColorType;
  static const ColorType WHITE = FashionInfo_ColorType_WHITE;
  static const ColorType GREEN = FashionInfo_ColorType_GREEN;
  static const ColorType BLUE = FashionInfo_ColorType_BLUE;
  static const ColorType YELLOW = FashionInfo_ColorType_YELLOW;
  static const ColorType RED = FashionInfo_ColorType_RED;
  static inline bool ColorType_IsValid(int value) {
    return FashionInfo_ColorType_IsValid(value);
  }
  static const ColorType ColorType_MIN =
    FashionInfo_ColorType_ColorType_MIN;
  static const ColorType ColorType_MAX =
    FashionInfo_ColorType_ColorType_MAX;
  static const int ColorType_ARRAYSIZE =
    FashionInfo_ColorType_ColorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColorType_descriptor() {
    return FashionInfo_ColorType_descriptor();
  }
  static inline const ::std::string& ColorType_Name(ColorType value) {
    return FashionInfo_ColorType_Name(value);
  }
  static inline bool ColorType_Parse(const ::std::string& name,
      ColorType* value) {
    return FashionInfo_ColorType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline ::google::protobuf::int32 model() const;
  inline void set_model(::google::protobuf::int32 value);
  
  // optional int32 picture = 4;
  inline bool has_picture() const;
  inline void clear_picture();
  static const int kPictureFieldNumber = 4;
  inline ::google::protobuf::int32 picture() const;
  inline void set_picture(::google::protobuf::int32 value);
  
  // optional string desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // optional int32 professionType = 6;
  inline bool has_professionType() const;
  inline void clear_professionType();
  static const int kProfessionTypeFieldNumber = 6;
  inline ::google::protobuf::int32 professionType() const;
  inline void set_professionType(::google::protobuf::int32 value);
  
  // optional int32 rmb = 7;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 7;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);
  
  // optional .FashionInfo.ColorType colorType = 8;
  inline bool has_colorType() const;
  inline void clear_colorType();
  static const int kColorTypeFieldNumber = 8;
  inline ::FashionInfo_ColorType colorType() const;
  inline void set_colorType(::FashionInfo_ColorType value);
  
  // repeated int32 att = 9;
  inline int att_size() const;
  inline void clear_att();
  static const int kAttFieldNumber = 9;
  inline ::google::protobuf::int32 att(int index) const;
  inline void set_att(int index, ::google::protobuf::int32 value);
  inline void add_att(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      att() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_att();
  
  // optional int32 effect1 = 10;
  inline bool has_effect1() const;
  inline void clear_effect1();
  static const int kEffect1FieldNumber = 10;
  inline ::google::protobuf::int32 effect1() const;
  inline void set_effect1(::google::protobuf::int32 value);
  
  // optional int32 effect2 = 11;
  inline bool has_effect2() const;
  inline void clear_effect2();
  static const int kEffect2FieldNumber = 11;
  inline ::google::protobuf::int32 effect2() const;
  inline void set_effect2(::google::protobuf::int32 value);
  
  // optional int32 godScore = 12;
  inline bool has_godScore() const;
  inline void clear_godScore();
  static const int kGodScoreFieldNumber = 12;
  inline ::google::protobuf::int32 godScore() const;
  inline void set_godScore(::google::protobuf::int32 value);
  
  // optional int32 lovePoint = 13;
  inline bool has_lovePoint() const;
  inline void clear_lovePoint();
  static const int kLovePointFieldNumber = 13;
  inline ::google::protobuf::int32 lovePoint() const;
  inline void set_lovePoint(::google::protobuf::int32 value);
  
  // optional int32 pvpScore = 14;
  inline bool has_pvpScore() const;
  inline void clear_pvpScore();
  static const int kPvpScoreFieldNumber = 14;
  inline ::google::protobuf::int32 pvpScore() const;
  inline void set_pvpScore(::google::protobuf::int32 value);
  
  // optional int32 factionContribute = 15;
  inline bool has_factionContribute() const;
  inline void clear_factionContribute();
  static const int kFactionContributeFieldNumber = 15;
  inline ::google::protobuf::int32 factionContribute() const;
  inline void set_factionContribute(::google::protobuf::int32 value);
  
  // optional int32 helpNode = 16;
  inline bool has_helpNode() const;
  inline void clear_helpNode();
  static const int kHelpNodeFieldNumber = 16;
  inline ::google::protobuf::int32 helpNode() const;
  inline void set_helpNode(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:FashionInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_picture();
  inline void clear_has_picture();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_professionType();
  inline void clear_has_professionType();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_colorType();
  inline void clear_has_colorType();
  inline void set_has_effect1();
  inline void clear_has_effect1();
  inline void set_has_effect2();
  inline void clear_has_effect2();
  inline void set_has_godScore();
  inline void clear_has_godScore();
  inline void set_has_lovePoint();
  inline void clear_has_lovePoint();
  inline void set_has_pvpScore();
  inline void clear_has_pvpScore();
  inline void set_has_factionContribute();
  inline void clear_has_factionContribute();
  inline void set_has_helpNode();
  inline void clear_has_helpNode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 model_;
  ::std::string* desc_;
  ::google::protobuf::int32 picture_;
  ::google::protobuf::int32 professionType_;
  ::google::protobuf::int32 rmb_;
  int colorType_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > att_;
  ::google::protobuf::int32 effect1_;
  ::google::protobuf::int32 effect2_;
  ::google::protobuf::int32 godScore_;
  ::google::protobuf::int32 lovePoint_;
  ::google::protobuf::int32 pvpScore_;
  ::google::protobuf::int32 factionContribute_;
  ::google::protobuf::int32 helpNode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_Fashion_2eproto();
  friend void protobuf_AssignDesc_Fashion_2eproto();
  friend void protobuf_ShutdownFile_Fashion_2eproto();
  
  void InitAsDefaultInstance();
  static FashionInfo* default_instance_;
};
// -------------------------------------------------------------------

class PB_FashionAsset : public ::google::protobuf::Message {
 public:
  PB_FashionAsset();
  virtual ~PB_FashionAsset();
  
  PB_FashionAsset(const PB_FashionAsset& from);
  
  inline PB_FashionAsset& operator=(const PB_FashionAsset& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_FashionAsset& default_instance();
  
  void Swap(PB_FashionAsset* other);
  
  // implements Message ----------------------------------------------
  
  PB_FashionAsset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_FashionAsset& from);
  void MergeFrom(const PB_FashionAsset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 v = 1;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 1;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);
  
  // repeated int32 runes = 2;
  inline int runes_size() const;
  inline void clear_runes();
  static const int kRunesFieldNumber = 2;
  inline ::google::protobuf::int32 runes(int index) const;
  inline void set_runes(int index, ::google::protobuf::int32 value);
  inline void add_runes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      runes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_runes();
  
  // @@protoc_insertion_point(class_scope:PB_FashionAsset)
 private:
  inline void set_has_v();
  inline void clear_has_v();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > runes_;
  ::google::protobuf::int32 v_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Fashion_2eproto();
  friend void protobuf_AssignDesc_Fashion_2eproto();
  friend void protobuf_ShutdownFile_Fashion_2eproto();
  
  void InitAsDefaultInstance();
  static PB_FashionAsset* default_instance_;
};
// -------------------------------------------------------------------

class AllFashions : public ::google::protobuf::Message {
 public:
  AllFashions();
  virtual ~AllFashions();
  
  AllFashions(const AllFashions& from);
  
  inline AllFashions& operator=(const AllFashions& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllFashions& default_instance();
  
  void Swap(AllFashions* other);
  
  // implements Message ----------------------------------------------
  
  AllFashions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllFashions& from);
  void MergeFrom(const AllFashions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .FashionInfo fashions = 1;
  inline int fashions_size() const;
  inline void clear_fashions();
  static const int kFashionsFieldNumber = 1;
  inline const ::FashionInfo& fashions(int index) const;
  inline ::FashionInfo* mutable_fashions(int index);
  inline ::FashionInfo* add_fashions();
  inline const ::google::protobuf::RepeatedPtrField< ::FashionInfo >&
      fashions() const;
  inline ::google::protobuf::RepeatedPtrField< ::FashionInfo >*
      mutable_fashions();
  
  // @@protoc_insertion_point(class_scope:AllFashions)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::FashionInfo > fashions_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Fashion_2eproto();
  friend void protobuf_AssignDesc_Fashion_2eproto();
  friend void protobuf_ShutdownFile_Fashion_2eproto();
  
  void InitAsDefaultInstance();
  static AllFashions* default_instance_;
};
// ===================================================================


// ===================================================================

// FashionInfo

// optional int32 id = 1;
inline bool FashionInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FashionInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FashionInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FashionInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FashionInfo::id() const {
  return id_;
}
inline void FashionInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool FashionInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FashionInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FashionInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FashionInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FashionInfo::name() const {
  return *name_;
}
inline void FashionInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FashionInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FashionInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FashionInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FashionInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 model = 3;
inline bool FashionInfo::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FashionInfo::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FashionInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FashionInfo::clear_model() {
  model_ = 0;
  clear_has_model();
}
inline ::google::protobuf::int32 FashionInfo::model() const {
  return model_;
}
inline void FashionInfo::set_model(::google::protobuf::int32 value) {
  set_has_model();
  model_ = value;
}

// optional int32 picture = 4;
inline bool FashionInfo::has_picture() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FashionInfo::set_has_picture() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FashionInfo::clear_has_picture() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FashionInfo::clear_picture() {
  picture_ = 0;
  clear_has_picture();
}
inline ::google::protobuf::int32 FashionInfo::picture() const {
  return picture_;
}
inline void FashionInfo::set_picture(::google::protobuf::int32 value) {
  set_has_picture();
  picture_ = value;
}

// optional string desc = 5;
inline bool FashionInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FashionInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FashionInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FashionInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& FashionInfo::desc() const {
  return *desc_;
}
inline void FashionInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void FashionInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void FashionInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FashionInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* FashionInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 professionType = 6;
inline bool FashionInfo::has_professionType() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FashionInfo::set_has_professionType() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FashionInfo::clear_has_professionType() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FashionInfo::clear_professionType() {
  professionType_ = 0;
  clear_has_professionType();
}
inline ::google::protobuf::int32 FashionInfo::professionType() const {
  return professionType_;
}
inline void FashionInfo::set_professionType(::google::protobuf::int32 value) {
  set_has_professionType();
  professionType_ = value;
}

// optional int32 rmb = 7;
inline bool FashionInfo::has_rmb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FashionInfo::set_has_rmb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FashionInfo::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FashionInfo::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 FashionInfo::rmb() const {
  return rmb_;
}
inline void FashionInfo::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional .FashionInfo.ColorType colorType = 8;
inline bool FashionInfo::has_colorType() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FashionInfo::set_has_colorType() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FashionInfo::clear_has_colorType() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FashionInfo::clear_colorType() {
  colorType_ = 0;
  clear_has_colorType();
}
inline ::FashionInfo_ColorType FashionInfo::colorType() const {
  return static_cast< ::FashionInfo_ColorType >(colorType_);
}
inline void FashionInfo::set_colorType(::FashionInfo_ColorType value) {
  GOOGLE_DCHECK(::FashionInfo_ColorType_IsValid(value));
  set_has_colorType();
  colorType_ = value;
}

// repeated int32 att = 9;
inline int FashionInfo::att_size() const {
  return att_.size();
}
inline void FashionInfo::clear_att() {
  att_.Clear();
}
inline ::google::protobuf::int32 FashionInfo::att(int index) const {
  return att_.Get(index);
}
inline void FashionInfo::set_att(int index, ::google::protobuf::int32 value) {
  att_.Set(index, value);
}
inline void FashionInfo::add_att(::google::protobuf::int32 value) {
  att_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FashionInfo::att() const {
  return att_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FashionInfo::mutable_att() {
  return &att_;
}

// optional int32 effect1 = 10;
inline bool FashionInfo::has_effect1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FashionInfo::set_has_effect1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FashionInfo::clear_has_effect1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FashionInfo::clear_effect1() {
  effect1_ = 0;
  clear_has_effect1();
}
inline ::google::protobuf::int32 FashionInfo::effect1() const {
  return effect1_;
}
inline void FashionInfo::set_effect1(::google::protobuf::int32 value) {
  set_has_effect1();
  effect1_ = value;
}

// optional int32 effect2 = 11;
inline bool FashionInfo::has_effect2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FashionInfo::set_has_effect2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FashionInfo::clear_has_effect2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FashionInfo::clear_effect2() {
  effect2_ = 0;
  clear_has_effect2();
}
inline ::google::protobuf::int32 FashionInfo::effect2() const {
  return effect2_;
}
inline void FashionInfo::set_effect2(::google::protobuf::int32 value) {
  set_has_effect2();
  effect2_ = value;
}

// optional int32 godScore = 12;
inline bool FashionInfo::has_godScore() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FashionInfo::set_has_godScore() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FashionInfo::clear_has_godScore() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FashionInfo::clear_godScore() {
  godScore_ = 0;
  clear_has_godScore();
}
inline ::google::protobuf::int32 FashionInfo::godScore() const {
  return godScore_;
}
inline void FashionInfo::set_godScore(::google::protobuf::int32 value) {
  set_has_godScore();
  godScore_ = value;
}

// optional int32 lovePoint = 13;
inline bool FashionInfo::has_lovePoint() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FashionInfo::set_has_lovePoint() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FashionInfo::clear_has_lovePoint() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FashionInfo::clear_lovePoint() {
  lovePoint_ = 0;
  clear_has_lovePoint();
}
inline ::google::protobuf::int32 FashionInfo::lovePoint() const {
  return lovePoint_;
}
inline void FashionInfo::set_lovePoint(::google::protobuf::int32 value) {
  set_has_lovePoint();
  lovePoint_ = value;
}

// optional int32 pvpScore = 14;
inline bool FashionInfo::has_pvpScore() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FashionInfo::set_has_pvpScore() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FashionInfo::clear_has_pvpScore() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FashionInfo::clear_pvpScore() {
  pvpScore_ = 0;
  clear_has_pvpScore();
}
inline ::google::protobuf::int32 FashionInfo::pvpScore() const {
  return pvpScore_;
}
inline void FashionInfo::set_pvpScore(::google::protobuf::int32 value) {
  set_has_pvpScore();
  pvpScore_ = value;
}

// optional int32 factionContribute = 15;
inline bool FashionInfo::has_factionContribute() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FashionInfo::set_has_factionContribute() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FashionInfo::clear_has_factionContribute() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FashionInfo::clear_factionContribute() {
  factionContribute_ = 0;
  clear_has_factionContribute();
}
inline ::google::protobuf::int32 FashionInfo::factionContribute() const {
  return factionContribute_;
}
inline void FashionInfo::set_factionContribute(::google::protobuf::int32 value) {
  set_has_factionContribute();
  factionContribute_ = value;
}

// optional int32 helpNode = 16;
inline bool FashionInfo::has_helpNode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FashionInfo::set_has_helpNode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FashionInfo::clear_has_helpNode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FashionInfo::clear_helpNode() {
  helpNode_ = 0;
  clear_has_helpNode();
}
inline ::google::protobuf::int32 FashionInfo::helpNode() const {
  return helpNode_;
}
inline void FashionInfo::set_helpNode(::google::protobuf::int32 value) {
  set_has_helpNode();
  helpNode_ = value;
}

// -------------------------------------------------------------------

// PB_FashionAsset

// optional int32 v = 1;
inline bool PB_FashionAsset::has_v() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_FashionAsset::set_has_v() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_FashionAsset::clear_has_v() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_FashionAsset::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 PB_FashionAsset::v() const {
  return v_;
}
inline void PB_FashionAsset::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
}

// repeated int32 runes = 2;
inline int PB_FashionAsset::runes_size() const {
  return runes_.size();
}
inline void PB_FashionAsset::clear_runes() {
  runes_.Clear();
}
inline ::google::protobuf::int32 PB_FashionAsset::runes(int index) const {
  return runes_.Get(index);
}
inline void PB_FashionAsset::set_runes(int index, ::google::protobuf::int32 value) {
  runes_.Set(index, value);
}
inline void PB_FashionAsset::add_runes(::google::protobuf::int32 value) {
  runes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_FashionAsset::runes() const {
  return runes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_FashionAsset::mutable_runes() {
  return &runes_;
}

// -------------------------------------------------------------------

// AllFashions

// repeated .FashionInfo fashions = 1;
inline int AllFashions::fashions_size() const {
  return fashions_.size();
}
inline void AllFashions::clear_fashions() {
  fashions_.Clear();
}
inline const ::FashionInfo& AllFashions::fashions(int index) const {
  return fashions_.Get(index);
}
inline ::FashionInfo* AllFashions::mutable_fashions(int index) {
  return fashions_.Mutable(index);
}
inline ::FashionInfo* AllFashions::add_fashions() {
  return fashions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FashionInfo >&
AllFashions::fashions() const {
  return fashions_;
}
inline ::google::protobuf::RepeatedPtrField< ::FashionInfo >*
AllFashions::mutable_fashions() {
  return &fashions_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FashionInfo_ColorType>() {
  return ::FashionInfo_ColorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Fashion_2eproto__INCLUDED

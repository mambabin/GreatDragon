// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VIPInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* VIPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllVIPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllVIPInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VIPInfo_2eproto() {
  protobuf_AddDesc_VIPInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VIPInfo.proto");
  GOOGLE_CHECK(file != NULL);
  VIPInfo_descriptor_ = file->message_type(0);
  static const int VIPInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, expDelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, reviveDelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, resetSingleEnhance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, inspireCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, resetBoss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, resetGod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, clearGodCD_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, buyDurability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, transformCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, quickFight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, quickSell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, clearQuickFightCD_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, mulTowerHireCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, towerResetCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, moneyTreeCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, durabilityDelta_),
  };
  VIPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPInfo_descriptor_,
      VIPInfo::default_instance_,
      VIPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPInfo));
  AllVIPInfo_descriptor_ = file->message_type(1);
  static const int AllVIPInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllVIPInfo, vipInfo_),
  };
  AllVIPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllVIPInfo_descriptor_,
      AllVIPInfo::default_instance_,
      AllVIPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllVIPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllVIPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllVIPInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VIPInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPInfo_descriptor_, &VIPInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllVIPInfo_descriptor_, &AllVIPInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VIPInfo_2eproto() {
  delete VIPInfo::default_instance_;
  delete VIPInfo_reflection_;
  delete AllVIPInfo::default_instance_;
  delete AllVIPInfo_reflection_;
}

void protobuf_AddDesc_VIPInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rVIPInfo.proto\"\251\003\n\007VIPInfo\022\r\n\005level\030\001 \001"
    "(\005\022\013\n\003rmb\030\002 \001(\005\022\r\n\005goods\030\003 \001(\005\022\020\n\010expDel"
    "ta\030\005 \001(\002\022\023\n\013reviveDelta\030\006 \001(\005\022\032\n\022resetSi"
    "ngleEnhance\030\007 \001(\005\022\024\n\014inspireCount\030\010 \001(\005\022"
    "\021\n\tresetBoss\030\t \001(\005\022\020\n\010resetGod\030\n \001(\005\022\022\n\n"
    "clearGodCD\030\013 \001(\010\022\013\n\003pic\030\014 \001(\005\022\025\n\rbuyDura"
    "bility\030\r \001(\005\022\026\n\016transformCount\030\016 \001(\005\022\022\n\n"
    "quickFight\030\017 \001(\010\022\021\n\tquickSell\030\020 \001(\010\022\031\n\021c"
    "learQuickFightCD\030\021 \001(\010\022\031\n\021mulTowerHireCo"
    "unt\030\022 \001(\005\022\027\n\017towerResetCount\030\023 \001(\005\022\026\n\016mo"
    "neyTreeCount\030\024 \001(\005\022\027\n\017durabilityDelta\030\025 "
    "\001(\005\"\'\n\nAllVIPInfo\022\031\n\007vipInfo\030\001 \003(\0132\010.VIP"
    "Info", 484);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VIPInfo.proto", &protobuf_RegisterTypes);
  VIPInfo::default_instance_ = new VIPInfo();
  AllVIPInfo::default_instance_ = new AllVIPInfo();
  VIPInfo::default_instance_->InitAsDefaultInstance();
  AllVIPInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VIPInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VIPInfo_2eproto {
  StaticDescriptorInitializer_VIPInfo_2eproto() {
    protobuf_AddDesc_VIPInfo_2eproto();
  }
} static_descriptor_initializer_VIPInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int VIPInfo::kLevelFieldNumber;
const int VIPInfo::kRmbFieldNumber;
const int VIPInfo::kGoodsFieldNumber;
const int VIPInfo::kExpDeltaFieldNumber;
const int VIPInfo::kReviveDeltaFieldNumber;
const int VIPInfo::kResetSingleEnhanceFieldNumber;
const int VIPInfo::kInspireCountFieldNumber;
const int VIPInfo::kResetBossFieldNumber;
const int VIPInfo::kResetGodFieldNumber;
const int VIPInfo::kClearGodCDFieldNumber;
const int VIPInfo::kPicFieldNumber;
const int VIPInfo::kBuyDurabilityFieldNumber;
const int VIPInfo::kTransformCountFieldNumber;
const int VIPInfo::kQuickFightFieldNumber;
const int VIPInfo::kQuickSellFieldNumber;
const int VIPInfo::kClearQuickFightCDFieldNumber;
const int VIPInfo::kMulTowerHireCountFieldNumber;
const int VIPInfo::kTowerResetCountFieldNumber;
const int VIPInfo::kMoneyTreeCountFieldNumber;
const int VIPInfo::kDurabilityDeltaFieldNumber;
#endif  // !_MSC_VER

VIPInfo::VIPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VIPInfo::InitAsDefaultInstance() {
}

VIPInfo::VIPInfo(const VIPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VIPInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  rmb_ = 0;
  goods_ = 0;
  expDelta_ = 0;
  reviveDelta_ = 0;
  resetSingleEnhance_ = 0;
  inspireCount_ = 0;
  resetBoss_ = 0;
  resetGod_ = 0;
  clearGodCD_ = false;
  pic_ = 0;
  buyDurability_ = 0;
  transformCount_ = 0;
  quickFight_ = false;
  quickSell_ = false;
  clearQuickFightCD_ = false;
  mulTowerHireCount_ = 0;
  towerResetCount_ = 0;
  moneyTreeCount_ = 0;
  durabilityDelta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPInfo::~VIPInfo() {
  SharedDtor();
}

void VIPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPInfo_descriptor_;
}

const VIPInfo& VIPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VIPInfo_2eproto();  return *default_instance_;
}

VIPInfo* VIPInfo::default_instance_ = NULL;

VIPInfo* VIPInfo::New() const {
  return new VIPInfo;
}

void VIPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    rmb_ = 0;
    goods_ = 0;
    expDelta_ = 0;
    reviveDelta_ = 0;
    resetSingleEnhance_ = 0;
    inspireCount_ = 0;
    resetBoss_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    resetGod_ = 0;
    clearGodCD_ = false;
    pic_ = 0;
    buyDurability_ = 0;
    transformCount_ = 0;
    quickFight_ = false;
    quickSell_ = false;
    clearQuickFightCD_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mulTowerHireCount_ = 0;
    towerResetCount_ = 0;
    moneyTreeCount_ = 0;
    durabilityDelta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goods;
        break;
      }
      
      // optional int32 goods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_)));
          set_has_goods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_expDelta;
        break;
      }
      
      // optional float expDelta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_expDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expDelta_)));
          set_has_expDelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reviveDelta;
        break;
      }
      
      // optional int32 reviveDelta = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reviveDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reviveDelta_)));
          set_has_reviveDelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_resetSingleEnhance;
        break;
      }
      
      // optional int32 resetSingleEnhance = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetSingleEnhance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resetSingleEnhance_)));
          set_has_resetSingleEnhance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_inspireCount;
        break;
      }
      
      // optional int32 inspireCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspireCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inspireCount_)));
          set_has_inspireCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_resetBoss;
        break;
      }
      
      // optional int32 resetBoss = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetBoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resetBoss_)));
          set_has_resetBoss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_resetGod;
        break;
      }
      
      // optional int32 resetGod = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetGod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resetGod_)));
          set_has_resetGod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_clearGodCD;
        break;
      }
      
      // optional bool clearGodCD = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clearGodCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clearGodCD_)));
          set_has_clearGodCD();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_pic;
        break;
      }
      
      // optional int32 pic = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_buyDurability;
        break;
      }
      
      // optional int32 buyDurability = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyDurability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyDurability_)));
          set_has_buyDurability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_transformCount;
        break;
      }
      
      // optional int32 transformCount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transformCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transformCount_)));
          set_has_transformCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_quickFight;
        break;
      }
      
      // optional bool quickFight = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quickFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quickFight_)));
          set_has_quickFight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_quickSell;
        break;
      }
      
      // optional bool quickSell = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quickSell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quickSell_)));
          set_has_quickSell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_clearQuickFightCD;
        break;
      }
      
      // optional bool clearQuickFightCD = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clearQuickFightCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clearQuickFightCD_)));
          set_has_clearQuickFightCD();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_mulTowerHireCount;
        break;
      }
      
      // optional int32 mulTowerHireCount = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mulTowerHireCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mulTowerHireCount_)));
          set_has_mulTowerHireCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_towerResetCount;
        break;
      }
      
      // optional int32 towerResetCount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_towerResetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &towerResetCount_)));
          set_has_towerResetCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_moneyTreeCount;
        break;
      }
      
      // optional int32 moneyTreeCount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyTreeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneyTreeCount_)));
          set_has_moneyTreeCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_durabilityDelta;
        break;
      }
      
      // optional int32 durabilityDelta = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durabilityDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durabilityDelta_)));
          set_has_durabilityDelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 rmb = 2;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rmb(), output);
  }
  
  // optional int32 goods = 3;
  if (has_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goods(), output);
  }
  
  // optional float expDelta = 5;
  if (has_expDelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->expDelta(), output);
  }
  
  // optional int32 reviveDelta = 6;
  if (has_reviveDelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reviveDelta(), output);
  }
  
  // optional int32 resetSingleEnhance = 7;
  if (has_resetSingleEnhance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->resetSingleEnhance(), output);
  }
  
  // optional int32 inspireCount = 8;
  if (has_inspireCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->inspireCount(), output);
  }
  
  // optional int32 resetBoss = 9;
  if (has_resetBoss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->resetBoss(), output);
  }
  
  // optional int32 resetGod = 10;
  if (has_resetGod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->resetGod(), output);
  }
  
  // optional bool clearGodCD = 11;
  if (has_clearGodCD()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->clearGodCD(), output);
  }
  
  // optional int32 pic = 12;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->pic(), output);
  }
  
  // optional int32 buyDurability = 13;
  if (has_buyDurability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->buyDurability(), output);
  }
  
  // optional int32 transformCount = 14;
  if (has_transformCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->transformCount(), output);
  }
  
  // optional bool quickFight = 15;
  if (has_quickFight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->quickFight(), output);
  }
  
  // optional bool quickSell = 16;
  if (has_quickSell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->quickSell(), output);
  }
  
  // optional bool clearQuickFightCD = 17;
  if (has_clearQuickFightCD()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->clearQuickFightCD(), output);
  }
  
  // optional int32 mulTowerHireCount = 18;
  if (has_mulTowerHireCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->mulTowerHireCount(), output);
  }
  
  // optional int32 towerResetCount = 19;
  if (has_towerResetCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->towerResetCount(), output);
  }
  
  // optional int32 moneyTreeCount = 20;
  if (has_moneyTreeCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->moneyTreeCount(), output);
  }
  
  // optional int32 durabilityDelta = 21;
  if (has_durabilityDelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->durabilityDelta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VIPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 rmb = 2;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rmb(), target);
  }
  
  // optional int32 goods = 3;
  if (has_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goods(), target);
  }
  
  // optional float expDelta = 5;
  if (has_expDelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->expDelta(), target);
  }
  
  // optional int32 reviveDelta = 6;
  if (has_reviveDelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reviveDelta(), target);
  }
  
  // optional int32 resetSingleEnhance = 7;
  if (has_resetSingleEnhance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->resetSingleEnhance(), target);
  }
  
  // optional int32 inspireCount = 8;
  if (has_inspireCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->inspireCount(), target);
  }
  
  // optional int32 resetBoss = 9;
  if (has_resetBoss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->resetBoss(), target);
  }
  
  // optional int32 resetGod = 10;
  if (has_resetGod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->resetGod(), target);
  }
  
  // optional bool clearGodCD = 11;
  if (has_clearGodCD()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->clearGodCD(), target);
  }
  
  // optional int32 pic = 12;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->pic(), target);
  }
  
  // optional int32 buyDurability = 13;
  if (has_buyDurability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->buyDurability(), target);
  }
  
  // optional int32 transformCount = 14;
  if (has_transformCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->transformCount(), target);
  }
  
  // optional bool quickFight = 15;
  if (has_quickFight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->quickFight(), target);
  }
  
  // optional bool quickSell = 16;
  if (has_quickSell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->quickSell(), target);
  }
  
  // optional bool clearQuickFightCD = 17;
  if (has_clearQuickFightCD()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->clearQuickFightCD(), target);
  }
  
  // optional int32 mulTowerHireCount = 18;
  if (has_mulTowerHireCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->mulTowerHireCount(), target);
  }
  
  // optional int32 towerResetCount = 19;
  if (has_towerResetCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->towerResetCount(), target);
  }
  
  // optional int32 moneyTreeCount = 20;
  if (has_moneyTreeCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->moneyTreeCount(), target);
  }
  
  // optional int32 durabilityDelta = 21;
  if (has_durabilityDelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->durabilityDelta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VIPInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 rmb = 2;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional int32 goods = 3;
    if (has_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods());
    }
    
    // optional float expDelta = 5;
    if (has_expDelta()) {
      total_size += 1 + 4;
    }
    
    // optional int32 reviveDelta = 6;
    if (has_reviveDelta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reviveDelta());
    }
    
    // optional int32 resetSingleEnhance = 7;
    if (has_resetSingleEnhance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resetSingleEnhance());
    }
    
    // optional int32 inspireCount = 8;
    if (has_inspireCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inspireCount());
    }
    
    // optional int32 resetBoss = 9;
    if (has_resetBoss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resetBoss());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 resetGod = 10;
    if (has_resetGod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resetGod());
    }
    
    // optional bool clearGodCD = 11;
    if (has_clearGodCD()) {
      total_size += 1 + 1;
    }
    
    // optional int32 pic = 12;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }
    
    // optional int32 buyDurability = 13;
    if (has_buyDurability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyDurability());
    }
    
    // optional int32 transformCount = 14;
    if (has_transformCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transformCount());
    }
    
    // optional bool quickFight = 15;
    if (has_quickFight()) {
      total_size += 1 + 1;
    }
    
    // optional bool quickSell = 16;
    if (has_quickSell()) {
      total_size += 2 + 1;
    }
    
    // optional bool clearQuickFightCD = 17;
    if (has_clearQuickFightCD()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 mulTowerHireCount = 18;
    if (has_mulTowerHireCount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mulTowerHireCount());
    }
    
    // optional int32 towerResetCount = 19;
    if (has_towerResetCount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->towerResetCount());
    }
    
    // optional int32 moneyTreeCount = 20;
    if (has_moneyTreeCount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneyTreeCount());
    }
    
    // optional int32 durabilityDelta = 21;
    if (has_durabilityDelta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->durabilityDelta());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPInfo::MergeFrom(const VIPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_goods()) {
      set_goods(from.goods());
    }
    if (from.has_expDelta()) {
      set_expDelta(from.expDelta());
    }
    if (from.has_reviveDelta()) {
      set_reviveDelta(from.reviveDelta());
    }
    if (from.has_resetSingleEnhance()) {
      set_resetSingleEnhance(from.resetSingleEnhance());
    }
    if (from.has_inspireCount()) {
      set_inspireCount(from.inspireCount());
    }
    if (from.has_resetBoss()) {
      set_resetBoss(from.resetBoss());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resetGod()) {
      set_resetGod(from.resetGod());
    }
    if (from.has_clearGodCD()) {
      set_clearGodCD(from.clearGodCD());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_buyDurability()) {
      set_buyDurability(from.buyDurability());
    }
    if (from.has_transformCount()) {
      set_transformCount(from.transformCount());
    }
    if (from.has_quickFight()) {
      set_quickFight(from.quickFight());
    }
    if (from.has_quickSell()) {
      set_quickSell(from.quickSell());
    }
    if (from.has_clearQuickFightCD()) {
      set_clearQuickFightCD(from.clearQuickFightCD());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mulTowerHireCount()) {
      set_mulTowerHireCount(from.mulTowerHireCount());
    }
    if (from.has_towerResetCount()) {
      set_towerResetCount(from.towerResetCount());
    }
    if (from.has_moneyTreeCount()) {
      set_moneyTreeCount(from.moneyTreeCount());
    }
    if (from.has_durabilityDelta()) {
      set_durabilityDelta(from.durabilityDelta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPInfo::CopyFrom(const VIPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPInfo::IsInitialized() const {
  
  return true;
}

void VIPInfo::Swap(VIPInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(rmb_, other->rmb_);
    std::swap(goods_, other->goods_);
    std::swap(expDelta_, other->expDelta_);
    std::swap(reviveDelta_, other->reviveDelta_);
    std::swap(resetSingleEnhance_, other->resetSingleEnhance_);
    std::swap(inspireCount_, other->inspireCount_);
    std::swap(resetBoss_, other->resetBoss_);
    std::swap(resetGod_, other->resetGod_);
    std::swap(clearGodCD_, other->clearGodCD_);
    std::swap(pic_, other->pic_);
    std::swap(buyDurability_, other->buyDurability_);
    std::swap(transformCount_, other->transformCount_);
    std::swap(quickFight_, other->quickFight_);
    std::swap(quickSell_, other->quickSell_);
    std::swap(clearQuickFightCD_, other->clearQuickFightCD_);
    std::swap(mulTowerHireCount_, other->mulTowerHireCount_);
    std::swap(towerResetCount_, other->towerResetCount_);
    std::swap(moneyTreeCount_, other->moneyTreeCount_);
    std::swap(durabilityDelta_, other->durabilityDelta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPInfo_descriptor_;
  metadata.reflection = VIPInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllVIPInfo::kVipInfoFieldNumber;
#endif  // !_MSC_VER

AllVIPInfo::AllVIPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllVIPInfo::InitAsDefaultInstance() {
}

AllVIPInfo::AllVIPInfo(const AllVIPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllVIPInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllVIPInfo::~AllVIPInfo() {
  SharedDtor();
}

void AllVIPInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllVIPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllVIPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllVIPInfo_descriptor_;
}

const AllVIPInfo& AllVIPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VIPInfo_2eproto();  return *default_instance_;
}

AllVIPInfo* AllVIPInfo::default_instance_ = NULL;

AllVIPInfo* AllVIPInfo::New() const {
  return new AllVIPInfo;
}

void AllVIPInfo::Clear() {
  vipInfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllVIPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VIPInfo vipInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vipInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllVIPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .VIPInfo vipInfo = 1;
  for (int i = 0; i < this->vipInfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipInfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllVIPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .VIPInfo vipInfo = 1;
  for (int i = 0; i < this->vipInfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipInfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllVIPInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .VIPInfo vipInfo = 1;
  total_size += 1 * this->vipInfo_size();
  for (int i = 0; i < this->vipInfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipInfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllVIPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllVIPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllVIPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllVIPInfo::MergeFrom(const AllVIPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipInfo_.MergeFrom(from.vipInfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllVIPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllVIPInfo::CopyFrom(const AllVIPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllVIPInfo::IsInitialized() const {
  
  return true;
}

void AllVIPInfo::Swap(AllVIPInfo* other) {
  if (other != this) {
    vipInfo_.Swap(&other->vipInfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllVIPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllVIPInfo_descriptor_;
  metadata.reflection = AllVIPInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

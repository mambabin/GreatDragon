// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerInfo.proto

#ifndef PROTOBUF_PlayerInfo_2eproto__INCLUDED
#define PROTOBUF_PlayerInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerInfo_2eproto();
void protobuf_AssignDesc_PlayerInfo_2eproto();
void protobuf_ShutdownFile_PlayerInfo_2eproto();

class PlayerInfo;

// ===================================================================

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();
  
  PlayerInfo(const PlayerInfo& from);
  
  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();
  
  void Swap(PlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string platform = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  
  // optional string deviceID = 4;
  inline bool has_deviceID() const;
  inline void clear_deviceID();
  static const int kDeviceIDFieldNumber = 4;
  inline const ::std::string& deviceID() const;
  inline void set_deviceID(const ::std::string& value);
  inline void set_deviceID(const char* value);
  inline void set_deviceID(const char* value, size_t size);
  inline ::std::string* mutable_deviceID();
  inline ::std::string* release_deviceID();
  
  // optional string deviceAddTime = 5;
  inline bool has_deviceAddTime() const;
  inline void clear_deviceAddTime();
  static const int kDeviceAddTimeFieldNumber = 5;
  inline const ::std::string& deviceAddTime() const;
  inline void set_deviceAddTime(const ::std::string& value);
  inline void set_deviceAddTime(const char* value);
  inline void set_deviceAddTime(const char* value, size_t size);
  inline ::std::string* mutable_deviceAddTime();
  inline ::std::string* release_deviceAddTime();
  
  // optional string idfa = 6;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 6;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  
  // optional string addTime = 7;
  inline bool has_addTime() const;
  inline void clear_addTime();
  static const int kAddTimeFieldNumber = 7;
  inline const ::std::string& addTime() const;
  inline void set_addTime(const ::std::string& value);
  inline void set_addTime(const char* value);
  inline void set_addTime(const char* value, size_t size);
  inline ::std::string* mutable_addTime();
  inline ::std::string* release_addTime();
  
  // optional string osversion = 8;
  inline bool has_osversion() const;
  inline void clear_osversion();
  static const int kOsversionFieldNumber = 8;
  inline const ::std::string& osversion() const;
  inline void set_osversion(const ::std::string& value);
  inline void set_osversion(const char* value);
  inline void set_osversion(const char* value, size_t size);
  inline ::std::string* mutable_osversion();
  inline ::std::string* release_osversion();
  
  // optional string phonetype = 9;
  inline bool has_phonetype() const;
  inline void clear_phonetype();
  static const int kPhonetypeFieldNumber = 9;
  inline const ::std::string& phonetype() const;
  inline void set_phonetype(const ::std::string& value);
  inline void set_phonetype(const char* value);
  inline void set_phonetype(const char* value, size_t size);
  inline ::std::string* mutable_phonetype();
  inline ::std::string* release_phonetype();
  
  // optional string imei = 10;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 10;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  
  // optional string session_id = 11;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 11;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  
  // optional string session_type = 12;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 12;
  inline const ::std::string& session_type() const;
  inline void set_session_type(const ::std::string& value);
  inline void set_session_type(const char* value);
  inline void set_session_type(const char* value, size_t size);
  inline ::std::string* mutable_session_type();
  inline ::std::string* release_session_type();
  
  // optional string openid = 13;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 13;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  
  // optional string openkey = 14;
  inline bool has_openkey() const;
  inline void clear_openkey();
  static const int kOpenkeyFieldNumber = 14;
  inline const ::std::string& openkey() const;
  inline void set_openkey(const ::std::string& value);
  inline void set_openkey(const char* value);
  inline void set_openkey(const char* value, size_t size);
  inline ::std::string* mutable_openkey();
  inline ::std::string* release_openkey();
  
  // optional string pay_token = 15;
  inline bool has_pay_token() const;
  inline void clear_pay_token();
  static const int kPayTokenFieldNumber = 15;
  inline const ::std::string& pay_token() const;
  inline void set_pay_token(const ::std::string& value);
  inline void set_pay_token(const char* value);
  inline void set_pay_token(const char* value, size_t size);
  inline ::std::string* mutable_pay_token();
  inline ::std::string* release_pay_token();
  
  // optional string pf = 16;
  inline bool has_pf() const;
  inline void clear_pf();
  static const int kPfFieldNumber = 16;
  inline const ::std::string& pf() const;
  inline void set_pf(const ::std::string& value);
  inline void set_pf(const char* value);
  inline void set_pf(const char* value, size_t size);
  inline ::std::string* mutable_pf();
  inline ::std::string* release_pf();
  
  // optional string pfkey = 17;
  inline bool has_pfkey() const;
  inline void clear_pfkey();
  static const int kPfkeyFieldNumber = 17;
  inline const ::std::string& pfkey() const;
  inline void set_pfkey(const ::std::string& value);
  inline void set_pfkey(const char* value);
  inline void set_pfkey(const char* value, size_t size);
  inline ::std::string* mutable_pfkey();
  inline ::std::string* release_pfkey();
  
  // @@protoc_insertion_point(class_scope:PlayerInfo)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_deviceID();
  inline void clear_has_deviceID();
  inline void set_has_deviceAddTime();
  inline void clear_has_deviceAddTime();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  inline void set_has_addTime();
  inline void clear_has_addTime();
  inline void set_has_osversion();
  inline void clear_has_osversion();
  inline void set_has_phonetype();
  inline void clear_has_phonetype();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_openkey();
  inline void clear_has_openkey();
  inline void set_has_pay_token();
  inline void clear_has_pay_token();
  inline void set_has_pf();
  inline void clear_has_pf();
  inline void set_has_pfkey();
  inline void clear_has_pfkey();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::std::string* password_;
  ::std::string* platform_;
  ::std::string* deviceID_;
  ::std::string* deviceAddTime_;
  ::std::string* idfa_;
  ::std::string* addTime_;
  ::std::string* osversion_;
  ::std::string* phonetype_;
  ::std::string* imei_;
  ::std::string* session_id_;
  ::std::string* session_type_;
  ::std::string* openid_;
  ::std::string* openkey_;
  ::std::string* pay_token_;
  ::std::string* pf_;
  ::std::string* pfkey_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_PlayerInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerInfo

// optional string account = 1;
inline bool PlayerInfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PlayerInfo::account() const {
  return *account_;
}
inline void PlayerInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PlayerInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void PlayerInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* PlayerInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 2;
inline bool PlayerInfo::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& PlayerInfo::password() const {
  return *password_;
}
inline void PlayerInfo::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PlayerInfo::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PlayerInfo::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* PlayerInfo::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string platform = 3;
inline bool PlayerInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfo::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& PlayerInfo::platform() const {
  return *platform_;
}
inline void PlayerInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void PlayerInfo::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void PlayerInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* PlayerInfo::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string deviceID = 4;
inline bool PlayerInfo::has_deviceID() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfo::set_has_deviceID() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfo::clear_has_deviceID() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfo::clear_deviceID() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    deviceID_->clear();
  }
  clear_has_deviceID();
}
inline const ::std::string& PlayerInfo::deviceID() const {
  return *deviceID_;
}
inline void PlayerInfo::set_deviceID(const ::std::string& value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void PlayerInfo::set_deviceID(const char* value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void PlayerInfo::set_deviceID(const char* value, size_t size) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_deviceID() {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  return deviceID_;
}
inline ::std::string* PlayerInfo::release_deviceID() {
  clear_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceID_;
    deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string deviceAddTime = 5;
inline bool PlayerInfo::has_deviceAddTime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfo::set_has_deviceAddTime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfo::clear_has_deviceAddTime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfo::clear_deviceAddTime() {
  if (deviceAddTime_ != &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_->clear();
  }
  clear_has_deviceAddTime();
}
inline const ::std::string& PlayerInfo::deviceAddTime() const {
  return *deviceAddTime_;
}
inline void PlayerInfo::set_deviceAddTime(const ::std::string& value) {
  set_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_ = new ::std::string;
  }
  deviceAddTime_->assign(value);
}
inline void PlayerInfo::set_deviceAddTime(const char* value) {
  set_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_ = new ::std::string;
  }
  deviceAddTime_->assign(value);
}
inline void PlayerInfo::set_deviceAddTime(const char* value, size_t size) {
  set_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_ = new ::std::string;
  }
  deviceAddTime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_deviceAddTime() {
  set_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_ = new ::std::string;
  }
  return deviceAddTime_;
}
inline ::std::string* PlayerInfo::release_deviceAddTime() {
  clear_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceAddTime_;
    deviceAddTime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string idfa = 6;
inline bool PlayerInfo::has_idfa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInfo::set_has_idfa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInfo::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInfo::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& PlayerInfo::idfa() const {
  return *idfa_;
}
inline void PlayerInfo::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void PlayerInfo::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void PlayerInfo::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  return idfa_;
}
inline ::std::string* PlayerInfo::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string addTime = 7;
inline bool PlayerInfo::has_addTime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInfo::set_has_addTime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInfo::clear_has_addTime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInfo::clear_addTime() {
  if (addTime_ != &::google::protobuf::internal::kEmptyString) {
    addTime_->clear();
  }
  clear_has_addTime();
}
inline const ::std::string& PlayerInfo::addTime() const {
  return *addTime_;
}
inline void PlayerInfo::set_addTime(const ::std::string& value) {
  set_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    addTime_ = new ::std::string;
  }
  addTime_->assign(value);
}
inline void PlayerInfo::set_addTime(const char* value) {
  set_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    addTime_ = new ::std::string;
  }
  addTime_->assign(value);
}
inline void PlayerInfo::set_addTime(const char* value, size_t size) {
  set_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    addTime_ = new ::std::string;
  }
  addTime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_addTime() {
  set_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    addTime_ = new ::std::string;
  }
  return addTime_;
}
inline ::std::string* PlayerInfo::release_addTime() {
  clear_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addTime_;
    addTime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string osversion = 8;
inline bool PlayerInfo::has_osversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerInfo::set_has_osversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerInfo::clear_has_osversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerInfo::clear_osversion() {
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    osversion_->clear();
  }
  clear_has_osversion();
}
inline const ::std::string& PlayerInfo::osversion() const {
  return *osversion_;
}
inline void PlayerInfo::set_osversion(const ::std::string& value) {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  osversion_->assign(value);
}
inline void PlayerInfo::set_osversion(const char* value) {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  osversion_->assign(value);
}
inline void PlayerInfo::set_osversion(const char* value, size_t size) {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  osversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_osversion() {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  return osversion_;
}
inline ::std::string* PlayerInfo::release_osversion() {
  clear_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = osversion_;
    osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string phonetype = 9;
inline bool PlayerInfo::has_phonetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerInfo::set_has_phonetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerInfo::clear_has_phonetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerInfo::clear_phonetype() {
  if (phonetype_ != &::google::protobuf::internal::kEmptyString) {
    phonetype_->clear();
  }
  clear_has_phonetype();
}
inline const ::std::string& PlayerInfo::phonetype() const {
  return *phonetype_;
}
inline void PlayerInfo::set_phonetype(const ::std::string& value) {
  set_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    phonetype_ = new ::std::string;
  }
  phonetype_->assign(value);
}
inline void PlayerInfo::set_phonetype(const char* value) {
  set_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    phonetype_ = new ::std::string;
  }
  phonetype_->assign(value);
}
inline void PlayerInfo::set_phonetype(const char* value, size_t size) {
  set_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    phonetype_ = new ::std::string;
  }
  phonetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_phonetype() {
  set_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    phonetype_ = new ::std::string;
  }
  return phonetype_;
}
inline ::std::string* PlayerInfo::release_phonetype() {
  clear_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phonetype_;
    phonetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string imei = 10;
inline bool PlayerInfo::has_imei() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerInfo::set_has_imei() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerInfo::clear_has_imei() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerInfo::clear_imei() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& PlayerInfo::imei() const {
  return *imei_;
}
inline void PlayerInfo::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void PlayerInfo::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void PlayerInfo::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  return imei_;
}
inline ::std::string* PlayerInfo::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string session_id = 11;
inline bool PlayerInfo::has_session_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerInfo::set_has_session_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerInfo::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerInfo::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& PlayerInfo::session_id() const {
  return *session_id_;
}
inline void PlayerInfo::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void PlayerInfo::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void PlayerInfo::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* PlayerInfo::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string session_type = 12;
inline bool PlayerInfo::has_session_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerInfo::set_has_session_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerInfo::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerInfo::clear_session_type() {
  if (session_type_ != &::google::protobuf::internal::kEmptyString) {
    session_type_->clear();
  }
  clear_has_session_type();
}
inline const ::std::string& PlayerInfo::session_type() const {
  return *session_type_;
}
inline void PlayerInfo::set_session_type(const ::std::string& value) {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  session_type_->assign(value);
}
inline void PlayerInfo::set_session_type(const char* value) {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  session_type_->assign(value);
}
inline void PlayerInfo::set_session_type(const char* value, size_t size) {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  session_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_session_type() {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  return session_type_;
}
inline ::std::string* PlayerInfo::release_session_type() {
  clear_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_type_;
    session_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string openid = 13;
inline bool PlayerInfo::has_openid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerInfo::set_has_openid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& PlayerInfo::openid() const {
  return *openid_;
}
inline void PlayerInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void PlayerInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void PlayerInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* PlayerInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string openkey = 14;
inline bool PlayerInfo::has_openkey() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerInfo::set_has_openkey() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerInfo::clear_has_openkey() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerInfo::clear_openkey() {
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    openkey_->clear();
  }
  clear_has_openkey();
}
inline const ::std::string& PlayerInfo::openkey() const {
  return *openkey_;
}
inline void PlayerInfo::set_openkey(const ::std::string& value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void PlayerInfo::set_openkey(const char* value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void PlayerInfo::set_openkey(const char* value, size_t size) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_openkey() {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  return openkey_;
}
inline ::std::string* PlayerInfo::release_openkey() {
  clear_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openkey_;
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pay_token = 15;
inline bool PlayerInfo::has_pay_token() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerInfo::set_has_pay_token() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerInfo::clear_has_pay_token() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerInfo::clear_pay_token() {
  if (pay_token_ != &::google::protobuf::internal::kEmptyString) {
    pay_token_->clear();
  }
  clear_has_pay_token();
}
inline const ::std::string& PlayerInfo::pay_token() const {
  return *pay_token_;
}
inline void PlayerInfo::set_pay_token(const ::std::string& value) {
  set_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    pay_token_ = new ::std::string;
  }
  pay_token_->assign(value);
}
inline void PlayerInfo::set_pay_token(const char* value) {
  set_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    pay_token_ = new ::std::string;
  }
  pay_token_->assign(value);
}
inline void PlayerInfo::set_pay_token(const char* value, size_t size) {
  set_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    pay_token_ = new ::std::string;
  }
  pay_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_pay_token() {
  set_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    pay_token_ = new ::std::string;
  }
  return pay_token_;
}
inline ::std::string* PlayerInfo::release_pay_token() {
  clear_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pay_token_;
    pay_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pf = 16;
inline bool PlayerInfo::has_pf() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerInfo::set_has_pf() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerInfo::clear_has_pf() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerInfo::clear_pf() {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    pf_->clear();
  }
  clear_has_pf();
}
inline const ::std::string& PlayerInfo::pf() const {
  return *pf_;
}
inline void PlayerInfo::set_pf(const ::std::string& value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void PlayerInfo::set_pf(const char* value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void PlayerInfo::set_pf(const char* value, size_t size) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_pf() {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  return pf_;
}
inline ::std::string* PlayerInfo::release_pf() {
  clear_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pf_;
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pfkey = 17;
inline bool PlayerInfo::has_pfkey() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerInfo::set_has_pfkey() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerInfo::clear_has_pfkey() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerInfo::clear_pfkey() {
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    pfkey_->clear();
  }
  clear_has_pfkey();
}
inline const ::std::string& PlayerInfo::pfkey() const {
  return *pfkey_;
}
inline void PlayerInfo::set_pfkey(const ::std::string& value) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(value);
}
inline void PlayerInfo::set_pfkey(const char* value) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(value);
}
inline void PlayerInfo::set_pfkey(const char* value, size_t size) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_pfkey() {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  return pfkey_;
}
inline ::std::string* PlayerInfo::release_pfkey() {
  clear_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pfkey_;
    pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerInfo_2eproto__INCLUDED

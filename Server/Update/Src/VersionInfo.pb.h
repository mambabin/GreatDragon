// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VersionInfo.proto

#ifndef PROTOBUF_VersionInfo_2eproto__INCLUDED
#define PROTOBUF_VersionInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VersionInfo_2eproto();
void protobuf_AssignDesc_VersionInfo_2eproto();
void protobuf_ShutdownFile_VersionInfo_2eproto();

class VersionInfo;

// ===================================================================

class VersionInfo : public ::google::protobuf::Message {
 public:
  VersionInfo();
  virtual ~VersionInfo();
  
  VersionInfo(const VersionInfo& from);
  
  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionInfo& default_instance();
  
  void Swap(VersionInfo* other);
  
  // implements Message ----------------------------------------------
  
  VersionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VersionInfo& from);
  void MergeFrom(const VersionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int64 version() const;
  inline void set_version(::google::protobuf::int64 value);
  
  // repeated string origin = 2;
  inline int origin_size() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 2;
  inline const ::std::string& origin(int index) const;
  inline ::std::string* mutable_origin(int index);
  inline void set_origin(int index, const ::std::string& value);
  inline void set_origin(int index, const char* value);
  inline void set_origin(int index, const char* value, size_t size);
  inline ::std::string* add_origin();
  inline void add_origin(const ::std::string& value);
  inline void add_origin(const char* value);
  inline void add_origin(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& origin() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_origin();
  
  // repeated string guid = 3;
  inline int guid_size() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid(int index) const;
  inline ::std::string* mutable_guid(int index);
  inline void set_guid(int index, const ::std::string& value);
  inline void set_guid(int index, const char* value);
  inline void set_guid(int index, const char* value, size_t size);
  inline ::std::string* add_guid();
  inline void add_guid(const ::std::string& value);
  inline void add_guid(const char* value);
  inline void add_guid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guid();
  
  // repeated string md5 = 4;
  inline int md5_size() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 4;
  inline const ::std::string& md5(int index) const;
  inline ::std::string* mutable_md5(int index);
  inline void set_md5(int index, const ::std::string& value);
  inline void set_md5(int index, const char* value);
  inline void set_md5(int index, const char* value, size_t size);
  inline ::std::string* add_md5();
  inline void add_md5(const ::std::string& value);
  inline void add_md5(const char* value);
  inline void add_md5(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& md5() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_md5();
  
  // repeated int32 size = 5;
  inline int size_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline ::google::protobuf::int32 size(int index) const;
  inline void set_size(int index, ::google::protobuf::int32 value);
  inline void add_size(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_size();
  
  // repeated bytes litter = 6;
  inline int litter_size() const;
  inline void clear_litter();
  static const int kLitterFieldNumber = 6;
  inline const ::std::string& litter(int index) const;
  inline ::std::string* mutable_litter(int index);
  inline void set_litter(int index, const ::std::string& value);
  inline void set_litter(int index, const char* value);
  inline void set_litter(int index, const void* value, size_t size);
  inline ::std::string* add_litter();
  inline void add_litter(const ::std::string& value);
  inline void add_litter(const char* value);
  inline void add_litter(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& litter() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_litter();
  
  // @@protoc_insertion_point(class_scope:VersionInfo)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 version_;
  ::google::protobuf::RepeatedPtrField< ::std::string> origin_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> md5_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> litter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_VersionInfo_2eproto();
  friend void protobuf_AssignDesc_VersionInfo_2eproto();
  friend void protobuf_ShutdownFile_VersionInfo_2eproto();
  
  void InitAsDefaultInstance();
  static VersionInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// VersionInfo

// optional int64 version = 1;
inline bool VersionInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionInfo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionInfo::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 VersionInfo::version() const {
  return version_;
}
inline void VersionInfo::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
}

// repeated string origin = 2;
inline int VersionInfo::origin_size() const {
  return origin_.size();
}
inline void VersionInfo::clear_origin() {
  origin_.Clear();
}
inline const ::std::string& VersionInfo::origin(int index) const {
  return origin_.Get(index);
}
inline ::std::string* VersionInfo::mutable_origin(int index) {
  return origin_.Mutable(index);
}
inline void VersionInfo::set_origin(int index, const ::std::string& value) {
  origin_.Mutable(index)->assign(value);
}
inline void VersionInfo::set_origin(int index, const char* value) {
  origin_.Mutable(index)->assign(value);
}
inline void VersionInfo::set_origin(int index, const char* value, size_t size) {
  origin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionInfo::add_origin() {
  return origin_.Add();
}
inline void VersionInfo::add_origin(const ::std::string& value) {
  origin_.Add()->assign(value);
}
inline void VersionInfo::add_origin(const char* value) {
  origin_.Add()->assign(value);
}
inline void VersionInfo::add_origin(const char* value, size_t size) {
  origin_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VersionInfo::origin() const {
  return origin_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VersionInfo::mutable_origin() {
  return &origin_;
}

// repeated string guid = 3;
inline int VersionInfo::guid_size() const {
  return guid_.size();
}
inline void VersionInfo::clear_guid() {
  guid_.Clear();
}
inline const ::std::string& VersionInfo::guid(int index) const {
  return guid_.Get(index);
}
inline ::std::string* VersionInfo::mutable_guid(int index) {
  return guid_.Mutable(index);
}
inline void VersionInfo::set_guid(int index, const ::std::string& value) {
  guid_.Mutable(index)->assign(value);
}
inline void VersionInfo::set_guid(int index, const char* value) {
  guid_.Mutable(index)->assign(value);
}
inline void VersionInfo::set_guid(int index, const char* value, size_t size) {
  guid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionInfo::add_guid() {
  return guid_.Add();
}
inline void VersionInfo::add_guid(const ::std::string& value) {
  guid_.Add()->assign(value);
}
inline void VersionInfo::add_guid(const char* value) {
  guid_.Add()->assign(value);
}
inline void VersionInfo::add_guid(const char* value, size_t size) {
  guid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VersionInfo::guid() const {
  return guid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VersionInfo::mutable_guid() {
  return &guid_;
}

// repeated string md5 = 4;
inline int VersionInfo::md5_size() const {
  return md5_.size();
}
inline void VersionInfo::clear_md5() {
  md5_.Clear();
}
inline const ::std::string& VersionInfo::md5(int index) const {
  return md5_.Get(index);
}
inline ::std::string* VersionInfo::mutable_md5(int index) {
  return md5_.Mutable(index);
}
inline void VersionInfo::set_md5(int index, const ::std::string& value) {
  md5_.Mutable(index)->assign(value);
}
inline void VersionInfo::set_md5(int index, const char* value) {
  md5_.Mutable(index)->assign(value);
}
inline void VersionInfo::set_md5(int index, const char* value, size_t size) {
  md5_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionInfo::add_md5() {
  return md5_.Add();
}
inline void VersionInfo::add_md5(const ::std::string& value) {
  md5_.Add()->assign(value);
}
inline void VersionInfo::add_md5(const char* value) {
  md5_.Add()->assign(value);
}
inline void VersionInfo::add_md5(const char* value, size_t size) {
  md5_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VersionInfo::md5() const {
  return md5_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VersionInfo::mutable_md5() {
  return &md5_;
}

// repeated int32 size = 5;
inline int VersionInfo::size_size() const {
  return size_.size();
}
inline void VersionInfo::clear_size() {
  size_.Clear();
}
inline ::google::protobuf::int32 VersionInfo::size(int index) const {
  return size_.Get(index);
}
inline void VersionInfo::set_size(int index, ::google::protobuf::int32 value) {
  size_.Set(index, value);
}
inline void VersionInfo::add_size(::google::protobuf::int32 value) {
  size_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VersionInfo::size() const {
  return size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VersionInfo::mutable_size() {
  return &size_;
}

// repeated bytes litter = 6;
inline int VersionInfo::litter_size() const {
  return litter_.size();
}
inline void VersionInfo::clear_litter() {
  litter_.Clear();
}
inline const ::std::string& VersionInfo::litter(int index) const {
  return litter_.Get(index);
}
inline ::std::string* VersionInfo::mutable_litter(int index) {
  return litter_.Mutable(index);
}
inline void VersionInfo::set_litter(int index, const ::std::string& value) {
  litter_.Mutable(index)->assign(value);
}
inline void VersionInfo::set_litter(int index, const char* value) {
  litter_.Mutable(index)->assign(value);
}
inline void VersionInfo::set_litter(int index, const void* value, size_t size) {
  litter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionInfo::add_litter() {
  return litter_.Add();
}
inline void VersionInfo::add_litter(const ::std::string& value) {
  litter_.Add()->assign(value);
}
inline void VersionInfo::add_litter(const char* value) {
  litter_.Add()->assign(value);
}
inline void VersionInfo::add_litter(const void* value, size_t size) {
  litter_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VersionInfo::litter() const {
  return litter_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VersionInfo::mutable_litter() {
  return &litter_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VersionInfo_2eproto__INCLUDED

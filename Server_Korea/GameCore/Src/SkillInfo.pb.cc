// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SkillInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillInfo_SkillType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillInfo_TrackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillInfo_LaunchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillInfo_TargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillInfo_StatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillInfo_AreaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillInfo_ShockType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillInfo_OffsetType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SkillFamily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillFamily_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllSkills_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllSkills_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SkillInfo_2eproto() {
  protobuf_AddDesc_SkillInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SkillInfo.proto");
  GOOGLE_CHECK(file != NULL);
  SkillInfo_descriptor_ = file->message_type(0);
  static const int SkillInfo_offsets_[52] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skillType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, prepareTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, targetType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, moveTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, trackType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, canPenetrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, dStatusID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, fStatusID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, aStatusID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, unitCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, fireAction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, launchType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, hitTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, areaType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, prepareAction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, moveAction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, hitAction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, maxHit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, moveActionTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, prepareActionTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, requireLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, isBeginFollowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, isHitFollowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, raiseHit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, fireActionTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, beginAudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, hitAudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, isMoveFollowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, shockType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, hitNums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, aOffsetType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, dOffsetType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, offsetTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, offsetDist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, offsetDelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, count_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  SkillInfo_SkillType_descriptor_ = SkillInfo_descriptor_->enum_type(0);
  SkillInfo_TrackType_descriptor_ = SkillInfo_descriptor_->enum_type(1);
  SkillInfo_LaunchType_descriptor_ = SkillInfo_descriptor_->enum_type(2);
  SkillInfo_TargetType_descriptor_ = SkillInfo_descriptor_->enum_type(3);
  SkillInfo_StatusType_descriptor_ = SkillInfo_descriptor_->enum_type(4);
  SkillInfo_AreaType_descriptor_ = SkillInfo_descriptor_->enum_type(5);
  SkillInfo_ShockType_descriptor_ = SkillInfo_descriptor_->enum_type(6);
  SkillInfo_OffsetType_descriptor_ = SkillInfo_descriptor_->enum_type(7);
  SkillFamily_descriptor_ = file->message_type(1);
  static const int SkillFamily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillFamily, skills_),
  };
  SkillFamily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillFamily_descriptor_,
      SkillFamily::default_instance_,
      SkillFamily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillFamily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillFamily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillFamily));
  AllSkills_descriptor_ = file->message_type(2);
  static const int AllSkills_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllSkills, skills_),
  };
  AllSkills_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllSkills_descriptor_,
      AllSkills::default_instance_,
      AllSkills_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllSkills, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllSkills, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllSkills));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SkillInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillFamily_descriptor_, &SkillFamily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllSkills_descriptor_, &AllSkills::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SkillInfo_2eproto() {
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete SkillFamily::default_instance_;
  delete SkillFamily_reflection_;
  delete AllSkills::default_instance_;
  delete AllSkills_reflection_;
}

void protobuf_AddDesc_SkillInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EquipmentInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SkillInfo.proto\032\023EquipmentInfo.proto\"\206"
    "\r\n\tSkillInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\014"
    "\n\004desc\030\003 \001(\t\022\'\n\tskillType\030\004 \001(\0162\024.SkillI"
    "nfo.SkillType\022\n\n\002cd\030\005 \001(\005\022\023\n\013prepareTime"
    "\030\006 \001(\005\022\n\n\002hp\030\007 \001(\005\022\n\n\002mp\030\010 \001(\005\022\014\n\004gold\030\t"
    " \001(\003\022\016\n\006energy\030\n \001(\005\022\014\n\004dist\030\013 \001(\005\022\022\n\nta"
    "rgetType\030\014 \001(\005\022\r\n\005speed\030\r \001(\005\022\020\n\010moveTim"
    "e\030\016 \001(\005\022\'\n\ttrackType\030\017 \001(\0162\024.SkillInfo.T"
    "rackType\022\024\n\014canPenetrate\030\020 \001(\010\022\016\n\006radius"
    "\030\021 \001(\005\022\021\n\tdStatusID\030\022 \003(\005\022\021\n\tfStatusID\030\023"
    " \001(\005\022\021\n\taStatusID\030\024 \001(\005\022\021\n\tunitCount\030\025 \001"
    "(\005\022\022\n\nfireAction\030\026 \001(\t\022)\n\nlaunchType\030\027 \001"
    "(\0162\025.SkillInfo.LaunchType\022\017\n\007hitTime\030\030 \001"
    "(\005\022%\n\010areaType\030\031 \001(\0162\023.SkillInfo.AreaTyp"
    "e\022\025\n\rprepareAction\030\032 \001(\005\022\022\n\nmoveAction\030\033"
    " \001(\005\022\021\n\thitAction\030\034 \001(\005\022\016\n\006maxHit\030\035 \001(\005\022"
    "\014\n\004next\030\036 \001(\005\022\020\n\010interval\030\037 \001(\005\022\r\n\005level"
    "\030  \001(\005\022\026\n\016moveActionTime\030! \001(\005\022\031\n\021prepar"
    "eActionTime\030\" \001(\005\022\017\n\007picture\030# \001(\005\022\024\n\014re"
    "quireLevel\030$ \001(\005\022\027\n\017isBeginFollowed\030% \001("
    "\010\022\025\n\risHitFollowed\030& \001(\010\022\020\n\010raiseHit\030\' \001"
    "(\010\022\026\n\016fireActionTime\030( \001(\005\022\022\n\nbeginAudio"
    "\030) \001(\005\022\020\n\010hitAudio\030* \001(\005\022\026\n\016isMoveFollow"
    "ed\030+ \001(\010\022\'\n\tshockType\030, \001(\0162\024.SkillInfo."
    "ShockType\022\017\n\007hitNums\030- \001(\005\022*\n\013aOffsetTyp"
    "e\030. \001(\0162\025.SkillInfo.OffsetType\022*\n\013dOffse"
    "tType\030/ \001(\0162\025.SkillInfo.OffsetType\022\022\n\nof"
    "fsetTime\0300 \001(\005\022\022\n\noffsetDist\0301 \001(\002\022\023\n\013of"
    "fsetDelay\0302 \001(\005\022\r\n\005goods\0303 \001(\005\022\r\n\005count\030"
    "4 \001(\005\"\027\n\tSkillType\022\n\n\006STATUS\020\000\"%\n\tTrackT"
    "ype\022\013\n\007HORLINE\020\000\022\013\n\007VERLINE\020\001\"\321\001\n\nLaunch"
    "Type\022\016\n\nSINGLELINE\020\000\022\013\n\007MULLINE\020\001\022\016\n\nSEC"
    "TORLINE\020\002\022\022\n\016CONTINUOUSLINE\020\003\022\014\n\010FALLDOW"
    "N\020\004\022\t\n\005MELEE\020\005\022\010\n\004JUMP\020\006\022\016\n\nAROUNDSELF\020\007"
    "\022\016\n\nGOSTRAIGHT\020\010\022\010\n\004LEAP\020\t\022\014\n\010ROTATION\020\n"
    "\022\014\n\010BACKSTAB\020\013\022\016\n\nSEPARATION\020\014\022\t\n\005BLINK\020"
    "\r\";\n\nTargetType\022\014\n\010NOTARGET\020\000\022\010\n\004SELF\020\001\022"
    "\n\n\006FRIEND\020\002\022\t\n\005ENEMY\020\004\"4\n\nStatusType\022\t\n\005"
    "BEGIN\020\000\022\010\n\004MOVE\020\001\022\007\n\003HIT\020\002\022\010\n\004IDLE\020\003\")\n\010"
    "AreaType\022\007\n\003ONE\020\000\022\n\n\006SQUARE\020\001\022\010\n\004LIST\020\002\""
    "F\n\tShockType\022\010\n\004NONE\020\000\022\020\n\014PREPARE_OVER\020\001"
    "\022\n\n\006ON_HIT\020\002\022\021\n\rMOVETIME_OVER\020\003\"&\n\nOffse"
    "tType\022\r\n\tNO_OFFSET\020\000\022\t\n\005FRONT\020\001\")\n\013Skill"
    "Family\022\032\n\006skills\030\001 \003(\0132\n.SkillInfo\")\n\tAl"
    "lSkills\022\034\n\006skills\030\001 \003(\0132\014.SkillFamily", 1797);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SkillInfo.proto", &protobuf_RegisterTypes);
  SkillInfo::default_instance_ = new SkillInfo();
  SkillFamily::default_instance_ = new SkillFamily();
  AllSkills::default_instance_ = new AllSkills();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  SkillFamily::default_instance_->InitAsDefaultInstance();
  AllSkills::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SkillInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SkillInfo_2eproto {
  StaticDescriptorInitializer_SkillInfo_2eproto() {
    protobuf_AddDesc_SkillInfo_2eproto();
  }
} static_descriptor_initializer_SkillInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* SkillInfo_SkillType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_SkillType_descriptor_;
}
bool SkillInfo_SkillType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SkillInfo_SkillType SkillInfo::STATUS;
const SkillInfo_SkillType SkillInfo::SkillType_MIN;
const SkillInfo_SkillType SkillInfo::SkillType_MAX;
const int SkillInfo::SkillType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SkillInfo_TrackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_TrackType_descriptor_;
}
bool SkillInfo_TrackType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SkillInfo_TrackType SkillInfo::HORLINE;
const SkillInfo_TrackType SkillInfo::VERLINE;
const SkillInfo_TrackType SkillInfo::TrackType_MIN;
const SkillInfo_TrackType SkillInfo::TrackType_MAX;
const int SkillInfo::TrackType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SkillInfo_LaunchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_LaunchType_descriptor_;
}
bool SkillInfo_LaunchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SkillInfo_LaunchType SkillInfo::SINGLELINE;
const SkillInfo_LaunchType SkillInfo::MULLINE;
const SkillInfo_LaunchType SkillInfo::SECTORLINE;
const SkillInfo_LaunchType SkillInfo::CONTINUOUSLINE;
const SkillInfo_LaunchType SkillInfo::FALLDOWN;
const SkillInfo_LaunchType SkillInfo::MELEE;
const SkillInfo_LaunchType SkillInfo::JUMP;
const SkillInfo_LaunchType SkillInfo::AROUNDSELF;
const SkillInfo_LaunchType SkillInfo::GOSTRAIGHT;
const SkillInfo_LaunchType SkillInfo::LEAP;
const SkillInfo_LaunchType SkillInfo::ROTATION;
const SkillInfo_LaunchType SkillInfo::BACKSTAB;
const SkillInfo_LaunchType SkillInfo::SEPARATION;
const SkillInfo_LaunchType SkillInfo::BLINK;
const SkillInfo_LaunchType SkillInfo::LaunchType_MIN;
const SkillInfo_LaunchType SkillInfo::LaunchType_MAX;
const int SkillInfo::LaunchType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SkillInfo_TargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_TargetType_descriptor_;
}
bool SkillInfo_TargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SkillInfo_TargetType SkillInfo::NOTARGET;
const SkillInfo_TargetType SkillInfo::SELF;
const SkillInfo_TargetType SkillInfo::FRIEND;
const SkillInfo_TargetType SkillInfo::ENEMY;
const SkillInfo_TargetType SkillInfo::TargetType_MIN;
const SkillInfo_TargetType SkillInfo::TargetType_MAX;
const int SkillInfo::TargetType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SkillInfo_StatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_StatusType_descriptor_;
}
bool SkillInfo_StatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SkillInfo_StatusType SkillInfo::BEGIN;
const SkillInfo_StatusType SkillInfo::MOVE;
const SkillInfo_StatusType SkillInfo::HIT;
const SkillInfo_StatusType SkillInfo::IDLE;
const SkillInfo_StatusType SkillInfo::StatusType_MIN;
const SkillInfo_StatusType SkillInfo::StatusType_MAX;
const int SkillInfo::StatusType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SkillInfo_AreaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_AreaType_descriptor_;
}
bool SkillInfo_AreaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SkillInfo_AreaType SkillInfo::ONE;
const SkillInfo_AreaType SkillInfo::SQUARE;
const SkillInfo_AreaType SkillInfo::LIST;
const SkillInfo_AreaType SkillInfo::AreaType_MIN;
const SkillInfo_AreaType SkillInfo::AreaType_MAX;
const int SkillInfo::AreaType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SkillInfo_ShockType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_ShockType_descriptor_;
}
bool SkillInfo_ShockType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SkillInfo_ShockType SkillInfo::NONE;
const SkillInfo_ShockType SkillInfo::PREPARE_OVER;
const SkillInfo_ShockType SkillInfo::ON_HIT;
const SkillInfo_ShockType SkillInfo::MOVETIME_OVER;
const SkillInfo_ShockType SkillInfo::ShockType_MIN;
const SkillInfo_ShockType SkillInfo::ShockType_MAX;
const int SkillInfo::ShockType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SkillInfo_OffsetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_OffsetType_descriptor_;
}
bool SkillInfo_OffsetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SkillInfo_OffsetType SkillInfo::NO_OFFSET;
const SkillInfo_OffsetType SkillInfo::FRONT;
const SkillInfo_OffsetType SkillInfo::OffsetType_MIN;
const SkillInfo_OffsetType SkillInfo::OffsetType_MAX;
const int SkillInfo::OffsetType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SkillInfo::kIdFieldNumber;
const int SkillInfo::kNameFieldNumber;
const int SkillInfo::kDescFieldNumber;
const int SkillInfo::kSkillTypeFieldNumber;
const int SkillInfo::kCdFieldNumber;
const int SkillInfo::kPrepareTimeFieldNumber;
const int SkillInfo::kHpFieldNumber;
const int SkillInfo::kMpFieldNumber;
const int SkillInfo::kGoldFieldNumber;
const int SkillInfo::kEnergyFieldNumber;
const int SkillInfo::kDistFieldNumber;
const int SkillInfo::kTargetTypeFieldNumber;
const int SkillInfo::kSpeedFieldNumber;
const int SkillInfo::kMoveTimeFieldNumber;
const int SkillInfo::kTrackTypeFieldNumber;
const int SkillInfo::kCanPenetrateFieldNumber;
const int SkillInfo::kRadiusFieldNumber;
const int SkillInfo::kDStatusIDFieldNumber;
const int SkillInfo::kFStatusIDFieldNumber;
const int SkillInfo::kAStatusIDFieldNumber;
const int SkillInfo::kUnitCountFieldNumber;
const int SkillInfo::kFireActionFieldNumber;
const int SkillInfo::kLaunchTypeFieldNumber;
const int SkillInfo::kHitTimeFieldNumber;
const int SkillInfo::kAreaTypeFieldNumber;
const int SkillInfo::kPrepareActionFieldNumber;
const int SkillInfo::kMoveActionFieldNumber;
const int SkillInfo::kHitActionFieldNumber;
const int SkillInfo::kMaxHitFieldNumber;
const int SkillInfo::kNextFieldNumber;
const int SkillInfo::kIntervalFieldNumber;
const int SkillInfo::kLevelFieldNumber;
const int SkillInfo::kMoveActionTimeFieldNumber;
const int SkillInfo::kPrepareActionTimeFieldNumber;
const int SkillInfo::kPictureFieldNumber;
const int SkillInfo::kRequireLevelFieldNumber;
const int SkillInfo::kIsBeginFollowedFieldNumber;
const int SkillInfo::kIsHitFollowedFieldNumber;
const int SkillInfo::kRaiseHitFieldNumber;
const int SkillInfo::kFireActionTimeFieldNumber;
const int SkillInfo::kBeginAudioFieldNumber;
const int SkillInfo::kHitAudioFieldNumber;
const int SkillInfo::kIsMoveFollowedFieldNumber;
const int SkillInfo::kShockTypeFieldNumber;
const int SkillInfo::kHitNumsFieldNumber;
const int SkillInfo::kAOffsetTypeFieldNumber;
const int SkillInfo::kDOffsetTypeFieldNumber;
const int SkillInfo::kOffsetTimeFieldNumber;
const int SkillInfo::kOffsetDistFieldNumber;
const int SkillInfo::kOffsetDelayFieldNumber;
const int SkillInfo::kGoodsFieldNumber;
const int SkillInfo::kCountFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skillType_ = 0;
  cd_ = 0;
  prepareTime_ = 0;
  hp_ = 0;
  mp_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  energy_ = 0;
  dist_ = 0;
  targetType_ = 0;
  speed_ = 0;
  moveTime_ = 0;
  trackType_ = 0;
  canPenetrate_ = false;
  radius_ = 0;
  fStatusID_ = 0;
  aStatusID_ = 0;
  unitCount_ = 0;
  fireAction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  launchType_ = 0;
  hitTime_ = 0;
  areaType_ = 0;
  prepareAction_ = 0;
  moveAction_ = 0;
  hitAction_ = 0;
  maxHit_ = 0;
  next_ = 0;
  interval_ = 0;
  level_ = 0;
  moveActionTime_ = 0;
  prepareActionTime_ = 0;
  picture_ = 0;
  requireLevel_ = 0;
  isBeginFollowed_ = false;
  isHitFollowed_ = false;
  raiseHit_ = false;
  fireActionTime_ = 0;
  beginAudio_ = 0;
  hitAudio_ = 0;
  isMoveFollowed_ = false;
  shockType_ = 0;
  hitNums_ = 0;
  aOffsetType_ = 0;
  dOffsetType_ = 0;
  offsetTime_ = 0;
  offsetDist_ = 0;
  offsetDelay_ = 0;
  goods_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (fireAction_ != &::google::protobuf::internal::kEmptyString) {
    delete fireAction_;
  }
  if (this != default_instance_) {
  }
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillInfo_2eproto();  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    skillType_ = 0;
    cd_ = 0;
    prepareTime_ = 0;
    hp_ = 0;
    mp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gold_ = GOOGLE_LONGLONG(0);
    energy_ = 0;
    dist_ = 0;
    targetType_ = 0;
    speed_ = 0;
    moveTime_ = 0;
    trackType_ = 0;
    canPenetrate_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    radius_ = 0;
    fStatusID_ = 0;
    aStatusID_ = 0;
    unitCount_ = 0;
    if (has_fireAction()) {
      if (fireAction_ != &::google::protobuf::internal::kEmptyString) {
        fireAction_->clear();
      }
    }
    launchType_ = 0;
    hitTime_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    areaType_ = 0;
    prepareAction_ = 0;
    moveAction_ = 0;
    hitAction_ = 0;
    maxHit_ = 0;
    next_ = 0;
    interval_ = 0;
    level_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    moveActionTime_ = 0;
    prepareActionTime_ = 0;
    picture_ = 0;
    requireLevel_ = 0;
    isBeginFollowed_ = false;
    isHitFollowed_ = false;
    raiseHit_ = false;
    fireActionTime_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    beginAudio_ = 0;
    hitAudio_ = 0;
    isMoveFollowed_ = false;
    shockType_ = 0;
    hitNums_ = 0;
    aOffsetType_ = 0;
    dOffsetType_ = 0;
    offsetTime_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    offsetDist_ = 0;
    offsetDelay_ = 0;
    goods_ = 0;
    count_ = 0;
  }
  dStatusID_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }
      
      // optional string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillType;
        break;
      }
      
      // optional .SkillInfo.SkillType skillType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SkillInfo_SkillType_IsValid(value)) {
            set_skillType(static_cast< ::SkillInfo_SkillType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cd;
        break;
      }
      
      // optional int32 cd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prepareTime;
        break;
      }
      
      // optional int32 prepareTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prepareTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prepareTime_)));
          set_has_prepareTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mp;
        break;
      }
      
      // optional int32 mp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gold;
        break;
      }
      
      // optional int64 gold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_energy;
        break;
      }
      
      // optional int32 energy = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dist;
        break;
      }
      
      // optional int32 dist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dist_)));
          set_has_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_targetType;
        break;
      }
      
      // optional int32 targetType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetType_)));
          set_has_targetType();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_speed;
        break;
      }
      
      // optional int32 speed = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_moveTime;
        break;
      }
      
      // optional int32 moveTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveTime_)));
          set_has_moveTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_trackType;
        break;
      }
      
      // optional .SkillInfo.TrackType trackType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trackType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SkillInfo_TrackType_IsValid(value)) {
            set_trackType(static_cast< ::SkillInfo_TrackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_canPenetrate;
        break;
      }
      
      // optional bool canPenetrate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canPenetrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canPenetrate_)));
          set_has_canPenetrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_radius;
        break;
      }
      
      // optional int32 radius = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_dStatusID;
        break;
      }
      
      // repeated int32 dStatusID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dStatusID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_dStatusID())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dStatusID())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_dStatusID;
        if (input->ExpectTag(152)) goto parse_fStatusID;
        break;
      }
      
      // optional int32 fStatusID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fStatusID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fStatusID_)));
          set_has_fStatusID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_aStatusID;
        break;
      }
      
      // optional int32 aStatusID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aStatusID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aStatusID_)));
          set_has_aStatusID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_unitCount;
        break;
      }
      
      // optional int32 unitCount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitCount_)));
          set_has_unitCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_fireAction;
        break;
      }
      
      // optional string fireAction = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fireAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fireAction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fireAction().data(), this->fireAction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_launchType;
        break;
      }
      
      // optional .SkillInfo.LaunchType launchType = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_launchType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SkillInfo_LaunchType_IsValid(value)) {
            set_launchType(static_cast< ::SkillInfo_LaunchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_hitTime;
        break;
      }
      
      // optional int32 hitTime = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitTime_)));
          set_has_hitTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_areaType;
        break;
      }
      
      // optional .SkillInfo.AreaType areaType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SkillInfo_AreaType_IsValid(value)) {
            set_areaType(static_cast< ::SkillInfo_AreaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_prepareAction;
        break;
      }
      
      // optional int32 prepareAction = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prepareAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prepareAction_)));
          set_has_prepareAction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_moveAction;
        break;
      }
      
      // optional int32 moveAction = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveAction_)));
          set_has_moveAction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_hitAction;
        break;
      }
      
      // optional int32 hitAction = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitAction_)));
          set_has_hitAction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_maxHit;
        break;
      }
      
      // optional int32 maxHit = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxHit_)));
          set_has_maxHit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_next;
        break;
      }
      
      // optional int32 next = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_)));
          set_has_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_interval;
        break;
      }
      
      // optional int32 interval = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_level;
        break;
      }
      
      // optional int32 level = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_moveActionTime;
        break;
      }
      
      // optional int32 moveActionTime = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveActionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveActionTime_)));
          set_has_moveActionTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_prepareActionTime;
        break;
      }
      
      // optional int32 prepareActionTime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prepareActionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prepareActionTime_)));
          set_has_prepareActionTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_picture;
        break;
      }
      
      // optional int32 picture = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_)));
          set_has_picture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_requireLevel;
        break;
      }
      
      // optional int32 requireLevel = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requireLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requireLevel_)));
          set_has_requireLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_isBeginFollowed;
        break;
      }
      
      // optional bool isBeginFollowed = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBeginFollowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isBeginFollowed_)));
          set_has_isBeginFollowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_isHitFollowed;
        break;
      }
      
      // optional bool isHitFollowed = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHitFollowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isHitFollowed_)));
          set_has_isHitFollowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_raiseHit;
        break;
      }
      
      // optional bool raiseHit = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raiseHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &raiseHit_)));
          set_has_raiseHit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_fireActionTime;
        break;
      }
      
      // optional int32 fireActionTime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fireActionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fireActionTime_)));
          set_has_fireActionTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_beginAudio;
        break;
      }
      
      // optional int32 beginAudio = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beginAudio_)));
          set_has_beginAudio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_hitAudio;
        break;
      }
      
      // optional int32 hitAudio = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitAudio_)));
          set_has_hitAudio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_isMoveFollowed;
        break;
      }
      
      // optional bool isMoveFollowed = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMoveFollowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isMoveFollowed_)));
          set_has_isMoveFollowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_shockType;
        break;
      }
      
      // optional .SkillInfo.ShockType shockType = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shockType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SkillInfo_ShockType_IsValid(value)) {
            set_shockType(static_cast< ::SkillInfo_ShockType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(44, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_hitNums;
        break;
      }
      
      // optional int32 hitNums = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitNums_)));
          set_has_hitNums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_aOffsetType;
        break;
      }
      
      // optional .SkillInfo.OffsetType aOffsetType = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aOffsetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SkillInfo_OffsetType_IsValid(value)) {
            set_aOffsetType(static_cast< ::SkillInfo_OffsetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(46, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_dOffsetType;
        break;
      }
      
      // optional .SkillInfo.OffsetType dOffsetType = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dOffsetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SkillInfo_OffsetType_IsValid(value)) {
            set_dOffsetType(static_cast< ::SkillInfo_OffsetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(47, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_offsetTime;
        break;
      }
      
      // optional int32 offsetTime = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offsetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offsetTime_)));
          set_has_offsetTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(397)) goto parse_offsetDist;
        break;
      }
      
      // optional float offsetDist = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetDist_)));
          set_has_offsetDist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_offsetDelay;
        break;
      }
      
      // optional int32 offsetDelay = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offsetDelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offsetDelay_)));
          set_has_offsetDelay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_goods;
        break;
      }
      
      // optional int32 goods = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_)));
          set_has_goods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_count;
        break;
      }
      
      // optional int32 count = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }
  
  // optional .SkillInfo.SkillType skillType = 4;
  if (has_skillType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->skillType(), output);
  }
  
  // optional int32 cd = 5;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cd(), output);
  }
  
  // optional int32 prepareTime = 6;
  if (has_prepareTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prepareTime(), output);
  }
  
  // optional int32 hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hp(), output);
  }
  
  // optional int32 mp = 8;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mp(), output);
  }
  
  // optional int64 gold = 9;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->gold(), output);
  }
  
  // optional int32 energy = 10;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->energy(), output);
  }
  
  // optional int32 dist = 11;
  if (has_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dist(), output);
  }
  
  // optional int32 targetType = 12;
  if (has_targetType()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->targetType(), output);
  }
  
  // optional int32 speed = 13;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->speed(), output);
  }
  
  // optional int32 moveTime = 14;
  if (has_moveTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->moveTime(), output);
  }
  
  // optional .SkillInfo.TrackType trackType = 15;
  if (has_trackType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->trackType(), output);
  }
  
  // optional bool canPenetrate = 16;
  if (has_canPenetrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->canPenetrate(), output);
  }
  
  // optional int32 radius = 17;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->radius(), output);
  }
  
  // repeated int32 dStatusID = 18;
  for (int i = 0; i < this->dStatusID_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->dStatusID(i), output);
  }
  
  // optional int32 fStatusID = 19;
  if (has_fStatusID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->fStatusID(), output);
  }
  
  // optional int32 aStatusID = 20;
  if (has_aStatusID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->aStatusID(), output);
  }
  
  // optional int32 unitCount = 21;
  if (has_unitCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->unitCount(), output);
  }
  
  // optional string fireAction = 22;
  if (has_fireAction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fireAction().data(), this->fireAction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->fireAction(), output);
  }
  
  // optional .SkillInfo.LaunchType launchType = 23;
  if (has_launchType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->launchType(), output);
  }
  
  // optional int32 hitTime = 24;
  if (has_hitTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->hitTime(), output);
  }
  
  // optional .SkillInfo.AreaType areaType = 25;
  if (has_areaType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->areaType(), output);
  }
  
  // optional int32 prepareAction = 26;
  if (has_prepareAction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->prepareAction(), output);
  }
  
  // optional int32 moveAction = 27;
  if (has_moveAction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->moveAction(), output);
  }
  
  // optional int32 hitAction = 28;
  if (has_hitAction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->hitAction(), output);
  }
  
  // optional int32 maxHit = 29;
  if (has_maxHit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->maxHit(), output);
  }
  
  // optional int32 next = 30;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->next(), output);
  }
  
  // optional int32 interval = 31;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->interval(), output);
  }
  
  // optional int32 level = 32;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->level(), output);
  }
  
  // optional int32 moveActionTime = 33;
  if (has_moveActionTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->moveActionTime(), output);
  }
  
  // optional int32 prepareActionTime = 34;
  if (has_prepareActionTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->prepareActionTime(), output);
  }
  
  // optional int32 picture = 35;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->picture(), output);
  }
  
  // optional int32 requireLevel = 36;
  if (has_requireLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->requireLevel(), output);
  }
  
  // optional bool isBeginFollowed = 37;
  if (has_isBeginFollowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->isBeginFollowed(), output);
  }
  
  // optional bool isHitFollowed = 38;
  if (has_isHitFollowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->isHitFollowed(), output);
  }
  
  // optional bool raiseHit = 39;
  if (has_raiseHit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->raiseHit(), output);
  }
  
  // optional int32 fireActionTime = 40;
  if (has_fireActionTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->fireActionTime(), output);
  }
  
  // optional int32 beginAudio = 41;
  if (has_beginAudio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->beginAudio(), output);
  }
  
  // optional int32 hitAudio = 42;
  if (has_hitAudio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->hitAudio(), output);
  }
  
  // optional bool isMoveFollowed = 43;
  if (has_isMoveFollowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->isMoveFollowed(), output);
  }
  
  // optional .SkillInfo.ShockType shockType = 44;
  if (has_shockType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      44, this->shockType(), output);
  }
  
  // optional int32 hitNums = 45;
  if (has_hitNums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->hitNums(), output);
  }
  
  // optional .SkillInfo.OffsetType aOffsetType = 46;
  if (has_aOffsetType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      46, this->aOffsetType(), output);
  }
  
  // optional .SkillInfo.OffsetType dOffsetType = 47;
  if (has_dOffsetType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      47, this->dOffsetType(), output);
  }
  
  // optional int32 offsetTime = 48;
  if (has_offsetTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->offsetTime(), output);
  }
  
  // optional float offsetDist = 49;
  if (has_offsetDist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->offsetDist(), output);
  }
  
  // optional int32 offsetDelay = 50;
  if (has_offsetDelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->offsetDelay(), output);
  }
  
  // optional int32 goods = 51;
  if (has_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->goods(), output);
  }
  
  // optional int32 count = 52;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }
  
  // optional .SkillInfo.SkillType skillType = 4;
  if (has_skillType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->skillType(), target);
  }
  
  // optional int32 cd = 5;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cd(), target);
  }
  
  // optional int32 prepareTime = 6;
  if (has_prepareTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->prepareTime(), target);
  }
  
  // optional int32 hp = 7;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hp(), target);
  }
  
  // optional int32 mp = 8;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mp(), target);
  }
  
  // optional int64 gold = 9;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->gold(), target);
  }
  
  // optional int32 energy = 10;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->energy(), target);
  }
  
  // optional int32 dist = 11;
  if (has_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dist(), target);
  }
  
  // optional int32 targetType = 12;
  if (has_targetType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->targetType(), target);
  }
  
  // optional int32 speed = 13;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->speed(), target);
  }
  
  // optional int32 moveTime = 14;
  if (has_moveTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->moveTime(), target);
  }
  
  // optional .SkillInfo.TrackType trackType = 15;
  if (has_trackType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->trackType(), target);
  }
  
  // optional bool canPenetrate = 16;
  if (has_canPenetrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->canPenetrate(), target);
  }
  
  // optional int32 radius = 17;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->radius(), target);
  }
  
  // repeated int32 dStatusID = 18;
  for (int i = 0; i < this->dStatusID_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->dStatusID(i), target);
  }
  
  // optional int32 fStatusID = 19;
  if (has_fStatusID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->fStatusID(), target);
  }
  
  // optional int32 aStatusID = 20;
  if (has_aStatusID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->aStatusID(), target);
  }
  
  // optional int32 unitCount = 21;
  if (has_unitCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->unitCount(), target);
  }
  
  // optional string fireAction = 22;
  if (has_fireAction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fireAction().data(), this->fireAction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->fireAction(), target);
  }
  
  // optional .SkillInfo.LaunchType launchType = 23;
  if (has_launchType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->launchType(), target);
  }
  
  // optional int32 hitTime = 24;
  if (has_hitTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->hitTime(), target);
  }
  
  // optional .SkillInfo.AreaType areaType = 25;
  if (has_areaType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->areaType(), target);
  }
  
  // optional int32 prepareAction = 26;
  if (has_prepareAction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->prepareAction(), target);
  }
  
  // optional int32 moveAction = 27;
  if (has_moveAction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->moveAction(), target);
  }
  
  // optional int32 hitAction = 28;
  if (has_hitAction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->hitAction(), target);
  }
  
  // optional int32 maxHit = 29;
  if (has_maxHit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->maxHit(), target);
  }
  
  // optional int32 next = 30;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->next(), target);
  }
  
  // optional int32 interval = 31;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->interval(), target);
  }
  
  // optional int32 level = 32;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->level(), target);
  }
  
  // optional int32 moveActionTime = 33;
  if (has_moveActionTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->moveActionTime(), target);
  }
  
  // optional int32 prepareActionTime = 34;
  if (has_prepareActionTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->prepareActionTime(), target);
  }
  
  // optional int32 picture = 35;
  if (has_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->picture(), target);
  }
  
  // optional int32 requireLevel = 36;
  if (has_requireLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->requireLevel(), target);
  }
  
  // optional bool isBeginFollowed = 37;
  if (has_isBeginFollowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->isBeginFollowed(), target);
  }
  
  // optional bool isHitFollowed = 38;
  if (has_isHitFollowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->isHitFollowed(), target);
  }
  
  // optional bool raiseHit = 39;
  if (has_raiseHit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->raiseHit(), target);
  }
  
  // optional int32 fireActionTime = 40;
  if (has_fireActionTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->fireActionTime(), target);
  }
  
  // optional int32 beginAudio = 41;
  if (has_beginAudio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->beginAudio(), target);
  }
  
  // optional int32 hitAudio = 42;
  if (has_hitAudio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->hitAudio(), target);
  }
  
  // optional bool isMoveFollowed = 43;
  if (has_isMoveFollowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->isMoveFollowed(), target);
  }
  
  // optional .SkillInfo.ShockType shockType = 44;
  if (has_shockType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      44, this->shockType(), target);
  }
  
  // optional int32 hitNums = 45;
  if (has_hitNums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->hitNums(), target);
  }
  
  // optional .SkillInfo.OffsetType aOffsetType = 46;
  if (has_aOffsetType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      46, this->aOffsetType(), target);
  }
  
  // optional .SkillInfo.OffsetType dOffsetType = 47;
  if (has_dOffsetType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      47, this->dOffsetType(), target);
  }
  
  // optional int32 offsetTime = 48;
  if (has_offsetTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->offsetTime(), target);
  }
  
  // optional float offsetDist = 49;
  if (has_offsetDist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(49, this->offsetDist(), target);
  }
  
  // optional int32 offsetDelay = 50;
  if (has_offsetDelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->offsetDelay(), target);
  }
  
  // optional int32 goods = 51;
  if (has_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->goods(), target);
  }
  
  // optional int32 count = 52;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional .SkillInfo.SkillType skillType = 4;
    if (has_skillType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->skillType());
    }
    
    // optional int32 cd = 5;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }
    
    // optional int32 prepareTime = 6;
    if (has_prepareTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prepareTime());
    }
    
    // optional int32 hp = 7;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 mp = 8;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 gold = 9;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // optional int32 energy = 10;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int32 dist = 11;
    if (has_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dist());
    }
    
    // optional int32 targetType = 12;
    if (has_targetType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetType());
    }
    
    // optional int32 speed = 13;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }
    
    // optional int32 moveTime = 14;
    if (has_moveTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveTime());
    }
    
    // optional .SkillInfo.TrackType trackType = 15;
    if (has_trackType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trackType());
    }
    
    // optional bool canPenetrate = 16;
    if (has_canPenetrate()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 radius = 17;
    if (has_radius()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }
    
    // optional int32 fStatusID = 19;
    if (has_fStatusID()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fStatusID());
    }
    
    // optional int32 aStatusID = 20;
    if (has_aStatusID()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aStatusID());
    }
    
    // optional int32 unitCount = 21;
    if (has_unitCount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitCount());
    }
    
    // optional string fireAction = 22;
    if (has_fireAction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fireAction());
    }
    
    // optional .SkillInfo.LaunchType launchType = 23;
    if (has_launchType()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->launchType());
    }
    
    // optional int32 hitTime = 24;
    if (has_hitTime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitTime());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .SkillInfo.AreaType areaType = 25;
    if (has_areaType()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->areaType());
    }
    
    // optional int32 prepareAction = 26;
    if (has_prepareAction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prepareAction());
    }
    
    // optional int32 moveAction = 27;
    if (has_moveAction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveAction());
    }
    
    // optional int32 hitAction = 28;
    if (has_hitAction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitAction());
    }
    
    // optional int32 maxHit = 29;
    if (has_maxHit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxHit());
    }
    
    // optional int32 next = 30;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next());
    }
    
    // optional int32 interval = 31;
    if (has_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }
    
    // optional int32 level = 32;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 moveActionTime = 33;
    if (has_moveActionTime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveActionTime());
    }
    
    // optional int32 prepareActionTime = 34;
    if (has_prepareActionTime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prepareActionTime());
    }
    
    // optional int32 picture = 35;
    if (has_picture()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->picture());
    }
    
    // optional int32 requireLevel = 36;
    if (has_requireLevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requireLevel());
    }
    
    // optional bool isBeginFollowed = 37;
    if (has_isBeginFollowed()) {
      total_size += 2 + 1;
    }
    
    // optional bool isHitFollowed = 38;
    if (has_isHitFollowed()) {
      total_size += 2 + 1;
    }
    
    // optional bool raiseHit = 39;
    if (has_raiseHit()) {
      total_size += 2 + 1;
    }
    
    // optional int32 fireActionTime = 40;
    if (has_fireActionTime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fireActionTime());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 beginAudio = 41;
    if (has_beginAudio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beginAudio());
    }
    
    // optional int32 hitAudio = 42;
    if (has_hitAudio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitAudio());
    }
    
    // optional bool isMoveFollowed = 43;
    if (has_isMoveFollowed()) {
      total_size += 2 + 1;
    }
    
    // optional .SkillInfo.ShockType shockType = 44;
    if (has_shockType()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shockType());
    }
    
    // optional int32 hitNums = 45;
    if (has_hitNums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitNums());
    }
    
    // optional .SkillInfo.OffsetType aOffsetType = 46;
    if (has_aOffsetType()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aOffsetType());
    }
    
    // optional .SkillInfo.OffsetType dOffsetType = 47;
    if (has_dOffsetType()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dOffsetType());
    }
    
    // optional int32 offsetTime = 48;
    if (has_offsetTime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offsetTime());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional float offsetDist = 49;
    if (has_offsetDist()) {
      total_size += 2 + 4;
    }
    
    // optional int32 offsetDelay = 50;
    if (has_offsetDelay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offsetDelay());
    }
    
    // optional int32 goods = 51;
    if (has_goods()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods());
    }
    
    // optional int32 count = 52;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  // repeated int32 dStatusID = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->dStatusID_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dStatusID(i));
    }
    total_size += 2 * this->dStatusID_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dStatusID_.MergeFrom(from.dStatusID_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_skillType()) {
      set_skillType(from.skillType());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_prepareTime()) {
      set_prepareTime(from.prepareTime());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_dist()) {
      set_dist(from.dist());
    }
    if (from.has_targetType()) {
      set_targetType(from.targetType());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_moveTime()) {
      set_moveTime(from.moveTime());
    }
    if (from.has_trackType()) {
      set_trackType(from.trackType());
    }
    if (from.has_canPenetrate()) {
      set_canPenetrate(from.canPenetrate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_fStatusID()) {
      set_fStatusID(from.fStatusID());
    }
    if (from.has_aStatusID()) {
      set_aStatusID(from.aStatusID());
    }
    if (from.has_unitCount()) {
      set_unitCount(from.unitCount());
    }
    if (from.has_fireAction()) {
      set_fireAction(from.fireAction());
    }
    if (from.has_launchType()) {
      set_launchType(from.launchType());
    }
    if (from.has_hitTime()) {
      set_hitTime(from.hitTime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_areaType()) {
      set_areaType(from.areaType());
    }
    if (from.has_prepareAction()) {
      set_prepareAction(from.prepareAction());
    }
    if (from.has_moveAction()) {
      set_moveAction(from.moveAction());
    }
    if (from.has_hitAction()) {
      set_hitAction(from.hitAction());
    }
    if (from.has_maxHit()) {
      set_maxHit(from.maxHit());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_moveActionTime()) {
      set_moveActionTime(from.moveActionTime());
    }
    if (from.has_prepareActionTime()) {
      set_prepareActionTime(from.prepareActionTime());
    }
    if (from.has_picture()) {
      set_picture(from.picture());
    }
    if (from.has_requireLevel()) {
      set_requireLevel(from.requireLevel());
    }
    if (from.has_isBeginFollowed()) {
      set_isBeginFollowed(from.isBeginFollowed());
    }
    if (from.has_isHitFollowed()) {
      set_isHitFollowed(from.isHitFollowed());
    }
    if (from.has_raiseHit()) {
      set_raiseHit(from.raiseHit());
    }
    if (from.has_fireActionTime()) {
      set_fireActionTime(from.fireActionTime());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_beginAudio()) {
      set_beginAudio(from.beginAudio());
    }
    if (from.has_hitAudio()) {
      set_hitAudio(from.hitAudio());
    }
    if (from.has_isMoveFollowed()) {
      set_isMoveFollowed(from.isMoveFollowed());
    }
    if (from.has_shockType()) {
      set_shockType(from.shockType());
    }
    if (from.has_hitNums()) {
      set_hitNums(from.hitNums());
    }
    if (from.has_aOffsetType()) {
      set_aOffsetType(from.aOffsetType());
    }
    if (from.has_dOffsetType()) {
      set_dOffsetType(from.dOffsetType());
    }
    if (from.has_offsetTime()) {
      set_offsetTime(from.offsetTime());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_offsetDist()) {
      set_offsetDist(from.offsetDist());
    }
    if (from.has_offsetDelay()) {
      set_offsetDelay(from.offsetDelay());
    }
    if (from.has_goods()) {
      set_goods(from.goods());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {
  
  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(skillType_, other->skillType_);
    std::swap(cd_, other->cd_);
    std::swap(prepareTime_, other->prepareTime_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(gold_, other->gold_);
    std::swap(energy_, other->energy_);
    std::swap(dist_, other->dist_);
    std::swap(targetType_, other->targetType_);
    std::swap(speed_, other->speed_);
    std::swap(moveTime_, other->moveTime_);
    std::swap(trackType_, other->trackType_);
    std::swap(canPenetrate_, other->canPenetrate_);
    std::swap(radius_, other->radius_);
    dStatusID_.Swap(&other->dStatusID_);
    std::swap(fStatusID_, other->fStatusID_);
    std::swap(aStatusID_, other->aStatusID_);
    std::swap(unitCount_, other->unitCount_);
    std::swap(fireAction_, other->fireAction_);
    std::swap(launchType_, other->launchType_);
    std::swap(hitTime_, other->hitTime_);
    std::swap(areaType_, other->areaType_);
    std::swap(prepareAction_, other->prepareAction_);
    std::swap(moveAction_, other->moveAction_);
    std::swap(hitAction_, other->hitAction_);
    std::swap(maxHit_, other->maxHit_);
    std::swap(next_, other->next_);
    std::swap(interval_, other->interval_);
    std::swap(level_, other->level_);
    std::swap(moveActionTime_, other->moveActionTime_);
    std::swap(prepareActionTime_, other->prepareActionTime_);
    std::swap(picture_, other->picture_);
    std::swap(requireLevel_, other->requireLevel_);
    std::swap(isBeginFollowed_, other->isBeginFollowed_);
    std::swap(isHitFollowed_, other->isHitFollowed_);
    std::swap(raiseHit_, other->raiseHit_);
    std::swap(fireActionTime_, other->fireActionTime_);
    std::swap(beginAudio_, other->beginAudio_);
    std::swap(hitAudio_, other->hitAudio_);
    std::swap(isMoveFollowed_, other->isMoveFollowed_);
    std::swap(shockType_, other->shockType_);
    std::swap(hitNums_, other->hitNums_);
    std::swap(aOffsetType_, other->aOffsetType_);
    std::swap(dOffsetType_, other->dOffsetType_);
    std::swap(offsetTime_, other->offsetTime_);
    std::swap(offsetDist_, other->offsetDist_);
    std::swap(offsetDelay_, other->offsetDelay_);
    std::swap(goods_, other->goods_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillFamily::kSkillsFieldNumber;
#endif  // !_MSC_VER

SkillFamily::SkillFamily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillFamily::InitAsDefaultInstance() {
}

SkillFamily::SkillFamily(const SkillFamily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillFamily::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillFamily::~SkillFamily() {
  SharedDtor();
}

void SkillFamily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillFamily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillFamily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillFamily_descriptor_;
}

const SkillFamily& SkillFamily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillInfo_2eproto();  return *default_instance_;
}

SkillFamily* SkillFamily::default_instance_ = NULL;

SkillFamily* SkillFamily::New() const {
  return new SkillFamily;
}

void SkillFamily::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillFamily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkillInfo skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillFamily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SkillInfo skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillFamily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SkillInfo skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillFamily::ByteSize() const {
  int total_size = 0;
  
  // repeated .SkillInfo skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillFamily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillFamily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillFamily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillFamily::MergeFrom(const SkillFamily& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillFamily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillFamily::CopyFrom(const SkillFamily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillFamily::IsInitialized() const {
  
  return true;
}

void SkillFamily::Swap(SkillFamily* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillFamily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillFamily_descriptor_;
  metadata.reflection = SkillFamily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllSkills::kSkillsFieldNumber;
#endif  // !_MSC_VER

AllSkills::AllSkills()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllSkills::InitAsDefaultInstance() {
}

AllSkills::AllSkills(const AllSkills& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllSkills::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllSkills::~AllSkills() {
  SharedDtor();
}

void AllSkills::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllSkills::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllSkills::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllSkills_descriptor_;
}

const AllSkills& AllSkills::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillInfo_2eproto();  return *default_instance_;
}

AllSkills* AllSkills::default_instance_ = NULL;

AllSkills* AllSkills::New() const {
  return new AllSkills;
}

void AllSkills::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllSkills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkillFamily skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllSkills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SkillFamily skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllSkills::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SkillFamily skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllSkills::ByteSize() const {
  int total_size = 0;
  
  // repeated .SkillFamily skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllSkills::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllSkills* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllSkills*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllSkills::MergeFrom(const AllSkills& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllSkills::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllSkills::CopyFrom(const AllSkills& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllSkills::IsInitialized() const {
  
  return true;
}

void AllSkills::Swap(AllSkills* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllSkills::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllSkills_descriptor_;
  metadata.reflection = AllSkills_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

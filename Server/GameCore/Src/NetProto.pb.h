// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetProto.proto

#ifndef PROTOBUF_NetProto_2eproto__INCLUDED
#define PROTOBUF_NetProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "PlayerInfo.pb.h"
#include "BaseInfo.pb.h"
#include "RoleAtt.pb.h"
#include "NPCAtt.pb.h"
#include "Math.pb.h"
#include "EquipmentInfo.pb.h"
#include "FightInfo.pb.h"
#include "StatusInfo.pb.h"
#include "ProfessionInfo.pb.h"
#include "ItemInfo.pb.h"
#include "FuncInfo.pb.h"
#include "MissionInfo.pb.h"
#include "BloodInfo.pb.h"
#include "PlayerAtt.pb.h"
#include "Award.pb.h"
#include "MailInfo.pb.h"
#include "Fashion.pb.h"
#include "BusinessInfo.pb.h"
#include "ItemBaseInfo.pb.h"
#include "RidesInfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NetProto_2eproto();
void protobuf_AssignDesc_NetProto_2eproto();
void protobuf_ShutdownFile_NetProto_2eproto();

class NetProto_ClientException;
class NetProto_Heartbeat;
class NetProto_Login;
class NetProto_LoginResult;
class NetProto_Logout;
class NetProto_SelectRole;
class NetProto_CreateRole;
class NetProto_ServerTime;
class NetProto_RoleList;
class NetProto_DeleteRole;
class NetProto_ReLogin;
class NetProto_ReLoginResult;
class NetProto_Rank;
class NetProto_SetUp;
class NetProto_Register;
class NetProto_GetKeyGift;
class NetProto_StatisticsUIBtn;
class NetProto_StatisticsGuide;
class NetProto_LoginLaterTime;
class NetProto_TencentBuyGoodsUrl;
class NetProto_LoginURL;
class NetProto_RechargeParam;
class NetProto_AddPlayers;
class NetProto_LoadScene;
class NetProto_DoLoadScene;
class NetProto_EndLoadScene;
class NetProto_AddNPCs;
class NetProto_ClearRoom;
class NetProto_OpenRoomBox;
class NetProto_BeginWaitRoom;
class NetProto_EndWaitRoom;
class NetProto_GenNPCs;
class NetProto_ResetEvent;
class NetProto_QuickFight;
class NetProto_Win;
class NetProto_Lose;
class NetProto_Timeout;
class NetProto_BeginWaitPVP;
class NetProto_EndWaitPVP;
class NetProto_Lottery;
class NetProto_GetGift;
class NetProto_SingleRecord;
class NetProto_EndLoadModel;
class NetProto_RoomWaitCount;
class NetProto_PVPWaitCount;
class NetProto_CancelWaitRoom;
class NetProto_CancelWaitPVP;
class NetProto_GetRes;
class NetProto_Invest;
class NetProto_InvestAward;
class NetProto_InvestAwardInfo;
class NetProto_SetDayEvent;
class NetProto_SetFixedEvent;
class NetProto_Info;
class NetProto_Error;
class NetProto_GodAward;
class NetProto_CreateRoom;
class NetProto_JoinRoom;
class NetProto_LeaveRoom;
class NetProto_DestroyRoom;
class NetProto_RoomList;
class NetProto_EvictRole;
class NetProto_InviteFriend;
class NetProto_BeginMultiRoom;
class NetProto_ResetCheckPoint;
class NetProto_GenPet;
class NetProto_OpenObstacle;
class NetProto_RegistDeviceServer;
class NetProto_StartLoad1;
class NetProto_EndLoad1;
class NetProto_StartLoad2;
class NetProto_EndLoad2;
class NetProto_BeginFighting;
class NetProto_DelNPCs;
class NetProto_WorldBossCurRank;
class NetProto_FactionWarCurRank;
class NetProto_FactionWarPrevWinner;
class NetProto_GetMonthCardAward;
class NetProto_ExchangeGoods;
class NetProto_BuyMonthCard;
class NetProto_UseLuckyCard;
class NetProto_BIActive;
class NetProto_Move;
class NetProto_Wear;
class NetProto_Unwear;
class NetProto_Attack;
class NetProto_DoAttack;
class NetProto_SetPos;
class NetProto_Die;
class NetProto_Revive;
class NetProto_ModifyExp;
class NetProto_PickItem;
class NetProto_LevelUp;
class NetProto_ModifyMoney;
class NetProto_GetItem;
class NetProto_QueryPlayer;
class NetProto_PlayerStatus;
class NetProto_AddFriend;
class NetProto_DelFriend;
class NetProto_ModifyHP;
class NetProto_ModifyMana;
class NetProto_ModifyFaction;
class NetProto_ModifyMaxHP;
class NetProto_RequestPK;
class NetProto_ApplyPK;
class NetProto_Strong;
class NetProto_ClearStrong;
class NetProto_Transform;
class NetProto_Mount;
class NetProto_TalkTo;
class NetProto_Recover;
class NetProto_AddBloodNode;
class NetProto_AddBloodEffect;
class NetProto_Explore;
class NetProto_UnlockBlood;
class NetProto_UpdatePos;
class NetProto_SayHello;
class NetProto_CompleteGuide;
class NetProto_Arrange;
class NetProto_IgnorePK;
class NetProto_ModifyRMB;
class NetProto_ModifySoulJade;
class NetProto_ModifySoul;
class NetProto_ModifyHonor;
class NetProto_ModifyDurability;
class NetProto_ModifySoulStone;
class NetProto_ModifyPKScore;
class NetProto_DelItem;
class NetProto_ModifyVIP;
class NetProto_RandomGodTarget;
class NetProto_Inspire;
class NetProto_RequestGodTarget;
class NetProto_ModifyGodScore;
class NetProto_GodRank;
class NetProto_GetFashion;
class NetProto_SyncAtt;
class NetProto_ModifySubRMB;
class NetProto_GenEquip;
class NetProto_GenGem;
class NetProto_UnlockHole;
class NetProto_UnmountGem;
class NetProto_EnhanceDelta;
class NetProto_Enhance;
class NetProto_Inherit;
class NetProto_StrongBaseWing;
class NetProto_BuyWing;
class NetProto_WearWing;
class NetProto_GetWing;
class NetProto_BuyFashion;
class NetProto_MakeFashionHole;
class NetProto_FashionInlay;
class NetProto_FashionUnInlay;
class NetProto_ServerLimitItem;
class NetProto_FriendsLove;
class NetProto_ChangePartner;
class NetProto_AddFansLove;
class NetProto_ModifyLovePoint;
class NetProto_BuyDurability;
class NetProto_LoginObtRMB;
class NetProto_UnwearWing;
class NetProto_GetEquip;
class NetProto_ResetCount;
class NetProto_GodPlayer;
class NetProto_GodRandomPlayer;
class NetProto_GodRecords;
class NetProto_GodPanel;
class NetProto_SelectGodRole;
class NetProto_SetSpecial;
class NetProto_ResolveEquips;
class NetProto_ModifyPKScoreActive;
class NetProto_ModifyRMBActive;
class NetProto_DropItem;
class NetProto_SellGoods;
class NetProto_Luck;
class NetProto_GrabRedEnvelope;
class NetProto_CatGift;
class NetProto_GroupPurchase;
class NetProto_Rides;
class NetProto_RidesTrain;
class NetProto_GenRides;
class NetProto_GodShip;
class NetProto_Swallow;
class NetProto_GodPackage;
class NetProto_WearGodShip;
class NetProto_UnWearGodShip;
class NetProto_ArrangeGodShip;
class NetProto_RidesUP;
class NetProto_RidesInherit;
class NetProto_SingleGodShip;
class NetProto_RidesLockAtt;
class NetProto_RidesConfirmTrain;
class NetProto_RidesUnLockAtt;
class NetProto_AddStatus;
class NetProto_Hit;
class NetProto_StatusEffect;
class NetProto_StaticOver;
class NetProto_Standup;
class NetProto_SkillLevelUp;
class NetProto_ClearSkill;
class NetProto_DestroySkill;
class NetProto_AddGoods;
class NetProto_AddEquipments;
class NetProto_ShiftItem;
class NetProto_QueryItemInfo;
class NetProto_BuyItem;
class NetProto_SellItem;
class NetProto_Repair;
class NetProto_UseGoods;
class NetProto_UnlockPackage;
class NetProto_RecoverDurability;
class NetProto_AddDesignation;
class NetProto_DelDesignation;
class NetProto_ShowDesignation;
class NetProto_UnshowDesignation;
class NetProto_Recharge;
class NetProto_BusinessInfo;
class NetProto_TransformWar;
class NetProto_TransformLevelUp;
class NetProto_TransformActive;
class NetProto_Reservation;
class NetProto_OneReservation;
class NetProto_ReservationList;
class NetProto_Talk;
class NetProto_Answer;
class NetProto_RequestFunc;
class NetProto_ReplyFunc;
class NetProto_ApplyMission;
class NetProto_CompleteMission;
class NetProto_GiveUpMission;
class NetProto_Chat;
class NetProto_Message;
class NetProto_SendMail;
class NetProto_GetMailItem;
class NetProto_ReadMail;
class NetProto_DelMail;
class NetProto_GMLogin;
class NetProto_GMOrder;
class NetProto_GMOnlinePlayers;
class NetProto_GMChat;
class NetProto_GMServerMgr;
class NetProto_GMPlayerQuery;
class NetProto_GMForbid;
class NetProto_GMNotice;
class NetProto_GMRequest;
class NetProto_GMShutDownServer;
class NetProto_GMChatRecords;
class NetProto_GMRegistrCount;
class NetProto_GMRoleCount;
class LevelStatistics;
class NetProto_GMLevelStatistics;
class NetProto_GMRankStatistics;
class NetProto_GMOpenGuide;
class NetProto_GMNoticeMgr;
class NetProto_GMRegister;
class NetProto_GMShutDownMessage;
class NetProto_GMOpenMessage;
class NetProto_GMModifyVIP;
class NetProto_GMAddExchange;
class NetProto_GMQueryFaction;
class NetProto_GMChangeFactionMem;
class NetProto_GMAddRekooRole;
class NetProto_GMLoginInfo;
class NetProto_ObtainPet;
class NetProto_PetFighting;
class NetProto_PetRest;
class NetProto_PetAttach;
class NetProto_PetLevelUp;
class NetProto_PetLearnSkill;
class NetProto_PetInherit;
class NetProto_PetAdvance;
class NetProto_PetPsychicsLevelUp;
class NetProto_ActiveGemRequest;
class NetProto_ActiveDoubleGem;
class NetProto_ActiveUpGradeGem;
class NetProto_ActiveGetGem;
class NetProto_ActiveFight;
class NetProto_ActiveStrongeSolider;
class NetProto_EnterPlayOff;
class NetProto_PlayOffInfo;
class NetProto_PreparePlayOff;
class NetProto_Treasure;
class NetProto_Hire;
class NetProto_MoneyTree;
class NetProto_TreasureBox;
class NetProto_FlyPlan;
class NetProto_BlessCome;
class NetProto_ModifyBlessScore;
class NetProto_TopUpObtRMB;
class NetProto_ServerOpenTime;
class NetProto_InvateCode;
class NetProto_UpdateInvateCount;
class NetProto_CreateFaction;
class NetProto_DelFaction;
class NetProto_Donate;
class NetProto_FactionNotice;
class NetProto_Designate;
class NetProto_AddMem;
class NetProto_DelMem;
class NetProto_Applicant;
class NetProto_Guardian;
class NetProto_FactionInfo;
class NetProto_FactionMem;
class NetProto_FactionChangeMem;
class NetProto_FactionGuardian;
class NetProto_FactionApplicant;
class NetProto_FactionAllApplicant;
class NetProto_FactionList;
class NetProto_AcceptToFaction;
class NetProto_AsyncStatistics;
class NetProto_StatisticsAGSLoadScene;
class NetProto_StatisticsAGSLoadNPC;

enum NetProto_ClientException_ID {
  NetProto_ClientException_ID_GROUPID = 0,
  NetProto_ClientException_ID_UNITID = 0
};
bool NetProto_ClientException_ID_IsValid(int value);
const NetProto_ClientException_ID NetProto_ClientException_ID_ID_MIN = NetProto_ClientException_ID_GROUPID;
const NetProto_ClientException_ID NetProto_ClientException_ID_ID_MAX = NetProto_ClientException_ID_GROUPID;
const int NetProto_ClientException_ID_ID_ARRAYSIZE = NetProto_ClientException_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ClientException_ID_descriptor();
inline const ::std::string& NetProto_ClientException_ID_Name(NetProto_ClientException_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ClientException_ID_descriptor(), value);
}
inline bool NetProto_ClientException_ID_Parse(
    const ::std::string& name, NetProto_ClientException_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ClientException_ID>(
    NetProto_ClientException_ID_descriptor(), name, value);
}
enum NetProto_Heartbeat_ID {
  NetProto_Heartbeat_ID_GROUPID = 1,
  NetProto_Heartbeat_ID_UNITID = 0
};
bool NetProto_Heartbeat_ID_IsValid(int value);
const NetProto_Heartbeat_ID NetProto_Heartbeat_ID_ID_MIN = NetProto_Heartbeat_ID_UNITID;
const NetProto_Heartbeat_ID NetProto_Heartbeat_ID_ID_MAX = NetProto_Heartbeat_ID_GROUPID;
const int NetProto_Heartbeat_ID_ID_ARRAYSIZE = NetProto_Heartbeat_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Heartbeat_ID_descriptor();
inline const ::std::string& NetProto_Heartbeat_ID_Name(NetProto_Heartbeat_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Heartbeat_ID_descriptor(), value);
}
inline bool NetProto_Heartbeat_ID_Parse(
    const ::std::string& name, NetProto_Heartbeat_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Heartbeat_ID>(
    NetProto_Heartbeat_ID_descriptor(), name, value);
}
enum NetProto_Login_ID {
  NetProto_Login_ID_GROUPID = 1,
  NetProto_Login_ID_UNITID = 1
};
bool NetProto_Login_ID_IsValid(int value);
const NetProto_Login_ID NetProto_Login_ID_ID_MIN = NetProto_Login_ID_GROUPID;
const NetProto_Login_ID NetProto_Login_ID_ID_MAX = NetProto_Login_ID_GROUPID;
const int NetProto_Login_ID_ID_ARRAYSIZE = NetProto_Login_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Login_ID_descriptor();
inline const ::std::string& NetProto_Login_ID_Name(NetProto_Login_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Login_ID_descriptor(), value);
}
inline bool NetProto_Login_ID_Parse(
    const ::std::string& name, NetProto_Login_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Login_ID>(
    NetProto_Login_ID_descriptor(), name, value);
}
enum NetProto_LoginResult_ID {
  NetProto_LoginResult_ID_GROUPID = 1,
  NetProto_LoginResult_ID_UNITID = 2
};
bool NetProto_LoginResult_ID_IsValid(int value);
const NetProto_LoginResult_ID NetProto_LoginResult_ID_ID_MIN = NetProto_LoginResult_ID_GROUPID;
const NetProto_LoginResult_ID NetProto_LoginResult_ID_ID_MAX = NetProto_LoginResult_ID_UNITID;
const int NetProto_LoginResult_ID_ID_ARRAYSIZE = NetProto_LoginResult_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_LoginResult_ID_descriptor();
inline const ::std::string& NetProto_LoginResult_ID_Name(NetProto_LoginResult_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_LoginResult_ID_descriptor(), value);
}
inline bool NetProto_LoginResult_ID_Parse(
    const ::std::string& name, NetProto_LoginResult_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_LoginResult_ID>(
    NetProto_LoginResult_ID_descriptor(), name, value);
}
enum NetProto_Logout_ID {
  NetProto_Logout_ID_GROUPID = 1,
  NetProto_Logout_ID_UNITID = 3
};
bool NetProto_Logout_ID_IsValid(int value);
const NetProto_Logout_ID NetProto_Logout_ID_ID_MIN = NetProto_Logout_ID_GROUPID;
const NetProto_Logout_ID NetProto_Logout_ID_ID_MAX = NetProto_Logout_ID_UNITID;
const int NetProto_Logout_ID_ID_ARRAYSIZE = NetProto_Logout_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Logout_ID_descriptor();
inline const ::std::string& NetProto_Logout_ID_Name(NetProto_Logout_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Logout_ID_descriptor(), value);
}
inline bool NetProto_Logout_ID_Parse(
    const ::std::string& name, NetProto_Logout_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Logout_ID>(
    NetProto_Logout_ID_descriptor(), name, value);
}
enum NetProto_SelectRole_ID {
  NetProto_SelectRole_ID_GROUPID = 1,
  NetProto_SelectRole_ID_UNITID = 4
};
bool NetProto_SelectRole_ID_IsValid(int value);
const NetProto_SelectRole_ID NetProto_SelectRole_ID_ID_MIN = NetProto_SelectRole_ID_GROUPID;
const NetProto_SelectRole_ID NetProto_SelectRole_ID_ID_MAX = NetProto_SelectRole_ID_UNITID;
const int NetProto_SelectRole_ID_ID_ARRAYSIZE = NetProto_SelectRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SelectRole_ID_descriptor();
inline const ::std::string& NetProto_SelectRole_ID_Name(NetProto_SelectRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SelectRole_ID_descriptor(), value);
}
inline bool NetProto_SelectRole_ID_Parse(
    const ::std::string& name, NetProto_SelectRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SelectRole_ID>(
    NetProto_SelectRole_ID_descriptor(), name, value);
}
enum NetProto_CreateRole_ID {
  NetProto_CreateRole_ID_GROUPID = 1,
  NetProto_CreateRole_ID_UNITID = 5
};
bool NetProto_CreateRole_ID_IsValid(int value);
const NetProto_CreateRole_ID NetProto_CreateRole_ID_ID_MIN = NetProto_CreateRole_ID_GROUPID;
const NetProto_CreateRole_ID NetProto_CreateRole_ID_ID_MAX = NetProto_CreateRole_ID_UNITID;
const int NetProto_CreateRole_ID_ID_ARRAYSIZE = NetProto_CreateRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_CreateRole_ID_descriptor();
inline const ::std::string& NetProto_CreateRole_ID_Name(NetProto_CreateRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_CreateRole_ID_descriptor(), value);
}
inline bool NetProto_CreateRole_ID_Parse(
    const ::std::string& name, NetProto_CreateRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_CreateRole_ID>(
    NetProto_CreateRole_ID_descriptor(), name, value);
}
enum NetProto_ServerTime_ID {
  NetProto_ServerTime_ID_GROUPID = 1,
  NetProto_ServerTime_ID_UNITID = 6
};
bool NetProto_ServerTime_ID_IsValid(int value);
const NetProto_ServerTime_ID NetProto_ServerTime_ID_ID_MIN = NetProto_ServerTime_ID_GROUPID;
const NetProto_ServerTime_ID NetProto_ServerTime_ID_ID_MAX = NetProto_ServerTime_ID_UNITID;
const int NetProto_ServerTime_ID_ID_ARRAYSIZE = NetProto_ServerTime_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ServerTime_ID_descriptor();
inline const ::std::string& NetProto_ServerTime_ID_Name(NetProto_ServerTime_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ServerTime_ID_descriptor(), value);
}
inline bool NetProto_ServerTime_ID_Parse(
    const ::std::string& name, NetProto_ServerTime_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ServerTime_ID>(
    NetProto_ServerTime_ID_descriptor(), name, value);
}
enum NetProto_RoleList_ID {
  NetProto_RoleList_ID_GROUPID = 1,
  NetProto_RoleList_ID_UNITID = 7
};
bool NetProto_RoleList_ID_IsValid(int value);
const NetProto_RoleList_ID NetProto_RoleList_ID_ID_MIN = NetProto_RoleList_ID_GROUPID;
const NetProto_RoleList_ID NetProto_RoleList_ID_ID_MAX = NetProto_RoleList_ID_UNITID;
const int NetProto_RoleList_ID_ID_ARRAYSIZE = NetProto_RoleList_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RoleList_ID_descriptor();
inline const ::std::string& NetProto_RoleList_ID_Name(NetProto_RoleList_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RoleList_ID_descriptor(), value);
}
inline bool NetProto_RoleList_ID_Parse(
    const ::std::string& name, NetProto_RoleList_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RoleList_ID>(
    NetProto_RoleList_ID_descriptor(), name, value);
}
enum NetProto_DeleteRole_ID {
  NetProto_DeleteRole_ID_GROUPID = 1,
  NetProto_DeleteRole_ID_UNITID = 8
};
bool NetProto_DeleteRole_ID_IsValid(int value);
const NetProto_DeleteRole_ID NetProto_DeleteRole_ID_ID_MIN = NetProto_DeleteRole_ID_GROUPID;
const NetProto_DeleteRole_ID NetProto_DeleteRole_ID_ID_MAX = NetProto_DeleteRole_ID_UNITID;
const int NetProto_DeleteRole_ID_ID_ARRAYSIZE = NetProto_DeleteRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DeleteRole_ID_descriptor();
inline const ::std::string& NetProto_DeleteRole_ID_Name(NetProto_DeleteRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DeleteRole_ID_descriptor(), value);
}
inline bool NetProto_DeleteRole_ID_Parse(
    const ::std::string& name, NetProto_DeleteRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DeleteRole_ID>(
    NetProto_DeleteRole_ID_descriptor(), name, value);
}
enum NetProto_ReLogin_ID {
  NetProto_ReLogin_ID_GROUPID = 1,
  NetProto_ReLogin_ID_UNITID = 9
};
bool NetProto_ReLogin_ID_IsValid(int value);
const NetProto_ReLogin_ID NetProto_ReLogin_ID_ID_MIN = NetProto_ReLogin_ID_GROUPID;
const NetProto_ReLogin_ID NetProto_ReLogin_ID_ID_MAX = NetProto_ReLogin_ID_UNITID;
const int NetProto_ReLogin_ID_ID_ARRAYSIZE = NetProto_ReLogin_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ReLogin_ID_descriptor();
inline const ::std::string& NetProto_ReLogin_ID_Name(NetProto_ReLogin_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ReLogin_ID_descriptor(), value);
}
inline bool NetProto_ReLogin_ID_Parse(
    const ::std::string& name, NetProto_ReLogin_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ReLogin_ID>(
    NetProto_ReLogin_ID_descriptor(), name, value);
}
enum NetProto_ReLoginResult_ID {
  NetProto_ReLoginResult_ID_GROUPID = 1,
  NetProto_ReLoginResult_ID_UNITID = 10
};
bool NetProto_ReLoginResult_ID_IsValid(int value);
const NetProto_ReLoginResult_ID NetProto_ReLoginResult_ID_ID_MIN = NetProto_ReLoginResult_ID_GROUPID;
const NetProto_ReLoginResult_ID NetProto_ReLoginResult_ID_ID_MAX = NetProto_ReLoginResult_ID_UNITID;
const int NetProto_ReLoginResult_ID_ID_ARRAYSIZE = NetProto_ReLoginResult_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ReLoginResult_ID_descriptor();
inline const ::std::string& NetProto_ReLoginResult_ID_Name(NetProto_ReLoginResult_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ReLoginResult_ID_descriptor(), value);
}
inline bool NetProto_ReLoginResult_ID_Parse(
    const ::std::string& name, NetProto_ReLoginResult_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ReLoginResult_ID>(
    NetProto_ReLoginResult_ID_descriptor(), name, value);
}
enum NetProto_Rank_ID {
  NetProto_Rank_ID_GROUPID = 1,
  NetProto_Rank_ID_UNITID = 11
};
bool NetProto_Rank_ID_IsValid(int value);
const NetProto_Rank_ID NetProto_Rank_ID_ID_MIN = NetProto_Rank_ID_GROUPID;
const NetProto_Rank_ID NetProto_Rank_ID_ID_MAX = NetProto_Rank_ID_UNITID;
const int NetProto_Rank_ID_ID_ARRAYSIZE = NetProto_Rank_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Rank_ID_descriptor();
inline const ::std::string& NetProto_Rank_ID_Name(NetProto_Rank_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Rank_ID_descriptor(), value);
}
inline bool NetProto_Rank_ID_Parse(
    const ::std::string& name, NetProto_Rank_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Rank_ID>(
    NetProto_Rank_ID_descriptor(), name, value);
}
enum NetProto_Rank_Type {
  NetProto_Rank_Type_POWER = 1,
  NetProto_Rank_Type_TOWER = 2,
  NetProto_Rank_Type_LEVEL = 3,
  NetProto_Rank_Type_GOD = 6,
  NetProto_Rank_Type_WORLD_BOSS = 7,
  NetProto_Rank_Type_BLESSCOME = 8,
  NetProto_Rank_Type_FACTION = 9,
  NetProto_Rank_Type_PET = 10,
  NetProto_Rank_Type_DEVIL = 11,
  NetProto_Rank_Type_AWARD_FROM_SKY = 12,
  NetProto_Rank_Type_LUCK = 13,
  NetProto_Rank_Type_QIUBITE = 14,
  NetProto_Rank_Type_CONSUME = 15,
  NetProto_Rank_Type_CATGIFT = 16,
  NetProto_Rank_Type_GROUP_PURCHASE = 17,
  NetProto_Rank_Type_GROUPRECORD = 18,
  NetProto_Rank_Type_RESERVATION = 19
};
bool NetProto_Rank_Type_IsValid(int value);
const NetProto_Rank_Type NetProto_Rank_Type_Type_MIN = NetProto_Rank_Type_POWER;
const NetProto_Rank_Type NetProto_Rank_Type_Type_MAX = NetProto_Rank_Type_RESERVATION;
const int NetProto_Rank_Type_Type_ARRAYSIZE = NetProto_Rank_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Rank_Type_descriptor();
inline const ::std::string& NetProto_Rank_Type_Name(NetProto_Rank_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Rank_Type_descriptor(), value);
}
inline bool NetProto_Rank_Type_Parse(
    const ::std::string& name, NetProto_Rank_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Rank_Type>(
    NetProto_Rank_Type_descriptor(), name, value);
}
enum NetProto_SetUp_ID {
  NetProto_SetUp_ID_GROUPID = 1,
  NetProto_SetUp_ID_UNITID = 12
};
bool NetProto_SetUp_ID_IsValid(int value);
const NetProto_SetUp_ID NetProto_SetUp_ID_ID_MIN = NetProto_SetUp_ID_GROUPID;
const NetProto_SetUp_ID NetProto_SetUp_ID_ID_MAX = NetProto_SetUp_ID_UNITID;
const int NetProto_SetUp_ID_ID_ARRAYSIZE = NetProto_SetUp_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SetUp_ID_descriptor();
inline const ::std::string& NetProto_SetUp_ID_Name(NetProto_SetUp_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SetUp_ID_descriptor(), value);
}
inline bool NetProto_SetUp_ID_Parse(
    const ::std::string& name, NetProto_SetUp_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SetUp_ID>(
    NetProto_SetUp_ID_descriptor(), name, value);
}
enum NetProto_Register_ID {
  NetProto_Register_ID_GROUPID = 1,
  NetProto_Register_ID_UNITID = 13
};
bool NetProto_Register_ID_IsValid(int value);
const NetProto_Register_ID NetProto_Register_ID_ID_MIN = NetProto_Register_ID_GROUPID;
const NetProto_Register_ID NetProto_Register_ID_ID_MAX = NetProto_Register_ID_UNITID;
const int NetProto_Register_ID_ID_ARRAYSIZE = NetProto_Register_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Register_ID_descriptor();
inline const ::std::string& NetProto_Register_ID_Name(NetProto_Register_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Register_ID_descriptor(), value);
}
inline bool NetProto_Register_ID_Parse(
    const ::std::string& name, NetProto_Register_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Register_ID>(
    NetProto_Register_ID_descriptor(), name, value);
}
enum NetProto_GetKeyGift_ID {
  NetProto_GetKeyGift_ID_GROUPID = 1,
  NetProto_GetKeyGift_ID_UNITID = 14
};
bool NetProto_GetKeyGift_ID_IsValid(int value);
const NetProto_GetKeyGift_ID NetProto_GetKeyGift_ID_ID_MIN = NetProto_GetKeyGift_ID_GROUPID;
const NetProto_GetKeyGift_ID NetProto_GetKeyGift_ID_ID_MAX = NetProto_GetKeyGift_ID_UNITID;
const int NetProto_GetKeyGift_ID_ID_ARRAYSIZE = NetProto_GetKeyGift_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GetKeyGift_ID_descriptor();
inline const ::std::string& NetProto_GetKeyGift_ID_Name(NetProto_GetKeyGift_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GetKeyGift_ID_descriptor(), value);
}
inline bool NetProto_GetKeyGift_ID_Parse(
    const ::std::string& name, NetProto_GetKeyGift_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GetKeyGift_ID>(
    NetProto_GetKeyGift_ID_descriptor(), name, value);
}
enum NetProto_StatisticsUIBtn_ID {
  NetProto_StatisticsUIBtn_ID_GROUPID = 1,
  NetProto_StatisticsUIBtn_ID_UNITID = 15
};
bool NetProto_StatisticsUIBtn_ID_IsValid(int value);
const NetProto_StatisticsUIBtn_ID NetProto_StatisticsUIBtn_ID_ID_MIN = NetProto_StatisticsUIBtn_ID_GROUPID;
const NetProto_StatisticsUIBtn_ID NetProto_StatisticsUIBtn_ID_ID_MAX = NetProto_StatisticsUIBtn_ID_UNITID;
const int NetProto_StatisticsUIBtn_ID_ID_ARRAYSIZE = NetProto_StatisticsUIBtn_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StatisticsUIBtn_ID_descriptor();
inline const ::std::string& NetProto_StatisticsUIBtn_ID_Name(NetProto_StatisticsUIBtn_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StatisticsUIBtn_ID_descriptor(), value);
}
inline bool NetProto_StatisticsUIBtn_ID_Parse(
    const ::std::string& name, NetProto_StatisticsUIBtn_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StatisticsUIBtn_ID>(
    NetProto_StatisticsUIBtn_ID_descriptor(), name, value);
}
enum NetProto_StatisticsGuide_ID {
  NetProto_StatisticsGuide_ID_GROUPID = 1,
  NetProto_StatisticsGuide_ID_UNITID = 16
};
bool NetProto_StatisticsGuide_ID_IsValid(int value);
const NetProto_StatisticsGuide_ID NetProto_StatisticsGuide_ID_ID_MIN = NetProto_StatisticsGuide_ID_GROUPID;
const NetProto_StatisticsGuide_ID NetProto_StatisticsGuide_ID_ID_MAX = NetProto_StatisticsGuide_ID_UNITID;
const int NetProto_StatisticsGuide_ID_ID_ARRAYSIZE = NetProto_StatisticsGuide_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StatisticsGuide_ID_descriptor();
inline const ::std::string& NetProto_StatisticsGuide_ID_Name(NetProto_StatisticsGuide_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StatisticsGuide_ID_descriptor(), value);
}
inline bool NetProto_StatisticsGuide_ID_Parse(
    const ::std::string& name, NetProto_StatisticsGuide_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StatisticsGuide_ID>(
    NetProto_StatisticsGuide_ID_descriptor(), name, value);
}
enum NetProto_LoginLaterTime_ID {
  NetProto_LoginLaterTime_ID_GROUPID = 1,
  NetProto_LoginLaterTime_ID_UNITID = 17
};
bool NetProto_LoginLaterTime_ID_IsValid(int value);
const NetProto_LoginLaterTime_ID NetProto_LoginLaterTime_ID_ID_MIN = NetProto_LoginLaterTime_ID_GROUPID;
const NetProto_LoginLaterTime_ID NetProto_LoginLaterTime_ID_ID_MAX = NetProto_LoginLaterTime_ID_UNITID;
const int NetProto_LoginLaterTime_ID_ID_ARRAYSIZE = NetProto_LoginLaterTime_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_LoginLaterTime_ID_descriptor();
inline const ::std::string& NetProto_LoginLaterTime_ID_Name(NetProto_LoginLaterTime_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_LoginLaterTime_ID_descriptor(), value);
}
inline bool NetProto_LoginLaterTime_ID_Parse(
    const ::std::string& name, NetProto_LoginLaterTime_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_LoginLaterTime_ID>(
    NetProto_LoginLaterTime_ID_descriptor(), name, value);
}
enum NetProto_TencentBuyGoodsUrl_ID {
  NetProto_TencentBuyGoodsUrl_ID_GROUPID = 1,
  NetProto_TencentBuyGoodsUrl_ID_UNITID = 18
};
bool NetProto_TencentBuyGoodsUrl_ID_IsValid(int value);
const NetProto_TencentBuyGoodsUrl_ID NetProto_TencentBuyGoodsUrl_ID_ID_MIN = NetProto_TencentBuyGoodsUrl_ID_GROUPID;
const NetProto_TencentBuyGoodsUrl_ID NetProto_TencentBuyGoodsUrl_ID_ID_MAX = NetProto_TencentBuyGoodsUrl_ID_UNITID;
const int NetProto_TencentBuyGoodsUrl_ID_ID_ARRAYSIZE = NetProto_TencentBuyGoodsUrl_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_TencentBuyGoodsUrl_ID_descriptor();
inline const ::std::string& NetProto_TencentBuyGoodsUrl_ID_Name(NetProto_TencentBuyGoodsUrl_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_TencentBuyGoodsUrl_ID_descriptor(), value);
}
inline bool NetProto_TencentBuyGoodsUrl_ID_Parse(
    const ::std::string& name, NetProto_TencentBuyGoodsUrl_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_TencentBuyGoodsUrl_ID>(
    NetProto_TencentBuyGoodsUrl_ID_descriptor(), name, value);
}
enum NetProto_LoginURL_ID {
  NetProto_LoginURL_ID_GROUPID = 1,
  NetProto_LoginURL_ID_UNITID = 19
};
bool NetProto_LoginURL_ID_IsValid(int value);
const NetProto_LoginURL_ID NetProto_LoginURL_ID_ID_MIN = NetProto_LoginURL_ID_GROUPID;
const NetProto_LoginURL_ID NetProto_LoginURL_ID_ID_MAX = NetProto_LoginURL_ID_UNITID;
const int NetProto_LoginURL_ID_ID_ARRAYSIZE = NetProto_LoginURL_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_LoginURL_ID_descriptor();
inline const ::std::string& NetProto_LoginURL_ID_Name(NetProto_LoginURL_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_LoginURL_ID_descriptor(), value);
}
inline bool NetProto_LoginURL_ID_Parse(
    const ::std::string& name, NetProto_LoginURL_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_LoginURL_ID>(
    NetProto_LoginURL_ID_descriptor(), name, value);
}
enum NetProto_RechargeParam_ID {
  NetProto_RechargeParam_ID_GROUPID = 1,
  NetProto_RechargeParam_ID_UNITID = 20
};
bool NetProto_RechargeParam_ID_IsValid(int value);
const NetProto_RechargeParam_ID NetProto_RechargeParam_ID_ID_MIN = NetProto_RechargeParam_ID_GROUPID;
const NetProto_RechargeParam_ID NetProto_RechargeParam_ID_ID_MAX = NetProto_RechargeParam_ID_UNITID;
const int NetProto_RechargeParam_ID_ID_ARRAYSIZE = NetProto_RechargeParam_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RechargeParam_ID_descriptor();
inline const ::std::string& NetProto_RechargeParam_ID_Name(NetProto_RechargeParam_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RechargeParam_ID_descriptor(), value);
}
inline bool NetProto_RechargeParam_ID_Parse(
    const ::std::string& name, NetProto_RechargeParam_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RechargeParam_ID>(
    NetProto_RechargeParam_ID_descriptor(), name, value);
}
enum NetProto_AddPlayers_ID {
  NetProto_AddPlayers_ID_GROUPID = 2,
  NetProto_AddPlayers_ID_UNITID = 0
};
bool NetProto_AddPlayers_ID_IsValid(int value);
const NetProto_AddPlayers_ID NetProto_AddPlayers_ID_ID_MIN = NetProto_AddPlayers_ID_UNITID;
const NetProto_AddPlayers_ID NetProto_AddPlayers_ID_ID_MAX = NetProto_AddPlayers_ID_GROUPID;
const int NetProto_AddPlayers_ID_ID_ARRAYSIZE = NetProto_AddPlayers_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddPlayers_ID_descriptor();
inline const ::std::string& NetProto_AddPlayers_ID_Name(NetProto_AddPlayers_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddPlayers_ID_descriptor(), value);
}
inline bool NetProto_AddPlayers_ID_Parse(
    const ::std::string& name, NetProto_AddPlayers_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddPlayers_ID>(
    NetProto_AddPlayers_ID_descriptor(), name, value);
}
enum NetProto_LoadScene_ID {
  NetProto_LoadScene_ID_GROUPID = 2,
  NetProto_LoadScene_ID_UNITID = 1
};
bool NetProto_LoadScene_ID_IsValid(int value);
const NetProto_LoadScene_ID NetProto_LoadScene_ID_ID_MIN = NetProto_LoadScene_ID_UNITID;
const NetProto_LoadScene_ID NetProto_LoadScene_ID_ID_MAX = NetProto_LoadScene_ID_GROUPID;
const int NetProto_LoadScene_ID_ID_ARRAYSIZE = NetProto_LoadScene_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_LoadScene_ID_descriptor();
inline const ::std::string& NetProto_LoadScene_ID_Name(NetProto_LoadScene_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_LoadScene_ID_descriptor(), value);
}
inline bool NetProto_LoadScene_ID_Parse(
    const ::std::string& name, NetProto_LoadScene_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_LoadScene_ID>(
    NetProto_LoadScene_ID_descriptor(), name, value);
}
enum NetProto_LoadScene_Type {
  NetProto_LoadScene_Type_NORMAL = 0,
  NetProto_LoadScene_Type_JUMP = 1,
  NetProto_LoadScene_Type_LEAVE = 2
};
bool NetProto_LoadScene_Type_IsValid(int value);
const NetProto_LoadScene_Type NetProto_LoadScene_Type_Type_MIN = NetProto_LoadScene_Type_NORMAL;
const NetProto_LoadScene_Type NetProto_LoadScene_Type_Type_MAX = NetProto_LoadScene_Type_LEAVE;
const int NetProto_LoadScene_Type_Type_ARRAYSIZE = NetProto_LoadScene_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_LoadScene_Type_descriptor();
inline const ::std::string& NetProto_LoadScene_Type_Name(NetProto_LoadScene_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_LoadScene_Type_descriptor(), value);
}
inline bool NetProto_LoadScene_Type_Parse(
    const ::std::string& name, NetProto_LoadScene_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_LoadScene_Type>(
    NetProto_LoadScene_Type_descriptor(), name, value);
}
enum NetProto_DoLoadScene_ID {
  NetProto_DoLoadScene_ID_GROUPID = 2,
  NetProto_DoLoadScene_ID_UNITID = 2
};
bool NetProto_DoLoadScene_ID_IsValid(int value);
const NetProto_DoLoadScene_ID NetProto_DoLoadScene_ID_ID_MIN = NetProto_DoLoadScene_ID_GROUPID;
const NetProto_DoLoadScene_ID NetProto_DoLoadScene_ID_ID_MAX = NetProto_DoLoadScene_ID_GROUPID;
const int NetProto_DoLoadScene_ID_ID_ARRAYSIZE = NetProto_DoLoadScene_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DoLoadScene_ID_descriptor();
inline const ::std::string& NetProto_DoLoadScene_ID_Name(NetProto_DoLoadScene_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DoLoadScene_ID_descriptor(), value);
}
inline bool NetProto_DoLoadScene_ID_Parse(
    const ::std::string& name, NetProto_DoLoadScene_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DoLoadScene_ID>(
    NetProto_DoLoadScene_ID_descriptor(), name, value);
}
enum NetProto_EndLoadScene_ID {
  NetProto_EndLoadScene_ID_GROUPID = 2,
  NetProto_EndLoadScene_ID_UNITID = 3
};
bool NetProto_EndLoadScene_ID_IsValid(int value);
const NetProto_EndLoadScene_ID NetProto_EndLoadScene_ID_ID_MIN = NetProto_EndLoadScene_ID_GROUPID;
const NetProto_EndLoadScene_ID NetProto_EndLoadScene_ID_ID_MAX = NetProto_EndLoadScene_ID_UNITID;
const int NetProto_EndLoadScene_ID_ID_ARRAYSIZE = NetProto_EndLoadScene_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EndLoadScene_ID_descriptor();
inline const ::std::string& NetProto_EndLoadScene_ID_Name(NetProto_EndLoadScene_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EndLoadScene_ID_descriptor(), value);
}
inline bool NetProto_EndLoadScene_ID_Parse(
    const ::std::string& name, NetProto_EndLoadScene_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EndLoadScene_ID>(
    NetProto_EndLoadScene_ID_descriptor(), name, value);
}
enum NetProto_AddNPCs_ID {
  NetProto_AddNPCs_ID_GROUPID = 2,
  NetProto_AddNPCs_ID_UNITID = 4
};
bool NetProto_AddNPCs_ID_IsValid(int value);
const NetProto_AddNPCs_ID NetProto_AddNPCs_ID_ID_MIN = NetProto_AddNPCs_ID_GROUPID;
const NetProto_AddNPCs_ID NetProto_AddNPCs_ID_ID_MAX = NetProto_AddNPCs_ID_UNITID;
const int NetProto_AddNPCs_ID_ID_ARRAYSIZE = NetProto_AddNPCs_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddNPCs_ID_descriptor();
inline const ::std::string& NetProto_AddNPCs_ID_Name(NetProto_AddNPCs_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddNPCs_ID_descriptor(), value);
}
inline bool NetProto_AddNPCs_ID_Parse(
    const ::std::string& name, NetProto_AddNPCs_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddNPCs_ID>(
    NetProto_AddNPCs_ID_descriptor(), name, value);
}
enum NetProto_ClearRoom_ID {
  NetProto_ClearRoom_ID_GROUPID = 2,
  NetProto_ClearRoom_ID_UNITID = 5
};
bool NetProto_ClearRoom_ID_IsValid(int value);
const NetProto_ClearRoom_ID NetProto_ClearRoom_ID_ID_MIN = NetProto_ClearRoom_ID_GROUPID;
const NetProto_ClearRoom_ID NetProto_ClearRoom_ID_ID_MAX = NetProto_ClearRoom_ID_UNITID;
const int NetProto_ClearRoom_ID_ID_ARRAYSIZE = NetProto_ClearRoom_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ClearRoom_ID_descriptor();
inline const ::std::string& NetProto_ClearRoom_ID_Name(NetProto_ClearRoom_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ClearRoom_ID_descriptor(), value);
}
inline bool NetProto_ClearRoom_ID_Parse(
    const ::std::string& name, NetProto_ClearRoom_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ClearRoom_ID>(
    NetProto_ClearRoom_ID_descriptor(), name, value);
}
enum NetProto_OpenRoomBox_ID {
  NetProto_OpenRoomBox_ID_GROUPID = 2,
  NetProto_OpenRoomBox_ID_UNITID = 6
};
bool NetProto_OpenRoomBox_ID_IsValid(int value);
const NetProto_OpenRoomBox_ID NetProto_OpenRoomBox_ID_ID_MIN = NetProto_OpenRoomBox_ID_GROUPID;
const NetProto_OpenRoomBox_ID NetProto_OpenRoomBox_ID_ID_MAX = NetProto_OpenRoomBox_ID_UNITID;
const int NetProto_OpenRoomBox_ID_ID_ARRAYSIZE = NetProto_OpenRoomBox_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_OpenRoomBox_ID_descriptor();
inline const ::std::string& NetProto_OpenRoomBox_ID_Name(NetProto_OpenRoomBox_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_OpenRoomBox_ID_descriptor(), value);
}
inline bool NetProto_OpenRoomBox_ID_Parse(
    const ::std::string& name, NetProto_OpenRoomBox_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_OpenRoomBox_ID>(
    NetProto_OpenRoomBox_ID_descriptor(), name, value);
}
enum NetProto_OpenRoomBox_Type {
  NetProto_OpenRoomBox_Type_FREE = 0,
  NetProto_OpenRoomBox_Type_GEM = 1
};
bool NetProto_OpenRoomBox_Type_IsValid(int value);
const NetProto_OpenRoomBox_Type NetProto_OpenRoomBox_Type_Type_MIN = NetProto_OpenRoomBox_Type_FREE;
const NetProto_OpenRoomBox_Type NetProto_OpenRoomBox_Type_Type_MAX = NetProto_OpenRoomBox_Type_GEM;
const int NetProto_OpenRoomBox_Type_Type_ARRAYSIZE = NetProto_OpenRoomBox_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_OpenRoomBox_Type_descriptor();
inline const ::std::string& NetProto_OpenRoomBox_Type_Name(NetProto_OpenRoomBox_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_OpenRoomBox_Type_descriptor(), value);
}
inline bool NetProto_OpenRoomBox_Type_Parse(
    const ::std::string& name, NetProto_OpenRoomBox_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_OpenRoomBox_Type>(
    NetProto_OpenRoomBox_Type_descriptor(), name, value);
}
enum NetProto_BeginWaitRoom_ID {
  NetProto_BeginWaitRoom_ID_GROUPID = 2,
  NetProto_BeginWaitRoom_ID_UNITID = 7
};
bool NetProto_BeginWaitRoom_ID_IsValid(int value);
const NetProto_BeginWaitRoom_ID NetProto_BeginWaitRoom_ID_ID_MIN = NetProto_BeginWaitRoom_ID_GROUPID;
const NetProto_BeginWaitRoom_ID NetProto_BeginWaitRoom_ID_ID_MAX = NetProto_BeginWaitRoom_ID_UNITID;
const int NetProto_BeginWaitRoom_ID_ID_ARRAYSIZE = NetProto_BeginWaitRoom_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BeginWaitRoom_ID_descriptor();
inline const ::std::string& NetProto_BeginWaitRoom_ID_Name(NetProto_BeginWaitRoom_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BeginWaitRoom_ID_descriptor(), value);
}
inline bool NetProto_BeginWaitRoom_ID_Parse(
    const ::std::string& name, NetProto_BeginWaitRoom_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BeginWaitRoom_ID>(
    NetProto_BeginWaitRoom_ID_descriptor(), name, value);
}
enum NetProto_EndWaitRoom_ID {
  NetProto_EndWaitRoom_ID_GROUPID = 2,
  NetProto_EndWaitRoom_ID_UNITID = 8
};
bool NetProto_EndWaitRoom_ID_IsValid(int value);
const NetProto_EndWaitRoom_ID NetProto_EndWaitRoom_ID_ID_MIN = NetProto_EndWaitRoom_ID_GROUPID;
const NetProto_EndWaitRoom_ID NetProto_EndWaitRoom_ID_ID_MAX = NetProto_EndWaitRoom_ID_UNITID;
const int NetProto_EndWaitRoom_ID_ID_ARRAYSIZE = NetProto_EndWaitRoom_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EndWaitRoom_ID_descriptor();
inline const ::std::string& NetProto_EndWaitRoom_ID_Name(NetProto_EndWaitRoom_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EndWaitRoom_ID_descriptor(), value);
}
inline bool NetProto_EndWaitRoom_ID_Parse(
    const ::std::string& name, NetProto_EndWaitRoom_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EndWaitRoom_ID>(
    NetProto_EndWaitRoom_ID_descriptor(), name, value);
}
enum NetProto_GenNPCs_ID {
  NetProto_GenNPCs_ID_GROUPID = 2,
  NetProto_GenNPCs_ID_UNITID = 9
};
bool NetProto_GenNPCs_ID_IsValid(int value);
const NetProto_GenNPCs_ID NetProto_GenNPCs_ID_ID_MIN = NetProto_GenNPCs_ID_GROUPID;
const NetProto_GenNPCs_ID NetProto_GenNPCs_ID_ID_MAX = NetProto_GenNPCs_ID_UNITID;
const int NetProto_GenNPCs_ID_ID_ARRAYSIZE = NetProto_GenNPCs_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GenNPCs_ID_descriptor();
inline const ::std::string& NetProto_GenNPCs_ID_Name(NetProto_GenNPCs_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GenNPCs_ID_descriptor(), value);
}
inline bool NetProto_GenNPCs_ID_Parse(
    const ::std::string& name, NetProto_GenNPCs_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GenNPCs_ID>(
    NetProto_GenNPCs_ID_descriptor(), name, value);
}
enum NetProto_ResetEvent_ID {
  NetProto_ResetEvent_ID_GROUPID = 2,
  NetProto_ResetEvent_ID_UNITID = 10
};
bool NetProto_ResetEvent_ID_IsValid(int value);
const NetProto_ResetEvent_ID NetProto_ResetEvent_ID_ID_MIN = NetProto_ResetEvent_ID_GROUPID;
const NetProto_ResetEvent_ID NetProto_ResetEvent_ID_ID_MAX = NetProto_ResetEvent_ID_UNITID;
const int NetProto_ResetEvent_ID_ID_ARRAYSIZE = NetProto_ResetEvent_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ResetEvent_ID_descriptor();
inline const ::std::string& NetProto_ResetEvent_ID_Name(NetProto_ResetEvent_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ResetEvent_ID_descriptor(), value);
}
inline bool NetProto_ResetEvent_ID_Parse(
    const ::std::string& name, NetProto_ResetEvent_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ResetEvent_ID>(
    NetProto_ResetEvent_ID_descriptor(), name, value);
}
enum NetProto_QuickFight_ID {
  NetProto_QuickFight_ID_GROUPID = 2,
  NetProto_QuickFight_ID_UNITID = 11
};
bool NetProto_QuickFight_ID_IsValid(int value);
const NetProto_QuickFight_ID NetProto_QuickFight_ID_ID_MIN = NetProto_QuickFight_ID_GROUPID;
const NetProto_QuickFight_ID NetProto_QuickFight_ID_ID_MAX = NetProto_QuickFight_ID_UNITID;
const int NetProto_QuickFight_ID_ID_ARRAYSIZE = NetProto_QuickFight_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_QuickFight_ID_descriptor();
inline const ::std::string& NetProto_QuickFight_ID_Name(NetProto_QuickFight_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_QuickFight_ID_descriptor(), value);
}
inline bool NetProto_QuickFight_ID_Parse(
    const ::std::string& name, NetProto_QuickFight_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_QuickFight_ID>(
    NetProto_QuickFight_ID_descriptor(), name, value);
}
enum NetProto_Win_ID {
  NetProto_Win_ID_GROUPID = 2,
  NetProto_Win_ID_UNITID = 12
};
bool NetProto_Win_ID_IsValid(int value);
const NetProto_Win_ID NetProto_Win_ID_ID_MIN = NetProto_Win_ID_GROUPID;
const NetProto_Win_ID NetProto_Win_ID_ID_MAX = NetProto_Win_ID_UNITID;
const int NetProto_Win_ID_ID_ARRAYSIZE = NetProto_Win_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Win_ID_descriptor();
inline const ::std::string& NetProto_Win_ID_Name(NetProto_Win_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Win_ID_descriptor(), value);
}
inline bool NetProto_Win_ID_Parse(
    const ::std::string& name, NetProto_Win_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Win_ID>(
    NetProto_Win_ID_descriptor(), name, value);
}
enum NetProto_Lose_ID {
  NetProto_Lose_ID_GROUPID = 2,
  NetProto_Lose_ID_UNITID = 13
};
bool NetProto_Lose_ID_IsValid(int value);
const NetProto_Lose_ID NetProto_Lose_ID_ID_MIN = NetProto_Lose_ID_GROUPID;
const NetProto_Lose_ID NetProto_Lose_ID_ID_MAX = NetProto_Lose_ID_UNITID;
const int NetProto_Lose_ID_ID_ARRAYSIZE = NetProto_Lose_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Lose_ID_descriptor();
inline const ::std::string& NetProto_Lose_ID_Name(NetProto_Lose_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Lose_ID_descriptor(), value);
}
inline bool NetProto_Lose_ID_Parse(
    const ::std::string& name, NetProto_Lose_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Lose_ID>(
    NetProto_Lose_ID_descriptor(), name, value);
}
enum NetProto_Timeout_ID {
  NetProto_Timeout_ID_GROUPID = 2,
  NetProto_Timeout_ID_UNITID = 14
};
bool NetProto_Timeout_ID_IsValid(int value);
const NetProto_Timeout_ID NetProto_Timeout_ID_ID_MIN = NetProto_Timeout_ID_GROUPID;
const NetProto_Timeout_ID NetProto_Timeout_ID_ID_MAX = NetProto_Timeout_ID_UNITID;
const int NetProto_Timeout_ID_ID_ARRAYSIZE = NetProto_Timeout_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Timeout_ID_descriptor();
inline const ::std::string& NetProto_Timeout_ID_Name(NetProto_Timeout_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Timeout_ID_descriptor(), value);
}
inline bool NetProto_Timeout_ID_Parse(
    const ::std::string& name, NetProto_Timeout_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Timeout_ID>(
    NetProto_Timeout_ID_descriptor(), name, value);
}
enum NetProto_BeginWaitPVP_ID {
  NetProto_BeginWaitPVP_ID_GROUPID = 2,
  NetProto_BeginWaitPVP_ID_UNITID = 15
};
bool NetProto_BeginWaitPVP_ID_IsValid(int value);
const NetProto_BeginWaitPVP_ID NetProto_BeginWaitPVP_ID_ID_MIN = NetProto_BeginWaitPVP_ID_GROUPID;
const NetProto_BeginWaitPVP_ID NetProto_BeginWaitPVP_ID_ID_MAX = NetProto_BeginWaitPVP_ID_UNITID;
const int NetProto_BeginWaitPVP_ID_ID_ARRAYSIZE = NetProto_BeginWaitPVP_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BeginWaitPVP_ID_descriptor();
inline const ::std::string& NetProto_BeginWaitPVP_ID_Name(NetProto_BeginWaitPVP_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BeginWaitPVP_ID_descriptor(), value);
}
inline bool NetProto_BeginWaitPVP_ID_Parse(
    const ::std::string& name, NetProto_BeginWaitPVP_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BeginWaitPVP_ID>(
    NetProto_BeginWaitPVP_ID_descriptor(), name, value);
}
enum NetProto_BeginWaitPVP_Type {
  NetProto_BeginWaitPVP_Type_ONE_TO_ONE = 0,
  NetProto_BeginWaitPVP_Type_HELL = 1
};
bool NetProto_BeginWaitPVP_Type_IsValid(int value);
const NetProto_BeginWaitPVP_Type NetProto_BeginWaitPVP_Type_Type_MIN = NetProto_BeginWaitPVP_Type_ONE_TO_ONE;
const NetProto_BeginWaitPVP_Type NetProto_BeginWaitPVP_Type_Type_MAX = NetProto_BeginWaitPVP_Type_HELL;
const int NetProto_BeginWaitPVP_Type_Type_ARRAYSIZE = NetProto_BeginWaitPVP_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BeginWaitPVP_Type_descriptor();
inline const ::std::string& NetProto_BeginWaitPVP_Type_Name(NetProto_BeginWaitPVP_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BeginWaitPVP_Type_descriptor(), value);
}
inline bool NetProto_BeginWaitPVP_Type_Parse(
    const ::std::string& name, NetProto_BeginWaitPVP_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BeginWaitPVP_Type>(
    NetProto_BeginWaitPVP_Type_descriptor(), name, value);
}
enum NetProto_EndWaitPVP_ID {
  NetProto_EndWaitPVP_ID_GROUPID = 2,
  NetProto_EndWaitPVP_ID_UNITID = 16
};
bool NetProto_EndWaitPVP_ID_IsValid(int value);
const NetProto_EndWaitPVP_ID NetProto_EndWaitPVP_ID_ID_MIN = NetProto_EndWaitPVP_ID_GROUPID;
const NetProto_EndWaitPVP_ID NetProto_EndWaitPVP_ID_ID_MAX = NetProto_EndWaitPVP_ID_UNITID;
const int NetProto_EndWaitPVP_ID_ID_ARRAYSIZE = NetProto_EndWaitPVP_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EndWaitPVP_ID_descriptor();
inline const ::std::string& NetProto_EndWaitPVP_ID_Name(NetProto_EndWaitPVP_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EndWaitPVP_ID_descriptor(), value);
}
inline bool NetProto_EndWaitPVP_ID_Parse(
    const ::std::string& name, NetProto_EndWaitPVP_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EndWaitPVP_ID>(
    NetProto_EndWaitPVP_ID_descriptor(), name, value);
}
enum NetProto_EndWaitPVP_Type {
  NetProto_EndWaitPVP_Type_ONE_TO_ONE = 0,
  NetProto_EndWaitPVP_Type_HELL = 1
};
bool NetProto_EndWaitPVP_Type_IsValid(int value);
const NetProto_EndWaitPVP_Type NetProto_EndWaitPVP_Type_Type_MIN = NetProto_EndWaitPVP_Type_ONE_TO_ONE;
const NetProto_EndWaitPVP_Type NetProto_EndWaitPVP_Type_Type_MAX = NetProto_EndWaitPVP_Type_HELL;
const int NetProto_EndWaitPVP_Type_Type_ARRAYSIZE = NetProto_EndWaitPVP_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EndWaitPVP_Type_descriptor();
inline const ::std::string& NetProto_EndWaitPVP_Type_Name(NetProto_EndWaitPVP_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EndWaitPVP_Type_descriptor(), value);
}
inline bool NetProto_EndWaitPVP_Type_Parse(
    const ::std::string& name, NetProto_EndWaitPVP_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EndWaitPVP_Type>(
    NetProto_EndWaitPVP_Type_descriptor(), name, value);
}
enum NetProto_Lottery_ID {
  NetProto_Lottery_ID_GROUPID = 2,
  NetProto_Lottery_ID_UNITID = 17
};
bool NetProto_Lottery_ID_IsValid(int value);
const NetProto_Lottery_ID NetProto_Lottery_ID_ID_MIN = NetProto_Lottery_ID_GROUPID;
const NetProto_Lottery_ID NetProto_Lottery_ID_ID_MAX = NetProto_Lottery_ID_UNITID;
const int NetProto_Lottery_ID_ID_ARRAYSIZE = NetProto_Lottery_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Lottery_ID_descriptor();
inline const ::std::string& NetProto_Lottery_ID_Name(NetProto_Lottery_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Lottery_ID_descriptor(), value);
}
inline bool NetProto_Lottery_ID_Parse(
    const ::std::string& name, NetProto_Lottery_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Lottery_ID>(
    NetProto_Lottery_ID_descriptor(), name, value);
}
enum NetProto_GetGift_ID {
  NetProto_GetGift_ID_GROUPID = 2,
  NetProto_GetGift_ID_UNITID = 18
};
bool NetProto_GetGift_ID_IsValid(int value);
const NetProto_GetGift_ID NetProto_GetGift_ID_ID_MIN = NetProto_GetGift_ID_GROUPID;
const NetProto_GetGift_ID NetProto_GetGift_ID_ID_MAX = NetProto_GetGift_ID_UNITID;
const int NetProto_GetGift_ID_ID_ARRAYSIZE = NetProto_GetGift_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GetGift_ID_descriptor();
inline const ::std::string& NetProto_GetGift_ID_Name(NetProto_GetGift_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GetGift_ID_descriptor(), value);
}
inline bool NetProto_GetGift_ID_Parse(
    const ::std::string& name, NetProto_GetGift_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GetGift_ID>(
    NetProto_GetGift_ID_descriptor(), name, value);
}
enum NetProto_SingleRecord_ID {
  NetProto_SingleRecord_ID_GROUPID = 2,
  NetProto_SingleRecord_ID_UNITID = 19
};
bool NetProto_SingleRecord_ID_IsValid(int value);
const NetProto_SingleRecord_ID NetProto_SingleRecord_ID_ID_MIN = NetProto_SingleRecord_ID_GROUPID;
const NetProto_SingleRecord_ID NetProto_SingleRecord_ID_ID_MAX = NetProto_SingleRecord_ID_UNITID;
const int NetProto_SingleRecord_ID_ID_ARRAYSIZE = NetProto_SingleRecord_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SingleRecord_ID_descriptor();
inline const ::std::string& NetProto_SingleRecord_ID_Name(NetProto_SingleRecord_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SingleRecord_ID_descriptor(), value);
}
inline bool NetProto_SingleRecord_ID_Parse(
    const ::std::string& name, NetProto_SingleRecord_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SingleRecord_ID>(
    NetProto_SingleRecord_ID_descriptor(), name, value);
}
enum NetProto_EndLoadModel_ID {
  NetProto_EndLoadModel_ID_GROUPID = 2,
  NetProto_EndLoadModel_ID_UNITID = 20
};
bool NetProto_EndLoadModel_ID_IsValid(int value);
const NetProto_EndLoadModel_ID NetProto_EndLoadModel_ID_ID_MIN = NetProto_EndLoadModel_ID_GROUPID;
const NetProto_EndLoadModel_ID NetProto_EndLoadModel_ID_ID_MAX = NetProto_EndLoadModel_ID_UNITID;
const int NetProto_EndLoadModel_ID_ID_ARRAYSIZE = NetProto_EndLoadModel_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EndLoadModel_ID_descriptor();
inline const ::std::string& NetProto_EndLoadModel_ID_Name(NetProto_EndLoadModel_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EndLoadModel_ID_descriptor(), value);
}
inline bool NetProto_EndLoadModel_ID_Parse(
    const ::std::string& name, NetProto_EndLoadModel_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EndLoadModel_ID>(
    NetProto_EndLoadModel_ID_descriptor(), name, value);
}
enum NetProto_RoomWaitCount_ID {
  NetProto_RoomWaitCount_ID_GROUPID = 2,
  NetProto_RoomWaitCount_ID_UNITID = 21
};
bool NetProto_RoomWaitCount_ID_IsValid(int value);
const NetProto_RoomWaitCount_ID NetProto_RoomWaitCount_ID_ID_MIN = NetProto_RoomWaitCount_ID_GROUPID;
const NetProto_RoomWaitCount_ID NetProto_RoomWaitCount_ID_ID_MAX = NetProto_RoomWaitCount_ID_UNITID;
const int NetProto_RoomWaitCount_ID_ID_ARRAYSIZE = NetProto_RoomWaitCount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RoomWaitCount_ID_descriptor();
inline const ::std::string& NetProto_RoomWaitCount_ID_Name(NetProto_RoomWaitCount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RoomWaitCount_ID_descriptor(), value);
}
inline bool NetProto_RoomWaitCount_ID_Parse(
    const ::std::string& name, NetProto_RoomWaitCount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RoomWaitCount_ID>(
    NetProto_RoomWaitCount_ID_descriptor(), name, value);
}
enum NetProto_PVPWaitCount_ID {
  NetProto_PVPWaitCount_ID_GROUPID = 2,
  NetProto_PVPWaitCount_ID_UNITID = 22
};
bool NetProto_PVPWaitCount_ID_IsValid(int value);
const NetProto_PVPWaitCount_ID NetProto_PVPWaitCount_ID_ID_MIN = NetProto_PVPWaitCount_ID_GROUPID;
const NetProto_PVPWaitCount_ID NetProto_PVPWaitCount_ID_ID_MAX = NetProto_PVPWaitCount_ID_UNITID;
const int NetProto_PVPWaitCount_ID_ID_ARRAYSIZE = NetProto_PVPWaitCount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PVPWaitCount_ID_descriptor();
inline const ::std::string& NetProto_PVPWaitCount_ID_Name(NetProto_PVPWaitCount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PVPWaitCount_ID_descriptor(), value);
}
inline bool NetProto_PVPWaitCount_ID_Parse(
    const ::std::string& name, NetProto_PVPWaitCount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PVPWaitCount_ID>(
    NetProto_PVPWaitCount_ID_descriptor(), name, value);
}
enum NetProto_PVPWaitCount_Type {
  NetProto_PVPWaitCount_Type_ONE_TO_ONE = 0,
  NetProto_PVPWaitCount_Type_HELL = 1
};
bool NetProto_PVPWaitCount_Type_IsValid(int value);
const NetProto_PVPWaitCount_Type NetProto_PVPWaitCount_Type_Type_MIN = NetProto_PVPWaitCount_Type_ONE_TO_ONE;
const NetProto_PVPWaitCount_Type NetProto_PVPWaitCount_Type_Type_MAX = NetProto_PVPWaitCount_Type_HELL;
const int NetProto_PVPWaitCount_Type_Type_ARRAYSIZE = NetProto_PVPWaitCount_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PVPWaitCount_Type_descriptor();
inline const ::std::string& NetProto_PVPWaitCount_Type_Name(NetProto_PVPWaitCount_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PVPWaitCount_Type_descriptor(), value);
}
inline bool NetProto_PVPWaitCount_Type_Parse(
    const ::std::string& name, NetProto_PVPWaitCount_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PVPWaitCount_Type>(
    NetProto_PVPWaitCount_Type_descriptor(), name, value);
}
enum NetProto_CancelWaitRoom_ID {
  NetProto_CancelWaitRoom_ID_GROUPID = 2,
  NetProto_CancelWaitRoom_ID_UNITID = 23
};
bool NetProto_CancelWaitRoom_ID_IsValid(int value);
const NetProto_CancelWaitRoom_ID NetProto_CancelWaitRoom_ID_ID_MIN = NetProto_CancelWaitRoom_ID_GROUPID;
const NetProto_CancelWaitRoom_ID NetProto_CancelWaitRoom_ID_ID_MAX = NetProto_CancelWaitRoom_ID_UNITID;
const int NetProto_CancelWaitRoom_ID_ID_ARRAYSIZE = NetProto_CancelWaitRoom_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_CancelWaitRoom_ID_descriptor();
inline const ::std::string& NetProto_CancelWaitRoom_ID_Name(NetProto_CancelWaitRoom_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_CancelWaitRoom_ID_descriptor(), value);
}
inline bool NetProto_CancelWaitRoom_ID_Parse(
    const ::std::string& name, NetProto_CancelWaitRoom_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_CancelWaitRoom_ID>(
    NetProto_CancelWaitRoom_ID_descriptor(), name, value);
}
enum NetProto_CancelWaitPVP_ID {
  NetProto_CancelWaitPVP_ID_GROUPID = 2,
  NetProto_CancelWaitPVP_ID_UNITID = 24
};
bool NetProto_CancelWaitPVP_ID_IsValid(int value);
const NetProto_CancelWaitPVP_ID NetProto_CancelWaitPVP_ID_ID_MIN = NetProto_CancelWaitPVP_ID_GROUPID;
const NetProto_CancelWaitPVP_ID NetProto_CancelWaitPVP_ID_ID_MAX = NetProto_CancelWaitPVP_ID_UNITID;
const int NetProto_CancelWaitPVP_ID_ID_ARRAYSIZE = NetProto_CancelWaitPVP_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_CancelWaitPVP_ID_descriptor();
inline const ::std::string& NetProto_CancelWaitPVP_ID_Name(NetProto_CancelWaitPVP_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_CancelWaitPVP_ID_descriptor(), value);
}
inline bool NetProto_CancelWaitPVP_ID_Parse(
    const ::std::string& name, NetProto_CancelWaitPVP_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_CancelWaitPVP_ID>(
    NetProto_CancelWaitPVP_ID_descriptor(), name, value);
}
enum NetProto_GetRes_ID {
  NetProto_GetRes_ID_GROUPID = 2,
  NetProto_GetRes_ID_UNITID = 25
};
bool NetProto_GetRes_ID_IsValid(int value);
const NetProto_GetRes_ID NetProto_GetRes_ID_ID_MIN = NetProto_GetRes_ID_GROUPID;
const NetProto_GetRes_ID NetProto_GetRes_ID_ID_MAX = NetProto_GetRes_ID_UNITID;
const int NetProto_GetRes_ID_ID_ARRAYSIZE = NetProto_GetRes_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GetRes_ID_descriptor();
inline const ::std::string& NetProto_GetRes_ID_Name(NetProto_GetRes_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GetRes_ID_descriptor(), value);
}
inline bool NetProto_GetRes_ID_Parse(
    const ::std::string& name, NetProto_GetRes_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GetRes_ID>(
    NetProto_GetRes_ID_descriptor(), name, value);
}
enum NetProto_Invest_ID {
  NetProto_Invest_ID_GROUPID = 2,
  NetProto_Invest_ID_UNITID = 26
};
bool NetProto_Invest_ID_IsValid(int value);
const NetProto_Invest_ID NetProto_Invest_ID_ID_MIN = NetProto_Invest_ID_GROUPID;
const NetProto_Invest_ID NetProto_Invest_ID_ID_MAX = NetProto_Invest_ID_UNITID;
const int NetProto_Invest_ID_ID_ARRAYSIZE = NetProto_Invest_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Invest_ID_descriptor();
inline const ::std::string& NetProto_Invest_ID_Name(NetProto_Invest_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Invest_ID_descriptor(), value);
}
inline bool NetProto_Invest_ID_Parse(
    const ::std::string& name, NetProto_Invest_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Invest_ID>(
    NetProto_Invest_ID_descriptor(), name, value);
}
enum NetProto_InvestAward_ID {
  NetProto_InvestAward_ID_GROUPID = 2,
  NetProto_InvestAward_ID_UNITID = 27
};
bool NetProto_InvestAward_ID_IsValid(int value);
const NetProto_InvestAward_ID NetProto_InvestAward_ID_ID_MIN = NetProto_InvestAward_ID_GROUPID;
const NetProto_InvestAward_ID NetProto_InvestAward_ID_ID_MAX = NetProto_InvestAward_ID_UNITID;
const int NetProto_InvestAward_ID_ID_ARRAYSIZE = NetProto_InvestAward_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_InvestAward_ID_descriptor();
inline const ::std::string& NetProto_InvestAward_ID_Name(NetProto_InvestAward_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_InvestAward_ID_descriptor(), value);
}
inline bool NetProto_InvestAward_ID_Parse(
    const ::std::string& name, NetProto_InvestAward_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_InvestAward_ID>(
    NetProto_InvestAward_ID_descriptor(), name, value);
}
enum NetProto_InvestAwardInfo_ID {
  NetProto_InvestAwardInfo_ID_GROUPID = 2,
  NetProto_InvestAwardInfo_ID_UNITID = 28
};
bool NetProto_InvestAwardInfo_ID_IsValid(int value);
const NetProto_InvestAwardInfo_ID NetProto_InvestAwardInfo_ID_ID_MIN = NetProto_InvestAwardInfo_ID_GROUPID;
const NetProto_InvestAwardInfo_ID NetProto_InvestAwardInfo_ID_ID_MAX = NetProto_InvestAwardInfo_ID_UNITID;
const int NetProto_InvestAwardInfo_ID_ID_ARRAYSIZE = NetProto_InvestAwardInfo_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_InvestAwardInfo_ID_descriptor();
inline const ::std::string& NetProto_InvestAwardInfo_ID_Name(NetProto_InvestAwardInfo_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_InvestAwardInfo_ID_descriptor(), value);
}
inline bool NetProto_InvestAwardInfo_ID_Parse(
    const ::std::string& name, NetProto_InvestAwardInfo_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_InvestAwardInfo_ID>(
    NetProto_InvestAwardInfo_ID_descriptor(), name, value);
}
enum NetProto_SetDayEvent_ID {
  NetProto_SetDayEvent_ID_GROUPID = 2,
  NetProto_SetDayEvent_ID_UNITID = 29
};
bool NetProto_SetDayEvent_ID_IsValid(int value);
const NetProto_SetDayEvent_ID NetProto_SetDayEvent_ID_ID_MIN = NetProto_SetDayEvent_ID_GROUPID;
const NetProto_SetDayEvent_ID NetProto_SetDayEvent_ID_ID_MAX = NetProto_SetDayEvent_ID_UNITID;
const int NetProto_SetDayEvent_ID_ID_ARRAYSIZE = NetProto_SetDayEvent_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SetDayEvent_ID_descriptor();
inline const ::std::string& NetProto_SetDayEvent_ID_Name(NetProto_SetDayEvent_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SetDayEvent_ID_descriptor(), value);
}
inline bool NetProto_SetDayEvent_ID_Parse(
    const ::std::string& name, NetProto_SetDayEvent_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SetDayEvent_ID>(
    NetProto_SetDayEvent_ID_descriptor(), name, value);
}
enum NetProto_SetFixedEvent_ID {
  NetProto_SetFixedEvent_ID_GROUPID = 2,
  NetProto_SetFixedEvent_ID_UNITID = 30
};
bool NetProto_SetFixedEvent_ID_IsValid(int value);
const NetProto_SetFixedEvent_ID NetProto_SetFixedEvent_ID_ID_MIN = NetProto_SetFixedEvent_ID_GROUPID;
const NetProto_SetFixedEvent_ID NetProto_SetFixedEvent_ID_ID_MAX = NetProto_SetFixedEvent_ID_UNITID;
const int NetProto_SetFixedEvent_ID_ID_ARRAYSIZE = NetProto_SetFixedEvent_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SetFixedEvent_ID_descriptor();
inline const ::std::string& NetProto_SetFixedEvent_ID_Name(NetProto_SetFixedEvent_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SetFixedEvent_ID_descriptor(), value);
}
inline bool NetProto_SetFixedEvent_ID_Parse(
    const ::std::string& name, NetProto_SetFixedEvent_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SetFixedEvent_ID>(
    NetProto_SetFixedEvent_ID_descriptor(), name, value);
}
enum NetProto_Info_ID {
  NetProto_Info_ID_GROUPID = 2,
  NetProto_Info_ID_UNITID = 31
};
bool NetProto_Info_ID_IsValid(int value);
const NetProto_Info_ID NetProto_Info_ID_ID_MIN = NetProto_Info_ID_GROUPID;
const NetProto_Info_ID NetProto_Info_ID_ID_MAX = NetProto_Info_ID_UNITID;
const int NetProto_Info_ID_ID_ARRAYSIZE = NetProto_Info_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Info_ID_descriptor();
inline const ::std::string& NetProto_Info_ID_Name(NetProto_Info_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Info_ID_descriptor(), value);
}
inline bool NetProto_Info_ID_Parse(
    const ::std::string& name, NetProto_Info_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Info_ID>(
    NetProto_Info_ID_descriptor(), name, value);
}
enum NetProto_Error_ID {
  NetProto_Error_ID_GROUPID = 2,
  NetProto_Error_ID_UNITID = 32
};
bool NetProto_Error_ID_IsValid(int value);
const NetProto_Error_ID NetProto_Error_ID_ID_MIN = NetProto_Error_ID_GROUPID;
const NetProto_Error_ID NetProto_Error_ID_ID_MAX = NetProto_Error_ID_UNITID;
const int NetProto_Error_ID_ID_ARRAYSIZE = NetProto_Error_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Error_ID_descriptor();
inline const ::std::string& NetProto_Error_ID_Name(NetProto_Error_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Error_ID_descriptor(), value);
}
inline bool NetProto_Error_ID_Parse(
    const ::std::string& name, NetProto_Error_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Error_ID>(
    NetProto_Error_ID_descriptor(), name, value);
}
enum NetProto_GodAward_ID {
  NetProto_GodAward_ID_GROUPID = 2,
  NetProto_GodAward_ID_UNITID = 33
};
bool NetProto_GodAward_ID_IsValid(int value);
const NetProto_GodAward_ID NetProto_GodAward_ID_ID_MIN = NetProto_GodAward_ID_GROUPID;
const NetProto_GodAward_ID NetProto_GodAward_ID_ID_MAX = NetProto_GodAward_ID_UNITID;
const int NetProto_GodAward_ID_ID_ARRAYSIZE = NetProto_GodAward_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GodAward_ID_descriptor();
inline const ::std::string& NetProto_GodAward_ID_Name(NetProto_GodAward_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GodAward_ID_descriptor(), value);
}
inline bool NetProto_GodAward_ID_Parse(
    const ::std::string& name, NetProto_GodAward_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GodAward_ID>(
    NetProto_GodAward_ID_descriptor(), name, value);
}
enum NetProto_CreateRoom_ID {
  NetProto_CreateRoom_ID_GROUPID = 2,
  NetProto_CreateRoom_ID_UNITID = 34
};
bool NetProto_CreateRoom_ID_IsValid(int value);
const NetProto_CreateRoom_ID NetProto_CreateRoom_ID_ID_MIN = NetProto_CreateRoom_ID_GROUPID;
const NetProto_CreateRoom_ID NetProto_CreateRoom_ID_ID_MAX = NetProto_CreateRoom_ID_UNITID;
const int NetProto_CreateRoom_ID_ID_ARRAYSIZE = NetProto_CreateRoom_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_CreateRoom_ID_descriptor();
inline const ::std::string& NetProto_CreateRoom_ID_Name(NetProto_CreateRoom_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_CreateRoom_ID_descriptor(), value);
}
inline bool NetProto_CreateRoom_ID_Parse(
    const ::std::string& name, NetProto_CreateRoom_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_CreateRoom_ID>(
    NetProto_CreateRoom_ID_descriptor(), name, value);
}
enum NetProto_JoinRoom_ID {
  NetProto_JoinRoom_ID_GROUPID = 2,
  NetProto_JoinRoom_ID_UNITID = 35
};
bool NetProto_JoinRoom_ID_IsValid(int value);
const NetProto_JoinRoom_ID NetProto_JoinRoom_ID_ID_MIN = NetProto_JoinRoom_ID_GROUPID;
const NetProto_JoinRoom_ID NetProto_JoinRoom_ID_ID_MAX = NetProto_JoinRoom_ID_UNITID;
const int NetProto_JoinRoom_ID_ID_ARRAYSIZE = NetProto_JoinRoom_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_JoinRoom_ID_descriptor();
inline const ::std::string& NetProto_JoinRoom_ID_Name(NetProto_JoinRoom_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_JoinRoom_ID_descriptor(), value);
}
inline bool NetProto_JoinRoom_ID_Parse(
    const ::std::string& name, NetProto_JoinRoom_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_JoinRoom_ID>(
    NetProto_JoinRoom_ID_descriptor(), name, value);
}
enum NetProto_LeaveRoom_ID {
  NetProto_LeaveRoom_ID_GROUPID = 2,
  NetProto_LeaveRoom_ID_UNITID = 36
};
bool NetProto_LeaveRoom_ID_IsValid(int value);
const NetProto_LeaveRoom_ID NetProto_LeaveRoom_ID_ID_MIN = NetProto_LeaveRoom_ID_GROUPID;
const NetProto_LeaveRoom_ID NetProto_LeaveRoom_ID_ID_MAX = NetProto_LeaveRoom_ID_UNITID;
const int NetProto_LeaveRoom_ID_ID_ARRAYSIZE = NetProto_LeaveRoom_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_LeaveRoom_ID_descriptor();
inline const ::std::string& NetProto_LeaveRoom_ID_Name(NetProto_LeaveRoom_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_LeaveRoom_ID_descriptor(), value);
}
inline bool NetProto_LeaveRoom_ID_Parse(
    const ::std::string& name, NetProto_LeaveRoom_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_LeaveRoom_ID>(
    NetProto_LeaveRoom_ID_descriptor(), name, value);
}
enum NetProto_DestroyRoom_ID {
  NetProto_DestroyRoom_ID_GROUPID = 2,
  NetProto_DestroyRoom_ID_UNITID = 37
};
bool NetProto_DestroyRoom_ID_IsValid(int value);
const NetProto_DestroyRoom_ID NetProto_DestroyRoom_ID_ID_MIN = NetProto_DestroyRoom_ID_GROUPID;
const NetProto_DestroyRoom_ID NetProto_DestroyRoom_ID_ID_MAX = NetProto_DestroyRoom_ID_UNITID;
const int NetProto_DestroyRoom_ID_ID_ARRAYSIZE = NetProto_DestroyRoom_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DestroyRoom_ID_descriptor();
inline const ::std::string& NetProto_DestroyRoom_ID_Name(NetProto_DestroyRoom_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DestroyRoom_ID_descriptor(), value);
}
inline bool NetProto_DestroyRoom_ID_Parse(
    const ::std::string& name, NetProto_DestroyRoom_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DestroyRoom_ID>(
    NetProto_DestroyRoom_ID_descriptor(), name, value);
}
enum NetProto_RoomList_ID {
  NetProto_RoomList_ID_GROUPID = 2,
  NetProto_RoomList_ID_UNITID = 38
};
bool NetProto_RoomList_ID_IsValid(int value);
const NetProto_RoomList_ID NetProto_RoomList_ID_ID_MIN = NetProto_RoomList_ID_GROUPID;
const NetProto_RoomList_ID NetProto_RoomList_ID_ID_MAX = NetProto_RoomList_ID_UNITID;
const int NetProto_RoomList_ID_ID_ARRAYSIZE = NetProto_RoomList_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RoomList_ID_descriptor();
inline const ::std::string& NetProto_RoomList_ID_Name(NetProto_RoomList_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RoomList_ID_descriptor(), value);
}
inline bool NetProto_RoomList_ID_Parse(
    const ::std::string& name, NetProto_RoomList_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RoomList_ID>(
    NetProto_RoomList_ID_descriptor(), name, value);
}
enum NetProto_EvictRole_ID {
  NetProto_EvictRole_ID_GROUPID = 2,
  NetProto_EvictRole_ID_UNITID = 39
};
bool NetProto_EvictRole_ID_IsValid(int value);
const NetProto_EvictRole_ID NetProto_EvictRole_ID_ID_MIN = NetProto_EvictRole_ID_GROUPID;
const NetProto_EvictRole_ID NetProto_EvictRole_ID_ID_MAX = NetProto_EvictRole_ID_UNITID;
const int NetProto_EvictRole_ID_ID_ARRAYSIZE = NetProto_EvictRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EvictRole_ID_descriptor();
inline const ::std::string& NetProto_EvictRole_ID_Name(NetProto_EvictRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EvictRole_ID_descriptor(), value);
}
inline bool NetProto_EvictRole_ID_Parse(
    const ::std::string& name, NetProto_EvictRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EvictRole_ID>(
    NetProto_EvictRole_ID_descriptor(), name, value);
}
enum NetProto_InviteFriend_ID {
  NetProto_InviteFriend_ID_GROUPID = 2,
  NetProto_InviteFriend_ID_UNITID = 40
};
bool NetProto_InviteFriend_ID_IsValid(int value);
const NetProto_InviteFriend_ID NetProto_InviteFriend_ID_ID_MIN = NetProto_InviteFriend_ID_GROUPID;
const NetProto_InviteFriend_ID NetProto_InviteFriend_ID_ID_MAX = NetProto_InviteFriend_ID_UNITID;
const int NetProto_InviteFriend_ID_ID_ARRAYSIZE = NetProto_InviteFriend_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_InviteFriend_ID_descriptor();
inline const ::std::string& NetProto_InviteFriend_ID_Name(NetProto_InviteFriend_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_InviteFriend_ID_descriptor(), value);
}
inline bool NetProto_InviteFriend_ID_Parse(
    const ::std::string& name, NetProto_InviteFriend_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_InviteFriend_ID>(
    NetProto_InviteFriend_ID_descriptor(), name, value);
}
enum NetProto_BeginMultiRoom_ID {
  NetProto_BeginMultiRoom_ID_GROUPID = 2,
  NetProto_BeginMultiRoom_ID_UNITID = 41
};
bool NetProto_BeginMultiRoom_ID_IsValid(int value);
const NetProto_BeginMultiRoom_ID NetProto_BeginMultiRoom_ID_ID_MIN = NetProto_BeginMultiRoom_ID_GROUPID;
const NetProto_BeginMultiRoom_ID NetProto_BeginMultiRoom_ID_ID_MAX = NetProto_BeginMultiRoom_ID_UNITID;
const int NetProto_BeginMultiRoom_ID_ID_ARRAYSIZE = NetProto_BeginMultiRoom_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BeginMultiRoom_ID_descriptor();
inline const ::std::string& NetProto_BeginMultiRoom_ID_Name(NetProto_BeginMultiRoom_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BeginMultiRoom_ID_descriptor(), value);
}
inline bool NetProto_BeginMultiRoom_ID_Parse(
    const ::std::string& name, NetProto_BeginMultiRoom_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BeginMultiRoom_ID>(
    NetProto_BeginMultiRoom_ID_descriptor(), name, value);
}
enum NetProto_ResetCheckPoint_ID {
  NetProto_ResetCheckPoint_ID_GROUPID = 2,
  NetProto_ResetCheckPoint_ID_UNITID = 42
};
bool NetProto_ResetCheckPoint_ID_IsValid(int value);
const NetProto_ResetCheckPoint_ID NetProto_ResetCheckPoint_ID_ID_MIN = NetProto_ResetCheckPoint_ID_GROUPID;
const NetProto_ResetCheckPoint_ID NetProto_ResetCheckPoint_ID_ID_MAX = NetProto_ResetCheckPoint_ID_UNITID;
const int NetProto_ResetCheckPoint_ID_ID_ARRAYSIZE = NetProto_ResetCheckPoint_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ResetCheckPoint_ID_descriptor();
inline const ::std::string& NetProto_ResetCheckPoint_ID_Name(NetProto_ResetCheckPoint_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ResetCheckPoint_ID_descriptor(), value);
}
inline bool NetProto_ResetCheckPoint_ID_Parse(
    const ::std::string& name, NetProto_ResetCheckPoint_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ResetCheckPoint_ID>(
    NetProto_ResetCheckPoint_ID_descriptor(), name, value);
}
enum NetProto_GenPet_ID {
  NetProto_GenPet_ID_GROUPID = 2,
  NetProto_GenPet_ID_UNITID = 43
};
bool NetProto_GenPet_ID_IsValid(int value);
const NetProto_GenPet_ID NetProto_GenPet_ID_ID_MIN = NetProto_GenPet_ID_GROUPID;
const NetProto_GenPet_ID NetProto_GenPet_ID_ID_MAX = NetProto_GenPet_ID_UNITID;
const int NetProto_GenPet_ID_ID_ARRAYSIZE = NetProto_GenPet_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GenPet_ID_descriptor();
inline const ::std::string& NetProto_GenPet_ID_Name(NetProto_GenPet_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GenPet_ID_descriptor(), value);
}
inline bool NetProto_GenPet_ID_Parse(
    const ::std::string& name, NetProto_GenPet_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GenPet_ID>(
    NetProto_GenPet_ID_descriptor(), name, value);
}
enum NetProto_OpenObstacle_ID {
  NetProto_OpenObstacle_ID_GROUPID = 2,
  NetProto_OpenObstacle_ID_UNITID = 44
};
bool NetProto_OpenObstacle_ID_IsValid(int value);
const NetProto_OpenObstacle_ID NetProto_OpenObstacle_ID_ID_MIN = NetProto_OpenObstacle_ID_GROUPID;
const NetProto_OpenObstacle_ID NetProto_OpenObstacle_ID_ID_MAX = NetProto_OpenObstacle_ID_UNITID;
const int NetProto_OpenObstacle_ID_ID_ARRAYSIZE = NetProto_OpenObstacle_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_OpenObstacle_ID_descriptor();
inline const ::std::string& NetProto_OpenObstacle_ID_Name(NetProto_OpenObstacle_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_OpenObstacle_ID_descriptor(), value);
}
inline bool NetProto_OpenObstacle_ID_Parse(
    const ::std::string& name, NetProto_OpenObstacle_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_OpenObstacle_ID>(
    NetProto_OpenObstacle_ID_descriptor(), name, value);
}
enum NetProto_RegistDeviceServer_ID {
  NetProto_RegistDeviceServer_ID_GROUPID = 2,
  NetProto_RegistDeviceServer_ID_UNITID = 45
};
bool NetProto_RegistDeviceServer_ID_IsValid(int value);
const NetProto_RegistDeviceServer_ID NetProto_RegistDeviceServer_ID_ID_MIN = NetProto_RegistDeviceServer_ID_GROUPID;
const NetProto_RegistDeviceServer_ID NetProto_RegistDeviceServer_ID_ID_MAX = NetProto_RegistDeviceServer_ID_UNITID;
const int NetProto_RegistDeviceServer_ID_ID_ARRAYSIZE = NetProto_RegistDeviceServer_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RegistDeviceServer_ID_descriptor();
inline const ::std::string& NetProto_RegistDeviceServer_ID_Name(NetProto_RegistDeviceServer_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RegistDeviceServer_ID_descriptor(), value);
}
inline bool NetProto_RegistDeviceServer_ID_Parse(
    const ::std::string& name, NetProto_RegistDeviceServer_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RegistDeviceServer_ID>(
    NetProto_RegistDeviceServer_ID_descriptor(), name, value);
}
enum NetProto_StartLoad1_ID {
  NetProto_StartLoad1_ID_GROUPID = 2,
  NetProto_StartLoad1_ID_UNITID = 46
};
bool NetProto_StartLoad1_ID_IsValid(int value);
const NetProto_StartLoad1_ID NetProto_StartLoad1_ID_ID_MIN = NetProto_StartLoad1_ID_GROUPID;
const NetProto_StartLoad1_ID NetProto_StartLoad1_ID_ID_MAX = NetProto_StartLoad1_ID_UNITID;
const int NetProto_StartLoad1_ID_ID_ARRAYSIZE = NetProto_StartLoad1_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StartLoad1_ID_descriptor();
inline const ::std::string& NetProto_StartLoad1_ID_Name(NetProto_StartLoad1_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StartLoad1_ID_descriptor(), value);
}
inline bool NetProto_StartLoad1_ID_Parse(
    const ::std::string& name, NetProto_StartLoad1_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StartLoad1_ID>(
    NetProto_StartLoad1_ID_descriptor(), name, value);
}
enum NetProto_EndLoad1_ID {
  NetProto_EndLoad1_ID_GROUPID = 2,
  NetProto_EndLoad1_ID_UNITID = 47
};
bool NetProto_EndLoad1_ID_IsValid(int value);
const NetProto_EndLoad1_ID NetProto_EndLoad1_ID_ID_MIN = NetProto_EndLoad1_ID_GROUPID;
const NetProto_EndLoad1_ID NetProto_EndLoad1_ID_ID_MAX = NetProto_EndLoad1_ID_UNITID;
const int NetProto_EndLoad1_ID_ID_ARRAYSIZE = NetProto_EndLoad1_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EndLoad1_ID_descriptor();
inline const ::std::string& NetProto_EndLoad1_ID_Name(NetProto_EndLoad1_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EndLoad1_ID_descriptor(), value);
}
inline bool NetProto_EndLoad1_ID_Parse(
    const ::std::string& name, NetProto_EndLoad1_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EndLoad1_ID>(
    NetProto_EndLoad1_ID_descriptor(), name, value);
}
enum NetProto_StartLoad2_ID {
  NetProto_StartLoad2_ID_GROUPID = 2,
  NetProto_StartLoad2_ID_UNITID = 48
};
bool NetProto_StartLoad2_ID_IsValid(int value);
const NetProto_StartLoad2_ID NetProto_StartLoad2_ID_ID_MIN = NetProto_StartLoad2_ID_GROUPID;
const NetProto_StartLoad2_ID NetProto_StartLoad2_ID_ID_MAX = NetProto_StartLoad2_ID_UNITID;
const int NetProto_StartLoad2_ID_ID_ARRAYSIZE = NetProto_StartLoad2_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StartLoad2_ID_descriptor();
inline const ::std::string& NetProto_StartLoad2_ID_Name(NetProto_StartLoad2_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StartLoad2_ID_descriptor(), value);
}
inline bool NetProto_StartLoad2_ID_Parse(
    const ::std::string& name, NetProto_StartLoad2_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StartLoad2_ID>(
    NetProto_StartLoad2_ID_descriptor(), name, value);
}
enum NetProto_EndLoad2_ID {
  NetProto_EndLoad2_ID_GROUPID = 2,
  NetProto_EndLoad2_ID_UNITID = 49
};
bool NetProto_EndLoad2_ID_IsValid(int value);
const NetProto_EndLoad2_ID NetProto_EndLoad2_ID_ID_MIN = NetProto_EndLoad2_ID_GROUPID;
const NetProto_EndLoad2_ID NetProto_EndLoad2_ID_ID_MAX = NetProto_EndLoad2_ID_UNITID;
const int NetProto_EndLoad2_ID_ID_ARRAYSIZE = NetProto_EndLoad2_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EndLoad2_ID_descriptor();
inline const ::std::string& NetProto_EndLoad2_ID_Name(NetProto_EndLoad2_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EndLoad2_ID_descriptor(), value);
}
inline bool NetProto_EndLoad2_ID_Parse(
    const ::std::string& name, NetProto_EndLoad2_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EndLoad2_ID>(
    NetProto_EndLoad2_ID_descriptor(), name, value);
}
enum NetProto_BeginFighting_ID {
  NetProto_BeginFighting_ID_GROUPID = 2,
  NetProto_BeginFighting_ID_UNITID = 50
};
bool NetProto_BeginFighting_ID_IsValid(int value);
const NetProto_BeginFighting_ID NetProto_BeginFighting_ID_ID_MIN = NetProto_BeginFighting_ID_GROUPID;
const NetProto_BeginFighting_ID NetProto_BeginFighting_ID_ID_MAX = NetProto_BeginFighting_ID_UNITID;
const int NetProto_BeginFighting_ID_ID_ARRAYSIZE = NetProto_BeginFighting_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BeginFighting_ID_descriptor();
inline const ::std::string& NetProto_BeginFighting_ID_Name(NetProto_BeginFighting_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BeginFighting_ID_descriptor(), value);
}
inline bool NetProto_BeginFighting_ID_Parse(
    const ::std::string& name, NetProto_BeginFighting_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BeginFighting_ID>(
    NetProto_BeginFighting_ID_descriptor(), name, value);
}
enum NetProto_DelNPCs_ID {
  NetProto_DelNPCs_ID_GROUPID = 2,
  NetProto_DelNPCs_ID_UNITID = 51
};
bool NetProto_DelNPCs_ID_IsValid(int value);
const NetProto_DelNPCs_ID NetProto_DelNPCs_ID_ID_MIN = NetProto_DelNPCs_ID_GROUPID;
const NetProto_DelNPCs_ID NetProto_DelNPCs_ID_ID_MAX = NetProto_DelNPCs_ID_UNITID;
const int NetProto_DelNPCs_ID_ID_ARRAYSIZE = NetProto_DelNPCs_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DelNPCs_ID_descriptor();
inline const ::std::string& NetProto_DelNPCs_ID_Name(NetProto_DelNPCs_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DelNPCs_ID_descriptor(), value);
}
inline bool NetProto_DelNPCs_ID_Parse(
    const ::std::string& name, NetProto_DelNPCs_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DelNPCs_ID>(
    NetProto_DelNPCs_ID_descriptor(), name, value);
}
enum NetProto_WorldBossCurRank_ID {
  NetProto_WorldBossCurRank_ID_GROUPID = 2,
  NetProto_WorldBossCurRank_ID_UNITID = 52
};
bool NetProto_WorldBossCurRank_ID_IsValid(int value);
const NetProto_WorldBossCurRank_ID NetProto_WorldBossCurRank_ID_ID_MIN = NetProto_WorldBossCurRank_ID_GROUPID;
const NetProto_WorldBossCurRank_ID NetProto_WorldBossCurRank_ID_ID_MAX = NetProto_WorldBossCurRank_ID_UNITID;
const int NetProto_WorldBossCurRank_ID_ID_ARRAYSIZE = NetProto_WorldBossCurRank_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_WorldBossCurRank_ID_descriptor();
inline const ::std::string& NetProto_WorldBossCurRank_ID_Name(NetProto_WorldBossCurRank_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_WorldBossCurRank_ID_descriptor(), value);
}
inline bool NetProto_WorldBossCurRank_ID_Parse(
    const ::std::string& name, NetProto_WorldBossCurRank_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_WorldBossCurRank_ID>(
    NetProto_WorldBossCurRank_ID_descriptor(), name, value);
}
enum NetProto_FactionWarCurRank_ID {
  NetProto_FactionWarCurRank_ID_GROUPID = 2,
  NetProto_FactionWarCurRank_ID_UNITID = 53
};
bool NetProto_FactionWarCurRank_ID_IsValid(int value);
const NetProto_FactionWarCurRank_ID NetProto_FactionWarCurRank_ID_ID_MIN = NetProto_FactionWarCurRank_ID_GROUPID;
const NetProto_FactionWarCurRank_ID NetProto_FactionWarCurRank_ID_ID_MAX = NetProto_FactionWarCurRank_ID_UNITID;
const int NetProto_FactionWarCurRank_ID_ID_ARRAYSIZE = NetProto_FactionWarCurRank_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionWarCurRank_ID_descriptor();
inline const ::std::string& NetProto_FactionWarCurRank_ID_Name(NetProto_FactionWarCurRank_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionWarCurRank_ID_descriptor(), value);
}
inline bool NetProto_FactionWarCurRank_ID_Parse(
    const ::std::string& name, NetProto_FactionWarCurRank_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionWarCurRank_ID>(
    NetProto_FactionWarCurRank_ID_descriptor(), name, value);
}
enum NetProto_FactionWarPrevWinner_ID {
  NetProto_FactionWarPrevWinner_ID_GROUPID = 2,
  NetProto_FactionWarPrevWinner_ID_UNITID = 54
};
bool NetProto_FactionWarPrevWinner_ID_IsValid(int value);
const NetProto_FactionWarPrevWinner_ID NetProto_FactionWarPrevWinner_ID_ID_MIN = NetProto_FactionWarPrevWinner_ID_GROUPID;
const NetProto_FactionWarPrevWinner_ID NetProto_FactionWarPrevWinner_ID_ID_MAX = NetProto_FactionWarPrevWinner_ID_UNITID;
const int NetProto_FactionWarPrevWinner_ID_ID_ARRAYSIZE = NetProto_FactionWarPrevWinner_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionWarPrevWinner_ID_descriptor();
inline const ::std::string& NetProto_FactionWarPrevWinner_ID_Name(NetProto_FactionWarPrevWinner_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionWarPrevWinner_ID_descriptor(), value);
}
inline bool NetProto_FactionWarPrevWinner_ID_Parse(
    const ::std::string& name, NetProto_FactionWarPrevWinner_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionWarPrevWinner_ID>(
    NetProto_FactionWarPrevWinner_ID_descriptor(), name, value);
}
enum NetProto_GetMonthCardAward_ID {
  NetProto_GetMonthCardAward_ID_GROUPID = 2,
  NetProto_GetMonthCardAward_ID_UNITID = 55
};
bool NetProto_GetMonthCardAward_ID_IsValid(int value);
const NetProto_GetMonthCardAward_ID NetProto_GetMonthCardAward_ID_ID_MIN = NetProto_GetMonthCardAward_ID_GROUPID;
const NetProto_GetMonthCardAward_ID NetProto_GetMonthCardAward_ID_ID_MAX = NetProto_GetMonthCardAward_ID_UNITID;
const int NetProto_GetMonthCardAward_ID_ID_ARRAYSIZE = NetProto_GetMonthCardAward_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GetMonthCardAward_ID_descriptor();
inline const ::std::string& NetProto_GetMonthCardAward_ID_Name(NetProto_GetMonthCardAward_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GetMonthCardAward_ID_descriptor(), value);
}
inline bool NetProto_GetMonthCardAward_ID_Parse(
    const ::std::string& name, NetProto_GetMonthCardAward_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GetMonthCardAward_ID>(
    NetProto_GetMonthCardAward_ID_descriptor(), name, value);
}
enum NetProto_ExchangeGoods_ID {
  NetProto_ExchangeGoods_ID_GROUPID = 2,
  NetProto_ExchangeGoods_ID_UNITID = 56
};
bool NetProto_ExchangeGoods_ID_IsValid(int value);
const NetProto_ExchangeGoods_ID NetProto_ExchangeGoods_ID_ID_MIN = NetProto_ExchangeGoods_ID_GROUPID;
const NetProto_ExchangeGoods_ID NetProto_ExchangeGoods_ID_ID_MAX = NetProto_ExchangeGoods_ID_UNITID;
const int NetProto_ExchangeGoods_ID_ID_ARRAYSIZE = NetProto_ExchangeGoods_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ExchangeGoods_ID_descriptor();
inline const ::std::string& NetProto_ExchangeGoods_ID_Name(NetProto_ExchangeGoods_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ExchangeGoods_ID_descriptor(), value);
}
inline bool NetProto_ExchangeGoods_ID_Parse(
    const ::std::string& name, NetProto_ExchangeGoods_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ExchangeGoods_ID>(
    NetProto_ExchangeGoods_ID_descriptor(), name, value);
}
enum NetProto_BuyMonthCard_ID {
  NetProto_BuyMonthCard_ID_GROUPID = 2,
  NetProto_BuyMonthCard_ID_UNITID = 57
};
bool NetProto_BuyMonthCard_ID_IsValid(int value);
const NetProto_BuyMonthCard_ID NetProto_BuyMonthCard_ID_ID_MIN = NetProto_BuyMonthCard_ID_GROUPID;
const NetProto_BuyMonthCard_ID NetProto_BuyMonthCard_ID_ID_MAX = NetProto_BuyMonthCard_ID_UNITID;
const int NetProto_BuyMonthCard_ID_ID_ARRAYSIZE = NetProto_BuyMonthCard_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BuyMonthCard_ID_descriptor();
inline const ::std::string& NetProto_BuyMonthCard_ID_Name(NetProto_BuyMonthCard_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BuyMonthCard_ID_descriptor(), value);
}
inline bool NetProto_BuyMonthCard_ID_Parse(
    const ::std::string& name, NetProto_BuyMonthCard_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BuyMonthCard_ID>(
    NetProto_BuyMonthCard_ID_descriptor(), name, value);
}
enum NetProto_UseLuckyCard_ID {
  NetProto_UseLuckyCard_ID_GROUPID = 2,
  NetProto_UseLuckyCard_ID_UNITID = 58
};
bool NetProto_UseLuckyCard_ID_IsValid(int value);
const NetProto_UseLuckyCard_ID NetProto_UseLuckyCard_ID_ID_MIN = NetProto_UseLuckyCard_ID_GROUPID;
const NetProto_UseLuckyCard_ID NetProto_UseLuckyCard_ID_ID_MAX = NetProto_UseLuckyCard_ID_UNITID;
const int NetProto_UseLuckyCard_ID_ID_ARRAYSIZE = NetProto_UseLuckyCard_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UseLuckyCard_ID_descriptor();
inline const ::std::string& NetProto_UseLuckyCard_ID_Name(NetProto_UseLuckyCard_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UseLuckyCard_ID_descriptor(), value);
}
inline bool NetProto_UseLuckyCard_ID_Parse(
    const ::std::string& name, NetProto_UseLuckyCard_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UseLuckyCard_ID>(
    NetProto_UseLuckyCard_ID_descriptor(), name, value);
}
enum NetProto_BIActive_ID {
  NetProto_BIActive_ID_GROUPID = 2,
  NetProto_BIActive_ID_UNITID = 59
};
bool NetProto_BIActive_ID_IsValid(int value);
const NetProto_BIActive_ID NetProto_BIActive_ID_ID_MIN = NetProto_BIActive_ID_GROUPID;
const NetProto_BIActive_ID NetProto_BIActive_ID_ID_MAX = NetProto_BIActive_ID_UNITID;
const int NetProto_BIActive_ID_ID_ARRAYSIZE = NetProto_BIActive_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BIActive_ID_descriptor();
inline const ::std::string& NetProto_BIActive_ID_Name(NetProto_BIActive_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BIActive_ID_descriptor(), value);
}
inline bool NetProto_BIActive_ID_Parse(
    const ::std::string& name, NetProto_BIActive_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BIActive_ID>(
    NetProto_BIActive_ID_descriptor(), name, value);
}
enum NetProto_Move_ID {
  NetProto_Move_ID_GROUPID = 3,
  NetProto_Move_ID_UNITID = 0
};
bool NetProto_Move_ID_IsValid(int value);
const NetProto_Move_ID NetProto_Move_ID_ID_MIN = NetProto_Move_ID_UNITID;
const NetProto_Move_ID NetProto_Move_ID_ID_MAX = NetProto_Move_ID_GROUPID;
const int NetProto_Move_ID_ID_ARRAYSIZE = NetProto_Move_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Move_ID_descriptor();
inline const ::std::string& NetProto_Move_ID_Name(NetProto_Move_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Move_ID_descriptor(), value);
}
inline bool NetProto_Move_ID_Parse(
    const ::std::string& name, NetProto_Move_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Move_ID>(
    NetProto_Move_ID_descriptor(), name, value);
}
enum NetProto_Move_Type {
  NetProto_Move_Type_PLAYER = 0,
  NetProto_Move_Type_NPC = 1
};
bool NetProto_Move_Type_IsValid(int value);
const NetProto_Move_Type NetProto_Move_Type_Type_MIN = NetProto_Move_Type_PLAYER;
const NetProto_Move_Type NetProto_Move_Type_Type_MAX = NetProto_Move_Type_NPC;
const int NetProto_Move_Type_Type_ARRAYSIZE = NetProto_Move_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Move_Type_descriptor();
inline const ::std::string& NetProto_Move_Type_Name(NetProto_Move_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Move_Type_descriptor(), value);
}
inline bool NetProto_Move_Type_Parse(
    const ::std::string& name, NetProto_Move_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Move_Type>(
    NetProto_Move_Type_descriptor(), name, value);
}
enum NetProto_Wear_ID {
  NetProto_Wear_ID_GROUPID = 3,
  NetProto_Wear_ID_UNITID = 1
};
bool NetProto_Wear_ID_IsValid(int value);
const NetProto_Wear_ID NetProto_Wear_ID_ID_MIN = NetProto_Wear_ID_UNITID;
const NetProto_Wear_ID NetProto_Wear_ID_ID_MAX = NetProto_Wear_ID_GROUPID;
const int NetProto_Wear_ID_ID_ARRAYSIZE = NetProto_Wear_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Wear_ID_descriptor();
inline const ::std::string& NetProto_Wear_ID_Name(NetProto_Wear_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Wear_ID_descriptor(), value);
}
inline bool NetProto_Wear_ID_Parse(
    const ::std::string& name, NetProto_Wear_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Wear_ID>(
    NetProto_Wear_ID_descriptor(), name, value);
}
enum NetProto_Unwear_ID {
  NetProto_Unwear_ID_GROUPID = 3,
  NetProto_Unwear_ID_UNITID = 2
};
bool NetProto_Unwear_ID_IsValid(int value);
const NetProto_Unwear_ID NetProto_Unwear_ID_ID_MIN = NetProto_Unwear_ID_UNITID;
const NetProto_Unwear_ID NetProto_Unwear_ID_ID_MAX = NetProto_Unwear_ID_GROUPID;
const int NetProto_Unwear_ID_ID_ARRAYSIZE = NetProto_Unwear_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Unwear_ID_descriptor();
inline const ::std::string& NetProto_Unwear_ID_Name(NetProto_Unwear_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Unwear_ID_descriptor(), value);
}
inline bool NetProto_Unwear_ID_Parse(
    const ::std::string& name, NetProto_Unwear_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Unwear_ID>(
    NetProto_Unwear_ID_descriptor(), name, value);
}
enum NetProto_Attack_ID {
  NetProto_Attack_ID_GROUPID = 3,
  NetProto_Attack_ID_UNITID = 3
};
bool NetProto_Attack_ID_IsValid(int value);
const NetProto_Attack_ID NetProto_Attack_ID_ID_MIN = NetProto_Attack_ID_GROUPID;
const NetProto_Attack_ID NetProto_Attack_ID_ID_MAX = NetProto_Attack_ID_GROUPID;
const int NetProto_Attack_ID_ID_ARRAYSIZE = NetProto_Attack_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Attack_ID_descriptor();
inline const ::std::string& NetProto_Attack_ID_Name(NetProto_Attack_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Attack_ID_descriptor(), value);
}
inline bool NetProto_Attack_ID_Parse(
    const ::std::string& name, NetProto_Attack_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Attack_ID>(
    NetProto_Attack_ID_descriptor(), name, value);
}
enum NetProto_Attack_Type {
  NetProto_Attack_Type_PLAYER = 0,
  NetProto_Attack_Type_NPC = 1
};
bool NetProto_Attack_Type_IsValid(int value);
const NetProto_Attack_Type NetProto_Attack_Type_Type_MIN = NetProto_Attack_Type_PLAYER;
const NetProto_Attack_Type NetProto_Attack_Type_Type_MAX = NetProto_Attack_Type_NPC;
const int NetProto_Attack_Type_Type_ARRAYSIZE = NetProto_Attack_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Attack_Type_descriptor();
inline const ::std::string& NetProto_Attack_Type_Name(NetProto_Attack_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Attack_Type_descriptor(), value);
}
inline bool NetProto_Attack_Type_Parse(
    const ::std::string& name, NetProto_Attack_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Attack_Type>(
    NetProto_Attack_Type_descriptor(), name, value);
}
enum NetProto_DoAttack_ID {
  NetProto_DoAttack_ID_GROUPID = 3,
  NetProto_DoAttack_ID_UNITID = 4
};
bool NetProto_DoAttack_ID_IsValid(int value);
const NetProto_DoAttack_ID NetProto_DoAttack_ID_ID_MIN = NetProto_DoAttack_ID_GROUPID;
const NetProto_DoAttack_ID NetProto_DoAttack_ID_ID_MAX = NetProto_DoAttack_ID_UNITID;
const int NetProto_DoAttack_ID_ID_ARRAYSIZE = NetProto_DoAttack_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DoAttack_ID_descriptor();
inline const ::std::string& NetProto_DoAttack_ID_Name(NetProto_DoAttack_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DoAttack_ID_descriptor(), value);
}
inline bool NetProto_DoAttack_ID_Parse(
    const ::std::string& name, NetProto_DoAttack_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DoAttack_ID>(
    NetProto_DoAttack_ID_descriptor(), name, value);
}
enum NetProto_DoAttack_Type {
  NetProto_DoAttack_Type_PLAYER = 0,
  NetProto_DoAttack_Type_NPC = 1
};
bool NetProto_DoAttack_Type_IsValid(int value);
const NetProto_DoAttack_Type NetProto_DoAttack_Type_Type_MIN = NetProto_DoAttack_Type_PLAYER;
const NetProto_DoAttack_Type NetProto_DoAttack_Type_Type_MAX = NetProto_DoAttack_Type_NPC;
const int NetProto_DoAttack_Type_Type_ARRAYSIZE = NetProto_DoAttack_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DoAttack_Type_descriptor();
inline const ::std::string& NetProto_DoAttack_Type_Name(NetProto_DoAttack_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DoAttack_Type_descriptor(), value);
}
inline bool NetProto_DoAttack_Type_Parse(
    const ::std::string& name, NetProto_DoAttack_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DoAttack_Type>(
    NetProto_DoAttack_Type_descriptor(), name, value);
}
enum NetProto_SetPos_ID {
  NetProto_SetPos_ID_GROUPID = 3,
  NetProto_SetPos_ID_UNITID = 5
};
bool NetProto_SetPos_ID_IsValid(int value);
const NetProto_SetPos_ID NetProto_SetPos_ID_ID_MIN = NetProto_SetPos_ID_GROUPID;
const NetProto_SetPos_ID NetProto_SetPos_ID_ID_MAX = NetProto_SetPos_ID_UNITID;
const int NetProto_SetPos_ID_ID_ARRAYSIZE = NetProto_SetPos_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SetPos_ID_descriptor();
inline const ::std::string& NetProto_SetPos_ID_Name(NetProto_SetPos_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SetPos_ID_descriptor(), value);
}
inline bool NetProto_SetPos_ID_Parse(
    const ::std::string& name, NetProto_SetPos_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SetPos_ID>(
    NetProto_SetPos_ID_descriptor(), name, value);
}
enum NetProto_Die_ID {
  NetProto_Die_ID_GROUPID = 3,
  NetProto_Die_ID_UNITID = 6
};
bool NetProto_Die_ID_IsValid(int value);
const NetProto_Die_ID NetProto_Die_ID_ID_MIN = NetProto_Die_ID_GROUPID;
const NetProto_Die_ID NetProto_Die_ID_ID_MAX = NetProto_Die_ID_UNITID;
const int NetProto_Die_ID_ID_ARRAYSIZE = NetProto_Die_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Die_ID_descriptor();
inline const ::std::string& NetProto_Die_ID_Name(NetProto_Die_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Die_ID_descriptor(), value);
}
inline bool NetProto_Die_ID_Parse(
    const ::std::string& name, NetProto_Die_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Die_ID>(
    NetProto_Die_ID_descriptor(), name, value);
}
enum NetProto_Die_Type {
  NetProto_Die_Type_PLAYER = 0,
  NetProto_Die_Type_NPC = 1
};
bool NetProto_Die_Type_IsValid(int value);
const NetProto_Die_Type NetProto_Die_Type_Type_MIN = NetProto_Die_Type_PLAYER;
const NetProto_Die_Type NetProto_Die_Type_Type_MAX = NetProto_Die_Type_NPC;
const int NetProto_Die_Type_Type_ARRAYSIZE = NetProto_Die_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Die_Type_descriptor();
inline const ::std::string& NetProto_Die_Type_Name(NetProto_Die_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Die_Type_descriptor(), value);
}
inline bool NetProto_Die_Type_Parse(
    const ::std::string& name, NetProto_Die_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Die_Type>(
    NetProto_Die_Type_descriptor(), name, value);
}
enum NetProto_Revive_ID {
  NetProto_Revive_ID_GROUPID = 3,
  NetProto_Revive_ID_UNITID = 7
};
bool NetProto_Revive_ID_IsValid(int value);
const NetProto_Revive_ID NetProto_Revive_ID_ID_MIN = NetProto_Revive_ID_GROUPID;
const NetProto_Revive_ID NetProto_Revive_ID_ID_MAX = NetProto_Revive_ID_UNITID;
const int NetProto_Revive_ID_ID_ARRAYSIZE = NetProto_Revive_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Revive_ID_descriptor();
inline const ::std::string& NetProto_Revive_ID_Name(NetProto_Revive_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Revive_ID_descriptor(), value);
}
inline bool NetProto_Revive_ID_Parse(
    const ::std::string& name, NetProto_Revive_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Revive_ID>(
    NetProto_Revive_ID_descriptor(), name, value);
}
enum NetProto_Revive_Type {
  NetProto_Revive_Type_PLAYER = 0,
  NetProto_Revive_Type_NPC = 1,
  NetProto_Revive_Type_PET = 2
};
bool NetProto_Revive_Type_IsValid(int value);
const NetProto_Revive_Type NetProto_Revive_Type_Type_MIN = NetProto_Revive_Type_PLAYER;
const NetProto_Revive_Type NetProto_Revive_Type_Type_MAX = NetProto_Revive_Type_PET;
const int NetProto_Revive_Type_Type_ARRAYSIZE = NetProto_Revive_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Revive_Type_descriptor();
inline const ::std::string& NetProto_Revive_Type_Name(NetProto_Revive_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Revive_Type_descriptor(), value);
}
inline bool NetProto_Revive_Type_Parse(
    const ::std::string& name, NetProto_Revive_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Revive_Type>(
    NetProto_Revive_Type_descriptor(), name, value);
}
enum NetProto_Revive_Way {
  NetProto_Revive_Way_CUR = 0,
  NetProto_Revive_Way_BEGIN = 1,
  NetProto_Revive_Way_CITY = 2
};
bool NetProto_Revive_Way_IsValid(int value);
const NetProto_Revive_Way NetProto_Revive_Way_Way_MIN = NetProto_Revive_Way_CUR;
const NetProto_Revive_Way NetProto_Revive_Way_Way_MAX = NetProto_Revive_Way_CITY;
const int NetProto_Revive_Way_Way_ARRAYSIZE = NetProto_Revive_Way_Way_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Revive_Way_descriptor();
inline const ::std::string& NetProto_Revive_Way_Name(NetProto_Revive_Way value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Revive_Way_descriptor(), value);
}
inline bool NetProto_Revive_Way_Parse(
    const ::std::string& name, NetProto_Revive_Way* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Revive_Way>(
    NetProto_Revive_Way_descriptor(), name, value);
}
enum NetProto_ModifyExp_ID {
  NetProto_ModifyExp_ID_GROUPID = 3,
  NetProto_ModifyExp_ID_UNITID = 8
};
bool NetProto_ModifyExp_ID_IsValid(int value);
const NetProto_ModifyExp_ID NetProto_ModifyExp_ID_ID_MIN = NetProto_ModifyExp_ID_GROUPID;
const NetProto_ModifyExp_ID NetProto_ModifyExp_ID_ID_MAX = NetProto_ModifyExp_ID_UNITID;
const int NetProto_ModifyExp_ID_ID_ARRAYSIZE = NetProto_ModifyExp_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyExp_ID_descriptor();
inline const ::std::string& NetProto_ModifyExp_ID_Name(NetProto_ModifyExp_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyExp_ID_descriptor(), value);
}
inline bool NetProto_ModifyExp_ID_Parse(
    const ::std::string& name, NetProto_ModifyExp_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyExp_ID>(
    NetProto_ModifyExp_ID_descriptor(), name, value);
}
enum NetProto_PickItem_ID {
  NetProto_PickItem_ID_GROUPID = 3,
  NetProto_PickItem_ID_UNITID = 10
};
bool NetProto_PickItem_ID_IsValid(int value);
const NetProto_PickItem_ID NetProto_PickItem_ID_ID_MIN = NetProto_PickItem_ID_GROUPID;
const NetProto_PickItem_ID NetProto_PickItem_ID_ID_MAX = NetProto_PickItem_ID_UNITID;
const int NetProto_PickItem_ID_ID_ARRAYSIZE = NetProto_PickItem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PickItem_ID_descriptor();
inline const ::std::string& NetProto_PickItem_ID_Name(NetProto_PickItem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PickItem_ID_descriptor(), value);
}
inline bool NetProto_PickItem_ID_Parse(
    const ::std::string& name, NetProto_PickItem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PickItem_ID>(
    NetProto_PickItem_ID_descriptor(), name, value);
}
enum NetProto_LevelUp_ID {
  NetProto_LevelUp_ID_GROUPID = 3,
  NetProto_LevelUp_ID_UNITID = 11
};
bool NetProto_LevelUp_ID_IsValid(int value);
const NetProto_LevelUp_ID NetProto_LevelUp_ID_ID_MIN = NetProto_LevelUp_ID_GROUPID;
const NetProto_LevelUp_ID NetProto_LevelUp_ID_ID_MAX = NetProto_LevelUp_ID_UNITID;
const int NetProto_LevelUp_ID_ID_ARRAYSIZE = NetProto_LevelUp_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_LevelUp_ID_descriptor();
inline const ::std::string& NetProto_LevelUp_ID_Name(NetProto_LevelUp_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_LevelUp_ID_descriptor(), value);
}
inline bool NetProto_LevelUp_ID_Parse(
    const ::std::string& name, NetProto_LevelUp_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_LevelUp_ID>(
    NetProto_LevelUp_ID_descriptor(), name, value);
}
enum NetProto_ModifyMoney_ID {
  NetProto_ModifyMoney_ID_GROUPID = 3,
  NetProto_ModifyMoney_ID_UNITID = 12
};
bool NetProto_ModifyMoney_ID_IsValid(int value);
const NetProto_ModifyMoney_ID NetProto_ModifyMoney_ID_ID_MIN = NetProto_ModifyMoney_ID_GROUPID;
const NetProto_ModifyMoney_ID NetProto_ModifyMoney_ID_ID_MAX = NetProto_ModifyMoney_ID_UNITID;
const int NetProto_ModifyMoney_ID_ID_ARRAYSIZE = NetProto_ModifyMoney_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyMoney_ID_descriptor();
inline const ::std::string& NetProto_ModifyMoney_ID_Name(NetProto_ModifyMoney_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyMoney_ID_descriptor(), value);
}
inline bool NetProto_ModifyMoney_ID_Parse(
    const ::std::string& name, NetProto_ModifyMoney_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyMoney_ID>(
    NetProto_ModifyMoney_ID_descriptor(), name, value);
}
enum NetProto_GetItem_ID {
  NetProto_GetItem_ID_GROUPID = 3,
  NetProto_GetItem_ID_UNITID = 13
};
bool NetProto_GetItem_ID_IsValid(int value);
const NetProto_GetItem_ID NetProto_GetItem_ID_ID_MIN = NetProto_GetItem_ID_GROUPID;
const NetProto_GetItem_ID NetProto_GetItem_ID_ID_MAX = NetProto_GetItem_ID_UNITID;
const int NetProto_GetItem_ID_ID_ARRAYSIZE = NetProto_GetItem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GetItem_ID_descriptor();
inline const ::std::string& NetProto_GetItem_ID_Name(NetProto_GetItem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GetItem_ID_descriptor(), value);
}
inline bool NetProto_GetItem_ID_Parse(
    const ::std::string& name, NetProto_GetItem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GetItem_ID>(
    NetProto_GetItem_ID_descriptor(), name, value);
}
enum NetProto_QueryPlayer_ID {
  NetProto_QueryPlayer_ID_GROUPID = 3,
  NetProto_QueryPlayer_ID_UNITID = 14
};
bool NetProto_QueryPlayer_ID_IsValid(int value);
const NetProto_QueryPlayer_ID NetProto_QueryPlayer_ID_ID_MIN = NetProto_QueryPlayer_ID_GROUPID;
const NetProto_QueryPlayer_ID NetProto_QueryPlayer_ID_ID_MAX = NetProto_QueryPlayer_ID_UNITID;
const int NetProto_QueryPlayer_ID_ID_ARRAYSIZE = NetProto_QueryPlayer_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_QueryPlayer_ID_descriptor();
inline const ::std::string& NetProto_QueryPlayer_ID_Name(NetProto_QueryPlayer_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_QueryPlayer_ID_descriptor(), value);
}
inline bool NetProto_QueryPlayer_ID_Parse(
    const ::std::string& name, NetProto_QueryPlayer_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_QueryPlayer_ID>(
    NetProto_QueryPlayer_ID_descriptor(), name, value);
}
enum NetProto_PlayerStatus_ID {
  NetProto_PlayerStatus_ID_GROUPID = 3,
  NetProto_PlayerStatus_ID_UNITID = 15
};
bool NetProto_PlayerStatus_ID_IsValid(int value);
const NetProto_PlayerStatus_ID NetProto_PlayerStatus_ID_ID_MIN = NetProto_PlayerStatus_ID_GROUPID;
const NetProto_PlayerStatus_ID NetProto_PlayerStatus_ID_ID_MAX = NetProto_PlayerStatus_ID_UNITID;
const int NetProto_PlayerStatus_ID_ID_ARRAYSIZE = NetProto_PlayerStatus_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PlayerStatus_ID_descriptor();
inline const ::std::string& NetProto_PlayerStatus_ID_Name(NetProto_PlayerStatus_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PlayerStatus_ID_descriptor(), value);
}
inline bool NetProto_PlayerStatus_ID_Parse(
    const ::std::string& name, NetProto_PlayerStatus_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PlayerStatus_ID>(
    NetProto_PlayerStatus_ID_descriptor(), name, value);
}
enum NetProto_PlayerStatus_Status {
  NetProto_PlayerStatus_Status_OFFLINE = 0,
  NetProto_PlayerStatus_Status_ONLINE = 1
};
bool NetProto_PlayerStatus_Status_IsValid(int value);
const NetProto_PlayerStatus_Status NetProto_PlayerStatus_Status_Status_MIN = NetProto_PlayerStatus_Status_OFFLINE;
const NetProto_PlayerStatus_Status NetProto_PlayerStatus_Status_Status_MAX = NetProto_PlayerStatus_Status_ONLINE;
const int NetProto_PlayerStatus_Status_Status_ARRAYSIZE = NetProto_PlayerStatus_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PlayerStatus_Status_descriptor();
inline const ::std::string& NetProto_PlayerStatus_Status_Name(NetProto_PlayerStatus_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PlayerStatus_Status_descriptor(), value);
}
inline bool NetProto_PlayerStatus_Status_Parse(
    const ::std::string& name, NetProto_PlayerStatus_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PlayerStatus_Status>(
    NetProto_PlayerStatus_Status_descriptor(), name, value);
}
enum NetProto_AddFriend_ID {
  NetProto_AddFriend_ID_GROUPID = 3,
  NetProto_AddFriend_ID_UNITID = 16
};
bool NetProto_AddFriend_ID_IsValid(int value);
const NetProto_AddFriend_ID NetProto_AddFriend_ID_ID_MIN = NetProto_AddFriend_ID_GROUPID;
const NetProto_AddFriend_ID NetProto_AddFriend_ID_ID_MAX = NetProto_AddFriend_ID_UNITID;
const int NetProto_AddFriend_ID_ID_ARRAYSIZE = NetProto_AddFriend_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddFriend_ID_descriptor();
inline const ::std::string& NetProto_AddFriend_ID_Name(NetProto_AddFriend_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddFriend_ID_descriptor(), value);
}
inline bool NetProto_AddFriend_ID_Parse(
    const ::std::string& name, NetProto_AddFriend_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddFriend_ID>(
    NetProto_AddFriend_ID_descriptor(), name, value);
}
enum NetProto_DelFriend_ID {
  NetProto_DelFriend_ID_GROUPID = 3,
  NetProto_DelFriend_ID_UNITID = 17
};
bool NetProto_DelFriend_ID_IsValid(int value);
const NetProto_DelFriend_ID NetProto_DelFriend_ID_ID_MIN = NetProto_DelFriend_ID_GROUPID;
const NetProto_DelFriend_ID NetProto_DelFriend_ID_ID_MAX = NetProto_DelFriend_ID_UNITID;
const int NetProto_DelFriend_ID_ID_ARRAYSIZE = NetProto_DelFriend_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DelFriend_ID_descriptor();
inline const ::std::string& NetProto_DelFriend_ID_Name(NetProto_DelFriend_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DelFriend_ID_descriptor(), value);
}
inline bool NetProto_DelFriend_ID_Parse(
    const ::std::string& name, NetProto_DelFriend_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DelFriend_ID>(
    NetProto_DelFriend_ID_descriptor(), name, value);
}
enum NetProto_ModifyHP_ID {
  NetProto_ModifyHP_ID_GROUPID = 3,
  NetProto_ModifyHP_ID_UNITID = 18
};
bool NetProto_ModifyHP_ID_IsValid(int value);
const NetProto_ModifyHP_ID NetProto_ModifyHP_ID_ID_MIN = NetProto_ModifyHP_ID_GROUPID;
const NetProto_ModifyHP_ID NetProto_ModifyHP_ID_ID_MAX = NetProto_ModifyHP_ID_UNITID;
const int NetProto_ModifyHP_ID_ID_ARRAYSIZE = NetProto_ModifyHP_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyHP_ID_descriptor();
inline const ::std::string& NetProto_ModifyHP_ID_Name(NetProto_ModifyHP_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyHP_ID_descriptor(), value);
}
inline bool NetProto_ModifyHP_ID_Parse(
    const ::std::string& name, NetProto_ModifyHP_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyHP_ID>(
    NetProto_ModifyHP_ID_descriptor(), name, value);
}
enum NetProto_ModifyMana_ID {
  NetProto_ModifyMana_ID_GROUPID = 3,
  NetProto_ModifyMana_ID_UNITID = 19
};
bool NetProto_ModifyMana_ID_IsValid(int value);
const NetProto_ModifyMana_ID NetProto_ModifyMana_ID_ID_MIN = NetProto_ModifyMana_ID_GROUPID;
const NetProto_ModifyMana_ID NetProto_ModifyMana_ID_ID_MAX = NetProto_ModifyMana_ID_UNITID;
const int NetProto_ModifyMana_ID_ID_ARRAYSIZE = NetProto_ModifyMana_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyMana_ID_descriptor();
inline const ::std::string& NetProto_ModifyMana_ID_Name(NetProto_ModifyMana_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyMana_ID_descriptor(), value);
}
inline bool NetProto_ModifyMana_ID_Parse(
    const ::std::string& name, NetProto_ModifyMana_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyMana_ID>(
    NetProto_ModifyMana_ID_descriptor(), name, value);
}
enum NetProto_ModifyFaction_ID {
  NetProto_ModifyFaction_ID_GROUPID = 3,
  NetProto_ModifyFaction_ID_UNITID = 20
};
bool NetProto_ModifyFaction_ID_IsValid(int value);
const NetProto_ModifyFaction_ID NetProto_ModifyFaction_ID_ID_MIN = NetProto_ModifyFaction_ID_GROUPID;
const NetProto_ModifyFaction_ID NetProto_ModifyFaction_ID_ID_MAX = NetProto_ModifyFaction_ID_UNITID;
const int NetProto_ModifyFaction_ID_ID_ARRAYSIZE = NetProto_ModifyFaction_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyFaction_ID_descriptor();
inline const ::std::string& NetProto_ModifyFaction_ID_Name(NetProto_ModifyFaction_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyFaction_ID_descriptor(), value);
}
inline bool NetProto_ModifyFaction_ID_Parse(
    const ::std::string& name, NetProto_ModifyFaction_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyFaction_ID>(
    NetProto_ModifyFaction_ID_descriptor(), name, value);
}
enum NetProto_ModifyFaction_Type {
  NetProto_ModifyFaction_Type_PLAYER = 0,
  NetProto_ModifyFaction_Type_NPC = 1
};
bool NetProto_ModifyFaction_Type_IsValid(int value);
const NetProto_ModifyFaction_Type NetProto_ModifyFaction_Type_Type_MIN = NetProto_ModifyFaction_Type_PLAYER;
const NetProto_ModifyFaction_Type NetProto_ModifyFaction_Type_Type_MAX = NetProto_ModifyFaction_Type_NPC;
const int NetProto_ModifyFaction_Type_Type_ARRAYSIZE = NetProto_ModifyFaction_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyFaction_Type_descriptor();
inline const ::std::string& NetProto_ModifyFaction_Type_Name(NetProto_ModifyFaction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyFaction_Type_descriptor(), value);
}
inline bool NetProto_ModifyFaction_Type_Parse(
    const ::std::string& name, NetProto_ModifyFaction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyFaction_Type>(
    NetProto_ModifyFaction_Type_descriptor(), name, value);
}
enum NetProto_ModifyMaxHP_ID {
  NetProto_ModifyMaxHP_ID_GROUPID = 3,
  NetProto_ModifyMaxHP_ID_UNITID = 21
};
bool NetProto_ModifyMaxHP_ID_IsValid(int value);
const NetProto_ModifyMaxHP_ID NetProto_ModifyMaxHP_ID_ID_MIN = NetProto_ModifyMaxHP_ID_GROUPID;
const NetProto_ModifyMaxHP_ID NetProto_ModifyMaxHP_ID_ID_MAX = NetProto_ModifyMaxHP_ID_UNITID;
const int NetProto_ModifyMaxHP_ID_ID_ARRAYSIZE = NetProto_ModifyMaxHP_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyMaxHP_ID_descriptor();
inline const ::std::string& NetProto_ModifyMaxHP_ID_Name(NetProto_ModifyMaxHP_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyMaxHP_ID_descriptor(), value);
}
inline bool NetProto_ModifyMaxHP_ID_Parse(
    const ::std::string& name, NetProto_ModifyMaxHP_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyMaxHP_ID>(
    NetProto_ModifyMaxHP_ID_descriptor(), name, value);
}
enum NetProto_RequestPK_ID {
  NetProto_RequestPK_ID_GROUPID = 3,
  NetProto_RequestPK_ID_UNITID = 22
};
bool NetProto_RequestPK_ID_IsValid(int value);
const NetProto_RequestPK_ID NetProto_RequestPK_ID_ID_MIN = NetProto_RequestPK_ID_GROUPID;
const NetProto_RequestPK_ID NetProto_RequestPK_ID_ID_MAX = NetProto_RequestPK_ID_UNITID;
const int NetProto_RequestPK_ID_ID_ARRAYSIZE = NetProto_RequestPK_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RequestPK_ID_descriptor();
inline const ::std::string& NetProto_RequestPK_ID_Name(NetProto_RequestPK_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RequestPK_ID_descriptor(), value);
}
inline bool NetProto_RequestPK_ID_Parse(
    const ::std::string& name, NetProto_RequestPK_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RequestPK_ID>(
    NetProto_RequestPK_ID_descriptor(), name, value);
}
enum NetProto_ApplyPK_ID {
  NetProto_ApplyPK_ID_GROUPID = 3,
  NetProto_ApplyPK_ID_UNITID = 23
};
bool NetProto_ApplyPK_ID_IsValid(int value);
const NetProto_ApplyPK_ID NetProto_ApplyPK_ID_ID_MIN = NetProto_ApplyPK_ID_GROUPID;
const NetProto_ApplyPK_ID NetProto_ApplyPK_ID_ID_MAX = NetProto_ApplyPK_ID_UNITID;
const int NetProto_ApplyPK_ID_ID_ARRAYSIZE = NetProto_ApplyPK_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ApplyPK_ID_descriptor();
inline const ::std::string& NetProto_ApplyPK_ID_Name(NetProto_ApplyPK_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ApplyPK_ID_descriptor(), value);
}
inline bool NetProto_ApplyPK_ID_Parse(
    const ::std::string& name, NetProto_ApplyPK_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ApplyPK_ID>(
    NetProto_ApplyPK_ID_descriptor(), name, value);
}
enum NetProto_Strong_ID {
  NetProto_Strong_ID_GROUPID = 3,
  NetProto_Strong_ID_UNITID = 24
};
bool NetProto_Strong_ID_IsValid(int value);
const NetProto_Strong_ID NetProto_Strong_ID_ID_MIN = NetProto_Strong_ID_GROUPID;
const NetProto_Strong_ID NetProto_Strong_ID_ID_MAX = NetProto_Strong_ID_UNITID;
const int NetProto_Strong_ID_ID_ARRAYSIZE = NetProto_Strong_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Strong_ID_descriptor();
inline const ::std::string& NetProto_Strong_ID_Name(NetProto_Strong_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Strong_ID_descriptor(), value);
}
inline bool NetProto_Strong_ID_Parse(
    const ::std::string& name, NetProto_Strong_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Strong_ID>(
    NetProto_Strong_ID_descriptor(), name, value);
}
enum NetProto_Strong_Pos {
  NetProto_Strong_Pos_BODY = 0,
  NetProto_Strong_Pos_PACKAGE = 1
};
bool NetProto_Strong_Pos_IsValid(int value);
const NetProto_Strong_Pos NetProto_Strong_Pos_Pos_MIN = NetProto_Strong_Pos_BODY;
const NetProto_Strong_Pos NetProto_Strong_Pos_Pos_MAX = NetProto_Strong_Pos_PACKAGE;
const int NetProto_Strong_Pos_Pos_ARRAYSIZE = NetProto_Strong_Pos_Pos_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Strong_Pos_descriptor();
inline const ::std::string& NetProto_Strong_Pos_Name(NetProto_Strong_Pos value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Strong_Pos_descriptor(), value);
}
inline bool NetProto_Strong_Pos_Parse(
    const ::std::string& name, NetProto_Strong_Pos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Strong_Pos>(
    NetProto_Strong_Pos_descriptor(), name, value);
}
enum NetProto_Strong_Result {
  NetProto_Strong_Result_SUCCESS = 0,
  NetProto_Strong_Result_NOTHING = 1,
  NetProto_Strong_Result_FAILURE = 2
};
bool NetProto_Strong_Result_IsValid(int value);
const NetProto_Strong_Result NetProto_Strong_Result_Result_MIN = NetProto_Strong_Result_SUCCESS;
const NetProto_Strong_Result NetProto_Strong_Result_Result_MAX = NetProto_Strong_Result_FAILURE;
const int NetProto_Strong_Result_Result_ARRAYSIZE = NetProto_Strong_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Strong_Result_descriptor();
inline const ::std::string& NetProto_Strong_Result_Name(NetProto_Strong_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Strong_Result_descriptor(), value);
}
inline bool NetProto_Strong_Result_Parse(
    const ::std::string& name, NetProto_Strong_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Strong_Result>(
    NetProto_Strong_Result_descriptor(), name, value);
}
enum NetProto_ClearStrong_ID {
  NetProto_ClearStrong_ID_GROUPID = 3,
  NetProto_ClearStrong_ID_UNITID = 25
};
bool NetProto_ClearStrong_ID_IsValid(int value);
const NetProto_ClearStrong_ID NetProto_ClearStrong_ID_ID_MIN = NetProto_ClearStrong_ID_GROUPID;
const NetProto_ClearStrong_ID NetProto_ClearStrong_ID_ID_MAX = NetProto_ClearStrong_ID_UNITID;
const int NetProto_ClearStrong_ID_ID_ARRAYSIZE = NetProto_ClearStrong_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ClearStrong_ID_descriptor();
inline const ::std::string& NetProto_ClearStrong_ID_Name(NetProto_ClearStrong_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ClearStrong_ID_descriptor(), value);
}
inline bool NetProto_ClearStrong_ID_Parse(
    const ::std::string& name, NetProto_ClearStrong_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ClearStrong_ID>(
    NetProto_ClearStrong_ID_descriptor(), name, value);
}
enum NetProto_ClearStrong_Pos {
  NetProto_ClearStrong_Pos_BODY = 0,
  NetProto_ClearStrong_Pos_PACKAGE = 1
};
bool NetProto_ClearStrong_Pos_IsValid(int value);
const NetProto_ClearStrong_Pos NetProto_ClearStrong_Pos_Pos_MIN = NetProto_ClearStrong_Pos_BODY;
const NetProto_ClearStrong_Pos NetProto_ClearStrong_Pos_Pos_MAX = NetProto_ClearStrong_Pos_PACKAGE;
const int NetProto_ClearStrong_Pos_Pos_ARRAYSIZE = NetProto_ClearStrong_Pos_Pos_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ClearStrong_Pos_descriptor();
inline const ::std::string& NetProto_ClearStrong_Pos_Name(NetProto_ClearStrong_Pos value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ClearStrong_Pos_descriptor(), value);
}
inline bool NetProto_ClearStrong_Pos_Parse(
    const ::std::string& name, NetProto_ClearStrong_Pos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ClearStrong_Pos>(
    NetProto_ClearStrong_Pos_descriptor(), name, value);
}
enum NetProto_Transform_ID {
  NetProto_Transform_ID_GROUPID = 3,
  NetProto_Transform_ID_UNITID = 26
};
bool NetProto_Transform_ID_IsValid(int value);
const NetProto_Transform_ID NetProto_Transform_ID_ID_MIN = NetProto_Transform_ID_GROUPID;
const NetProto_Transform_ID NetProto_Transform_ID_ID_MAX = NetProto_Transform_ID_UNITID;
const int NetProto_Transform_ID_ID_ARRAYSIZE = NetProto_Transform_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Transform_ID_descriptor();
inline const ::std::string& NetProto_Transform_ID_Name(NetProto_Transform_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Transform_ID_descriptor(), value);
}
inline bool NetProto_Transform_ID_Parse(
    const ::std::string& name, NetProto_Transform_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Transform_ID>(
    NetProto_Transform_ID_descriptor(), name, value);
}
enum NetProto_Transform_Type {
  NetProto_Transform_Type_PLAYER = 0,
  NetProto_Transform_Type_NPC = 1
};
bool NetProto_Transform_Type_IsValid(int value);
const NetProto_Transform_Type NetProto_Transform_Type_Type_MIN = NetProto_Transform_Type_PLAYER;
const NetProto_Transform_Type NetProto_Transform_Type_Type_MAX = NetProto_Transform_Type_NPC;
const int NetProto_Transform_Type_Type_ARRAYSIZE = NetProto_Transform_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Transform_Type_descriptor();
inline const ::std::string& NetProto_Transform_Type_Name(NetProto_Transform_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Transform_Type_descriptor(), value);
}
inline bool NetProto_Transform_Type_Parse(
    const ::std::string& name, NetProto_Transform_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Transform_Type>(
    NetProto_Transform_Type_descriptor(), name, value);
}
enum NetProto_Mount_ID {
  NetProto_Mount_ID_GROUPID = 3,
  NetProto_Mount_ID_UNITID = 27
};
bool NetProto_Mount_ID_IsValid(int value);
const NetProto_Mount_ID NetProto_Mount_ID_ID_MIN = NetProto_Mount_ID_GROUPID;
const NetProto_Mount_ID NetProto_Mount_ID_ID_MAX = NetProto_Mount_ID_UNITID;
const int NetProto_Mount_ID_ID_ARRAYSIZE = NetProto_Mount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Mount_ID_descriptor();
inline const ::std::string& NetProto_Mount_ID_Name(NetProto_Mount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Mount_ID_descriptor(), value);
}
inline bool NetProto_Mount_ID_Parse(
    const ::std::string& name, NetProto_Mount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Mount_ID>(
    NetProto_Mount_ID_descriptor(), name, value);
}
enum NetProto_Mount_Pos {
  NetProto_Mount_Pos_BODY = 0,
  NetProto_Mount_Pos_PACKAGE = 1
};
bool NetProto_Mount_Pos_IsValid(int value);
const NetProto_Mount_Pos NetProto_Mount_Pos_Pos_MIN = NetProto_Mount_Pos_BODY;
const NetProto_Mount_Pos NetProto_Mount_Pos_Pos_MAX = NetProto_Mount_Pos_PACKAGE;
const int NetProto_Mount_Pos_Pos_ARRAYSIZE = NetProto_Mount_Pos_Pos_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Mount_Pos_descriptor();
inline const ::std::string& NetProto_Mount_Pos_Name(NetProto_Mount_Pos value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Mount_Pos_descriptor(), value);
}
inline bool NetProto_Mount_Pos_Parse(
    const ::std::string& name, NetProto_Mount_Pos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Mount_Pos>(
    NetProto_Mount_Pos_descriptor(), name, value);
}
enum NetProto_TalkTo_ID {
  NetProto_TalkTo_ID_GROUPID = 3,
  NetProto_TalkTo_ID_UNITID = 28
};
bool NetProto_TalkTo_ID_IsValid(int value);
const NetProto_TalkTo_ID NetProto_TalkTo_ID_ID_MIN = NetProto_TalkTo_ID_GROUPID;
const NetProto_TalkTo_ID NetProto_TalkTo_ID_ID_MAX = NetProto_TalkTo_ID_UNITID;
const int NetProto_TalkTo_ID_ID_ARRAYSIZE = NetProto_TalkTo_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_TalkTo_ID_descriptor();
inline const ::std::string& NetProto_TalkTo_ID_Name(NetProto_TalkTo_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_TalkTo_ID_descriptor(), value);
}
inline bool NetProto_TalkTo_ID_Parse(
    const ::std::string& name, NetProto_TalkTo_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_TalkTo_ID>(
    NetProto_TalkTo_ID_descriptor(), name, value);
}
enum NetProto_Recover_ID {
  NetProto_Recover_ID_GROUPID = 3,
  NetProto_Recover_ID_UNITID = 29
};
bool NetProto_Recover_ID_IsValid(int value);
const NetProto_Recover_ID NetProto_Recover_ID_ID_MIN = NetProto_Recover_ID_GROUPID;
const NetProto_Recover_ID NetProto_Recover_ID_ID_MAX = NetProto_Recover_ID_UNITID;
const int NetProto_Recover_ID_ID_ARRAYSIZE = NetProto_Recover_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Recover_ID_descriptor();
inline const ::std::string& NetProto_Recover_ID_Name(NetProto_Recover_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Recover_ID_descriptor(), value);
}
inline bool NetProto_Recover_ID_Parse(
    const ::std::string& name, NetProto_Recover_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Recover_ID>(
    NetProto_Recover_ID_descriptor(), name, value);
}
enum NetProto_AddBloodNode_ID {
  NetProto_AddBloodNode_ID_GROUPID = 3,
  NetProto_AddBloodNode_ID_UNITID = 30
};
bool NetProto_AddBloodNode_ID_IsValid(int value);
const NetProto_AddBloodNode_ID NetProto_AddBloodNode_ID_ID_MIN = NetProto_AddBloodNode_ID_GROUPID;
const NetProto_AddBloodNode_ID NetProto_AddBloodNode_ID_ID_MAX = NetProto_AddBloodNode_ID_UNITID;
const int NetProto_AddBloodNode_ID_ID_ARRAYSIZE = NetProto_AddBloodNode_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddBloodNode_ID_descriptor();
inline const ::std::string& NetProto_AddBloodNode_ID_Name(NetProto_AddBloodNode_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddBloodNode_ID_descriptor(), value);
}
inline bool NetProto_AddBloodNode_ID_Parse(
    const ::std::string& name, NetProto_AddBloodNode_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddBloodNode_ID>(
    NetProto_AddBloodNode_ID_descriptor(), name, value);
}
enum NetProto_AddBloodNode_Type {
  NetProto_AddBloodNode_Type_NORMAL = 0,
  NetProto_AddBloodNode_Type_PERFECT = 1,
  NetProto_AddBloodNode_Type_LINE = 2
};
bool NetProto_AddBloodNode_Type_IsValid(int value);
const NetProto_AddBloodNode_Type NetProto_AddBloodNode_Type_Type_MIN = NetProto_AddBloodNode_Type_NORMAL;
const NetProto_AddBloodNode_Type NetProto_AddBloodNode_Type_Type_MAX = NetProto_AddBloodNode_Type_LINE;
const int NetProto_AddBloodNode_Type_Type_ARRAYSIZE = NetProto_AddBloodNode_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddBloodNode_Type_descriptor();
inline const ::std::string& NetProto_AddBloodNode_Type_Name(NetProto_AddBloodNode_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddBloodNode_Type_descriptor(), value);
}
inline bool NetProto_AddBloodNode_Type_Parse(
    const ::std::string& name, NetProto_AddBloodNode_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddBloodNode_Type>(
    NetProto_AddBloodNode_Type_descriptor(), name, value);
}
enum NetProto_AddBloodEffect_ID {
  NetProto_AddBloodEffect_ID_GROUPID = 3,
  NetProto_AddBloodEffect_ID_UNITID = 31
};
bool NetProto_AddBloodEffect_ID_IsValid(int value);
const NetProto_AddBloodEffect_ID NetProto_AddBloodEffect_ID_ID_MIN = NetProto_AddBloodEffect_ID_GROUPID;
const NetProto_AddBloodEffect_ID NetProto_AddBloodEffect_ID_ID_MAX = NetProto_AddBloodEffect_ID_UNITID;
const int NetProto_AddBloodEffect_ID_ID_ARRAYSIZE = NetProto_AddBloodEffect_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddBloodEffect_ID_descriptor();
inline const ::std::string& NetProto_AddBloodEffect_ID_Name(NetProto_AddBloodEffect_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddBloodEffect_ID_descriptor(), value);
}
inline bool NetProto_AddBloodEffect_ID_Parse(
    const ::std::string& name, NetProto_AddBloodEffect_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddBloodEffect_ID>(
    NetProto_AddBloodEffect_ID_descriptor(), name, value);
}
enum NetProto_AddBloodEffect_Type {
  NetProto_AddBloodEffect_Type_NORMAL = 0,
  NetProto_AddBloodEffect_Type_ALL = 1
};
bool NetProto_AddBloodEffect_Type_IsValid(int value);
const NetProto_AddBloodEffect_Type NetProto_AddBloodEffect_Type_Type_MIN = NetProto_AddBloodEffect_Type_NORMAL;
const NetProto_AddBloodEffect_Type NetProto_AddBloodEffect_Type_Type_MAX = NetProto_AddBloodEffect_Type_ALL;
const int NetProto_AddBloodEffect_Type_Type_ARRAYSIZE = NetProto_AddBloodEffect_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddBloodEffect_Type_descriptor();
inline const ::std::string& NetProto_AddBloodEffect_Type_Name(NetProto_AddBloodEffect_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddBloodEffect_Type_descriptor(), value);
}
inline bool NetProto_AddBloodEffect_Type_Parse(
    const ::std::string& name, NetProto_AddBloodEffect_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddBloodEffect_Type>(
    NetProto_AddBloodEffect_Type_descriptor(), name, value);
}
enum NetProto_Explore_ID {
  NetProto_Explore_ID_GROUPID = 3,
  NetProto_Explore_ID_UNITID = 32
};
bool NetProto_Explore_ID_IsValid(int value);
const NetProto_Explore_ID NetProto_Explore_ID_ID_MIN = NetProto_Explore_ID_GROUPID;
const NetProto_Explore_ID NetProto_Explore_ID_ID_MAX = NetProto_Explore_ID_UNITID;
const int NetProto_Explore_ID_ID_ARRAYSIZE = NetProto_Explore_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Explore_ID_descriptor();
inline const ::std::string& NetProto_Explore_ID_Name(NetProto_Explore_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Explore_ID_descriptor(), value);
}
inline bool NetProto_Explore_ID_Parse(
    const ::std::string& name, NetProto_Explore_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Explore_ID>(
    NetProto_Explore_ID_descriptor(), name, value);
}
enum NetProto_UnlockBlood_ID {
  NetProto_UnlockBlood_ID_GROUPID = 3,
  NetProto_UnlockBlood_ID_UNITID = 33
};
bool NetProto_UnlockBlood_ID_IsValid(int value);
const NetProto_UnlockBlood_ID NetProto_UnlockBlood_ID_ID_MIN = NetProto_UnlockBlood_ID_GROUPID;
const NetProto_UnlockBlood_ID NetProto_UnlockBlood_ID_ID_MAX = NetProto_UnlockBlood_ID_UNITID;
const int NetProto_UnlockBlood_ID_ID_ARRAYSIZE = NetProto_UnlockBlood_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UnlockBlood_ID_descriptor();
inline const ::std::string& NetProto_UnlockBlood_ID_Name(NetProto_UnlockBlood_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UnlockBlood_ID_descriptor(), value);
}
inline bool NetProto_UnlockBlood_ID_Parse(
    const ::std::string& name, NetProto_UnlockBlood_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UnlockBlood_ID>(
    NetProto_UnlockBlood_ID_descriptor(), name, value);
}
enum NetProto_UpdatePos_ID {
  NetProto_UpdatePos_ID_GROUPID = 3,
  NetProto_UpdatePos_ID_UNITID = 34
};
bool NetProto_UpdatePos_ID_IsValid(int value);
const NetProto_UpdatePos_ID NetProto_UpdatePos_ID_ID_MIN = NetProto_UpdatePos_ID_GROUPID;
const NetProto_UpdatePos_ID NetProto_UpdatePos_ID_ID_MAX = NetProto_UpdatePos_ID_UNITID;
const int NetProto_UpdatePos_ID_ID_ARRAYSIZE = NetProto_UpdatePos_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UpdatePos_ID_descriptor();
inline const ::std::string& NetProto_UpdatePos_ID_Name(NetProto_UpdatePos_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UpdatePos_ID_descriptor(), value);
}
inline bool NetProto_UpdatePos_ID_Parse(
    const ::std::string& name, NetProto_UpdatePos_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UpdatePos_ID>(
    NetProto_UpdatePos_ID_descriptor(), name, value);
}
enum NetProto_SayHello_ID {
  NetProto_SayHello_ID_GROUPID = 3,
  NetProto_SayHello_ID_UNITID = 35
};
bool NetProto_SayHello_ID_IsValid(int value);
const NetProto_SayHello_ID NetProto_SayHello_ID_ID_MIN = NetProto_SayHello_ID_GROUPID;
const NetProto_SayHello_ID NetProto_SayHello_ID_ID_MAX = NetProto_SayHello_ID_UNITID;
const int NetProto_SayHello_ID_ID_ARRAYSIZE = NetProto_SayHello_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SayHello_ID_descriptor();
inline const ::std::string& NetProto_SayHello_ID_Name(NetProto_SayHello_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SayHello_ID_descriptor(), value);
}
inline bool NetProto_SayHello_ID_Parse(
    const ::std::string& name, NetProto_SayHello_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SayHello_ID>(
    NetProto_SayHello_ID_descriptor(), name, value);
}
enum NetProto_CompleteGuide_ID {
  NetProto_CompleteGuide_ID_GROUPID = 3,
  NetProto_CompleteGuide_ID_UNITID = 36
};
bool NetProto_CompleteGuide_ID_IsValid(int value);
const NetProto_CompleteGuide_ID NetProto_CompleteGuide_ID_ID_MIN = NetProto_CompleteGuide_ID_GROUPID;
const NetProto_CompleteGuide_ID NetProto_CompleteGuide_ID_ID_MAX = NetProto_CompleteGuide_ID_UNITID;
const int NetProto_CompleteGuide_ID_ID_ARRAYSIZE = NetProto_CompleteGuide_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_CompleteGuide_ID_descriptor();
inline const ::std::string& NetProto_CompleteGuide_ID_Name(NetProto_CompleteGuide_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_CompleteGuide_ID_descriptor(), value);
}
inline bool NetProto_CompleteGuide_ID_Parse(
    const ::std::string& name, NetProto_CompleteGuide_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_CompleteGuide_ID>(
    NetProto_CompleteGuide_ID_descriptor(), name, value);
}
enum NetProto_Arrange_ID {
  NetProto_Arrange_ID_GROUPID = 3,
  NetProto_Arrange_ID_UNITID = 37
};
bool NetProto_Arrange_ID_IsValid(int value);
const NetProto_Arrange_ID NetProto_Arrange_ID_ID_MIN = NetProto_Arrange_ID_GROUPID;
const NetProto_Arrange_ID NetProto_Arrange_ID_ID_MAX = NetProto_Arrange_ID_UNITID;
const int NetProto_Arrange_ID_ID_ARRAYSIZE = NetProto_Arrange_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Arrange_ID_descriptor();
inline const ::std::string& NetProto_Arrange_ID_Name(NetProto_Arrange_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Arrange_ID_descriptor(), value);
}
inline bool NetProto_Arrange_ID_Parse(
    const ::std::string& name, NetProto_Arrange_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Arrange_ID>(
    NetProto_Arrange_ID_descriptor(), name, value);
}
enum NetProto_IgnorePK_ID {
  NetProto_IgnorePK_ID_GROUPID = 3,
  NetProto_IgnorePK_ID_UNITID = 38
};
bool NetProto_IgnorePK_ID_IsValid(int value);
const NetProto_IgnorePK_ID NetProto_IgnorePK_ID_ID_MIN = NetProto_IgnorePK_ID_GROUPID;
const NetProto_IgnorePK_ID NetProto_IgnorePK_ID_ID_MAX = NetProto_IgnorePK_ID_UNITID;
const int NetProto_IgnorePK_ID_ID_ARRAYSIZE = NetProto_IgnorePK_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_IgnorePK_ID_descriptor();
inline const ::std::string& NetProto_IgnorePK_ID_Name(NetProto_IgnorePK_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_IgnorePK_ID_descriptor(), value);
}
inline bool NetProto_IgnorePK_ID_Parse(
    const ::std::string& name, NetProto_IgnorePK_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_IgnorePK_ID>(
    NetProto_IgnorePK_ID_descriptor(), name, value);
}
enum NetProto_ModifyRMB_ID {
  NetProto_ModifyRMB_ID_GROUPID = 3,
  NetProto_ModifyRMB_ID_UNITID = 39
};
bool NetProto_ModifyRMB_ID_IsValid(int value);
const NetProto_ModifyRMB_ID NetProto_ModifyRMB_ID_ID_MIN = NetProto_ModifyRMB_ID_GROUPID;
const NetProto_ModifyRMB_ID NetProto_ModifyRMB_ID_ID_MAX = NetProto_ModifyRMB_ID_UNITID;
const int NetProto_ModifyRMB_ID_ID_ARRAYSIZE = NetProto_ModifyRMB_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyRMB_ID_descriptor();
inline const ::std::string& NetProto_ModifyRMB_ID_Name(NetProto_ModifyRMB_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyRMB_ID_descriptor(), value);
}
inline bool NetProto_ModifyRMB_ID_Parse(
    const ::std::string& name, NetProto_ModifyRMB_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyRMB_ID>(
    NetProto_ModifyRMB_ID_descriptor(), name, value);
}
enum NetProto_ModifySoulJade_ID {
  NetProto_ModifySoulJade_ID_GROUPID = 3,
  NetProto_ModifySoulJade_ID_UNITID = 40
};
bool NetProto_ModifySoulJade_ID_IsValid(int value);
const NetProto_ModifySoulJade_ID NetProto_ModifySoulJade_ID_ID_MIN = NetProto_ModifySoulJade_ID_GROUPID;
const NetProto_ModifySoulJade_ID NetProto_ModifySoulJade_ID_ID_MAX = NetProto_ModifySoulJade_ID_UNITID;
const int NetProto_ModifySoulJade_ID_ID_ARRAYSIZE = NetProto_ModifySoulJade_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifySoulJade_ID_descriptor();
inline const ::std::string& NetProto_ModifySoulJade_ID_Name(NetProto_ModifySoulJade_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifySoulJade_ID_descriptor(), value);
}
inline bool NetProto_ModifySoulJade_ID_Parse(
    const ::std::string& name, NetProto_ModifySoulJade_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifySoulJade_ID>(
    NetProto_ModifySoulJade_ID_descriptor(), name, value);
}
enum NetProto_ModifySoul_ID {
  NetProto_ModifySoul_ID_GROUPID = 3,
  NetProto_ModifySoul_ID_UNITID = 41
};
bool NetProto_ModifySoul_ID_IsValid(int value);
const NetProto_ModifySoul_ID NetProto_ModifySoul_ID_ID_MIN = NetProto_ModifySoul_ID_GROUPID;
const NetProto_ModifySoul_ID NetProto_ModifySoul_ID_ID_MAX = NetProto_ModifySoul_ID_UNITID;
const int NetProto_ModifySoul_ID_ID_ARRAYSIZE = NetProto_ModifySoul_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifySoul_ID_descriptor();
inline const ::std::string& NetProto_ModifySoul_ID_Name(NetProto_ModifySoul_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifySoul_ID_descriptor(), value);
}
inline bool NetProto_ModifySoul_ID_Parse(
    const ::std::string& name, NetProto_ModifySoul_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifySoul_ID>(
    NetProto_ModifySoul_ID_descriptor(), name, value);
}
enum NetProto_ModifyHonor_ID {
  NetProto_ModifyHonor_ID_GROUPID = 3,
  NetProto_ModifyHonor_ID_UNITID = 42
};
bool NetProto_ModifyHonor_ID_IsValid(int value);
const NetProto_ModifyHonor_ID NetProto_ModifyHonor_ID_ID_MIN = NetProto_ModifyHonor_ID_GROUPID;
const NetProto_ModifyHonor_ID NetProto_ModifyHonor_ID_ID_MAX = NetProto_ModifyHonor_ID_UNITID;
const int NetProto_ModifyHonor_ID_ID_ARRAYSIZE = NetProto_ModifyHonor_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyHonor_ID_descriptor();
inline const ::std::string& NetProto_ModifyHonor_ID_Name(NetProto_ModifyHonor_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyHonor_ID_descriptor(), value);
}
inline bool NetProto_ModifyHonor_ID_Parse(
    const ::std::string& name, NetProto_ModifyHonor_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyHonor_ID>(
    NetProto_ModifyHonor_ID_descriptor(), name, value);
}
enum NetProto_ModifyDurability_ID {
  NetProto_ModifyDurability_ID_GROUPID = 3,
  NetProto_ModifyDurability_ID_UNITID = 43
};
bool NetProto_ModifyDurability_ID_IsValid(int value);
const NetProto_ModifyDurability_ID NetProto_ModifyDurability_ID_ID_MIN = NetProto_ModifyDurability_ID_GROUPID;
const NetProto_ModifyDurability_ID NetProto_ModifyDurability_ID_ID_MAX = NetProto_ModifyDurability_ID_UNITID;
const int NetProto_ModifyDurability_ID_ID_ARRAYSIZE = NetProto_ModifyDurability_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyDurability_ID_descriptor();
inline const ::std::string& NetProto_ModifyDurability_ID_Name(NetProto_ModifyDurability_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyDurability_ID_descriptor(), value);
}
inline bool NetProto_ModifyDurability_ID_Parse(
    const ::std::string& name, NetProto_ModifyDurability_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyDurability_ID>(
    NetProto_ModifyDurability_ID_descriptor(), name, value);
}
enum NetProto_ModifySoulStone_ID {
  NetProto_ModifySoulStone_ID_GROUPID = 3,
  NetProto_ModifySoulStone_ID_UNITID = 44
};
bool NetProto_ModifySoulStone_ID_IsValid(int value);
const NetProto_ModifySoulStone_ID NetProto_ModifySoulStone_ID_ID_MIN = NetProto_ModifySoulStone_ID_GROUPID;
const NetProto_ModifySoulStone_ID NetProto_ModifySoulStone_ID_ID_MAX = NetProto_ModifySoulStone_ID_UNITID;
const int NetProto_ModifySoulStone_ID_ID_ARRAYSIZE = NetProto_ModifySoulStone_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifySoulStone_ID_descriptor();
inline const ::std::string& NetProto_ModifySoulStone_ID_Name(NetProto_ModifySoulStone_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifySoulStone_ID_descriptor(), value);
}
inline bool NetProto_ModifySoulStone_ID_Parse(
    const ::std::string& name, NetProto_ModifySoulStone_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifySoulStone_ID>(
    NetProto_ModifySoulStone_ID_descriptor(), name, value);
}
enum NetProto_ModifyPKScore_ID {
  NetProto_ModifyPKScore_ID_GROUPID = 3,
  NetProto_ModifyPKScore_ID_UNITID = 45
};
bool NetProto_ModifyPKScore_ID_IsValid(int value);
const NetProto_ModifyPKScore_ID NetProto_ModifyPKScore_ID_ID_MIN = NetProto_ModifyPKScore_ID_GROUPID;
const NetProto_ModifyPKScore_ID NetProto_ModifyPKScore_ID_ID_MAX = NetProto_ModifyPKScore_ID_UNITID;
const int NetProto_ModifyPKScore_ID_ID_ARRAYSIZE = NetProto_ModifyPKScore_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyPKScore_ID_descriptor();
inline const ::std::string& NetProto_ModifyPKScore_ID_Name(NetProto_ModifyPKScore_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyPKScore_ID_descriptor(), value);
}
inline bool NetProto_ModifyPKScore_ID_Parse(
    const ::std::string& name, NetProto_ModifyPKScore_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyPKScore_ID>(
    NetProto_ModifyPKScore_ID_descriptor(), name, value);
}
enum NetProto_DelItem_ID {
  NetProto_DelItem_ID_GROUPID = 3,
  NetProto_DelItem_ID_UNITID = 46
};
bool NetProto_DelItem_ID_IsValid(int value);
const NetProto_DelItem_ID NetProto_DelItem_ID_ID_MIN = NetProto_DelItem_ID_GROUPID;
const NetProto_DelItem_ID NetProto_DelItem_ID_ID_MAX = NetProto_DelItem_ID_UNITID;
const int NetProto_DelItem_ID_ID_ARRAYSIZE = NetProto_DelItem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DelItem_ID_descriptor();
inline const ::std::string& NetProto_DelItem_ID_Name(NetProto_DelItem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DelItem_ID_descriptor(), value);
}
inline bool NetProto_DelItem_ID_Parse(
    const ::std::string& name, NetProto_DelItem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DelItem_ID>(
    NetProto_DelItem_ID_descriptor(), name, value);
}
enum NetProto_ModifyVIP_ID {
  NetProto_ModifyVIP_ID_GROUPID = 3,
  NetProto_ModifyVIP_ID_UNITID = 47
};
bool NetProto_ModifyVIP_ID_IsValid(int value);
const NetProto_ModifyVIP_ID NetProto_ModifyVIP_ID_ID_MIN = NetProto_ModifyVIP_ID_GROUPID;
const NetProto_ModifyVIP_ID NetProto_ModifyVIP_ID_ID_MAX = NetProto_ModifyVIP_ID_UNITID;
const int NetProto_ModifyVIP_ID_ID_ARRAYSIZE = NetProto_ModifyVIP_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyVIP_ID_descriptor();
inline const ::std::string& NetProto_ModifyVIP_ID_Name(NetProto_ModifyVIP_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyVIP_ID_descriptor(), value);
}
inline bool NetProto_ModifyVIP_ID_Parse(
    const ::std::string& name, NetProto_ModifyVIP_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyVIP_ID>(
    NetProto_ModifyVIP_ID_descriptor(), name, value);
}
enum NetProto_RandomGodTarget_ID {
  NetProto_RandomGodTarget_ID_GROUPID = 3,
  NetProto_RandomGodTarget_ID_UNITID = 48
};
bool NetProto_RandomGodTarget_ID_IsValid(int value);
const NetProto_RandomGodTarget_ID NetProto_RandomGodTarget_ID_ID_MIN = NetProto_RandomGodTarget_ID_GROUPID;
const NetProto_RandomGodTarget_ID NetProto_RandomGodTarget_ID_ID_MAX = NetProto_RandomGodTarget_ID_UNITID;
const int NetProto_RandomGodTarget_ID_ID_ARRAYSIZE = NetProto_RandomGodTarget_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RandomGodTarget_ID_descriptor();
inline const ::std::string& NetProto_RandomGodTarget_ID_Name(NetProto_RandomGodTarget_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RandomGodTarget_ID_descriptor(), value);
}
inline bool NetProto_RandomGodTarget_ID_Parse(
    const ::std::string& name, NetProto_RandomGodTarget_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RandomGodTarget_ID>(
    NetProto_RandomGodTarget_ID_descriptor(), name, value);
}
enum NetProto_Inspire_ID {
  NetProto_Inspire_ID_GROUPID = 3,
  NetProto_Inspire_ID_UNITID = 49
};
bool NetProto_Inspire_ID_IsValid(int value);
const NetProto_Inspire_ID NetProto_Inspire_ID_ID_MIN = NetProto_Inspire_ID_GROUPID;
const NetProto_Inspire_ID NetProto_Inspire_ID_ID_MAX = NetProto_Inspire_ID_UNITID;
const int NetProto_Inspire_ID_ID_ARRAYSIZE = NetProto_Inspire_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Inspire_ID_descriptor();
inline const ::std::string& NetProto_Inspire_ID_Name(NetProto_Inspire_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Inspire_ID_descriptor(), value);
}
inline bool NetProto_Inspire_ID_Parse(
    const ::std::string& name, NetProto_Inspire_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Inspire_ID>(
    NetProto_Inspire_ID_descriptor(), name, value);
}
enum NetProto_Inspire_Type {
  NetProto_Inspire_Type_ATK = 0,
  NetProto_Inspire_Type_DEF = 1,
  NetProto_Inspire_Type_SPECIAL = 2
};
bool NetProto_Inspire_Type_IsValid(int value);
const NetProto_Inspire_Type NetProto_Inspire_Type_Type_MIN = NetProto_Inspire_Type_ATK;
const NetProto_Inspire_Type NetProto_Inspire_Type_Type_MAX = NetProto_Inspire_Type_SPECIAL;
const int NetProto_Inspire_Type_Type_ARRAYSIZE = NetProto_Inspire_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Inspire_Type_descriptor();
inline const ::std::string& NetProto_Inspire_Type_Name(NetProto_Inspire_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Inspire_Type_descriptor(), value);
}
inline bool NetProto_Inspire_Type_Parse(
    const ::std::string& name, NetProto_Inspire_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Inspire_Type>(
    NetProto_Inspire_Type_descriptor(), name, value);
}
enum NetProto_Inspire_Dest {
  NetProto_Inspire_Dest_GOD = 0,
  NetProto_Inspire_Dest_ONE_TO_ONE = 1,
  NetProto_Inspire_Dest_HELL = 2,
  NetProto_Inspire_Dest_WORLD_BOSS = 3
};
bool NetProto_Inspire_Dest_IsValid(int value);
const NetProto_Inspire_Dest NetProto_Inspire_Dest_Dest_MIN = NetProto_Inspire_Dest_GOD;
const NetProto_Inspire_Dest NetProto_Inspire_Dest_Dest_MAX = NetProto_Inspire_Dest_WORLD_BOSS;
const int NetProto_Inspire_Dest_Dest_ARRAYSIZE = NetProto_Inspire_Dest_Dest_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Inspire_Dest_descriptor();
inline const ::std::string& NetProto_Inspire_Dest_Name(NetProto_Inspire_Dest value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Inspire_Dest_descriptor(), value);
}
inline bool NetProto_Inspire_Dest_Parse(
    const ::std::string& name, NetProto_Inspire_Dest* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Inspire_Dest>(
    NetProto_Inspire_Dest_descriptor(), name, value);
}
enum NetProto_RequestGodTarget_ID {
  NetProto_RequestGodTarget_ID_GROUPID = 3,
  NetProto_RequestGodTarget_ID_UNITID = 50
};
bool NetProto_RequestGodTarget_ID_IsValid(int value);
const NetProto_RequestGodTarget_ID NetProto_RequestGodTarget_ID_ID_MIN = NetProto_RequestGodTarget_ID_GROUPID;
const NetProto_RequestGodTarget_ID NetProto_RequestGodTarget_ID_ID_MAX = NetProto_RequestGodTarget_ID_UNITID;
const int NetProto_RequestGodTarget_ID_ID_ARRAYSIZE = NetProto_RequestGodTarget_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RequestGodTarget_ID_descriptor();
inline const ::std::string& NetProto_RequestGodTarget_ID_Name(NetProto_RequestGodTarget_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RequestGodTarget_ID_descriptor(), value);
}
inline bool NetProto_RequestGodTarget_ID_Parse(
    const ::std::string& name, NetProto_RequestGodTarget_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RequestGodTarget_ID>(
    NetProto_RequestGodTarget_ID_descriptor(), name, value);
}
enum NetProto_ModifyGodScore_ID {
  NetProto_ModifyGodScore_ID_GROUPID = 3,
  NetProto_ModifyGodScore_ID_UNITID = 51
};
bool NetProto_ModifyGodScore_ID_IsValid(int value);
const NetProto_ModifyGodScore_ID NetProto_ModifyGodScore_ID_ID_MIN = NetProto_ModifyGodScore_ID_GROUPID;
const NetProto_ModifyGodScore_ID NetProto_ModifyGodScore_ID_ID_MAX = NetProto_ModifyGodScore_ID_UNITID;
const int NetProto_ModifyGodScore_ID_ID_ARRAYSIZE = NetProto_ModifyGodScore_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyGodScore_ID_descriptor();
inline const ::std::string& NetProto_ModifyGodScore_ID_Name(NetProto_ModifyGodScore_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyGodScore_ID_descriptor(), value);
}
inline bool NetProto_ModifyGodScore_ID_Parse(
    const ::std::string& name, NetProto_ModifyGodScore_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyGodScore_ID>(
    NetProto_ModifyGodScore_ID_descriptor(), name, value);
}
enum NetProto_GodRank_ID {
  NetProto_GodRank_ID_GROUPID = 3,
  NetProto_GodRank_ID_UNITID = 52
};
bool NetProto_GodRank_ID_IsValid(int value);
const NetProto_GodRank_ID NetProto_GodRank_ID_ID_MIN = NetProto_GodRank_ID_GROUPID;
const NetProto_GodRank_ID NetProto_GodRank_ID_ID_MAX = NetProto_GodRank_ID_UNITID;
const int NetProto_GodRank_ID_ID_ARRAYSIZE = NetProto_GodRank_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GodRank_ID_descriptor();
inline const ::std::string& NetProto_GodRank_ID_Name(NetProto_GodRank_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GodRank_ID_descriptor(), value);
}
inline bool NetProto_GodRank_ID_Parse(
    const ::std::string& name, NetProto_GodRank_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GodRank_ID>(
    NetProto_GodRank_ID_descriptor(), name, value);
}
enum NetProto_GetFashion_ID {
  NetProto_GetFashion_ID_GROUPID = 3,
  NetProto_GetFashion_ID_UNITID = 53
};
bool NetProto_GetFashion_ID_IsValid(int value);
const NetProto_GetFashion_ID NetProto_GetFashion_ID_ID_MIN = NetProto_GetFashion_ID_GROUPID;
const NetProto_GetFashion_ID NetProto_GetFashion_ID_ID_MAX = NetProto_GetFashion_ID_UNITID;
const int NetProto_GetFashion_ID_ID_ARRAYSIZE = NetProto_GetFashion_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GetFashion_ID_descriptor();
inline const ::std::string& NetProto_GetFashion_ID_Name(NetProto_GetFashion_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GetFashion_ID_descriptor(), value);
}
inline bool NetProto_GetFashion_ID_Parse(
    const ::std::string& name, NetProto_GetFashion_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GetFashion_ID>(
    NetProto_GetFashion_ID_descriptor(), name, value);
}
enum NetProto_SyncAtt_ID {
  NetProto_SyncAtt_ID_GROUPID = 3,
  NetProto_SyncAtt_ID_UNITID = 54
};
bool NetProto_SyncAtt_ID_IsValid(int value);
const NetProto_SyncAtt_ID NetProto_SyncAtt_ID_ID_MIN = NetProto_SyncAtt_ID_GROUPID;
const NetProto_SyncAtt_ID NetProto_SyncAtt_ID_ID_MAX = NetProto_SyncAtt_ID_UNITID;
const int NetProto_SyncAtt_ID_ID_ARRAYSIZE = NetProto_SyncAtt_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SyncAtt_ID_descriptor();
inline const ::std::string& NetProto_SyncAtt_ID_Name(NetProto_SyncAtt_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SyncAtt_ID_descriptor(), value);
}
inline bool NetProto_SyncAtt_ID_Parse(
    const ::std::string& name, NetProto_SyncAtt_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SyncAtt_ID>(
    NetProto_SyncAtt_ID_descriptor(), name, value);
}
enum NetProto_ModifySubRMB_ID {
  NetProto_ModifySubRMB_ID_GROUPID = 3,
  NetProto_ModifySubRMB_ID_UNITID = 55
};
bool NetProto_ModifySubRMB_ID_IsValid(int value);
const NetProto_ModifySubRMB_ID NetProto_ModifySubRMB_ID_ID_MIN = NetProto_ModifySubRMB_ID_GROUPID;
const NetProto_ModifySubRMB_ID NetProto_ModifySubRMB_ID_ID_MAX = NetProto_ModifySubRMB_ID_UNITID;
const int NetProto_ModifySubRMB_ID_ID_ARRAYSIZE = NetProto_ModifySubRMB_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifySubRMB_ID_descriptor();
inline const ::std::string& NetProto_ModifySubRMB_ID_Name(NetProto_ModifySubRMB_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifySubRMB_ID_descriptor(), value);
}
inline bool NetProto_ModifySubRMB_ID_Parse(
    const ::std::string& name, NetProto_ModifySubRMB_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifySubRMB_ID>(
    NetProto_ModifySubRMB_ID_descriptor(), name, value);
}
enum NetProto_GenEquip_ID {
  NetProto_GenEquip_ID_GROUPID = 3,
  NetProto_GenEquip_ID_UNITID = 56
};
bool NetProto_GenEquip_ID_IsValid(int value);
const NetProto_GenEquip_ID NetProto_GenEquip_ID_ID_MIN = NetProto_GenEquip_ID_GROUPID;
const NetProto_GenEquip_ID NetProto_GenEquip_ID_ID_MAX = NetProto_GenEquip_ID_UNITID;
const int NetProto_GenEquip_ID_ID_ARRAYSIZE = NetProto_GenEquip_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GenEquip_ID_descriptor();
inline const ::std::string& NetProto_GenEquip_ID_Name(NetProto_GenEquip_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GenEquip_ID_descriptor(), value);
}
inline bool NetProto_GenEquip_ID_Parse(
    const ::std::string& name, NetProto_GenEquip_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GenEquip_ID>(
    NetProto_GenEquip_ID_descriptor(), name, value);
}
enum NetProto_GenGem_ID {
  NetProto_GenGem_ID_GROUPID = 3,
  NetProto_GenGem_ID_UNITID = 57
};
bool NetProto_GenGem_ID_IsValid(int value);
const NetProto_GenGem_ID NetProto_GenGem_ID_ID_MIN = NetProto_GenGem_ID_GROUPID;
const NetProto_GenGem_ID NetProto_GenGem_ID_ID_MAX = NetProto_GenGem_ID_UNITID;
const int NetProto_GenGem_ID_ID_ARRAYSIZE = NetProto_GenGem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GenGem_ID_descriptor();
inline const ::std::string& NetProto_GenGem_ID_Name(NetProto_GenGem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GenGem_ID_descriptor(), value);
}
inline bool NetProto_GenGem_ID_Parse(
    const ::std::string& name, NetProto_GenGem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GenGem_ID>(
    NetProto_GenGem_ID_descriptor(), name, value);
}
enum NetProto_GenGem_Way {
  NetProto_GenGem_Way_NEXT_LEVEL = 0,
  NetProto_GenGem_Way_TOP_LEVEL = 1,
  NetProto_GenGem_Way_ALL_TOP_LEVEL = 2
};
bool NetProto_GenGem_Way_IsValid(int value);
const NetProto_GenGem_Way NetProto_GenGem_Way_Way_MIN = NetProto_GenGem_Way_NEXT_LEVEL;
const NetProto_GenGem_Way NetProto_GenGem_Way_Way_MAX = NetProto_GenGem_Way_ALL_TOP_LEVEL;
const int NetProto_GenGem_Way_Way_ARRAYSIZE = NetProto_GenGem_Way_Way_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GenGem_Way_descriptor();
inline const ::std::string& NetProto_GenGem_Way_Name(NetProto_GenGem_Way value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GenGem_Way_descriptor(), value);
}
inline bool NetProto_GenGem_Way_Parse(
    const ::std::string& name, NetProto_GenGem_Way* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GenGem_Way>(
    NetProto_GenGem_Way_descriptor(), name, value);
}
enum NetProto_UnlockHole_ID {
  NetProto_UnlockHole_ID_GROUPID = 3,
  NetProto_UnlockHole_ID_UNITID = 58
};
bool NetProto_UnlockHole_ID_IsValid(int value);
const NetProto_UnlockHole_ID NetProto_UnlockHole_ID_ID_MIN = NetProto_UnlockHole_ID_GROUPID;
const NetProto_UnlockHole_ID NetProto_UnlockHole_ID_ID_MAX = NetProto_UnlockHole_ID_UNITID;
const int NetProto_UnlockHole_ID_ID_ARRAYSIZE = NetProto_UnlockHole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UnlockHole_ID_descriptor();
inline const ::std::string& NetProto_UnlockHole_ID_Name(NetProto_UnlockHole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UnlockHole_ID_descriptor(), value);
}
inline bool NetProto_UnlockHole_ID_Parse(
    const ::std::string& name, NetProto_UnlockHole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UnlockHole_ID>(
    NetProto_UnlockHole_ID_descriptor(), name, value);
}
enum NetProto_UnlockHole_Pos {
  NetProto_UnlockHole_Pos_BODY = 0,
  NetProto_UnlockHole_Pos_PACKAGE = 1
};
bool NetProto_UnlockHole_Pos_IsValid(int value);
const NetProto_UnlockHole_Pos NetProto_UnlockHole_Pos_Pos_MIN = NetProto_UnlockHole_Pos_BODY;
const NetProto_UnlockHole_Pos NetProto_UnlockHole_Pos_Pos_MAX = NetProto_UnlockHole_Pos_PACKAGE;
const int NetProto_UnlockHole_Pos_Pos_ARRAYSIZE = NetProto_UnlockHole_Pos_Pos_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UnlockHole_Pos_descriptor();
inline const ::std::string& NetProto_UnlockHole_Pos_Name(NetProto_UnlockHole_Pos value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UnlockHole_Pos_descriptor(), value);
}
inline bool NetProto_UnlockHole_Pos_Parse(
    const ::std::string& name, NetProto_UnlockHole_Pos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UnlockHole_Pos>(
    NetProto_UnlockHole_Pos_descriptor(), name, value);
}
enum NetProto_UnmountGem_ID {
  NetProto_UnmountGem_ID_GROUPID = 3,
  NetProto_UnmountGem_ID_UNITID = 59
};
bool NetProto_UnmountGem_ID_IsValid(int value);
const NetProto_UnmountGem_ID NetProto_UnmountGem_ID_ID_MIN = NetProto_UnmountGem_ID_GROUPID;
const NetProto_UnmountGem_ID NetProto_UnmountGem_ID_ID_MAX = NetProto_UnmountGem_ID_UNITID;
const int NetProto_UnmountGem_ID_ID_ARRAYSIZE = NetProto_UnmountGem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UnmountGem_ID_descriptor();
inline const ::std::string& NetProto_UnmountGem_ID_Name(NetProto_UnmountGem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UnmountGem_ID_descriptor(), value);
}
inline bool NetProto_UnmountGem_ID_Parse(
    const ::std::string& name, NetProto_UnmountGem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UnmountGem_ID>(
    NetProto_UnmountGem_ID_descriptor(), name, value);
}
enum NetProto_UnmountGem_Pos {
  NetProto_UnmountGem_Pos_BODY = 0,
  NetProto_UnmountGem_Pos_PACKAGE = 1
};
bool NetProto_UnmountGem_Pos_IsValid(int value);
const NetProto_UnmountGem_Pos NetProto_UnmountGem_Pos_Pos_MIN = NetProto_UnmountGem_Pos_BODY;
const NetProto_UnmountGem_Pos NetProto_UnmountGem_Pos_Pos_MAX = NetProto_UnmountGem_Pos_PACKAGE;
const int NetProto_UnmountGem_Pos_Pos_ARRAYSIZE = NetProto_UnmountGem_Pos_Pos_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UnmountGem_Pos_descriptor();
inline const ::std::string& NetProto_UnmountGem_Pos_Name(NetProto_UnmountGem_Pos value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UnmountGem_Pos_descriptor(), value);
}
inline bool NetProto_UnmountGem_Pos_Parse(
    const ::std::string& name, NetProto_UnmountGem_Pos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UnmountGem_Pos>(
    NetProto_UnmountGem_Pos_descriptor(), name, value);
}
enum NetProto_EnhanceDelta_ID {
  NetProto_EnhanceDelta_ID_GROUPID = 3,
  NetProto_EnhanceDelta_ID_UNITID = 60
};
bool NetProto_EnhanceDelta_ID_IsValid(int value);
const NetProto_EnhanceDelta_ID NetProto_EnhanceDelta_ID_ID_MIN = NetProto_EnhanceDelta_ID_GROUPID;
const NetProto_EnhanceDelta_ID NetProto_EnhanceDelta_ID_ID_MAX = NetProto_EnhanceDelta_ID_UNITID;
const int NetProto_EnhanceDelta_ID_ID_ARRAYSIZE = NetProto_EnhanceDelta_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EnhanceDelta_ID_descriptor();
inline const ::std::string& NetProto_EnhanceDelta_ID_Name(NetProto_EnhanceDelta_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EnhanceDelta_ID_descriptor(), value);
}
inline bool NetProto_EnhanceDelta_ID_Parse(
    const ::std::string& name, NetProto_EnhanceDelta_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EnhanceDelta_ID>(
    NetProto_EnhanceDelta_ID_descriptor(), name, value);
}
enum NetProto_EnhanceDelta_Pos {
  NetProto_EnhanceDelta_Pos_BODY = 0,
  NetProto_EnhanceDelta_Pos_PACKAGE = 1
};
bool NetProto_EnhanceDelta_Pos_IsValid(int value);
const NetProto_EnhanceDelta_Pos NetProto_EnhanceDelta_Pos_Pos_MIN = NetProto_EnhanceDelta_Pos_BODY;
const NetProto_EnhanceDelta_Pos NetProto_EnhanceDelta_Pos_Pos_MAX = NetProto_EnhanceDelta_Pos_PACKAGE;
const int NetProto_EnhanceDelta_Pos_Pos_ARRAYSIZE = NetProto_EnhanceDelta_Pos_Pos_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EnhanceDelta_Pos_descriptor();
inline const ::std::string& NetProto_EnhanceDelta_Pos_Name(NetProto_EnhanceDelta_Pos value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EnhanceDelta_Pos_descriptor(), value);
}
inline bool NetProto_EnhanceDelta_Pos_Parse(
    const ::std::string& name, NetProto_EnhanceDelta_Pos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EnhanceDelta_Pos>(
    NetProto_EnhanceDelta_Pos_descriptor(), name, value);
}
enum NetProto_Enhance_ID {
  NetProto_Enhance_ID_GROUPID = 3,
  NetProto_Enhance_ID_UNITID = 61
};
bool NetProto_Enhance_ID_IsValid(int value);
const NetProto_Enhance_ID NetProto_Enhance_ID_ID_MIN = NetProto_Enhance_ID_GROUPID;
const NetProto_Enhance_ID NetProto_Enhance_ID_ID_MAX = NetProto_Enhance_ID_UNITID;
const int NetProto_Enhance_ID_ID_ARRAYSIZE = NetProto_Enhance_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Enhance_ID_descriptor();
inline const ::std::string& NetProto_Enhance_ID_Name(NetProto_Enhance_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Enhance_ID_descriptor(), value);
}
inline bool NetProto_Enhance_ID_Parse(
    const ::std::string& name, NetProto_Enhance_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Enhance_ID>(
    NetProto_Enhance_ID_descriptor(), name, value);
}
enum NetProto_Enhance_Pos {
  NetProto_Enhance_Pos_BODY = 0,
  NetProto_Enhance_Pos_PACKAGE = 1
};
bool NetProto_Enhance_Pos_IsValid(int value);
const NetProto_Enhance_Pos NetProto_Enhance_Pos_Pos_MIN = NetProto_Enhance_Pos_BODY;
const NetProto_Enhance_Pos NetProto_Enhance_Pos_Pos_MAX = NetProto_Enhance_Pos_PACKAGE;
const int NetProto_Enhance_Pos_Pos_ARRAYSIZE = NetProto_Enhance_Pos_Pos_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Enhance_Pos_descriptor();
inline const ::std::string& NetProto_Enhance_Pos_Name(NetProto_Enhance_Pos value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Enhance_Pos_descriptor(), value);
}
inline bool NetProto_Enhance_Pos_Parse(
    const ::std::string& name, NetProto_Enhance_Pos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Enhance_Pos>(
    NetProto_Enhance_Pos_descriptor(), name, value);
}
enum NetProto_Inherit_ID {
  NetProto_Inherit_ID_GROUPID = 3,
  NetProto_Inherit_ID_UNITID = 62
};
bool NetProto_Inherit_ID_IsValid(int value);
const NetProto_Inherit_ID NetProto_Inherit_ID_ID_MIN = NetProto_Inherit_ID_GROUPID;
const NetProto_Inherit_ID NetProto_Inherit_ID_ID_MAX = NetProto_Inherit_ID_UNITID;
const int NetProto_Inherit_ID_ID_ARRAYSIZE = NetProto_Inherit_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Inherit_ID_descriptor();
inline const ::std::string& NetProto_Inherit_ID_Name(NetProto_Inherit_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Inherit_ID_descriptor(), value);
}
inline bool NetProto_Inherit_ID_Parse(
    const ::std::string& name, NetProto_Inherit_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Inherit_ID>(
    NetProto_Inherit_ID_descriptor(), name, value);
}
enum NetProto_Inherit_Pos {
  NetProto_Inherit_Pos_BODY = 0,
  NetProto_Inherit_Pos_PACKAGE = 1
};
bool NetProto_Inherit_Pos_IsValid(int value);
const NetProto_Inherit_Pos NetProto_Inherit_Pos_Pos_MIN = NetProto_Inherit_Pos_BODY;
const NetProto_Inherit_Pos NetProto_Inherit_Pos_Pos_MAX = NetProto_Inherit_Pos_PACKAGE;
const int NetProto_Inherit_Pos_Pos_ARRAYSIZE = NetProto_Inherit_Pos_Pos_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Inherit_Pos_descriptor();
inline const ::std::string& NetProto_Inherit_Pos_Name(NetProto_Inherit_Pos value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Inherit_Pos_descriptor(), value);
}
inline bool NetProto_Inherit_Pos_Parse(
    const ::std::string& name, NetProto_Inherit_Pos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Inherit_Pos>(
    NetProto_Inherit_Pos_descriptor(), name, value);
}
enum NetProto_StrongBaseWing_ID {
  NetProto_StrongBaseWing_ID_GROUPID = 3,
  NetProto_StrongBaseWing_ID_UNITID = 63
};
bool NetProto_StrongBaseWing_ID_IsValid(int value);
const NetProto_StrongBaseWing_ID NetProto_StrongBaseWing_ID_ID_MIN = NetProto_StrongBaseWing_ID_GROUPID;
const NetProto_StrongBaseWing_ID NetProto_StrongBaseWing_ID_ID_MAX = NetProto_StrongBaseWing_ID_UNITID;
const int NetProto_StrongBaseWing_ID_ID_ARRAYSIZE = NetProto_StrongBaseWing_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StrongBaseWing_ID_descriptor();
inline const ::std::string& NetProto_StrongBaseWing_ID_Name(NetProto_StrongBaseWing_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StrongBaseWing_ID_descriptor(), value);
}
inline bool NetProto_StrongBaseWing_ID_Parse(
    const ::std::string& name, NetProto_StrongBaseWing_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StrongBaseWing_ID>(
    NetProto_StrongBaseWing_ID_descriptor(), name, value);
}
enum NetProto_BuyWing_ID {
  NetProto_BuyWing_ID_GROUPID = 3,
  NetProto_BuyWing_ID_UNITID = 64
};
bool NetProto_BuyWing_ID_IsValid(int value);
const NetProto_BuyWing_ID NetProto_BuyWing_ID_ID_MIN = NetProto_BuyWing_ID_GROUPID;
const NetProto_BuyWing_ID NetProto_BuyWing_ID_ID_MAX = NetProto_BuyWing_ID_UNITID;
const int NetProto_BuyWing_ID_ID_ARRAYSIZE = NetProto_BuyWing_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BuyWing_ID_descriptor();
inline const ::std::string& NetProto_BuyWing_ID_Name(NetProto_BuyWing_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BuyWing_ID_descriptor(), value);
}
inline bool NetProto_BuyWing_ID_Parse(
    const ::std::string& name, NetProto_BuyWing_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BuyWing_ID>(
    NetProto_BuyWing_ID_descriptor(), name, value);
}
enum NetProto_WearWing_ID {
  NetProto_WearWing_ID_GROUPID = 3,
  NetProto_WearWing_ID_UNITID = 65
};
bool NetProto_WearWing_ID_IsValid(int value);
const NetProto_WearWing_ID NetProto_WearWing_ID_ID_MIN = NetProto_WearWing_ID_GROUPID;
const NetProto_WearWing_ID NetProto_WearWing_ID_ID_MAX = NetProto_WearWing_ID_UNITID;
const int NetProto_WearWing_ID_ID_ARRAYSIZE = NetProto_WearWing_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_WearWing_ID_descriptor();
inline const ::std::string& NetProto_WearWing_ID_Name(NetProto_WearWing_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_WearWing_ID_descriptor(), value);
}
inline bool NetProto_WearWing_ID_Parse(
    const ::std::string& name, NetProto_WearWing_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_WearWing_ID>(
    NetProto_WearWing_ID_descriptor(), name, value);
}
enum NetProto_GetWing_ID {
  NetProto_GetWing_ID_GROUPID = 3,
  NetProto_GetWing_ID_UNITID = 66
};
bool NetProto_GetWing_ID_IsValid(int value);
const NetProto_GetWing_ID NetProto_GetWing_ID_ID_MIN = NetProto_GetWing_ID_GROUPID;
const NetProto_GetWing_ID NetProto_GetWing_ID_ID_MAX = NetProto_GetWing_ID_UNITID;
const int NetProto_GetWing_ID_ID_ARRAYSIZE = NetProto_GetWing_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GetWing_ID_descriptor();
inline const ::std::string& NetProto_GetWing_ID_Name(NetProto_GetWing_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GetWing_ID_descriptor(), value);
}
inline bool NetProto_GetWing_ID_Parse(
    const ::std::string& name, NetProto_GetWing_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GetWing_ID>(
    NetProto_GetWing_ID_descriptor(), name, value);
}
enum NetProto_BuyFashion_ID {
  NetProto_BuyFashion_ID_GROUPID = 3,
  NetProto_BuyFashion_ID_UNITID = 67
};
bool NetProto_BuyFashion_ID_IsValid(int value);
const NetProto_BuyFashion_ID NetProto_BuyFashion_ID_ID_MIN = NetProto_BuyFashion_ID_GROUPID;
const NetProto_BuyFashion_ID NetProto_BuyFashion_ID_ID_MAX = NetProto_BuyFashion_ID_UNITID;
const int NetProto_BuyFashion_ID_ID_ARRAYSIZE = NetProto_BuyFashion_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BuyFashion_ID_descriptor();
inline const ::std::string& NetProto_BuyFashion_ID_Name(NetProto_BuyFashion_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BuyFashion_ID_descriptor(), value);
}
inline bool NetProto_BuyFashion_ID_Parse(
    const ::std::string& name, NetProto_BuyFashion_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BuyFashion_ID>(
    NetProto_BuyFashion_ID_descriptor(), name, value);
}
enum NetProto_MakeFashionHole_ID {
  NetProto_MakeFashionHole_ID_GROUPID = 3,
  NetProto_MakeFashionHole_ID_UNITID = 68
};
bool NetProto_MakeFashionHole_ID_IsValid(int value);
const NetProto_MakeFashionHole_ID NetProto_MakeFashionHole_ID_ID_MIN = NetProto_MakeFashionHole_ID_GROUPID;
const NetProto_MakeFashionHole_ID NetProto_MakeFashionHole_ID_ID_MAX = NetProto_MakeFashionHole_ID_UNITID;
const int NetProto_MakeFashionHole_ID_ID_ARRAYSIZE = NetProto_MakeFashionHole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_MakeFashionHole_ID_descriptor();
inline const ::std::string& NetProto_MakeFashionHole_ID_Name(NetProto_MakeFashionHole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_MakeFashionHole_ID_descriptor(), value);
}
inline bool NetProto_MakeFashionHole_ID_Parse(
    const ::std::string& name, NetProto_MakeFashionHole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_MakeFashionHole_ID>(
    NetProto_MakeFashionHole_ID_descriptor(), name, value);
}
enum NetProto_FashionInlay_ID {
  NetProto_FashionInlay_ID_GROUPID = 3,
  NetProto_FashionInlay_ID_UNITID = 69
};
bool NetProto_FashionInlay_ID_IsValid(int value);
const NetProto_FashionInlay_ID NetProto_FashionInlay_ID_ID_MIN = NetProto_FashionInlay_ID_GROUPID;
const NetProto_FashionInlay_ID NetProto_FashionInlay_ID_ID_MAX = NetProto_FashionInlay_ID_UNITID;
const int NetProto_FashionInlay_ID_ID_ARRAYSIZE = NetProto_FashionInlay_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FashionInlay_ID_descriptor();
inline const ::std::string& NetProto_FashionInlay_ID_Name(NetProto_FashionInlay_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FashionInlay_ID_descriptor(), value);
}
inline bool NetProto_FashionInlay_ID_Parse(
    const ::std::string& name, NetProto_FashionInlay_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FashionInlay_ID>(
    NetProto_FashionInlay_ID_descriptor(), name, value);
}
enum NetProto_FashionUnInlay_ID {
  NetProto_FashionUnInlay_ID_GROUPID = 3,
  NetProto_FashionUnInlay_ID_UNITID = 70
};
bool NetProto_FashionUnInlay_ID_IsValid(int value);
const NetProto_FashionUnInlay_ID NetProto_FashionUnInlay_ID_ID_MIN = NetProto_FashionUnInlay_ID_GROUPID;
const NetProto_FashionUnInlay_ID NetProto_FashionUnInlay_ID_ID_MAX = NetProto_FashionUnInlay_ID_UNITID;
const int NetProto_FashionUnInlay_ID_ID_ARRAYSIZE = NetProto_FashionUnInlay_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FashionUnInlay_ID_descriptor();
inline const ::std::string& NetProto_FashionUnInlay_ID_Name(NetProto_FashionUnInlay_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FashionUnInlay_ID_descriptor(), value);
}
inline bool NetProto_FashionUnInlay_ID_Parse(
    const ::std::string& name, NetProto_FashionUnInlay_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FashionUnInlay_ID>(
    NetProto_FashionUnInlay_ID_descriptor(), name, value);
}
enum NetProto_ServerLimitItem_ID {
  NetProto_ServerLimitItem_ID_GROUPID = 3,
  NetProto_ServerLimitItem_ID_UNITID = 71
};
bool NetProto_ServerLimitItem_ID_IsValid(int value);
const NetProto_ServerLimitItem_ID NetProto_ServerLimitItem_ID_ID_MIN = NetProto_ServerLimitItem_ID_GROUPID;
const NetProto_ServerLimitItem_ID NetProto_ServerLimitItem_ID_ID_MAX = NetProto_ServerLimitItem_ID_UNITID;
const int NetProto_ServerLimitItem_ID_ID_ARRAYSIZE = NetProto_ServerLimitItem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ServerLimitItem_ID_descriptor();
inline const ::std::string& NetProto_ServerLimitItem_ID_Name(NetProto_ServerLimitItem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ServerLimitItem_ID_descriptor(), value);
}
inline bool NetProto_ServerLimitItem_ID_Parse(
    const ::std::string& name, NetProto_ServerLimitItem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ServerLimitItem_ID>(
    NetProto_ServerLimitItem_ID_descriptor(), name, value);
}
enum NetProto_FriendsLove_ID {
  NetProto_FriendsLove_ID_GROUPID = 3,
  NetProto_FriendsLove_ID_UNITID = 72
};
bool NetProto_FriendsLove_ID_IsValid(int value);
const NetProto_FriendsLove_ID NetProto_FriendsLove_ID_ID_MIN = NetProto_FriendsLove_ID_GROUPID;
const NetProto_FriendsLove_ID NetProto_FriendsLove_ID_ID_MAX = NetProto_FriendsLove_ID_UNITID;
const int NetProto_FriendsLove_ID_ID_ARRAYSIZE = NetProto_FriendsLove_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FriendsLove_ID_descriptor();
inline const ::std::string& NetProto_FriendsLove_ID_Name(NetProto_FriendsLove_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FriendsLove_ID_descriptor(), value);
}
inline bool NetProto_FriendsLove_ID_Parse(
    const ::std::string& name, NetProto_FriendsLove_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FriendsLove_ID>(
    NetProto_FriendsLove_ID_descriptor(), name, value);
}
enum NetProto_ChangePartner_ID {
  NetProto_ChangePartner_ID_GROUPID = 3,
  NetProto_ChangePartner_ID_UNITID = 73
};
bool NetProto_ChangePartner_ID_IsValid(int value);
const NetProto_ChangePartner_ID NetProto_ChangePartner_ID_ID_MIN = NetProto_ChangePartner_ID_GROUPID;
const NetProto_ChangePartner_ID NetProto_ChangePartner_ID_ID_MAX = NetProto_ChangePartner_ID_UNITID;
const int NetProto_ChangePartner_ID_ID_ARRAYSIZE = NetProto_ChangePartner_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ChangePartner_ID_descriptor();
inline const ::std::string& NetProto_ChangePartner_ID_Name(NetProto_ChangePartner_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ChangePartner_ID_descriptor(), value);
}
inline bool NetProto_ChangePartner_ID_Parse(
    const ::std::string& name, NetProto_ChangePartner_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ChangePartner_ID>(
    NetProto_ChangePartner_ID_descriptor(), name, value);
}
enum NetProto_AddFansLove_ID {
  NetProto_AddFansLove_ID_GROUPID = 3,
  NetProto_AddFansLove_ID_UNITID = 74
};
bool NetProto_AddFansLove_ID_IsValid(int value);
const NetProto_AddFansLove_ID NetProto_AddFansLove_ID_ID_MIN = NetProto_AddFansLove_ID_GROUPID;
const NetProto_AddFansLove_ID NetProto_AddFansLove_ID_ID_MAX = NetProto_AddFansLove_ID_UNITID;
const int NetProto_AddFansLove_ID_ID_ARRAYSIZE = NetProto_AddFansLove_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddFansLove_ID_descriptor();
inline const ::std::string& NetProto_AddFansLove_ID_Name(NetProto_AddFansLove_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddFansLove_ID_descriptor(), value);
}
inline bool NetProto_AddFansLove_ID_Parse(
    const ::std::string& name, NetProto_AddFansLove_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddFansLove_ID>(
    NetProto_AddFansLove_ID_descriptor(), name, value);
}
enum NetProto_ModifyLovePoint_ID {
  NetProto_ModifyLovePoint_ID_GROUPID = 3,
  NetProto_ModifyLovePoint_ID_UNITID = 75
};
bool NetProto_ModifyLovePoint_ID_IsValid(int value);
const NetProto_ModifyLovePoint_ID NetProto_ModifyLovePoint_ID_ID_MIN = NetProto_ModifyLovePoint_ID_GROUPID;
const NetProto_ModifyLovePoint_ID NetProto_ModifyLovePoint_ID_ID_MAX = NetProto_ModifyLovePoint_ID_UNITID;
const int NetProto_ModifyLovePoint_ID_ID_ARRAYSIZE = NetProto_ModifyLovePoint_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyLovePoint_ID_descriptor();
inline const ::std::string& NetProto_ModifyLovePoint_ID_Name(NetProto_ModifyLovePoint_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyLovePoint_ID_descriptor(), value);
}
inline bool NetProto_ModifyLovePoint_ID_Parse(
    const ::std::string& name, NetProto_ModifyLovePoint_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyLovePoint_ID>(
    NetProto_ModifyLovePoint_ID_descriptor(), name, value);
}
enum NetProto_BuyDurability_ID {
  NetProto_BuyDurability_ID_GROUPID = 3,
  NetProto_BuyDurability_ID_UNITID = 76
};
bool NetProto_BuyDurability_ID_IsValid(int value);
const NetProto_BuyDurability_ID NetProto_BuyDurability_ID_ID_MIN = NetProto_BuyDurability_ID_GROUPID;
const NetProto_BuyDurability_ID NetProto_BuyDurability_ID_ID_MAX = NetProto_BuyDurability_ID_UNITID;
const int NetProto_BuyDurability_ID_ID_ARRAYSIZE = NetProto_BuyDurability_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BuyDurability_ID_descriptor();
inline const ::std::string& NetProto_BuyDurability_ID_Name(NetProto_BuyDurability_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BuyDurability_ID_descriptor(), value);
}
inline bool NetProto_BuyDurability_ID_Parse(
    const ::std::string& name, NetProto_BuyDurability_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BuyDurability_ID>(
    NetProto_BuyDurability_ID_descriptor(), name, value);
}
enum NetProto_LoginObtRMB_ID {
  NetProto_LoginObtRMB_ID_GROUPID = 3,
  NetProto_LoginObtRMB_ID_UNITID = 77
};
bool NetProto_LoginObtRMB_ID_IsValid(int value);
const NetProto_LoginObtRMB_ID NetProto_LoginObtRMB_ID_ID_MIN = NetProto_LoginObtRMB_ID_GROUPID;
const NetProto_LoginObtRMB_ID NetProto_LoginObtRMB_ID_ID_MAX = NetProto_LoginObtRMB_ID_UNITID;
const int NetProto_LoginObtRMB_ID_ID_ARRAYSIZE = NetProto_LoginObtRMB_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_LoginObtRMB_ID_descriptor();
inline const ::std::string& NetProto_LoginObtRMB_ID_Name(NetProto_LoginObtRMB_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_LoginObtRMB_ID_descriptor(), value);
}
inline bool NetProto_LoginObtRMB_ID_Parse(
    const ::std::string& name, NetProto_LoginObtRMB_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_LoginObtRMB_ID>(
    NetProto_LoginObtRMB_ID_descriptor(), name, value);
}
enum NetProto_UnwearWing_ID {
  NetProto_UnwearWing_ID_GROUPID = 3,
  NetProto_UnwearWing_ID_UNITID = 78
};
bool NetProto_UnwearWing_ID_IsValid(int value);
const NetProto_UnwearWing_ID NetProto_UnwearWing_ID_ID_MIN = NetProto_UnwearWing_ID_GROUPID;
const NetProto_UnwearWing_ID NetProto_UnwearWing_ID_ID_MAX = NetProto_UnwearWing_ID_UNITID;
const int NetProto_UnwearWing_ID_ID_ARRAYSIZE = NetProto_UnwearWing_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UnwearWing_ID_descriptor();
inline const ::std::string& NetProto_UnwearWing_ID_Name(NetProto_UnwearWing_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UnwearWing_ID_descriptor(), value);
}
inline bool NetProto_UnwearWing_ID_Parse(
    const ::std::string& name, NetProto_UnwearWing_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UnwearWing_ID>(
    NetProto_UnwearWing_ID_descriptor(), name, value);
}
enum NetProto_GetEquip_ID {
  NetProto_GetEquip_ID_GROUPID = 3,
  NetProto_GetEquip_ID_UNITID = 79
};
bool NetProto_GetEquip_ID_IsValid(int value);
const NetProto_GetEquip_ID NetProto_GetEquip_ID_ID_MIN = NetProto_GetEquip_ID_GROUPID;
const NetProto_GetEquip_ID NetProto_GetEquip_ID_ID_MAX = NetProto_GetEquip_ID_UNITID;
const int NetProto_GetEquip_ID_ID_ARRAYSIZE = NetProto_GetEquip_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GetEquip_ID_descriptor();
inline const ::std::string& NetProto_GetEquip_ID_Name(NetProto_GetEquip_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GetEquip_ID_descriptor(), value);
}
inline bool NetProto_GetEquip_ID_Parse(
    const ::std::string& name, NetProto_GetEquip_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GetEquip_ID>(
    NetProto_GetEquip_ID_descriptor(), name, value);
}
enum NetProto_ResetCount_ID {
  NetProto_ResetCount_ID_GROUPID = 3,
  NetProto_ResetCount_ID_UNITID = 80
};
bool NetProto_ResetCount_ID_IsValid(int value);
const NetProto_ResetCount_ID NetProto_ResetCount_ID_ID_MIN = NetProto_ResetCount_ID_GROUPID;
const NetProto_ResetCount_ID NetProto_ResetCount_ID_ID_MAX = NetProto_ResetCount_ID_UNITID;
const int NetProto_ResetCount_ID_ID_ARRAYSIZE = NetProto_ResetCount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ResetCount_ID_descriptor();
inline const ::std::string& NetProto_ResetCount_ID_Name(NetProto_ResetCount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ResetCount_ID_descriptor(), value);
}
inline bool NetProto_ResetCount_ID_Parse(
    const ::std::string& name, NetProto_ResetCount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ResetCount_ID>(
    NetProto_ResetCount_ID_descriptor(), name, value);
}
enum NetProto_ResetCount_Type {
  NetProto_ResetCount_Type_SINGLE_ENHANCE = 0,
  NetProto_ResetCount_Type_BOSS = 1,
  NetProto_ResetCount_Type_GOD = 2,
  NetProto_ResetCount_Type_GOD_CD = 3,
  NetProto_ResetCount_Type_QUICK_FIGHT_CD = 4
};
bool NetProto_ResetCount_Type_IsValid(int value);
const NetProto_ResetCount_Type NetProto_ResetCount_Type_Type_MIN = NetProto_ResetCount_Type_SINGLE_ENHANCE;
const NetProto_ResetCount_Type NetProto_ResetCount_Type_Type_MAX = NetProto_ResetCount_Type_QUICK_FIGHT_CD;
const int NetProto_ResetCount_Type_Type_ARRAYSIZE = NetProto_ResetCount_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ResetCount_Type_descriptor();
inline const ::std::string& NetProto_ResetCount_Type_Name(NetProto_ResetCount_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ResetCount_Type_descriptor(), value);
}
inline bool NetProto_ResetCount_Type_Parse(
    const ::std::string& name, NetProto_ResetCount_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ResetCount_Type>(
    NetProto_ResetCount_Type_descriptor(), name, value);
}
enum NetProto_GodPlayer_ID {
  NetProto_GodPlayer_ID_GROUPID = 3,
  NetProto_GodPlayer_ID_UNITID = 81
};
bool NetProto_GodPlayer_ID_IsValid(int value);
const NetProto_GodPlayer_ID NetProto_GodPlayer_ID_ID_MIN = NetProto_GodPlayer_ID_GROUPID;
const NetProto_GodPlayer_ID NetProto_GodPlayer_ID_ID_MAX = NetProto_GodPlayer_ID_UNITID;
const int NetProto_GodPlayer_ID_ID_ARRAYSIZE = NetProto_GodPlayer_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GodPlayer_ID_descriptor();
inline const ::std::string& NetProto_GodPlayer_ID_Name(NetProto_GodPlayer_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GodPlayer_ID_descriptor(), value);
}
inline bool NetProto_GodPlayer_ID_Parse(
    const ::std::string& name, NetProto_GodPlayer_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GodPlayer_ID>(
    NetProto_GodPlayer_ID_descriptor(), name, value);
}
enum NetProto_GodRandomPlayer_ID {
  NetProto_GodRandomPlayer_ID_GROUPID = 3,
  NetProto_GodRandomPlayer_ID_UNITID = 82
};
bool NetProto_GodRandomPlayer_ID_IsValid(int value);
const NetProto_GodRandomPlayer_ID NetProto_GodRandomPlayer_ID_ID_MIN = NetProto_GodRandomPlayer_ID_GROUPID;
const NetProto_GodRandomPlayer_ID NetProto_GodRandomPlayer_ID_ID_MAX = NetProto_GodRandomPlayer_ID_UNITID;
const int NetProto_GodRandomPlayer_ID_ID_ARRAYSIZE = NetProto_GodRandomPlayer_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GodRandomPlayer_ID_descriptor();
inline const ::std::string& NetProto_GodRandomPlayer_ID_Name(NetProto_GodRandomPlayer_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GodRandomPlayer_ID_descriptor(), value);
}
inline bool NetProto_GodRandomPlayer_ID_Parse(
    const ::std::string& name, NetProto_GodRandomPlayer_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GodRandomPlayer_ID>(
    NetProto_GodRandomPlayer_ID_descriptor(), name, value);
}
enum NetProto_GodRecords_ID {
  NetProto_GodRecords_ID_GROUPID = 3,
  NetProto_GodRecords_ID_UNITID = 83
};
bool NetProto_GodRecords_ID_IsValid(int value);
const NetProto_GodRecords_ID NetProto_GodRecords_ID_ID_MIN = NetProto_GodRecords_ID_GROUPID;
const NetProto_GodRecords_ID NetProto_GodRecords_ID_ID_MAX = NetProto_GodRecords_ID_UNITID;
const int NetProto_GodRecords_ID_ID_ARRAYSIZE = NetProto_GodRecords_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GodRecords_ID_descriptor();
inline const ::std::string& NetProto_GodRecords_ID_Name(NetProto_GodRecords_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GodRecords_ID_descriptor(), value);
}
inline bool NetProto_GodRecords_ID_Parse(
    const ::std::string& name, NetProto_GodRecords_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GodRecords_ID>(
    NetProto_GodRecords_ID_descriptor(), name, value);
}
enum NetProto_GodPanel_ID {
  NetProto_GodPanel_ID_GROUPID = 3,
  NetProto_GodPanel_ID_UNITID = 84
};
bool NetProto_GodPanel_ID_IsValid(int value);
const NetProto_GodPanel_ID NetProto_GodPanel_ID_ID_MIN = NetProto_GodPanel_ID_GROUPID;
const NetProto_GodPanel_ID NetProto_GodPanel_ID_ID_MAX = NetProto_GodPanel_ID_UNITID;
const int NetProto_GodPanel_ID_ID_ARRAYSIZE = NetProto_GodPanel_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GodPanel_ID_descriptor();
inline const ::std::string& NetProto_GodPanel_ID_Name(NetProto_GodPanel_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GodPanel_ID_descriptor(), value);
}
inline bool NetProto_GodPanel_ID_Parse(
    const ::std::string& name, NetProto_GodPanel_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GodPanel_ID>(
    NetProto_GodPanel_ID_descriptor(), name, value);
}
enum NetProto_SelectGodRole_ID {
  NetProto_SelectGodRole_ID_GROUPID = 3,
  NetProto_SelectGodRole_ID_UNITID = 85
};
bool NetProto_SelectGodRole_ID_IsValid(int value);
const NetProto_SelectGodRole_ID NetProto_SelectGodRole_ID_ID_MIN = NetProto_SelectGodRole_ID_GROUPID;
const NetProto_SelectGodRole_ID NetProto_SelectGodRole_ID_ID_MAX = NetProto_SelectGodRole_ID_UNITID;
const int NetProto_SelectGodRole_ID_ID_ARRAYSIZE = NetProto_SelectGodRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SelectGodRole_ID_descriptor();
inline const ::std::string& NetProto_SelectGodRole_ID_Name(NetProto_SelectGodRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SelectGodRole_ID_descriptor(), value);
}
inline bool NetProto_SelectGodRole_ID_Parse(
    const ::std::string& name, NetProto_SelectGodRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SelectGodRole_ID>(
    NetProto_SelectGodRole_ID_descriptor(), name, value);
}
enum NetProto_SetSpecial_ID {
  NetProto_SetSpecial_ID_GROUPID = 3,
  NetProto_SetSpecial_ID_UNITID = 86
};
bool NetProto_SetSpecial_ID_IsValid(int value);
const NetProto_SetSpecial_ID NetProto_SetSpecial_ID_ID_MIN = NetProto_SetSpecial_ID_GROUPID;
const NetProto_SetSpecial_ID NetProto_SetSpecial_ID_ID_MAX = NetProto_SetSpecial_ID_UNITID;
const int NetProto_SetSpecial_ID_ID_ARRAYSIZE = NetProto_SetSpecial_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SetSpecial_ID_descriptor();
inline const ::std::string& NetProto_SetSpecial_ID_Name(NetProto_SetSpecial_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SetSpecial_ID_descriptor(), value);
}
inline bool NetProto_SetSpecial_ID_Parse(
    const ::std::string& name, NetProto_SetSpecial_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SetSpecial_ID>(
    NetProto_SetSpecial_ID_descriptor(), name, value);
}
enum NetProto_ResolveEquips_ID {
  NetProto_ResolveEquips_ID_GROUPID = 3,
  NetProto_ResolveEquips_ID_UNITID = 87
};
bool NetProto_ResolveEquips_ID_IsValid(int value);
const NetProto_ResolveEquips_ID NetProto_ResolveEquips_ID_ID_MIN = NetProto_ResolveEquips_ID_GROUPID;
const NetProto_ResolveEquips_ID NetProto_ResolveEquips_ID_ID_MAX = NetProto_ResolveEquips_ID_UNITID;
const int NetProto_ResolveEquips_ID_ID_ARRAYSIZE = NetProto_ResolveEquips_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ResolveEquips_ID_descriptor();
inline const ::std::string& NetProto_ResolveEquips_ID_Name(NetProto_ResolveEquips_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ResolveEquips_ID_descriptor(), value);
}
inline bool NetProto_ResolveEquips_ID_Parse(
    const ::std::string& name, NetProto_ResolveEquips_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ResolveEquips_ID>(
    NetProto_ResolveEquips_ID_descriptor(), name, value);
}
enum NetProto_ModifyPKScoreActive_ID {
  NetProto_ModifyPKScoreActive_ID_GROUPID = 3,
  NetProto_ModifyPKScoreActive_ID_UNITID = 88
};
bool NetProto_ModifyPKScoreActive_ID_IsValid(int value);
const NetProto_ModifyPKScoreActive_ID NetProto_ModifyPKScoreActive_ID_ID_MIN = NetProto_ModifyPKScoreActive_ID_GROUPID;
const NetProto_ModifyPKScoreActive_ID NetProto_ModifyPKScoreActive_ID_ID_MAX = NetProto_ModifyPKScoreActive_ID_UNITID;
const int NetProto_ModifyPKScoreActive_ID_ID_ARRAYSIZE = NetProto_ModifyPKScoreActive_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyPKScoreActive_ID_descriptor();
inline const ::std::string& NetProto_ModifyPKScoreActive_ID_Name(NetProto_ModifyPKScoreActive_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyPKScoreActive_ID_descriptor(), value);
}
inline bool NetProto_ModifyPKScoreActive_ID_Parse(
    const ::std::string& name, NetProto_ModifyPKScoreActive_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyPKScoreActive_ID>(
    NetProto_ModifyPKScoreActive_ID_descriptor(), name, value);
}
enum NetProto_ModifyRMBActive_ID {
  NetProto_ModifyRMBActive_ID_GROUPID = 3,
  NetProto_ModifyRMBActive_ID_UNITID = 89
};
bool NetProto_ModifyRMBActive_ID_IsValid(int value);
const NetProto_ModifyRMBActive_ID NetProto_ModifyRMBActive_ID_ID_MIN = NetProto_ModifyRMBActive_ID_GROUPID;
const NetProto_ModifyRMBActive_ID NetProto_ModifyRMBActive_ID_ID_MAX = NetProto_ModifyRMBActive_ID_UNITID;
const int NetProto_ModifyRMBActive_ID_ID_ARRAYSIZE = NetProto_ModifyRMBActive_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyRMBActive_ID_descriptor();
inline const ::std::string& NetProto_ModifyRMBActive_ID_Name(NetProto_ModifyRMBActive_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyRMBActive_ID_descriptor(), value);
}
inline bool NetProto_ModifyRMBActive_ID_Parse(
    const ::std::string& name, NetProto_ModifyRMBActive_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyRMBActive_ID>(
    NetProto_ModifyRMBActive_ID_descriptor(), name, value);
}
enum NetProto_DropItem_ID {
  NetProto_DropItem_ID_GROUPID = 3,
  NetProto_DropItem_ID_UNITID = 90
};
bool NetProto_DropItem_ID_IsValid(int value);
const NetProto_DropItem_ID NetProto_DropItem_ID_ID_MIN = NetProto_DropItem_ID_GROUPID;
const NetProto_DropItem_ID NetProto_DropItem_ID_ID_MAX = NetProto_DropItem_ID_UNITID;
const int NetProto_DropItem_ID_ID_ARRAYSIZE = NetProto_DropItem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DropItem_ID_descriptor();
inline const ::std::string& NetProto_DropItem_ID_Name(NetProto_DropItem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DropItem_ID_descriptor(), value);
}
inline bool NetProto_DropItem_ID_Parse(
    const ::std::string& name, NetProto_DropItem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DropItem_ID>(
    NetProto_DropItem_ID_descriptor(), name, value);
}
enum NetProto_SellGoods_ID {
  NetProto_SellGoods_ID_GROUPID = 3,
  NetProto_SellGoods_ID_UNITID = 91
};
bool NetProto_SellGoods_ID_IsValid(int value);
const NetProto_SellGoods_ID NetProto_SellGoods_ID_ID_MIN = NetProto_SellGoods_ID_GROUPID;
const NetProto_SellGoods_ID NetProto_SellGoods_ID_ID_MAX = NetProto_SellGoods_ID_UNITID;
const int NetProto_SellGoods_ID_ID_ARRAYSIZE = NetProto_SellGoods_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SellGoods_ID_descriptor();
inline const ::std::string& NetProto_SellGoods_ID_Name(NetProto_SellGoods_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SellGoods_ID_descriptor(), value);
}
inline bool NetProto_SellGoods_ID_Parse(
    const ::std::string& name, NetProto_SellGoods_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SellGoods_ID>(
    NetProto_SellGoods_ID_descriptor(), name, value);
}
enum NetProto_Luck_ID {
  NetProto_Luck_ID_GROUPID = 3,
  NetProto_Luck_ID_UNITID = 92
};
bool NetProto_Luck_ID_IsValid(int value);
const NetProto_Luck_ID NetProto_Luck_ID_ID_MIN = NetProto_Luck_ID_GROUPID;
const NetProto_Luck_ID NetProto_Luck_ID_ID_MAX = NetProto_Luck_ID_UNITID;
const int NetProto_Luck_ID_ID_ARRAYSIZE = NetProto_Luck_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Luck_ID_descriptor();
inline const ::std::string& NetProto_Luck_ID_Name(NetProto_Luck_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Luck_ID_descriptor(), value);
}
inline bool NetProto_Luck_ID_Parse(
    const ::std::string& name, NetProto_Luck_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Luck_ID>(
    NetProto_Luck_ID_descriptor(), name, value);
}
enum NetProto_GrabRedEnvelope_ID {
  NetProto_GrabRedEnvelope_ID_GROUPID = 3,
  NetProto_GrabRedEnvelope_ID_UNITID = 93
};
bool NetProto_GrabRedEnvelope_ID_IsValid(int value);
const NetProto_GrabRedEnvelope_ID NetProto_GrabRedEnvelope_ID_ID_MIN = NetProto_GrabRedEnvelope_ID_GROUPID;
const NetProto_GrabRedEnvelope_ID NetProto_GrabRedEnvelope_ID_ID_MAX = NetProto_GrabRedEnvelope_ID_UNITID;
const int NetProto_GrabRedEnvelope_ID_ID_ARRAYSIZE = NetProto_GrabRedEnvelope_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GrabRedEnvelope_ID_descriptor();
inline const ::std::string& NetProto_GrabRedEnvelope_ID_Name(NetProto_GrabRedEnvelope_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GrabRedEnvelope_ID_descriptor(), value);
}
inline bool NetProto_GrabRedEnvelope_ID_Parse(
    const ::std::string& name, NetProto_GrabRedEnvelope_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GrabRedEnvelope_ID>(
    NetProto_GrabRedEnvelope_ID_descriptor(), name, value);
}
enum NetProto_CatGift_ID {
  NetProto_CatGift_ID_GROUPID = 3,
  NetProto_CatGift_ID_UNITID = 94
};
bool NetProto_CatGift_ID_IsValid(int value);
const NetProto_CatGift_ID NetProto_CatGift_ID_ID_MIN = NetProto_CatGift_ID_GROUPID;
const NetProto_CatGift_ID NetProto_CatGift_ID_ID_MAX = NetProto_CatGift_ID_UNITID;
const int NetProto_CatGift_ID_ID_ARRAYSIZE = NetProto_CatGift_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_CatGift_ID_descriptor();
inline const ::std::string& NetProto_CatGift_ID_Name(NetProto_CatGift_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_CatGift_ID_descriptor(), value);
}
inline bool NetProto_CatGift_ID_Parse(
    const ::std::string& name, NetProto_CatGift_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_CatGift_ID>(
    NetProto_CatGift_ID_descriptor(), name, value);
}
enum NetProto_GroupPurchase_ID {
  NetProto_GroupPurchase_ID_GROUPID = 3,
  NetProto_GroupPurchase_ID_UNITID = 95
};
bool NetProto_GroupPurchase_ID_IsValid(int value);
const NetProto_GroupPurchase_ID NetProto_GroupPurchase_ID_ID_MIN = NetProto_GroupPurchase_ID_GROUPID;
const NetProto_GroupPurchase_ID NetProto_GroupPurchase_ID_ID_MAX = NetProto_GroupPurchase_ID_UNITID;
const int NetProto_GroupPurchase_ID_ID_ARRAYSIZE = NetProto_GroupPurchase_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GroupPurchase_ID_descriptor();
inline const ::std::string& NetProto_GroupPurchase_ID_Name(NetProto_GroupPurchase_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GroupPurchase_ID_descriptor(), value);
}
inline bool NetProto_GroupPurchase_ID_Parse(
    const ::std::string& name, NetProto_GroupPurchase_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GroupPurchase_ID>(
    NetProto_GroupPurchase_ID_descriptor(), name, value);
}
enum NetProto_Rides_ID {
  NetProto_Rides_ID_GROUPID = 3,
  NetProto_Rides_ID_UNITID = 96
};
bool NetProto_Rides_ID_IsValid(int value);
const NetProto_Rides_ID NetProto_Rides_ID_ID_MIN = NetProto_Rides_ID_GROUPID;
const NetProto_Rides_ID NetProto_Rides_ID_ID_MAX = NetProto_Rides_ID_UNITID;
const int NetProto_Rides_ID_ID_ARRAYSIZE = NetProto_Rides_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Rides_ID_descriptor();
inline const ::std::string& NetProto_Rides_ID_Name(NetProto_Rides_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Rides_ID_descriptor(), value);
}
inline bool NetProto_Rides_ID_Parse(
    const ::std::string& name, NetProto_Rides_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Rides_ID>(
    NetProto_Rides_ID_descriptor(), name, value);
}
enum NetProto_RidesTrain_ID {
  NetProto_RidesTrain_ID_GROUPID = 3,
  NetProto_RidesTrain_ID_UNITID = 97
};
bool NetProto_RidesTrain_ID_IsValid(int value);
const NetProto_RidesTrain_ID NetProto_RidesTrain_ID_ID_MIN = NetProto_RidesTrain_ID_GROUPID;
const NetProto_RidesTrain_ID NetProto_RidesTrain_ID_ID_MAX = NetProto_RidesTrain_ID_UNITID;
const int NetProto_RidesTrain_ID_ID_ARRAYSIZE = NetProto_RidesTrain_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RidesTrain_ID_descriptor();
inline const ::std::string& NetProto_RidesTrain_ID_Name(NetProto_RidesTrain_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RidesTrain_ID_descriptor(), value);
}
inline bool NetProto_RidesTrain_ID_Parse(
    const ::std::string& name, NetProto_RidesTrain_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RidesTrain_ID>(
    NetProto_RidesTrain_ID_descriptor(), name, value);
}
enum NetProto_GenRides_ID {
  NetProto_GenRides_ID_GROUPID = 3,
  NetProto_GenRides_ID_UNITID = 98
};
bool NetProto_GenRides_ID_IsValid(int value);
const NetProto_GenRides_ID NetProto_GenRides_ID_ID_MIN = NetProto_GenRides_ID_GROUPID;
const NetProto_GenRides_ID NetProto_GenRides_ID_ID_MAX = NetProto_GenRides_ID_UNITID;
const int NetProto_GenRides_ID_ID_ARRAYSIZE = NetProto_GenRides_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GenRides_ID_descriptor();
inline const ::std::string& NetProto_GenRides_ID_Name(NetProto_GenRides_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GenRides_ID_descriptor(), value);
}
inline bool NetProto_GenRides_ID_Parse(
    const ::std::string& name, NetProto_GenRides_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GenRides_ID>(
    NetProto_GenRides_ID_descriptor(), name, value);
}
enum NetProto_GodShip_ID {
  NetProto_GodShip_ID_GROUPID = 3,
  NetProto_GodShip_ID_UNITID = 99
};
bool NetProto_GodShip_ID_IsValid(int value);
const NetProto_GodShip_ID NetProto_GodShip_ID_ID_MIN = NetProto_GodShip_ID_GROUPID;
const NetProto_GodShip_ID NetProto_GodShip_ID_ID_MAX = NetProto_GodShip_ID_UNITID;
const int NetProto_GodShip_ID_ID_ARRAYSIZE = NetProto_GodShip_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GodShip_ID_descriptor();
inline const ::std::string& NetProto_GodShip_ID_Name(NetProto_GodShip_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GodShip_ID_descriptor(), value);
}
inline bool NetProto_GodShip_ID_Parse(
    const ::std::string& name, NetProto_GodShip_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GodShip_ID>(
    NetProto_GodShip_ID_descriptor(), name, value);
}
enum NetProto_Swallow_ID {
  NetProto_Swallow_ID_GROUPID = 3,
  NetProto_Swallow_ID_UNITID = 100
};
bool NetProto_Swallow_ID_IsValid(int value);
const NetProto_Swallow_ID NetProto_Swallow_ID_ID_MIN = NetProto_Swallow_ID_GROUPID;
const NetProto_Swallow_ID NetProto_Swallow_ID_ID_MAX = NetProto_Swallow_ID_UNITID;
const int NetProto_Swallow_ID_ID_ARRAYSIZE = NetProto_Swallow_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Swallow_ID_descriptor();
inline const ::std::string& NetProto_Swallow_ID_Name(NetProto_Swallow_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Swallow_ID_descriptor(), value);
}
inline bool NetProto_Swallow_ID_Parse(
    const ::std::string& name, NetProto_Swallow_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Swallow_ID>(
    NetProto_Swallow_ID_descriptor(), name, value);
}
enum NetProto_GodPackage_ID {
  NetProto_GodPackage_ID_GROUPID = 3,
  NetProto_GodPackage_ID_UNITID = 101
};
bool NetProto_GodPackage_ID_IsValid(int value);
const NetProto_GodPackage_ID NetProto_GodPackage_ID_ID_MIN = NetProto_GodPackage_ID_GROUPID;
const NetProto_GodPackage_ID NetProto_GodPackage_ID_ID_MAX = NetProto_GodPackage_ID_UNITID;
const int NetProto_GodPackage_ID_ID_ARRAYSIZE = NetProto_GodPackage_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GodPackage_ID_descriptor();
inline const ::std::string& NetProto_GodPackage_ID_Name(NetProto_GodPackage_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GodPackage_ID_descriptor(), value);
}
inline bool NetProto_GodPackage_ID_Parse(
    const ::std::string& name, NetProto_GodPackage_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GodPackage_ID>(
    NetProto_GodPackage_ID_descriptor(), name, value);
}
enum NetProto_WearGodShip_ID {
  NetProto_WearGodShip_ID_GROUPID = 3,
  NetProto_WearGodShip_ID_UNITID = 102
};
bool NetProto_WearGodShip_ID_IsValid(int value);
const NetProto_WearGodShip_ID NetProto_WearGodShip_ID_ID_MIN = NetProto_WearGodShip_ID_GROUPID;
const NetProto_WearGodShip_ID NetProto_WearGodShip_ID_ID_MAX = NetProto_WearGodShip_ID_UNITID;
const int NetProto_WearGodShip_ID_ID_ARRAYSIZE = NetProto_WearGodShip_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_WearGodShip_ID_descriptor();
inline const ::std::string& NetProto_WearGodShip_ID_Name(NetProto_WearGodShip_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_WearGodShip_ID_descriptor(), value);
}
inline bool NetProto_WearGodShip_ID_Parse(
    const ::std::string& name, NetProto_WearGodShip_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_WearGodShip_ID>(
    NetProto_WearGodShip_ID_descriptor(), name, value);
}
enum NetProto_UnWearGodShip_ID {
  NetProto_UnWearGodShip_ID_GROUPID = 3,
  NetProto_UnWearGodShip_ID_UNITID = 103
};
bool NetProto_UnWearGodShip_ID_IsValid(int value);
const NetProto_UnWearGodShip_ID NetProto_UnWearGodShip_ID_ID_MIN = NetProto_UnWearGodShip_ID_GROUPID;
const NetProto_UnWearGodShip_ID NetProto_UnWearGodShip_ID_ID_MAX = NetProto_UnWearGodShip_ID_UNITID;
const int NetProto_UnWearGodShip_ID_ID_ARRAYSIZE = NetProto_UnWearGodShip_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UnWearGodShip_ID_descriptor();
inline const ::std::string& NetProto_UnWearGodShip_ID_Name(NetProto_UnWearGodShip_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UnWearGodShip_ID_descriptor(), value);
}
inline bool NetProto_UnWearGodShip_ID_Parse(
    const ::std::string& name, NetProto_UnWearGodShip_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UnWearGodShip_ID>(
    NetProto_UnWearGodShip_ID_descriptor(), name, value);
}
enum NetProto_ArrangeGodShip_ID {
  NetProto_ArrangeGodShip_ID_GROUPID = 3,
  NetProto_ArrangeGodShip_ID_UNITID = 104
};
bool NetProto_ArrangeGodShip_ID_IsValid(int value);
const NetProto_ArrangeGodShip_ID NetProto_ArrangeGodShip_ID_ID_MIN = NetProto_ArrangeGodShip_ID_GROUPID;
const NetProto_ArrangeGodShip_ID NetProto_ArrangeGodShip_ID_ID_MAX = NetProto_ArrangeGodShip_ID_UNITID;
const int NetProto_ArrangeGodShip_ID_ID_ARRAYSIZE = NetProto_ArrangeGodShip_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ArrangeGodShip_ID_descriptor();
inline const ::std::string& NetProto_ArrangeGodShip_ID_Name(NetProto_ArrangeGodShip_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ArrangeGodShip_ID_descriptor(), value);
}
inline bool NetProto_ArrangeGodShip_ID_Parse(
    const ::std::string& name, NetProto_ArrangeGodShip_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ArrangeGodShip_ID>(
    NetProto_ArrangeGodShip_ID_descriptor(), name, value);
}
enum NetProto_RidesUP_ID {
  NetProto_RidesUP_ID_GROUPID = 3,
  NetProto_RidesUP_ID_UNITID = 105
};
bool NetProto_RidesUP_ID_IsValid(int value);
const NetProto_RidesUP_ID NetProto_RidesUP_ID_ID_MIN = NetProto_RidesUP_ID_GROUPID;
const NetProto_RidesUP_ID NetProto_RidesUP_ID_ID_MAX = NetProto_RidesUP_ID_UNITID;
const int NetProto_RidesUP_ID_ID_ARRAYSIZE = NetProto_RidesUP_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RidesUP_ID_descriptor();
inline const ::std::string& NetProto_RidesUP_ID_Name(NetProto_RidesUP_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RidesUP_ID_descriptor(), value);
}
inline bool NetProto_RidesUP_ID_Parse(
    const ::std::string& name, NetProto_RidesUP_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RidesUP_ID>(
    NetProto_RidesUP_ID_descriptor(), name, value);
}
enum NetProto_RidesInherit_ID {
  NetProto_RidesInherit_ID_GROUPID = 3,
  NetProto_RidesInherit_ID_UNITID = 106
};
bool NetProto_RidesInherit_ID_IsValid(int value);
const NetProto_RidesInherit_ID NetProto_RidesInherit_ID_ID_MIN = NetProto_RidesInherit_ID_GROUPID;
const NetProto_RidesInherit_ID NetProto_RidesInherit_ID_ID_MAX = NetProto_RidesInherit_ID_UNITID;
const int NetProto_RidesInherit_ID_ID_ARRAYSIZE = NetProto_RidesInherit_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RidesInherit_ID_descriptor();
inline const ::std::string& NetProto_RidesInherit_ID_Name(NetProto_RidesInherit_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RidesInherit_ID_descriptor(), value);
}
inline bool NetProto_RidesInherit_ID_Parse(
    const ::std::string& name, NetProto_RidesInherit_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RidesInherit_ID>(
    NetProto_RidesInherit_ID_descriptor(), name, value);
}
enum NetProto_SingleGodShip_ID {
  NetProto_SingleGodShip_ID_GROUPID = 3,
  NetProto_SingleGodShip_ID_UNITID = 107
};
bool NetProto_SingleGodShip_ID_IsValid(int value);
const NetProto_SingleGodShip_ID NetProto_SingleGodShip_ID_ID_MIN = NetProto_SingleGodShip_ID_GROUPID;
const NetProto_SingleGodShip_ID NetProto_SingleGodShip_ID_ID_MAX = NetProto_SingleGodShip_ID_UNITID;
const int NetProto_SingleGodShip_ID_ID_ARRAYSIZE = NetProto_SingleGodShip_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SingleGodShip_ID_descriptor();
inline const ::std::string& NetProto_SingleGodShip_ID_Name(NetProto_SingleGodShip_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SingleGodShip_ID_descriptor(), value);
}
inline bool NetProto_SingleGodShip_ID_Parse(
    const ::std::string& name, NetProto_SingleGodShip_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SingleGodShip_ID>(
    NetProto_SingleGodShip_ID_descriptor(), name, value);
}
enum NetProto_RidesLockAtt_ID {
  NetProto_RidesLockAtt_ID_GROUPID = 3,
  NetProto_RidesLockAtt_ID_UNITID = 108
};
bool NetProto_RidesLockAtt_ID_IsValid(int value);
const NetProto_RidesLockAtt_ID NetProto_RidesLockAtt_ID_ID_MIN = NetProto_RidesLockAtt_ID_GROUPID;
const NetProto_RidesLockAtt_ID NetProto_RidesLockAtt_ID_ID_MAX = NetProto_RidesLockAtt_ID_UNITID;
const int NetProto_RidesLockAtt_ID_ID_ARRAYSIZE = NetProto_RidesLockAtt_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RidesLockAtt_ID_descriptor();
inline const ::std::string& NetProto_RidesLockAtt_ID_Name(NetProto_RidesLockAtt_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RidesLockAtt_ID_descriptor(), value);
}
inline bool NetProto_RidesLockAtt_ID_Parse(
    const ::std::string& name, NetProto_RidesLockAtt_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RidesLockAtt_ID>(
    NetProto_RidesLockAtt_ID_descriptor(), name, value);
}
enum NetProto_RidesConfirmTrain_ID {
  NetProto_RidesConfirmTrain_ID_GROUPID = 3,
  NetProto_RidesConfirmTrain_ID_UNITID = 109
};
bool NetProto_RidesConfirmTrain_ID_IsValid(int value);
const NetProto_RidesConfirmTrain_ID NetProto_RidesConfirmTrain_ID_ID_MIN = NetProto_RidesConfirmTrain_ID_GROUPID;
const NetProto_RidesConfirmTrain_ID NetProto_RidesConfirmTrain_ID_ID_MAX = NetProto_RidesConfirmTrain_ID_UNITID;
const int NetProto_RidesConfirmTrain_ID_ID_ARRAYSIZE = NetProto_RidesConfirmTrain_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RidesConfirmTrain_ID_descriptor();
inline const ::std::string& NetProto_RidesConfirmTrain_ID_Name(NetProto_RidesConfirmTrain_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RidesConfirmTrain_ID_descriptor(), value);
}
inline bool NetProto_RidesConfirmTrain_ID_Parse(
    const ::std::string& name, NetProto_RidesConfirmTrain_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RidesConfirmTrain_ID>(
    NetProto_RidesConfirmTrain_ID_descriptor(), name, value);
}
enum NetProto_RidesUnLockAtt_ID {
  NetProto_RidesUnLockAtt_ID_GROUPID = 3,
  NetProto_RidesUnLockAtt_ID_UNITID = 110
};
bool NetProto_RidesUnLockAtt_ID_IsValid(int value);
const NetProto_RidesUnLockAtt_ID NetProto_RidesUnLockAtt_ID_ID_MIN = NetProto_RidesUnLockAtt_ID_GROUPID;
const NetProto_RidesUnLockAtt_ID NetProto_RidesUnLockAtt_ID_ID_MAX = NetProto_RidesUnLockAtt_ID_UNITID;
const int NetProto_RidesUnLockAtt_ID_ID_ARRAYSIZE = NetProto_RidesUnLockAtt_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RidesUnLockAtt_ID_descriptor();
inline const ::std::string& NetProto_RidesUnLockAtt_ID_Name(NetProto_RidesUnLockAtt_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RidesUnLockAtt_ID_descriptor(), value);
}
inline bool NetProto_RidesUnLockAtt_ID_Parse(
    const ::std::string& name, NetProto_RidesUnLockAtt_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RidesUnLockAtt_ID>(
    NetProto_RidesUnLockAtt_ID_descriptor(), name, value);
}
enum NetProto_AddStatus_ID {
  NetProto_AddStatus_ID_GROUPID = 4,
  NetProto_AddStatus_ID_UNITID = 2
};
bool NetProto_AddStatus_ID_IsValid(int value);
const NetProto_AddStatus_ID NetProto_AddStatus_ID_ID_MIN = NetProto_AddStatus_ID_UNITID;
const NetProto_AddStatus_ID NetProto_AddStatus_ID_ID_MAX = NetProto_AddStatus_ID_GROUPID;
const int NetProto_AddStatus_ID_ID_ARRAYSIZE = NetProto_AddStatus_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddStatus_ID_descriptor();
inline const ::std::string& NetProto_AddStatus_ID_Name(NetProto_AddStatus_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddStatus_ID_descriptor(), value);
}
inline bool NetProto_AddStatus_ID_Parse(
    const ::std::string& name, NetProto_AddStatus_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddStatus_ID>(
    NetProto_AddStatus_ID_descriptor(), name, value);
}
enum NetProto_AddStatus_Type {
  NetProto_AddStatus_Type_PLAYER = 0,
  NetProto_AddStatus_Type_NPC = 1
};
bool NetProto_AddStatus_Type_IsValid(int value);
const NetProto_AddStatus_Type NetProto_AddStatus_Type_Type_MIN = NetProto_AddStatus_Type_PLAYER;
const NetProto_AddStatus_Type NetProto_AddStatus_Type_Type_MAX = NetProto_AddStatus_Type_NPC;
const int NetProto_AddStatus_Type_Type_ARRAYSIZE = NetProto_AddStatus_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddStatus_Type_descriptor();
inline const ::std::string& NetProto_AddStatus_Type_Name(NetProto_AddStatus_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddStatus_Type_descriptor(), value);
}
inline bool NetProto_AddStatus_Type_Parse(
    const ::std::string& name, NetProto_AddStatus_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddStatus_Type>(
    NetProto_AddStatus_Type_descriptor(), name, value);
}
enum NetProto_Hit_ID {
  NetProto_Hit_ID_GROUPID = 4,
  NetProto_Hit_ID_UNITID = 0
};
bool NetProto_Hit_ID_IsValid(int value);
const NetProto_Hit_ID NetProto_Hit_ID_ID_MIN = NetProto_Hit_ID_UNITID;
const NetProto_Hit_ID NetProto_Hit_ID_ID_MAX = NetProto_Hit_ID_GROUPID;
const int NetProto_Hit_ID_ID_ARRAYSIZE = NetProto_Hit_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Hit_ID_descriptor();
inline const ::std::string& NetProto_Hit_ID_Name(NetProto_Hit_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Hit_ID_descriptor(), value);
}
inline bool NetProto_Hit_ID_Parse(
    const ::std::string& name, NetProto_Hit_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Hit_ID>(
    NetProto_Hit_ID_descriptor(), name, value);
}
enum NetProto_Hit_Type {
  NetProto_Hit_Type_PLAYER = 0,
  NetProto_Hit_Type_NPC = 1
};
bool NetProto_Hit_Type_IsValid(int value);
const NetProto_Hit_Type NetProto_Hit_Type_Type_MIN = NetProto_Hit_Type_PLAYER;
const NetProto_Hit_Type NetProto_Hit_Type_Type_MAX = NetProto_Hit_Type_NPC;
const int NetProto_Hit_Type_Type_ARRAYSIZE = NetProto_Hit_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Hit_Type_descriptor();
inline const ::std::string& NetProto_Hit_Type_Name(NetProto_Hit_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Hit_Type_descriptor(), value);
}
inline bool NetProto_Hit_Type_Parse(
    const ::std::string& name, NetProto_Hit_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Hit_Type>(
    NetProto_Hit_Type_descriptor(), name, value);
}
enum NetProto_StatusEffect_ID {
  NetProto_StatusEffect_ID_GROUPID = 4,
  NetProto_StatusEffect_ID_UNITID = 1
};
bool NetProto_StatusEffect_ID_IsValid(int value);
const NetProto_StatusEffect_ID NetProto_StatusEffect_ID_ID_MIN = NetProto_StatusEffect_ID_UNITID;
const NetProto_StatusEffect_ID NetProto_StatusEffect_ID_ID_MAX = NetProto_StatusEffect_ID_GROUPID;
const int NetProto_StatusEffect_ID_ID_ARRAYSIZE = NetProto_StatusEffect_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StatusEffect_ID_descriptor();
inline const ::std::string& NetProto_StatusEffect_ID_Name(NetProto_StatusEffect_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StatusEffect_ID_descriptor(), value);
}
inline bool NetProto_StatusEffect_ID_Parse(
    const ::std::string& name, NetProto_StatusEffect_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StatusEffect_ID>(
    NetProto_StatusEffect_ID_descriptor(), name, value);
}
enum NetProto_StatusEffect_Type {
  NetProto_StatusEffect_Type_PLAYER = 0,
  NetProto_StatusEffect_Type_NPC = 1
};
bool NetProto_StatusEffect_Type_IsValid(int value);
const NetProto_StatusEffect_Type NetProto_StatusEffect_Type_Type_MIN = NetProto_StatusEffect_Type_PLAYER;
const NetProto_StatusEffect_Type NetProto_StatusEffect_Type_Type_MAX = NetProto_StatusEffect_Type_NPC;
const int NetProto_StatusEffect_Type_Type_ARRAYSIZE = NetProto_StatusEffect_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StatusEffect_Type_descriptor();
inline const ::std::string& NetProto_StatusEffect_Type_Name(NetProto_StatusEffect_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StatusEffect_Type_descriptor(), value);
}
inline bool NetProto_StatusEffect_Type_Parse(
    const ::std::string& name, NetProto_StatusEffect_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StatusEffect_Type>(
    NetProto_StatusEffect_Type_descriptor(), name, value);
}
enum NetProto_StatusEffect_Effect {
  NetProto_StatusEffect_Effect_NONE = 0,
  NetProto_StatusEffect_Effect_DODGE = 1,
  NetProto_StatusEffect_Effect_CRIT = 2
};
bool NetProto_StatusEffect_Effect_IsValid(int value);
const NetProto_StatusEffect_Effect NetProto_StatusEffect_Effect_Effect_MIN = NetProto_StatusEffect_Effect_NONE;
const NetProto_StatusEffect_Effect NetProto_StatusEffect_Effect_Effect_MAX = NetProto_StatusEffect_Effect_CRIT;
const int NetProto_StatusEffect_Effect_Effect_ARRAYSIZE = NetProto_StatusEffect_Effect_Effect_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StatusEffect_Effect_descriptor();
inline const ::std::string& NetProto_StatusEffect_Effect_Name(NetProto_StatusEffect_Effect value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StatusEffect_Effect_descriptor(), value);
}
inline bool NetProto_StatusEffect_Effect_Parse(
    const ::std::string& name, NetProto_StatusEffect_Effect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StatusEffect_Effect>(
    NetProto_StatusEffect_Effect_descriptor(), name, value);
}
enum NetProto_StaticOver_ID {
  NetProto_StaticOver_ID_GROUPID = 4,
  NetProto_StaticOver_ID_UNITID = 3
};
bool NetProto_StaticOver_ID_IsValid(int value);
const NetProto_StaticOver_ID NetProto_StaticOver_ID_ID_MIN = NetProto_StaticOver_ID_UNITID;
const NetProto_StaticOver_ID NetProto_StaticOver_ID_ID_MAX = NetProto_StaticOver_ID_GROUPID;
const int NetProto_StaticOver_ID_ID_ARRAYSIZE = NetProto_StaticOver_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StaticOver_ID_descriptor();
inline const ::std::string& NetProto_StaticOver_ID_Name(NetProto_StaticOver_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StaticOver_ID_descriptor(), value);
}
inline bool NetProto_StaticOver_ID_Parse(
    const ::std::string& name, NetProto_StaticOver_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StaticOver_ID>(
    NetProto_StaticOver_ID_descriptor(), name, value);
}
enum NetProto_StaticOver_Type {
  NetProto_StaticOver_Type_PLAYER = 0,
  NetProto_StaticOver_Type_NPC = 1
};
bool NetProto_StaticOver_Type_IsValid(int value);
const NetProto_StaticOver_Type NetProto_StaticOver_Type_Type_MIN = NetProto_StaticOver_Type_PLAYER;
const NetProto_StaticOver_Type NetProto_StaticOver_Type_Type_MAX = NetProto_StaticOver_Type_NPC;
const int NetProto_StaticOver_Type_Type_ARRAYSIZE = NetProto_StaticOver_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StaticOver_Type_descriptor();
inline const ::std::string& NetProto_StaticOver_Type_Name(NetProto_StaticOver_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StaticOver_Type_descriptor(), value);
}
inline bool NetProto_StaticOver_Type_Parse(
    const ::std::string& name, NetProto_StaticOver_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StaticOver_Type>(
    NetProto_StaticOver_Type_descriptor(), name, value);
}
enum NetProto_Standup_ID {
  NetProto_Standup_ID_GROUPID = 4,
  NetProto_Standup_ID_UNITID = 4
};
bool NetProto_Standup_ID_IsValid(int value);
const NetProto_Standup_ID NetProto_Standup_ID_ID_MIN = NetProto_Standup_ID_GROUPID;
const NetProto_Standup_ID NetProto_Standup_ID_ID_MAX = NetProto_Standup_ID_GROUPID;
const int NetProto_Standup_ID_ID_ARRAYSIZE = NetProto_Standup_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Standup_ID_descriptor();
inline const ::std::string& NetProto_Standup_ID_Name(NetProto_Standup_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Standup_ID_descriptor(), value);
}
inline bool NetProto_Standup_ID_Parse(
    const ::std::string& name, NetProto_Standup_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Standup_ID>(
    NetProto_Standup_ID_descriptor(), name, value);
}
enum NetProto_Standup_Type {
  NetProto_Standup_Type_PLAYER = 0,
  NetProto_Standup_Type_NPC = 1
};
bool NetProto_Standup_Type_IsValid(int value);
const NetProto_Standup_Type NetProto_Standup_Type_Type_MIN = NetProto_Standup_Type_PLAYER;
const NetProto_Standup_Type NetProto_Standup_Type_Type_MAX = NetProto_Standup_Type_NPC;
const int NetProto_Standup_Type_Type_ARRAYSIZE = NetProto_Standup_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Standup_Type_descriptor();
inline const ::std::string& NetProto_Standup_Type_Name(NetProto_Standup_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Standup_Type_descriptor(), value);
}
inline bool NetProto_Standup_Type_Parse(
    const ::std::string& name, NetProto_Standup_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Standup_Type>(
    NetProto_Standup_Type_descriptor(), name, value);
}
enum NetProto_SkillLevelUp_ID {
  NetProto_SkillLevelUp_ID_GROUPID = 4,
  NetProto_SkillLevelUp_ID_UNITID = 6
};
bool NetProto_SkillLevelUp_ID_IsValid(int value);
const NetProto_SkillLevelUp_ID NetProto_SkillLevelUp_ID_ID_MIN = NetProto_SkillLevelUp_ID_GROUPID;
const NetProto_SkillLevelUp_ID NetProto_SkillLevelUp_ID_ID_MAX = NetProto_SkillLevelUp_ID_UNITID;
const int NetProto_SkillLevelUp_ID_ID_ARRAYSIZE = NetProto_SkillLevelUp_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SkillLevelUp_ID_descriptor();
inline const ::std::string& NetProto_SkillLevelUp_ID_Name(NetProto_SkillLevelUp_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SkillLevelUp_ID_descriptor(), value);
}
inline bool NetProto_SkillLevelUp_ID_Parse(
    const ::std::string& name, NetProto_SkillLevelUp_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SkillLevelUp_ID>(
    NetProto_SkillLevelUp_ID_descriptor(), name, value);
}
enum NetProto_ClearSkill_ID {
  NetProto_ClearSkill_ID_GROUPID = 4,
  NetProto_ClearSkill_ID_UNITID = 7
};
bool NetProto_ClearSkill_ID_IsValid(int value);
const NetProto_ClearSkill_ID NetProto_ClearSkill_ID_ID_MIN = NetProto_ClearSkill_ID_GROUPID;
const NetProto_ClearSkill_ID NetProto_ClearSkill_ID_ID_MAX = NetProto_ClearSkill_ID_UNITID;
const int NetProto_ClearSkill_ID_ID_ARRAYSIZE = NetProto_ClearSkill_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ClearSkill_ID_descriptor();
inline const ::std::string& NetProto_ClearSkill_ID_Name(NetProto_ClearSkill_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ClearSkill_ID_descriptor(), value);
}
inline bool NetProto_ClearSkill_ID_Parse(
    const ::std::string& name, NetProto_ClearSkill_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ClearSkill_ID>(
    NetProto_ClearSkill_ID_descriptor(), name, value);
}
enum NetProto_DestroySkill_ID {
  NetProto_DestroySkill_ID_GROUPID = 4,
  NetProto_DestroySkill_ID_UNITID = 8
};
bool NetProto_DestroySkill_ID_IsValid(int value);
const NetProto_DestroySkill_ID NetProto_DestroySkill_ID_ID_MIN = NetProto_DestroySkill_ID_GROUPID;
const NetProto_DestroySkill_ID NetProto_DestroySkill_ID_ID_MAX = NetProto_DestroySkill_ID_UNITID;
const int NetProto_DestroySkill_ID_ID_ARRAYSIZE = NetProto_DestroySkill_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DestroySkill_ID_descriptor();
inline const ::std::string& NetProto_DestroySkill_ID_Name(NetProto_DestroySkill_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DestroySkill_ID_descriptor(), value);
}
inline bool NetProto_DestroySkill_ID_Parse(
    const ::std::string& name, NetProto_DestroySkill_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DestroySkill_ID>(
    NetProto_DestroySkill_ID_descriptor(), name, value);
}
enum NetProto_AddGoods_ID {
  NetProto_AddGoods_ID_GROUPID = 5,
  NetProto_AddGoods_ID_UNITID = 0
};
bool NetProto_AddGoods_ID_IsValid(int value);
const NetProto_AddGoods_ID NetProto_AddGoods_ID_ID_MIN = NetProto_AddGoods_ID_UNITID;
const NetProto_AddGoods_ID NetProto_AddGoods_ID_ID_MAX = NetProto_AddGoods_ID_GROUPID;
const int NetProto_AddGoods_ID_ID_ARRAYSIZE = NetProto_AddGoods_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddGoods_ID_descriptor();
inline const ::std::string& NetProto_AddGoods_ID_Name(NetProto_AddGoods_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddGoods_ID_descriptor(), value);
}
inline bool NetProto_AddGoods_ID_Parse(
    const ::std::string& name, NetProto_AddGoods_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddGoods_ID>(
    NetProto_AddGoods_ID_descriptor(), name, value);
}
enum NetProto_AddGoods_Type {
  NetProto_AddGoods_Type_PACKAGE = 0,
  NetProto_AddGoods_Type_BODY = 1
};
bool NetProto_AddGoods_Type_IsValid(int value);
const NetProto_AddGoods_Type NetProto_AddGoods_Type_Type_MIN = NetProto_AddGoods_Type_PACKAGE;
const NetProto_AddGoods_Type NetProto_AddGoods_Type_Type_MAX = NetProto_AddGoods_Type_BODY;
const int NetProto_AddGoods_Type_Type_ARRAYSIZE = NetProto_AddGoods_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddGoods_Type_descriptor();
inline const ::std::string& NetProto_AddGoods_Type_Name(NetProto_AddGoods_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddGoods_Type_descriptor(), value);
}
inline bool NetProto_AddGoods_Type_Parse(
    const ::std::string& name, NetProto_AddGoods_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddGoods_Type>(
    NetProto_AddGoods_Type_descriptor(), name, value);
}
enum NetProto_AddEquipments_ID {
  NetProto_AddEquipments_ID_GROUPID = 5,
  NetProto_AddEquipments_ID_UNITID = 1
};
bool NetProto_AddEquipments_ID_IsValid(int value);
const NetProto_AddEquipments_ID NetProto_AddEquipments_ID_ID_MIN = NetProto_AddEquipments_ID_UNITID;
const NetProto_AddEquipments_ID NetProto_AddEquipments_ID_ID_MAX = NetProto_AddEquipments_ID_GROUPID;
const int NetProto_AddEquipments_ID_ID_ARRAYSIZE = NetProto_AddEquipments_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddEquipments_ID_descriptor();
inline const ::std::string& NetProto_AddEquipments_ID_Name(NetProto_AddEquipments_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddEquipments_ID_descriptor(), value);
}
inline bool NetProto_AddEquipments_ID_Parse(
    const ::std::string& name, NetProto_AddEquipments_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddEquipments_ID>(
    NetProto_AddEquipments_ID_descriptor(), name, value);
}
enum NetProto_AddEquipments_Type {
  NetProto_AddEquipments_Type_PACKAGE = 0,
  NetProto_AddEquipments_Type_BODY = 1
};
bool NetProto_AddEquipments_Type_IsValid(int value);
const NetProto_AddEquipments_Type NetProto_AddEquipments_Type_Type_MIN = NetProto_AddEquipments_Type_PACKAGE;
const NetProto_AddEquipments_Type NetProto_AddEquipments_Type_Type_MAX = NetProto_AddEquipments_Type_BODY;
const int NetProto_AddEquipments_Type_Type_ARRAYSIZE = NetProto_AddEquipments_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddEquipments_Type_descriptor();
inline const ::std::string& NetProto_AddEquipments_Type_Name(NetProto_AddEquipments_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddEquipments_Type_descriptor(), value);
}
inline bool NetProto_AddEquipments_Type_Parse(
    const ::std::string& name, NetProto_AddEquipments_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddEquipments_Type>(
    NetProto_AddEquipments_Type_descriptor(), name, value);
}
enum NetProto_ShiftItem_ID {
  NetProto_ShiftItem_ID_GROUPID = 5,
  NetProto_ShiftItem_ID_UNITID = 2
};
bool NetProto_ShiftItem_ID_IsValid(int value);
const NetProto_ShiftItem_ID NetProto_ShiftItem_ID_ID_MIN = NetProto_ShiftItem_ID_UNITID;
const NetProto_ShiftItem_ID NetProto_ShiftItem_ID_ID_MAX = NetProto_ShiftItem_ID_GROUPID;
const int NetProto_ShiftItem_ID_ID_ARRAYSIZE = NetProto_ShiftItem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ShiftItem_ID_descriptor();
inline const ::std::string& NetProto_ShiftItem_ID_Name(NetProto_ShiftItem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ShiftItem_ID_descriptor(), value);
}
inline bool NetProto_ShiftItem_ID_Parse(
    const ::std::string& name, NetProto_ShiftItem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ShiftItem_ID>(
    NetProto_ShiftItem_ID_descriptor(), name, value);
}
enum NetProto_ShiftItem_Type {
  NetProto_ShiftItem_Type_PACKAGE = 0,
  NetProto_ShiftItem_Type_BODY = 1,
  NetProto_ShiftItem_Type_ALT = 2,
  NetProto_ShiftItem_Type_SKILL = 3,
  NetProto_ShiftItem_Type_FASHION = 4,
  NetProto_ShiftItem_Type_WING = 5
};
bool NetProto_ShiftItem_Type_IsValid(int value);
const NetProto_ShiftItem_Type NetProto_ShiftItem_Type_Type_MIN = NetProto_ShiftItem_Type_PACKAGE;
const NetProto_ShiftItem_Type NetProto_ShiftItem_Type_Type_MAX = NetProto_ShiftItem_Type_WING;
const int NetProto_ShiftItem_Type_Type_ARRAYSIZE = NetProto_ShiftItem_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ShiftItem_Type_descriptor();
inline const ::std::string& NetProto_ShiftItem_Type_Name(NetProto_ShiftItem_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ShiftItem_Type_descriptor(), value);
}
inline bool NetProto_ShiftItem_Type_Parse(
    const ::std::string& name, NetProto_ShiftItem_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ShiftItem_Type>(
    NetProto_ShiftItem_Type_descriptor(), name, value);
}
enum NetProto_QueryItemInfo_ID {
  NetProto_QueryItemInfo_ID_GROUPID = 5,
  NetProto_QueryItemInfo_ID_UNITID = 3
};
bool NetProto_QueryItemInfo_ID_IsValid(int value);
const NetProto_QueryItemInfo_ID NetProto_QueryItemInfo_ID_ID_MIN = NetProto_QueryItemInfo_ID_UNITID;
const NetProto_QueryItemInfo_ID NetProto_QueryItemInfo_ID_ID_MAX = NetProto_QueryItemInfo_ID_GROUPID;
const int NetProto_QueryItemInfo_ID_ID_ARRAYSIZE = NetProto_QueryItemInfo_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_QueryItemInfo_ID_descriptor();
inline const ::std::string& NetProto_QueryItemInfo_ID_Name(NetProto_QueryItemInfo_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_QueryItemInfo_ID_descriptor(), value);
}
inline bool NetProto_QueryItemInfo_ID_Parse(
    const ::std::string& name, NetProto_QueryItemInfo_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_QueryItemInfo_ID>(
    NetProto_QueryItemInfo_ID_descriptor(), name, value);
}
enum NetProto_QueryItemInfo_Type {
  NetProto_QueryItemInfo_Type_GOODS = 0,
  NetProto_QueryItemInfo_Type_EQUIPMENT = 1
};
bool NetProto_QueryItemInfo_Type_IsValid(int value);
const NetProto_QueryItemInfo_Type NetProto_QueryItemInfo_Type_Type_MIN = NetProto_QueryItemInfo_Type_GOODS;
const NetProto_QueryItemInfo_Type NetProto_QueryItemInfo_Type_Type_MAX = NetProto_QueryItemInfo_Type_EQUIPMENT;
const int NetProto_QueryItemInfo_Type_Type_ARRAYSIZE = NetProto_QueryItemInfo_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_QueryItemInfo_Type_descriptor();
inline const ::std::string& NetProto_QueryItemInfo_Type_Name(NetProto_QueryItemInfo_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_QueryItemInfo_Type_descriptor(), value);
}
inline bool NetProto_QueryItemInfo_Type_Parse(
    const ::std::string& name, NetProto_QueryItemInfo_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_QueryItemInfo_Type>(
    NetProto_QueryItemInfo_Type_descriptor(), name, value);
}
enum NetProto_BuyItem_ID {
  NetProto_BuyItem_ID_GROUPID = 5,
  NetProto_BuyItem_ID_UNITID = 4
};
bool NetProto_BuyItem_ID_IsValid(int value);
const NetProto_BuyItem_ID NetProto_BuyItem_ID_ID_MIN = NetProto_BuyItem_ID_UNITID;
const NetProto_BuyItem_ID NetProto_BuyItem_ID_ID_MAX = NetProto_BuyItem_ID_GROUPID;
const int NetProto_BuyItem_ID_ID_ARRAYSIZE = NetProto_BuyItem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BuyItem_ID_descriptor();
inline const ::std::string& NetProto_BuyItem_ID_Name(NetProto_BuyItem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BuyItem_ID_descriptor(), value);
}
inline bool NetProto_BuyItem_ID_Parse(
    const ::std::string& name, NetProto_BuyItem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BuyItem_ID>(
    NetProto_BuyItem_ID_descriptor(), name, value);
}
enum NetProto_SellItem_ID {
  NetProto_SellItem_ID_GROUPID = 5,
  NetProto_SellItem_ID_UNITID = 5
};
bool NetProto_SellItem_ID_IsValid(int value);
const NetProto_SellItem_ID NetProto_SellItem_ID_ID_MIN = NetProto_SellItem_ID_GROUPID;
const NetProto_SellItem_ID NetProto_SellItem_ID_ID_MAX = NetProto_SellItem_ID_GROUPID;
const int NetProto_SellItem_ID_ID_ARRAYSIZE = NetProto_SellItem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SellItem_ID_descriptor();
inline const ::std::string& NetProto_SellItem_ID_Name(NetProto_SellItem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SellItem_ID_descriptor(), value);
}
inline bool NetProto_SellItem_ID_Parse(
    const ::std::string& name, NetProto_SellItem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SellItem_ID>(
    NetProto_SellItem_ID_descriptor(), name, value);
}
enum NetProto_Repair_ID {
  NetProto_Repair_ID_GROUPID = 5,
  NetProto_Repair_ID_UNITID = 6
};
bool NetProto_Repair_ID_IsValid(int value);
const NetProto_Repair_ID NetProto_Repair_ID_ID_MIN = NetProto_Repair_ID_GROUPID;
const NetProto_Repair_ID NetProto_Repair_ID_ID_MAX = NetProto_Repair_ID_UNITID;
const int NetProto_Repair_ID_ID_ARRAYSIZE = NetProto_Repair_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Repair_ID_descriptor();
inline const ::std::string& NetProto_Repair_ID_Name(NetProto_Repair_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Repair_ID_descriptor(), value);
}
inline bool NetProto_Repair_ID_Parse(
    const ::std::string& name, NetProto_Repair_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Repair_ID>(
    NetProto_Repair_ID_descriptor(), name, value);
}
enum NetProto_UseGoods_ID {
  NetProto_UseGoods_ID_GROUPID = 5,
  NetProto_UseGoods_ID_UNITID = 7
};
bool NetProto_UseGoods_ID_IsValid(int value);
const NetProto_UseGoods_ID NetProto_UseGoods_ID_ID_MIN = NetProto_UseGoods_ID_GROUPID;
const NetProto_UseGoods_ID NetProto_UseGoods_ID_ID_MAX = NetProto_UseGoods_ID_UNITID;
const int NetProto_UseGoods_ID_ID_ARRAYSIZE = NetProto_UseGoods_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UseGoods_ID_descriptor();
inline const ::std::string& NetProto_UseGoods_ID_Name(NetProto_UseGoods_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UseGoods_ID_descriptor(), value);
}
inline bool NetProto_UseGoods_ID_Parse(
    const ::std::string& name, NetProto_UseGoods_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UseGoods_ID>(
    NetProto_UseGoods_ID_descriptor(), name, value);
}
enum NetProto_UnlockPackage_ID {
  NetProto_UnlockPackage_ID_GROUPID = 5,
  NetProto_UnlockPackage_ID_UNITID = 8
};
bool NetProto_UnlockPackage_ID_IsValid(int value);
const NetProto_UnlockPackage_ID NetProto_UnlockPackage_ID_ID_MIN = NetProto_UnlockPackage_ID_GROUPID;
const NetProto_UnlockPackage_ID NetProto_UnlockPackage_ID_ID_MAX = NetProto_UnlockPackage_ID_UNITID;
const int NetProto_UnlockPackage_ID_ID_ARRAYSIZE = NetProto_UnlockPackage_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UnlockPackage_ID_descriptor();
inline const ::std::string& NetProto_UnlockPackage_ID_Name(NetProto_UnlockPackage_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UnlockPackage_ID_descriptor(), value);
}
inline bool NetProto_UnlockPackage_ID_Parse(
    const ::std::string& name, NetProto_UnlockPackage_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UnlockPackage_ID>(
    NetProto_UnlockPackage_ID_descriptor(), name, value);
}
enum NetProto_RecoverDurability_ID {
  NetProto_RecoverDurability_ID_GROUPID = 5,
  NetProto_RecoverDurability_ID_UNITID = 9
};
bool NetProto_RecoverDurability_ID_IsValid(int value);
const NetProto_RecoverDurability_ID NetProto_RecoverDurability_ID_ID_MIN = NetProto_RecoverDurability_ID_GROUPID;
const NetProto_RecoverDurability_ID NetProto_RecoverDurability_ID_ID_MAX = NetProto_RecoverDurability_ID_UNITID;
const int NetProto_RecoverDurability_ID_ID_ARRAYSIZE = NetProto_RecoverDurability_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RecoverDurability_ID_descriptor();
inline const ::std::string& NetProto_RecoverDurability_ID_Name(NetProto_RecoverDurability_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RecoverDurability_ID_descriptor(), value);
}
inline bool NetProto_RecoverDurability_ID_Parse(
    const ::std::string& name, NetProto_RecoverDurability_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RecoverDurability_ID>(
    NetProto_RecoverDurability_ID_descriptor(), name, value);
}
enum NetProto_AddDesignation_ID {
  NetProto_AddDesignation_ID_GROUPID = 5,
  NetProto_AddDesignation_ID_UNITID = 10
};
bool NetProto_AddDesignation_ID_IsValid(int value);
const NetProto_AddDesignation_ID NetProto_AddDesignation_ID_ID_MIN = NetProto_AddDesignation_ID_GROUPID;
const NetProto_AddDesignation_ID NetProto_AddDesignation_ID_ID_MAX = NetProto_AddDesignation_ID_UNITID;
const int NetProto_AddDesignation_ID_ID_ARRAYSIZE = NetProto_AddDesignation_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddDesignation_ID_descriptor();
inline const ::std::string& NetProto_AddDesignation_ID_Name(NetProto_AddDesignation_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddDesignation_ID_descriptor(), value);
}
inline bool NetProto_AddDesignation_ID_Parse(
    const ::std::string& name, NetProto_AddDesignation_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddDesignation_ID>(
    NetProto_AddDesignation_ID_descriptor(), name, value);
}
enum NetProto_DelDesignation_ID {
  NetProto_DelDesignation_ID_GROUPID = 5,
  NetProto_DelDesignation_ID_UNITID = 11
};
bool NetProto_DelDesignation_ID_IsValid(int value);
const NetProto_DelDesignation_ID NetProto_DelDesignation_ID_ID_MIN = NetProto_DelDesignation_ID_GROUPID;
const NetProto_DelDesignation_ID NetProto_DelDesignation_ID_ID_MAX = NetProto_DelDesignation_ID_UNITID;
const int NetProto_DelDesignation_ID_ID_ARRAYSIZE = NetProto_DelDesignation_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DelDesignation_ID_descriptor();
inline const ::std::string& NetProto_DelDesignation_ID_Name(NetProto_DelDesignation_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DelDesignation_ID_descriptor(), value);
}
inline bool NetProto_DelDesignation_ID_Parse(
    const ::std::string& name, NetProto_DelDesignation_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DelDesignation_ID>(
    NetProto_DelDesignation_ID_descriptor(), name, value);
}
enum NetProto_ShowDesignation_ID {
  NetProto_ShowDesignation_ID_GROUPID = 5,
  NetProto_ShowDesignation_ID_UNITID = 12
};
bool NetProto_ShowDesignation_ID_IsValid(int value);
const NetProto_ShowDesignation_ID NetProto_ShowDesignation_ID_ID_MIN = NetProto_ShowDesignation_ID_GROUPID;
const NetProto_ShowDesignation_ID NetProto_ShowDesignation_ID_ID_MAX = NetProto_ShowDesignation_ID_UNITID;
const int NetProto_ShowDesignation_ID_ID_ARRAYSIZE = NetProto_ShowDesignation_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ShowDesignation_ID_descriptor();
inline const ::std::string& NetProto_ShowDesignation_ID_Name(NetProto_ShowDesignation_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ShowDesignation_ID_descriptor(), value);
}
inline bool NetProto_ShowDesignation_ID_Parse(
    const ::std::string& name, NetProto_ShowDesignation_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ShowDesignation_ID>(
    NetProto_ShowDesignation_ID_descriptor(), name, value);
}
enum NetProto_UnshowDesignation_ID {
  NetProto_UnshowDesignation_ID_GROUPID = 5,
  NetProto_UnshowDesignation_ID_UNITID = 13
};
bool NetProto_UnshowDesignation_ID_IsValid(int value);
const NetProto_UnshowDesignation_ID NetProto_UnshowDesignation_ID_ID_MIN = NetProto_UnshowDesignation_ID_GROUPID;
const NetProto_UnshowDesignation_ID NetProto_UnshowDesignation_ID_ID_MAX = NetProto_UnshowDesignation_ID_UNITID;
const int NetProto_UnshowDesignation_ID_ID_ARRAYSIZE = NetProto_UnshowDesignation_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UnshowDesignation_ID_descriptor();
inline const ::std::string& NetProto_UnshowDesignation_ID_Name(NetProto_UnshowDesignation_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UnshowDesignation_ID_descriptor(), value);
}
inline bool NetProto_UnshowDesignation_ID_Parse(
    const ::std::string& name, NetProto_UnshowDesignation_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UnshowDesignation_ID>(
    NetProto_UnshowDesignation_ID_descriptor(), name, value);
}
enum NetProto_Recharge_ID {
  NetProto_Recharge_ID_GROUPID = 5,
  NetProto_Recharge_ID_UNITID = 14
};
bool NetProto_Recharge_ID_IsValid(int value);
const NetProto_Recharge_ID NetProto_Recharge_ID_ID_MIN = NetProto_Recharge_ID_GROUPID;
const NetProto_Recharge_ID NetProto_Recharge_ID_ID_MAX = NetProto_Recharge_ID_UNITID;
const int NetProto_Recharge_ID_ID_ARRAYSIZE = NetProto_Recharge_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Recharge_ID_descriptor();
inline const ::std::string& NetProto_Recharge_ID_Name(NetProto_Recharge_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Recharge_ID_descriptor(), value);
}
inline bool NetProto_Recharge_ID_Parse(
    const ::std::string& name, NetProto_Recharge_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Recharge_ID>(
    NetProto_Recharge_ID_descriptor(), name, value);
}
enum NetProto_BusinessInfo_ID {
  NetProto_BusinessInfo_ID_GROUPID = 5,
  NetProto_BusinessInfo_ID_UNITID = 15
};
bool NetProto_BusinessInfo_ID_IsValid(int value);
const NetProto_BusinessInfo_ID NetProto_BusinessInfo_ID_ID_MIN = NetProto_BusinessInfo_ID_GROUPID;
const NetProto_BusinessInfo_ID NetProto_BusinessInfo_ID_ID_MAX = NetProto_BusinessInfo_ID_UNITID;
const int NetProto_BusinessInfo_ID_ID_ARRAYSIZE = NetProto_BusinessInfo_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BusinessInfo_ID_descriptor();
inline const ::std::string& NetProto_BusinessInfo_ID_Name(NetProto_BusinessInfo_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BusinessInfo_ID_descriptor(), value);
}
inline bool NetProto_BusinessInfo_ID_Parse(
    const ::std::string& name, NetProto_BusinessInfo_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BusinessInfo_ID>(
    NetProto_BusinessInfo_ID_descriptor(), name, value);
}
enum NetProto_TransformWar_ID {
  NetProto_TransformWar_ID_GROUPID = 5,
  NetProto_TransformWar_ID_UNITID = 16
};
bool NetProto_TransformWar_ID_IsValid(int value);
const NetProto_TransformWar_ID NetProto_TransformWar_ID_ID_MIN = NetProto_TransformWar_ID_GROUPID;
const NetProto_TransformWar_ID NetProto_TransformWar_ID_ID_MAX = NetProto_TransformWar_ID_UNITID;
const int NetProto_TransformWar_ID_ID_ARRAYSIZE = NetProto_TransformWar_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_TransformWar_ID_descriptor();
inline const ::std::string& NetProto_TransformWar_ID_Name(NetProto_TransformWar_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_TransformWar_ID_descriptor(), value);
}
inline bool NetProto_TransformWar_ID_Parse(
    const ::std::string& name, NetProto_TransformWar_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_TransformWar_ID>(
    NetProto_TransformWar_ID_descriptor(), name, value);
}
enum NetProto_TransformLevelUp_ID {
  NetProto_TransformLevelUp_ID_GROUPID = 5,
  NetProto_TransformLevelUp_ID_UNITID = 17
};
bool NetProto_TransformLevelUp_ID_IsValid(int value);
const NetProto_TransformLevelUp_ID NetProto_TransformLevelUp_ID_ID_MIN = NetProto_TransformLevelUp_ID_GROUPID;
const NetProto_TransformLevelUp_ID NetProto_TransformLevelUp_ID_ID_MAX = NetProto_TransformLevelUp_ID_UNITID;
const int NetProto_TransformLevelUp_ID_ID_ARRAYSIZE = NetProto_TransformLevelUp_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_TransformLevelUp_ID_descriptor();
inline const ::std::string& NetProto_TransformLevelUp_ID_Name(NetProto_TransformLevelUp_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_TransformLevelUp_ID_descriptor(), value);
}
inline bool NetProto_TransformLevelUp_ID_Parse(
    const ::std::string& name, NetProto_TransformLevelUp_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_TransformLevelUp_ID>(
    NetProto_TransformLevelUp_ID_descriptor(), name, value);
}
enum NetProto_TransformActive_ID {
  NetProto_TransformActive_ID_GROUPID = 5,
  NetProto_TransformActive_ID_UNITID = 18
};
bool NetProto_TransformActive_ID_IsValid(int value);
const NetProto_TransformActive_ID NetProto_TransformActive_ID_ID_MIN = NetProto_TransformActive_ID_GROUPID;
const NetProto_TransformActive_ID NetProto_TransformActive_ID_ID_MAX = NetProto_TransformActive_ID_UNITID;
const int NetProto_TransformActive_ID_ID_ARRAYSIZE = NetProto_TransformActive_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_TransformActive_ID_descriptor();
inline const ::std::string& NetProto_TransformActive_ID_Name(NetProto_TransformActive_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_TransformActive_ID_descriptor(), value);
}
inline bool NetProto_TransformActive_ID_Parse(
    const ::std::string& name, NetProto_TransformActive_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_TransformActive_ID>(
    NetProto_TransformActive_ID_descriptor(), name, value);
}
enum NetProto_Reservation_ID {
  NetProto_Reservation_ID_GROUPID = 5,
  NetProto_Reservation_ID_UNITID = 19
};
bool NetProto_Reservation_ID_IsValid(int value);
const NetProto_Reservation_ID NetProto_Reservation_ID_ID_MIN = NetProto_Reservation_ID_GROUPID;
const NetProto_Reservation_ID NetProto_Reservation_ID_ID_MAX = NetProto_Reservation_ID_UNITID;
const int NetProto_Reservation_ID_ID_ARRAYSIZE = NetProto_Reservation_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Reservation_ID_descriptor();
inline const ::std::string& NetProto_Reservation_ID_Name(NetProto_Reservation_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Reservation_ID_descriptor(), value);
}
inline bool NetProto_Reservation_ID_Parse(
    const ::std::string& name, NetProto_Reservation_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Reservation_ID>(
    NetProto_Reservation_ID_descriptor(), name, value);
}
enum NetProto_ReservationList_ID {
  NetProto_ReservationList_ID_GROUPID = 5,
  NetProto_ReservationList_ID_UNITID = 20
};
bool NetProto_ReservationList_ID_IsValid(int value);
const NetProto_ReservationList_ID NetProto_ReservationList_ID_ID_MIN = NetProto_ReservationList_ID_GROUPID;
const NetProto_ReservationList_ID NetProto_ReservationList_ID_ID_MAX = NetProto_ReservationList_ID_UNITID;
const int NetProto_ReservationList_ID_ID_ARRAYSIZE = NetProto_ReservationList_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ReservationList_ID_descriptor();
inline const ::std::string& NetProto_ReservationList_ID_Name(NetProto_ReservationList_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ReservationList_ID_descriptor(), value);
}
inline bool NetProto_ReservationList_ID_Parse(
    const ::std::string& name, NetProto_ReservationList_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ReservationList_ID>(
    NetProto_ReservationList_ID_descriptor(), name, value);
}
enum NetProto_Talk_ID {
  NetProto_Talk_ID_GROUPID = 6,
  NetProto_Talk_ID_UNITID = 0
};
bool NetProto_Talk_ID_IsValid(int value);
const NetProto_Talk_ID NetProto_Talk_ID_ID_MIN = NetProto_Talk_ID_UNITID;
const NetProto_Talk_ID NetProto_Talk_ID_ID_MAX = NetProto_Talk_ID_GROUPID;
const int NetProto_Talk_ID_ID_ARRAYSIZE = NetProto_Talk_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Talk_ID_descriptor();
inline const ::std::string& NetProto_Talk_ID_Name(NetProto_Talk_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Talk_ID_descriptor(), value);
}
inline bool NetProto_Talk_ID_Parse(
    const ::std::string& name, NetProto_Talk_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Talk_ID>(
    NetProto_Talk_ID_descriptor(), name, value);
}
enum NetProto_Answer_ID {
  NetProto_Answer_ID_GROUPID = 6,
  NetProto_Answer_ID_UNITID = 1
};
bool NetProto_Answer_ID_IsValid(int value);
const NetProto_Answer_ID NetProto_Answer_ID_ID_MIN = NetProto_Answer_ID_UNITID;
const NetProto_Answer_ID NetProto_Answer_ID_ID_MAX = NetProto_Answer_ID_GROUPID;
const int NetProto_Answer_ID_ID_ARRAYSIZE = NetProto_Answer_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Answer_ID_descriptor();
inline const ::std::string& NetProto_Answer_ID_Name(NetProto_Answer_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Answer_ID_descriptor(), value);
}
inline bool NetProto_Answer_ID_Parse(
    const ::std::string& name, NetProto_Answer_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Answer_ID>(
    NetProto_Answer_ID_descriptor(), name, value);
}
enum NetProto_RequestFunc_ID {
  NetProto_RequestFunc_ID_GROUPID = 6,
  NetProto_RequestFunc_ID_UNITID = 2
};
bool NetProto_RequestFunc_ID_IsValid(int value);
const NetProto_RequestFunc_ID NetProto_RequestFunc_ID_ID_MIN = NetProto_RequestFunc_ID_UNITID;
const NetProto_RequestFunc_ID NetProto_RequestFunc_ID_ID_MAX = NetProto_RequestFunc_ID_GROUPID;
const int NetProto_RequestFunc_ID_ID_ARRAYSIZE = NetProto_RequestFunc_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_RequestFunc_ID_descriptor();
inline const ::std::string& NetProto_RequestFunc_ID_Name(NetProto_RequestFunc_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_RequestFunc_ID_descriptor(), value);
}
inline bool NetProto_RequestFunc_ID_Parse(
    const ::std::string& name, NetProto_RequestFunc_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_RequestFunc_ID>(
    NetProto_RequestFunc_ID_descriptor(), name, value);
}
enum NetProto_ReplyFunc_ID {
  NetProto_ReplyFunc_ID_GROUPID = 6,
  NetProto_ReplyFunc_ID_UNITID = 3
};
bool NetProto_ReplyFunc_ID_IsValid(int value);
const NetProto_ReplyFunc_ID NetProto_ReplyFunc_ID_ID_MIN = NetProto_ReplyFunc_ID_UNITID;
const NetProto_ReplyFunc_ID NetProto_ReplyFunc_ID_ID_MAX = NetProto_ReplyFunc_ID_GROUPID;
const int NetProto_ReplyFunc_ID_ID_ARRAYSIZE = NetProto_ReplyFunc_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ReplyFunc_ID_descriptor();
inline const ::std::string& NetProto_ReplyFunc_ID_Name(NetProto_ReplyFunc_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ReplyFunc_ID_descriptor(), value);
}
inline bool NetProto_ReplyFunc_ID_Parse(
    const ::std::string& name, NetProto_ReplyFunc_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ReplyFunc_ID>(
    NetProto_ReplyFunc_ID_descriptor(), name, value);
}
enum NetProto_ApplyMission_ID {
  NetProto_ApplyMission_ID_GROUPID = 6,
  NetProto_ApplyMission_ID_UNITID = 4
};
bool NetProto_ApplyMission_ID_IsValid(int value);
const NetProto_ApplyMission_ID NetProto_ApplyMission_ID_ID_MIN = NetProto_ApplyMission_ID_UNITID;
const NetProto_ApplyMission_ID NetProto_ApplyMission_ID_ID_MAX = NetProto_ApplyMission_ID_GROUPID;
const int NetProto_ApplyMission_ID_ID_ARRAYSIZE = NetProto_ApplyMission_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ApplyMission_ID_descriptor();
inline const ::std::string& NetProto_ApplyMission_ID_Name(NetProto_ApplyMission_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ApplyMission_ID_descriptor(), value);
}
inline bool NetProto_ApplyMission_ID_Parse(
    const ::std::string& name, NetProto_ApplyMission_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ApplyMission_ID>(
    NetProto_ApplyMission_ID_descriptor(), name, value);
}
enum NetProto_CompleteMission_ID {
  NetProto_CompleteMission_ID_GROUPID = 6,
  NetProto_CompleteMission_ID_UNITID = 5
};
bool NetProto_CompleteMission_ID_IsValid(int value);
const NetProto_CompleteMission_ID NetProto_CompleteMission_ID_ID_MIN = NetProto_CompleteMission_ID_UNITID;
const NetProto_CompleteMission_ID NetProto_CompleteMission_ID_ID_MAX = NetProto_CompleteMission_ID_GROUPID;
const int NetProto_CompleteMission_ID_ID_ARRAYSIZE = NetProto_CompleteMission_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_CompleteMission_ID_descriptor();
inline const ::std::string& NetProto_CompleteMission_ID_Name(NetProto_CompleteMission_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_CompleteMission_ID_descriptor(), value);
}
inline bool NetProto_CompleteMission_ID_Parse(
    const ::std::string& name, NetProto_CompleteMission_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_CompleteMission_ID>(
    NetProto_CompleteMission_ID_descriptor(), name, value);
}
enum NetProto_GiveUpMission_ID {
  NetProto_GiveUpMission_ID_GROUPID = 6,
  NetProto_GiveUpMission_ID_UNITID = 6
};
bool NetProto_GiveUpMission_ID_IsValid(int value);
const NetProto_GiveUpMission_ID NetProto_GiveUpMission_ID_ID_MIN = NetProto_GiveUpMission_ID_GROUPID;
const NetProto_GiveUpMission_ID NetProto_GiveUpMission_ID_ID_MAX = NetProto_GiveUpMission_ID_GROUPID;
const int NetProto_GiveUpMission_ID_ID_ARRAYSIZE = NetProto_GiveUpMission_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GiveUpMission_ID_descriptor();
inline const ::std::string& NetProto_GiveUpMission_ID_Name(NetProto_GiveUpMission_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GiveUpMission_ID_descriptor(), value);
}
inline bool NetProto_GiveUpMission_ID_Parse(
    const ::std::string& name, NetProto_GiveUpMission_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GiveUpMission_ID>(
    NetProto_GiveUpMission_ID_descriptor(), name, value);
}
enum NetProto_Chat_ID {
  NetProto_Chat_ID_GROUPID = 7,
  NetProto_Chat_ID_UNITID = 0
};
bool NetProto_Chat_ID_IsValid(int value);
const NetProto_Chat_ID NetProto_Chat_ID_ID_MIN = NetProto_Chat_ID_UNITID;
const NetProto_Chat_ID NetProto_Chat_ID_ID_MAX = NetProto_Chat_ID_GROUPID;
const int NetProto_Chat_ID_ID_ARRAYSIZE = NetProto_Chat_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Chat_ID_descriptor();
inline const ::std::string& NetProto_Chat_ID_Name(NetProto_Chat_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Chat_ID_descriptor(), value);
}
inline bool NetProto_Chat_ID_Parse(
    const ::std::string& name, NetProto_Chat_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Chat_ID>(
    NetProto_Chat_ID_descriptor(), name, value);
}
enum NetProto_Chat_Channel {
  NetProto_Chat_Channel_SYSTEM = 0,
  NetProto_Chat_Channel_GUILD = 1,
  NetProto_Chat_Channel_TEAM = 2,
  NetProto_Chat_Channel_WORLD = 3,
  NetProto_Chat_Channel_SECRET = 4,
  NetProto_Chat_Channel_CURSENCE = 5
};
bool NetProto_Chat_Channel_IsValid(int value);
const NetProto_Chat_Channel NetProto_Chat_Channel_Channel_MIN = NetProto_Chat_Channel_SYSTEM;
const NetProto_Chat_Channel NetProto_Chat_Channel_Channel_MAX = NetProto_Chat_Channel_CURSENCE;
const int NetProto_Chat_Channel_Channel_ARRAYSIZE = NetProto_Chat_Channel_Channel_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Chat_Channel_descriptor();
inline const ::std::string& NetProto_Chat_Channel_Name(NetProto_Chat_Channel value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Chat_Channel_descriptor(), value);
}
inline bool NetProto_Chat_Channel_Parse(
    const ::std::string& name, NetProto_Chat_Channel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Chat_Channel>(
    NetProto_Chat_Channel_descriptor(), name, value);
}
enum NetProto_Chat_Type {
  NetProto_Chat_Type_PLAYER = 0,
  NetProto_Chat_Type_NPC = 1
};
bool NetProto_Chat_Type_IsValid(int value);
const NetProto_Chat_Type NetProto_Chat_Type_Type_MIN = NetProto_Chat_Type_PLAYER;
const NetProto_Chat_Type NetProto_Chat_Type_Type_MAX = NetProto_Chat_Type_NPC;
const int NetProto_Chat_Type_Type_ARRAYSIZE = NetProto_Chat_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Chat_Type_descriptor();
inline const ::std::string& NetProto_Chat_Type_Name(NetProto_Chat_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Chat_Type_descriptor(), value);
}
inline bool NetProto_Chat_Type_Parse(
    const ::std::string& name, NetProto_Chat_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Chat_Type>(
    NetProto_Chat_Type_descriptor(), name, value);
}
enum NetProto_Message_ID {
  NetProto_Message_ID_GROUPID = 7,
  NetProto_Message_ID_UNITID = 1
};
bool NetProto_Message_ID_IsValid(int value);
const NetProto_Message_ID NetProto_Message_ID_ID_MIN = NetProto_Message_ID_UNITID;
const NetProto_Message_ID NetProto_Message_ID_ID_MAX = NetProto_Message_ID_GROUPID;
const int NetProto_Message_ID_ID_ARRAYSIZE = NetProto_Message_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Message_ID_descriptor();
inline const ::std::string& NetProto_Message_ID_Name(NetProto_Message_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Message_ID_descriptor(), value);
}
inline bool NetProto_Message_ID_Parse(
    const ::std::string& name, NetProto_Message_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Message_ID>(
    NetProto_Message_ID_descriptor(), name, value);
}
enum NetProto_SendMail_ID {
  NetProto_SendMail_ID_GROUPID = 7,
  NetProto_SendMail_ID_UNITID = 2
};
bool NetProto_SendMail_ID_IsValid(int value);
const NetProto_SendMail_ID NetProto_SendMail_ID_ID_MIN = NetProto_SendMail_ID_UNITID;
const NetProto_SendMail_ID NetProto_SendMail_ID_ID_MAX = NetProto_SendMail_ID_GROUPID;
const int NetProto_SendMail_ID_ID_ARRAYSIZE = NetProto_SendMail_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_SendMail_ID_descriptor();
inline const ::std::string& NetProto_SendMail_ID_Name(NetProto_SendMail_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_SendMail_ID_descriptor(), value);
}
inline bool NetProto_SendMail_ID_Parse(
    const ::std::string& name, NetProto_SendMail_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_SendMail_ID>(
    NetProto_SendMail_ID_descriptor(), name, value);
}
enum NetProto_GetMailItem_ID {
  NetProto_GetMailItem_ID_GROUPID = 7,
  NetProto_GetMailItem_ID_UNITID = 3
};
bool NetProto_GetMailItem_ID_IsValid(int value);
const NetProto_GetMailItem_ID NetProto_GetMailItem_ID_ID_MIN = NetProto_GetMailItem_ID_UNITID;
const NetProto_GetMailItem_ID NetProto_GetMailItem_ID_ID_MAX = NetProto_GetMailItem_ID_GROUPID;
const int NetProto_GetMailItem_ID_ID_ARRAYSIZE = NetProto_GetMailItem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GetMailItem_ID_descriptor();
inline const ::std::string& NetProto_GetMailItem_ID_Name(NetProto_GetMailItem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GetMailItem_ID_descriptor(), value);
}
inline bool NetProto_GetMailItem_ID_Parse(
    const ::std::string& name, NetProto_GetMailItem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GetMailItem_ID>(
    NetProto_GetMailItem_ID_descriptor(), name, value);
}
enum NetProto_ReadMail_ID {
  NetProto_ReadMail_ID_GROUPID = 7,
  NetProto_ReadMail_ID_UNITID = 4
};
bool NetProto_ReadMail_ID_IsValid(int value);
const NetProto_ReadMail_ID NetProto_ReadMail_ID_ID_MIN = NetProto_ReadMail_ID_UNITID;
const NetProto_ReadMail_ID NetProto_ReadMail_ID_ID_MAX = NetProto_ReadMail_ID_GROUPID;
const int NetProto_ReadMail_ID_ID_ARRAYSIZE = NetProto_ReadMail_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ReadMail_ID_descriptor();
inline const ::std::string& NetProto_ReadMail_ID_Name(NetProto_ReadMail_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ReadMail_ID_descriptor(), value);
}
inline bool NetProto_ReadMail_ID_Parse(
    const ::std::string& name, NetProto_ReadMail_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ReadMail_ID>(
    NetProto_ReadMail_ID_descriptor(), name, value);
}
enum NetProto_DelMail_ID {
  NetProto_DelMail_ID_GROUPID = 7,
  NetProto_DelMail_ID_UNITID = 5
};
bool NetProto_DelMail_ID_IsValid(int value);
const NetProto_DelMail_ID NetProto_DelMail_ID_ID_MIN = NetProto_DelMail_ID_UNITID;
const NetProto_DelMail_ID NetProto_DelMail_ID_ID_MAX = NetProto_DelMail_ID_GROUPID;
const int NetProto_DelMail_ID_ID_ARRAYSIZE = NetProto_DelMail_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DelMail_ID_descriptor();
inline const ::std::string& NetProto_DelMail_ID_Name(NetProto_DelMail_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DelMail_ID_descriptor(), value);
}
inline bool NetProto_DelMail_ID_Parse(
    const ::std::string& name, NetProto_DelMail_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DelMail_ID>(
    NetProto_DelMail_ID_descriptor(), name, value);
}
enum NetProto_GMLogin_ID {
  NetProto_GMLogin_ID_GROUPID = 8,
  NetProto_GMLogin_ID_UNITID = 0
};
bool NetProto_GMLogin_ID_IsValid(int value);
const NetProto_GMLogin_ID NetProto_GMLogin_ID_ID_MIN = NetProto_GMLogin_ID_UNITID;
const NetProto_GMLogin_ID NetProto_GMLogin_ID_ID_MAX = NetProto_GMLogin_ID_GROUPID;
const int NetProto_GMLogin_ID_ID_ARRAYSIZE = NetProto_GMLogin_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMLogin_ID_descriptor();
inline const ::std::string& NetProto_GMLogin_ID_Name(NetProto_GMLogin_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMLogin_ID_descriptor(), value);
}
inline bool NetProto_GMLogin_ID_Parse(
    const ::std::string& name, NetProto_GMLogin_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMLogin_ID>(
    NetProto_GMLogin_ID_descriptor(), name, value);
}
enum NetProto_GMLogin_OP {
  NetProto_GMLogin_OP_NONE = 0,
  NetProto_GMLogin_OP_CP = 1,
  NetProto_GMLogin_OP_YUNYING = 2,
  NetProto_GMLogin_OP_CUSTOM = 3
};
bool NetProto_GMLogin_OP_IsValid(int value);
const NetProto_GMLogin_OP NetProto_GMLogin_OP_OP_MIN = NetProto_GMLogin_OP_NONE;
const NetProto_GMLogin_OP NetProto_GMLogin_OP_OP_MAX = NetProto_GMLogin_OP_CUSTOM;
const int NetProto_GMLogin_OP_OP_ARRAYSIZE = NetProto_GMLogin_OP_OP_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMLogin_OP_descriptor();
inline const ::std::string& NetProto_GMLogin_OP_Name(NetProto_GMLogin_OP value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMLogin_OP_descriptor(), value);
}
inline bool NetProto_GMLogin_OP_Parse(
    const ::std::string& name, NetProto_GMLogin_OP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMLogin_OP>(
    NetProto_GMLogin_OP_descriptor(), name, value);
}
enum NetProto_GMOrder_ID {
  NetProto_GMOrder_ID_GROUPID = 8,
  NetProto_GMOrder_ID_UNITID = 2
};
bool NetProto_GMOrder_ID_IsValid(int value);
const NetProto_GMOrder_ID NetProto_GMOrder_ID_ID_MIN = NetProto_GMOrder_ID_UNITID;
const NetProto_GMOrder_ID NetProto_GMOrder_ID_ID_MAX = NetProto_GMOrder_ID_GROUPID;
const int NetProto_GMOrder_ID_ID_ARRAYSIZE = NetProto_GMOrder_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMOrder_ID_descriptor();
inline const ::std::string& NetProto_GMOrder_ID_Name(NetProto_GMOrder_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMOrder_ID_descriptor(), value);
}
inline bool NetProto_GMOrder_ID_Parse(
    const ::std::string& name, NetProto_GMOrder_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMOrder_ID>(
    NetProto_GMOrder_ID_descriptor(), name, value);
}
enum NetProto_GMOrder_Type {
  NetProto_GMOrder_Type_ONLINE_NUM = 0,
  NetProto_GMOrder_Type_GET_GOODS = 1,
  NetProto_GMOrder_Type_GET_RMB = 2,
  NetProto_GMOrder_Type_GET_MONEY = 3,
  NetProto_GMOrder_Type_MESSAGE = 4,
  NetProto_GMOrder_Type_SYSTEM = 5,
  NetProto_GMOrder_Type_GET_EQUIPMENT = 6,
  NetProto_GMOrder_Type_RELOAD = 7,
  NetProto_GMOrder_Type_MUL_EXP = 8
};
bool NetProto_GMOrder_Type_IsValid(int value);
const NetProto_GMOrder_Type NetProto_GMOrder_Type_Type_MIN = NetProto_GMOrder_Type_ONLINE_NUM;
const NetProto_GMOrder_Type NetProto_GMOrder_Type_Type_MAX = NetProto_GMOrder_Type_MUL_EXP;
const int NetProto_GMOrder_Type_Type_ARRAYSIZE = NetProto_GMOrder_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMOrder_Type_descriptor();
inline const ::std::string& NetProto_GMOrder_Type_Name(NetProto_GMOrder_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMOrder_Type_descriptor(), value);
}
inline bool NetProto_GMOrder_Type_Parse(
    const ::std::string& name, NetProto_GMOrder_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMOrder_Type>(
    NetProto_GMOrder_Type_descriptor(), name, value);
}
enum NetProto_GMOnlinePlayers_ID {
  NetProto_GMOnlinePlayers_ID_GROUPID = 8,
  NetProto_GMOnlinePlayers_ID_UNITID = 3
};
bool NetProto_GMOnlinePlayers_ID_IsValid(int value);
const NetProto_GMOnlinePlayers_ID NetProto_GMOnlinePlayers_ID_ID_MIN = NetProto_GMOnlinePlayers_ID_UNITID;
const NetProto_GMOnlinePlayers_ID NetProto_GMOnlinePlayers_ID_ID_MAX = NetProto_GMOnlinePlayers_ID_GROUPID;
const int NetProto_GMOnlinePlayers_ID_ID_ARRAYSIZE = NetProto_GMOnlinePlayers_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMOnlinePlayers_ID_descriptor();
inline const ::std::string& NetProto_GMOnlinePlayers_ID_Name(NetProto_GMOnlinePlayers_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMOnlinePlayers_ID_descriptor(), value);
}
inline bool NetProto_GMOnlinePlayers_ID_Parse(
    const ::std::string& name, NetProto_GMOnlinePlayers_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMOnlinePlayers_ID>(
    NetProto_GMOnlinePlayers_ID_descriptor(), name, value);
}
enum NetProto_GMChat_ID {
  NetProto_GMChat_ID_GROUPID = 8,
  NetProto_GMChat_ID_UNITID = 1
};
bool NetProto_GMChat_ID_IsValid(int value);
const NetProto_GMChat_ID NetProto_GMChat_ID_ID_MIN = NetProto_GMChat_ID_UNITID;
const NetProto_GMChat_ID NetProto_GMChat_ID_ID_MAX = NetProto_GMChat_ID_GROUPID;
const int NetProto_GMChat_ID_ID_ARRAYSIZE = NetProto_GMChat_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMChat_ID_descriptor();
inline const ::std::string& NetProto_GMChat_ID_Name(NetProto_GMChat_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMChat_ID_descriptor(), value);
}
inline bool NetProto_GMChat_ID_Parse(
    const ::std::string& name, NetProto_GMChat_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMChat_ID>(
    NetProto_GMChat_ID_descriptor(), name, value);
}
enum NetProto_GMServerMgr_ID {
  NetProto_GMServerMgr_ID_GROUPID = 8,
  NetProto_GMServerMgr_ID_UNITID = 5
};
bool NetProto_GMServerMgr_ID_IsValid(int value);
const NetProto_GMServerMgr_ID NetProto_GMServerMgr_ID_ID_MIN = NetProto_GMServerMgr_ID_UNITID;
const NetProto_GMServerMgr_ID NetProto_GMServerMgr_ID_ID_MAX = NetProto_GMServerMgr_ID_GROUPID;
const int NetProto_GMServerMgr_ID_ID_ARRAYSIZE = NetProto_GMServerMgr_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMServerMgr_ID_descriptor();
inline const ::std::string& NetProto_GMServerMgr_ID_Name(NetProto_GMServerMgr_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMServerMgr_ID_descriptor(), value);
}
inline bool NetProto_GMServerMgr_ID_Parse(
    const ::std::string& name, NetProto_GMServerMgr_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMServerMgr_ID>(
    NetProto_GMServerMgr_ID_descriptor(), name, value);
}
enum NetProto_GMPlayerQuery_ID {
  NetProto_GMPlayerQuery_ID_GROUPID = 8,
  NetProto_GMPlayerQuery_ID_UNITID = 6
};
bool NetProto_GMPlayerQuery_ID_IsValid(int value);
const NetProto_GMPlayerQuery_ID NetProto_GMPlayerQuery_ID_ID_MIN = NetProto_GMPlayerQuery_ID_UNITID;
const NetProto_GMPlayerQuery_ID NetProto_GMPlayerQuery_ID_ID_MAX = NetProto_GMPlayerQuery_ID_GROUPID;
const int NetProto_GMPlayerQuery_ID_ID_ARRAYSIZE = NetProto_GMPlayerQuery_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMPlayerQuery_ID_descriptor();
inline const ::std::string& NetProto_GMPlayerQuery_ID_Name(NetProto_GMPlayerQuery_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMPlayerQuery_ID_descriptor(), value);
}
inline bool NetProto_GMPlayerQuery_ID_Parse(
    const ::std::string& name, NetProto_GMPlayerQuery_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMPlayerQuery_ID>(
    NetProto_GMPlayerQuery_ID_descriptor(), name, value);
}
enum NetProto_GMForbid_ID {
  NetProto_GMForbid_ID_GROUPID = 8,
  NetProto_GMForbid_ID_UNITID = 7
};
bool NetProto_GMForbid_ID_IsValid(int value);
const NetProto_GMForbid_ID NetProto_GMForbid_ID_ID_MIN = NetProto_GMForbid_ID_UNITID;
const NetProto_GMForbid_ID NetProto_GMForbid_ID_ID_MAX = NetProto_GMForbid_ID_GROUPID;
const int NetProto_GMForbid_ID_ID_ARRAYSIZE = NetProto_GMForbid_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMForbid_ID_descriptor();
inline const ::std::string& NetProto_GMForbid_ID_Name(NetProto_GMForbid_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMForbid_ID_descriptor(), value);
}
inline bool NetProto_GMForbid_ID_Parse(
    const ::std::string& name, NetProto_GMForbid_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMForbid_ID>(
    NetProto_GMForbid_ID_descriptor(), name, value);
}
enum NetProto_GMForbid_Select {
  NetProto_GMForbid_Select_NOTALKING = 1,
  NetProto_GMForbid_Select_FREEZE = 2
};
bool NetProto_GMForbid_Select_IsValid(int value);
const NetProto_GMForbid_Select NetProto_GMForbid_Select_Select_MIN = NetProto_GMForbid_Select_NOTALKING;
const NetProto_GMForbid_Select NetProto_GMForbid_Select_Select_MAX = NetProto_GMForbid_Select_FREEZE;
const int NetProto_GMForbid_Select_Select_ARRAYSIZE = NetProto_GMForbid_Select_Select_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMForbid_Select_descriptor();
inline const ::std::string& NetProto_GMForbid_Select_Name(NetProto_GMForbid_Select value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMForbid_Select_descriptor(), value);
}
inline bool NetProto_GMForbid_Select_Parse(
    const ::std::string& name, NetProto_GMForbid_Select* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMForbid_Select>(
    NetProto_GMForbid_Select_descriptor(), name, value);
}
enum NetProto_GMNotice_GMOP {
  NetProto_GMNotice_GMOP_ADD = 1,
  NetProto_GMNotice_GMOP_DEL = 2,
  NetProto_GMNotice_GMOP_ALTER = 3
};
bool NetProto_GMNotice_GMOP_IsValid(int value);
const NetProto_GMNotice_GMOP NetProto_GMNotice_GMOP_GMOP_MIN = NetProto_GMNotice_GMOP_ADD;
const NetProto_GMNotice_GMOP NetProto_GMNotice_GMOP_GMOP_MAX = NetProto_GMNotice_GMOP_ALTER;
const int NetProto_GMNotice_GMOP_GMOP_ARRAYSIZE = NetProto_GMNotice_GMOP_GMOP_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMNotice_GMOP_descriptor();
inline const ::std::string& NetProto_GMNotice_GMOP_Name(NetProto_GMNotice_GMOP value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMNotice_GMOP_descriptor(), value);
}
inline bool NetProto_GMNotice_GMOP_Parse(
    const ::std::string& name, NetProto_GMNotice_GMOP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMNotice_GMOP>(
    NetProto_GMNotice_GMOP_descriptor(), name, value);
}
enum NetProto_GMRequest_ID {
  NetProto_GMRequest_ID_GROUPID = 8,
  NetProto_GMRequest_ID_UNITID = 9
};
bool NetProto_GMRequest_ID_IsValid(int value);
const NetProto_GMRequest_ID NetProto_GMRequest_ID_ID_MIN = NetProto_GMRequest_ID_GROUPID;
const NetProto_GMRequest_ID NetProto_GMRequest_ID_ID_MAX = NetProto_GMRequest_ID_UNITID;
const int NetProto_GMRequest_ID_ID_ARRAYSIZE = NetProto_GMRequest_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMRequest_ID_descriptor();
inline const ::std::string& NetProto_GMRequest_ID_Name(NetProto_GMRequest_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMRequest_ID_descriptor(), value);
}
inline bool NetProto_GMRequest_ID_Parse(
    const ::std::string& name, NetProto_GMRequest_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMRequest_ID>(
    NetProto_GMRequest_ID_descriptor(), name, value);
}
enum NetProto_GMRequest_Select {
  NetProto_GMRequest_Select_ALL = 1,
  NetProto_GMRequest_Select_NOTALKING = 2,
  NetProto_GMRequest_Select_FREEZE = 3
};
bool NetProto_GMRequest_Select_IsValid(int value);
const NetProto_GMRequest_Select NetProto_GMRequest_Select_Select_MIN = NetProto_GMRequest_Select_ALL;
const NetProto_GMRequest_Select NetProto_GMRequest_Select_Select_MAX = NetProto_GMRequest_Select_FREEZE;
const int NetProto_GMRequest_Select_Select_ARRAYSIZE = NetProto_GMRequest_Select_Select_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMRequest_Select_descriptor();
inline const ::std::string& NetProto_GMRequest_Select_Name(NetProto_GMRequest_Select value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMRequest_Select_descriptor(), value);
}
inline bool NetProto_GMRequest_Select_Parse(
    const ::std::string& name, NetProto_GMRequest_Select* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMRequest_Select>(
    NetProto_GMRequest_Select_descriptor(), name, value);
}
enum NetProto_GMShutDownServer_ID {
  NetProto_GMShutDownServer_ID_GROUPID = 8,
  NetProto_GMShutDownServer_ID_UNITID = 10
};
bool NetProto_GMShutDownServer_ID_IsValid(int value);
const NetProto_GMShutDownServer_ID NetProto_GMShutDownServer_ID_ID_MIN = NetProto_GMShutDownServer_ID_GROUPID;
const NetProto_GMShutDownServer_ID NetProto_GMShutDownServer_ID_ID_MAX = NetProto_GMShutDownServer_ID_UNITID;
const int NetProto_GMShutDownServer_ID_ID_ARRAYSIZE = NetProto_GMShutDownServer_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMShutDownServer_ID_descriptor();
inline const ::std::string& NetProto_GMShutDownServer_ID_Name(NetProto_GMShutDownServer_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMShutDownServer_ID_descriptor(), value);
}
inline bool NetProto_GMShutDownServer_ID_Parse(
    const ::std::string& name, NetProto_GMShutDownServer_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMShutDownServer_ID>(
    NetProto_GMShutDownServer_ID_descriptor(), name, value);
}
enum NetProto_GMChatRecords_ID {
  NetProto_GMChatRecords_ID_GROUPID = 8,
  NetProto_GMChatRecords_ID_UNITID = 11
};
bool NetProto_GMChatRecords_ID_IsValid(int value);
const NetProto_GMChatRecords_ID NetProto_GMChatRecords_ID_ID_MIN = NetProto_GMChatRecords_ID_GROUPID;
const NetProto_GMChatRecords_ID NetProto_GMChatRecords_ID_ID_MAX = NetProto_GMChatRecords_ID_UNITID;
const int NetProto_GMChatRecords_ID_ID_ARRAYSIZE = NetProto_GMChatRecords_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMChatRecords_ID_descriptor();
inline const ::std::string& NetProto_GMChatRecords_ID_Name(NetProto_GMChatRecords_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMChatRecords_ID_descriptor(), value);
}
inline bool NetProto_GMChatRecords_ID_Parse(
    const ::std::string& name, NetProto_GMChatRecords_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMChatRecords_ID>(
    NetProto_GMChatRecords_ID_descriptor(), name, value);
}
enum NetProto_GMRegistrCount_ID {
  NetProto_GMRegistrCount_ID_GROUPID = 8,
  NetProto_GMRegistrCount_ID_UNITID = 12
};
bool NetProto_GMRegistrCount_ID_IsValid(int value);
const NetProto_GMRegistrCount_ID NetProto_GMRegistrCount_ID_ID_MIN = NetProto_GMRegistrCount_ID_GROUPID;
const NetProto_GMRegistrCount_ID NetProto_GMRegistrCount_ID_ID_MAX = NetProto_GMRegistrCount_ID_UNITID;
const int NetProto_GMRegistrCount_ID_ID_ARRAYSIZE = NetProto_GMRegistrCount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMRegistrCount_ID_descriptor();
inline const ::std::string& NetProto_GMRegistrCount_ID_Name(NetProto_GMRegistrCount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMRegistrCount_ID_descriptor(), value);
}
inline bool NetProto_GMRegistrCount_ID_Parse(
    const ::std::string& name, NetProto_GMRegistrCount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMRegistrCount_ID>(
    NetProto_GMRegistrCount_ID_descriptor(), name, value);
}
enum NetProto_GMRoleCount_ID {
  NetProto_GMRoleCount_ID_GROUPID = 8,
  NetProto_GMRoleCount_ID_UNITID = 13
};
bool NetProto_GMRoleCount_ID_IsValid(int value);
const NetProto_GMRoleCount_ID NetProto_GMRoleCount_ID_ID_MIN = NetProto_GMRoleCount_ID_GROUPID;
const NetProto_GMRoleCount_ID NetProto_GMRoleCount_ID_ID_MAX = NetProto_GMRoleCount_ID_UNITID;
const int NetProto_GMRoleCount_ID_ID_ARRAYSIZE = NetProto_GMRoleCount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMRoleCount_ID_descriptor();
inline const ::std::string& NetProto_GMRoleCount_ID_Name(NetProto_GMRoleCount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMRoleCount_ID_descriptor(), value);
}
inline bool NetProto_GMRoleCount_ID_Parse(
    const ::std::string& name, NetProto_GMRoleCount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMRoleCount_ID>(
    NetProto_GMRoleCount_ID_descriptor(), name, value);
}
enum NetProto_GMLevelStatistics_ID {
  NetProto_GMLevelStatistics_ID_GROUPID = 8,
  NetProto_GMLevelStatistics_ID_UNITID = 14
};
bool NetProto_GMLevelStatistics_ID_IsValid(int value);
const NetProto_GMLevelStatistics_ID NetProto_GMLevelStatistics_ID_ID_MIN = NetProto_GMLevelStatistics_ID_GROUPID;
const NetProto_GMLevelStatistics_ID NetProto_GMLevelStatistics_ID_ID_MAX = NetProto_GMLevelStatistics_ID_UNITID;
const int NetProto_GMLevelStatistics_ID_ID_ARRAYSIZE = NetProto_GMLevelStatistics_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMLevelStatistics_ID_descriptor();
inline const ::std::string& NetProto_GMLevelStatistics_ID_Name(NetProto_GMLevelStatistics_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMLevelStatistics_ID_descriptor(), value);
}
inline bool NetProto_GMLevelStatistics_ID_Parse(
    const ::std::string& name, NetProto_GMLevelStatistics_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMLevelStatistics_ID>(
    NetProto_GMLevelStatistics_ID_descriptor(), name, value);
}
enum NetProto_GMRankStatistics_ID {
  NetProto_GMRankStatistics_ID_GROUPID = 8,
  NetProto_GMRankStatistics_ID_UNITID = 15
};
bool NetProto_GMRankStatistics_ID_IsValid(int value);
const NetProto_GMRankStatistics_ID NetProto_GMRankStatistics_ID_ID_MIN = NetProto_GMRankStatistics_ID_GROUPID;
const NetProto_GMRankStatistics_ID NetProto_GMRankStatistics_ID_ID_MAX = NetProto_GMRankStatistics_ID_UNITID;
const int NetProto_GMRankStatistics_ID_ID_ARRAYSIZE = NetProto_GMRankStatistics_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMRankStatistics_ID_descriptor();
inline const ::std::string& NetProto_GMRankStatistics_ID_Name(NetProto_GMRankStatistics_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMRankStatistics_ID_descriptor(), value);
}
inline bool NetProto_GMRankStatistics_ID_Parse(
    const ::std::string& name, NetProto_GMRankStatistics_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMRankStatistics_ID>(
    NetProto_GMRankStatistics_ID_descriptor(), name, value);
}
enum NetProto_GMOpenGuide_ID {
  NetProto_GMOpenGuide_ID_GROUPID = 8,
  NetProto_GMOpenGuide_ID_UNITID = 16
};
bool NetProto_GMOpenGuide_ID_IsValid(int value);
const NetProto_GMOpenGuide_ID NetProto_GMOpenGuide_ID_ID_MIN = NetProto_GMOpenGuide_ID_GROUPID;
const NetProto_GMOpenGuide_ID NetProto_GMOpenGuide_ID_ID_MAX = NetProto_GMOpenGuide_ID_UNITID;
const int NetProto_GMOpenGuide_ID_ID_ARRAYSIZE = NetProto_GMOpenGuide_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMOpenGuide_ID_descriptor();
inline const ::std::string& NetProto_GMOpenGuide_ID_Name(NetProto_GMOpenGuide_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMOpenGuide_ID_descriptor(), value);
}
inline bool NetProto_GMOpenGuide_ID_Parse(
    const ::std::string& name, NetProto_GMOpenGuide_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMOpenGuide_ID>(
    NetProto_GMOpenGuide_ID_descriptor(), name, value);
}
enum NetProto_GMNoticeMgr_ID {
  NetProto_GMNoticeMgr_ID_GROUPID = 8,
  NetProto_GMNoticeMgr_ID_UNITID = 17
};
bool NetProto_GMNoticeMgr_ID_IsValid(int value);
const NetProto_GMNoticeMgr_ID NetProto_GMNoticeMgr_ID_ID_MIN = NetProto_GMNoticeMgr_ID_GROUPID;
const NetProto_GMNoticeMgr_ID NetProto_GMNoticeMgr_ID_ID_MAX = NetProto_GMNoticeMgr_ID_UNITID;
const int NetProto_GMNoticeMgr_ID_ID_ARRAYSIZE = NetProto_GMNoticeMgr_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMNoticeMgr_ID_descriptor();
inline const ::std::string& NetProto_GMNoticeMgr_ID_Name(NetProto_GMNoticeMgr_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMNoticeMgr_ID_descriptor(), value);
}
inline bool NetProto_GMNoticeMgr_ID_Parse(
    const ::std::string& name, NetProto_GMNoticeMgr_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMNoticeMgr_ID>(
    NetProto_GMNoticeMgr_ID_descriptor(), name, value);
}
enum NetProto_GMRegister_ID {
  NetProto_GMRegister_ID_GROUPID = 8,
  NetProto_GMRegister_ID_UNITID = 18
};
bool NetProto_GMRegister_ID_IsValid(int value);
const NetProto_GMRegister_ID NetProto_GMRegister_ID_ID_MIN = NetProto_GMRegister_ID_GROUPID;
const NetProto_GMRegister_ID NetProto_GMRegister_ID_ID_MAX = NetProto_GMRegister_ID_UNITID;
const int NetProto_GMRegister_ID_ID_ARRAYSIZE = NetProto_GMRegister_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMRegister_ID_descriptor();
inline const ::std::string& NetProto_GMRegister_ID_Name(NetProto_GMRegister_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMRegister_ID_descriptor(), value);
}
inline bool NetProto_GMRegister_ID_Parse(
    const ::std::string& name, NetProto_GMRegister_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMRegister_ID>(
    NetProto_GMRegister_ID_descriptor(), name, value);
}
enum NetProto_GMShutDownMessage_ID {
  NetProto_GMShutDownMessage_ID_GROUPID = 8,
  NetProto_GMShutDownMessage_ID_UNITID = 19
};
bool NetProto_GMShutDownMessage_ID_IsValid(int value);
const NetProto_GMShutDownMessage_ID NetProto_GMShutDownMessage_ID_ID_MIN = NetProto_GMShutDownMessage_ID_GROUPID;
const NetProto_GMShutDownMessage_ID NetProto_GMShutDownMessage_ID_ID_MAX = NetProto_GMShutDownMessage_ID_UNITID;
const int NetProto_GMShutDownMessage_ID_ID_ARRAYSIZE = NetProto_GMShutDownMessage_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMShutDownMessage_ID_descriptor();
inline const ::std::string& NetProto_GMShutDownMessage_ID_Name(NetProto_GMShutDownMessage_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMShutDownMessage_ID_descriptor(), value);
}
inline bool NetProto_GMShutDownMessage_ID_Parse(
    const ::std::string& name, NetProto_GMShutDownMessage_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMShutDownMessage_ID>(
    NetProto_GMShutDownMessage_ID_descriptor(), name, value);
}
enum NetProto_GMOpenMessage_ID {
  NetProto_GMOpenMessage_ID_GROUPID = 8,
  NetProto_GMOpenMessage_ID_UNITID = 20
};
bool NetProto_GMOpenMessage_ID_IsValid(int value);
const NetProto_GMOpenMessage_ID NetProto_GMOpenMessage_ID_ID_MIN = NetProto_GMOpenMessage_ID_GROUPID;
const NetProto_GMOpenMessage_ID NetProto_GMOpenMessage_ID_ID_MAX = NetProto_GMOpenMessage_ID_UNITID;
const int NetProto_GMOpenMessage_ID_ID_ARRAYSIZE = NetProto_GMOpenMessage_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMOpenMessage_ID_descriptor();
inline const ::std::string& NetProto_GMOpenMessage_ID_Name(NetProto_GMOpenMessage_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMOpenMessage_ID_descriptor(), value);
}
inline bool NetProto_GMOpenMessage_ID_Parse(
    const ::std::string& name, NetProto_GMOpenMessage_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMOpenMessage_ID>(
    NetProto_GMOpenMessage_ID_descriptor(), name, value);
}
enum NetProto_GMModifyVIP_ID {
  NetProto_GMModifyVIP_ID_GROUPID = 8,
  NetProto_GMModifyVIP_ID_UNITID = 21
};
bool NetProto_GMModifyVIP_ID_IsValid(int value);
const NetProto_GMModifyVIP_ID NetProto_GMModifyVIP_ID_ID_MIN = NetProto_GMModifyVIP_ID_GROUPID;
const NetProto_GMModifyVIP_ID NetProto_GMModifyVIP_ID_ID_MAX = NetProto_GMModifyVIP_ID_UNITID;
const int NetProto_GMModifyVIP_ID_ID_ARRAYSIZE = NetProto_GMModifyVIP_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMModifyVIP_ID_descriptor();
inline const ::std::string& NetProto_GMModifyVIP_ID_Name(NetProto_GMModifyVIP_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMModifyVIP_ID_descriptor(), value);
}
inline bool NetProto_GMModifyVIP_ID_Parse(
    const ::std::string& name, NetProto_GMModifyVIP_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMModifyVIP_ID>(
    NetProto_GMModifyVIP_ID_descriptor(), name, value);
}
enum NetProto_GMAddExchange_ID {
  NetProto_GMAddExchange_ID_GROUPID = 8,
  NetProto_GMAddExchange_ID_UNITID = 22
};
bool NetProto_GMAddExchange_ID_IsValid(int value);
const NetProto_GMAddExchange_ID NetProto_GMAddExchange_ID_ID_MIN = NetProto_GMAddExchange_ID_GROUPID;
const NetProto_GMAddExchange_ID NetProto_GMAddExchange_ID_ID_MAX = NetProto_GMAddExchange_ID_UNITID;
const int NetProto_GMAddExchange_ID_ID_ARRAYSIZE = NetProto_GMAddExchange_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMAddExchange_ID_descriptor();
inline const ::std::string& NetProto_GMAddExchange_ID_Name(NetProto_GMAddExchange_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMAddExchange_ID_descriptor(), value);
}
inline bool NetProto_GMAddExchange_ID_Parse(
    const ::std::string& name, NetProto_GMAddExchange_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMAddExchange_ID>(
    NetProto_GMAddExchange_ID_descriptor(), name, value);
}
enum NetProto_GMQueryFaction_ID {
  NetProto_GMQueryFaction_ID_GROUPID = 8,
  NetProto_GMQueryFaction_ID_UNITID = 23
};
bool NetProto_GMQueryFaction_ID_IsValid(int value);
const NetProto_GMQueryFaction_ID NetProto_GMQueryFaction_ID_ID_MIN = NetProto_GMQueryFaction_ID_GROUPID;
const NetProto_GMQueryFaction_ID NetProto_GMQueryFaction_ID_ID_MAX = NetProto_GMQueryFaction_ID_UNITID;
const int NetProto_GMQueryFaction_ID_ID_ARRAYSIZE = NetProto_GMQueryFaction_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMQueryFaction_ID_descriptor();
inline const ::std::string& NetProto_GMQueryFaction_ID_Name(NetProto_GMQueryFaction_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMQueryFaction_ID_descriptor(), value);
}
inline bool NetProto_GMQueryFaction_ID_Parse(
    const ::std::string& name, NetProto_GMQueryFaction_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMQueryFaction_ID>(
    NetProto_GMQueryFaction_ID_descriptor(), name, value);
}
enum NetProto_GMChangeFactionMem_ID {
  NetProto_GMChangeFactionMem_ID_GROUPID = 8,
  NetProto_GMChangeFactionMem_ID_UNITID = 24
};
bool NetProto_GMChangeFactionMem_ID_IsValid(int value);
const NetProto_GMChangeFactionMem_ID NetProto_GMChangeFactionMem_ID_ID_MIN = NetProto_GMChangeFactionMem_ID_GROUPID;
const NetProto_GMChangeFactionMem_ID NetProto_GMChangeFactionMem_ID_ID_MAX = NetProto_GMChangeFactionMem_ID_UNITID;
const int NetProto_GMChangeFactionMem_ID_ID_ARRAYSIZE = NetProto_GMChangeFactionMem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMChangeFactionMem_ID_descriptor();
inline const ::std::string& NetProto_GMChangeFactionMem_ID_Name(NetProto_GMChangeFactionMem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMChangeFactionMem_ID_descriptor(), value);
}
inline bool NetProto_GMChangeFactionMem_ID_Parse(
    const ::std::string& name, NetProto_GMChangeFactionMem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMChangeFactionMem_ID>(
    NetProto_GMChangeFactionMem_ID_descriptor(), name, value);
}
enum NetProto_GMAddRekooRole_ID {
  NetProto_GMAddRekooRole_ID_GROUPID = 8,
  NetProto_GMAddRekooRole_ID_UNITID = 25
};
bool NetProto_GMAddRekooRole_ID_IsValid(int value);
const NetProto_GMAddRekooRole_ID NetProto_GMAddRekooRole_ID_ID_MIN = NetProto_GMAddRekooRole_ID_GROUPID;
const NetProto_GMAddRekooRole_ID NetProto_GMAddRekooRole_ID_ID_MAX = NetProto_GMAddRekooRole_ID_UNITID;
const int NetProto_GMAddRekooRole_ID_ID_ARRAYSIZE = NetProto_GMAddRekooRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMAddRekooRole_ID_descriptor();
inline const ::std::string& NetProto_GMAddRekooRole_ID_Name(NetProto_GMAddRekooRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMAddRekooRole_ID_descriptor(), value);
}
inline bool NetProto_GMAddRekooRole_ID_Parse(
    const ::std::string& name, NetProto_GMAddRekooRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMAddRekooRole_ID>(
    NetProto_GMAddRekooRole_ID_descriptor(), name, value);
}
enum NetProto_GMLoginInfo_ID {
  NetProto_GMLoginInfo_ID_GROUPID = 8,
  NetProto_GMLoginInfo_ID_UNITID = 26
};
bool NetProto_GMLoginInfo_ID_IsValid(int value);
const NetProto_GMLoginInfo_ID NetProto_GMLoginInfo_ID_ID_MIN = NetProto_GMLoginInfo_ID_GROUPID;
const NetProto_GMLoginInfo_ID NetProto_GMLoginInfo_ID_ID_MAX = NetProto_GMLoginInfo_ID_UNITID;
const int NetProto_GMLoginInfo_ID_ID_ARRAYSIZE = NetProto_GMLoginInfo_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_GMLoginInfo_ID_descriptor();
inline const ::std::string& NetProto_GMLoginInfo_ID_Name(NetProto_GMLoginInfo_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_GMLoginInfo_ID_descriptor(), value);
}
inline bool NetProto_GMLoginInfo_ID_Parse(
    const ::std::string& name, NetProto_GMLoginInfo_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_GMLoginInfo_ID>(
    NetProto_GMLoginInfo_ID_descriptor(), name, value);
}
enum NetProto_ObtainPet_ID {
  NetProto_ObtainPet_ID_GROUPID = 9,
  NetProto_ObtainPet_ID_UNITID = 0
};
bool NetProto_ObtainPet_ID_IsValid(int value);
const NetProto_ObtainPet_ID NetProto_ObtainPet_ID_ID_MIN = NetProto_ObtainPet_ID_UNITID;
const NetProto_ObtainPet_ID NetProto_ObtainPet_ID_ID_MAX = NetProto_ObtainPet_ID_GROUPID;
const int NetProto_ObtainPet_ID_ID_ARRAYSIZE = NetProto_ObtainPet_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ObtainPet_ID_descriptor();
inline const ::std::string& NetProto_ObtainPet_ID_Name(NetProto_ObtainPet_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ObtainPet_ID_descriptor(), value);
}
inline bool NetProto_ObtainPet_ID_Parse(
    const ::std::string& name, NetProto_ObtainPet_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ObtainPet_ID>(
    NetProto_ObtainPet_ID_descriptor(), name, value);
}
enum NetProto_PetFighting_ID {
  NetProto_PetFighting_ID_GROUPID = 9,
  NetProto_PetFighting_ID_UNITID = 2
};
bool NetProto_PetFighting_ID_IsValid(int value);
const NetProto_PetFighting_ID NetProto_PetFighting_ID_ID_MIN = NetProto_PetFighting_ID_UNITID;
const NetProto_PetFighting_ID NetProto_PetFighting_ID_ID_MAX = NetProto_PetFighting_ID_GROUPID;
const int NetProto_PetFighting_ID_ID_ARRAYSIZE = NetProto_PetFighting_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PetFighting_ID_descriptor();
inline const ::std::string& NetProto_PetFighting_ID_Name(NetProto_PetFighting_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PetFighting_ID_descriptor(), value);
}
inline bool NetProto_PetFighting_ID_Parse(
    const ::std::string& name, NetProto_PetFighting_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PetFighting_ID>(
    NetProto_PetFighting_ID_descriptor(), name, value);
}
enum NetProto_PetRest_ID {
  NetProto_PetRest_ID_GROUPID = 9,
  NetProto_PetRest_ID_UNITID = 3
};
bool NetProto_PetRest_ID_IsValid(int value);
const NetProto_PetRest_ID NetProto_PetRest_ID_ID_MIN = NetProto_PetRest_ID_UNITID;
const NetProto_PetRest_ID NetProto_PetRest_ID_ID_MAX = NetProto_PetRest_ID_GROUPID;
const int NetProto_PetRest_ID_ID_ARRAYSIZE = NetProto_PetRest_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PetRest_ID_descriptor();
inline const ::std::string& NetProto_PetRest_ID_Name(NetProto_PetRest_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PetRest_ID_descriptor(), value);
}
inline bool NetProto_PetRest_ID_Parse(
    const ::std::string& name, NetProto_PetRest_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PetRest_ID>(
    NetProto_PetRest_ID_descriptor(), name, value);
}
enum NetProto_PetAttach_ID {
  NetProto_PetAttach_ID_GROUPID = 9,
  NetProto_PetAttach_ID_UNITID = 4
};
bool NetProto_PetAttach_ID_IsValid(int value);
const NetProto_PetAttach_ID NetProto_PetAttach_ID_ID_MIN = NetProto_PetAttach_ID_UNITID;
const NetProto_PetAttach_ID NetProto_PetAttach_ID_ID_MAX = NetProto_PetAttach_ID_GROUPID;
const int NetProto_PetAttach_ID_ID_ARRAYSIZE = NetProto_PetAttach_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PetAttach_ID_descriptor();
inline const ::std::string& NetProto_PetAttach_ID_Name(NetProto_PetAttach_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PetAttach_ID_descriptor(), value);
}
inline bool NetProto_PetAttach_ID_Parse(
    const ::std::string& name, NetProto_PetAttach_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PetAttach_ID>(
    NetProto_PetAttach_ID_descriptor(), name, value);
}
enum NetProto_PetLevelUp_ID {
  NetProto_PetLevelUp_ID_GROUPID = 9,
  NetProto_PetLevelUp_ID_UNITID = 5
};
bool NetProto_PetLevelUp_ID_IsValid(int value);
const NetProto_PetLevelUp_ID NetProto_PetLevelUp_ID_ID_MIN = NetProto_PetLevelUp_ID_UNITID;
const NetProto_PetLevelUp_ID NetProto_PetLevelUp_ID_ID_MAX = NetProto_PetLevelUp_ID_GROUPID;
const int NetProto_PetLevelUp_ID_ID_ARRAYSIZE = NetProto_PetLevelUp_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PetLevelUp_ID_descriptor();
inline const ::std::string& NetProto_PetLevelUp_ID_Name(NetProto_PetLevelUp_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PetLevelUp_ID_descriptor(), value);
}
inline bool NetProto_PetLevelUp_ID_Parse(
    const ::std::string& name, NetProto_PetLevelUp_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PetLevelUp_ID>(
    NetProto_PetLevelUp_ID_descriptor(), name, value);
}
enum NetProto_PetLearnSkill_ID {
  NetProto_PetLearnSkill_ID_GROUPID = 9,
  NetProto_PetLearnSkill_ID_UNITID = 6
};
bool NetProto_PetLearnSkill_ID_IsValid(int value);
const NetProto_PetLearnSkill_ID NetProto_PetLearnSkill_ID_ID_MIN = NetProto_PetLearnSkill_ID_UNITID;
const NetProto_PetLearnSkill_ID NetProto_PetLearnSkill_ID_ID_MAX = NetProto_PetLearnSkill_ID_GROUPID;
const int NetProto_PetLearnSkill_ID_ID_ARRAYSIZE = NetProto_PetLearnSkill_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PetLearnSkill_ID_descriptor();
inline const ::std::string& NetProto_PetLearnSkill_ID_Name(NetProto_PetLearnSkill_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PetLearnSkill_ID_descriptor(), value);
}
inline bool NetProto_PetLearnSkill_ID_Parse(
    const ::std::string& name, NetProto_PetLearnSkill_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PetLearnSkill_ID>(
    NetProto_PetLearnSkill_ID_descriptor(), name, value);
}
enum NetProto_PetInherit_ID {
  NetProto_PetInherit_ID_GROUPID = 9,
  NetProto_PetInherit_ID_UNITID = 7
};
bool NetProto_PetInherit_ID_IsValid(int value);
const NetProto_PetInherit_ID NetProto_PetInherit_ID_ID_MIN = NetProto_PetInherit_ID_UNITID;
const NetProto_PetInherit_ID NetProto_PetInherit_ID_ID_MAX = NetProto_PetInherit_ID_GROUPID;
const int NetProto_PetInherit_ID_ID_ARRAYSIZE = NetProto_PetInherit_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PetInherit_ID_descriptor();
inline const ::std::string& NetProto_PetInherit_ID_Name(NetProto_PetInherit_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PetInherit_ID_descriptor(), value);
}
inline bool NetProto_PetInherit_ID_Parse(
    const ::std::string& name, NetProto_PetInherit_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PetInherit_ID>(
    NetProto_PetInherit_ID_descriptor(), name, value);
}
enum NetProto_PetAdvance_ID {
  NetProto_PetAdvance_ID_GROUPID = 9,
  NetProto_PetAdvance_ID_UNITID = 8
};
bool NetProto_PetAdvance_ID_IsValid(int value);
const NetProto_PetAdvance_ID NetProto_PetAdvance_ID_ID_MIN = NetProto_PetAdvance_ID_UNITID;
const NetProto_PetAdvance_ID NetProto_PetAdvance_ID_ID_MAX = NetProto_PetAdvance_ID_GROUPID;
const int NetProto_PetAdvance_ID_ID_ARRAYSIZE = NetProto_PetAdvance_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PetAdvance_ID_descriptor();
inline const ::std::string& NetProto_PetAdvance_ID_Name(NetProto_PetAdvance_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PetAdvance_ID_descriptor(), value);
}
inline bool NetProto_PetAdvance_ID_Parse(
    const ::std::string& name, NetProto_PetAdvance_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PetAdvance_ID>(
    NetProto_PetAdvance_ID_descriptor(), name, value);
}
enum NetProto_PetPsychicsLevelUp_ID {
  NetProto_PetPsychicsLevelUp_ID_GROUPID = 9,
  NetProto_PetPsychicsLevelUp_ID_UNITID = 9
};
bool NetProto_PetPsychicsLevelUp_ID_IsValid(int value);
const NetProto_PetPsychicsLevelUp_ID NetProto_PetPsychicsLevelUp_ID_ID_MIN = NetProto_PetPsychicsLevelUp_ID_GROUPID;
const NetProto_PetPsychicsLevelUp_ID NetProto_PetPsychicsLevelUp_ID_ID_MAX = NetProto_PetPsychicsLevelUp_ID_GROUPID;
const int NetProto_PetPsychicsLevelUp_ID_ID_ARRAYSIZE = NetProto_PetPsychicsLevelUp_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PetPsychicsLevelUp_ID_descriptor();
inline const ::std::string& NetProto_PetPsychicsLevelUp_ID_Name(NetProto_PetPsychicsLevelUp_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PetPsychicsLevelUp_ID_descriptor(), value);
}
inline bool NetProto_PetPsychicsLevelUp_ID_Parse(
    const ::std::string& name, NetProto_PetPsychicsLevelUp_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PetPsychicsLevelUp_ID>(
    NetProto_PetPsychicsLevelUp_ID_descriptor(), name, value);
}
enum NetProto_ActiveGemRequest_ID {
  NetProto_ActiveGemRequest_ID_GROUPID = 10,
  NetProto_ActiveGemRequest_ID_UNITID = 0
};
bool NetProto_ActiveGemRequest_ID_IsValid(int value);
const NetProto_ActiveGemRequest_ID NetProto_ActiveGemRequest_ID_ID_MIN = NetProto_ActiveGemRequest_ID_UNITID;
const NetProto_ActiveGemRequest_ID NetProto_ActiveGemRequest_ID_ID_MAX = NetProto_ActiveGemRequest_ID_GROUPID;
const int NetProto_ActiveGemRequest_ID_ID_ARRAYSIZE = NetProto_ActiveGemRequest_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ActiveGemRequest_ID_descriptor();
inline const ::std::string& NetProto_ActiveGemRequest_ID_Name(NetProto_ActiveGemRequest_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ActiveGemRequest_ID_descriptor(), value);
}
inline bool NetProto_ActiveGemRequest_ID_Parse(
    const ::std::string& name, NetProto_ActiveGemRequest_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ActiveGemRequest_ID>(
    NetProto_ActiveGemRequest_ID_descriptor(), name, value);
}
enum NetProto_ActiveDoubleGem_ID {
  NetProto_ActiveDoubleGem_ID_GROUPID = 10,
  NetProto_ActiveDoubleGem_ID_UNITID = 1
};
bool NetProto_ActiveDoubleGem_ID_IsValid(int value);
const NetProto_ActiveDoubleGem_ID NetProto_ActiveDoubleGem_ID_ID_MIN = NetProto_ActiveDoubleGem_ID_UNITID;
const NetProto_ActiveDoubleGem_ID NetProto_ActiveDoubleGem_ID_ID_MAX = NetProto_ActiveDoubleGem_ID_GROUPID;
const int NetProto_ActiveDoubleGem_ID_ID_ARRAYSIZE = NetProto_ActiveDoubleGem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ActiveDoubleGem_ID_descriptor();
inline const ::std::string& NetProto_ActiveDoubleGem_ID_Name(NetProto_ActiveDoubleGem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ActiveDoubleGem_ID_descriptor(), value);
}
inline bool NetProto_ActiveDoubleGem_ID_Parse(
    const ::std::string& name, NetProto_ActiveDoubleGem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ActiveDoubleGem_ID>(
    NetProto_ActiveDoubleGem_ID_descriptor(), name, value);
}
enum NetProto_ActiveUpGradeGem_ID {
  NetProto_ActiveUpGradeGem_ID_GROUPID = 10,
  NetProto_ActiveUpGradeGem_ID_UNITID = 2
};
bool NetProto_ActiveUpGradeGem_ID_IsValid(int value);
const NetProto_ActiveUpGradeGem_ID NetProto_ActiveUpGradeGem_ID_ID_MIN = NetProto_ActiveUpGradeGem_ID_UNITID;
const NetProto_ActiveUpGradeGem_ID NetProto_ActiveUpGradeGem_ID_ID_MAX = NetProto_ActiveUpGradeGem_ID_GROUPID;
const int NetProto_ActiveUpGradeGem_ID_ID_ARRAYSIZE = NetProto_ActiveUpGradeGem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ActiveUpGradeGem_ID_descriptor();
inline const ::std::string& NetProto_ActiveUpGradeGem_ID_Name(NetProto_ActiveUpGradeGem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ActiveUpGradeGem_ID_descriptor(), value);
}
inline bool NetProto_ActiveUpGradeGem_ID_Parse(
    const ::std::string& name, NetProto_ActiveUpGradeGem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ActiveUpGradeGem_ID>(
    NetProto_ActiveUpGradeGem_ID_descriptor(), name, value);
}
enum NetProto_ActiveGetGem_ID {
  NetProto_ActiveGetGem_ID_GROUPID = 10,
  NetProto_ActiveGetGem_ID_UNITID = 3
};
bool NetProto_ActiveGetGem_ID_IsValid(int value);
const NetProto_ActiveGetGem_ID NetProto_ActiveGetGem_ID_ID_MIN = NetProto_ActiveGetGem_ID_UNITID;
const NetProto_ActiveGetGem_ID NetProto_ActiveGetGem_ID_ID_MAX = NetProto_ActiveGetGem_ID_GROUPID;
const int NetProto_ActiveGetGem_ID_ID_ARRAYSIZE = NetProto_ActiveGetGem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ActiveGetGem_ID_descriptor();
inline const ::std::string& NetProto_ActiveGetGem_ID_Name(NetProto_ActiveGetGem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ActiveGetGem_ID_descriptor(), value);
}
inline bool NetProto_ActiveGetGem_ID_Parse(
    const ::std::string& name, NetProto_ActiveGetGem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ActiveGetGem_ID>(
    NetProto_ActiveGetGem_ID_descriptor(), name, value);
}
enum NetProto_ActiveFight_ID {
  NetProto_ActiveFight_ID_GROUPID = 10,
  NetProto_ActiveFight_ID_UNITID = 4
};
bool NetProto_ActiveFight_ID_IsValid(int value);
const NetProto_ActiveFight_ID NetProto_ActiveFight_ID_ID_MIN = NetProto_ActiveFight_ID_UNITID;
const NetProto_ActiveFight_ID NetProto_ActiveFight_ID_ID_MAX = NetProto_ActiveFight_ID_GROUPID;
const int NetProto_ActiveFight_ID_ID_ARRAYSIZE = NetProto_ActiveFight_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ActiveFight_ID_descriptor();
inline const ::std::string& NetProto_ActiveFight_ID_Name(NetProto_ActiveFight_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ActiveFight_ID_descriptor(), value);
}
inline bool NetProto_ActiveFight_ID_Parse(
    const ::std::string& name, NetProto_ActiveFight_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ActiveFight_ID>(
    NetProto_ActiveFight_ID_descriptor(), name, value);
}
enum NetProto_ActiveStrongeSolider_ID {
  NetProto_ActiveStrongeSolider_ID_GROUPID = 10,
  NetProto_ActiveStrongeSolider_ID_UNITID = 5
};
bool NetProto_ActiveStrongeSolider_ID_IsValid(int value);
const NetProto_ActiveStrongeSolider_ID NetProto_ActiveStrongeSolider_ID_ID_MIN = NetProto_ActiveStrongeSolider_ID_UNITID;
const NetProto_ActiveStrongeSolider_ID NetProto_ActiveStrongeSolider_ID_ID_MAX = NetProto_ActiveStrongeSolider_ID_GROUPID;
const int NetProto_ActiveStrongeSolider_ID_ID_ARRAYSIZE = NetProto_ActiveStrongeSolider_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ActiveStrongeSolider_ID_descriptor();
inline const ::std::string& NetProto_ActiveStrongeSolider_ID_Name(NetProto_ActiveStrongeSolider_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ActiveStrongeSolider_ID_descriptor(), value);
}
inline bool NetProto_ActiveStrongeSolider_ID_Parse(
    const ::std::string& name, NetProto_ActiveStrongeSolider_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ActiveStrongeSolider_ID>(
    NetProto_ActiveStrongeSolider_ID_descriptor(), name, value);
}
enum NetProto_EnterPlayOff_ID {
  NetProto_EnterPlayOff_ID_GROUPID = 10,
  NetProto_EnterPlayOff_ID_UNITID = 6
};
bool NetProto_EnterPlayOff_ID_IsValid(int value);
const NetProto_EnterPlayOff_ID NetProto_EnterPlayOff_ID_ID_MIN = NetProto_EnterPlayOff_ID_UNITID;
const NetProto_EnterPlayOff_ID NetProto_EnterPlayOff_ID_ID_MAX = NetProto_EnterPlayOff_ID_GROUPID;
const int NetProto_EnterPlayOff_ID_ID_ARRAYSIZE = NetProto_EnterPlayOff_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_EnterPlayOff_ID_descriptor();
inline const ::std::string& NetProto_EnterPlayOff_ID_Name(NetProto_EnterPlayOff_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_EnterPlayOff_ID_descriptor(), value);
}
inline bool NetProto_EnterPlayOff_ID_Parse(
    const ::std::string& name, NetProto_EnterPlayOff_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_EnterPlayOff_ID>(
    NetProto_EnterPlayOff_ID_descriptor(), name, value);
}
enum NetProto_PlayOffInfo_ID {
  NetProto_PlayOffInfo_ID_GROUPID = 10,
  NetProto_PlayOffInfo_ID_UNITID = 7
};
bool NetProto_PlayOffInfo_ID_IsValid(int value);
const NetProto_PlayOffInfo_ID NetProto_PlayOffInfo_ID_ID_MIN = NetProto_PlayOffInfo_ID_UNITID;
const NetProto_PlayOffInfo_ID NetProto_PlayOffInfo_ID_ID_MAX = NetProto_PlayOffInfo_ID_GROUPID;
const int NetProto_PlayOffInfo_ID_ID_ARRAYSIZE = NetProto_PlayOffInfo_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PlayOffInfo_ID_descriptor();
inline const ::std::string& NetProto_PlayOffInfo_ID_Name(NetProto_PlayOffInfo_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PlayOffInfo_ID_descriptor(), value);
}
inline bool NetProto_PlayOffInfo_ID_Parse(
    const ::std::string& name, NetProto_PlayOffInfo_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PlayOffInfo_ID>(
    NetProto_PlayOffInfo_ID_descriptor(), name, value);
}
enum NetProto_PreparePlayOff_ID {
  NetProto_PreparePlayOff_ID_GROUPID = 10,
  NetProto_PreparePlayOff_ID_UNITID = 8
};
bool NetProto_PreparePlayOff_ID_IsValid(int value);
const NetProto_PreparePlayOff_ID NetProto_PreparePlayOff_ID_ID_MIN = NetProto_PreparePlayOff_ID_UNITID;
const NetProto_PreparePlayOff_ID NetProto_PreparePlayOff_ID_ID_MAX = NetProto_PreparePlayOff_ID_GROUPID;
const int NetProto_PreparePlayOff_ID_ID_ARRAYSIZE = NetProto_PreparePlayOff_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_PreparePlayOff_ID_descriptor();
inline const ::std::string& NetProto_PreparePlayOff_ID_Name(NetProto_PreparePlayOff_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_PreparePlayOff_ID_descriptor(), value);
}
inline bool NetProto_PreparePlayOff_ID_Parse(
    const ::std::string& name, NetProto_PreparePlayOff_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_PreparePlayOff_ID>(
    NetProto_PreparePlayOff_ID_descriptor(), name, value);
}
enum NetProto_Treasure_ID {
  NetProto_Treasure_ID_GROUPID = 10,
  NetProto_Treasure_ID_UNITID = 9
};
bool NetProto_Treasure_ID_IsValid(int value);
const NetProto_Treasure_ID NetProto_Treasure_ID_ID_MIN = NetProto_Treasure_ID_UNITID;
const NetProto_Treasure_ID NetProto_Treasure_ID_ID_MAX = NetProto_Treasure_ID_GROUPID;
const int NetProto_Treasure_ID_ID_ARRAYSIZE = NetProto_Treasure_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Treasure_ID_descriptor();
inline const ::std::string& NetProto_Treasure_ID_Name(NetProto_Treasure_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Treasure_ID_descriptor(), value);
}
inline bool NetProto_Treasure_ID_Parse(
    const ::std::string& name, NetProto_Treasure_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Treasure_ID>(
    NetProto_Treasure_ID_descriptor(), name, value);
}
enum NetProto_Hire_ID {
  NetProto_Hire_ID_GROUPID = 10,
  NetProto_Hire_ID_UNITID = 10
};
bool NetProto_Hire_ID_IsValid(int value);
const NetProto_Hire_ID NetProto_Hire_ID_ID_MIN = NetProto_Hire_ID_GROUPID;
const NetProto_Hire_ID NetProto_Hire_ID_ID_MAX = NetProto_Hire_ID_GROUPID;
const int NetProto_Hire_ID_ID_ARRAYSIZE = NetProto_Hire_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Hire_ID_descriptor();
inline const ::std::string& NetProto_Hire_ID_Name(NetProto_Hire_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Hire_ID_descriptor(), value);
}
inline bool NetProto_Hire_ID_Parse(
    const ::std::string& name, NetProto_Hire_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Hire_ID>(
    NetProto_Hire_ID_descriptor(), name, value);
}
enum NetProto_MoneyTree_ID {
  NetProto_MoneyTree_ID_GROUPID = 10,
  NetProto_MoneyTree_ID_UNITID = 11
};
bool NetProto_MoneyTree_ID_IsValid(int value);
const NetProto_MoneyTree_ID NetProto_MoneyTree_ID_ID_MIN = NetProto_MoneyTree_ID_GROUPID;
const NetProto_MoneyTree_ID NetProto_MoneyTree_ID_ID_MAX = NetProto_MoneyTree_ID_UNITID;
const int NetProto_MoneyTree_ID_ID_ARRAYSIZE = NetProto_MoneyTree_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_MoneyTree_ID_descriptor();
inline const ::std::string& NetProto_MoneyTree_ID_Name(NetProto_MoneyTree_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_MoneyTree_ID_descriptor(), value);
}
inline bool NetProto_MoneyTree_ID_Parse(
    const ::std::string& name, NetProto_MoneyTree_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_MoneyTree_ID>(
    NetProto_MoneyTree_ID_descriptor(), name, value);
}
enum NetProto_TreasureBox_ID {
  NetProto_TreasureBox_ID_GROUPID = 10,
  NetProto_TreasureBox_ID_UNITID = 12
};
bool NetProto_TreasureBox_ID_IsValid(int value);
const NetProto_TreasureBox_ID NetProto_TreasureBox_ID_ID_MIN = NetProto_TreasureBox_ID_GROUPID;
const NetProto_TreasureBox_ID NetProto_TreasureBox_ID_ID_MAX = NetProto_TreasureBox_ID_UNITID;
const int NetProto_TreasureBox_ID_ID_ARRAYSIZE = NetProto_TreasureBox_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_TreasureBox_ID_descriptor();
inline const ::std::string& NetProto_TreasureBox_ID_Name(NetProto_TreasureBox_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_TreasureBox_ID_descriptor(), value);
}
inline bool NetProto_TreasureBox_ID_Parse(
    const ::std::string& name, NetProto_TreasureBox_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_TreasureBox_ID>(
    NetProto_TreasureBox_ID_descriptor(), name, value);
}
enum NetProto_FlyPlan_ID {
  NetProto_FlyPlan_ID_GROUPID = 10,
  NetProto_FlyPlan_ID_UNITID = 13
};
bool NetProto_FlyPlan_ID_IsValid(int value);
const NetProto_FlyPlan_ID NetProto_FlyPlan_ID_ID_MIN = NetProto_FlyPlan_ID_GROUPID;
const NetProto_FlyPlan_ID NetProto_FlyPlan_ID_ID_MAX = NetProto_FlyPlan_ID_UNITID;
const int NetProto_FlyPlan_ID_ID_ARRAYSIZE = NetProto_FlyPlan_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FlyPlan_ID_descriptor();
inline const ::std::string& NetProto_FlyPlan_ID_Name(NetProto_FlyPlan_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FlyPlan_ID_descriptor(), value);
}
inline bool NetProto_FlyPlan_ID_Parse(
    const ::std::string& name, NetProto_FlyPlan_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FlyPlan_ID>(
    NetProto_FlyPlan_ID_descriptor(), name, value);
}
enum NetProto_BlessCome_ID {
  NetProto_BlessCome_ID_GROUPID = 10,
  NetProto_BlessCome_ID_UNITID = 14
};
bool NetProto_BlessCome_ID_IsValid(int value);
const NetProto_BlessCome_ID NetProto_BlessCome_ID_ID_MIN = NetProto_BlessCome_ID_GROUPID;
const NetProto_BlessCome_ID NetProto_BlessCome_ID_ID_MAX = NetProto_BlessCome_ID_UNITID;
const int NetProto_BlessCome_ID_ID_ARRAYSIZE = NetProto_BlessCome_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_BlessCome_ID_descriptor();
inline const ::std::string& NetProto_BlessCome_ID_Name(NetProto_BlessCome_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_BlessCome_ID_descriptor(), value);
}
inline bool NetProto_BlessCome_ID_Parse(
    const ::std::string& name, NetProto_BlessCome_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_BlessCome_ID>(
    NetProto_BlessCome_ID_descriptor(), name, value);
}
enum NetProto_ModifyBlessScore_ID {
  NetProto_ModifyBlessScore_ID_GROUPID = 10,
  NetProto_ModifyBlessScore_ID_UNITID = 15
};
bool NetProto_ModifyBlessScore_ID_IsValid(int value);
const NetProto_ModifyBlessScore_ID NetProto_ModifyBlessScore_ID_ID_MIN = NetProto_ModifyBlessScore_ID_GROUPID;
const NetProto_ModifyBlessScore_ID NetProto_ModifyBlessScore_ID_ID_MAX = NetProto_ModifyBlessScore_ID_UNITID;
const int NetProto_ModifyBlessScore_ID_ID_ARRAYSIZE = NetProto_ModifyBlessScore_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ModifyBlessScore_ID_descriptor();
inline const ::std::string& NetProto_ModifyBlessScore_ID_Name(NetProto_ModifyBlessScore_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ModifyBlessScore_ID_descriptor(), value);
}
inline bool NetProto_ModifyBlessScore_ID_Parse(
    const ::std::string& name, NetProto_ModifyBlessScore_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ModifyBlessScore_ID>(
    NetProto_ModifyBlessScore_ID_descriptor(), name, value);
}
enum NetProto_TopUpObtRMB_ID {
  NetProto_TopUpObtRMB_ID_GROUPID = 10,
  NetProto_TopUpObtRMB_ID_UNITID = 16
};
bool NetProto_TopUpObtRMB_ID_IsValid(int value);
const NetProto_TopUpObtRMB_ID NetProto_TopUpObtRMB_ID_ID_MIN = NetProto_TopUpObtRMB_ID_GROUPID;
const NetProto_TopUpObtRMB_ID NetProto_TopUpObtRMB_ID_ID_MAX = NetProto_TopUpObtRMB_ID_UNITID;
const int NetProto_TopUpObtRMB_ID_ID_ARRAYSIZE = NetProto_TopUpObtRMB_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_TopUpObtRMB_ID_descriptor();
inline const ::std::string& NetProto_TopUpObtRMB_ID_Name(NetProto_TopUpObtRMB_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_TopUpObtRMB_ID_descriptor(), value);
}
inline bool NetProto_TopUpObtRMB_ID_Parse(
    const ::std::string& name, NetProto_TopUpObtRMB_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_TopUpObtRMB_ID>(
    NetProto_TopUpObtRMB_ID_descriptor(), name, value);
}
enum NetProto_ServerOpenTime_ID {
  NetProto_ServerOpenTime_ID_GROUPID = 10,
  NetProto_ServerOpenTime_ID_UNITID = 17
};
bool NetProto_ServerOpenTime_ID_IsValid(int value);
const NetProto_ServerOpenTime_ID NetProto_ServerOpenTime_ID_ID_MIN = NetProto_ServerOpenTime_ID_GROUPID;
const NetProto_ServerOpenTime_ID NetProto_ServerOpenTime_ID_ID_MAX = NetProto_ServerOpenTime_ID_UNITID;
const int NetProto_ServerOpenTime_ID_ID_ARRAYSIZE = NetProto_ServerOpenTime_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_ServerOpenTime_ID_descriptor();
inline const ::std::string& NetProto_ServerOpenTime_ID_Name(NetProto_ServerOpenTime_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_ServerOpenTime_ID_descriptor(), value);
}
inline bool NetProto_ServerOpenTime_ID_Parse(
    const ::std::string& name, NetProto_ServerOpenTime_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_ServerOpenTime_ID>(
    NetProto_ServerOpenTime_ID_descriptor(), name, value);
}
enum NetProto_InvateCode_ID {
  NetProto_InvateCode_ID_GROUPID = 10,
  NetProto_InvateCode_ID_UNITID = 18
};
bool NetProto_InvateCode_ID_IsValid(int value);
const NetProto_InvateCode_ID NetProto_InvateCode_ID_ID_MIN = NetProto_InvateCode_ID_GROUPID;
const NetProto_InvateCode_ID NetProto_InvateCode_ID_ID_MAX = NetProto_InvateCode_ID_UNITID;
const int NetProto_InvateCode_ID_ID_ARRAYSIZE = NetProto_InvateCode_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_InvateCode_ID_descriptor();
inline const ::std::string& NetProto_InvateCode_ID_Name(NetProto_InvateCode_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_InvateCode_ID_descriptor(), value);
}
inline bool NetProto_InvateCode_ID_Parse(
    const ::std::string& name, NetProto_InvateCode_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_InvateCode_ID>(
    NetProto_InvateCode_ID_descriptor(), name, value);
}
enum NetProto_UpdateInvateCount_ID {
  NetProto_UpdateInvateCount_ID_GROUPID = 10,
  NetProto_UpdateInvateCount_ID_UNITID = 19
};
bool NetProto_UpdateInvateCount_ID_IsValid(int value);
const NetProto_UpdateInvateCount_ID NetProto_UpdateInvateCount_ID_ID_MIN = NetProto_UpdateInvateCount_ID_GROUPID;
const NetProto_UpdateInvateCount_ID NetProto_UpdateInvateCount_ID_ID_MAX = NetProto_UpdateInvateCount_ID_UNITID;
const int NetProto_UpdateInvateCount_ID_ID_ARRAYSIZE = NetProto_UpdateInvateCount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_UpdateInvateCount_ID_descriptor();
inline const ::std::string& NetProto_UpdateInvateCount_ID_Name(NetProto_UpdateInvateCount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_UpdateInvateCount_ID_descriptor(), value);
}
inline bool NetProto_UpdateInvateCount_ID_Parse(
    const ::std::string& name, NetProto_UpdateInvateCount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_UpdateInvateCount_ID>(
    NetProto_UpdateInvateCount_ID_descriptor(), name, value);
}
enum NetProto_CreateFaction_ID {
  NetProto_CreateFaction_ID_GROUPID = 11,
  NetProto_CreateFaction_ID_UNITID = 0
};
bool NetProto_CreateFaction_ID_IsValid(int value);
const NetProto_CreateFaction_ID NetProto_CreateFaction_ID_ID_MIN = NetProto_CreateFaction_ID_UNITID;
const NetProto_CreateFaction_ID NetProto_CreateFaction_ID_ID_MAX = NetProto_CreateFaction_ID_GROUPID;
const int NetProto_CreateFaction_ID_ID_ARRAYSIZE = NetProto_CreateFaction_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_CreateFaction_ID_descriptor();
inline const ::std::string& NetProto_CreateFaction_ID_Name(NetProto_CreateFaction_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_CreateFaction_ID_descriptor(), value);
}
inline bool NetProto_CreateFaction_ID_Parse(
    const ::std::string& name, NetProto_CreateFaction_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_CreateFaction_ID>(
    NetProto_CreateFaction_ID_descriptor(), name, value);
}
enum NetProto_DelFaction_ID {
  NetProto_DelFaction_ID_GROUPID = 11,
  NetProto_DelFaction_ID_UNITID = 1
};
bool NetProto_DelFaction_ID_IsValid(int value);
const NetProto_DelFaction_ID NetProto_DelFaction_ID_ID_MIN = NetProto_DelFaction_ID_UNITID;
const NetProto_DelFaction_ID NetProto_DelFaction_ID_ID_MAX = NetProto_DelFaction_ID_GROUPID;
const int NetProto_DelFaction_ID_ID_ARRAYSIZE = NetProto_DelFaction_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DelFaction_ID_descriptor();
inline const ::std::string& NetProto_DelFaction_ID_Name(NetProto_DelFaction_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DelFaction_ID_descriptor(), value);
}
inline bool NetProto_DelFaction_ID_Parse(
    const ::std::string& name, NetProto_DelFaction_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DelFaction_ID>(
    NetProto_DelFaction_ID_descriptor(), name, value);
}
enum NetProto_Donate_ID {
  NetProto_Donate_ID_GROUPID = 11,
  NetProto_Donate_ID_UNITID = 2
};
bool NetProto_Donate_ID_IsValid(int value);
const NetProto_Donate_ID NetProto_Donate_ID_ID_MIN = NetProto_Donate_ID_UNITID;
const NetProto_Donate_ID NetProto_Donate_ID_ID_MAX = NetProto_Donate_ID_GROUPID;
const int NetProto_Donate_ID_ID_ARRAYSIZE = NetProto_Donate_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Donate_ID_descriptor();
inline const ::std::string& NetProto_Donate_ID_Name(NetProto_Donate_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Donate_ID_descriptor(), value);
}
inline bool NetProto_Donate_ID_Parse(
    const ::std::string& name, NetProto_Donate_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Donate_ID>(
    NetProto_Donate_ID_descriptor(), name, value);
}
enum NetProto_FactionNotice_ID {
  NetProto_FactionNotice_ID_GROUPID = 11,
  NetProto_FactionNotice_ID_UNITID = 3
};
bool NetProto_FactionNotice_ID_IsValid(int value);
const NetProto_FactionNotice_ID NetProto_FactionNotice_ID_ID_MIN = NetProto_FactionNotice_ID_UNITID;
const NetProto_FactionNotice_ID NetProto_FactionNotice_ID_ID_MAX = NetProto_FactionNotice_ID_GROUPID;
const int NetProto_FactionNotice_ID_ID_ARRAYSIZE = NetProto_FactionNotice_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionNotice_ID_descriptor();
inline const ::std::string& NetProto_FactionNotice_ID_Name(NetProto_FactionNotice_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionNotice_ID_descriptor(), value);
}
inline bool NetProto_FactionNotice_ID_Parse(
    const ::std::string& name, NetProto_FactionNotice_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionNotice_ID>(
    NetProto_FactionNotice_ID_descriptor(), name, value);
}
enum NetProto_Designate_ID {
  NetProto_Designate_ID_GROUPID = 11,
  NetProto_Designate_ID_UNITID = 4
};
bool NetProto_Designate_ID_IsValid(int value);
const NetProto_Designate_ID NetProto_Designate_ID_ID_MIN = NetProto_Designate_ID_UNITID;
const NetProto_Designate_ID NetProto_Designate_ID_ID_MAX = NetProto_Designate_ID_GROUPID;
const int NetProto_Designate_ID_ID_ARRAYSIZE = NetProto_Designate_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Designate_ID_descriptor();
inline const ::std::string& NetProto_Designate_ID_Name(NetProto_Designate_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Designate_ID_descriptor(), value);
}
inline bool NetProto_Designate_ID_Parse(
    const ::std::string& name, NetProto_Designate_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Designate_ID>(
    NetProto_Designate_ID_descriptor(), name, value);
}
enum NetProto_AddMem_ID {
  NetProto_AddMem_ID_GROUPID = 11,
  NetProto_AddMem_ID_UNITID = 5
};
bool NetProto_AddMem_ID_IsValid(int value);
const NetProto_AddMem_ID NetProto_AddMem_ID_ID_MIN = NetProto_AddMem_ID_UNITID;
const NetProto_AddMem_ID NetProto_AddMem_ID_ID_MAX = NetProto_AddMem_ID_GROUPID;
const int NetProto_AddMem_ID_ID_ARRAYSIZE = NetProto_AddMem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AddMem_ID_descriptor();
inline const ::std::string& NetProto_AddMem_ID_Name(NetProto_AddMem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AddMem_ID_descriptor(), value);
}
inline bool NetProto_AddMem_ID_Parse(
    const ::std::string& name, NetProto_AddMem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AddMem_ID>(
    NetProto_AddMem_ID_descriptor(), name, value);
}
enum NetProto_DelMem_ID {
  NetProto_DelMem_ID_GROUPID = 11,
  NetProto_DelMem_ID_UNITID = 6
};
bool NetProto_DelMem_ID_IsValid(int value);
const NetProto_DelMem_ID NetProto_DelMem_ID_ID_MIN = NetProto_DelMem_ID_UNITID;
const NetProto_DelMem_ID NetProto_DelMem_ID_ID_MAX = NetProto_DelMem_ID_GROUPID;
const int NetProto_DelMem_ID_ID_ARRAYSIZE = NetProto_DelMem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_DelMem_ID_descriptor();
inline const ::std::string& NetProto_DelMem_ID_Name(NetProto_DelMem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_DelMem_ID_descriptor(), value);
}
inline bool NetProto_DelMem_ID_Parse(
    const ::std::string& name, NetProto_DelMem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_DelMem_ID>(
    NetProto_DelMem_ID_descriptor(), name, value);
}
enum NetProto_Applicant_ID {
  NetProto_Applicant_ID_GROUPID = 11,
  NetProto_Applicant_ID_UNITID = 7
};
bool NetProto_Applicant_ID_IsValid(int value);
const NetProto_Applicant_ID NetProto_Applicant_ID_ID_MIN = NetProto_Applicant_ID_UNITID;
const NetProto_Applicant_ID NetProto_Applicant_ID_ID_MAX = NetProto_Applicant_ID_GROUPID;
const int NetProto_Applicant_ID_ID_ARRAYSIZE = NetProto_Applicant_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Applicant_ID_descriptor();
inline const ::std::string& NetProto_Applicant_ID_Name(NetProto_Applicant_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Applicant_ID_descriptor(), value);
}
inline bool NetProto_Applicant_ID_Parse(
    const ::std::string& name, NetProto_Applicant_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Applicant_ID>(
    NetProto_Applicant_ID_descriptor(), name, value);
}
enum NetProto_Guardian_ID {
  NetProto_Guardian_ID_GROUPID = 11,
  NetProto_Guardian_ID_UNITID = 8
};
bool NetProto_Guardian_ID_IsValid(int value);
const NetProto_Guardian_ID NetProto_Guardian_ID_ID_MIN = NetProto_Guardian_ID_UNITID;
const NetProto_Guardian_ID NetProto_Guardian_ID_ID_MAX = NetProto_Guardian_ID_GROUPID;
const int NetProto_Guardian_ID_ID_ARRAYSIZE = NetProto_Guardian_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_Guardian_ID_descriptor();
inline const ::std::string& NetProto_Guardian_ID_Name(NetProto_Guardian_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_Guardian_ID_descriptor(), value);
}
inline bool NetProto_Guardian_ID_Parse(
    const ::std::string& name, NetProto_Guardian_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_Guardian_ID>(
    NetProto_Guardian_ID_descriptor(), name, value);
}
enum NetProto_FactionInfo_ID {
  NetProto_FactionInfo_ID_GROUPID = 11,
  NetProto_FactionInfo_ID_UNITID = 9
};
bool NetProto_FactionInfo_ID_IsValid(int value);
const NetProto_FactionInfo_ID NetProto_FactionInfo_ID_ID_MIN = NetProto_FactionInfo_ID_UNITID;
const NetProto_FactionInfo_ID NetProto_FactionInfo_ID_ID_MAX = NetProto_FactionInfo_ID_GROUPID;
const int NetProto_FactionInfo_ID_ID_ARRAYSIZE = NetProto_FactionInfo_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionInfo_ID_descriptor();
inline const ::std::string& NetProto_FactionInfo_ID_Name(NetProto_FactionInfo_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionInfo_ID_descriptor(), value);
}
inline bool NetProto_FactionInfo_ID_Parse(
    const ::std::string& name, NetProto_FactionInfo_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionInfo_ID>(
    NetProto_FactionInfo_ID_descriptor(), name, value);
}
enum NetProto_FactionMem_ID {
  NetProto_FactionMem_ID_GROUPID = 11,
  NetProto_FactionMem_ID_UNITID = 10
};
bool NetProto_FactionMem_ID_IsValid(int value);
const NetProto_FactionMem_ID NetProto_FactionMem_ID_ID_MIN = NetProto_FactionMem_ID_UNITID;
const NetProto_FactionMem_ID NetProto_FactionMem_ID_ID_MAX = NetProto_FactionMem_ID_GROUPID;
const int NetProto_FactionMem_ID_ID_ARRAYSIZE = NetProto_FactionMem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionMem_ID_descriptor();
inline const ::std::string& NetProto_FactionMem_ID_Name(NetProto_FactionMem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionMem_ID_descriptor(), value);
}
inline bool NetProto_FactionMem_ID_Parse(
    const ::std::string& name, NetProto_FactionMem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionMem_ID>(
    NetProto_FactionMem_ID_descriptor(), name, value);
}
enum NetProto_FactionChangeMem_ID {
  NetProto_FactionChangeMem_ID_GROUPID = 11,
  NetProto_FactionChangeMem_ID_UNITID = 11
};
bool NetProto_FactionChangeMem_ID_IsValid(int value);
const NetProto_FactionChangeMem_ID NetProto_FactionChangeMem_ID_ID_MIN = NetProto_FactionChangeMem_ID_GROUPID;
const NetProto_FactionChangeMem_ID NetProto_FactionChangeMem_ID_ID_MAX = NetProto_FactionChangeMem_ID_GROUPID;
const int NetProto_FactionChangeMem_ID_ID_ARRAYSIZE = NetProto_FactionChangeMem_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionChangeMem_ID_descriptor();
inline const ::std::string& NetProto_FactionChangeMem_ID_Name(NetProto_FactionChangeMem_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionChangeMem_ID_descriptor(), value);
}
inline bool NetProto_FactionChangeMem_ID_Parse(
    const ::std::string& name, NetProto_FactionChangeMem_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionChangeMem_ID>(
    NetProto_FactionChangeMem_ID_descriptor(), name, value);
}
enum NetProto_FactionGuardian_ID {
  NetProto_FactionGuardian_ID_GROUPID = 11,
  NetProto_FactionGuardian_ID_UNITID = 12
};
bool NetProto_FactionGuardian_ID_IsValid(int value);
const NetProto_FactionGuardian_ID NetProto_FactionGuardian_ID_ID_MIN = NetProto_FactionGuardian_ID_GROUPID;
const NetProto_FactionGuardian_ID NetProto_FactionGuardian_ID_ID_MAX = NetProto_FactionGuardian_ID_UNITID;
const int NetProto_FactionGuardian_ID_ID_ARRAYSIZE = NetProto_FactionGuardian_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionGuardian_ID_descriptor();
inline const ::std::string& NetProto_FactionGuardian_ID_Name(NetProto_FactionGuardian_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionGuardian_ID_descriptor(), value);
}
inline bool NetProto_FactionGuardian_ID_Parse(
    const ::std::string& name, NetProto_FactionGuardian_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionGuardian_ID>(
    NetProto_FactionGuardian_ID_descriptor(), name, value);
}
enum NetProto_FactionApplicant_ID {
  NetProto_FactionApplicant_ID_GROUPID = 11,
  NetProto_FactionApplicant_ID_UNITID = 13
};
bool NetProto_FactionApplicant_ID_IsValid(int value);
const NetProto_FactionApplicant_ID NetProto_FactionApplicant_ID_ID_MIN = NetProto_FactionApplicant_ID_GROUPID;
const NetProto_FactionApplicant_ID NetProto_FactionApplicant_ID_ID_MAX = NetProto_FactionApplicant_ID_UNITID;
const int NetProto_FactionApplicant_ID_ID_ARRAYSIZE = NetProto_FactionApplicant_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionApplicant_ID_descriptor();
inline const ::std::string& NetProto_FactionApplicant_ID_Name(NetProto_FactionApplicant_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionApplicant_ID_descriptor(), value);
}
inline bool NetProto_FactionApplicant_ID_Parse(
    const ::std::string& name, NetProto_FactionApplicant_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionApplicant_ID>(
    NetProto_FactionApplicant_ID_descriptor(), name, value);
}
enum NetProto_FactionAllApplicant_ID {
  NetProto_FactionAllApplicant_ID_GROUPID = 11,
  NetProto_FactionAllApplicant_ID_UNITID = 14
};
bool NetProto_FactionAllApplicant_ID_IsValid(int value);
const NetProto_FactionAllApplicant_ID NetProto_FactionAllApplicant_ID_ID_MIN = NetProto_FactionAllApplicant_ID_GROUPID;
const NetProto_FactionAllApplicant_ID NetProto_FactionAllApplicant_ID_ID_MAX = NetProto_FactionAllApplicant_ID_UNITID;
const int NetProto_FactionAllApplicant_ID_ID_ARRAYSIZE = NetProto_FactionAllApplicant_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionAllApplicant_ID_descriptor();
inline const ::std::string& NetProto_FactionAllApplicant_ID_Name(NetProto_FactionAllApplicant_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionAllApplicant_ID_descriptor(), value);
}
inline bool NetProto_FactionAllApplicant_ID_Parse(
    const ::std::string& name, NetProto_FactionAllApplicant_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionAllApplicant_ID>(
    NetProto_FactionAllApplicant_ID_descriptor(), name, value);
}
enum NetProto_FactionList_ID {
  NetProto_FactionList_ID_GROUPID = 11,
  NetProto_FactionList_ID_UNITID = 15
};
bool NetProto_FactionList_ID_IsValid(int value);
const NetProto_FactionList_ID NetProto_FactionList_ID_ID_MIN = NetProto_FactionList_ID_GROUPID;
const NetProto_FactionList_ID NetProto_FactionList_ID_ID_MAX = NetProto_FactionList_ID_UNITID;
const int NetProto_FactionList_ID_ID_ARRAYSIZE = NetProto_FactionList_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_FactionList_ID_descriptor();
inline const ::std::string& NetProto_FactionList_ID_Name(NetProto_FactionList_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_FactionList_ID_descriptor(), value);
}
inline bool NetProto_FactionList_ID_Parse(
    const ::std::string& name, NetProto_FactionList_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_FactionList_ID>(
    NetProto_FactionList_ID_descriptor(), name, value);
}
enum NetProto_AcceptToFaction_ID {
  NetProto_AcceptToFaction_ID_GROUPID = 11,
  NetProto_AcceptToFaction_ID_UNITID = 16
};
bool NetProto_AcceptToFaction_ID_IsValid(int value);
const NetProto_AcceptToFaction_ID NetProto_AcceptToFaction_ID_ID_MIN = NetProto_AcceptToFaction_ID_GROUPID;
const NetProto_AcceptToFaction_ID NetProto_AcceptToFaction_ID_ID_MAX = NetProto_AcceptToFaction_ID_UNITID;
const int NetProto_AcceptToFaction_ID_ID_ARRAYSIZE = NetProto_AcceptToFaction_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AcceptToFaction_ID_descriptor();
inline const ::std::string& NetProto_AcceptToFaction_ID_Name(NetProto_AcceptToFaction_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AcceptToFaction_ID_descriptor(), value);
}
inline bool NetProto_AcceptToFaction_ID_Parse(
    const ::std::string& name, NetProto_AcceptToFaction_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AcceptToFaction_ID>(
    NetProto_AcceptToFaction_ID_descriptor(), name, value);
}
enum NetProto_AsyncStatistics_ID {
  NetProto_AsyncStatistics_ID_GROUPID = 12,
  NetProto_AsyncStatistics_ID_UNITID = 0
};
bool NetProto_AsyncStatistics_ID_IsValid(int value);
const NetProto_AsyncStatistics_ID NetProto_AsyncStatistics_ID_ID_MIN = NetProto_AsyncStatistics_ID_UNITID;
const NetProto_AsyncStatistics_ID NetProto_AsyncStatistics_ID_ID_MAX = NetProto_AsyncStatistics_ID_GROUPID;
const int NetProto_AsyncStatistics_ID_ID_ARRAYSIZE = NetProto_AsyncStatistics_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_AsyncStatistics_ID_descriptor();
inline const ::std::string& NetProto_AsyncStatistics_ID_Name(NetProto_AsyncStatistics_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_AsyncStatistics_ID_descriptor(), value);
}
inline bool NetProto_AsyncStatistics_ID_Parse(
    const ::std::string& name, NetProto_AsyncStatistics_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_AsyncStatistics_ID>(
    NetProto_AsyncStatistics_ID_descriptor(), name, value);
}
enum NetProto_StatisticsAGSLoadScene_ID {
  NetProto_StatisticsAGSLoadScene_ID_GROUPID = 12,
  NetProto_StatisticsAGSLoadScene_ID_UNITID = 1
};
bool NetProto_StatisticsAGSLoadScene_ID_IsValid(int value);
const NetProto_StatisticsAGSLoadScene_ID NetProto_StatisticsAGSLoadScene_ID_ID_MIN = NetProto_StatisticsAGSLoadScene_ID_UNITID;
const NetProto_StatisticsAGSLoadScene_ID NetProto_StatisticsAGSLoadScene_ID_ID_MAX = NetProto_StatisticsAGSLoadScene_ID_GROUPID;
const int NetProto_StatisticsAGSLoadScene_ID_ID_ARRAYSIZE = NetProto_StatisticsAGSLoadScene_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StatisticsAGSLoadScene_ID_descriptor();
inline const ::std::string& NetProto_StatisticsAGSLoadScene_ID_Name(NetProto_StatisticsAGSLoadScene_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StatisticsAGSLoadScene_ID_descriptor(), value);
}
inline bool NetProto_StatisticsAGSLoadScene_ID_Parse(
    const ::std::string& name, NetProto_StatisticsAGSLoadScene_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StatisticsAGSLoadScene_ID>(
    NetProto_StatisticsAGSLoadScene_ID_descriptor(), name, value);
}
enum NetProto_StatisticsAGSLoadNPC_ID {
  NetProto_StatisticsAGSLoadNPC_ID_GROUPID = 12,
  NetProto_StatisticsAGSLoadNPC_ID_UNITID = 2
};
bool NetProto_StatisticsAGSLoadNPC_ID_IsValid(int value);
const NetProto_StatisticsAGSLoadNPC_ID NetProto_StatisticsAGSLoadNPC_ID_ID_MIN = NetProto_StatisticsAGSLoadNPC_ID_UNITID;
const NetProto_StatisticsAGSLoadNPC_ID NetProto_StatisticsAGSLoadNPC_ID_ID_MAX = NetProto_StatisticsAGSLoadNPC_ID_GROUPID;
const int NetProto_StatisticsAGSLoadNPC_ID_ID_ARRAYSIZE = NetProto_StatisticsAGSLoadNPC_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetProto_StatisticsAGSLoadNPC_ID_descriptor();
inline const ::std::string& NetProto_StatisticsAGSLoadNPC_ID_Name(NetProto_StatisticsAGSLoadNPC_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetProto_StatisticsAGSLoadNPC_ID_descriptor(), value);
}
inline bool NetProto_StatisticsAGSLoadNPC_ID_Parse(
    const ::std::string& name, NetProto_StatisticsAGSLoadNPC_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetProto_StatisticsAGSLoadNPC_ID>(
    NetProto_StatisticsAGSLoadNPC_ID_descriptor(), name, value);
}
// ===================================================================

class NetProto_ClientException : public ::google::protobuf::Message {
 public:
  NetProto_ClientException();
  virtual ~NetProto_ClientException();
  
  NetProto_ClientException(const NetProto_ClientException& from);
  
  inline NetProto_ClientException& operator=(const NetProto_ClientException& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ClientException& default_instance();
  
  void Swap(NetProto_ClientException* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ClientException* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ClientException& from);
  void MergeFrom(const NetProto_ClientException& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ClientException_ID ID;
  static const ID GROUPID = NetProto_ClientException_ID_GROUPID;
  static const ID UNITID = NetProto_ClientException_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ClientException_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ClientException_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ClientException_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ClientException_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ClientException_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ClientException_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ClientException_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string output = 1;
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 1;
  inline const ::std::string& output() const;
  inline void set_output(const ::std::string& value);
  inline void set_output(const char* value);
  inline void set_output(const char* value, size_t size);
  inline ::std::string* mutable_output();
  inline ::std::string* release_output();
  
  // optional string stackTrace = 2;
  inline bool has_stackTrace() const;
  inline void clear_stackTrace();
  static const int kStackTraceFieldNumber = 2;
  inline const ::std::string& stackTrace() const;
  inline void set_stackTrace(const ::std::string& value);
  inline void set_stackTrace(const char* value);
  inline void set_stackTrace(const char* value, size_t size);
  inline ::std::string* mutable_stackTrace();
  inline ::std::string* release_stackTrace();
  
  // optional string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // @@protoc_insertion_point(class_scope:NetProto_ClientException)
 private:
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_stackTrace();
  inline void clear_has_stackTrace();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* output_;
  ::std::string* stackTrace_;
  ::std::string* type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ClientException* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Heartbeat : public ::google::protobuf::Message {
 public:
  NetProto_Heartbeat();
  virtual ~NetProto_Heartbeat();
  
  NetProto_Heartbeat(const NetProto_Heartbeat& from);
  
  inline NetProto_Heartbeat& operator=(const NetProto_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Heartbeat& default_instance();
  
  void Swap(NetProto_Heartbeat* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Heartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Heartbeat& from);
  void MergeFrom(const NetProto_Heartbeat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Heartbeat_ID ID;
  static const ID GROUPID = NetProto_Heartbeat_ID_GROUPID;
  static const ID UNITID = NetProto_Heartbeat_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Heartbeat_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Heartbeat_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Heartbeat_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Heartbeat_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Heartbeat_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Heartbeat_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Heartbeat_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_Heartbeat)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Heartbeat* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Login : public ::google::protobuf::Message {
 public:
  NetProto_Login();
  virtual ~NetProto_Login();
  
  NetProto_Login(const NetProto_Login& from);
  
  inline NetProto_Login& operator=(const NetProto_Login& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Login& default_instance();
  
  void Swap(NetProto_Login* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Login& from);
  void MergeFrom(const NetProto_Login& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Login_ID ID;
  static const ID GROUPID = NetProto_Login_ID_GROUPID;
  static const ID UNITID = NetProto_Login_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Login_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Login_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Login_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Login_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Login_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Login_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Login_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional int64 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::int64 version() const;
  inline void set_version(::google::protobuf::int64 value);
  
  // optional string platform = 4;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 4;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  
  // optional string deviceID = 5;
  inline bool has_deviceID() const;
  inline void clear_deviceID();
  static const int kDeviceIDFieldNumber = 5;
  inline const ::std::string& deviceID() const;
  inline void set_deviceID(const ::std::string& value);
  inline void set_deviceID(const char* value);
  inline void set_deviceID(const char* value, size_t size);
  inline ::std::string* mutable_deviceID();
  inline ::std::string* release_deviceID();
  
  // optional string idfa = 6;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 6;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  
  // optional string osversion = 7;
  inline bool has_osversion() const;
  inline void clear_osversion();
  static const int kOsversionFieldNumber = 7;
  inline const ::std::string& osversion() const;
  inline void set_osversion(const ::std::string& value);
  inline void set_osversion(const char* value);
  inline void set_osversion(const char* value, size_t size);
  inline ::std::string* mutable_osversion();
  inline ::std::string* release_osversion();
  
  // optional string phonetype = 8;
  inline bool has_phonetype() const;
  inline void clear_phonetype();
  static const int kPhonetypeFieldNumber = 8;
  inline const ::std::string& phonetype() const;
  inline void set_phonetype(const ::std::string& value);
  inline void set_phonetype(const char* value);
  inline void set_phonetype(const char* value, size_t size);
  inline ::std::string* mutable_phonetype();
  inline ::std::string* release_phonetype();
  
  // optional string imei = 9;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 9;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  
  // optional string addTime = 10;
  inline bool has_addTime() const;
  inline void clear_addTime();
  static const int kAddTimeFieldNumber = 10;
  inline const ::std::string& addTime() const;
  inline void set_addTime(const ::std::string& value);
  inline void set_addTime(const char* value);
  inline void set_addTime(const char* value, size_t size);
  inline ::std::string* mutable_addTime();
  inline ::std::string* release_addTime();
  
  // optional string deviceAddTime = 11;
  inline bool has_deviceAddTime() const;
  inline void clear_deviceAddTime();
  static const int kDeviceAddTimeFieldNumber = 11;
  inline const ::std::string& deviceAddTime() const;
  inline void set_deviceAddTime(const ::std::string& value);
  inline void set_deviceAddTime(const char* value);
  inline void set_deviceAddTime(const char* value, size_t size);
  inline ::std::string* mutable_deviceAddTime();
  inline ::std::string* release_deviceAddTime();
  
  // optional string activateKey = 12;
  inline bool has_activateKey() const;
  inline void clear_activateKey();
  static const int kActivateKeyFieldNumber = 12;
  inline const ::std::string& activateKey() const;
  inline void set_activateKey(const ::std::string& value);
  inline void set_activateKey(const char* value);
  inline void set_activateKey(const char* value, size_t size);
  inline ::std::string* mutable_activateKey();
  inline ::std::string* release_activateKey();
  
  // optional bool loginLater = 13;
  inline bool has_loginLater() const;
  inline void clear_loginLater();
  static const int kLoginLaterFieldNumber = 13;
  inline bool loginLater() const;
  inline void set_loginLater(bool value);
  
  // optional string session_id = 14;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 14;
  inline const ::std::string& session_id() const;
  inline void set_session_id(const ::std::string& value);
  inline void set_session_id(const char* value);
  inline void set_session_id(const char* value, size_t size);
  inline ::std::string* mutable_session_id();
  inline ::std::string* release_session_id();
  
  // optional string session_type = 15;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 15;
  inline const ::std::string& session_type() const;
  inline void set_session_type(const ::std::string& value);
  inline void set_session_type(const char* value);
  inline void set_session_type(const char* value, size_t size);
  inline ::std::string* mutable_session_type();
  inline ::std::string* release_session_type();
  
  // optional string openid = 16;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 16;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  
  // optional string openkey = 17;
  inline bool has_openkey() const;
  inline void clear_openkey();
  static const int kOpenkeyFieldNumber = 17;
  inline const ::std::string& openkey() const;
  inline void set_openkey(const ::std::string& value);
  inline void set_openkey(const char* value);
  inline void set_openkey(const char* value, size_t size);
  inline ::std::string* mutable_openkey();
  inline ::std::string* release_openkey();
  
  // optional string pay_token = 18;
  inline bool has_pay_token() const;
  inline void clear_pay_token();
  static const int kPayTokenFieldNumber = 18;
  inline const ::std::string& pay_token() const;
  inline void set_pay_token(const ::std::string& value);
  inline void set_pay_token(const char* value);
  inline void set_pay_token(const char* value, size_t size);
  inline ::std::string* mutable_pay_token();
  inline ::std::string* release_pay_token();
  
  // optional string pf = 19;
  inline bool has_pf() const;
  inline void clear_pf();
  static const int kPfFieldNumber = 19;
  inline const ::std::string& pf() const;
  inline void set_pf(const ::std::string& value);
  inline void set_pf(const char* value);
  inline void set_pf(const char* value, size_t size);
  inline ::std::string* mutable_pf();
  inline ::std::string* release_pf();
  
  // optional string pfkey = 20;
  inline bool has_pfkey() const;
  inline void clear_pfkey();
  static const int kPfkeyFieldNumber = 20;
  inline const ::std::string& pfkey() const;
  inline void set_pfkey(const ::std::string& value);
  inline void set_pfkey(const char* value);
  inline void set_pfkey(const char* value, size_t size);
  inline ::std::string* mutable_pfkey();
  inline ::std::string* release_pfkey();
  
  // @@protoc_insertion_point(class_scope:NetProto_Login)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_deviceID();
  inline void clear_has_deviceID();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  inline void set_has_osversion();
  inline void clear_has_osversion();
  inline void set_has_phonetype();
  inline void clear_has_phonetype();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_addTime();
  inline void clear_has_addTime();
  inline void set_has_deviceAddTime();
  inline void clear_has_deviceAddTime();
  inline void set_has_activateKey();
  inline void clear_has_activateKey();
  inline void set_has_loginLater();
  inline void clear_has_loginLater();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_openkey();
  inline void clear_has_openkey();
  inline void set_has_pay_token();
  inline void clear_has_pay_token();
  inline void set_has_pf();
  inline void clear_has_pf();
  inline void set_has_pfkey();
  inline void clear_has_pfkey();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::std::string* password_;
  ::google::protobuf::int64 version_;
  ::std::string* platform_;
  ::std::string* deviceID_;
  ::std::string* idfa_;
  ::std::string* osversion_;
  ::std::string* phonetype_;
  ::std::string* imei_;
  ::std::string* addTime_;
  ::std::string* deviceAddTime_;
  ::std::string* activateKey_;
  ::std::string* session_id_;
  ::std::string* session_type_;
  ::std::string* openid_;
  ::std::string* openkey_;
  ::std::string* pay_token_;
  ::std::string* pf_;
  ::std::string* pfkey_;
  bool loginLater_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Login* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_LoginResult : public ::google::protobuf::Message {
 public:
  NetProto_LoginResult();
  virtual ~NetProto_LoginResult();
  
  NetProto_LoginResult(const NetProto_LoginResult& from);
  
  inline NetProto_LoginResult& operator=(const NetProto_LoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_LoginResult& default_instance();
  
  void Swap(NetProto_LoginResult* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_LoginResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_LoginResult& from);
  void MergeFrom(const NetProto_LoginResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_LoginResult_ID ID;
  static const ID GROUPID = NetProto_LoginResult_ID_GROUPID;
  static const ID UNITID = NetProto_LoginResult_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_LoginResult_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_LoginResult_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_LoginResult_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_LoginResult_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_LoginResult_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_LoginResult_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_LoginResult_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 serverOpenTime = 2;
  inline bool has_serverOpenTime() const;
  inline void clear_serverOpenTime();
  static const int kServerOpenTimeFieldNumber = 2;
  inline ::google::protobuf::int32 serverOpenTime() const;
  inline void set_serverOpenTime(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_LoginResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_serverOpenTime();
  inline void clear_has_serverOpenTime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 serverOpenTime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_LoginResult* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Logout : public ::google::protobuf::Message {
 public:
  NetProto_Logout();
  virtual ~NetProto_Logout();
  
  NetProto_Logout(const NetProto_Logout& from);
  
  inline NetProto_Logout& operator=(const NetProto_Logout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Logout& default_instance();
  
  void Swap(NetProto_Logout* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Logout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Logout& from);
  void MergeFrom(const NetProto_Logout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Logout_ID ID;
  static const ID GROUPID = NetProto_Logout_ID_GROUPID;
  static const ID UNITID = NetProto_Logout_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Logout_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Logout_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Logout_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Logout_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Logout_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Logout_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Logout_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Logout)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Logout* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SelectRole : public ::google::protobuf::Message {
 public:
  NetProto_SelectRole();
  virtual ~NetProto_SelectRole();
  
  NetProto_SelectRole(const NetProto_SelectRole& from);
  
  inline NetProto_SelectRole& operator=(const NetProto_SelectRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SelectRole& default_instance();
  
  void Swap(NetProto_SelectRole* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SelectRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SelectRole& from);
  void MergeFrom(const NetProto_SelectRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SelectRole_ID ID;
  static const ID GROUPID = NetProto_SelectRole_ID_GROUPID;
  static const ID UNITID = NetProto_SelectRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SelectRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SelectRole_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SelectRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SelectRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SelectRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SelectRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SelectRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SelectRole)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SelectRole* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_CreateRole : public ::google::protobuf::Message {
 public:
  NetProto_CreateRole();
  virtual ~NetProto_CreateRole();
  
  NetProto_CreateRole(const NetProto_CreateRole& from);
  
  inline NetProto_CreateRole& operator=(const NetProto_CreateRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_CreateRole& default_instance();
  
  void Swap(NetProto_CreateRole* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_CreateRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_CreateRole& from);
  void MergeFrom(const NetProto_CreateRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_CreateRole_ID ID;
  static const ID GROUPID = NetProto_CreateRole_ID_GROUPID;
  static const ID UNITID = NetProto_CreateRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_CreateRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_CreateRole_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_CreateRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_CreateRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_CreateRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_CreateRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_CreateRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_ProfessionInfo.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB_ProfessionInfo_Type type() const;
  inline void set_type(::PB_ProfessionInfo_Type value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bool male = 3;
  inline bool has_male() const;
  inline void clear_male();
  static const int kMaleFieldNumber = 3;
  inline bool male() const;
  inline void set_male(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_CreateRole)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_male();
  inline void clear_has_male();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  int type_;
  bool male_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_CreateRole* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ServerTime : public ::google::protobuf::Message {
 public:
  NetProto_ServerTime();
  virtual ~NetProto_ServerTime();
  
  NetProto_ServerTime(const NetProto_ServerTime& from);
  
  inline NetProto_ServerTime& operator=(const NetProto_ServerTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ServerTime& default_instance();
  
  void Swap(NetProto_ServerTime* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ServerTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ServerTime& from);
  void MergeFrom(const NetProto_ServerTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ServerTime_ID ID;
  static const ID GROUPID = NetProto_ServerTime_ID_GROUPID;
  static const ID UNITID = NetProto_ServerTime_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ServerTime_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ServerTime_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ServerTime_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ServerTime_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ServerTime_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ServerTime_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ServerTime_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional int32 cur = 2;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 2;
  inline ::google::protobuf::int32 cur() const;
  inline void set_cur(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ServerTime)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_cur();
  inline void clear_has_cur();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 cur_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ServerTime* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RoleList : public ::google::protobuf::Message {
 public:
  NetProto_RoleList();
  virtual ~NetProto_RoleList();
  
  NetProto_RoleList(const NetProto_RoleList& from);
  
  inline NetProto_RoleList& operator=(const NetProto_RoleList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RoleList& default_instance();
  
  void Swap(NetProto_RoleList* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RoleList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RoleList& from);
  void MergeFrom(const NetProto_RoleList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RoleList_ID ID;
  static const ID GROUPID = NetProto_RoleList_ID_GROUPID;
  static const ID UNITID = NetProto_RoleList_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RoleList_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RoleList_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RoleList_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RoleList_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RoleList_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RoleList_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RoleList_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .PB_PlayerAtt roles = 1;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 1;
  inline const ::PB_PlayerAtt& roles(int index) const;
  inline ::PB_PlayerAtt* mutable_roles(int index);
  inline ::PB_PlayerAtt* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
      mutable_roles();
  
  // @@protoc_insertion_point(class_scope:NetProto_RoleList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt > roles_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RoleList* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DeleteRole : public ::google::protobuf::Message {
 public:
  NetProto_DeleteRole();
  virtual ~NetProto_DeleteRole();
  
  NetProto_DeleteRole(const NetProto_DeleteRole& from);
  
  inline NetProto_DeleteRole& operator=(const NetProto_DeleteRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DeleteRole& default_instance();
  
  void Swap(NetProto_DeleteRole* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DeleteRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DeleteRole& from);
  void MergeFrom(const NetProto_DeleteRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DeleteRole_ID ID;
  static const ID GROUPID = NetProto_DeleteRole_ID_GROUPID;
  static const ID UNITID = NetProto_DeleteRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DeleteRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DeleteRole_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DeleteRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DeleteRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DeleteRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DeleteRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DeleteRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DeleteRole)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DeleteRole* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ReLogin : public ::google::protobuf::Message {
 public:
  NetProto_ReLogin();
  virtual ~NetProto_ReLogin();
  
  NetProto_ReLogin(const NetProto_ReLogin& from);
  
  inline NetProto_ReLogin& operator=(const NetProto_ReLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ReLogin& default_instance();
  
  void Swap(NetProto_ReLogin* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ReLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ReLogin& from);
  void MergeFrom(const NetProto_ReLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ReLogin_ID ID;
  static const ID GROUPID = NetProto_ReLogin_ID_GROUPID;
  static const ID UNITID = NetProto_ReLogin_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ReLogin_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ReLogin_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ReLogin_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ReLogin_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ReLogin_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ReLogin_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ReLogin_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string platform = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  
  // @@protoc_insertion_point(class_scope:NetProto_ReLogin)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_platform();
  inline void clear_has_platform();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::std::string* password_;
  ::std::string* platform_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ReLogin* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ReLoginResult : public ::google::protobuf::Message {
 public:
  NetProto_ReLoginResult();
  virtual ~NetProto_ReLoginResult();
  
  NetProto_ReLoginResult(const NetProto_ReLoginResult& from);
  
  inline NetProto_ReLoginResult& operator=(const NetProto_ReLoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ReLoginResult& default_instance();
  
  void Swap(NetProto_ReLoginResult* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ReLoginResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ReLoginResult& from);
  void MergeFrom(const NetProto_ReLoginResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ReLoginResult_ID ID;
  static const ID GROUPID = NetProto_ReLoginResult_ID_GROUPID;
  static const ID UNITID = NetProto_ReLoginResult_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ReLoginResult_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ReLoginResult_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ReLoginResult_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ReLoginResult_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ReLoginResult_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ReLoginResult_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ReLoginResult_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ReLoginResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ReLoginResult* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Rank : public ::google::protobuf::Message {
 public:
  NetProto_Rank();
  virtual ~NetProto_Rank();
  
  NetProto_Rank(const NetProto_Rank& from);
  
  inline NetProto_Rank& operator=(const NetProto_Rank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Rank& default_instance();
  
  void Swap(NetProto_Rank* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Rank& from);
  void MergeFrom(const NetProto_Rank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Rank_ID ID;
  static const ID GROUPID = NetProto_Rank_ID_GROUPID;
  static const ID UNITID = NetProto_Rank_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Rank_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Rank_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Rank_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Rank_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Rank_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Rank_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Rank_ID_Parse(name, value);
  }
  
  typedef NetProto_Rank_Type Type;
  static const Type POWER = NetProto_Rank_Type_POWER;
  static const Type TOWER = NetProto_Rank_Type_TOWER;
  static const Type LEVEL = NetProto_Rank_Type_LEVEL;
  static const Type GOD = NetProto_Rank_Type_GOD;
  static const Type WORLD_BOSS = NetProto_Rank_Type_WORLD_BOSS;
  static const Type BLESSCOME = NetProto_Rank_Type_BLESSCOME;
  static const Type FACTION = NetProto_Rank_Type_FACTION;
  static const Type PET = NetProto_Rank_Type_PET;
  static const Type DEVIL = NetProto_Rank_Type_DEVIL;
  static const Type AWARD_FROM_SKY = NetProto_Rank_Type_AWARD_FROM_SKY;
  static const Type LUCK = NetProto_Rank_Type_LUCK;
  static const Type QIUBITE = NetProto_Rank_Type_QIUBITE;
  static const Type CONSUME = NetProto_Rank_Type_CONSUME;
  static const Type CATGIFT = NetProto_Rank_Type_CATGIFT;
  static const Type GROUP_PURCHASE = NetProto_Rank_Type_GROUP_PURCHASE;
  static const Type GROUPRECORD = NetProto_Rank_Type_GROUPRECORD;
  static const Type RESERVATION = NetProto_Rank_Type_RESERVATION;
  static inline bool Type_IsValid(int value) {
    return NetProto_Rank_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Rank_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Rank_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Rank_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Rank_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Rank_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Rank_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Rank.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Rank_Type type() const;
  inline void set_type(::NetProto_Rank_Type value);
  
  // repeated .RecordInfo rank = 2;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline const ::RecordInfo& rank(int index) const;
  inline ::RecordInfo* mutable_rank(int index);
  inline ::RecordInfo* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
      mutable_rank();
  
  // optional int32 range = 4;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 4;
  inline ::google::protobuf::int32 range() const;
  inline void set_range(::google::protobuf::int32 value);
  
  // optional .RecordInfo finalKiller = 5;
  inline bool has_finalKiller() const;
  inline void clear_finalKiller();
  static const int kFinalKillerFieldNumber = 5;
  inline const ::RecordInfo& finalKiller() const;
  inline ::RecordInfo* mutable_finalKiller();
  inline ::RecordInfo* release_finalKiller();
  
  // optional .RecordInfo self = 6;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 6;
  inline const ::RecordInfo& self() const;
  inline ::RecordInfo* mutable_self();
  inline ::RecordInfo* release_self();
  
  // @@protoc_insertion_point(class_scope:NetProto_Rank)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_finalKiller();
  inline void clear_has_finalKiller();
  inline void set_has_self();
  inline void clear_has_self();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RecordInfo > rank_;
  int type_;
  ::google::protobuf::int32 range_;
  ::RecordInfo* finalKiller_;
  ::RecordInfo* self_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Rank* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SetUp : public ::google::protobuf::Message {
 public:
  NetProto_SetUp();
  virtual ~NetProto_SetUp();
  
  NetProto_SetUp(const NetProto_SetUp& from);
  
  inline NetProto_SetUp& operator=(const NetProto_SetUp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SetUp& default_instance();
  
  void Swap(NetProto_SetUp* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SetUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SetUp& from);
  void MergeFrom(const NetProto_SetUp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SetUp_ID ID;
  static const ID GROUPID = NetProto_SetUp_ID_GROUPID;
  static const ID UNITID = NetProto_SetUp_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SetUp_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SetUp_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SetUp_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SetUp_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SetUp_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SetUp_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SetUp_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 soundVolume = 1;
  inline bool has_soundVolume() const;
  inline void clear_soundVolume();
  static const int kSoundVolumeFieldNumber = 1;
  inline ::google::protobuf::int32 soundVolume() const;
  inline void set_soundVolume(::google::protobuf::int32 value);
  
  // optional int32 musicVolume = 2;
  inline bool has_musicVolume() const;
  inline void clear_musicVolume();
  static const int kMusicVolumeFieldNumber = 2;
  inline ::google::protobuf::int32 musicVolume() const;
  inline void set_musicVolume(::google::protobuf::int32 value);
  
  // optional int32 playerNum = 3;
  inline bool has_playerNum() const;
  inline void clear_playerNum();
  static const int kPlayerNumFieldNumber = 3;
  inline ::google::protobuf::int32 playerNum() const;
  inline void set_playerNum(::google::protobuf::int32 value);
  
  // optional bool fixedCamera = 4;
  inline bool has_fixedCamera() const;
  inline void clear_fixedCamera();
  static const int kFixedCameraFieldNumber = 4;
  inline bool fixedCamera() const;
  inline void set_fixedCamera(bool value);
  
  // optional bool displayOtherEffect = 5;
  inline bool has_displayOtherEffect() const;
  inline void clear_displayOtherEffect();
  static const int kDisplayOtherEffectFieldNumber = 5;
  inline bool displayOtherEffect() const;
  inline void set_displayOtherEffect(bool value);
  
  // optional bool displayMyEffect = 6;
  inline bool has_displayMyEffect() const;
  inline void clear_displayMyEffect();
  static const int kDisplayMyEffectFieldNumber = 6;
  inline bool displayMyEffect() const;
  inline void set_displayMyEffect(bool value);
  
  // optional bool displayOtherHurtNum = 7;
  inline bool has_displayOtherHurtNum() const;
  inline void clear_displayOtherHurtNum();
  static const int kDisplayOtherHurtNumFieldNumber = 7;
  inline bool displayOtherHurtNum() const;
  inline void set_displayOtherHurtNum(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SetUp)
 private:
  inline void set_has_soundVolume();
  inline void clear_has_soundVolume();
  inline void set_has_musicVolume();
  inline void clear_has_musicVolume();
  inline void set_has_playerNum();
  inline void clear_has_playerNum();
  inline void set_has_fixedCamera();
  inline void clear_has_fixedCamera();
  inline void set_has_displayOtherEffect();
  inline void clear_has_displayOtherEffect();
  inline void set_has_displayMyEffect();
  inline void clear_has_displayMyEffect();
  inline void set_has_displayOtherHurtNum();
  inline void clear_has_displayOtherHurtNum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 soundVolume_;
  ::google::protobuf::int32 musicVolume_;
  ::google::protobuf::int32 playerNum_;
  bool fixedCamera_;
  bool displayOtherEffect_;
  bool displayMyEffect_;
  bool displayOtherHurtNum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SetUp* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Register : public ::google::protobuf::Message {
 public:
  NetProto_Register();
  virtual ~NetProto_Register();
  
  NetProto_Register(const NetProto_Register& from);
  
  inline NetProto_Register& operator=(const NetProto_Register& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Register& default_instance();
  
  void Swap(NetProto_Register* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Register& from);
  void MergeFrom(const NetProto_Register& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Register_ID ID;
  static const ID GROUPID = NetProto_Register_ID_GROUPID;
  static const ID UNITID = NetProto_Register_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Register_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Register_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Register_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Register_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Register_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Register_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Register_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string deviceID = 3;
  inline bool has_deviceID() const;
  inline void clear_deviceID();
  static const int kDeviceIDFieldNumber = 3;
  inline const ::std::string& deviceID() const;
  inline void set_deviceID(const ::std::string& value);
  inline void set_deviceID(const char* value);
  inline void set_deviceID(const char* value, size_t size);
  inline ::std::string* mutable_deviceID();
  inline ::std::string* release_deviceID();
  
  // optional string idfa = 4;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 4;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  
  // @@protoc_insertion_point(class_scope:NetProto_Register)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_deviceID();
  inline void clear_has_deviceID();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::std::string* password_;
  ::std::string* deviceID_;
  ::std::string* idfa_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Register* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GetKeyGift : public ::google::protobuf::Message {
 public:
  NetProto_GetKeyGift();
  virtual ~NetProto_GetKeyGift();
  
  NetProto_GetKeyGift(const NetProto_GetKeyGift& from);
  
  inline NetProto_GetKeyGift& operator=(const NetProto_GetKeyGift& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GetKeyGift& default_instance();
  
  void Swap(NetProto_GetKeyGift* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GetKeyGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GetKeyGift& from);
  void MergeFrom(const NetProto_GetKeyGift& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GetKeyGift_ID ID;
  static const ID GROUPID = NetProto_GetKeyGift_ID_GROUPID;
  static const ID UNITID = NetProto_GetKeyGift_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GetKeyGift_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GetKeyGift_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GetKeyGift_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GetKeyGift_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GetKeyGift_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GetKeyGift_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GetKeyGift_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional int32 res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GetKeyGift)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::google::protobuf::int32 res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GetKeyGift* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_StatisticsUIBtn : public ::google::protobuf::Message {
 public:
  NetProto_StatisticsUIBtn();
  virtual ~NetProto_StatisticsUIBtn();
  
  NetProto_StatisticsUIBtn(const NetProto_StatisticsUIBtn& from);
  
  inline NetProto_StatisticsUIBtn& operator=(const NetProto_StatisticsUIBtn& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_StatisticsUIBtn& default_instance();
  
  void Swap(NetProto_StatisticsUIBtn* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_StatisticsUIBtn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_StatisticsUIBtn& from);
  void MergeFrom(const NetProto_StatisticsUIBtn& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_StatisticsUIBtn_ID ID;
  static const ID GROUPID = NetProto_StatisticsUIBtn_ID_GROUPID;
  static const ID UNITID = NetProto_StatisticsUIBtn_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_StatisticsUIBtn_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_StatisticsUIBtn_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_StatisticsUIBtn_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_StatisticsUIBtn_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_StatisticsUIBtn_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_StatisticsUIBtn_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_StatisticsUIBtn_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string ui = 1;
  inline bool has_ui() const;
  inline void clear_ui();
  static const int kUiFieldNumber = 1;
  inline const ::std::string& ui() const;
  inline void set_ui(const ::std::string& value);
  inline void set_ui(const char* value);
  inline void set_ui(const char* value, size_t size);
  inline ::std::string* mutable_ui();
  inline ::std::string* release_ui();
  
  // optional int32 btn = 2;
  inline bool has_btn() const;
  inline void clear_btn();
  static const int kBtnFieldNumber = 2;
  inline ::google::protobuf::int32 btn() const;
  inline void set_btn(::google::protobuf::int32 value);
  
  // optional string param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  
  // @@protoc_insertion_point(class_scope:NetProto_StatisticsUIBtn)
 private:
  inline void set_has_ui();
  inline void clear_has_ui();
  inline void set_has_btn();
  inline void clear_has_btn();
  inline void set_has_param();
  inline void clear_has_param();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ui_;
  ::std::string* param_;
  ::google::protobuf::int32 btn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_StatisticsUIBtn* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_StatisticsGuide : public ::google::protobuf::Message {
 public:
  NetProto_StatisticsGuide();
  virtual ~NetProto_StatisticsGuide();
  
  NetProto_StatisticsGuide(const NetProto_StatisticsGuide& from);
  
  inline NetProto_StatisticsGuide& operator=(const NetProto_StatisticsGuide& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_StatisticsGuide& default_instance();
  
  void Swap(NetProto_StatisticsGuide* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_StatisticsGuide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_StatisticsGuide& from);
  void MergeFrom(const NetProto_StatisticsGuide& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_StatisticsGuide_ID ID;
  static const ID GROUPID = NetProto_StatisticsGuide_ID_GROUPID;
  static const ID UNITID = NetProto_StatisticsGuide_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_StatisticsGuide_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_StatisticsGuide_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_StatisticsGuide_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_StatisticsGuide_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_StatisticsGuide_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_StatisticsGuide_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_StatisticsGuide_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 pass = 1;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 1;
  inline ::google::protobuf::int32 pass() const;
  inline void set_pass(::google::protobuf::int32 value);
  
  // optional int32 node = 2;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 2;
  inline ::google::protobuf::int32 node() const;
  inline void set_node(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_StatisticsGuide)
 private:
  inline void set_has_pass();
  inline void clear_has_pass();
  inline void set_has_node();
  inline void clear_has_node();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pass_;
  ::google::protobuf::int32 node_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_StatisticsGuide* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_LoginLaterTime : public ::google::protobuf::Message {
 public:
  NetProto_LoginLaterTime();
  virtual ~NetProto_LoginLaterTime();
  
  NetProto_LoginLaterTime(const NetProto_LoginLaterTime& from);
  
  inline NetProto_LoginLaterTime& operator=(const NetProto_LoginLaterTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_LoginLaterTime& default_instance();
  
  void Swap(NetProto_LoginLaterTime* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_LoginLaterTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_LoginLaterTime& from);
  void MergeFrom(const NetProto_LoginLaterTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_LoginLaterTime_ID ID;
  static const ID GROUPID = NetProto_LoginLaterTime_ID_GROUPID;
  static const ID UNITID = NetProto_LoginLaterTime_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_LoginLaterTime_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_LoginLaterTime_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_LoginLaterTime_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_LoginLaterTime_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_LoginLaterTime_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_LoginLaterTime_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_LoginLaterTime_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_LoginLaterTime)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_LoginLaterTime* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_TencentBuyGoodsUrl : public ::google::protobuf::Message {
 public:
  NetProto_TencentBuyGoodsUrl();
  virtual ~NetProto_TencentBuyGoodsUrl();
  
  NetProto_TencentBuyGoodsUrl(const NetProto_TencentBuyGoodsUrl& from);
  
  inline NetProto_TencentBuyGoodsUrl& operator=(const NetProto_TencentBuyGoodsUrl& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_TencentBuyGoodsUrl& default_instance();
  
  void Swap(NetProto_TencentBuyGoodsUrl* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_TencentBuyGoodsUrl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_TencentBuyGoodsUrl& from);
  void MergeFrom(const NetProto_TencentBuyGoodsUrl& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_TencentBuyGoodsUrl_ID ID;
  static const ID GROUPID = NetProto_TencentBuyGoodsUrl_ID_GROUPID;
  static const ID UNITID = NetProto_TencentBuyGoodsUrl_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_TencentBuyGoodsUrl_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_TencentBuyGoodsUrl_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_TencentBuyGoodsUrl_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_TencentBuyGoodsUrl_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_TencentBuyGoodsUrl_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_TencentBuyGoodsUrl_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_TencentBuyGoodsUrl_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string payitem = 1;
  inline bool has_payitem() const;
  inline void clear_payitem();
  static const int kPayitemFieldNumber = 1;
  inline const ::std::string& payitem() const;
  inline void set_payitem(const ::std::string& value);
  inline void set_payitem(const char* value);
  inline void set_payitem(const char* value, size_t size);
  inline ::std::string* mutable_payitem();
  inline ::std::string* release_payitem();
  
  // optional string goodsmeta = 2;
  inline bool has_goodsmeta() const;
  inline void clear_goodsmeta();
  static const int kGoodsmetaFieldNumber = 2;
  inline const ::std::string& goodsmeta() const;
  inline void set_goodsmeta(const ::std::string& value);
  inline void set_goodsmeta(const char* value);
  inline void set_goodsmeta(const char* value, size_t size);
  inline ::std::string* mutable_goodsmeta();
  inline ::std::string* release_goodsmeta();
  
  // optional string goodsurl = 3;
  inline bool has_goodsurl() const;
  inline void clear_goodsurl();
  static const int kGoodsurlFieldNumber = 3;
  inline const ::std::string& goodsurl() const;
  inline void set_goodsurl(const ::std::string& value);
  inline void set_goodsurl(const char* value);
  inline void set_goodsurl(const char* value, size_t size);
  inline ::std::string* mutable_goodsurl();
  inline ::std::string* release_goodsurl();
  
  // optional string appmetadata = 4;
  inline bool has_appmetadata() const;
  inline void clear_appmetadata();
  static const int kAppmetadataFieldNumber = 4;
  inline const ::std::string& appmetadata() const;
  inline void set_appmetadata(const ::std::string& value);
  inline void set_appmetadata(const char* value);
  inline void set_appmetadata(const char* value, size_t size);
  inline ::std::string* mutable_appmetadata();
  inline ::std::string* release_appmetadata();
  
  // optional string url = 5;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 5;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // optional string amt = 6;
  inline bool has_amt() const;
  inline void clear_amt();
  static const int kAmtFieldNumber = 6;
  inline const ::std::string& amt() const;
  inline void set_amt(const ::std::string& value);
  inline void set_amt(const char* value);
  inline void set_amt(const char* value, size_t size);
  inline ::std::string* mutable_amt();
  inline ::std::string* release_amt();
  
  // @@protoc_insertion_point(class_scope:NetProto_TencentBuyGoodsUrl)
 private:
  inline void set_has_payitem();
  inline void clear_has_payitem();
  inline void set_has_goodsmeta();
  inline void clear_has_goodsmeta();
  inline void set_has_goodsurl();
  inline void clear_has_goodsurl();
  inline void set_has_appmetadata();
  inline void clear_has_appmetadata();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_amt();
  inline void clear_has_amt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* payitem_;
  ::std::string* goodsmeta_;
  ::std::string* goodsurl_;
  ::std::string* appmetadata_;
  ::std::string* url_;
  ::std::string* amt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_TencentBuyGoodsUrl* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_LoginURL : public ::google::protobuf::Message {
 public:
  NetProto_LoginURL();
  virtual ~NetProto_LoginURL();
  
  NetProto_LoginURL(const NetProto_LoginURL& from);
  
  inline NetProto_LoginURL& operator=(const NetProto_LoginURL& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_LoginURL& default_instance();
  
  void Swap(NetProto_LoginURL* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_LoginURL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_LoginURL& from);
  void MergeFrom(const NetProto_LoginURL& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_LoginURL_ID ID;
  static const ID GROUPID = NetProto_LoginURL_ID_GROUPID;
  static const ID UNITID = NetProto_LoginURL_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_LoginURL_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_LoginURL_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_LoginURL_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_LoginURL_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_LoginURL_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_LoginURL_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_LoginURL_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_LoginURL)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* url_;
  ::google::protobuf::int32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_LoginURL* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RechargeParam : public ::google::protobuf::Message {
 public:
  NetProto_RechargeParam();
  virtual ~NetProto_RechargeParam();
  
  NetProto_RechargeParam(const NetProto_RechargeParam& from);
  
  inline NetProto_RechargeParam& operator=(const NetProto_RechargeParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RechargeParam& default_instance();
  
  void Swap(NetProto_RechargeParam* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RechargeParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RechargeParam& from);
  void MergeFrom(const NetProto_RechargeParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RechargeParam_ID ID;
  static const ID GROUPID = NetProto_RechargeParam_ID_GROUPID;
  static const ID UNITID = NetProto_RechargeParam_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RechargeParam_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RechargeParam_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RechargeParam_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RechargeParam_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RechargeParam_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RechargeParam_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RechargeParam_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string param = 1;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  
  // optional float v = 2;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 2;
  inline float v() const;
  inline void set_v(float value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RechargeParam)
 private:
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_v();
  inline void clear_has_v();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* param_;
  float v_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RechargeParam* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddPlayers : public ::google::protobuf::Message {
 public:
  NetProto_AddPlayers();
  virtual ~NetProto_AddPlayers();
  
  NetProto_AddPlayers(const NetProto_AddPlayers& from);
  
  inline NetProto_AddPlayers& operator=(const NetProto_AddPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddPlayers& default_instance();
  
  void Swap(NetProto_AddPlayers* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddPlayers& from);
  void MergeFrom(const NetProto_AddPlayers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddPlayers_ID ID;
  static const ID GROUPID = NetProto_AddPlayers_ID_GROUPID;
  static const ID UNITID = NetProto_AddPlayers_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddPlayers_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddPlayers_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddPlayers_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddPlayers_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddPlayers_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddPlayers_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddPlayers_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();
  
  // repeated .PB_PlayerAtt att = 2;
  inline int att_size() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline const ::PB_PlayerAtt& att(int index) const;
  inline ::PB_PlayerAtt* mutable_att(int index);
  inline ::PB_PlayerAtt* add_att();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
      att() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
      mutable_att();
  
  // repeated int32 type = 3;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type(int index) const;
  inline void set_type(int index, ::google::protobuf::int32 value);
  inline void add_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_type();
  
  // @@protoc_insertion_point(class_scope:NetProto_AddPlayers)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt > att_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddPlayers* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_LoadScene : public ::google::protobuf::Message {
 public:
  NetProto_LoadScene();
  virtual ~NetProto_LoadScene();
  
  NetProto_LoadScene(const NetProto_LoadScene& from);
  
  inline NetProto_LoadScene& operator=(const NetProto_LoadScene& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_LoadScene& default_instance();
  
  void Swap(NetProto_LoadScene* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_LoadScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_LoadScene& from);
  void MergeFrom(const NetProto_LoadScene& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_LoadScene_ID ID;
  static const ID GROUPID = NetProto_LoadScene_ID_GROUPID;
  static const ID UNITID = NetProto_LoadScene_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_LoadScene_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_LoadScene_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_LoadScene_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_LoadScene_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_LoadScene_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_LoadScene_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_LoadScene_ID_Parse(name, value);
  }
  
  typedef NetProto_LoadScene_Type Type;
  static const Type NORMAL = NetProto_LoadScene_Type_NORMAL;
  static const Type JUMP = NetProto_LoadScene_Type_JUMP;
  static const Type LEAVE = NetProto_LoadScene_Type_LEAVE;
  static inline bool Type_IsValid(int value) {
    return NetProto_LoadScene_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_LoadScene_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_LoadScene_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_LoadScene_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_LoadScene_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_LoadScene_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_LoadScene_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_LoadScene.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_LoadScene_Type type() const;
  inline void set_type(::NetProto_LoadScene_Type value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // optional int32 gemRecover = 4;
  inline bool has_gemRecover() const;
  inline void clear_gemRecover();
  static const int kGemRecoverFieldNumber = 4;
  inline ::google::protobuf::int32 gemRecover() const;
  inline void set_gemRecover(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_LoadScene)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_gemRecover();
  inline void clear_has_gemRecover();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 gemRecover_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_LoadScene* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DoLoadScene : public ::google::protobuf::Message {
 public:
  NetProto_DoLoadScene();
  virtual ~NetProto_DoLoadScene();
  
  NetProto_DoLoadScene(const NetProto_DoLoadScene& from);
  
  inline NetProto_DoLoadScene& operator=(const NetProto_DoLoadScene& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DoLoadScene& default_instance();
  
  void Swap(NetProto_DoLoadScene* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DoLoadScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DoLoadScene& from);
  void MergeFrom(const NetProto_DoLoadScene& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DoLoadScene_ID ID;
  static const ID GROUPID = NetProto_DoLoadScene_ID_GROUPID;
  static const ID UNITID = NetProto_DoLoadScene_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DoLoadScene_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DoLoadScene_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DoLoadScene_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DoLoadScene_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DoLoadScene_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DoLoadScene_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DoLoadScene_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 mapID = 2;
  inline bool has_mapID() const;
  inline void clear_mapID();
  static const int kMapIDFieldNumber = 2;
  inline ::google::protobuf::int32 mapID() const;
  inline void set_mapID(::google::protobuf::int32 value);
  
  // optional .PB_Vector2i coord = 3;
  inline bool has_coord() const;
  inline void clear_coord();
  static const int kCoordFieldNumber = 3;
  inline const ::PB_Vector2i& coord() const;
  inline ::PB_Vector2i* mutable_coord();
  inline ::PB_Vector2i* release_coord();
  
  // optional bool multipleRoom = 4;
  inline bool has_multipleRoom() const;
  inline void clear_multipleRoom();
  static const int kMultipleRoomFieldNumber = 4;
  inline bool multipleRoom() const;
  inline void set_multipleRoom(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DoLoadScene)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapID();
  inline void clear_has_mapID();
  inline void set_has_coord();
  inline void clear_has_coord();
  inline void set_has_multipleRoom();
  inline void clear_has_multipleRoom();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mapID_;
  ::PB_Vector2i* coord_;
  bool multipleRoom_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DoLoadScene* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_EndLoadScene : public ::google::protobuf::Message {
 public:
  NetProto_EndLoadScene();
  virtual ~NetProto_EndLoadScene();
  
  NetProto_EndLoadScene(const NetProto_EndLoadScene& from);
  
  inline NetProto_EndLoadScene& operator=(const NetProto_EndLoadScene& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_EndLoadScene& default_instance();
  
  void Swap(NetProto_EndLoadScene* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_EndLoadScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_EndLoadScene& from);
  void MergeFrom(const NetProto_EndLoadScene& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_EndLoadScene_ID ID;
  static const ID GROUPID = NetProto_EndLoadScene_ID_GROUPID;
  static const ID UNITID = NetProto_EndLoadScene_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_EndLoadScene_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_EndLoadScene_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_EndLoadScene_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_EndLoadScene_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_EndLoadScene_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_EndLoadScene_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_EndLoadScene_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_EndLoadScene)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_EndLoadScene* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddNPCs : public ::google::protobuf::Message {
 public:
  NetProto_AddNPCs();
  virtual ~NetProto_AddNPCs();
  
  NetProto_AddNPCs(const NetProto_AddNPCs& from);
  
  inline NetProto_AddNPCs& operator=(const NetProto_AddNPCs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddNPCs& default_instance();
  
  void Swap(NetProto_AddNPCs* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddNPCs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddNPCs& from);
  void MergeFrom(const NetProto_AddNPCs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddNPCs_ID ID;
  static const ID GROUPID = NetProto_AddNPCs_ID_GROUPID;
  static const ID UNITID = NetProto_AddNPCs_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddNPCs_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddNPCs_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddNPCs_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddNPCs_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddNPCs_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddNPCs_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddNPCs_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();
  
  // repeated .PB_NPCAtt att = 2;
  inline int att_size() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline const ::PB_NPCAtt& att(int index) const;
  inline ::PB_NPCAtt* mutable_att(int index);
  inline ::PB_NPCAtt* add_att();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >&
      att() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >*
      mutable_att();
  
  // @@protoc_insertion_point(class_scope:NetProto_AddNPCs)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt > att_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddNPCs* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ClearRoom : public ::google::protobuf::Message {
 public:
  NetProto_ClearRoom();
  virtual ~NetProto_ClearRoom();
  
  NetProto_ClearRoom(const NetProto_ClearRoom& from);
  
  inline NetProto_ClearRoom& operator=(const NetProto_ClearRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ClearRoom& default_instance();
  
  void Swap(NetProto_ClearRoom* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ClearRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ClearRoom& from);
  void MergeFrom(const NetProto_ClearRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ClearRoom_ID ID;
  static const ID GROUPID = NetProto_ClearRoom_ID_GROUPID;
  static const ID UNITID = NetProto_ClearRoom_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ClearRoom_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ClearRoom_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ClearRoom_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ClearRoom_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ClearRoom_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ClearRoom_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ClearRoom_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 totalTime = 1;
  inline bool has_totalTime() const;
  inline void clear_totalTime();
  static const int kTotalTimeFieldNumber = 1;
  inline ::google::protobuf::int32 totalTime() const;
  inline void set_totalTime(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional string md5 = 4;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 4;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  
  // optional int32 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 money = 6;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);
  
  // optional int32 honor = 7;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 7;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);
  
  // optional int32 godScore = 8;
  inline bool has_godScore() const;
  inline void clear_godScore();
  static const int kGodScoreFieldNumber = 8;
  inline ::google::protobuf::int32 godScore() const;
  inline void set_godScore(::google::protobuf::int32 value);
  
  // optional int32 upRank = 9;
  inline bool has_upRank() const;
  inline void clear_upRank();
  static const int kUpRankFieldNumber = 9;
  inline ::google::protobuf::int32 upRank() const;
  inline void set_upRank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ClearRoom)
 private:
  inline void set_has_totalTime();
  inline void clear_has_totalTime();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_godScore();
  inline void clear_has_godScore();
  inline void set_has_upRank();
  inline void clear_has_upRank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 totalTime_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int64 time_;
  ::std::string* md5_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 honor_;
  ::google::protobuf::int32 godScore_;
  ::google::protobuf::int32 upRank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ClearRoom* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_OpenRoomBox : public ::google::protobuf::Message {
 public:
  NetProto_OpenRoomBox();
  virtual ~NetProto_OpenRoomBox();
  
  NetProto_OpenRoomBox(const NetProto_OpenRoomBox& from);
  
  inline NetProto_OpenRoomBox& operator=(const NetProto_OpenRoomBox& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_OpenRoomBox& default_instance();
  
  void Swap(NetProto_OpenRoomBox* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_OpenRoomBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_OpenRoomBox& from);
  void MergeFrom(const NetProto_OpenRoomBox& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_OpenRoomBox_ID ID;
  static const ID GROUPID = NetProto_OpenRoomBox_ID_GROUPID;
  static const ID UNITID = NetProto_OpenRoomBox_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_OpenRoomBox_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_OpenRoomBox_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_OpenRoomBox_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_OpenRoomBox_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_OpenRoomBox_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_OpenRoomBox_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_OpenRoomBox_ID_Parse(name, value);
  }
  
  typedef NetProto_OpenRoomBox_Type Type;
  static const Type FREE = NetProto_OpenRoomBox_Type_FREE;
  static const Type GEM = NetProto_OpenRoomBox_Type_GEM;
  static inline bool Type_IsValid(int value) {
    return NetProto_OpenRoomBox_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_OpenRoomBox_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_OpenRoomBox_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_OpenRoomBox_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_OpenRoomBox_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_OpenRoomBox_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_OpenRoomBox_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_OpenRoomBox.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_OpenRoomBox_Type type() const;
  inline void set_type(::NetProto_OpenRoomBox_Type value);
  
  // repeated int32 result = 2;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result(int index) const;
  inline void set_result(int index, ::google::protobuf::int32 value);
  inline void add_result(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      result() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_result();
  
  // @@protoc_insertion_point(class_scope:NetProto_OpenRoomBox)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > result_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_OpenRoomBox* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BeginWaitRoom : public ::google::protobuf::Message {
 public:
  NetProto_BeginWaitRoom();
  virtual ~NetProto_BeginWaitRoom();
  
  NetProto_BeginWaitRoom(const NetProto_BeginWaitRoom& from);
  
  inline NetProto_BeginWaitRoom& operator=(const NetProto_BeginWaitRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BeginWaitRoom& default_instance();
  
  void Swap(NetProto_BeginWaitRoom* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BeginWaitRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BeginWaitRoom& from);
  void MergeFrom(const NetProto_BeginWaitRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BeginWaitRoom_ID ID;
  static const ID GROUPID = NetProto_BeginWaitRoom_ID_GROUPID;
  static const ID UNITID = NetProto_BeginWaitRoom_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BeginWaitRoom_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BeginWaitRoom_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BeginWaitRoom_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BeginWaitRoom_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BeginWaitRoom_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BeginWaitRoom_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BeginWaitRoom_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 map = 1;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 1;
  inline ::google::protobuf::int32 map() const;
  inline void set_map(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_BeginWaitRoom)
 private:
  inline void set_has_map();
  inline void clear_has_map();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 map_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BeginWaitRoom* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_EndWaitRoom : public ::google::protobuf::Message {
 public:
  NetProto_EndWaitRoom();
  virtual ~NetProto_EndWaitRoom();
  
  NetProto_EndWaitRoom(const NetProto_EndWaitRoom& from);
  
  inline NetProto_EndWaitRoom& operator=(const NetProto_EndWaitRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_EndWaitRoom& default_instance();
  
  void Swap(NetProto_EndWaitRoom* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_EndWaitRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_EndWaitRoom& from);
  void MergeFrom(const NetProto_EndWaitRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_EndWaitRoom_ID ID;
  static const ID GROUPID = NetProto_EndWaitRoom_ID_GROUPID;
  static const ID UNITID = NetProto_EndWaitRoom_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_EndWaitRoom_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_EndWaitRoom_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_EndWaitRoom_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_EndWaitRoom_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_EndWaitRoom_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_EndWaitRoom_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_EndWaitRoom_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_EndWaitRoom)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_EndWaitRoom* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GenNPCs : public ::google::protobuf::Message {
 public:
  NetProto_GenNPCs();
  virtual ~NetProto_GenNPCs();
  
  NetProto_GenNPCs(const NetProto_GenNPCs& from);
  
  inline NetProto_GenNPCs& operator=(const NetProto_GenNPCs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GenNPCs& default_instance();
  
  void Swap(NetProto_GenNPCs* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GenNPCs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GenNPCs& from);
  void MergeFrom(const NetProto_GenNPCs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GenNPCs_ID ID;
  static const ID GROUPID = NetProto_GenNPCs_ID_GROUPID;
  static const ID UNITID = NetProto_GenNPCs_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GenNPCs_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GenNPCs_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GenNPCs_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GenNPCs_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GenNPCs_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GenNPCs_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GenNPCs_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 group = 1;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 1;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);
  
  // optional int32 pass = 2;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 2;
  inline ::google::protobuf::int32 pass() const;
  inline void set_pass(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GenNPCs)
 private:
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_pass();
  inline void clear_has_pass();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 pass_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GenNPCs* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ResetEvent : public ::google::protobuf::Message {
 public:
  NetProto_ResetEvent();
  virtual ~NetProto_ResetEvent();
  
  NetProto_ResetEvent(const NetProto_ResetEvent& from);
  
  inline NetProto_ResetEvent& operator=(const NetProto_ResetEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ResetEvent& default_instance();
  
  void Swap(NetProto_ResetEvent* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ResetEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ResetEvent& from);
  void MergeFrom(const NetProto_ResetEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ResetEvent_ID ID;
  static const ID GROUPID = NetProto_ResetEvent_ID_GROUPID;
  static const ID UNITID = NetProto_ResetEvent_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ResetEvent_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ResetEvent_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ResetEvent_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ResetEvent_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ResetEvent_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ResetEvent_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ResetEvent_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional bool monday = 1;
  inline bool has_monday() const;
  inline void clear_monday();
  static const int kMondayFieldNumber = 1;
  inline bool monday() const;
  inline void set_monday(bool value);
  
  // optional bool resetCome = 2;
  inline bool has_resetCome() const;
  inline void clear_resetCome();
  static const int kResetComeFieldNumber = 2;
  inline bool resetCome() const;
  inline void set_resetCome(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ResetEvent)
 private:
  inline void set_has_monday();
  inline void clear_has_monday();
  inline void set_has_resetCome();
  inline void clear_has_resetCome();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool monday_;
  bool resetCome_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ResetEvent* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_QuickFight : public ::google::protobuf::Message {
 public:
  NetProto_QuickFight();
  virtual ~NetProto_QuickFight();
  
  NetProto_QuickFight(const NetProto_QuickFight& from);
  
  inline NetProto_QuickFight& operator=(const NetProto_QuickFight& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_QuickFight& default_instance();
  
  void Swap(NetProto_QuickFight* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_QuickFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_QuickFight& from);
  void MergeFrom(const NetProto_QuickFight& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_QuickFight_ID ID;
  static const ID GROUPID = NetProto_QuickFight_ID_GROUPID;
  static const ID UNITID = NetProto_QuickFight_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_QuickFight_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_QuickFight_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_QuickFight_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_QuickFight_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_QuickFight_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_QuickFight_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_QuickFight_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 map = 1;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 1;
  inline ::google::protobuf::int32 map() const;
  inline void set_map(::google::protobuf::int32 value);
  
  // repeated .NetProto_GetRes res = 2;
  inline int res_size() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline const ::NetProto_GetRes& res(int index) const;
  inline ::NetProto_GetRes* mutable_res(int index);
  inline ::NetProto_GetRes* add_res();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GetRes >&
      res() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_GetRes >*
      mutable_res();
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_QuickFight)
 private:
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NetProto_GetRes > res_;
  ::google::protobuf::int32 map_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_QuickFight* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Win : public ::google::protobuf::Message {
 public:
  NetProto_Win();
  virtual ~NetProto_Win();
  
  NetProto_Win(const NetProto_Win& from);
  
  inline NetProto_Win& operator=(const NetProto_Win& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Win& default_instance();
  
  void Swap(NetProto_Win* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Win* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Win& from);
  void MergeFrom(const NetProto_Win& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Win_ID ID;
  static const ID GROUPID = NetProto_Win_ID_GROUPID;
  static const ID UNITID = NetProto_Win_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Win_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Win_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Win_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Win_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Win_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Win_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Win_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 honor = 1;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 1;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);
  
  // optional int32 pvpScore = 2;
  inline bool has_pvpScore() const;
  inline void clear_pvpScore();
  static const int kPvpScoreFieldNumber = 2;
  inline ::google::protobuf::int32 pvpScore() const;
  inline void set_pvpScore(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Win)
 private:
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_pvpScore();
  inline void clear_has_pvpScore();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 honor_;
  ::google::protobuf::int32 pvpScore_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Win* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Lose : public ::google::protobuf::Message {
 public:
  NetProto_Lose();
  virtual ~NetProto_Lose();
  
  NetProto_Lose(const NetProto_Lose& from);
  
  inline NetProto_Lose& operator=(const NetProto_Lose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Lose& default_instance();
  
  void Swap(NetProto_Lose* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Lose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Lose& from);
  void MergeFrom(const NetProto_Lose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Lose_ID ID;
  static const ID GROUPID = NetProto_Lose_ID_GROUPID;
  static const ID UNITID = NetProto_Lose_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Lose_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Lose_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Lose_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Lose_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Lose_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Lose_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Lose_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_Lose)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Lose* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Timeout : public ::google::protobuf::Message {
 public:
  NetProto_Timeout();
  virtual ~NetProto_Timeout();
  
  NetProto_Timeout(const NetProto_Timeout& from);
  
  inline NetProto_Timeout& operator=(const NetProto_Timeout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Timeout& default_instance();
  
  void Swap(NetProto_Timeout* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Timeout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Timeout& from);
  void MergeFrom(const NetProto_Timeout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Timeout_ID ID;
  static const ID GROUPID = NetProto_Timeout_ID_GROUPID;
  static const ID UNITID = NetProto_Timeout_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Timeout_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Timeout_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Timeout_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Timeout_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Timeout_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Timeout_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Timeout_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_Timeout)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Timeout* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BeginWaitPVP : public ::google::protobuf::Message {
 public:
  NetProto_BeginWaitPVP();
  virtual ~NetProto_BeginWaitPVP();
  
  NetProto_BeginWaitPVP(const NetProto_BeginWaitPVP& from);
  
  inline NetProto_BeginWaitPVP& operator=(const NetProto_BeginWaitPVP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BeginWaitPVP& default_instance();
  
  void Swap(NetProto_BeginWaitPVP* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BeginWaitPVP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BeginWaitPVP& from);
  void MergeFrom(const NetProto_BeginWaitPVP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BeginWaitPVP_ID ID;
  static const ID GROUPID = NetProto_BeginWaitPVP_ID_GROUPID;
  static const ID UNITID = NetProto_BeginWaitPVP_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BeginWaitPVP_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BeginWaitPVP_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BeginWaitPVP_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BeginWaitPVP_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BeginWaitPVP_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BeginWaitPVP_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BeginWaitPVP_ID_Parse(name, value);
  }
  
  typedef NetProto_BeginWaitPVP_Type Type;
  static const Type ONE_TO_ONE = NetProto_BeginWaitPVP_Type_ONE_TO_ONE;
  static const Type HELL = NetProto_BeginWaitPVP_Type_HELL;
  static inline bool Type_IsValid(int value) {
    return NetProto_BeginWaitPVP_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_BeginWaitPVP_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_BeginWaitPVP_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_BeginWaitPVP_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_BeginWaitPVP_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_BeginWaitPVP_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_BeginWaitPVP_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_BeginWaitPVP.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_BeginWaitPVP_Type type() const;
  inline void set_type(::NetProto_BeginWaitPVP_Type value);
  
  // optional bool res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline bool res() const;
  inline void set_res(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_BeginWaitPVP)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  bool res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BeginWaitPVP* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_EndWaitPVP : public ::google::protobuf::Message {
 public:
  NetProto_EndWaitPVP();
  virtual ~NetProto_EndWaitPVP();
  
  NetProto_EndWaitPVP(const NetProto_EndWaitPVP& from);
  
  inline NetProto_EndWaitPVP& operator=(const NetProto_EndWaitPVP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_EndWaitPVP& default_instance();
  
  void Swap(NetProto_EndWaitPVP* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_EndWaitPVP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_EndWaitPVP& from);
  void MergeFrom(const NetProto_EndWaitPVP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_EndWaitPVP_ID ID;
  static const ID GROUPID = NetProto_EndWaitPVP_ID_GROUPID;
  static const ID UNITID = NetProto_EndWaitPVP_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_EndWaitPVP_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_EndWaitPVP_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_EndWaitPVP_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_EndWaitPVP_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_EndWaitPVP_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_EndWaitPVP_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_EndWaitPVP_ID_Parse(name, value);
  }
  
  typedef NetProto_EndWaitPVP_Type Type;
  static const Type ONE_TO_ONE = NetProto_EndWaitPVP_Type_ONE_TO_ONE;
  static const Type HELL = NetProto_EndWaitPVP_Type_HELL;
  static inline bool Type_IsValid(int value) {
    return NetProto_EndWaitPVP_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_EndWaitPVP_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_EndWaitPVP_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_EndWaitPVP_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_EndWaitPVP_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_EndWaitPVP_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_EndWaitPVP_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_EndWaitPVP.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_EndWaitPVP_Type type() const;
  inline void set_type(::NetProto_EndWaitPVP_Type value);
  
  // @@protoc_insertion_point(class_scope:NetProto_EndWaitPVP)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_EndWaitPVP* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Lottery : public ::google::protobuf::Message {
 public:
  NetProto_Lottery();
  virtual ~NetProto_Lottery();
  
  NetProto_Lottery(const NetProto_Lottery& from);
  
  inline NetProto_Lottery& operator=(const NetProto_Lottery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Lottery& default_instance();
  
  void Swap(NetProto_Lottery* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Lottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Lottery& from);
  void MergeFrom(const NetProto_Lottery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Lottery_ID ID;
  static const ID GROUPID = NetProto_Lottery_ID_GROUPID;
  static const ID UNITID = NetProto_Lottery_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Lottery_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Lottery_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Lottery_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Lottery_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Lottery_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Lottery_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Lottery_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Lottery)
 private:
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Lottery* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GetGift : public ::google::protobuf::Message {
 public:
  NetProto_GetGift();
  virtual ~NetProto_GetGift();
  
  NetProto_GetGift(const NetProto_GetGift& from);
  
  inline NetProto_GetGift& operator=(const NetProto_GetGift& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GetGift& default_instance();
  
  void Swap(NetProto_GetGift* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GetGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GetGift& from);
  void MergeFrom(const NetProto_GetGift& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GetGift_ID ID;
  static const ID GROUPID = NetProto_GetGift_ID_GROUPID;
  static const ID UNITID = NetProto_GetGift_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GetGift_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GetGift_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GetGift_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GetGift_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GetGift_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GetGift_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GetGift_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .AwardInfo.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::AwardInfo_Type type() const;
  inline void set_type(::AwardInfo_Type value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 arg = 3;
  inline bool has_arg() const;
  inline void clear_arg();
  static const int kArgFieldNumber = 3;
  inline ::google::protobuf::int32 arg() const;
  inline void set_arg(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GetGift)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_arg();
  inline void clear_has_arg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 arg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GetGift* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SingleRecord : public ::google::protobuf::Message {
 public:
  NetProto_SingleRecord();
  virtual ~NetProto_SingleRecord();
  
  NetProto_SingleRecord(const NetProto_SingleRecord& from);
  
  inline NetProto_SingleRecord& operator=(const NetProto_SingleRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SingleRecord& default_instance();
  
  void Swap(NetProto_SingleRecord* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SingleRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SingleRecord& from);
  void MergeFrom(const NetProto_SingleRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SingleRecord_ID ID;
  static const ID GROUPID = NetProto_SingleRecord_ID_GROUPID;
  static const ID UNITID = NetProto_SingleRecord_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SingleRecord_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SingleRecord_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SingleRecord_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SingleRecord_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SingleRecord_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SingleRecord_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SingleRecord_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 mapID = 1;
  inline bool has_mapID() const;
  inline void clear_mapID();
  static const int kMapIDFieldNumber = 1;
  inline ::google::protobuf::int32 mapID() const;
  inline void set_mapID(::google::protobuf::int32 value);
  
  // optional .RecordInfo record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::RecordInfo& record() const;
  inline ::RecordInfo* mutable_record();
  inline ::RecordInfo* release_record();
  
  // @@protoc_insertion_point(class_scope:NetProto_SingleRecord)
 private:
  inline void set_has_mapID();
  inline void clear_has_mapID();
  inline void set_has_record();
  inline void clear_has_record();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::RecordInfo* record_;
  ::google::protobuf::int32 mapID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SingleRecord* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_EndLoadModel : public ::google::protobuf::Message {
 public:
  NetProto_EndLoadModel();
  virtual ~NetProto_EndLoadModel();
  
  NetProto_EndLoadModel(const NetProto_EndLoadModel& from);
  
  inline NetProto_EndLoadModel& operator=(const NetProto_EndLoadModel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_EndLoadModel& default_instance();
  
  void Swap(NetProto_EndLoadModel* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_EndLoadModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_EndLoadModel& from);
  void MergeFrom(const NetProto_EndLoadModel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_EndLoadModel_ID ID;
  static const ID GROUPID = NetProto_EndLoadModel_ID_GROUPID;
  static const ID UNITID = NetProto_EndLoadModel_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_EndLoadModel_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_EndLoadModel_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_EndLoadModel_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_EndLoadModel_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_EndLoadModel_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_EndLoadModel_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_EndLoadModel_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_EndLoadModel)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_EndLoadModel* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RoomWaitCount : public ::google::protobuf::Message {
 public:
  NetProto_RoomWaitCount();
  virtual ~NetProto_RoomWaitCount();
  
  NetProto_RoomWaitCount(const NetProto_RoomWaitCount& from);
  
  inline NetProto_RoomWaitCount& operator=(const NetProto_RoomWaitCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RoomWaitCount& default_instance();
  
  void Swap(NetProto_RoomWaitCount* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RoomWaitCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RoomWaitCount& from);
  void MergeFrom(const NetProto_RoomWaitCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RoomWaitCount_ID ID;
  static const ID GROUPID = NetProto_RoomWaitCount_ID_GROUPID;
  static const ID UNITID = NetProto_RoomWaitCount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RoomWaitCount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RoomWaitCount_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RoomWaitCount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RoomWaitCount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RoomWaitCount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RoomWaitCount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RoomWaitCount_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 room = 1;
  inline bool has_room() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline ::google::protobuf::int32 room() const;
  inline void set_room(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RoomWaitCount)
 private:
  inline void set_has_room();
  inline void clear_has_room();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 room_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RoomWaitCount* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PVPWaitCount : public ::google::protobuf::Message {
 public:
  NetProto_PVPWaitCount();
  virtual ~NetProto_PVPWaitCount();
  
  NetProto_PVPWaitCount(const NetProto_PVPWaitCount& from);
  
  inline NetProto_PVPWaitCount& operator=(const NetProto_PVPWaitCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PVPWaitCount& default_instance();
  
  void Swap(NetProto_PVPWaitCount* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PVPWaitCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PVPWaitCount& from);
  void MergeFrom(const NetProto_PVPWaitCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PVPWaitCount_ID ID;
  static const ID GROUPID = NetProto_PVPWaitCount_ID_GROUPID;
  static const ID UNITID = NetProto_PVPWaitCount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PVPWaitCount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PVPWaitCount_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PVPWaitCount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PVPWaitCount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PVPWaitCount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PVPWaitCount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PVPWaitCount_ID_Parse(name, value);
  }
  
  typedef NetProto_PVPWaitCount_Type Type;
  static const Type ONE_TO_ONE = NetProto_PVPWaitCount_Type_ONE_TO_ONE;
  static const Type HELL = NetProto_PVPWaitCount_Type_HELL;
  static inline bool Type_IsValid(int value) {
    return NetProto_PVPWaitCount_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_PVPWaitCount_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_PVPWaitCount_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_PVPWaitCount_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_PVPWaitCount_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_PVPWaitCount_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_PVPWaitCount_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_PVPWaitCount.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_PVPWaitCount_Type type() const;
  inline void set_type(::NetProto_PVPWaitCount_Type value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PVPWaitCount)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PVPWaitCount* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_CancelWaitRoom : public ::google::protobuf::Message {
 public:
  NetProto_CancelWaitRoom();
  virtual ~NetProto_CancelWaitRoom();
  
  NetProto_CancelWaitRoom(const NetProto_CancelWaitRoom& from);
  
  inline NetProto_CancelWaitRoom& operator=(const NetProto_CancelWaitRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_CancelWaitRoom& default_instance();
  
  void Swap(NetProto_CancelWaitRoom* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_CancelWaitRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_CancelWaitRoom& from);
  void MergeFrom(const NetProto_CancelWaitRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_CancelWaitRoom_ID ID;
  static const ID GROUPID = NetProto_CancelWaitRoom_ID_GROUPID;
  static const ID UNITID = NetProto_CancelWaitRoom_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_CancelWaitRoom_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_CancelWaitRoom_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_CancelWaitRoom_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_CancelWaitRoom_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_CancelWaitRoom_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_CancelWaitRoom_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_CancelWaitRoom_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_CancelWaitRoom)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_CancelWaitRoom* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_CancelWaitPVP : public ::google::protobuf::Message {
 public:
  NetProto_CancelWaitPVP();
  virtual ~NetProto_CancelWaitPVP();
  
  NetProto_CancelWaitPVP(const NetProto_CancelWaitPVP& from);
  
  inline NetProto_CancelWaitPVP& operator=(const NetProto_CancelWaitPVP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_CancelWaitPVP& default_instance();
  
  void Swap(NetProto_CancelWaitPVP* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_CancelWaitPVP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_CancelWaitPVP& from);
  void MergeFrom(const NetProto_CancelWaitPVP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_CancelWaitPVP_ID ID;
  static const ID GROUPID = NetProto_CancelWaitPVP_ID_GROUPID;
  static const ID UNITID = NetProto_CancelWaitPVP_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_CancelWaitPVP_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_CancelWaitPVP_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_CancelWaitPVP_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_CancelWaitPVP_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_CancelWaitPVP_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_CancelWaitPVP_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_CancelWaitPVP_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_CancelWaitPVP)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_CancelWaitPVP* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GetRes : public ::google::protobuf::Message {
 public:
  NetProto_GetRes();
  virtual ~NetProto_GetRes();
  
  NetProto_GetRes(const NetProto_GetRes& from);
  
  inline NetProto_GetRes& operator=(const NetProto_GetRes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GetRes& default_instance();
  
  void Swap(NetProto_GetRes* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GetRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GetRes& from);
  void MergeFrom(const NetProto_GetRes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GetRes_ID ID;
  static const ID GROUPID = NetProto_GetRes_ID_GROUPID;
  static const ID UNITID = NetProto_GetRes_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GetRes_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GetRes_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GetRes_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GetRes_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GetRes_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GetRes_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GetRes_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .PB_ItemInfo items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::PB_ItemInfo& items(int index) const;
  inline ::PB_ItemInfo* mutable_items(int index);
  inline ::PB_ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:NetProto_GetRes)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GetRes* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Invest : public ::google::protobuf::Message {
 public:
  NetProto_Invest();
  virtual ~NetProto_Invest();
  
  NetProto_Invest(const NetProto_Invest& from);
  
  inline NetProto_Invest& operator=(const NetProto_Invest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Invest& default_instance();
  
  void Swap(NetProto_Invest* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Invest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Invest& from);
  void MergeFrom(const NetProto_Invest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Invest_ID ID;
  static const ID GROUPID = NetProto_Invest_ID_GROUPID;
  static const ID UNITID = NetProto_Invest_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Invest_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Invest_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Invest_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Invest_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Invest_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Invest_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Invest_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Invest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Invest* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_InvestAward : public ::google::protobuf::Message {
 public:
  NetProto_InvestAward();
  virtual ~NetProto_InvestAward();
  
  NetProto_InvestAward(const NetProto_InvestAward& from);
  
  inline NetProto_InvestAward& operator=(const NetProto_InvestAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_InvestAward& default_instance();
  
  void Swap(NetProto_InvestAward* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_InvestAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_InvestAward& from);
  void MergeFrom(const NetProto_InvestAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_InvestAward_ID ID;
  static const ID GROUPID = NetProto_InvestAward_ID_GROUPID;
  static const ID UNITID = NetProto_InvestAward_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_InvestAward_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_InvestAward_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_InvestAward_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_InvestAward_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_InvestAward_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_InvestAward_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_InvestAward_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_InvestAward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_InvestAward* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_InvestAwardInfo : public ::google::protobuf::Message {
 public:
  NetProto_InvestAwardInfo();
  virtual ~NetProto_InvestAwardInfo();
  
  NetProto_InvestAwardInfo(const NetProto_InvestAwardInfo& from);
  
  inline NetProto_InvestAwardInfo& operator=(const NetProto_InvestAwardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_InvestAwardInfo& default_instance();
  
  void Swap(NetProto_InvestAwardInfo* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_InvestAwardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_InvestAwardInfo& from);
  void MergeFrom(const NetProto_InvestAwardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_InvestAwardInfo_ID ID;
  static const ID GROUPID = NetProto_InvestAwardInfo_ID_GROUPID;
  static const ID UNITID = NetProto_InvestAwardInfo_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_InvestAwardInfo_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_InvestAwardInfo_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_InvestAwardInfo_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_InvestAwardInfo_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_InvestAwardInfo_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_InvestAwardInfo_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_InvestAwardInfo_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int32 award = 1;
  inline int award_size() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 1;
  inline ::google::protobuf::int32 award(int index) const;
  inline void set_award(int index, ::google::protobuf::int32 value);
  inline void add_award(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      award() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_award();
  
  // @@protoc_insertion_point(class_scope:NetProto_InvestAwardInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > award_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_InvestAwardInfo* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SetDayEvent : public ::google::protobuf::Message {
 public:
  NetProto_SetDayEvent();
  virtual ~NetProto_SetDayEvent();
  
  NetProto_SetDayEvent(const NetProto_SetDayEvent& from);
  
  inline NetProto_SetDayEvent& operator=(const NetProto_SetDayEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SetDayEvent& default_instance();
  
  void Swap(NetProto_SetDayEvent* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SetDayEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SetDayEvent& from);
  void MergeFrom(const NetProto_SetDayEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SetDayEvent_ID ID;
  static const ID GROUPID = NetProto_SetDayEvent_ID_GROUPID;
  static const ID UNITID = NetProto_SetDayEvent_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SetDayEvent_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SetDayEvent_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SetDayEvent_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SetDayEvent_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SetDayEvent_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SetDayEvent_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SetDayEvent_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 v = 2;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 2;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SetDayEvent)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_v();
  inline void clear_has_v();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 v_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SetDayEvent* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SetFixedEvent : public ::google::protobuf::Message {
 public:
  NetProto_SetFixedEvent();
  virtual ~NetProto_SetFixedEvent();
  
  NetProto_SetFixedEvent(const NetProto_SetFixedEvent& from);
  
  inline NetProto_SetFixedEvent& operator=(const NetProto_SetFixedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SetFixedEvent& default_instance();
  
  void Swap(NetProto_SetFixedEvent* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SetFixedEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SetFixedEvent& from);
  void MergeFrom(const NetProto_SetFixedEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SetFixedEvent_ID ID;
  static const ID GROUPID = NetProto_SetFixedEvent_ID_GROUPID;
  static const ID UNITID = NetProto_SetFixedEvent_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SetFixedEvent_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SetFixedEvent_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SetFixedEvent_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SetFixedEvent_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SetFixedEvent_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SetFixedEvent_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SetFixedEvent_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 v = 2;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 2;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SetFixedEvent)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_v();
  inline void clear_has_v();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 v_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SetFixedEvent* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Info : public ::google::protobuf::Message {
 public:
  NetProto_Info();
  virtual ~NetProto_Info();
  
  NetProto_Info(const NetProto_Info& from);
  
  inline NetProto_Info& operator=(const NetProto_Info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Info& default_instance();
  
  void Swap(NetProto_Info* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Info& from);
  void MergeFrom(const NetProto_Info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Info_ID ID;
  static const ID GROUPID = NetProto_Info_ID_GROUPID;
  static const ID UNITID = NetProto_Info_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Info_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Info_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Info_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Info_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Info_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Info_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Info_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:NetProto_Info)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Info* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Error : public ::google::protobuf::Message {
 public:
  NetProto_Error();
  virtual ~NetProto_Error();
  
  NetProto_Error(const NetProto_Error& from);
  
  inline NetProto_Error& operator=(const NetProto_Error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Error& default_instance();
  
  void Swap(NetProto_Error* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Error& from);
  void MergeFrom(const NetProto_Error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Error_ID ID;
  static const ID GROUPID = NetProto_Error_ID_GROUPID;
  static const ID UNITID = NetProto_Error_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Error_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Error_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Error_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Error_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Error_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Error_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Error_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // @@protoc_insertion_point(class_scope:NetProto_Error)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Error* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GodAward : public ::google::protobuf::Message {
 public:
  NetProto_GodAward();
  virtual ~NetProto_GodAward();
  
  NetProto_GodAward(const NetProto_GodAward& from);
  
  inline NetProto_GodAward& operator=(const NetProto_GodAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GodAward& default_instance();
  
  void Swap(NetProto_GodAward* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GodAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GodAward& from);
  void MergeFrom(const NetProto_GodAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GodAward_ID ID;
  static const ID GROUPID = NetProto_GodAward_ID_GROUPID;
  static const ID UNITID = NetProto_GodAward_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GodAward_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GodAward_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GodAward_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GodAward_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GodAward_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GodAward_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GodAward_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 prevDayRank = 1;
  inline bool has_prevDayRank() const;
  inline void clear_prevDayRank();
  static const int kPrevDayRankFieldNumber = 1;
  inline ::google::protobuf::int64 prevDayRank() const;
  inline void set_prevDayRank(::google::protobuf::int64 value);
  
  // optional int32 prevDayGoods = 2;
  inline bool has_prevDayGoods() const;
  inline void clear_prevDayGoods();
  static const int kPrevDayGoodsFieldNumber = 2;
  inline ::google::protobuf::int32 prevDayGoods() const;
  inline void set_prevDayGoods(::google::protobuf::int32 value);
  
  // optional int64 prevWeekRank = 3;
  inline bool has_prevWeekRank() const;
  inline void clear_prevWeekRank();
  static const int kPrevWeekRankFieldNumber = 3;
  inline ::google::protobuf::int64 prevWeekRank() const;
  inline void set_prevWeekRank(::google::protobuf::int64 value);
  
  // optional int32 prevWeekGoods = 4;
  inline bool has_prevWeekGoods() const;
  inline void clear_prevWeekGoods();
  static const int kPrevWeekGoodsFieldNumber = 4;
  inline ::google::protobuf::int32 prevWeekGoods() const;
  inline void set_prevWeekGoods(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GodAward)
 private:
  inline void set_has_prevDayRank();
  inline void clear_has_prevDayRank();
  inline void set_has_prevDayGoods();
  inline void clear_has_prevDayGoods();
  inline void set_has_prevWeekRank();
  inline void clear_has_prevWeekRank();
  inline void set_has_prevWeekGoods();
  inline void clear_has_prevWeekGoods();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 prevDayRank_;
  ::google::protobuf::int64 prevWeekRank_;
  ::google::protobuf::int32 prevDayGoods_;
  ::google::protobuf::int32 prevWeekGoods_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GodAward* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_CreateRoom : public ::google::protobuf::Message {
 public:
  NetProto_CreateRoom();
  virtual ~NetProto_CreateRoom();
  
  NetProto_CreateRoom(const NetProto_CreateRoom& from);
  
  inline NetProto_CreateRoom& operator=(const NetProto_CreateRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_CreateRoom& default_instance();
  
  void Swap(NetProto_CreateRoom* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_CreateRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_CreateRoom& from);
  void MergeFrom(const NetProto_CreateRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_CreateRoom_ID ID;
  static const ID GROUPID = NetProto_CreateRoom_ID_GROUPID;
  static const ID UNITID = NetProto_CreateRoom_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_CreateRoom_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_CreateRoom_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_CreateRoom_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_CreateRoom_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_CreateRoom_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_CreateRoom_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_CreateRoom_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 map = 1;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 1;
  inline ::google::protobuf::int32 map() const;
  inline void set_map(::google::protobuf::int32 value);
  
  // optional bool noPower = 2;
  inline bool has_noPower() const;
  inline void clear_noPower();
  static const int kNoPowerFieldNumber = 2;
  inline bool noPower() const;
  inline void set_noPower(bool value);
  
  // optional .RoomInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::RoomInfo& info() const;
  inline ::RoomInfo* mutable_info();
  inline ::RoomInfo* release_info();
  
  // @@protoc_insertion_point(class_scope:NetProto_CreateRoom)
 private:
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_noPower();
  inline void clear_has_noPower();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 map_;
  bool noPower_;
  ::RoomInfo* info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_CreateRoom* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_JoinRoom : public ::google::protobuf::Message {
 public:
  NetProto_JoinRoom();
  virtual ~NetProto_JoinRoom();
  
  NetProto_JoinRoom(const NetProto_JoinRoom& from);
  
  inline NetProto_JoinRoom& operator=(const NetProto_JoinRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_JoinRoom& default_instance();
  
  void Swap(NetProto_JoinRoom* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_JoinRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_JoinRoom& from);
  void MergeFrom(const NetProto_JoinRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_JoinRoom_ID ID;
  static const ID GROUPID = NetProto_JoinRoom_ID_GROUPID;
  static const ID UNITID = NetProto_JoinRoom_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_JoinRoom_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_JoinRoom_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_JoinRoom_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_JoinRoom_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_JoinRoom_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_JoinRoom_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_JoinRoom_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // optional .PB_FriendInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::PB_FriendInfo& info() const;
  inline ::PB_FriendInfo* mutable_info();
  inline ::PB_FriendInfo* release_info();
  
  // optional int32 power = 4;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 4;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // optional bool noPower = 5;
  inline bool has_noPower() const;
  inline void clear_noPower();
  static const int kNoPowerFieldNumber = 5;
  inline bool noPower() const;
  inline void set_noPower(bool value);
  
  // optional int32 playerID = 6;
  inline bool has_playerID() const;
  inline void clear_playerID();
  static const int kPlayerIDFieldNumber = 6;
  inline ::google::protobuf::int32 playerID() const;
  inline void set_playerID(::google::protobuf::int32 value);
  
  // optional .PB_EquipmentAtt att = 7;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 7;
  inline const ::PB_EquipmentAtt& att() const;
  inline ::PB_EquipmentAtt* mutable_att();
  inline ::PB_EquipmentAtt* release_att();
  
  // optional bool male = 8;
  inline bool has_male() const;
  inline void clear_male();
  static const int kMaleFieldNumber = 8;
  inline bool male() const;
  inline void set_male(bool value);
  
  // optional int32 map = 9;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 9;
  inline ::google::protobuf::int32 map() const;
  inline void set_map(::google::protobuf::int32 value);
  
  // repeated .PB_EquipAsset equips = 10;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 10;
  inline const ::PB_EquipAsset& equips(int index) const;
  inline ::PB_EquipAsset* mutable_equips(int index);
  inline ::PB_EquipAsset* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset >*
      mutable_equips();
  
  // @@protoc_insertion_point(class_scope:NetProto_JoinRoom)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_noPower();
  inline void clear_has_noPower();
  inline void set_has_playerID();
  inline void clear_has_playerID();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_male();
  inline void clear_has_male();
  inline void set_has_map();
  inline void clear_has_map();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pos_;
  ::PB_FriendInfo* info_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 playerID_;
  ::PB_EquipmentAtt* att_;
  bool noPower_;
  bool male_;
  ::google::protobuf::int32 map_;
  ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset > equips_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_JoinRoom* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_LeaveRoom : public ::google::protobuf::Message {
 public:
  NetProto_LeaveRoom();
  virtual ~NetProto_LeaveRoom();
  
  NetProto_LeaveRoom(const NetProto_LeaveRoom& from);
  
  inline NetProto_LeaveRoom& operator=(const NetProto_LeaveRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_LeaveRoom& default_instance();
  
  void Swap(NetProto_LeaveRoom* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_LeaveRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_LeaveRoom& from);
  void MergeFrom(const NetProto_LeaveRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_LeaveRoom_ID ID;
  static const ID GROUPID = NetProto_LeaveRoom_ID_GROUPID;
  static const ID UNITID = NetProto_LeaveRoom_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_LeaveRoom_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_LeaveRoom_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_LeaveRoom_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_LeaveRoom_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_LeaveRoom_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_LeaveRoom_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_LeaveRoom_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_LeaveRoom)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_LeaveRoom* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DestroyRoom : public ::google::protobuf::Message {
 public:
  NetProto_DestroyRoom();
  virtual ~NetProto_DestroyRoom();
  
  NetProto_DestroyRoom(const NetProto_DestroyRoom& from);
  
  inline NetProto_DestroyRoom& operator=(const NetProto_DestroyRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DestroyRoom& default_instance();
  
  void Swap(NetProto_DestroyRoom* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DestroyRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DestroyRoom& from);
  void MergeFrom(const NetProto_DestroyRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DestroyRoom_ID ID;
  static const ID GROUPID = NetProto_DestroyRoom_ID_GROUPID;
  static const ID UNITID = NetProto_DestroyRoom_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DestroyRoom_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DestroyRoom_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DestroyRoom_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DestroyRoom_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DestroyRoom_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DestroyRoom_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DestroyRoom_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_DestroyRoom)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DestroyRoom* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RoomList : public ::google::protobuf::Message {
 public:
  NetProto_RoomList();
  virtual ~NetProto_RoomList();
  
  NetProto_RoomList(const NetProto_RoomList& from);
  
  inline NetProto_RoomList& operator=(const NetProto_RoomList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RoomList& default_instance();
  
  void Swap(NetProto_RoomList* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RoomList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RoomList& from);
  void MergeFrom(const NetProto_RoomList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RoomList_ID ID;
  static const ID GROUPID = NetProto_RoomList_ID_GROUPID;
  static const ID UNITID = NetProto_RoomList_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RoomList_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RoomList_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RoomList_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RoomList_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RoomList_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RoomList_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RoomList_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .RoomInfo rooms = 1;
  inline int rooms_size() const;
  inline void clear_rooms();
  static const int kRoomsFieldNumber = 1;
  inline const ::RoomInfo& rooms(int index) const;
  inline ::RoomInfo* mutable_rooms(int index);
  inline ::RoomInfo* add_rooms();
  inline const ::google::protobuf::RepeatedPtrField< ::RoomInfo >&
      rooms() const;
  inline ::google::protobuf::RepeatedPtrField< ::RoomInfo >*
      mutable_rooms();
  
  // @@protoc_insertion_point(class_scope:NetProto_RoomList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RoomInfo > rooms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RoomList* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_EvictRole : public ::google::protobuf::Message {
 public:
  NetProto_EvictRole();
  virtual ~NetProto_EvictRole();
  
  NetProto_EvictRole(const NetProto_EvictRole& from);
  
  inline NetProto_EvictRole& operator=(const NetProto_EvictRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_EvictRole& default_instance();
  
  void Swap(NetProto_EvictRole* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_EvictRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_EvictRole& from);
  void MergeFrom(const NetProto_EvictRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_EvictRole_ID ID;
  static const ID GROUPID = NetProto_EvictRole_ID_GROUPID;
  static const ID UNITID = NetProto_EvictRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_EvictRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_EvictRole_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_EvictRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_EvictRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_EvictRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_EvictRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_EvictRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_EvictRole)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_EvictRole* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_InviteFriend : public ::google::protobuf::Message {
 public:
  NetProto_InviteFriend();
  virtual ~NetProto_InviteFriend();
  
  NetProto_InviteFriend(const NetProto_InviteFriend& from);
  
  inline NetProto_InviteFriend& operator=(const NetProto_InviteFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_InviteFriend& default_instance();
  
  void Swap(NetProto_InviteFriend* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_InviteFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_InviteFriend& from);
  void MergeFrom(const NetProto_InviteFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_InviteFriend_ID ID;
  static const ID GROUPID = NetProto_InviteFriend_ID_GROUPID;
  static const ID UNITID = NetProto_InviteFriend_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_InviteFriend_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_InviteFriend_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_InviteFriend_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_InviteFriend_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_InviteFriend_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_InviteFriend_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_InviteFriend_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string src = 3;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 3;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  
  // optional int32 map = 4;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 4;
  inline ::google::protobuf::int32 map() const;
  inline void set_map(::google::protobuf::int32 value);
  
  // optional int32 flag = 5;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_InviteFriend)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::std::string* src_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 map_;
  ::google::protobuf::int32 flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_InviteFriend* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BeginMultiRoom : public ::google::protobuf::Message {
 public:
  NetProto_BeginMultiRoom();
  virtual ~NetProto_BeginMultiRoom();
  
  NetProto_BeginMultiRoom(const NetProto_BeginMultiRoom& from);
  
  inline NetProto_BeginMultiRoom& operator=(const NetProto_BeginMultiRoom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BeginMultiRoom& default_instance();
  
  void Swap(NetProto_BeginMultiRoom* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BeginMultiRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BeginMultiRoom& from);
  void MergeFrom(const NetProto_BeginMultiRoom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BeginMultiRoom_ID ID;
  static const ID GROUPID = NetProto_BeginMultiRoom_ID_GROUPID;
  static const ID UNITID = NetProto_BeginMultiRoom_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BeginMultiRoom_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BeginMultiRoom_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BeginMultiRoom_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BeginMultiRoom_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BeginMultiRoom_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BeginMultiRoom_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BeginMultiRoom_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_BeginMultiRoom)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BeginMultiRoom* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ResetCheckPoint : public ::google::protobuf::Message {
 public:
  NetProto_ResetCheckPoint();
  virtual ~NetProto_ResetCheckPoint();
  
  NetProto_ResetCheckPoint(const NetProto_ResetCheckPoint& from);
  
  inline NetProto_ResetCheckPoint& operator=(const NetProto_ResetCheckPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ResetCheckPoint& default_instance();
  
  void Swap(NetProto_ResetCheckPoint* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ResetCheckPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ResetCheckPoint& from);
  void MergeFrom(const NetProto_ResetCheckPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ResetCheckPoint_ID ID;
  static const ID GROUPID = NetProto_ResetCheckPoint_ID_GROUPID;
  static const ID UNITID = NetProto_ResetCheckPoint_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ResetCheckPoint_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ResetCheckPoint_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ResetCheckPoint_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ResetCheckPoint_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ResetCheckPoint_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ResetCheckPoint_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ResetCheckPoint_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_ResetCheckPoint)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ResetCheckPoint* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GenPet : public ::google::protobuf::Message {
 public:
  NetProto_GenPet();
  virtual ~NetProto_GenPet();
  
  NetProto_GenPet(const NetProto_GenPet& from);
  
  inline NetProto_GenPet& operator=(const NetProto_GenPet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GenPet& default_instance();
  
  void Swap(NetProto_GenPet* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GenPet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GenPet& from);
  void MergeFrom(const NetProto_GenPet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GenPet_ID ID;
  static const ID GROUPID = NetProto_GenPet_ID_GROUPID;
  static const ID UNITID = NetProto_GenPet_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GenPet_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GenPet_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GenPet_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GenPet_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GenPet_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GenPet_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GenPet_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 player = 2;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline ::google::protobuf::int32 player() const;
  inline void set_player(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GenPet)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_player();
  inline void clear_has_player();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 player_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GenPet* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_OpenObstacle : public ::google::protobuf::Message {
 public:
  NetProto_OpenObstacle();
  virtual ~NetProto_OpenObstacle();
  
  NetProto_OpenObstacle(const NetProto_OpenObstacle& from);
  
  inline NetProto_OpenObstacle& operator=(const NetProto_OpenObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_OpenObstacle& default_instance();
  
  void Swap(NetProto_OpenObstacle* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_OpenObstacle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_OpenObstacle& from);
  void MergeFrom(const NetProto_OpenObstacle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_OpenObstacle_ID ID;
  static const ID GROUPID = NetProto_OpenObstacle_ID_GROUPID;
  static const ID UNITID = NetProto_OpenObstacle_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_OpenObstacle_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_OpenObstacle_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_OpenObstacle_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_OpenObstacle_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_OpenObstacle_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_OpenObstacle_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_OpenObstacle_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_OpenObstacle)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_OpenObstacle* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RegistDeviceServer : public ::google::protobuf::Message {
 public:
  NetProto_RegistDeviceServer();
  virtual ~NetProto_RegistDeviceServer();
  
  NetProto_RegistDeviceServer(const NetProto_RegistDeviceServer& from);
  
  inline NetProto_RegistDeviceServer& operator=(const NetProto_RegistDeviceServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RegistDeviceServer& default_instance();
  
  void Swap(NetProto_RegistDeviceServer* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RegistDeviceServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RegistDeviceServer& from);
  void MergeFrom(const NetProto_RegistDeviceServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RegistDeviceServer_ID ID;
  static const ID GROUPID = NetProto_RegistDeviceServer_ID_GROUPID;
  static const ID UNITID = NetProto_RegistDeviceServer_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RegistDeviceServer_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RegistDeviceServer_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RegistDeviceServer_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RegistDeviceServer_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RegistDeviceServer_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RegistDeviceServer_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RegistDeviceServer_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string deviceID = 1;
  inline bool has_deviceID() const;
  inline void clear_deviceID();
  static const int kDeviceIDFieldNumber = 1;
  inline const ::std::string& deviceID() const;
  inline void set_deviceID(const ::std::string& value);
  inline void set_deviceID(const char* value);
  inline void set_deviceID(const char* value, size_t size);
  inline ::std::string* mutable_deviceID();
  inline ::std::string* release_deviceID();
  
  // optional string idfa = 2;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 2;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  
  // @@protoc_insertion_point(class_scope:NetProto_RegistDeviceServer)
 private:
  inline void set_has_deviceID();
  inline void clear_has_deviceID();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* deviceID_;
  ::std::string* idfa_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RegistDeviceServer* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_StartLoad1 : public ::google::protobuf::Message {
 public:
  NetProto_StartLoad1();
  virtual ~NetProto_StartLoad1();
  
  NetProto_StartLoad1(const NetProto_StartLoad1& from);
  
  inline NetProto_StartLoad1& operator=(const NetProto_StartLoad1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_StartLoad1& default_instance();
  
  void Swap(NetProto_StartLoad1* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_StartLoad1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_StartLoad1& from);
  void MergeFrom(const NetProto_StartLoad1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_StartLoad1_ID ID;
  static const ID GROUPID = NetProto_StartLoad1_ID_GROUPID;
  static const ID UNITID = NetProto_StartLoad1_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_StartLoad1_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_StartLoad1_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_StartLoad1_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_StartLoad1_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_StartLoad1_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_StartLoad1_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_StartLoad1_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string deviceID = 1;
  inline bool has_deviceID() const;
  inline void clear_deviceID();
  static const int kDeviceIDFieldNumber = 1;
  inline const ::std::string& deviceID() const;
  inline void set_deviceID(const ::std::string& value);
  inline void set_deviceID(const char* value);
  inline void set_deviceID(const char* value, size_t size);
  inline ::std::string* mutable_deviceID();
  inline ::std::string* release_deviceID();
  
  // optional string idfa = 2;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 2;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  
  // @@protoc_insertion_point(class_scope:NetProto_StartLoad1)
 private:
  inline void set_has_deviceID();
  inline void clear_has_deviceID();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* deviceID_;
  ::std::string* idfa_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_StartLoad1* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_EndLoad1 : public ::google::protobuf::Message {
 public:
  NetProto_EndLoad1();
  virtual ~NetProto_EndLoad1();
  
  NetProto_EndLoad1(const NetProto_EndLoad1& from);
  
  inline NetProto_EndLoad1& operator=(const NetProto_EndLoad1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_EndLoad1& default_instance();
  
  void Swap(NetProto_EndLoad1* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_EndLoad1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_EndLoad1& from);
  void MergeFrom(const NetProto_EndLoad1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_EndLoad1_ID ID;
  static const ID GROUPID = NetProto_EndLoad1_ID_GROUPID;
  static const ID UNITID = NetProto_EndLoad1_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_EndLoad1_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_EndLoad1_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_EndLoad1_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_EndLoad1_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_EndLoad1_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_EndLoad1_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_EndLoad1_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string deviceID = 1;
  inline bool has_deviceID() const;
  inline void clear_deviceID();
  static const int kDeviceIDFieldNumber = 1;
  inline const ::std::string& deviceID() const;
  inline void set_deviceID(const ::std::string& value);
  inline void set_deviceID(const char* value);
  inline void set_deviceID(const char* value, size_t size);
  inline ::std::string* mutable_deviceID();
  inline ::std::string* release_deviceID();
  
  // optional string idfa = 2;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 2;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  
  // @@protoc_insertion_point(class_scope:NetProto_EndLoad1)
 private:
  inline void set_has_deviceID();
  inline void clear_has_deviceID();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* deviceID_;
  ::std::string* idfa_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_EndLoad1* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_StartLoad2 : public ::google::protobuf::Message {
 public:
  NetProto_StartLoad2();
  virtual ~NetProto_StartLoad2();
  
  NetProto_StartLoad2(const NetProto_StartLoad2& from);
  
  inline NetProto_StartLoad2& operator=(const NetProto_StartLoad2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_StartLoad2& default_instance();
  
  void Swap(NetProto_StartLoad2* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_StartLoad2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_StartLoad2& from);
  void MergeFrom(const NetProto_StartLoad2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_StartLoad2_ID ID;
  static const ID GROUPID = NetProto_StartLoad2_ID_GROUPID;
  static const ID UNITID = NetProto_StartLoad2_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_StartLoad2_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_StartLoad2_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_StartLoad2_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_StartLoad2_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_StartLoad2_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_StartLoad2_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_StartLoad2_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_StartLoad2)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_StartLoad2* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_EndLoad2 : public ::google::protobuf::Message {
 public:
  NetProto_EndLoad2();
  virtual ~NetProto_EndLoad2();
  
  NetProto_EndLoad2(const NetProto_EndLoad2& from);
  
  inline NetProto_EndLoad2& operator=(const NetProto_EndLoad2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_EndLoad2& default_instance();
  
  void Swap(NetProto_EndLoad2* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_EndLoad2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_EndLoad2& from);
  void MergeFrom(const NetProto_EndLoad2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_EndLoad2_ID ID;
  static const ID GROUPID = NetProto_EndLoad2_ID_GROUPID;
  static const ID UNITID = NetProto_EndLoad2_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_EndLoad2_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_EndLoad2_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_EndLoad2_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_EndLoad2_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_EndLoad2_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_EndLoad2_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_EndLoad2_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_EndLoad2)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_EndLoad2* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BeginFighting : public ::google::protobuf::Message {
 public:
  NetProto_BeginFighting();
  virtual ~NetProto_BeginFighting();
  
  NetProto_BeginFighting(const NetProto_BeginFighting& from);
  
  inline NetProto_BeginFighting& operator=(const NetProto_BeginFighting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BeginFighting& default_instance();
  
  void Swap(NetProto_BeginFighting* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BeginFighting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BeginFighting& from);
  void MergeFrom(const NetProto_BeginFighting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BeginFighting_ID ID;
  static const ID GROUPID = NetProto_BeginFighting_ID_GROUPID;
  static const ID UNITID = NetProto_BeginFighting_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BeginFighting_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BeginFighting_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BeginFighting_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BeginFighting_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BeginFighting_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BeginFighting_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BeginFighting_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_BeginFighting)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BeginFighting* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DelNPCs : public ::google::protobuf::Message {
 public:
  NetProto_DelNPCs();
  virtual ~NetProto_DelNPCs();
  
  NetProto_DelNPCs(const NetProto_DelNPCs& from);
  
  inline NetProto_DelNPCs& operator=(const NetProto_DelNPCs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DelNPCs& default_instance();
  
  void Swap(NetProto_DelNPCs* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DelNPCs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DelNPCs& from);
  void MergeFrom(const NetProto_DelNPCs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DelNPCs_ID ID;
  static const ID GROUPID = NetProto_DelNPCs_ID_GROUPID;
  static const ID UNITID = NetProto_DelNPCs_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DelNPCs_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DelNPCs_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DelNPCs_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DelNPCs_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DelNPCs_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DelNPCs_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DelNPCs_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();
  
  // @@protoc_insertion_point(class_scope:NetProto_DelNPCs)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DelNPCs* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_WorldBossCurRank : public ::google::protobuf::Message {
 public:
  NetProto_WorldBossCurRank();
  virtual ~NetProto_WorldBossCurRank();
  
  NetProto_WorldBossCurRank(const NetProto_WorldBossCurRank& from);
  
  inline NetProto_WorldBossCurRank& operator=(const NetProto_WorldBossCurRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_WorldBossCurRank& default_instance();
  
  void Swap(NetProto_WorldBossCurRank* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_WorldBossCurRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_WorldBossCurRank& from);
  void MergeFrom(const NetProto_WorldBossCurRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_WorldBossCurRank_ID ID;
  static const ID GROUPID = NetProto_WorldBossCurRank_ID_GROUPID;
  static const ID UNITID = NetProto_WorldBossCurRank_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_WorldBossCurRank_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_WorldBossCurRank_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_WorldBossCurRank_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_WorldBossCurRank_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_WorldBossCurRank_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_WorldBossCurRank_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_WorldBossCurRank_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .RecordInfo rank = 1;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::RecordInfo& rank(int index) const;
  inline ::RecordInfo* mutable_rank(int index);
  inline ::RecordInfo* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
      mutable_rank();
  
  // optional .RecordInfo self = 2;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 2;
  inline const ::RecordInfo& self() const;
  inline ::RecordInfo* mutable_self();
  inline ::RecordInfo* release_self();
  
  // optional int32 selfRank = 3;
  inline bool has_selfRank() const;
  inline void clear_selfRank();
  static const int kSelfRankFieldNumber = 3;
  inline ::google::protobuf::int32 selfRank() const;
  inline void set_selfRank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_WorldBossCurRank)
 private:
  inline void set_has_self();
  inline void clear_has_self();
  inline void set_has_selfRank();
  inline void clear_has_selfRank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RecordInfo > rank_;
  ::RecordInfo* self_;
  ::google::protobuf::int32 selfRank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_WorldBossCurRank* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionWarCurRank : public ::google::protobuf::Message {
 public:
  NetProto_FactionWarCurRank();
  virtual ~NetProto_FactionWarCurRank();
  
  NetProto_FactionWarCurRank(const NetProto_FactionWarCurRank& from);
  
  inline NetProto_FactionWarCurRank& operator=(const NetProto_FactionWarCurRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionWarCurRank& default_instance();
  
  void Swap(NetProto_FactionWarCurRank* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionWarCurRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionWarCurRank& from);
  void MergeFrom(const NetProto_FactionWarCurRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionWarCurRank_ID ID;
  static const ID GROUPID = NetProto_FactionWarCurRank_ID_GROUPID;
  static const ID UNITID = NetProto_FactionWarCurRank_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionWarCurRank_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionWarCurRank_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionWarCurRank_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionWarCurRank_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionWarCurRank_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionWarCurRank_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionWarCurRank_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .RecordInfo rank = 1;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::RecordInfo& rank(int index) const;
  inline ::RecordInfo* mutable_rank(int index);
  inline ::RecordInfo* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
      mutable_rank();
  
  // optional .RecordInfo self = 2;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 2;
  inline const ::RecordInfo& self() const;
  inline ::RecordInfo* mutable_self();
  inline ::RecordInfo* release_self();
  
  // optional int32 selfRank = 3;
  inline bool has_selfRank() const;
  inline void clear_selfRank();
  static const int kSelfRankFieldNumber = 3;
  inline ::google::protobuf::int32 selfRank() const;
  inline void set_selfRank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionWarCurRank)
 private:
  inline void set_has_self();
  inline void clear_has_self();
  inline void set_has_selfRank();
  inline void clear_has_selfRank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RecordInfo > rank_;
  ::RecordInfo* self_;
  ::google::protobuf::int32 selfRank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionWarCurRank* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionWarPrevWinner : public ::google::protobuf::Message {
 public:
  NetProto_FactionWarPrevWinner();
  virtual ~NetProto_FactionWarPrevWinner();
  
  NetProto_FactionWarPrevWinner(const NetProto_FactionWarPrevWinner& from);
  
  inline NetProto_FactionWarPrevWinner& operator=(const NetProto_FactionWarPrevWinner& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionWarPrevWinner& default_instance();
  
  void Swap(NetProto_FactionWarPrevWinner* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionWarPrevWinner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionWarPrevWinner& from);
  void MergeFrom(const NetProto_FactionWarPrevWinner& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionWarPrevWinner_ID ID;
  static const ID GROUPID = NetProto_FactionWarPrevWinner_ID_GROUPID;
  static const ID UNITID = NetProto_FactionWarPrevWinner_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionWarPrevWinner_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionWarPrevWinner_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionWarPrevWinner_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionWarPrevWinner_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionWarPrevWinner_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionWarPrevWinner_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionWarPrevWinner_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionWarPrevWinner)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionWarPrevWinner* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GetMonthCardAward : public ::google::protobuf::Message {
 public:
  NetProto_GetMonthCardAward();
  virtual ~NetProto_GetMonthCardAward();
  
  NetProto_GetMonthCardAward(const NetProto_GetMonthCardAward& from);
  
  inline NetProto_GetMonthCardAward& operator=(const NetProto_GetMonthCardAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GetMonthCardAward& default_instance();
  
  void Swap(NetProto_GetMonthCardAward* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GetMonthCardAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GetMonthCardAward& from);
  void MergeFrom(const NetProto_GetMonthCardAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GetMonthCardAward_ID ID;
  static const ID GROUPID = NetProto_GetMonthCardAward_ID_GROUPID;
  static const ID UNITID = NetProto_GetMonthCardAward_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GetMonthCardAward_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GetMonthCardAward_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GetMonthCardAward_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GetMonthCardAward_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GetMonthCardAward_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GetMonthCardAward_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GetMonthCardAward_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_GetMonthCardAward)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GetMonthCardAward* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ExchangeGoods : public ::google::protobuf::Message {
 public:
  NetProto_ExchangeGoods();
  virtual ~NetProto_ExchangeGoods();
  
  NetProto_ExchangeGoods(const NetProto_ExchangeGoods& from);
  
  inline NetProto_ExchangeGoods& operator=(const NetProto_ExchangeGoods& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ExchangeGoods& default_instance();
  
  void Swap(NetProto_ExchangeGoods* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ExchangeGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ExchangeGoods& from);
  void MergeFrom(const NetProto_ExchangeGoods& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ExchangeGoods_ID ID;
  static const ID GROUPID = NetProto_ExchangeGoods_ID_GROUPID;
  static const ID UNITID = NetProto_ExchangeGoods_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ExchangeGoods_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ExchangeGoods_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ExchangeGoods_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ExchangeGoods_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ExchangeGoods_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ExchangeGoods_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ExchangeGoods_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional bool all = 2;
  inline bool has_all() const;
  inline void clear_all();
  static const int kAllFieldNumber = 2;
  inline bool all() const;
  inline void set_all(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ExchangeGoods)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_all();
  inline void clear_has_all();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  bool all_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ExchangeGoods* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BuyMonthCard : public ::google::protobuf::Message {
 public:
  NetProto_BuyMonthCard();
  virtual ~NetProto_BuyMonthCard();
  
  NetProto_BuyMonthCard(const NetProto_BuyMonthCard& from);
  
  inline NetProto_BuyMonthCard& operator=(const NetProto_BuyMonthCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BuyMonthCard& default_instance();
  
  void Swap(NetProto_BuyMonthCard* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BuyMonthCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BuyMonthCard& from);
  void MergeFrom(const NetProto_BuyMonthCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BuyMonthCard_ID ID;
  static const ID GROUPID = NetProto_BuyMonthCard_ID_GROUPID;
  static const ID UNITID = NetProto_BuyMonthCard_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BuyMonthCard_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BuyMonthCard_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BuyMonthCard_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BuyMonthCard_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BuyMonthCard_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BuyMonthCard_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BuyMonthCard_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 expire = 1;
  inline bool has_expire() const;
  inline void clear_expire();
  static const int kExpireFieldNumber = 1;
  inline ::google::protobuf::int32 expire() const;
  inline void set_expire(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_BuyMonthCard)
 private:
  inline void set_has_expire();
  inline void clear_has_expire();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 expire_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BuyMonthCard* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UseLuckyCard : public ::google::protobuf::Message {
 public:
  NetProto_UseLuckyCard();
  virtual ~NetProto_UseLuckyCard();
  
  NetProto_UseLuckyCard(const NetProto_UseLuckyCard& from);
  
  inline NetProto_UseLuckyCard& operator=(const NetProto_UseLuckyCard& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UseLuckyCard& default_instance();
  
  void Swap(NetProto_UseLuckyCard* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UseLuckyCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UseLuckyCard& from);
  void MergeFrom(const NetProto_UseLuckyCard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UseLuckyCard_ID ID;
  static const ID GROUPID = NetProto_UseLuckyCard_ID_GROUPID;
  static const ID UNITID = NetProto_UseLuckyCard_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UseLuckyCard_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UseLuckyCard_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UseLuckyCard_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UseLuckyCard_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UseLuckyCard_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UseLuckyCard_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UseLuckyCard_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_UseLuckyCard)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UseLuckyCard* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BIActive : public ::google::protobuf::Message {
 public:
  NetProto_BIActive();
  virtual ~NetProto_BIActive();
  
  NetProto_BIActive(const NetProto_BIActive& from);
  
  inline NetProto_BIActive& operator=(const NetProto_BIActive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BIActive& default_instance();
  
  void Swap(NetProto_BIActive* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BIActive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BIActive& from);
  void MergeFrom(const NetProto_BIActive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BIActive_ID ID;
  static const ID GROUPID = NetProto_BIActive_ID_GROUPID;
  static const ID UNITID = NetProto_BIActive_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BIActive_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BIActive_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BIActive_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BIActive_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BIActive_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BIActive_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BIActive_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string deviceID = 1;
  inline bool has_deviceID() const;
  inline void clear_deviceID();
  static const int kDeviceIDFieldNumber = 1;
  inline const ::std::string& deviceID() const;
  inline void set_deviceID(const ::std::string& value);
  inline void set_deviceID(const char* value);
  inline void set_deviceID(const char* value, size_t size);
  inline ::std::string* mutable_deviceID();
  inline ::std::string* release_deviceID();
  
  // optional string idfa = 2;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 2;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  
  // @@protoc_insertion_point(class_scope:NetProto_BIActive)
 private:
  inline void set_has_deviceID();
  inline void clear_has_deviceID();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* deviceID_;
  ::std::string* idfa_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BIActive* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Move : public ::google::protobuf::Message {
 public:
  NetProto_Move();
  virtual ~NetProto_Move();
  
  NetProto_Move(const NetProto_Move& from);
  
  inline NetProto_Move& operator=(const NetProto_Move& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Move& default_instance();
  
  void Swap(NetProto_Move* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Move& from);
  void MergeFrom(const NetProto_Move& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Move_ID ID;
  static const ID GROUPID = NetProto_Move_ID_GROUPID;
  static const ID UNITID = NetProto_Move_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Move_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Move_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Move_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Move_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Move_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Move_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Move_ID_Parse(name, value);
  }
  
  typedef NetProto_Move_Type Type;
  static const Type PLAYER = NetProto_Move_Type_PLAYER;
  static const Type NPC = NetProto_Move_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_Move_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Move_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Move_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Move_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Move_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Move_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Move_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Move.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Move_Type type() const;
  inline void set_type(::NetProto_Move_Type value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .PB_Vector3f start = 3;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 3;
  inline const ::PB_Vector3f& start() const;
  inline ::PB_Vector3f* mutable_start();
  inline ::PB_Vector3f* release_start();
  
  // optional .PB_Vector3f end = 4;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 4;
  inline const ::PB_Vector3f& end() const;
  inline ::PB_Vector3f* mutable_end();
  inline ::PB_Vector3f* release_end();
  
  // optional int32 serialNum = 5;
  inline bool has_serialNum() const;
  inline void clear_serialNum();
  static const int kSerialNumFieldNumber = 5;
  inline ::google::protobuf::int32 serialNum() const;
  inline void set_serialNum(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Move)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_serialNum();
  inline void clear_has_serialNum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  ::PB_Vector3f* start_;
  ::PB_Vector3f* end_;
  ::google::protobuf::int32 serialNum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Move* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Wear : public ::google::protobuf::Message {
 public:
  NetProto_Wear();
  virtual ~NetProto_Wear();
  
  NetProto_Wear(const NetProto_Wear& from);
  
  inline NetProto_Wear& operator=(const NetProto_Wear& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Wear& default_instance();
  
  void Swap(NetProto_Wear* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Wear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Wear& from);
  void MergeFrom(const NetProto_Wear& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Wear_ID ID;
  static const ID GROUPID = NetProto_Wear_ID_GROUPID;
  static const ID UNITID = NetProto_Wear_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Wear_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Wear_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Wear_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Wear_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Wear_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Wear_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Wear_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int64 equipment = 2;
  inline bool has_equipment() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 2;
  inline ::google::protobuf::int64 equipment() const;
  inline void set_equipment(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Wear)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_equipment();
  inline void clear_has_equipment();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 equipment_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Wear* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Unwear : public ::google::protobuf::Message {
 public:
  NetProto_Unwear();
  virtual ~NetProto_Unwear();
  
  NetProto_Unwear(const NetProto_Unwear& from);
  
  inline NetProto_Unwear& operator=(const NetProto_Unwear& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Unwear& default_instance();
  
  void Swap(NetProto_Unwear* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Unwear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Unwear& from);
  void MergeFrom(const NetProto_Unwear& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Unwear_ID ID;
  static const ID GROUPID = NetProto_Unwear_ID_GROUPID;
  static const ID UNITID = NetProto_Unwear_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Unwear_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Unwear_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Unwear_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Unwear_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Unwear_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Unwear_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Unwear_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .EquipmentInfo.Type pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::EquipmentInfo_Type pos() const;
  inline void set_pos(::EquipmentInfo_Type value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Unwear)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  int pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Unwear* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Attack : public ::google::protobuf::Message {
 public:
  NetProto_Attack();
  virtual ~NetProto_Attack();
  
  NetProto_Attack(const NetProto_Attack& from);
  
  inline NetProto_Attack& operator=(const NetProto_Attack& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Attack& default_instance();
  
  void Swap(NetProto_Attack* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Attack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Attack& from);
  void MergeFrom(const NetProto_Attack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Attack_ID ID;
  static const ID GROUPID = NetProto_Attack_ID_GROUPID;
  static const ID UNITID = NetProto_Attack_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Attack_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Attack_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Attack_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Attack_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Attack_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Attack_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Attack_ID_Parse(name, value);
  }
  
  typedef NetProto_Attack_Type Type;
  static const Type PLAYER = NetProto_Attack_Type_PLAYER;
  static const Type NPC = NetProto_Attack_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_Attack_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Attack_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Attack_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Attack_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Attack_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Attack_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Attack_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Attack.Type aType = 1;
  inline bool has_aType() const;
  inline void clear_aType();
  static const int kATypeFieldNumber = 1;
  inline ::NetProto_Attack_Type aType() const;
  inline void set_aType(::NetProto_Attack_Type value);
  
  // optional int32 aID = 2;
  inline bool has_aID() const;
  inline void clear_aID();
  static const int kAIDFieldNumber = 2;
  inline ::google::protobuf::int32 aID() const;
  inline void set_aID(::google::protobuf::int32 value);
  
  // optional .PB_Skill aSkill = 3;
  inline bool has_aSkill() const;
  inline void clear_aSkill();
  static const int kASkillFieldNumber = 3;
  inline const ::PB_Skill& aSkill() const;
  inline ::PB_Skill* mutable_aSkill();
  inline ::PB_Skill* release_aSkill();
  
  // optional .NetProto_Attack.Type dType = 4;
  inline bool has_dType() const;
  inline void clear_dType();
  static const int kDTypeFieldNumber = 4;
  inline ::NetProto_Attack_Type dType() const;
  inline void set_dType(::NetProto_Attack_Type value);
  
  // optional int32 dID = 5;
  inline bool has_dID() const;
  inline void clear_dID();
  static const int kDIDFieldNumber = 5;
  inline ::google::protobuf::int32 dID() const;
  inline void set_dID(::google::protobuf::int32 value);
  
  // optional .PB_Vector3f tPos = 6;
  inline bool has_tPos() const;
  inline void clear_tPos();
  static const int kTPosFieldNumber = 6;
  inline const ::PB_Vector3f& tPos() const;
  inline ::PB_Vector3f* mutable_tPos();
  inline ::PB_Vector3f* release_tPos();
  
  // repeated int32 skills = 7;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 7;
  inline ::google::protobuf::int32 skills(int index) const;
  inline void set_skills(int index, ::google::protobuf::int32 value);
  inline void add_skills(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skills() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skills();
  
  // optional int64 serverTime = 8;
  inline bool has_serverTime() const;
  inline void clear_serverTime();
  static const int kServerTimeFieldNumber = 8;
  inline ::google::protobuf::int64 serverTime() const;
  inline void set_serverTime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Attack)
 private:
  inline void set_has_aType();
  inline void clear_has_aType();
  inline void set_has_aID();
  inline void clear_has_aID();
  inline void set_has_aSkill();
  inline void clear_has_aSkill();
  inline void set_has_dType();
  inline void clear_has_dType();
  inline void set_has_dID();
  inline void clear_has_dID();
  inline void set_has_tPos();
  inline void clear_has_tPos();
  inline void set_has_serverTime();
  inline void clear_has_serverTime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int aType_;
  ::google::protobuf::int32 aID_;
  ::PB_Skill* aSkill_;
  int dType_;
  ::google::protobuf::int32 dID_;
  ::PB_Vector3f* tPos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skills_;
  ::google::protobuf::int64 serverTime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Attack* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DoAttack : public ::google::protobuf::Message {
 public:
  NetProto_DoAttack();
  virtual ~NetProto_DoAttack();
  
  NetProto_DoAttack(const NetProto_DoAttack& from);
  
  inline NetProto_DoAttack& operator=(const NetProto_DoAttack& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DoAttack& default_instance();
  
  void Swap(NetProto_DoAttack* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DoAttack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DoAttack& from);
  void MergeFrom(const NetProto_DoAttack& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DoAttack_ID ID;
  static const ID GROUPID = NetProto_DoAttack_ID_GROUPID;
  static const ID UNITID = NetProto_DoAttack_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DoAttack_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DoAttack_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DoAttack_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DoAttack_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DoAttack_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DoAttack_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DoAttack_ID_Parse(name, value);
  }
  
  typedef NetProto_DoAttack_Type Type;
  static const Type PLAYER = NetProto_DoAttack_Type_PLAYER;
  static const Type NPC = NetProto_DoAttack_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_DoAttack_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_DoAttack_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_DoAttack_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_DoAttack_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_DoAttack_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_DoAttack_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_DoAttack_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_DoAttack.Type aType = 1;
  inline bool has_aType() const;
  inline void clear_aType();
  static const int kATypeFieldNumber = 1;
  inline ::NetProto_DoAttack_Type aType() const;
  inline void set_aType(::NetProto_DoAttack_Type value);
  
  // optional int32 aID = 2;
  inline bool has_aID() const;
  inline void clear_aID();
  static const int kAIDFieldNumber = 2;
  inline ::google::protobuf::int32 aID() const;
  inline void set_aID(::google::protobuf::int32 value);
  
  // optional .PB_Skill aSkill = 3;
  inline bool has_aSkill() const;
  inline void clear_aSkill();
  static const int kASkillFieldNumber = 3;
  inline const ::PB_Skill& aSkill() const;
  inline ::PB_Skill* mutable_aSkill();
  inline ::PB_Skill* release_aSkill();
  
  // repeated int32 aSkillID = 4;
  inline int aSkillID_size() const;
  inline void clear_aSkillID();
  static const int kASkillIDFieldNumber = 4;
  inline ::google::protobuf::int32 aSkillID(int index) const;
  inline void set_aSkillID(int index, ::google::protobuf::int32 value);
  inline void add_aSkillID(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      aSkillID() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_aSkillID();
  
  // optional .NetProto_DoAttack.Type dType = 5;
  inline bool has_dType() const;
  inline void clear_dType();
  static const int kDTypeFieldNumber = 5;
  inline ::NetProto_DoAttack_Type dType() const;
  inline void set_dType(::NetProto_DoAttack_Type value);
  
  // optional int32 dID = 6;
  inline bool has_dID() const;
  inline void clear_dID();
  static const int kDIDFieldNumber = 6;
  inline ::google::protobuf::int32 dID() const;
  inline void set_dID(::google::protobuf::int32 value);
  
  // optional .PB_Vector3f tPos = 7;
  inline bool has_tPos() const;
  inline void clear_tPos();
  static const int kTPosFieldNumber = 7;
  inline const ::PB_Vector3f& tPos() const;
  inline ::PB_Vector3f* mutable_tPos();
  inline ::PB_Vector3f* release_tPos();
  
  // optional .PB_Vector3f aPos = 8;
  inline bool has_aPos() const;
  inline void clear_aPos();
  static const int kAPosFieldNumber = 8;
  inline const ::PB_Vector3f& aPos() const;
  inline ::PB_Vector3f* mutable_aPos();
  inline ::PB_Vector3f* release_aPos();
  
  // @@protoc_insertion_point(class_scope:NetProto_DoAttack)
 private:
  inline void set_has_aType();
  inline void clear_has_aType();
  inline void set_has_aID();
  inline void clear_has_aID();
  inline void set_has_aSkill();
  inline void clear_has_aSkill();
  inline void set_has_dType();
  inline void clear_has_dType();
  inline void set_has_dID();
  inline void clear_has_dID();
  inline void set_has_tPos();
  inline void clear_has_tPos();
  inline void set_has_aPos();
  inline void clear_has_aPos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int aType_;
  ::google::protobuf::int32 aID_;
  ::PB_Skill* aSkill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > aSkillID_;
  int dType_;
  ::google::protobuf::int32 dID_;
  ::PB_Vector3f* tPos_;
  ::PB_Vector3f* aPos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DoAttack* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SetPos : public ::google::protobuf::Message {
 public:
  NetProto_SetPos();
  virtual ~NetProto_SetPos();
  
  NetProto_SetPos(const NetProto_SetPos& from);
  
  inline NetProto_SetPos& operator=(const NetProto_SetPos& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SetPos& default_instance();
  
  void Swap(NetProto_SetPos* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SetPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SetPos& from);
  void MergeFrom(const NetProto_SetPos& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SetPos_ID ID;
  static const ID GROUPID = NetProto_SetPos_ID_GROUPID;
  static const ID UNITID = NetProto_SetPos_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SetPos_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SetPos_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SetPos_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SetPos_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SetPos_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SetPos_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SetPos_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 serialNum = 2;
  inline bool has_serialNum() const;
  inline void clear_serialNum();
  static const int kSerialNumFieldNumber = 2;
  inline ::google::protobuf::int32 serialNum() const;
  inline void set_serialNum(::google::protobuf::int32 value);
  
  // optional .PB_Vector3f position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::PB_Vector3f& position() const;
  inline ::PB_Vector3f* mutable_position();
  inline ::PB_Vector3f* release_position();
  
  // @@protoc_insertion_point(class_scope:NetProto_SetPos)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_serialNum();
  inline void clear_has_serialNum();
  inline void set_has_position();
  inline void clear_has_position();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 serialNum_;
  ::PB_Vector3f* position_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SetPos* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Die : public ::google::protobuf::Message {
 public:
  NetProto_Die();
  virtual ~NetProto_Die();
  
  NetProto_Die(const NetProto_Die& from);
  
  inline NetProto_Die& operator=(const NetProto_Die& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Die& default_instance();
  
  void Swap(NetProto_Die* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Die* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Die& from);
  void MergeFrom(const NetProto_Die& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Die_ID ID;
  static const ID GROUPID = NetProto_Die_ID_GROUPID;
  static const ID UNITID = NetProto_Die_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Die_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Die_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Die_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Die_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Die_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Die_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Die_ID_Parse(name, value);
  }
  
  typedef NetProto_Die_Type Type;
  static const Type PLAYER = NetProto_Die_Type_PLAYER;
  static const Type NPC = NetProto_Die_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_Die_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Die_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Die_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Die_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Die_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Die_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Die_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Die.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Die_Type type() const;
  inline void set_type(::NetProto_Die_Type value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_Die.Type mType = 3;
  inline bool has_mType() const;
  inline void clear_mType();
  static const int kMTypeFieldNumber = 3;
  inline ::NetProto_Die_Type mType() const;
  inline void set_mType(::NetProto_Die_Type value);
  
  // optional int32 mID = 4;
  inline bool has_mID() const;
  inline void clear_mID();
  static const int kMIDFieldNumber = 4;
  inline ::google::protobuf::int32 mID() const;
  inline void set_mID(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Die)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mType();
  inline void clear_has_mType();
  inline void set_has_mID();
  inline void clear_has_mID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  int mType_;
  ::google::protobuf::int32 mID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Die* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Revive : public ::google::protobuf::Message {
 public:
  NetProto_Revive();
  virtual ~NetProto_Revive();
  
  NetProto_Revive(const NetProto_Revive& from);
  
  inline NetProto_Revive& operator=(const NetProto_Revive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Revive& default_instance();
  
  void Swap(NetProto_Revive* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Revive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Revive& from);
  void MergeFrom(const NetProto_Revive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Revive_ID ID;
  static const ID GROUPID = NetProto_Revive_ID_GROUPID;
  static const ID UNITID = NetProto_Revive_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Revive_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Revive_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Revive_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Revive_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Revive_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Revive_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Revive_ID_Parse(name, value);
  }
  
  typedef NetProto_Revive_Type Type;
  static const Type PLAYER = NetProto_Revive_Type_PLAYER;
  static const Type NPC = NetProto_Revive_Type_NPC;
  static const Type PET = NetProto_Revive_Type_PET;
  static inline bool Type_IsValid(int value) {
    return NetProto_Revive_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Revive_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Revive_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Revive_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Revive_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Revive_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Revive_Type_Parse(name, value);
  }
  
  typedef NetProto_Revive_Way Way;
  static const Way CUR = NetProto_Revive_Way_CUR;
  static const Way BEGIN = NetProto_Revive_Way_BEGIN;
  static const Way CITY = NetProto_Revive_Way_CITY;
  static inline bool Way_IsValid(int value) {
    return NetProto_Revive_Way_IsValid(value);
  }
  static const Way Way_MIN =
    NetProto_Revive_Way_Way_MIN;
  static const Way Way_MAX =
    NetProto_Revive_Way_Way_MAX;
  static const int Way_ARRAYSIZE =
    NetProto_Revive_Way_Way_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Way_descriptor() {
    return NetProto_Revive_Way_descriptor();
  }
  static inline const ::std::string& Way_Name(Way value) {
    return NetProto_Revive_Way_Name(value);
  }
  static inline bool Way_Parse(const ::std::string& name,
      Way* value) {
    return NetProto_Revive_Way_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Revive.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Revive_Type type() const;
  inline void set_type(::NetProto_Revive_Type value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .PB_Vector2i coord = 3;
  inline bool has_coord() const;
  inline void clear_coord();
  static const int kCoordFieldNumber = 3;
  inline const ::PB_Vector2i& coord() const;
  inline ::PB_Vector2i* mutable_coord();
  inline ::PB_Vector2i* release_coord();
  
  // optional float hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline float hp() const;
  inline void set_hp(float value);
  
  // optional bool changeScene = 5;
  inline bool has_changeScene() const;
  inline void clear_changeScene();
  static const int kChangeSceneFieldNumber = 5;
  inline bool changeScene() const;
  inline void set_changeScene(bool value);
  
  // optional .NetProto_Revive.Way way = 6;
  inline bool has_way() const;
  inline void clear_way();
  static const int kWayFieldNumber = 6;
  inline ::NetProto_Revive_Way way() const;
  inline void set_way(::NetProto_Revive_Way value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Revive)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_coord();
  inline void clear_has_coord();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_changeScene();
  inline void clear_has_changeScene();
  inline void set_has_way();
  inline void clear_has_way();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  ::PB_Vector2i* coord_;
  float hp_;
  bool changeScene_;
  int way_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Revive* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyExp : public ::google::protobuf::Message {
 public:
  NetProto_ModifyExp();
  virtual ~NetProto_ModifyExp();
  
  NetProto_ModifyExp(const NetProto_ModifyExp& from);
  
  inline NetProto_ModifyExp& operator=(const NetProto_ModifyExp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyExp& default_instance();
  
  void Swap(NetProto_ModifyExp* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyExp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyExp& from);
  void MergeFrom(const NetProto_ModifyExp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyExp_ID ID;
  static const ID GROUPID = NetProto_ModifyExp_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyExp_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyExp_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyExp_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyExp_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyExp_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyExp_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyExp_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyExp_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyExp)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 exp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyExp* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PickItem : public ::google::protobuf::Message {
 public:
  NetProto_PickItem();
  virtual ~NetProto_PickItem();
  
  NetProto_PickItem(const NetProto_PickItem& from);
  
  inline NetProto_PickItem& operator=(const NetProto_PickItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PickItem& default_instance();
  
  void Swap(NetProto_PickItem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PickItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PickItem& from);
  void MergeFrom(const NetProto_PickItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PickItem_ID ID;
  static const ID GROUPID = NetProto_PickItem_ID_GROUPID;
  static const ID UNITID = NetProto_PickItem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PickItem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PickItem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PickItem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PickItem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PickItem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PickItem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PickItem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 dropList = 1;
  inline bool has_dropList() const;
  inline void clear_dropList();
  static const int kDropListFieldNumber = 1;
  inline ::google::protobuf::int32 dropList() const;
  inline void set_dropList(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 packagePos = 3;
  inline bool has_packagePos() const;
  inline void clear_packagePos();
  static const int kPackagePosFieldNumber = 3;
  inline ::google::protobuf::int32 packagePos() const;
  inline void set_packagePos(::google::protobuf::int32 value);
  
  // optional int32 owner = 4;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 4;
  inline ::google::protobuf::int32 owner() const;
  inline void set_owner(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PickItem)
 private:
  inline void set_has_dropList();
  inline void clear_has_dropList();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_packagePos();
  inline void clear_has_packagePos();
  inline void set_has_owner();
  inline void clear_has_owner();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 dropList_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 packagePos_;
  ::google::protobuf::int32 owner_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PickItem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_LevelUp : public ::google::protobuf::Message {
 public:
  NetProto_LevelUp();
  virtual ~NetProto_LevelUp();
  
  NetProto_LevelUp(const NetProto_LevelUp& from);
  
  inline NetProto_LevelUp& operator=(const NetProto_LevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_LevelUp& default_instance();
  
  void Swap(NetProto_LevelUp* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_LevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_LevelUp& from);
  void MergeFrom(const NetProto_LevelUp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_LevelUp_ID ID;
  static const ID GROUPID = NetProto_LevelUp_ID_GROUPID;
  static const ID UNITID = NetProto_LevelUp_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_LevelUp_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_LevelUp_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_LevelUp_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_LevelUp_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_LevelUp_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_LevelUp_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_LevelUp_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_LevelUp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_LevelUp* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyMoney : public ::google::protobuf::Message {
 public:
  NetProto_ModifyMoney();
  virtual ~NetProto_ModifyMoney();
  
  NetProto_ModifyMoney(const NetProto_ModifyMoney& from);
  
  inline NetProto_ModifyMoney& operator=(const NetProto_ModifyMoney& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyMoney& default_instance();
  
  void Swap(NetProto_ModifyMoney* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyMoney& from);
  void MergeFrom(const NetProto_ModifyMoney& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyMoney_ID ID;
  static const ID GROUPID = NetProto_ModifyMoney_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyMoney_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyMoney_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyMoney_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyMoney_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyMoney_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyMoney_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyMoney_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyMoney_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyMoney)
 private:
  inline void set_has_money();
  inline void clear_has_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyMoney* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GetItem : public ::google::protobuf::Message {
 public:
  NetProto_GetItem();
  virtual ~NetProto_GetItem();
  
  NetProto_GetItem(const NetProto_GetItem& from);
  
  inline NetProto_GetItem& operator=(const NetProto_GetItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GetItem& default_instance();
  
  void Swap(NetProto_GetItem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GetItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GetItem& from);
  void MergeFrom(const NetProto_GetItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GetItem_ID ID;
  static const ID GROUPID = NetProto_GetItem_ID_GROUPID;
  static const ID UNITID = NetProto_GetItem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GetItem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GetItem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GetItem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GetItem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GetItem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GetItem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GetItem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_ItemInfo item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::PB_ItemInfo& item() const;
  inline ::PB_ItemInfo* mutable_item();
  inline ::PB_ItemInfo* release_item();
  
  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GetItem)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_ItemInfo* item_;
  ::google::protobuf::int32 pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GetItem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_QueryPlayer : public ::google::protobuf::Message {
 public:
  NetProto_QueryPlayer();
  virtual ~NetProto_QueryPlayer();
  
  NetProto_QueryPlayer(const NetProto_QueryPlayer& from);
  
  inline NetProto_QueryPlayer& operator=(const NetProto_QueryPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_QueryPlayer& default_instance();
  
  void Swap(NetProto_QueryPlayer* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_QueryPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_QueryPlayer& from);
  void MergeFrom(const NetProto_QueryPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_QueryPlayer_ID ID;
  static const ID GROUPID = NetProto_QueryPlayer_ID_GROUPID;
  static const ID UNITID = NetProto_QueryPlayer_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_QueryPlayer_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_QueryPlayer_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_QueryPlayer_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_QueryPlayer_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_QueryPlayer_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_QueryPlayer_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_QueryPlayer_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional .PB_PlayerAtt att = 2;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline const ::PB_PlayerAtt& att() const;
  inline ::PB_PlayerAtt* mutable_att();
  inline ::PB_PlayerAtt* release_att();
  
  // optional bool online = 3;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 3;
  inline bool online() const;
  inline void set_online(bool value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:NetProto_QueryPlayer)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::PB_PlayerAtt* att_;
  ::std::string* name_;
  bool online_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_QueryPlayer* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PlayerStatus : public ::google::protobuf::Message {
 public:
  NetProto_PlayerStatus();
  virtual ~NetProto_PlayerStatus();
  
  NetProto_PlayerStatus(const NetProto_PlayerStatus& from);
  
  inline NetProto_PlayerStatus& operator=(const NetProto_PlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PlayerStatus& default_instance();
  
  void Swap(NetProto_PlayerStatus* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PlayerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PlayerStatus& from);
  void MergeFrom(const NetProto_PlayerStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PlayerStatus_ID ID;
  static const ID GROUPID = NetProto_PlayerStatus_ID_GROUPID;
  static const ID UNITID = NetProto_PlayerStatus_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PlayerStatus_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PlayerStatus_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PlayerStatus_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PlayerStatus_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PlayerStatus_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PlayerStatus_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PlayerStatus_ID_Parse(name, value);
  }
  
  typedef NetProto_PlayerStatus_Status Status;
  static const Status OFFLINE = NetProto_PlayerStatus_Status_OFFLINE;
  static const Status ONLINE = NetProto_PlayerStatus_Status_ONLINE;
  static inline bool Status_IsValid(int value) {
    return NetProto_PlayerStatus_Status_IsValid(value);
  }
  static const Status Status_MIN =
    NetProto_PlayerStatus_Status_Status_MIN;
  static const Status Status_MAX =
    NetProto_PlayerStatus_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    NetProto_PlayerStatus_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return NetProto_PlayerStatus_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return NetProto_PlayerStatus_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return NetProto_PlayerStatus_Status_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int64 roles = 1;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 1;
  inline ::google::protobuf::int64 roles(int index) const;
  inline void set_roles(int index, ::google::protobuf::int64 value);
  inline void add_roles(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      roles() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_roles();
  
  // repeated .NetProto_PlayerStatus.Status statuses = 2;
  inline int statuses_size() const;
  inline void clear_statuses();
  static const int kStatusesFieldNumber = 2;
  inline ::NetProto_PlayerStatus_Status statuses(int index) const;
  inline void set_statuses(int index, ::NetProto_PlayerStatus_Status value);
  inline void add_statuses(::NetProto_PlayerStatus_Status value);
  inline const ::google::protobuf::RepeatedField<int>& statuses() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_statuses();
  
  // repeated int32 level = 3;
  inline int level_size() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level(int index) const;
  inline void set_level(int index, ::google::protobuf::int32 value);
  inline void add_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_level();
  
  // repeated int32 vip = 4;
  inline int vip_size() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 4;
  inline ::google::protobuf::int32 vip(int index) const;
  inline void set_vip(int index, ::google::protobuf::int32 value);
  inline void add_vip(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vip() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vip();
  
  // @@protoc_insertion_point(class_scope:NetProto_PlayerStatus)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > roles_;
  ::google::protobuf::RepeatedField<int> statuses_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PlayerStatus* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddFriend : public ::google::protobuf::Message {
 public:
  NetProto_AddFriend();
  virtual ~NetProto_AddFriend();
  
  NetProto_AddFriend(const NetProto_AddFriend& from);
  
  inline NetProto_AddFriend& operator=(const NetProto_AddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddFriend& default_instance();
  
  void Swap(NetProto_AddFriend* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddFriend& from);
  void MergeFrom(const NetProto_AddFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddFriend_ID ID;
  static const ID GROUPID = NetProto_AddFriend_ID_GROUPID;
  static const ID UNITID = NetProto_AddFriend_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddFriend_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddFriend_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddFriend_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddFriend_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddFriend_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddFriend_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddFriend_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .PB_ProfessionInfo.Type professionType = 3;
  inline bool has_professionType() const;
  inline void clear_professionType();
  static const int kProfessionTypeFieldNumber = 3;
  inline ::PB_ProfessionInfo_Type professionType() const;
  inline void set_professionType(::PB_ProfessionInfo_Type value);
  
  // @@protoc_insertion_point(class_scope:NetProto_AddFriend)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_professionType();
  inline void clear_has_professionType();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::std::string* name_;
  int professionType_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddFriend* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DelFriend : public ::google::protobuf::Message {
 public:
  NetProto_DelFriend();
  virtual ~NetProto_DelFriend();
  
  NetProto_DelFriend(const NetProto_DelFriend& from);
  
  inline NetProto_DelFriend& operator=(const NetProto_DelFriend& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DelFriend& default_instance();
  
  void Swap(NetProto_DelFriend* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DelFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DelFriend& from);
  void MergeFrom(const NetProto_DelFriend& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DelFriend_ID ID;
  static const ID GROUPID = NetProto_DelFriend_ID_GROUPID;
  static const ID UNITID = NetProto_DelFriend_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DelFriend_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DelFriend_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DelFriend_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DelFriend_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DelFriend_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DelFriend_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DelFriend_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DelFriend)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DelFriend* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyHP : public ::google::protobuf::Message {
 public:
  NetProto_ModifyHP();
  virtual ~NetProto_ModifyHP();
  
  NetProto_ModifyHP(const NetProto_ModifyHP& from);
  
  inline NetProto_ModifyHP& operator=(const NetProto_ModifyHP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyHP& default_instance();
  
  void Swap(NetProto_ModifyHP* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyHP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyHP& from);
  void MergeFrom(const NetProto_ModifyHP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyHP_ID ID;
  static const ID GROUPID = NetProto_ModifyHP_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyHP_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyHP_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyHP_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyHP_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyHP_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyHP_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyHP_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyHP_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyHP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hp();
  inline void clear_has_hp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 hp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyHP* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyMana : public ::google::protobuf::Message {
 public:
  NetProto_ModifyMana();
  virtual ~NetProto_ModifyMana();
  
  NetProto_ModifyMana(const NetProto_ModifyMana& from);
  
  inline NetProto_ModifyMana& operator=(const NetProto_ModifyMana& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyMana& default_instance();
  
  void Swap(NetProto_ModifyMana* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyMana* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyMana& from);
  void MergeFrom(const NetProto_ModifyMana& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyMana_ID ID;
  static const ID GROUPID = NetProto_ModifyMana_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyMana_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyMana_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyMana_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyMana_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyMana_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyMana_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyMana_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyMana_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 mana = 2;
  inline bool has_mana() const;
  inline void clear_mana();
  static const int kManaFieldNumber = 2;
  inline ::google::protobuf::int32 mana() const;
  inline void set_mana(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyMana)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mana();
  inline void clear_has_mana();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mana_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyMana* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyFaction : public ::google::protobuf::Message {
 public:
  NetProto_ModifyFaction();
  virtual ~NetProto_ModifyFaction();
  
  NetProto_ModifyFaction(const NetProto_ModifyFaction& from);
  
  inline NetProto_ModifyFaction& operator=(const NetProto_ModifyFaction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyFaction& default_instance();
  
  void Swap(NetProto_ModifyFaction* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyFaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyFaction& from);
  void MergeFrom(const NetProto_ModifyFaction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyFaction_ID ID;
  static const ID GROUPID = NetProto_ModifyFaction_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyFaction_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyFaction_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyFaction_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyFaction_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyFaction_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyFaction_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyFaction_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyFaction_ID_Parse(name, value);
  }
  
  typedef NetProto_ModifyFaction_Type Type;
  static const Type PLAYER = NetProto_ModifyFaction_Type_PLAYER;
  static const Type NPC = NetProto_ModifyFaction_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_ModifyFaction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_ModifyFaction_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_ModifyFaction_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_ModifyFaction_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_ModifyFaction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_ModifyFaction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_ModifyFaction_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_ModifyFaction.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_ModifyFaction_Type type() const;
  inline void set_type(::NetProto_ModifyFaction_Type value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 selfFaction = 3;
  inline bool has_selfFaction() const;
  inline void clear_selfFaction();
  static const int kSelfFactionFieldNumber = 3;
  inline ::google::protobuf::int32 selfFaction() const;
  inline void set_selfFaction(::google::protobuf::int32 value);
  
  // optional int32 friendlyFaction = 4;
  inline bool has_friendlyFaction() const;
  inline void clear_friendlyFaction();
  static const int kFriendlyFactionFieldNumber = 4;
  inline ::google::protobuf::int32 friendlyFaction() const;
  inline void set_friendlyFaction(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyFaction)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_selfFaction();
  inline void clear_has_selfFaction();
  inline void set_has_friendlyFaction();
  inline void clear_has_friendlyFaction();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 selfFaction_;
  ::google::protobuf::int32 friendlyFaction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyFaction* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyMaxHP : public ::google::protobuf::Message {
 public:
  NetProto_ModifyMaxHP();
  virtual ~NetProto_ModifyMaxHP();
  
  NetProto_ModifyMaxHP(const NetProto_ModifyMaxHP& from);
  
  inline NetProto_ModifyMaxHP& operator=(const NetProto_ModifyMaxHP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyMaxHP& default_instance();
  
  void Swap(NetProto_ModifyMaxHP* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyMaxHP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyMaxHP& from);
  void MergeFrom(const NetProto_ModifyMaxHP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyMaxHP_ID ID;
  static const ID GROUPID = NetProto_ModifyMaxHP_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyMaxHP_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyMaxHP_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyMaxHP_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyMaxHP_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyMaxHP_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyMaxHP_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyMaxHP_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyMaxHP_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 maxHP = 2;
  inline bool has_maxHP() const;
  inline void clear_maxHP();
  static const int kMaxHPFieldNumber = 2;
  inline ::google::protobuf::int32 maxHP() const;
  inline void set_maxHP(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyMaxHP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_maxHP();
  inline void clear_has_maxHP();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 maxHP_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyMaxHP* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RequestPK : public ::google::protobuf::Message {
 public:
  NetProto_RequestPK();
  virtual ~NetProto_RequestPK();
  
  NetProto_RequestPK(const NetProto_RequestPK& from);
  
  inline NetProto_RequestPK& operator=(const NetProto_RequestPK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RequestPK& default_instance();
  
  void Swap(NetProto_RequestPK* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RequestPK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RequestPK& from);
  void MergeFrom(const NetProto_RequestPK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RequestPK_ID ID;
  static const ID GROUPID = NetProto_RequestPK_ID_GROUPID;
  static const ID UNITID = NetProto_RequestPK_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RequestPK_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RequestPK_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RequestPK_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RequestPK_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RequestPK_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RequestPK_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RequestPK_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_FriendInfo target = 1;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 1;
  inline const ::PB_FriendInfo& target() const;
  inline ::PB_FriendInfo* mutable_target();
  inline ::PB_FriendInfo* release_target();
  
  // optional int32 res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RequestPK)
 private:
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_FriendInfo* target_;
  ::google::protobuf::int32 res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RequestPK* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ApplyPK : public ::google::protobuf::Message {
 public:
  NetProto_ApplyPK();
  virtual ~NetProto_ApplyPK();
  
  NetProto_ApplyPK(const NetProto_ApplyPK& from);
  
  inline NetProto_ApplyPK& operator=(const NetProto_ApplyPK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ApplyPK& default_instance();
  
  void Swap(NetProto_ApplyPK* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ApplyPK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ApplyPK& from);
  void MergeFrom(const NetProto_ApplyPK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ApplyPK_ID ID;
  static const ID GROUPID = NetProto_ApplyPK_ID_GROUPID;
  static const ID UNITID = NetProto_ApplyPK_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ApplyPK_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ApplyPK_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ApplyPK_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ApplyPK_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ApplyPK_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ApplyPK_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ApplyPK_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline ::google::protobuf::int64 origin() const;
  inline void set_origin(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ApplyPK)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 origin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ApplyPK* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Strong : public ::google::protobuf::Message {
 public:
  NetProto_Strong();
  virtual ~NetProto_Strong();
  
  NetProto_Strong(const NetProto_Strong& from);
  
  inline NetProto_Strong& operator=(const NetProto_Strong& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Strong& default_instance();
  
  void Swap(NetProto_Strong* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Strong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Strong& from);
  void MergeFrom(const NetProto_Strong& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Strong_ID ID;
  static const ID GROUPID = NetProto_Strong_ID_GROUPID;
  static const ID UNITID = NetProto_Strong_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Strong_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Strong_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Strong_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Strong_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Strong_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Strong_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Strong_ID_Parse(name, value);
  }
  
  typedef NetProto_Strong_Pos Pos;
  static const Pos BODY = NetProto_Strong_Pos_BODY;
  static const Pos PACKAGE = NetProto_Strong_Pos_PACKAGE;
  static inline bool Pos_IsValid(int value) {
    return NetProto_Strong_Pos_IsValid(value);
  }
  static const Pos Pos_MIN =
    NetProto_Strong_Pos_Pos_MIN;
  static const Pos Pos_MAX =
    NetProto_Strong_Pos_Pos_MAX;
  static const int Pos_ARRAYSIZE =
    NetProto_Strong_Pos_Pos_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pos_descriptor() {
    return NetProto_Strong_Pos_descriptor();
  }
  static inline const ::std::string& Pos_Name(Pos value) {
    return NetProto_Strong_Pos_Name(value);
  }
  static inline bool Pos_Parse(const ::std::string& name,
      Pos* value) {
    return NetProto_Strong_Pos_Parse(name, value);
  }
  
  typedef NetProto_Strong_Result Result;
  static const Result SUCCESS = NetProto_Strong_Result_SUCCESS;
  static const Result NOTHING = NetProto_Strong_Result_NOTHING;
  static const Result FAILURE = NetProto_Strong_Result_FAILURE;
  static inline bool Result_IsValid(int value) {
    return NetProto_Strong_Result_IsValid(value);
  }
  static const Result Result_MIN =
    NetProto_Strong_Result_Result_MIN;
  static const Result Result_MAX =
    NetProto_Strong_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    NetProto_Strong_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return NetProto_Strong_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return NetProto_Strong_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return NetProto_Strong_Result_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Strong.Pos pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::NetProto_Strong_Pos pos() const;
  inline void set_pos(::NetProto_Strong_Pos value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_Strong.Result results = 3;
  inline bool has_results() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 3;
  inline ::NetProto_Strong_Result results() const;
  inline void set_results(::NetProto_Strong_Result value);
  
  // optional bool protect = 4;
  inline bool has_protect() const;
  inline void clear_protect();
  static const int kProtectFieldNumber = 4;
  inline bool protect() const;
  inline void set_protect(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Strong)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_results();
  inline void clear_has_results();
  inline void set_has_protect();
  inline void clear_has_protect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int pos_;
  ::google::protobuf::int32 id_;
  int results_;
  bool protect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Strong* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ClearStrong : public ::google::protobuf::Message {
 public:
  NetProto_ClearStrong();
  virtual ~NetProto_ClearStrong();
  
  NetProto_ClearStrong(const NetProto_ClearStrong& from);
  
  inline NetProto_ClearStrong& operator=(const NetProto_ClearStrong& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ClearStrong& default_instance();
  
  void Swap(NetProto_ClearStrong* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ClearStrong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ClearStrong& from);
  void MergeFrom(const NetProto_ClearStrong& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ClearStrong_ID ID;
  static const ID GROUPID = NetProto_ClearStrong_ID_GROUPID;
  static const ID UNITID = NetProto_ClearStrong_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ClearStrong_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ClearStrong_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ClearStrong_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ClearStrong_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ClearStrong_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ClearStrong_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ClearStrong_ID_Parse(name, value);
  }
  
  typedef NetProto_ClearStrong_Pos Pos;
  static const Pos BODY = NetProto_ClearStrong_Pos_BODY;
  static const Pos PACKAGE = NetProto_ClearStrong_Pos_PACKAGE;
  static inline bool Pos_IsValid(int value) {
    return NetProto_ClearStrong_Pos_IsValid(value);
  }
  static const Pos Pos_MIN =
    NetProto_ClearStrong_Pos_Pos_MIN;
  static const Pos Pos_MAX =
    NetProto_ClearStrong_Pos_Pos_MAX;
  static const int Pos_ARRAYSIZE =
    NetProto_ClearStrong_Pos_Pos_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pos_descriptor() {
    return NetProto_ClearStrong_Pos_descriptor();
  }
  static inline const ::std::string& Pos_Name(Pos value) {
    return NetProto_ClearStrong_Pos_Name(value);
  }
  static inline bool Pos_Parse(const ::std::string& name,
      Pos* value) {
    return NetProto_ClearStrong_Pos_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_ClearStrong.Pos pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::NetProto_ClearStrong_Pos pos() const;
  inline void set_pos(::NetProto_ClearStrong_Pos value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ClearStrong)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int pos_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ClearStrong* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Transform : public ::google::protobuf::Message {
 public:
  NetProto_Transform();
  virtual ~NetProto_Transform();
  
  NetProto_Transform(const NetProto_Transform& from);
  
  inline NetProto_Transform& operator=(const NetProto_Transform& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Transform& default_instance();
  
  void Swap(NetProto_Transform* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Transform* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Transform& from);
  void MergeFrom(const NetProto_Transform& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Transform_ID ID;
  static const ID GROUPID = NetProto_Transform_ID_GROUPID;
  static const ID UNITID = NetProto_Transform_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Transform_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Transform_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Transform_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Transform_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Transform_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Transform_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Transform_ID_Parse(name, value);
  }
  
  typedef NetProto_Transform_Type Type;
  static const Type PLAYER = NetProto_Transform_Type_PLAYER;
  static const Type NPC = NetProto_Transform_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_Transform_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Transform_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Transform_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Transform_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Transform_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Transform_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Transform_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_Transform.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::NetProto_Transform_Type type() const;
  inline void set_type(::NetProto_Transform_Type value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Transform)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Transform* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Mount : public ::google::protobuf::Message {
 public:
  NetProto_Mount();
  virtual ~NetProto_Mount();
  
  NetProto_Mount(const NetProto_Mount& from);
  
  inline NetProto_Mount& operator=(const NetProto_Mount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Mount& default_instance();
  
  void Swap(NetProto_Mount* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Mount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Mount& from);
  void MergeFrom(const NetProto_Mount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Mount_ID ID;
  static const ID GROUPID = NetProto_Mount_ID_GROUPID;
  static const ID UNITID = NetProto_Mount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Mount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Mount_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Mount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Mount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Mount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Mount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Mount_ID_Parse(name, value);
  }
  
  typedef NetProto_Mount_Pos Pos;
  static const Pos BODY = NetProto_Mount_Pos_BODY;
  static const Pos PACKAGE = NetProto_Mount_Pos_PACKAGE;
  static inline bool Pos_IsValid(int value) {
    return NetProto_Mount_Pos_IsValid(value);
  }
  static const Pos Pos_MIN =
    NetProto_Mount_Pos_Pos_MIN;
  static const Pos Pos_MAX =
    NetProto_Mount_Pos_Pos_MAX;
  static const int Pos_ARRAYSIZE =
    NetProto_Mount_Pos_Pos_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pos_descriptor() {
    return NetProto_Mount_Pos_descriptor();
  }
  static inline const ::std::string& Pos_Name(Pos value) {
    return NetProto_Mount_Pos_Name(value);
  }
  static inline bool Pos_Parse(const ::std::string& name,
      Pos* value) {
    return NetProto_Mount_Pos_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Mount.Pos pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::NetProto_Mount_Pos pos() const;
  inline void set_pos(::NetProto_Mount_Pos value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 mountPos = 3;
  inline bool has_mountPos() const;
  inline void clear_mountPos();
  static const int kMountPosFieldNumber = 3;
  inline ::google::protobuf::int32 mountPos() const;
  inline void set_mountPos(::google::protobuf::int32 value);
  
  // optional int32 gemPos = 4;
  inline bool has_gemPos() const;
  inline void clear_gemPos();
  static const int kGemPosFieldNumber = 4;
  inline ::google::protobuf::int32 gemPos() const;
  inline void set_gemPos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Mount)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mountPos();
  inline void clear_has_mountPos();
  inline void set_has_gemPos();
  inline void clear_has_gemPos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int pos_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mountPos_;
  ::google::protobuf::int32 gemPos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Mount* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_TalkTo : public ::google::protobuf::Message {
 public:
  NetProto_TalkTo();
  virtual ~NetProto_TalkTo();
  
  NetProto_TalkTo(const NetProto_TalkTo& from);
  
  inline NetProto_TalkTo& operator=(const NetProto_TalkTo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_TalkTo& default_instance();
  
  void Swap(NetProto_TalkTo* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_TalkTo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_TalkTo& from);
  void MergeFrom(const NetProto_TalkTo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_TalkTo_ID ID;
  static const ID GROUPID = NetProto_TalkTo_ID_GROUPID;
  static const ID UNITID = NetProto_TalkTo_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_TalkTo_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_TalkTo_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_TalkTo_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_TalkTo_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_TalkTo_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_TalkTo_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_TalkTo_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 map = 2;
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 2;
  inline ::google::protobuf::int32 map() const;
  inline void set_map(::google::protobuf::int32 value);
  
  // optional int32 npc = 3;
  inline bool has_npc() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 3;
  inline ::google::protobuf::int32 npc() const;
  inline void set_npc(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_TalkTo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_npc();
  inline void clear_has_npc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 map_;
  ::google::protobuf::int32 npc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_TalkTo* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Recover : public ::google::protobuf::Message {
 public:
  NetProto_Recover();
  virtual ~NetProto_Recover();
  
  NetProto_Recover(const NetProto_Recover& from);
  
  inline NetProto_Recover& operator=(const NetProto_Recover& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Recover& default_instance();
  
  void Swap(NetProto_Recover* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Recover* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Recover& from);
  void MergeFrom(const NetProto_Recover& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Recover_ID ID;
  static const ID GROUPID = NetProto_Recover_ID_GROUPID;
  static const ID UNITID = NetProto_Recover_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Recover_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Recover_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Recover_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Recover_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Recover_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Recover_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Recover_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Recover)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Recover* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddBloodNode : public ::google::protobuf::Message {
 public:
  NetProto_AddBloodNode();
  virtual ~NetProto_AddBloodNode();
  
  NetProto_AddBloodNode(const NetProto_AddBloodNode& from);
  
  inline NetProto_AddBloodNode& operator=(const NetProto_AddBloodNode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddBloodNode& default_instance();
  
  void Swap(NetProto_AddBloodNode* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddBloodNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddBloodNode& from);
  void MergeFrom(const NetProto_AddBloodNode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddBloodNode_ID ID;
  static const ID GROUPID = NetProto_AddBloodNode_ID_GROUPID;
  static const ID UNITID = NetProto_AddBloodNode_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddBloodNode_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddBloodNode_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddBloodNode_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddBloodNode_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddBloodNode_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddBloodNode_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddBloodNode_ID_Parse(name, value);
  }
  
  typedef NetProto_AddBloodNode_Type Type;
  static const Type NORMAL = NetProto_AddBloodNode_Type_NORMAL;
  static const Type PERFECT = NetProto_AddBloodNode_Type_PERFECT;
  static const Type LINE = NetProto_AddBloodNode_Type_LINE;
  static inline bool Type_IsValid(int value) {
    return NetProto_AddBloodNode_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_AddBloodNode_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_AddBloodNode_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_AddBloodNode_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_AddBloodNode_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_AddBloodNode_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_AddBloodNode_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_AddBloodNode.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_AddBloodNode_Type type() const;
  inline void set_type(::NetProto_AddBloodNode_Type value);
  
  // optional bool res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline bool res() const;
  inline void set_res(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_AddBloodNode)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  bool res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddBloodNode* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddBloodEffect : public ::google::protobuf::Message {
 public:
  NetProto_AddBloodEffect();
  virtual ~NetProto_AddBloodEffect();
  
  NetProto_AddBloodEffect(const NetProto_AddBloodEffect& from);
  
  inline NetProto_AddBloodEffect& operator=(const NetProto_AddBloodEffect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddBloodEffect& default_instance();
  
  void Swap(NetProto_AddBloodEffect* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddBloodEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddBloodEffect& from);
  void MergeFrom(const NetProto_AddBloodEffect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddBloodEffect_ID ID;
  static const ID GROUPID = NetProto_AddBloodEffect_ID_GROUPID;
  static const ID UNITID = NetProto_AddBloodEffect_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddBloodEffect_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddBloodEffect_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddBloodEffect_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddBloodEffect_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddBloodEffect_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddBloodEffect_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddBloodEffect_ID_Parse(name, value);
  }
  
  typedef NetProto_AddBloodEffect_Type Type;
  static const Type NORMAL = NetProto_AddBloodEffect_Type_NORMAL;
  static const Type ALL = NetProto_AddBloodEffect_Type_ALL;
  static inline bool Type_IsValid(int value) {
    return NetProto_AddBloodEffect_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_AddBloodEffect_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_AddBloodEffect_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_AddBloodEffect_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_AddBloodEffect_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_AddBloodEffect_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_AddBloodEffect_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_AddBloodEffect.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_AddBloodEffect_Type type() const;
  inline void set_type(::NetProto_AddBloodEffect_Type value);
  
  // optional int32 soul = 2;
  inline bool has_soul() const;
  inline void clear_soul();
  static const int kSoulFieldNumber = 2;
  inline ::google::protobuf::int32 soul() const;
  inline void set_soul(::google::protobuf::int32 value);
  
  // optional int32 res = 3;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 3;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_AddBloodEffect)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_soul();
  inline void clear_has_soul();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 soul_;
  ::google::protobuf::int32 res_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddBloodEffect* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Explore : public ::google::protobuf::Message {
 public:
  NetProto_Explore();
  virtual ~NetProto_Explore();
  
  NetProto_Explore(const NetProto_Explore& from);
  
  inline NetProto_Explore& operator=(const NetProto_Explore& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Explore& default_instance();
  
  void Swap(NetProto_Explore* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Explore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Explore& from);
  void MergeFrom(const NetProto_Explore& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Explore_ID ID;
  static const ID GROUPID = NetProto_Explore_ID_GROUPID;
  static const ID UNITID = NetProto_Explore_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Explore_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Explore_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Explore_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Explore_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Explore_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Explore_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Explore_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .ExploreInfo.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ExploreInfo_Type type() const;
  inline void set_type(::ExploreInfo_Type value);
  
  // optional int32 event1 = 2;
  inline bool has_event1() const;
  inline void clear_event1();
  static const int kEvent1FieldNumber = 2;
  inline ::google::protobuf::int32 event1() const;
  inline void set_event1(::google::protobuf::int32 value);
  
  // optional int32 event2 = 3;
  inline bool has_event2() const;
  inline void clear_event2();
  static const int kEvent2FieldNumber = 3;
  inline ::google::protobuf::int32 event2() const;
  inline void set_event2(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Explore)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_event1();
  inline void clear_has_event1();
  inline void set_has_event2();
  inline void clear_has_event2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 event1_;
  ::google::protobuf::int32 event2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Explore* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UnlockBlood : public ::google::protobuf::Message {
 public:
  NetProto_UnlockBlood();
  virtual ~NetProto_UnlockBlood();
  
  NetProto_UnlockBlood(const NetProto_UnlockBlood& from);
  
  inline NetProto_UnlockBlood& operator=(const NetProto_UnlockBlood& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UnlockBlood& default_instance();
  
  void Swap(NetProto_UnlockBlood* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UnlockBlood* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UnlockBlood& from);
  void MergeFrom(const NetProto_UnlockBlood& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UnlockBlood_ID ID;
  static const ID GROUPID = NetProto_UnlockBlood_ID_GROUPID;
  static const ID UNITID = NetProto_UnlockBlood_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UnlockBlood_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UnlockBlood_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UnlockBlood_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UnlockBlood_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UnlockBlood_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UnlockBlood_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UnlockBlood_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_UnlockBlood)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UnlockBlood* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UpdatePos : public ::google::protobuf::Message {
 public:
  NetProto_UpdatePos();
  virtual ~NetProto_UpdatePos();
  
  NetProto_UpdatePos(const NetProto_UpdatePos& from);
  
  inline NetProto_UpdatePos& operator=(const NetProto_UpdatePos& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UpdatePos& default_instance();
  
  void Swap(NetProto_UpdatePos* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UpdatePos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UpdatePos& from);
  void MergeFrom(const NetProto_UpdatePos& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UpdatePos_ID ID;
  static const ID GROUPID = NetProto_UpdatePos_ID_GROUPID;
  static const ID UNITID = NetProto_UpdatePos_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UpdatePos_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UpdatePos_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UpdatePos_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UpdatePos_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UpdatePos_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UpdatePos_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UpdatePos_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .PB_Vector3f pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::PB_Vector3f& pos() const;
  inline ::PB_Vector3f* mutable_pos();
  inline ::PB_Vector3f* release_pos();
  
  // @@protoc_insertion_point(class_scope:NetProto_UpdatePos)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_Vector3f* pos_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UpdatePos* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SayHello : public ::google::protobuf::Message {
 public:
  NetProto_SayHello();
  virtual ~NetProto_SayHello();
  
  NetProto_SayHello(const NetProto_SayHello& from);
  
  inline NetProto_SayHello& operator=(const NetProto_SayHello& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SayHello& default_instance();
  
  void Swap(NetProto_SayHello* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SayHello* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SayHello& from);
  void MergeFrom(const NetProto_SayHello& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SayHello_ID ID;
  static const ID GROUPID = NetProto_SayHello_ID_GROUPID;
  static const ID UNITID = NetProto_SayHello_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SayHello_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SayHello_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SayHello_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SayHello_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SayHello_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SayHello_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SayHello_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 srcID = 1;
  inline bool has_srcID() const;
  inline void clear_srcID();
  static const int kSrcIDFieldNumber = 1;
  inline ::google::protobuf::int64 srcID() const;
  inline void set_srcID(::google::protobuf::int64 value);
  
  // optional string srcName = 2;
  inline bool has_srcName() const;
  inline void clear_srcName();
  static const int kSrcNameFieldNumber = 2;
  inline const ::std::string& srcName() const;
  inline void set_srcName(const ::std::string& value);
  inline void set_srcName(const char* value);
  inline void set_srcName(const char* value, size_t size);
  inline ::std::string* mutable_srcName();
  inline ::std::string* release_srcName();
  
  // optional int64 destID = 3;
  inline bool has_destID() const;
  inline void clear_destID();
  static const int kDestIDFieldNumber = 3;
  inline ::google::protobuf::int64 destID() const;
  inline void set_destID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SayHello)
 private:
  inline void set_has_srcID();
  inline void clear_has_srcID();
  inline void set_has_srcName();
  inline void clear_has_srcName();
  inline void set_has_destID();
  inline void clear_has_destID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 srcID_;
  ::std::string* srcName_;
  ::google::protobuf::int64 destID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SayHello* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_CompleteGuide : public ::google::protobuf::Message {
 public:
  NetProto_CompleteGuide();
  virtual ~NetProto_CompleteGuide();
  
  NetProto_CompleteGuide(const NetProto_CompleteGuide& from);
  
  inline NetProto_CompleteGuide& operator=(const NetProto_CompleteGuide& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_CompleteGuide& default_instance();
  
  void Swap(NetProto_CompleteGuide* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_CompleteGuide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_CompleteGuide& from);
  void MergeFrom(const NetProto_CompleteGuide& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_CompleteGuide_ID ID;
  static const ID GROUPID = NetProto_CompleteGuide_ID_GROUPID;
  static const ID UNITID = NetProto_CompleteGuide_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_CompleteGuide_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_CompleteGuide_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_CompleteGuide_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_CompleteGuide_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_CompleteGuide_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_CompleteGuide_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_CompleteGuide_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_CompleteGuide)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_CompleteGuide* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Arrange : public ::google::protobuf::Message {
 public:
  NetProto_Arrange();
  virtual ~NetProto_Arrange();
  
  NetProto_Arrange(const NetProto_Arrange& from);
  
  inline NetProto_Arrange& operator=(const NetProto_Arrange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Arrange& default_instance();
  
  void Swap(NetProto_Arrange* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Arrange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Arrange& from);
  void MergeFrom(const NetProto_Arrange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Arrange_ID ID;
  static const ID GROUPID = NetProto_Arrange_ID_GROUPID;
  static const ID UNITID = NetProto_Arrange_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Arrange_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Arrange_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Arrange_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Arrange_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Arrange_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Arrange_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Arrange_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_ItemPackage.Begin begin = 1;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 1;
  inline ::PB_ItemPackage_Begin begin() const;
  inline void set_begin(::PB_ItemPackage_Begin value);
  
  // repeated .PB_ItemInfo items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::PB_ItemInfo& items(int index) const;
  inline ::PB_ItemInfo* mutable_items(int index);
  inline ::PB_ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:NetProto_Arrange)
 private:
  inline void set_has_begin();
  inline void clear_has_begin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo > items_;
  int begin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Arrange* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_IgnorePK : public ::google::protobuf::Message {
 public:
  NetProto_IgnorePK();
  virtual ~NetProto_IgnorePK();
  
  NetProto_IgnorePK(const NetProto_IgnorePK& from);
  
  inline NetProto_IgnorePK& operator=(const NetProto_IgnorePK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_IgnorePK& default_instance();
  
  void Swap(NetProto_IgnorePK* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_IgnorePK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_IgnorePK& from);
  void MergeFrom(const NetProto_IgnorePK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_IgnorePK_ID ID;
  static const ID GROUPID = NetProto_IgnorePK_ID_GROUPID;
  static const ID UNITID = NetProto_IgnorePK_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_IgnorePK_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_IgnorePK_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_IgnorePK_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_IgnorePK_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_IgnorePK_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_IgnorePK_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_IgnorePK_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_IgnorePK)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_IgnorePK* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyRMB : public ::google::protobuf::Message {
 public:
  NetProto_ModifyRMB();
  virtual ~NetProto_ModifyRMB();
  
  NetProto_ModifyRMB(const NetProto_ModifyRMB& from);
  
  inline NetProto_ModifyRMB& operator=(const NetProto_ModifyRMB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyRMB& default_instance();
  
  void Swap(NetProto_ModifyRMB* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyRMB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyRMB& from);
  void MergeFrom(const NetProto_ModifyRMB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyRMB_ID ID;
  static const ID GROUPID = NetProto_ModifyRMB_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyRMB_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyRMB_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyRMB_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyRMB_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyRMB_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyRMB_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyRMB_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyRMB_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // optional int64 total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline ::google::protobuf::int64 total() const;
  inline void set_total(::google::protobuf::int64 value);
  
  // optional int64 totalCost = 3;
  inline bool has_totalCost() const;
  inline void clear_totalCost();
  static const int kTotalCostFieldNumber = 3;
  inline ::google::protobuf::int64 totalCost() const;
  inline void set_totalCost(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyRMB)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_totalCost();
  inline void clear_has_totalCost();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  ::google::protobuf::int64 total_;
  ::google::protobuf::int64 totalCost_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyRMB* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifySoulJade : public ::google::protobuf::Message {
 public:
  NetProto_ModifySoulJade();
  virtual ~NetProto_ModifySoulJade();
  
  NetProto_ModifySoulJade(const NetProto_ModifySoulJade& from);
  
  inline NetProto_ModifySoulJade& operator=(const NetProto_ModifySoulJade& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifySoulJade& default_instance();
  
  void Swap(NetProto_ModifySoulJade* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifySoulJade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifySoulJade& from);
  void MergeFrom(const NetProto_ModifySoulJade& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifySoulJade_ID ID;
  static const ID GROUPID = NetProto_ModifySoulJade_ID_GROUPID;
  static const ID UNITID = NetProto_ModifySoulJade_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifySoulJade_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifySoulJade_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifySoulJade_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifySoulJade_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifySoulJade_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifySoulJade_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifySoulJade_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifySoulJade)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifySoulJade* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifySoul : public ::google::protobuf::Message {
 public:
  NetProto_ModifySoul();
  virtual ~NetProto_ModifySoul();
  
  NetProto_ModifySoul(const NetProto_ModifySoul& from);
  
  inline NetProto_ModifySoul& operator=(const NetProto_ModifySoul& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifySoul& default_instance();
  
  void Swap(NetProto_ModifySoul* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifySoul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifySoul& from);
  void MergeFrom(const NetProto_ModifySoul& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifySoul_ID ID;
  static const ID GROUPID = NetProto_ModifySoul_ID_GROUPID;
  static const ID UNITID = NetProto_ModifySoul_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifySoul_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifySoul_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifySoul_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifySoul_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifySoul_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifySoul_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifySoul_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifySoul)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifySoul* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyHonor : public ::google::protobuf::Message {
 public:
  NetProto_ModifyHonor();
  virtual ~NetProto_ModifyHonor();
  
  NetProto_ModifyHonor(const NetProto_ModifyHonor& from);
  
  inline NetProto_ModifyHonor& operator=(const NetProto_ModifyHonor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyHonor& default_instance();
  
  void Swap(NetProto_ModifyHonor* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyHonor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyHonor& from);
  void MergeFrom(const NetProto_ModifyHonor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyHonor_ID ID;
  static const ID GROUPID = NetProto_ModifyHonor_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyHonor_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyHonor_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyHonor_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyHonor_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyHonor_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyHonor_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyHonor_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyHonor_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyHonor)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyHonor* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyDurability : public ::google::protobuf::Message {
 public:
  NetProto_ModifyDurability();
  virtual ~NetProto_ModifyDurability();
  
  NetProto_ModifyDurability(const NetProto_ModifyDurability& from);
  
  inline NetProto_ModifyDurability& operator=(const NetProto_ModifyDurability& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyDurability& default_instance();
  
  void Swap(NetProto_ModifyDurability* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyDurability* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyDurability& from);
  void MergeFrom(const NetProto_ModifyDurability& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyDurability_ID ID;
  static const ID GROUPID = NetProto_ModifyDurability_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyDurability_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyDurability_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyDurability_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyDurability_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyDurability_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyDurability_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyDurability_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyDurability_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyDurability)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyDurability* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifySoulStone : public ::google::protobuf::Message {
 public:
  NetProto_ModifySoulStone();
  virtual ~NetProto_ModifySoulStone();
  
  NetProto_ModifySoulStone(const NetProto_ModifySoulStone& from);
  
  inline NetProto_ModifySoulStone& operator=(const NetProto_ModifySoulStone& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifySoulStone& default_instance();
  
  void Swap(NetProto_ModifySoulStone* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifySoulStone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifySoulStone& from);
  void MergeFrom(const NetProto_ModifySoulStone& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifySoulStone_ID ID;
  static const ID GROUPID = NetProto_ModifySoulStone_ID_GROUPID;
  static const ID UNITID = NetProto_ModifySoulStone_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifySoulStone_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifySoulStone_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifySoulStone_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifySoulStone_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifySoulStone_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifySoulStone_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifySoulStone_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifySoulStone)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifySoulStone* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyPKScore : public ::google::protobuf::Message {
 public:
  NetProto_ModifyPKScore();
  virtual ~NetProto_ModifyPKScore();
  
  NetProto_ModifyPKScore(const NetProto_ModifyPKScore& from);
  
  inline NetProto_ModifyPKScore& operator=(const NetProto_ModifyPKScore& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyPKScore& default_instance();
  
  void Swap(NetProto_ModifyPKScore* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyPKScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyPKScore& from);
  void MergeFrom(const NetProto_ModifyPKScore& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyPKScore_ID ID;
  static const ID GROUPID = NetProto_ModifyPKScore_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyPKScore_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyPKScore_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyPKScore_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyPKScore_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyPKScore_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyPKScore_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyPKScore_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyPKScore_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyPKScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyPKScore* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DelItem : public ::google::protobuf::Message {
 public:
  NetProto_DelItem();
  virtual ~NetProto_DelItem();
  
  NetProto_DelItem(const NetProto_DelItem& from);
  
  inline NetProto_DelItem& operator=(const NetProto_DelItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DelItem& default_instance();
  
  void Swap(NetProto_DelItem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DelItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DelItem& from);
  void MergeFrom(const NetProto_DelItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DelItem_ID ID;
  static const ID GROUPID = NetProto_DelItem_ID_GROUPID;
  static const ID UNITID = NetProto_DelItem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DelItem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DelItem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DelItem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DelItem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DelItem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DelItem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DelItem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DelItem)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DelItem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyVIP : public ::google::protobuf::Message {
 public:
  NetProto_ModifyVIP();
  virtual ~NetProto_ModifyVIP();
  
  NetProto_ModifyVIP(const NetProto_ModifyVIP& from);
  
  inline NetProto_ModifyVIP& operator=(const NetProto_ModifyVIP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyVIP& default_instance();
  
  void Swap(NetProto_ModifyVIP* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyVIP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyVIP& from);
  void MergeFrom(const NetProto_ModifyVIP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyVIP_ID ID;
  static const ID GROUPID = NetProto_ModifyVIP_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyVIP_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyVIP_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyVIP_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyVIP_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyVIP_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyVIP_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyVIP_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyVIP_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline ::google::protobuf::int32 player() const;
  inline void set_player(::google::protobuf::int32 value);
  
  // optional int32 vip = 2;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 2;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyVIP)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_vip();
  inline void clear_has_vip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 player_;
  ::google::protobuf::int32 vip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyVIP* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RandomGodTarget : public ::google::protobuf::Message {
 public:
  NetProto_RandomGodTarget();
  virtual ~NetProto_RandomGodTarget();
  
  NetProto_RandomGodTarget(const NetProto_RandomGodTarget& from);
  
  inline NetProto_RandomGodTarget& operator=(const NetProto_RandomGodTarget& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RandomGodTarget& default_instance();
  
  void Swap(NetProto_RandomGodTarget* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RandomGodTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RandomGodTarget& from);
  void MergeFrom(const NetProto_RandomGodTarget& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RandomGodTarget_ID ID;
  static const ID GROUPID = NetProto_RandomGodTarget_ID_GROUPID;
  static const ID UNITID = NetProto_RandomGodTarget_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RandomGodTarget_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RandomGodTarget_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RandomGodTarget_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RandomGodTarget_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RandomGodTarget_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RandomGodTarget_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RandomGodTarget_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_PlayerAtt att = 1;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 1;
  inline const ::PB_PlayerAtt& att() const;
  inline ::PB_PlayerAtt* mutable_att();
  inline ::PB_PlayerAtt* release_att();
  
  // optional int32 event = 2;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 2;
  inline ::google::protobuf::int32 event() const;
  inline void set_event(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RandomGodTarget)
 private:
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_event();
  inline void clear_has_event();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_PlayerAtt* att_;
  ::google::protobuf::int32 event_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RandomGodTarget* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Inspire : public ::google::protobuf::Message {
 public:
  NetProto_Inspire();
  virtual ~NetProto_Inspire();
  
  NetProto_Inspire(const NetProto_Inspire& from);
  
  inline NetProto_Inspire& operator=(const NetProto_Inspire& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Inspire& default_instance();
  
  void Swap(NetProto_Inspire* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Inspire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Inspire& from);
  void MergeFrom(const NetProto_Inspire& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Inspire_ID ID;
  static const ID GROUPID = NetProto_Inspire_ID_GROUPID;
  static const ID UNITID = NetProto_Inspire_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Inspire_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Inspire_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Inspire_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Inspire_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Inspire_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Inspire_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Inspire_ID_Parse(name, value);
  }
  
  typedef NetProto_Inspire_Type Type;
  static const Type ATK = NetProto_Inspire_Type_ATK;
  static const Type DEF = NetProto_Inspire_Type_DEF;
  static const Type SPECIAL = NetProto_Inspire_Type_SPECIAL;
  static inline bool Type_IsValid(int value) {
    return NetProto_Inspire_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Inspire_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Inspire_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Inspire_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Inspire_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Inspire_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Inspire_Type_Parse(name, value);
  }
  
  typedef NetProto_Inspire_Dest Dest;
  static const Dest GOD = NetProto_Inspire_Dest_GOD;
  static const Dest ONE_TO_ONE = NetProto_Inspire_Dest_ONE_TO_ONE;
  static const Dest HELL = NetProto_Inspire_Dest_HELL;
  static const Dest WORLD_BOSS = NetProto_Inspire_Dest_WORLD_BOSS;
  static inline bool Dest_IsValid(int value) {
    return NetProto_Inspire_Dest_IsValid(value);
  }
  static const Dest Dest_MIN =
    NetProto_Inspire_Dest_Dest_MIN;
  static const Dest Dest_MAX =
    NetProto_Inspire_Dest_Dest_MAX;
  static const int Dest_ARRAYSIZE =
    NetProto_Inspire_Dest_Dest_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Dest_descriptor() {
    return NetProto_Inspire_Dest_descriptor();
  }
  static inline const ::std::string& Dest_Name(Dest value) {
    return NetProto_Inspire_Dest_Name(value);
  }
  static inline bool Dest_Parse(const ::std::string& name,
      Dest* value) {
    return NetProto_Inspire_Dest_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Inspire.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Inspire_Type type() const;
  inline void set_type(::NetProto_Inspire_Type value);
  
  // optional .NetProto_Inspire.Dest dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline ::NetProto_Inspire_Dest dest() const;
  inline void set_dest(::NetProto_Inspire_Dest value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Inspire)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dest();
  inline void clear_has_dest();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  int dest_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Inspire* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RequestGodTarget : public ::google::protobuf::Message {
 public:
  NetProto_RequestGodTarget();
  virtual ~NetProto_RequestGodTarget();
  
  NetProto_RequestGodTarget(const NetProto_RequestGodTarget& from);
  
  inline NetProto_RequestGodTarget& operator=(const NetProto_RequestGodTarget& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RequestGodTarget& default_instance();
  
  void Swap(NetProto_RequestGodTarget* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RequestGodTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RequestGodTarget& from);
  void MergeFrom(const NetProto_RequestGodTarget& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RequestGodTarget_ID ID;
  static const ID GROUPID = NetProto_RequestGodTarget_ID_GROUPID;
  static const ID UNITID = NetProto_RequestGodTarget_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RequestGodTarget_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RequestGodTarget_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RequestGodTarget_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RequestGodTarget_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RequestGodTarget_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RequestGodTarget_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RequestGodTarget_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_RequestGodTarget)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RequestGodTarget* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyGodScore : public ::google::protobuf::Message {
 public:
  NetProto_ModifyGodScore();
  virtual ~NetProto_ModifyGodScore();
  
  NetProto_ModifyGodScore(const NetProto_ModifyGodScore& from);
  
  inline NetProto_ModifyGodScore& operator=(const NetProto_ModifyGodScore& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyGodScore& default_instance();
  
  void Swap(NetProto_ModifyGodScore* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyGodScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyGodScore& from);
  void MergeFrom(const NetProto_ModifyGodScore& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyGodScore_ID ID;
  static const ID GROUPID = NetProto_ModifyGodScore_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyGodScore_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyGodScore_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyGodScore_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyGodScore_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyGodScore_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyGodScore_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyGodScore_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyGodScore_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyGodScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyGodScore* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GodRank : public ::google::protobuf::Message {
 public:
  NetProto_GodRank();
  virtual ~NetProto_GodRank();
  
  NetProto_GodRank(const NetProto_GodRank& from);
  
  inline NetProto_GodRank& operator=(const NetProto_GodRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GodRank& default_instance();
  
  void Swap(NetProto_GodRank* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GodRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GodRank& from);
  void MergeFrom(const NetProto_GodRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GodRank_ID ID;
  static const ID GROUPID = NetProto_GodRank_ID_GROUPID;
  static const ID UNITID = NetProto_GodRank_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GodRank_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GodRank_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GodRank_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GodRank_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GodRank_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GodRank_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GodRank_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 self = 1;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 1;
  inline ::google::protobuf::int32 self() const;
  inline void set_self(::google::protobuf::int32 value);
  
  // optional int32 target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GodRank)
 private:
  inline void set_has_self();
  inline void clear_has_self();
  inline void set_has_target();
  inline void clear_has_target();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 self_;
  ::google::protobuf::int32 target_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GodRank* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GetFashion : public ::google::protobuf::Message {
 public:
  NetProto_GetFashion();
  virtual ~NetProto_GetFashion();
  
  NetProto_GetFashion(const NetProto_GetFashion& from);
  
  inline NetProto_GetFashion& operator=(const NetProto_GetFashion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GetFashion& default_instance();
  
  void Swap(NetProto_GetFashion* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GetFashion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GetFashion& from);
  void MergeFrom(const NetProto_GetFashion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GetFashion_ID ID;
  static const ID GROUPID = NetProto_GetFashion_ID_GROUPID;
  static const ID UNITID = NetProto_GetFashion_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GetFashion_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GetFashion_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GetFashion_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GetFashion_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GetFashion_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GetFashion_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GetFashion_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 v = 1;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 1;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);
  
  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GetFashion)
 private:
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 v_;
  ::google::protobuf::int32 pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GetFashion* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SyncAtt : public ::google::protobuf::Message {
 public:
  NetProto_SyncAtt();
  virtual ~NetProto_SyncAtt();
  
  NetProto_SyncAtt(const NetProto_SyncAtt& from);
  
  inline NetProto_SyncAtt& operator=(const NetProto_SyncAtt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SyncAtt& default_instance();
  
  void Swap(NetProto_SyncAtt* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SyncAtt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SyncAtt& from);
  void MergeFrom(const NetProto_SyncAtt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SyncAtt_ID ID;
  static const ID GROUPID = NetProto_SyncAtt_ID_GROUPID;
  static const ID UNITID = NetProto_SyncAtt_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SyncAtt_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SyncAtt_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SyncAtt_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SyncAtt_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SyncAtt_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SyncAtt_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SyncAtt_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int32 properties = 1;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 1;
  inline ::google::protobuf::int32 properties(int index) const;
  inline void set_properties(int index, ::google::protobuf::int32 value);
  inline void add_properties(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      properties() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_properties();
  
  // repeated .PB_FightPropertyDelta propertiesDelta = 2;
  inline int propertiesDelta_size() const;
  inline void clear_propertiesDelta();
  static const int kPropertiesDeltaFieldNumber = 2;
  inline const ::PB_FightPropertyDelta& propertiesDelta(int index) const;
  inline ::PB_FightPropertyDelta* mutable_propertiesDelta(int index);
  inline ::PB_FightPropertyDelta* add_propertiesDelta();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta >&
      propertiesDelta() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta >*
      mutable_propertiesDelta();
  
  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional string md5 = 5;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 5;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  
  // @@protoc_insertion_point(class_scope:NetProto_SyncAtt)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_md5();
  inline void clear_has_md5();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > properties_;
  ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta > propertiesDelta_;
  ::google::protobuf::int64 time_;
  ::std::string* md5_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SyncAtt* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifySubRMB : public ::google::protobuf::Message {
 public:
  NetProto_ModifySubRMB();
  virtual ~NetProto_ModifySubRMB();
  
  NetProto_ModifySubRMB(const NetProto_ModifySubRMB& from);
  
  inline NetProto_ModifySubRMB& operator=(const NetProto_ModifySubRMB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifySubRMB& default_instance();
  
  void Swap(NetProto_ModifySubRMB* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifySubRMB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifySubRMB& from);
  void MergeFrom(const NetProto_ModifySubRMB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifySubRMB_ID ID;
  static const ID GROUPID = NetProto_ModifySubRMB_ID_GROUPID;
  static const ID UNITID = NetProto_ModifySubRMB_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifySubRMB_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifySubRMB_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifySubRMB_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifySubRMB_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifySubRMB_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifySubRMB_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifySubRMB_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifySubRMB)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifySubRMB* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GenEquip : public ::google::protobuf::Message {
 public:
  NetProto_GenEquip();
  virtual ~NetProto_GenEquip();
  
  NetProto_GenEquip(const NetProto_GenEquip& from);
  
  inline NetProto_GenEquip& operator=(const NetProto_GenEquip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GenEquip& default_instance();
  
  void Swap(NetProto_GenEquip* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GenEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GenEquip& from);
  void MergeFrom(const NetProto_GenEquip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GenEquip_ID ID;
  static const ID GROUPID = NetProto_GenEquip_ID_GROUPID;
  static const ID UNITID = NetProto_GenEquip_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GenEquip_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GenEquip_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GenEquip_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GenEquip_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GenEquip_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GenEquip_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GenEquip_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GenEquip)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GenEquip* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GenGem : public ::google::protobuf::Message {
 public:
  NetProto_GenGem();
  virtual ~NetProto_GenGem();
  
  NetProto_GenGem(const NetProto_GenGem& from);
  
  inline NetProto_GenGem& operator=(const NetProto_GenGem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GenGem& default_instance();
  
  void Swap(NetProto_GenGem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GenGem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GenGem& from);
  void MergeFrom(const NetProto_GenGem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GenGem_ID ID;
  static const ID GROUPID = NetProto_GenGem_ID_GROUPID;
  static const ID UNITID = NetProto_GenGem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GenGem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GenGem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GenGem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GenGem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GenGem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GenGem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GenGem_ID_Parse(name, value);
  }
  
  typedef NetProto_GenGem_Way Way;
  static const Way NEXT_LEVEL = NetProto_GenGem_Way_NEXT_LEVEL;
  static const Way TOP_LEVEL = NetProto_GenGem_Way_TOP_LEVEL;
  static const Way ALL_TOP_LEVEL = NetProto_GenGem_Way_ALL_TOP_LEVEL;
  static inline bool Way_IsValid(int value) {
    return NetProto_GenGem_Way_IsValid(value);
  }
  static const Way Way_MIN =
    NetProto_GenGem_Way_Way_MIN;
  static const Way Way_MAX =
    NetProto_GenGem_Way_Way_MAX;
  static const int Way_ARRAYSIZE =
    NetProto_GenGem_Way_Way_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Way_descriptor() {
    return NetProto_GenGem_Way_descriptor();
  }
  static inline const ::std::string& Way_Name(Way value) {
    return NetProto_GenGem_Way_Name(value);
  }
  static inline bool Way_Parse(const ::std::string& name,
      Way* value) {
    return NetProto_GenGem_Way_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GenGem.Way way = 1;
  inline bool has_way() const;
  inline void clear_way();
  static const int kWayFieldNumber = 1;
  inline ::NetProto_GenGem_Way way() const;
  inline void set_way(::NetProto_GenGem_Way value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // repeated .PB_ItemInfo results = 4;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 4;
  inline const ::PB_ItemInfo& results(int index) const;
  inline ::PB_ItemInfo* mutable_results(int index);
  inline ::PB_ItemInfo* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
      mutable_results();
  
  // optional int32 success = 5;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 5;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);
  
  // optional int32 fail = 6;
  inline bool has_fail() const;
  inline void clear_fail();
  static const int kFailFieldNumber = 6;
  inline ::google::protobuf::int32 fail() const;
  inline void set_fail(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GenGem)
 private:
  inline void set_has_way();
  inline void clear_has_way();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_fail();
  inline void clear_has_fail();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int way_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo > results_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 success_;
  ::google::protobuf::int32 fail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GenGem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UnlockHole : public ::google::protobuf::Message {
 public:
  NetProto_UnlockHole();
  virtual ~NetProto_UnlockHole();
  
  NetProto_UnlockHole(const NetProto_UnlockHole& from);
  
  inline NetProto_UnlockHole& operator=(const NetProto_UnlockHole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UnlockHole& default_instance();
  
  void Swap(NetProto_UnlockHole* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UnlockHole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UnlockHole& from);
  void MergeFrom(const NetProto_UnlockHole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UnlockHole_ID ID;
  static const ID GROUPID = NetProto_UnlockHole_ID_GROUPID;
  static const ID UNITID = NetProto_UnlockHole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UnlockHole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UnlockHole_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UnlockHole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UnlockHole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UnlockHole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UnlockHole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UnlockHole_ID_Parse(name, value);
  }
  
  typedef NetProto_UnlockHole_Pos Pos;
  static const Pos BODY = NetProto_UnlockHole_Pos_BODY;
  static const Pos PACKAGE = NetProto_UnlockHole_Pos_PACKAGE;
  static inline bool Pos_IsValid(int value) {
    return NetProto_UnlockHole_Pos_IsValid(value);
  }
  static const Pos Pos_MIN =
    NetProto_UnlockHole_Pos_Pos_MIN;
  static const Pos Pos_MAX =
    NetProto_UnlockHole_Pos_Pos_MAX;
  static const int Pos_ARRAYSIZE =
    NetProto_UnlockHole_Pos_Pos_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pos_descriptor() {
    return NetProto_UnlockHole_Pos_descriptor();
  }
  static inline const ::std::string& Pos_Name(Pos value) {
    return NetProto_UnlockHole_Pos_Name(value);
  }
  static inline bool Pos_Parse(const ::std::string& name,
      Pos* value) {
    return NetProto_UnlockHole_Pos_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_UnlockHole.Pos pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::NetProto_UnlockHole_Pos pos() const;
  inline void set_pos(::NetProto_UnlockHole_Pos value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_UnlockHole)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int pos_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UnlockHole* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UnmountGem : public ::google::protobuf::Message {
 public:
  NetProto_UnmountGem();
  virtual ~NetProto_UnmountGem();
  
  NetProto_UnmountGem(const NetProto_UnmountGem& from);
  
  inline NetProto_UnmountGem& operator=(const NetProto_UnmountGem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UnmountGem& default_instance();
  
  void Swap(NetProto_UnmountGem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UnmountGem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UnmountGem& from);
  void MergeFrom(const NetProto_UnmountGem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UnmountGem_ID ID;
  static const ID GROUPID = NetProto_UnmountGem_ID_GROUPID;
  static const ID UNITID = NetProto_UnmountGem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UnmountGem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UnmountGem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UnmountGem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UnmountGem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UnmountGem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UnmountGem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UnmountGem_ID_Parse(name, value);
  }
  
  typedef NetProto_UnmountGem_Pos Pos;
  static const Pos BODY = NetProto_UnmountGem_Pos_BODY;
  static const Pos PACKAGE = NetProto_UnmountGem_Pos_PACKAGE;
  static inline bool Pos_IsValid(int value) {
    return NetProto_UnmountGem_Pos_IsValid(value);
  }
  static const Pos Pos_MIN =
    NetProto_UnmountGem_Pos_Pos_MIN;
  static const Pos Pos_MAX =
    NetProto_UnmountGem_Pos_Pos_MAX;
  static const int Pos_ARRAYSIZE =
    NetProto_UnmountGem_Pos_Pos_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pos_descriptor() {
    return NetProto_UnmountGem_Pos_descriptor();
  }
  static inline const ::std::string& Pos_Name(Pos value) {
    return NetProto_UnmountGem_Pos_Name(value);
  }
  static inline bool Pos_Parse(const ::std::string& name,
      Pos* value) {
    return NetProto_UnmountGem_Pos_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_UnmountGem.Pos pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::NetProto_UnmountGem_Pos pos() const;
  inline void set_pos(::NetProto_UnmountGem_Pos value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_UnmountGem)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int pos_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UnmountGem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_EnhanceDelta : public ::google::protobuf::Message {
 public:
  NetProto_EnhanceDelta();
  virtual ~NetProto_EnhanceDelta();
  
  NetProto_EnhanceDelta(const NetProto_EnhanceDelta& from);
  
  inline NetProto_EnhanceDelta& operator=(const NetProto_EnhanceDelta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_EnhanceDelta& default_instance();
  
  void Swap(NetProto_EnhanceDelta* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_EnhanceDelta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_EnhanceDelta& from);
  void MergeFrom(const NetProto_EnhanceDelta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_EnhanceDelta_ID ID;
  static const ID GROUPID = NetProto_EnhanceDelta_ID_GROUPID;
  static const ID UNITID = NetProto_EnhanceDelta_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_EnhanceDelta_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_EnhanceDelta_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_EnhanceDelta_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_EnhanceDelta_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_EnhanceDelta_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_EnhanceDelta_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_EnhanceDelta_ID_Parse(name, value);
  }
  
  typedef NetProto_EnhanceDelta_Pos Pos;
  static const Pos BODY = NetProto_EnhanceDelta_Pos_BODY;
  static const Pos PACKAGE = NetProto_EnhanceDelta_Pos_PACKAGE;
  static inline bool Pos_IsValid(int value) {
    return NetProto_EnhanceDelta_Pos_IsValid(value);
  }
  static const Pos Pos_MIN =
    NetProto_EnhanceDelta_Pos_Pos_MIN;
  static const Pos Pos_MAX =
    NetProto_EnhanceDelta_Pos_Pos_MAX;
  static const int Pos_ARRAYSIZE =
    NetProto_EnhanceDelta_Pos_Pos_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pos_descriptor() {
    return NetProto_EnhanceDelta_Pos_descriptor();
  }
  static inline const ::std::string& Pos_Name(Pos value) {
    return NetProto_EnhanceDelta_Pos_Name(value);
  }
  static inline bool Pos_Parse(const ::std::string& name,
      Pos* value) {
    return NetProto_EnhanceDelta_Pos_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_EnhanceDelta.Pos pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::NetProto_EnhanceDelta_Pos pos() const;
  inline void set_pos(::NetProto_EnhanceDelta_Pos value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional bool ten = 3;
  inline bool has_ten() const;
  inline void clear_ten();
  static const int kTenFieldNumber = 3;
  inline bool ten() const;
  inline void set_ten(bool value);
  
  // repeated int32 delta = 4;
  inline int delta_size() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 4;
  inline ::google::protobuf::int32 delta(int index) const;
  inline void set_delta(int index, ::google::protobuf::int32 value);
  inline void add_delta(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      delta() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_delta();
  
  // @@protoc_insertion_point(class_scope:NetProto_EnhanceDelta)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ten();
  inline void clear_has_ten();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int pos_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > delta_;
  bool ten_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_EnhanceDelta* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Enhance : public ::google::protobuf::Message {
 public:
  NetProto_Enhance();
  virtual ~NetProto_Enhance();
  
  NetProto_Enhance(const NetProto_Enhance& from);
  
  inline NetProto_Enhance& operator=(const NetProto_Enhance& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Enhance& default_instance();
  
  void Swap(NetProto_Enhance* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Enhance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Enhance& from);
  void MergeFrom(const NetProto_Enhance& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Enhance_ID ID;
  static const ID GROUPID = NetProto_Enhance_ID_GROUPID;
  static const ID UNITID = NetProto_Enhance_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Enhance_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Enhance_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Enhance_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Enhance_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Enhance_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Enhance_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Enhance_ID_Parse(name, value);
  }
  
  typedef NetProto_Enhance_Pos Pos;
  static const Pos BODY = NetProto_Enhance_Pos_BODY;
  static const Pos PACKAGE = NetProto_Enhance_Pos_PACKAGE;
  static inline bool Pos_IsValid(int value) {
    return NetProto_Enhance_Pos_IsValid(value);
  }
  static const Pos Pos_MIN =
    NetProto_Enhance_Pos_Pos_MIN;
  static const Pos Pos_MAX =
    NetProto_Enhance_Pos_Pos_MAX;
  static const int Pos_ARRAYSIZE =
    NetProto_Enhance_Pos_Pos_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pos_descriptor() {
    return NetProto_Enhance_Pos_descriptor();
  }
  static inline const ::std::string& Pos_Name(Pos value) {
    return NetProto_Enhance_Pos_Name(value);
  }
  static inline bool Pos_Parse(const ::std::string& name,
      Pos* value) {
    return NetProto_Enhance_Pos_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Enhance.Pos pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::NetProto_Enhance_Pos pos() const;
  inline void set_pos(::NetProto_Enhance_Pos value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Enhance)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int pos_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Enhance* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Inherit : public ::google::protobuf::Message {
 public:
  NetProto_Inherit();
  virtual ~NetProto_Inherit();
  
  NetProto_Inherit(const NetProto_Inherit& from);
  
  inline NetProto_Inherit& operator=(const NetProto_Inherit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Inherit& default_instance();
  
  void Swap(NetProto_Inherit* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Inherit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Inherit& from);
  void MergeFrom(const NetProto_Inherit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Inherit_ID ID;
  static const ID GROUPID = NetProto_Inherit_ID_GROUPID;
  static const ID UNITID = NetProto_Inherit_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Inherit_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Inherit_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Inherit_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Inherit_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Inherit_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Inherit_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Inherit_ID_Parse(name, value);
  }
  
  typedef NetProto_Inherit_Pos Pos;
  static const Pos BODY = NetProto_Inherit_Pos_BODY;
  static const Pos PACKAGE = NetProto_Inherit_Pos_PACKAGE;
  static inline bool Pos_IsValid(int value) {
    return NetProto_Inherit_Pos_IsValid(value);
  }
  static const Pos Pos_MIN =
    NetProto_Inherit_Pos_Pos_MIN;
  static const Pos Pos_MAX =
    NetProto_Inherit_Pos_Pos_MAX;
  static const int Pos_ARRAYSIZE =
    NetProto_Inherit_Pos_Pos_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pos_descriptor() {
    return NetProto_Inherit_Pos_descriptor();
  }
  static inline const ::std::string& Pos_Name(Pos value) {
    return NetProto_Inherit_Pos_Name(value);
  }
  static inline bool Pos_Parse(const ::std::string& name,
      Pos* value) {
    return NetProto_Inherit_Pos_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Inherit.Pos parentPos = 1;
  inline bool has_parentPos() const;
  inline void clear_parentPos();
  static const int kParentPosFieldNumber = 1;
  inline ::NetProto_Inherit_Pos parentPos() const;
  inline void set_parentPos(::NetProto_Inherit_Pos value);
  
  // optional int32 parentID = 2;
  inline bool has_parentID() const;
  inline void clear_parentID();
  static const int kParentIDFieldNumber = 2;
  inline ::google::protobuf::int32 parentID() const;
  inline void set_parentID(::google::protobuf::int32 value);
  
  // optional .NetProto_Inherit.Pos childPos = 3;
  inline bool has_childPos() const;
  inline void clear_childPos();
  static const int kChildPosFieldNumber = 3;
  inline ::NetProto_Inherit_Pos childPos() const;
  inline void set_childPos(::NetProto_Inherit_Pos value);
  
  // optional int32 childID = 4;
  inline bool has_childID() const;
  inline void clear_childID();
  static const int kChildIDFieldNumber = 4;
  inline ::google::protobuf::int32 childID() const;
  inline void set_childID(::google::protobuf::int32 value);
  
  // optional bool useRMB = 5;
  inline bool has_useRMB() const;
  inline void clear_useRMB();
  static const int kUseRMBFieldNumber = 5;
  inline bool useRMB() const;
  inline void set_useRMB(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Inherit)
 private:
  inline void set_has_parentPos();
  inline void clear_has_parentPos();
  inline void set_has_parentID();
  inline void clear_has_parentID();
  inline void set_has_childPos();
  inline void clear_has_childPos();
  inline void set_has_childID();
  inline void clear_has_childID();
  inline void set_has_useRMB();
  inline void clear_has_useRMB();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int parentPos_;
  ::google::protobuf::int32 parentID_;
  int childPos_;
  ::google::protobuf::int32 childID_;
  bool useRMB_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Inherit* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_StrongBaseWing : public ::google::protobuf::Message {
 public:
  NetProto_StrongBaseWing();
  virtual ~NetProto_StrongBaseWing();
  
  NetProto_StrongBaseWing(const NetProto_StrongBaseWing& from);
  
  inline NetProto_StrongBaseWing& operator=(const NetProto_StrongBaseWing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_StrongBaseWing& default_instance();
  
  void Swap(NetProto_StrongBaseWing* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_StrongBaseWing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_StrongBaseWing& from);
  void MergeFrom(const NetProto_StrongBaseWing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_StrongBaseWing_ID ID;
  static const ID GROUPID = NetProto_StrongBaseWing_ID_GROUPID;
  static const ID UNITID = NetProto_StrongBaseWing_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_StrongBaseWing_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_StrongBaseWing_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_StrongBaseWing_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_StrongBaseWing_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_StrongBaseWing_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_StrongBaseWing_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_StrongBaseWing_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional bool useRMB = 1;
  inline bool has_useRMB() const;
  inline void clear_useRMB();
  static const int kUseRMBFieldNumber = 1;
  inline bool useRMB() const;
  inline void set_useRMB(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_StrongBaseWing)
 private:
  inline void set_has_useRMB();
  inline void clear_has_useRMB();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool useRMB_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_StrongBaseWing* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BuyWing : public ::google::protobuf::Message {
 public:
  NetProto_BuyWing();
  virtual ~NetProto_BuyWing();
  
  NetProto_BuyWing(const NetProto_BuyWing& from);
  
  inline NetProto_BuyWing& operator=(const NetProto_BuyWing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BuyWing& default_instance();
  
  void Swap(NetProto_BuyWing* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BuyWing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BuyWing& from);
  void MergeFrom(const NetProto_BuyWing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BuyWing_ID ID;
  static const ID GROUPID = NetProto_BuyWing_ID_GROUPID;
  static const ID UNITID = NetProto_BuyWing_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BuyWing_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BuyWing_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BuyWing_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BuyWing_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BuyWing_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BuyWing_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BuyWing_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional bool forever = 2;
  inline bool has_forever() const;
  inline void clear_forever();
  static const int kForeverFieldNumber = 2;
  inline bool forever() const;
  inline void set_forever(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_BuyWing)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_forever();
  inline void clear_has_forever();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  bool forever_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BuyWing* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_WearWing : public ::google::protobuf::Message {
 public:
  NetProto_WearWing();
  virtual ~NetProto_WearWing();
  
  NetProto_WearWing(const NetProto_WearWing& from);
  
  inline NetProto_WearWing& operator=(const NetProto_WearWing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_WearWing& default_instance();
  
  void Swap(NetProto_WearWing* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_WearWing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_WearWing& from);
  void MergeFrom(const NetProto_WearWing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_WearWing_ID ID;
  static const ID GROUPID = NetProto_WearWing_ID_GROUPID;
  static const ID UNITID = NetProto_WearWing_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_WearWing_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_WearWing_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_WearWing_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_WearWing_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_WearWing_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_WearWing_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_WearWing_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional bool baseWing = 2;
  inline bool has_baseWing() const;
  inline void clear_baseWing();
  static const int kBaseWingFieldNumber = 2;
  inline bool baseWing() const;
  inline void set_baseWing(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_WearWing)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_baseWing();
  inline void clear_has_baseWing();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  bool baseWing_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_WearWing* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GetWing : public ::google::protobuf::Message {
 public:
  NetProto_GetWing();
  virtual ~NetProto_GetWing();
  
  NetProto_GetWing(const NetProto_GetWing& from);
  
  inline NetProto_GetWing& operator=(const NetProto_GetWing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GetWing& default_instance();
  
  void Swap(NetProto_GetWing* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GetWing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GetWing& from);
  void MergeFrom(const NetProto_GetWing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GetWing_ID ID;
  static const ID GROUPID = NetProto_GetWing_ID_GROUPID;
  static const ID UNITID = NetProto_GetWing_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GetWing_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GetWing_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GetWing_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GetWing_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GetWing_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GetWing_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GetWing_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 v = 1;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 1;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);
  
  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GetWing)
 private:
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 v_;
  ::google::protobuf::int32 pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GetWing* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BuyFashion : public ::google::protobuf::Message {
 public:
  NetProto_BuyFashion();
  virtual ~NetProto_BuyFashion();
  
  NetProto_BuyFashion(const NetProto_BuyFashion& from);
  
  inline NetProto_BuyFashion& operator=(const NetProto_BuyFashion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BuyFashion& default_instance();
  
  void Swap(NetProto_BuyFashion* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BuyFashion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BuyFashion& from);
  void MergeFrom(const NetProto_BuyFashion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BuyFashion_ID ID;
  static const ID GROUPID = NetProto_BuyFashion_ID_GROUPID;
  static const ID UNITID = NetProto_BuyFashion_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BuyFashion_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BuyFashion_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BuyFashion_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BuyFashion_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BuyFashion_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BuyFashion_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BuyFashion_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional bool forever = 2;
  inline bool has_forever() const;
  inline void clear_forever();
  static const int kForeverFieldNumber = 2;
  inline bool forever() const;
  inline void set_forever(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_BuyFashion)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_forever();
  inline void clear_has_forever();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  bool forever_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BuyFashion* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_MakeFashionHole : public ::google::protobuf::Message {
 public:
  NetProto_MakeFashionHole();
  virtual ~NetProto_MakeFashionHole();
  
  NetProto_MakeFashionHole(const NetProto_MakeFashionHole& from);
  
  inline NetProto_MakeFashionHole& operator=(const NetProto_MakeFashionHole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_MakeFashionHole& default_instance();
  
  void Swap(NetProto_MakeFashionHole* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_MakeFashionHole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_MakeFashionHole& from);
  void MergeFrom(const NetProto_MakeFashionHole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_MakeFashionHole_ID ID;
  static const ID GROUPID = NetProto_MakeFashionHole_ID_GROUPID;
  static const ID UNITID = NetProto_MakeFashionHole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_MakeFashionHole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_MakeFashionHole_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_MakeFashionHole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_MakeFashionHole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_MakeFashionHole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_MakeFashionHole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_MakeFashionHole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_MakeFashionHole)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_MakeFashionHole* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FashionInlay : public ::google::protobuf::Message {
 public:
  NetProto_FashionInlay();
  virtual ~NetProto_FashionInlay();
  
  NetProto_FashionInlay(const NetProto_FashionInlay& from);
  
  inline NetProto_FashionInlay& operator=(const NetProto_FashionInlay& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FashionInlay& default_instance();
  
  void Swap(NetProto_FashionInlay* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FashionInlay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FashionInlay& from);
  void MergeFrom(const NetProto_FashionInlay& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FashionInlay_ID ID;
  static const ID GROUPID = NetProto_FashionInlay_ID_GROUPID;
  static const ID UNITID = NetProto_FashionInlay_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FashionInlay_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FashionInlay_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FashionInlay_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FashionInlay_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FashionInlay_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FashionInlay_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FashionInlay_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 runeid = 3;
  inline bool has_runeid() const;
  inline void clear_runeid();
  static const int kRuneidFieldNumber = 3;
  inline ::google::protobuf::int32 runeid() const;
  inline void set_runeid(::google::protobuf::int32 value);
  
  // optional bool flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_FashionInlay)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_runeid();
  inline void clear_has_runeid();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 runeid_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FashionInlay* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FashionUnInlay : public ::google::protobuf::Message {
 public:
  NetProto_FashionUnInlay();
  virtual ~NetProto_FashionUnInlay();
  
  NetProto_FashionUnInlay(const NetProto_FashionUnInlay& from);
  
  inline NetProto_FashionUnInlay& operator=(const NetProto_FashionUnInlay& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FashionUnInlay& default_instance();
  
  void Swap(NetProto_FashionUnInlay* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FashionUnInlay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FashionUnInlay& from);
  void MergeFrom(const NetProto_FashionUnInlay& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FashionUnInlay_ID ID;
  static const ID GROUPID = NetProto_FashionUnInlay_ID_GROUPID;
  static const ID UNITID = NetProto_FashionUnInlay_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FashionUnInlay_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FashionUnInlay_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FashionUnInlay_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FashionUnInlay_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FashionUnInlay_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FashionUnInlay_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FashionUnInlay_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_FashionUnInlay)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FashionUnInlay* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ServerLimitItem : public ::google::protobuf::Message {
 public:
  NetProto_ServerLimitItem();
  virtual ~NetProto_ServerLimitItem();
  
  NetProto_ServerLimitItem(const NetProto_ServerLimitItem& from);
  
  inline NetProto_ServerLimitItem& operator=(const NetProto_ServerLimitItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ServerLimitItem& default_instance();
  
  void Swap(NetProto_ServerLimitItem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ServerLimitItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ServerLimitItem& from);
  void MergeFrom(const NetProto_ServerLimitItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ServerLimitItem_ID ID;
  static const ID GROUPID = NetProto_ServerLimitItem_ID_GROUPID;
  static const ID UNITID = NetProto_ServerLimitItem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ServerLimitItem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ServerLimitItem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ServerLimitItem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ServerLimitItem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ServerLimitItem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ServerLimitItem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ServerLimitItem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_ItemInfo.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB_ItemInfo_Type type() const;
  inline void set_type(::PB_ItemInfo_Type value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ServerLimitItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ServerLimitItem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FriendsLove : public ::google::protobuf::Message {
 public:
  NetProto_FriendsLove();
  virtual ~NetProto_FriendsLove();
  
  NetProto_FriendsLove(const NetProto_FriendsLove& from);
  
  inline NetProto_FriendsLove& operator=(const NetProto_FriendsLove& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FriendsLove& default_instance();
  
  void Swap(NetProto_FriendsLove* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FriendsLove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FriendsLove& from);
  void MergeFrom(const NetProto_FriendsLove& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FriendsLove_ID ID;
  static const ID GROUPID = NetProto_FriendsLove_ID_GROUPID;
  static const ID UNITID = NetProto_FriendsLove_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FriendsLove_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FriendsLove_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FriendsLove_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FriendsLove_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FriendsLove_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FriendsLove_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FriendsLove_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_FriendsLove)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FriendsLove* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ChangePartner : public ::google::protobuf::Message {
 public:
  NetProto_ChangePartner();
  virtual ~NetProto_ChangePartner();
  
  NetProto_ChangePartner(const NetProto_ChangePartner& from);
  
  inline NetProto_ChangePartner& operator=(const NetProto_ChangePartner& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ChangePartner& default_instance();
  
  void Swap(NetProto_ChangePartner* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ChangePartner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ChangePartner& from);
  void MergeFrom(const NetProto_ChangePartner& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ChangePartner_ID ID;
  static const ID GROUPID = NetProto_ChangePartner_ID_GROUPID;
  static const ID UNITID = NetProto_ChangePartner_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ChangePartner_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ChangePartner_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ChangePartner_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ChangePartner_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ChangePartner_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ChangePartner_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ChangePartner_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional .PB_FriendInfo fans = 2;
  inline bool has_fans() const;
  inline void clear_fans();
  static const int kFansFieldNumber = 2;
  inline const ::PB_FriendInfo& fans() const;
  inline ::PB_FriendInfo* mutable_fans();
  inline ::PB_FriendInfo* release_fans();
  
  // @@protoc_insertion_point(class_scope:NetProto_ChangePartner)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_fans();
  inline void clear_has_fans();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_FriendInfo* fans_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ChangePartner* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddFansLove : public ::google::protobuf::Message {
 public:
  NetProto_AddFansLove();
  virtual ~NetProto_AddFansLove();
  
  NetProto_AddFansLove(const NetProto_AddFansLove& from);
  
  inline NetProto_AddFansLove& operator=(const NetProto_AddFansLove& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddFansLove& default_instance();
  
  void Swap(NetProto_AddFansLove* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddFansLove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddFansLove& from);
  void MergeFrom(const NetProto_AddFansLove& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddFansLove_ID ID;
  static const ID GROUPID = NetProto_AddFansLove_ID_GROUPID;
  static const ID UNITID = NetProto_AddFansLove_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddFansLove_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddFansLove_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddFansLove_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddFansLove_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddFansLove_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddFansLove_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddFansLove_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_AddFansLove)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddFansLove* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyLovePoint : public ::google::protobuf::Message {
 public:
  NetProto_ModifyLovePoint();
  virtual ~NetProto_ModifyLovePoint();
  
  NetProto_ModifyLovePoint(const NetProto_ModifyLovePoint& from);
  
  inline NetProto_ModifyLovePoint& operator=(const NetProto_ModifyLovePoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyLovePoint& default_instance();
  
  void Swap(NetProto_ModifyLovePoint* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyLovePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyLovePoint& from);
  void MergeFrom(const NetProto_ModifyLovePoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyLovePoint_ID ID;
  static const ID GROUPID = NetProto_ModifyLovePoint_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyLovePoint_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyLovePoint_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyLovePoint_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyLovePoint_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyLovePoint_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyLovePoint_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyLovePoint_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyLovePoint_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 lovePoint = 1;
  inline bool has_lovePoint() const;
  inline void clear_lovePoint();
  static const int kLovePointFieldNumber = 1;
  inline ::google::protobuf::int32 lovePoint() const;
  inline void set_lovePoint(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyLovePoint)
 private:
  inline void set_has_lovePoint();
  inline void clear_has_lovePoint();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 lovePoint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyLovePoint* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BuyDurability : public ::google::protobuf::Message {
 public:
  NetProto_BuyDurability();
  virtual ~NetProto_BuyDurability();
  
  NetProto_BuyDurability(const NetProto_BuyDurability& from);
  
  inline NetProto_BuyDurability& operator=(const NetProto_BuyDurability& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BuyDurability& default_instance();
  
  void Swap(NetProto_BuyDurability* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BuyDurability* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BuyDurability& from);
  void MergeFrom(const NetProto_BuyDurability& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BuyDurability_ID ID;
  static const ID GROUPID = NetProto_BuyDurability_ID_GROUPID;
  static const ID UNITID = NetProto_BuyDurability_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BuyDurability_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BuyDurability_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BuyDurability_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BuyDurability_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BuyDurability_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BuyDurability_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BuyDurability_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_BuyDurability)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BuyDurability* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_LoginObtRMB : public ::google::protobuf::Message {
 public:
  NetProto_LoginObtRMB();
  virtual ~NetProto_LoginObtRMB();
  
  NetProto_LoginObtRMB(const NetProto_LoginObtRMB& from);
  
  inline NetProto_LoginObtRMB& operator=(const NetProto_LoginObtRMB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_LoginObtRMB& default_instance();
  
  void Swap(NetProto_LoginObtRMB* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_LoginObtRMB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_LoginObtRMB& from);
  void MergeFrom(const NetProto_LoginObtRMB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_LoginObtRMB_ID ID;
  static const ID GROUPID = NetProto_LoginObtRMB_ID_GROUPID;
  static const ID UNITID = NetProto_LoginObtRMB_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_LoginObtRMB_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_LoginObtRMB_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_LoginObtRMB_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_LoginObtRMB_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_LoginObtRMB_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_LoginObtRMB_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_LoginObtRMB_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_LoginObtRMB)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_LoginObtRMB* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UnwearWing : public ::google::protobuf::Message {
 public:
  NetProto_UnwearWing();
  virtual ~NetProto_UnwearWing();
  
  NetProto_UnwearWing(const NetProto_UnwearWing& from);
  
  inline NetProto_UnwearWing& operator=(const NetProto_UnwearWing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UnwearWing& default_instance();
  
  void Swap(NetProto_UnwearWing* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UnwearWing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UnwearWing& from);
  void MergeFrom(const NetProto_UnwearWing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UnwearWing_ID ID;
  static const ID GROUPID = NetProto_UnwearWing_ID_GROUPID;
  static const ID UNITID = NetProto_UnwearWing_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UnwearWing_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UnwearWing_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UnwearWing_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UnwearWing_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UnwearWing_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UnwearWing_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UnwearWing_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_UnwearWing)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UnwearWing* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GetEquip : public ::google::protobuf::Message {
 public:
  NetProto_GetEquip();
  virtual ~NetProto_GetEquip();
  
  NetProto_GetEquip(const NetProto_GetEquip& from);
  
  inline NetProto_GetEquip& operator=(const NetProto_GetEquip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GetEquip& default_instance();
  
  void Swap(NetProto_GetEquip* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GetEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GetEquip& from);
  void MergeFrom(const NetProto_GetEquip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GetEquip_ID ID;
  static const ID GROUPID = NetProto_GetEquip_ID_GROUPID;
  static const ID UNITID = NetProto_GetEquip_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GetEquip_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GetEquip_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GetEquip_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GetEquip_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GetEquip_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GetEquip_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GetEquip_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .PB_EquipAsset asset = 2;
  inline bool has_asset() const;
  inline void clear_asset();
  static const int kAssetFieldNumber = 2;
  inline const ::PB_EquipAsset& asset() const;
  inline ::PB_EquipAsset* mutable_asset();
  inline ::PB_EquipAsset* release_asset();
  
  // @@protoc_insertion_point(class_scope:NetProto_GetEquip)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_asset();
  inline void clear_has_asset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_EquipAsset* asset_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GetEquip* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ResetCount : public ::google::protobuf::Message {
 public:
  NetProto_ResetCount();
  virtual ~NetProto_ResetCount();
  
  NetProto_ResetCount(const NetProto_ResetCount& from);
  
  inline NetProto_ResetCount& operator=(const NetProto_ResetCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ResetCount& default_instance();
  
  void Swap(NetProto_ResetCount* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ResetCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ResetCount& from);
  void MergeFrom(const NetProto_ResetCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ResetCount_ID ID;
  static const ID GROUPID = NetProto_ResetCount_ID_GROUPID;
  static const ID UNITID = NetProto_ResetCount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ResetCount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ResetCount_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ResetCount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ResetCount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ResetCount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ResetCount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ResetCount_ID_Parse(name, value);
  }
  
  typedef NetProto_ResetCount_Type Type;
  static const Type SINGLE_ENHANCE = NetProto_ResetCount_Type_SINGLE_ENHANCE;
  static const Type BOSS = NetProto_ResetCount_Type_BOSS;
  static const Type GOD = NetProto_ResetCount_Type_GOD;
  static const Type GOD_CD = NetProto_ResetCount_Type_GOD_CD;
  static const Type QUICK_FIGHT_CD = NetProto_ResetCount_Type_QUICK_FIGHT_CD;
  static inline bool Type_IsValid(int value) {
    return NetProto_ResetCount_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_ResetCount_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_ResetCount_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_ResetCount_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_ResetCount_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_ResetCount_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_ResetCount_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_ResetCount.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_ResetCount_Type type() const;
  inline void set_type(::NetProto_ResetCount_Type value);
  
  // optional int32 arg = 2;
  inline bool has_arg() const;
  inline void clear_arg();
  static const int kArgFieldNumber = 2;
  inline ::google::protobuf::int32 arg() const;
  inline void set_arg(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ResetCount)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_arg();
  inline void clear_has_arg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 arg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ResetCount* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GodPlayer : public ::google::protobuf::Message {
 public:
  NetProto_GodPlayer();
  virtual ~NetProto_GodPlayer();
  
  NetProto_GodPlayer(const NetProto_GodPlayer& from);
  
  inline NetProto_GodPlayer& operator=(const NetProto_GodPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GodPlayer& default_instance();
  
  void Swap(NetProto_GodPlayer* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GodPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GodPlayer& from);
  void MergeFrom(const NetProto_GodPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GodPlayer_ID ID;
  static const ID GROUPID = NetProto_GodPlayer_ID_GROUPID;
  static const ID UNITID = NetProto_GodPlayer_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GodPlayer_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GodPlayer_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GodPlayer_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GodPlayer_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GodPlayer_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GodPlayer_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GodPlayer_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_ProfessionInfo.Type professionType = 1;
  inline bool has_professionType() const;
  inline void clear_professionType();
  static const int kProfessionTypeFieldNumber = 1;
  inline ::PB_ProfessionInfo_Type professionType() const;
  inline void set_professionType(::PB_ProfessionInfo_Type value);
  
  // optional int32 godRank = 2;
  inline bool has_godRank() const;
  inline void clear_godRank();
  static const int kGodRankFieldNumber = 2;
  inline ::google::protobuf::int32 godRank() const;
  inline void set_godRank(::google::protobuf::int32 value);
  
  // optional int32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // optional int32 inspire = 4;
  inline bool has_inspire() const;
  inline void clear_inspire();
  static const int kInspireFieldNumber = 4;
  inline ::google::protobuf::int32 inspire() const;
  inline void set_inspire(::google::protobuf::int32 value);
  
  // optional int64 roleID = 5;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 5;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional string str = 6;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 6;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GodPlayer)
 private:
  inline void set_has_professionType();
  inline void clear_has_professionType();
  inline void set_has_godRank();
  inline void clear_has_godRank();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_inspire();
  inline void clear_has_inspire();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int professionType_;
  ::google::protobuf::int32 godRank_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 inspire_;
  ::google::protobuf::int64 roleID_;
  ::std::string* str_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GodPlayer* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GodRandomPlayer : public ::google::protobuf::Message {
 public:
  NetProto_GodRandomPlayer();
  virtual ~NetProto_GodRandomPlayer();
  
  NetProto_GodRandomPlayer(const NetProto_GodRandomPlayer& from);
  
  inline NetProto_GodRandomPlayer& operator=(const NetProto_GodRandomPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GodRandomPlayer& default_instance();
  
  void Swap(NetProto_GodRandomPlayer* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GodRandomPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GodRandomPlayer& from);
  void MergeFrom(const NetProto_GodRandomPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GodRandomPlayer_ID ID;
  static const ID GROUPID = NetProto_GodRandomPlayer_ID_GROUPID;
  static const ID UNITID = NetProto_GodRandomPlayer_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GodRandomPlayer_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GodRandomPlayer_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GodRandomPlayer_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GodRandomPlayer_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GodRandomPlayer_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GodRandomPlayer_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GodRandomPlayer_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .NetProto_GodPlayer player = 1;
  inline int player_size() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::NetProto_GodPlayer& player(int index) const;
  inline ::NetProto_GodPlayer* mutable_player(int index);
  inline ::NetProto_GodPlayer* add_player();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GodPlayer >&
      player() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_GodPlayer >*
      mutable_player();
  
  // @@protoc_insertion_point(class_scope:NetProto_GodRandomPlayer)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NetProto_GodPlayer > player_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GodRandomPlayer* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GodRecords : public ::google::protobuf::Message {
 public:
  NetProto_GodRecords();
  virtual ~NetProto_GodRecords();
  
  NetProto_GodRecords(const NetProto_GodRecords& from);
  
  inline NetProto_GodRecords& operator=(const NetProto_GodRecords& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GodRecords& default_instance();
  
  void Swap(NetProto_GodRecords* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GodRecords* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GodRecords& from);
  void MergeFrom(const NetProto_GodRecords& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GodRecords_ID ID;
  static const ID GROUPID = NetProto_GodRecords_ID_GROUPID;
  static const ID UNITID = NetProto_GodRecords_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GodRecords_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GodRecords_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GodRecords_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GodRecords_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GodRecords_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GodRecords_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GodRecords_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated bool flag = 1;
  inline int flag_size() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline bool flag(int index) const;
  inline void set_flag(int index, bool value);
  inline void add_flag(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      flag() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_flag();
  
  // repeated int32 num = 2;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::int32 value);
  inline void add_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_num();
  
  // repeated .PB_ProfessionInfo.Type professionType = 3;
  inline int professionType_size() const;
  inline void clear_professionType();
  static const int kProfessionTypeFieldNumber = 3;
  inline ::PB_ProfessionInfo_Type professionType(int index) const;
  inline void set_professionType(int index, ::PB_ProfessionInfo_Type value);
  inline void add_professionType(::PB_ProfessionInfo_Type value);
  inline const ::google::protobuf::RepeatedField<int>& professionType() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_professionType();
  
  // repeated int32 level = 4;
  inline int level_size() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level(int index) const;
  inline void set_level(int index, ::google::protobuf::int32 value);
  inline void add_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_level();
  
  // repeated string name = 5;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();
  
  // repeated int32 time = 6;
  inline int time_size() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::int32 time(int index) const;
  inline void set_time(int index, ::google::protobuf::int32 value);
  inline void add_time(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_time();
  
  // repeated int64 roleID = 7;
  inline int roleID_size() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 7;
  inline ::google::protobuf::int64 roleID(int index) const;
  inline void set_roleID(int index, ::google::protobuf::int64 value);
  inline void add_roleID(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      roleID() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_roleID();
  
  // @@protoc_insertion_point(class_scope:NetProto_GodRecords)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< bool > flag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > num_;
  ::google::protobuf::RepeatedField<int> professionType_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GodRecords* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GodPanel : public ::google::protobuf::Message {
 public:
  NetProto_GodPanel();
  virtual ~NetProto_GodPanel();
  
  NetProto_GodPanel(const NetProto_GodPanel& from);
  
  inline NetProto_GodPanel& operator=(const NetProto_GodPanel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GodPanel& default_instance();
  
  void Swap(NetProto_GodPanel* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GodPanel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GodPanel& from);
  void MergeFrom(const NetProto_GodPanel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GodPanel_ID ID;
  static const ID GROUPID = NetProto_GodPanel_ID_GROUPID;
  static const ID UNITID = NetProto_GodPanel_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GodPanel_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GodPanel_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GodPanel_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GodPanel_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GodPanel_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GodPanel_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GodPanel_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GodPlayer player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::NetProto_GodPlayer& player() const;
  inline ::NetProto_GodPlayer* mutable_player();
  inline ::NetProto_GodPlayer* release_player();
  
  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // optional int32 nextTime = 3;
  inline bool has_nextTime() const;
  inline void clear_nextTime();
  static const int kNextTimeFieldNumber = 3;
  inline ::google::protobuf::int32 nextTime() const;
  inline void set_nextTime(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GodPanel)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_nextTime();
  inline void clear_has_nextTime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GodPlayer* player_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 nextTime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GodPanel* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SelectGodRole : public ::google::protobuf::Message {
 public:
  NetProto_SelectGodRole();
  virtual ~NetProto_SelectGodRole();
  
  NetProto_SelectGodRole(const NetProto_SelectGodRole& from);
  
  inline NetProto_SelectGodRole& operator=(const NetProto_SelectGodRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SelectGodRole& default_instance();
  
  void Swap(NetProto_SelectGodRole* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SelectGodRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SelectGodRole& from);
  void MergeFrom(const NetProto_SelectGodRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SelectGodRole_ID ID;
  static const ID GROUPID = NetProto_SelectGodRole_ID_GROUPID;
  static const ID UNITID = NetProto_SelectGodRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SelectGodRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SelectGodRole_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SelectGodRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SelectGodRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SelectGodRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SelectGodRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SelectGodRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional .PB_PlayerAtt att = 2;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline const ::PB_PlayerAtt& att() const;
  inline ::PB_PlayerAtt* mutable_att();
  inline ::PB_PlayerAtt* release_att();
  
  // @@protoc_insertion_point(class_scope:NetProto_SelectGodRole)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_att();
  inline void clear_has_att();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::PB_PlayerAtt* att_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SelectGodRole* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SetSpecial : public ::google::protobuf::Message {
 public:
  NetProto_SetSpecial();
  virtual ~NetProto_SetSpecial();
  
  NetProto_SetSpecial(const NetProto_SetSpecial& from);
  
  inline NetProto_SetSpecial& operator=(const NetProto_SetSpecial& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SetSpecial& default_instance();
  
  void Swap(NetProto_SetSpecial* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SetSpecial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SetSpecial& from);
  void MergeFrom(const NetProto_SetSpecial& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SetSpecial_ID ID;
  static const ID GROUPID = NetProto_SetSpecial_ID_GROUPID;
  static const ID UNITID = NetProto_SetSpecial_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SetSpecial_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SetSpecial_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SetSpecial_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SetSpecial_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SetSpecial_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SetSpecial_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SetSpecial_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 npc = 1;
  inline bool has_npc() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 1;
  inline ::google::protobuf::int32 npc() const;
  inline void set_npc(::google::protobuf::int32 value);
  
  // optional bool enable = 2;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 2;
  inline bool enable() const;
  inline void set_enable(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SetSpecial)
 private:
  inline void set_has_npc();
  inline void clear_has_npc();
  inline void set_has_enable();
  inline void clear_has_enable();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 npc_;
  bool enable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SetSpecial* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ResolveEquips : public ::google::protobuf::Message {
 public:
  NetProto_ResolveEquips();
  virtual ~NetProto_ResolveEquips();
  
  NetProto_ResolveEquips(const NetProto_ResolveEquips& from);
  
  inline NetProto_ResolveEquips& operator=(const NetProto_ResolveEquips& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ResolveEquips& default_instance();
  
  void Swap(NetProto_ResolveEquips* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ResolveEquips* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ResolveEquips& from);
  void MergeFrom(const NetProto_ResolveEquips& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ResolveEquips_ID ID;
  static const ID GROUPID = NetProto_ResolveEquips_ID_GROUPID;
  static const ID UNITID = NetProto_ResolveEquips_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ResolveEquips_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ResolveEquips_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ResolveEquips_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ResolveEquips_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ResolveEquips_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ResolveEquips_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ResolveEquips_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ResolveEquips)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 op_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ResolveEquips* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyPKScoreActive : public ::google::protobuf::Message {
 public:
  NetProto_ModifyPKScoreActive();
  virtual ~NetProto_ModifyPKScoreActive();
  
  NetProto_ModifyPKScoreActive(const NetProto_ModifyPKScoreActive& from);
  
  inline NetProto_ModifyPKScoreActive& operator=(const NetProto_ModifyPKScoreActive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyPKScoreActive& default_instance();
  
  void Swap(NetProto_ModifyPKScoreActive* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyPKScoreActive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyPKScoreActive& from);
  void MergeFrom(const NetProto_ModifyPKScoreActive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyPKScoreActive_ID ID;
  static const ID GROUPID = NetProto_ModifyPKScoreActive_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyPKScoreActive_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyPKScoreActive_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyPKScoreActive_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyPKScoreActive_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyPKScoreActive_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyPKScoreActive_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyPKScoreActive_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyPKScoreActive_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyPKScoreActive)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyPKScoreActive* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyRMBActive : public ::google::protobuf::Message {
 public:
  NetProto_ModifyRMBActive();
  virtual ~NetProto_ModifyRMBActive();
  
  NetProto_ModifyRMBActive(const NetProto_ModifyRMBActive& from);
  
  inline NetProto_ModifyRMBActive& operator=(const NetProto_ModifyRMBActive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyRMBActive& default_instance();
  
  void Swap(NetProto_ModifyRMBActive* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyRMBActive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyRMBActive& from);
  void MergeFrom(const NetProto_ModifyRMBActive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyRMBActive_ID ID;
  static const ID GROUPID = NetProto_ModifyRMBActive_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyRMBActive_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyRMBActive_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyRMBActive_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyRMBActive_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyRMBActive_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyRMBActive_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyRMBActive_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyRMBActive_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyRMBActive)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyRMBActive* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DropItem : public ::google::protobuf::Message {
 public:
  NetProto_DropItem();
  virtual ~NetProto_DropItem();
  
  NetProto_DropItem(const NetProto_DropItem& from);
  
  inline NetProto_DropItem& operator=(const NetProto_DropItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DropItem& default_instance();
  
  void Swap(NetProto_DropItem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DropItem& from);
  void MergeFrom(const NetProto_DropItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DropItem_ID ID;
  static const ID GROUPID = NetProto_DropItem_ID_GROUPID;
  static const ID UNITID = NetProto_DropItem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DropItem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DropItem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DropItem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DropItem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DropItem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DropItem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DropItem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 npc = 1;
  inline bool has_npc() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 1;
  inline ::google::protobuf::int32 npc() const;
  inline void set_npc(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 v = 3;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 3;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);
  
  // optional int32 v1 = 4;
  inline bool has_v1() const;
  inline void clear_v1();
  static const int kV1FieldNumber = 4;
  inline ::google::protobuf::int32 v1() const;
  inline void set_v1(::google::protobuf::int32 value);
  
  // optional int32 v2 = 5;
  inline bool has_v2() const;
  inline void clear_v2();
  static const int kV2FieldNumber = 5;
  inline ::google::protobuf::int32 v2() const;
  inline void set_v2(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DropItem)
 private:
  inline void set_has_npc();
  inline void clear_has_npc();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_v1();
  inline void clear_has_v1();
  inline void set_has_v2();
  inline void clear_has_v2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 npc_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 v_;
  ::google::protobuf::int32 v1_;
  ::google::protobuf::int32 v2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DropItem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SellGoods : public ::google::protobuf::Message {
 public:
  NetProto_SellGoods();
  virtual ~NetProto_SellGoods();
  
  NetProto_SellGoods(const NetProto_SellGoods& from);
  
  inline NetProto_SellGoods& operator=(const NetProto_SellGoods& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SellGoods& default_instance();
  
  void Swap(NetProto_SellGoods* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SellGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SellGoods& from);
  void MergeFrom(const NetProto_SellGoods& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SellGoods_ID ID;
  static const ID GROUPID = NetProto_SellGoods_ID_GROUPID;
  static const ID UNITID = NetProto_SellGoods_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SellGoods_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SellGoods_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SellGoods_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SellGoods_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SellGoods_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SellGoods_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SellGoods_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .GoodsInfo.ColorType op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::GoodsInfo_ColorType op() const;
  inline void set_op(::GoodsInfo_ColorType value);
  
  // optional .PB_ItemPackage.Begin type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::PB_ItemPackage_Begin type() const;
  inline void set_type(::PB_ItemPackage_Begin value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SellGoods)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int op_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SellGoods* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Luck : public ::google::protobuf::Message {
 public:
  NetProto_Luck();
  virtual ~NetProto_Luck();
  
  NetProto_Luck(const NetProto_Luck& from);
  
  inline NetProto_Luck& operator=(const NetProto_Luck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Luck& default_instance();
  
  void Swap(NetProto_Luck* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Luck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Luck& from);
  void MergeFrom(const NetProto_Luck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Luck_ID ID;
  static const ID GROUPID = NetProto_Luck_ID_GROUPID;
  static const ID UNITID = NetProto_Luck_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Luck_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Luck_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Luck_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Luck_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Luck_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Luck_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Luck_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional bool free = 2;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 2;
  inline bool free() const;
  inline void set_free(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Luck)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_free();
  inline void clear_has_free();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  bool free_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Luck* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GrabRedEnvelope : public ::google::protobuf::Message {
 public:
  NetProto_GrabRedEnvelope();
  virtual ~NetProto_GrabRedEnvelope();
  
  NetProto_GrabRedEnvelope(const NetProto_GrabRedEnvelope& from);
  
  inline NetProto_GrabRedEnvelope& operator=(const NetProto_GrabRedEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GrabRedEnvelope& default_instance();
  
  void Swap(NetProto_GrabRedEnvelope* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GrabRedEnvelope* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GrabRedEnvelope& from);
  void MergeFrom(const NetProto_GrabRedEnvelope& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GrabRedEnvelope_ID ID;
  static const ID GROUPID = NetProto_GrabRedEnvelope_ID_GROUPID;
  static const ID UNITID = NetProto_GrabRedEnvelope_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GrabRedEnvelope_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GrabRedEnvelope_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GrabRedEnvelope_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GrabRedEnvelope_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GrabRedEnvelope_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GrabRedEnvelope_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GrabRedEnvelope_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string str = 1;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // optional .NetProto_GetRes gr = 2;
  inline bool has_gr() const;
  inline void clear_gr();
  static const int kGrFieldNumber = 2;
  inline const ::NetProto_GetRes& gr() const;
  inline ::NetProto_GetRes* mutable_gr();
  inline ::NetProto_GetRes* release_gr();
  
  // @@protoc_insertion_point(class_scope:NetProto_GrabRedEnvelope)
 private:
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_gr();
  inline void clear_has_gr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_;
  ::NetProto_GetRes* gr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GrabRedEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_CatGift : public ::google::protobuf::Message {
 public:
  NetProto_CatGift();
  virtual ~NetProto_CatGift();
  
  NetProto_CatGift(const NetProto_CatGift& from);
  
  inline NetProto_CatGift& operator=(const NetProto_CatGift& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_CatGift& default_instance();
  
  void Swap(NetProto_CatGift* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_CatGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_CatGift& from);
  void MergeFrom(const NetProto_CatGift& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_CatGift_ID ID;
  static const ID GROUPID = NetProto_CatGift_ID_GROUPID;
  static const ID UNITID = NetProto_CatGift_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_CatGift_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_CatGift_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_CatGift_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_CatGift_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_CatGift_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_CatGift_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_CatGift_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 allCount = 1;
  inline bool has_allCount() const;
  inline void clear_allCount();
  static const int kAllCountFieldNumber = 1;
  inline ::google::protobuf::int32 allCount() const;
  inline void set_allCount(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_CatGift)
 private:
  inline void set_has_allCount();
  inline void clear_has_allCount();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 allCount_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_CatGift* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GroupPurchase : public ::google::protobuf::Message {
 public:
  NetProto_GroupPurchase();
  virtual ~NetProto_GroupPurchase();
  
  NetProto_GroupPurchase(const NetProto_GroupPurchase& from);
  
  inline NetProto_GroupPurchase& operator=(const NetProto_GroupPurchase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GroupPurchase& default_instance();
  
  void Swap(NetProto_GroupPurchase* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GroupPurchase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GroupPurchase& from);
  void MergeFrom(const NetProto_GroupPurchase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GroupPurchase_ID ID;
  static const ID GROUPID = NetProto_GroupPurchase_ID_GROUPID;
  static const ID UNITID = NetProto_GroupPurchase_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GroupPurchase_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GroupPurchase_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GroupPurchase_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GroupPurchase_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GroupPurchase_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GroupPurchase_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GroupPurchase_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 allCount = 1;
  inline bool has_allCount() const;
  inline void clear_allCount();
  static const int kAllCountFieldNumber = 1;
  inline ::google::protobuf::int32 allCount() const;
  inline void set_allCount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GroupPurchase)
 private:
  inline void set_has_allCount();
  inline void clear_has_allCount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 allCount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GroupPurchase* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Rides : public ::google::protobuf::Message {
 public:
  NetProto_Rides();
  virtual ~NetProto_Rides();
  
  NetProto_Rides(const NetProto_Rides& from);
  
  inline NetProto_Rides& operator=(const NetProto_Rides& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Rides& default_instance();
  
  void Swap(NetProto_Rides* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Rides* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Rides& from);
  void MergeFrom(const NetProto_Rides& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Rides_ID ID;
  static const ID GROUPID = NetProto_Rides_ID_GROUPID;
  static const ID UNITID = NetProto_Rides_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Rides_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Rides_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Rides_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Rides_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Rides_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Rides_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Rides_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 rides = 1;
  inline bool has_rides() const;
  inline void clear_rides();
  static const int kRidesFieldNumber = 1;
  inline ::google::protobuf::int32 rides() const;
  inline void set_rides(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Rides)
 private:
  inline void set_has_rides();
  inline void clear_has_rides();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 rides_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Rides* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RidesTrain : public ::google::protobuf::Message {
 public:
  NetProto_RidesTrain();
  virtual ~NetProto_RidesTrain();
  
  NetProto_RidesTrain(const NetProto_RidesTrain& from);
  
  inline NetProto_RidesTrain& operator=(const NetProto_RidesTrain& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RidesTrain& default_instance();
  
  void Swap(NetProto_RidesTrain* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RidesTrain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RidesTrain& from);
  void MergeFrom(const NetProto_RidesTrain& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RidesTrain_ID ID;
  static const ID GROUPID = NetProto_RidesTrain_ID_GROUPID;
  static const ID UNITID = NetProto_RidesTrain_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RidesTrain_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RidesTrain_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RidesTrain_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RidesTrain_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RidesTrain_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RidesTrain_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RidesTrain_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional bool high = 2;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 2;
  inline bool high() const;
  inline void set_high(bool value);
  
  // optional int32 upProperty = 3;
  inline bool has_upProperty() const;
  inline void clear_upProperty();
  static const int kUpPropertyFieldNumber = 3;
  inline ::google::protobuf::int32 upProperty() const;
  inline void set_upProperty(::google::protobuf::int32 value);
  
  // optional int32 downProperty = 4;
  inline bool has_downProperty() const;
  inline void clear_downProperty();
  static const int kDownPropertyFieldNumber = 4;
  inline ::google::protobuf::int32 downProperty() const;
  inline void set_downProperty(::google::protobuf::int32 value);
  
  // optional int32 upv = 5;
  inline bool has_upv() const;
  inline void clear_upv();
  static const int kUpvFieldNumber = 5;
  inline ::google::protobuf::int32 upv() const;
  inline void set_upv(::google::protobuf::int32 value);
  
  // optional int32 downv = 6;
  inline bool has_downv() const;
  inline void clear_downv();
  static const int kDownvFieldNumber = 6;
  inline ::google::protobuf::int32 downv() const;
  inline void set_downv(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RidesTrain)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_upProperty();
  inline void clear_has_upProperty();
  inline void set_has_downProperty();
  inline void clear_has_downProperty();
  inline void set_has_upv();
  inline void clear_has_upv();
  inline void set_has_downv();
  inline void clear_has_downv();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  bool high_;
  ::google::protobuf::int32 upProperty_;
  ::google::protobuf::int32 downProperty_;
  ::google::protobuf::int32 upv_;
  ::google::protobuf::int32 downv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RidesTrain* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GenRides : public ::google::protobuf::Message {
 public:
  NetProto_GenRides();
  virtual ~NetProto_GenRides();
  
  NetProto_GenRides(const NetProto_GenRides& from);
  
  inline NetProto_GenRides& operator=(const NetProto_GenRides& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GenRides& default_instance();
  
  void Swap(NetProto_GenRides* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GenRides* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GenRides& from);
  void MergeFrom(const NetProto_GenRides& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GenRides_ID ID;
  static const ID GROUPID = NetProto_GenRides_ID_GROUPID;
  static const ID UNITID = NetProto_GenRides_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GenRides_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GenRides_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GenRides_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GenRides_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GenRides_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GenRides_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GenRides_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int32 indexes = 1;
  inline int indexes_size() const;
  inline void clear_indexes();
  static const int kIndexesFieldNumber = 1;
  inline ::google::protobuf::int32 indexes(int index) const;
  inline void set_indexes(int index, ::google::protobuf::int32 value);
  inline void add_indexes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indexes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indexes();
  
  // repeated int32 ids = 2;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 2;
  inline ::google::protobuf::int32 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::int32 value);
  inline void add_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ids();
  
  // @@protoc_insertion_point(class_scope:NetProto_GenRides)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indexes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ids_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GenRides* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GodShip : public ::google::protobuf::Message {
 public:
  NetProto_GodShip();
  virtual ~NetProto_GodShip();
  
  NetProto_GodShip(const NetProto_GodShip& from);
  
  inline NetProto_GodShip& operator=(const NetProto_GodShip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GodShip& default_instance();
  
  void Swap(NetProto_GodShip* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GodShip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GodShip& from);
  void MergeFrom(const NetProto_GodShip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GodShip_ID ID;
  static const ID GROUPID = NetProto_GodShip_ID_GROUPID;
  static const ID UNITID = NetProto_GodShip_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GodShip_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GodShip_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GodShip_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GodShip_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GodShip_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GodShip_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GodShip_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional bool next = 2;
  inline bool has_next() const;
  inline void clear_next();
  static const int kNextFieldNumber = 2;
  inline bool next() const;
  inline void set_next(bool value);
  
  // optional int32 cut = 3;
  inline bool has_cut() const;
  inline void clear_cut();
  static const int kCutFieldNumber = 3;
  inline ::google::protobuf::int32 cut() const;
  inline void set_cut(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GodShip)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_next();
  inline void clear_has_next();
  inline void set_has_cut();
  inline void clear_has_cut();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  bool next_;
  ::google::protobuf::int32 cut_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GodShip* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Swallow : public ::google::protobuf::Message {
 public:
  NetProto_Swallow();
  virtual ~NetProto_Swallow();
  
  NetProto_Swallow(const NetProto_Swallow& from);
  
  inline NetProto_Swallow& operator=(const NetProto_Swallow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Swallow& default_instance();
  
  void Swap(NetProto_Swallow* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Swallow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Swallow& from);
  void MergeFrom(const NetProto_Swallow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Swallow_ID ID;
  static const ID GROUPID = NetProto_Swallow_ID_GROUPID;
  static const ID UNITID = NetProto_Swallow_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Swallow_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Swallow_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Swallow_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Swallow_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Swallow_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Swallow_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Swallow_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 select = 2;
  inline bool has_select() const;
  inline void clear_select();
  static const int kSelectFieldNumber = 2;
  inline ::google::protobuf::int32 select() const;
  inline void set_select(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Swallow)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_select();
  inline void clear_has_select();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 select_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Swallow* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GodPackage : public ::google::protobuf::Message {
 public:
  NetProto_GodPackage();
  virtual ~NetProto_GodPackage();
  
  NetProto_GodPackage(const NetProto_GodPackage& from);
  
  inline NetProto_GodPackage& operator=(const NetProto_GodPackage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GodPackage& default_instance();
  
  void Swap(NetProto_GodPackage* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GodPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GodPackage& from);
  void MergeFrom(const NetProto_GodPackage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GodPackage_ID ID;
  static const ID GROUPID = NetProto_GodPackage_ID_GROUPID;
  static const ID UNITID = NetProto_GodPackage_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GodPackage_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GodPackage_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GodPackage_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GodPackage_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GodPackage_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GodPackage_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GodPackage_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 pool = 1;
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 1;
  inline ::google::protobuf::int32 pool() const;
  inline void set_pool(::google::protobuf::int32 value);
  
  // optional int32 package = 2;
  inline bool has_package() const;
  inline void clear_package();
  static const int kPackageFieldNumber = 2;
  inline ::google::protobuf::int32 package() const;
  inline void set_package(::google::protobuf::int32 value);
  
  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 quality = 6;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 6;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GodPackage)
 private:
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_package();
  inline void clear_has_package();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_quality();
  inline void clear_has_quality();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pool_;
  ::google::protobuf::int32 package_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 quality_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GodPackage* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_WearGodShip : public ::google::protobuf::Message {
 public:
  NetProto_WearGodShip();
  virtual ~NetProto_WearGodShip();
  
  NetProto_WearGodShip(const NetProto_WearGodShip& from);
  
  inline NetProto_WearGodShip& operator=(const NetProto_WearGodShip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_WearGodShip& default_instance();
  
  void Swap(NetProto_WearGodShip* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_WearGodShip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_WearGodShip& from);
  void MergeFrom(const NetProto_WearGodShip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_WearGodShip_ID ID;
  static const ID GROUPID = NetProto_WearGodShip_ID_GROUPID;
  static const ID UNITID = NetProto_WearGodShip_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_WearGodShip_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_WearGodShip_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_WearGodShip_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_WearGodShip_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_WearGodShip_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_WearGodShip_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_WearGodShip_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_WearGodShip)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_WearGodShip* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UnWearGodShip : public ::google::protobuf::Message {
 public:
  NetProto_UnWearGodShip();
  virtual ~NetProto_UnWearGodShip();
  
  NetProto_UnWearGodShip(const NetProto_UnWearGodShip& from);
  
  inline NetProto_UnWearGodShip& operator=(const NetProto_UnWearGodShip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UnWearGodShip& default_instance();
  
  void Swap(NetProto_UnWearGodShip* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UnWearGodShip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UnWearGodShip& from);
  void MergeFrom(const NetProto_UnWearGodShip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UnWearGodShip_ID ID;
  static const ID GROUPID = NetProto_UnWearGodShip_ID_GROUPID;
  static const ID UNITID = NetProto_UnWearGodShip_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UnWearGodShip_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UnWearGodShip_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UnWearGodShip_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UnWearGodShip_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UnWearGodShip_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UnWearGodShip_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UnWearGodShip_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_UnWearGodShip)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UnWearGodShip* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ArrangeGodShip : public ::google::protobuf::Message {
 public:
  NetProto_ArrangeGodShip();
  virtual ~NetProto_ArrangeGodShip();
  
  NetProto_ArrangeGodShip(const NetProto_ArrangeGodShip& from);
  
  inline NetProto_ArrangeGodShip& operator=(const NetProto_ArrangeGodShip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ArrangeGodShip& default_instance();
  
  void Swap(NetProto_ArrangeGodShip* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ArrangeGodShip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ArrangeGodShip& from);
  void MergeFrom(const NetProto_ArrangeGodShip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ArrangeGodShip_ID ID;
  static const ID GROUPID = NetProto_ArrangeGodShip_ID_GROUPID;
  static const ID UNITID = NetProto_ArrangeGodShip_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ArrangeGodShip_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ArrangeGodShip_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ArrangeGodShip_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ArrangeGodShip_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ArrangeGodShip_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ArrangeGodShip_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ArrangeGodShip_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_ArrangeGodShip)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ArrangeGodShip* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RidesUP : public ::google::protobuf::Message {
 public:
  NetProto_RidesUP();
  virtual ~NetProto_RidesUP();
  
  NetProto_RidesUP(const NetProto_RidesUP& from);
  
  inline NetProto_RidesUP& operator=(const NetProto_RidesUP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RidesUP& default_instance();
  
  void Swap(NetProto_RidesUP* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RidesUP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RidesUP& from);
  void MergeFrom(const NetProto_RidesUP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RidesUP_ID ID;
  static const ID GROUPID = NetProto_RidesUP_ID_GROUPID;
  static const ID UNITID = NetProto_RidesUP_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RidesUP_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RidesUP_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RidesUP_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RidesUP_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RidesUP_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RidesUP_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RidesUP_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RidesUP)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_star();
  inline void clear_has_star();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 star_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RidesUP* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RidesInherit : public ::google::protobuf::Message {
 public:
  NetProto_RidesInherit();
  virtual ~NetProto_RidesInherit();
  
  NetProto_RidesInherit(const NetProto_RidesInherit& from);
  
  inline NetProto_RidesInherit& operator=(const NetProto_RidesInherit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RidesInherit& default_instance();
  
  void Swap(NetProto_RidesInherit* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RidesInherit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RidesInherit& from);
  void MergeFrom(const NetProto_RidesInherit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RidesInherit_ID ID;
  static const ID GROUPID = NetProto_RidesInherit_ID_GROUPID;
  static const ID UNITID = NetProto_RidesInherit_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RidesInherit_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RidesInherit_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RidesInherit_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RidesInherit_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RidesInherit_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RidesInherit_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RidesInherit_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 target = 1;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 1;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);
  
  // repeated int32 ridesExpend = 2;
  inline int ridesExpend_size() const;
  inline void clear_ridesExpend();
  static const int kRidesExpendFieldNumber = 2;
  inline ::google::protobuf::int32 ridesExpend(int index) const;
  inline void set_ridesExpend(int index, ::google::protobuf::int32 value);
  inline void add_ridesExpend(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ridesExpend() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ridesExpend();
  
  // optional int64 curExp = 3;
  inline bool has_curExp() const;
  inline void clear_curExp();
  static const int kCurExpFieldNumber = 3;
  inline ::google::protobuf::int64 curExp() const;
  inline void set_curExp(::google::protobuf::int64 value);
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 potential = 5;
  inline bool has_potential() const;
  inline void clear_potential();
  static const int kPotentialFieldNumber = 5;
  inline ::google::protobuf::int32 potential() const;
  inline void set_potential(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RidesInherit)
 private:
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_curExp();
  inline void clear_has_curExp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_potential();
  inline void clear_has_potential();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ridesExpend_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 curExp_;
  ::google::protobuf::int32 potential_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RidesInherit* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SingleGodShip : public ::google::protobuf::Message {
 public:
  NetProto_SingleGodShip();
  virtual ~NetProto_SingleGodShip();
  
  NetProto_SingleGodShip(const NetProto_SingleGodShip& from);
  
  inline NetProto_SingleGodShip& operator=(const NetProto_SingleGodShip& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SingleGodShip& default_instance();
  
  void Swap(NetProto_SingleGodShip* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SingleGodShip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SingleGodShip& from);
  void MergeFrom(const NetProto_SingleGodShip& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SingleGodShip_ID ID;
  static const ID GROUPID = NetProto_SingleGodShip_ID_GROUPID;
  static const ID UNITID = NetProto_SingleGodShip_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SingleGodShip_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SingleGodShip_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SingleGodShip_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SingleGodShip_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SingleGodShip_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SingleGodShip_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SingleGodShip_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // repeated int32 eat = 2;
  inline int eat_size() const;
  inline void clear_eat();
  static const int kEatFieldNumber = 2;
  inline ::google::protobuf::int32 eat(int index) const;
  inline void set_eat(int index, ::google::protobuf::int32 value);
  inline void add_eat(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      eat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_eat();
  
  // @@protoc_insertion_point(class_scope:NetProto_SingleGodShip)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > eat_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SingleGodShip* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RidesLockAtt : public ::google::protobuf::Message {
 public:
  NetProto_RidesLockAtt();
  virtual ~NetProto_RidesLockAtt();
  
  NetProto_RidesLockAtt(const NetProto_RidesLockAtt& from);
  
  inline NetProto_RidesLockAtt& operator=(const NetProto_RidesLockAtt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RidesLockAtt& default_instance();
  
  void Swap(NetProto_RidesLockAtt* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RidesLockAtt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RidesLockAtt& from);
  void MergeFrom(const NetProto_RidesLockAtt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RidesLockAtt_ID ID;
  static const ID GROUPID = NetProto_RidesLockAtt_ID_GROUPID;
  static const ID UNITID = NetProto_RidesLockAtt_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RidesLockAtt_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RidesLockAtt_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RidesLockAtt_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RidesLockAtt_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RidesLockAtt_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RidesLockAtt_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RidesLockAtt_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 lockIndex = 2;
  inline bool has_lockIndex() const;
  inline void clear_lockIndex();
  static const int kLockIndexFieldNumber = 2;
  inline ::google::protobuf::int32 lockIndex() const;
  inline void set_lockIndex(::google::protobuf::int32 value);
  
  // optional bool lock = 3;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 3;
  inline bool lock() const;
  inline void set_lock(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RidesLockAtt)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_lockIndex();
  inline void clear_has_lockIndex();
  inline void set_has_lock();
  inline void clear_has_lock();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 lockIndex_;
  bool lock_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RidesLockAtt* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RidesConfirmTrain : public ::google::protobuf::Message {
 public:
  NetProto_RidesConfirmTrain();
  virtual ~NetProto_RidesConfirmTrain();
  
  NetProto_RidesConfirmTrain(const NetProto_RidesConfirmTrain& from);
  
  inline NetProto_RidesConfirmTrain& operator=(const NetProto_RidesConfirmTrain& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RidesConfirmTrain& default_instance();
  
  void Swap(NetProto_RidesConfirmTrain* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RidesConfirmTrain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RidesConfirmTrain& from);
  void MergeFrom(const NetProto_RidesConfirmTrain& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RidesConfirmTrain_ID ID;
  static const ID GROUPID = NetProto_RidesConfirmTrain_ID_GROUPID;
  static const ID UNITID = NetProto_RidesConfirmTrain_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RidesConfirmTrain_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RidesConfirmTrain_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RidesConfirmTrain_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RidesConfirmTrain_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RidesConfirmTrain_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RidesConfirmTrain_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RidesConfirmTrain_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RidesConfirmTrain)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RidesConfirmTrain* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RidesUnLockAtt : public ::google::protobuf::Message {
 public:
  NetProto_RidesUnLockAtt();
  virtual ~NetProto_RidesUnLockAtt();
  
  NetProto_RidesUnLockAtt(const NetProto_RidesUnLockAtt& from);
  
  inline NetProto_RidesUnLockAtt& operator=(const NetProto_RidesUnLockAtt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RidesUnLockAtt& default_instance();
  
  void Swap(NetProto_RidesUnLockAtt* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RidesUnLockAtt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RidesUnLockAtt& from);
  void MergeFrom(const NetProto_RidesUnLockAtt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RidesUnLockAtt_ID ID;
  static const ID GROUPID = NetProto_RidesUnLockAtt_ID_GROUPID;
  static const ID UNITID = NetProto_RidesUnLockAtt_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RidesUnLockAtt_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RidesUnLockAtt_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RidesUnLockAtt_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RidesUnLockAtt_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RidesUnLockAtt_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RidesUnLockAtt_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RidesUnLockAtt_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_RidesUnLockAtt)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RidesUnLockAtt* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddStatus : public ::google::protobuf::Message {
 public:
  NetProto_AddStatus();
  virtual ~NetProto_AddStatus();
  
  NetProto_AddStatus(const NetProto_AddStatus& from);
  
  inline NetProto_AddStatus& operator=(const NetProto_AddStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddStatus& default_instance();
  
  void Swap(NetProto_AddStatus* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddStatus& from);
  void MergeFrom(const NetProto_AddStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddStatus_ID ID;
  static const ID GROUPID = NetProto_AddStatus_ID_GROUPID;
  static const ID UNITID = NetProto_AddStatus_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddStatus_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddStatus_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddStatus_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddStatus_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddStatus_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddStatus_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddStatus_ID_Parse(name, value);
  }
  
  typedef NetProto_AddStatus_Type Type;
  static const Type PLAYER = NetProto_AddStatus_Type_PLAYER;
  static const Type NPC = NetProto_AddStatus_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_AddStatus_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_AddStatus_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_AddStatus_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_AddStatus_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_AddStatus_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_AddStatus_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_AddStatus_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 statusID = 1;
  inline bool has_statusID() const;
  inline void clear_statusID();
  static const int kStatusIDFieldNumber = 1;
  inline ::google::protobuf::int32 statusID() const;
  inline void set_statusID(::google::protobuf::int32 value);
  
  // optional .NetProto_AddStatus.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::NetProto_AddStatus_Type type() const;
  inline void set_type(::NetProto_AddStatus_Type value);
  
  // optional int32 targetID = 3;
  inline bool has_targetID() const;
  inline void clear_targetID();
  static const int kTargetIDFieldNumber = 3;
  inline ::google::protobuf::int32 targetID() const;
  inline void set_targetID(::google::protobuf::int32 value);
  
  // optional int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional .PB_Vector3f dest = 5;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 5;
  inline const ::PB_Vector3f& dest() const;
  inline ::PB_Vector3f* mutable_dest();
  inline ::PB_Vector3f* release_dest();
  
  // repeated int32 delSkills = 6;
  inline int delSkills_size() const;
  inline void clear_delSkills();
  static const int kDelSkillsFieldNumber = 6;
  inline ::google::protobuf::int32 delSkills(int index) const;
  inline void set_delSkills(int index, ::google::protobuf::int32 value);
  inline void add_delSkills(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      delSkills() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_delSkills();
  
  // optional int32 aID = 7;
  inline bool has_aID() const;
  inline void clear_aID();
  static const int kAIDFieldNumber = 7;
  inline ::google::protobuf::int32 aID() const;
  inline void set_aID(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_AddStatus)
 private:
  inline void set_has_statusID();
  inline void clear_has_statusID();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_targetID();
  inline void clear_has_targetID();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_aID();
  inline void clear_has_aID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 statusID_;
  int type_;
  ::google::protobuf::int32 targetID_;
  ::google::protobuf::int32 time_;
  ::PB_Vector3f* dest_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > delSkills_;
  ::google::protobuf::int32 aID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddStatus* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Hit : public ::google::protobuf::Message {
 public:
  NetProto_Hit();
  virtual ~NetProto_Hit();
  
  NetProto_Hit(const NetProto_Hit& from);
  
  inline NetProto_Hit& operator=(const NetProto_Hit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Hit& default_instance();
  
  void Swap(NetProto_Hit* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Hit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Hit& from);
  void MergeFrom(const NetProto_Hit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Hit_ID ID;
  static const ID GROUPID = NetProto_Hit_ID_GROUPID;
  static const ID UNITID = NetProto_Hit_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Hit_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Hit_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Hit_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Hit_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Hit_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Hit_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Hit_ID_Parse(name, value);
  }
  
  typedef NetProto_Hit_Type Type;
  static const Type PLAYER = NetProto_Hit_Type_PLAYER;
  static const Type NPC = NetProto_Hit_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_Hit_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Hit_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Hit_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Hit_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Hit_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Hit_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Hit_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 aSkillID = 1;
  inline bool has_aSkillID() const;
  inline void clear_aSkillID();
  static const int kASkillIDFieldNumber = 1;
  inline ::google::protobuf::int32 aSkillID() const;
  inline void set_aSkillID(::google::protobuf::int32 value);
  
  // repeated .NetProto_Hit.Type dType = 2;
  inline int dType_size() const;
  inline void clear_dType();
  static const int kDTypeFieldNumber = 2;
  inline ::NetProto_Hit_Type dType(int index) const;
  inline void set_dType(int index, ::NetProto_Hit_Type value);
  inline void add_dType(::NetProto_Hit_Type value);
  inline const ::google::protobuf::RepeatedField<int>& dType() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_dType();
  
  // repeated int32 dID = 3;
  inline int dID_size() const;
  inline void clear_dID();
  static const int kDIDFieldNumber = 3;
  inline ::google::protobuf::int32 dID(int index) const;
  inline void set_dID(int index, ::google::protobuf::int32 value);
  inline void add_dID(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dID() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dID();
  
  // optional .NetProto_Hit.Type aType = 4;
  inline bool has_aType() const;
  inline void clear_aType();
  static const int kATypeFieldNumber = 4;
  inline ::NetProto_Hit_Type aType() const;
  inline void set_aType(::NetProto_Hit_Type value);
  
  // optional int32 aID = 5;
  inline bool has_aID() const;
  inline void clear_aID();
  static const int kAIDFieldNumber = 5;
  inline ::google::protobuf::int32 aID() const;
  inline void set_aID(::google::protobuf::int32 value);
  
  // repeated .NetProto_AddStatus statuses = 6;
  inline int statuses_size() const;
  inline void clear_statuses();
  static const int kStatusesFieldNumber = 6;
  inline const ::NetProto_AddStatus& statuses(int index) const;
  inline ::NetProto_AddStatus* mutable_statuses(int index);
  inline ::NetProto_AddStatus* add_statuses();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_AddStatus >&
      statuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_AddStatus >*
      mutable_statuses();
  
  // optional bool resistControl = 7;
  inline bool has_resistControl() const;
  inline void clear_resistControl();
  static const int kResistControlFieldNumber = 7;
  inline bool resistControl() const;
  inline void set_resistControl(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Hit)
 private:
  inline void set_has_aSkillID();
  inline void clear_has_aSkillID();
  inline void set_has_aType();
  inline void clear_has_aType();
  inline void set_has_aID();
  inline void clear_has_aID();
  inline void set_has_resistControl();
  inline void clear_has_resistControl();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField<int> dType_;
  ::google::protobuf::int32 aSkillID_;
  int aType_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dID_;
  ::google::protobuf::RepeatedPtrField< ::NetProto_AddStatus > statuses_;
  ::google::protobuf::int32 aID_;
  bool resistControl_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Hit* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_StatusEffect : public ::google::protobuf::Message {
 public:
  NetProto_StatusEffect();
  virtual ~NetProto_StatusEffect();
  
  NetProto_StatusEffect(const NetProto_StatusEffect& from);
  
  inline NetProto_StatusEffect& operator=(const NetProto_StatusEffect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_StatusEffect& default_instance();
  
  void Swap(NetProto_StatusEffect* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_StatusEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_StatusEffect& from);
  void MergeFrom(const NetProto_StatusEffect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_StatusEffect_ID ID;
  static const ID GROUPID = NetProto_StatusEffect_ID_GROUPID;
  static const ID UNITID = NetProto_StatusEffect_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_StatusEffect_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_StatusEffect_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_StatusEffect_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_StatusEffect_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_StatusEffect_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_StatusEffect_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_StatusEffect_ID_Parse(name, value);
  }
  
  typedef NetProto_StatusEffect_Type Type;
  static const Type PLAYER = NetProto_StatusEffect_Type_PLAYER;
  static const Type NPC = NetProto_StatusEffect_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_StatusEffect_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_StatusEffect_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_StatusEffect_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_StatusEffect_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_StatusEffect_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_StatusEffect_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_StatusEffect_Type_Parse(name, value);
  }
  
  typedef NetProto_StatusEffect_Effect Effect;
  static const Effect NONE = NetProto_StatusEffect_Effect_NONE;
  static const Effect DODGE = NetProto_StatusEffect_Effect_DODGE;
  static const Effect CRIT = NetProto_StatusEffect_Effect_CRIT;
  static inline bool Effect_IsValid(int value) {
    return NetProto_StatusEffect_Effect_IsValid(value);
  }
  static const Effect Effect_MIN =
    NetProto_StatusEffect_Effect_Effect_MIN;
  static const Effect Effect_MAX =
    NetProto_StatusEffect_Effect_Effect_MAX;
  static const int Effect_ARRAYSIZE =
    NetProto_StatusEffect_Effect_Effect_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Effect_descriptor() {
    return NetProto_StatusEffect_Effect_descriptor();
  }
  static inline const ::std::string& Effect_Name(Effect value) {
    return NetProto_StatusEffect_Effect_Name(value);
  }
  static inline bool Effect_Parse(const ::std::string& name,
      Effect* value) {
    return NetProto_StatusEffect_Effect_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .StatusInfo.StatusType statusType = 1;
  inline bool has_statusType() const;
  inline void clear_statusType();
  static const int kStatusTypeFieldNumber = 1;
  inline ::StatusInfo_StatusType statusType() const;
  inline void set_statusType(::StatusInfo_StatusType value);
  
  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional .NetProto_StatusEffect.Type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::NetProto_StatusEffect_Type type() const;
  inline void set_type(::NetProto_StatusEffect_Type value);
  
  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_StatusEffect.Effect effect = 5;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 5;
  inline ::NetProto_StatusEffect_Effect effect() const;
  inline void set_effect(::NetProto_StatusEffect_Effect value);
  
  // optional int32 skillID = 6;
  inline bool has_skillID() const;
  inline void clear_skillID();
  static const int kSkillIDFieldNumber = 6;
  inline ::google::protobuf::int32 skillID() const;
  inline void set_skillID(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_StatusEffect)
 private:
  inline void set_has_statusType();
  inline void clear_has_statusType();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_skillID();
  inline void clear_has_skillID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int statusType_;
  ::google::protobuf::int32 value_;
  int type_;
  ::google::protobuf::int32 id_;
  int effect_;
  ::google::protobuf::int32 skillID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_StatusEffect* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_StaticOver : public ::google::protobuf::Message {
 public:
  NetProto_StaticOver();
  virtual ~NetProto_StaticOver();
  
  NetProto_StaticOver(const NetProto_StaticOver& from);
  
  inline NetProto_StaticOver& operator=(const NetProto_StaticOver& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_StaticOver& default_instance();
  
  void Swap(NetProto_StaticOver* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_StaticOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_StaticOver& from);
  void MergeFrom(const NetProto_StaticOver& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_StaticOver_ID ID;
  static const ID GROUPID = NetProto_StaticOver_ID_GROUPID;
  static const ID UNITID = NetProto_StaticOver_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_StaticOver_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_StaticOver_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_StaticOver_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_StaticOver_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_StaticOver_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_StaticOver_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_StaticOver_ID_Parse(name, value);
  }
  
  typedef NetProto_StaticOver_Type Type;
  static const Type PLAYER = NetProto_StaticOver_Type_PLAYER;
  static const Type NPC = NetProto_StaticOver_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_StaticOver_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_StaticOver_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_StaticOver_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_StaticOver_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_StaticOver_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_StaticOver_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_StaticOver_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_StaticOver.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_StaticOver_Type type() const;
  inline void set_type(::NetProto_StaticOver_Type value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_StaticOver)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_StaticOver* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Standup : public ::google::protobuf::Message {
 public:
  NetProto_Standup();
  virtual ~NetProto_Standup();
  
  NetProto_Standup(const NetProto_Standup& from);
  
  inline NetProto_Standup& operator=(const NetProto_Standup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Standup& default_instance();
  
  void Swap(NetProto_Standup* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Standup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Standup& from);
  void MergeFrom(const NetProto_Standup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Standup_ID ID;
  static const ID GROUPID = NetProto_Standup_ID_GROUPID;
  static const ID UNITID = NetProto_Standup_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Standup_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Standup_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Standup_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Standup_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Standup_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Standup_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Standup_ID_Parse(name, value);
  }
  
  typedef NetProto_Standup_Type Type;
  static const Type PLAYER = NetProto_Standup_Type_PLAYER;
  static const Type NPC = NetProto_Standup_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_Standup_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Standup_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Standup_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Standup_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Standup_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Standup_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Standup_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Standup.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Standup_Type type() const;
  inline void set_type(::NetProto_Standup_Type value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Standup)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Standup* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SkillLevelUp : public ::google::protobuf::Message {
 public:
  NetProto_SkillLevelUp();
  virtual ~NetProto_SkillLevelUp();
  
  NetProto_SkillLevelUp(const NetProto_SkillLevelUp& from);
  
  inline NetProto_SkillLevelUp& operator=(const NetProto_SkillLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SkillLevelUp& default_instance();
  
  void Swap(NetProto_SkillLevelUp* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SkillLevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SkillLevelUp& from);
  void MergeFrom(const NetProto_SkillLevelUp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SkillLevelUp_ID ID;
  static const ID GROUPID = NetProto_SkillLevelUp_ID_GROUPID;
  static const ID UNITID = NetProto_SkillLevelUp_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SkillLevelUp_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SkillLevelUp_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SkillLevelUp_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SkillLevelUp_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SkillLevelUp_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SkillLevelUp_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SkillLevelUp_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 delta = 2;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 2;
  inline ::google::protobuf::int32 delta() const;
  inline void set_delta(::google::protobuf::int32 value);
  
  // optional int64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SkillLevelUp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_money();
  inline void clear_has_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 delta_;
  ::google::protobuf::int64 money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SkillLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ClearSkill : public ::google::protobuf::Message {
 public:
  NetProto_ClearSkill();
  virtual ~NetProto_ClearSkill();
  
  NetProto_ClearSkill(const NetProto_ClearSkill& from);
  
  inline NetProto_ClearSkill& operator=(const NetProto_ClearSkill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ClearSkill& default_instance();
  
  void Swap(NetProto_ClearSkill* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ClearSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ClearSkill& from);
  void MergeFrom(const NetProto_ClearSkill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ClearSkill_ID ID;
  static const ID GROUPID = NetProto_ClearSkill_ID_GROUPID;
  static const ID UNITID = NetProto_ClearSkill_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ClearSkill_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ClearSkill_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ClearSkill_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ClearSkill_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ClearSkill_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ClearSkill_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ClearSkill_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ClearSkill)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ClearSkill* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DestroySkill : public ::google::protobuf::Message {
 public:
  NetProto_DestroySkill();
  virtual ~NetProto_DestroySkill();
  
  NetProto_DestroySkill(const NetProto_DestroySkill& from);
  
  inline NetProto_DestroySkill& operator=(const NetProto_DestroySkill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DestroySkill& default_instance();
  
  void Swap(NetProto_DestroySkill* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DestroySkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DestroySkill& from);
  void MergeFrom(const NetProto_DestroySkill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DestroySkill_ID ID;
  static const ID GROUPID = NetProto_DestroySkill_ID_GROUPID;
  static const ID UNITID = NetProto_DestroySkill_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DestroySkill_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DestroySkill_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DestroySkill_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DestroySkill_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DestroySkill_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DestroySkill_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DestroySkill_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated int32 skill = 2;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 2;
  inline ::google::protobuf::int32 skill(int index) const;
  inline void set_skill(int index, ::google::protobuf::int32 value);
  inline void add_skill(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skill() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skill();
  
  // optional bool immediately = 3;
  inline bool has_immediately() const;
  inline void clear_immediately();
  static const int kImmediatelyFieldNumber = 3;
  inline bool immediately() const;
  inline void set_immediately(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DestroySkill)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_immediately();
  inline void clear_has_immediately();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skill_;
  ::google::protobuf::int32 id_;
  bool immediately_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DestroySkill* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddGoods : public ::google::protobuf::Message {
 public:
  NetProto_AddGoods();
  virtual ~NetProto_AddGoods();
  
  NetProto_AddGoods(const NetProto_AddGoods& from);
  
  inline NetProto_AddGoods& operator=(const NetProto_AddGoods& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddGoods& default_instance();
  
  void Swap(NetProto_AddGoods* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddGoods& from);
  void MergeFrom(const NetProto_AddGoods& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddGoods_ID ID;
  static const ID GROUPID = NetProto_AddGoods_ID_GROUPID;
  static const ID UNITID = NetProto_AddGoods_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddGoods_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddGoods_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddGoods_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddGoods_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddGoods_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddGoods_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddGoods_ID_Parse(name, value);
  }
  
  typedef NetProto_AddGoods_Type Type;
  static const Type PACKAGE = NetProto_AddGoods_Type_PACKAGE;
  static const Type BODY = NetProto_AddGoods_Type_BODY;
  static inline bool Type_IsValid(int value) {
    return NetProto_AddGoods_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_AddGoods_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_AddGoods_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_AddGoods_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_AddGoods_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_AddGoods_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_AddGoods_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .GoodsInfo goods = 1;
  inline int goods_size() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 1;
  inline const ::GoodsInfo& goods(int index) const;
  inline ::GoodsInfo* mutable_goods(int index);
  inline ::GoodsInfo* add_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::GoodsInfo >&
      goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::GoodsInfo >*
      mutable_goods();
  
  // repeated int32 pos = 2;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos(int index) const;
  inline void set_pos(int index, ::google::protobuf::int32 value);
  inline void add_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pos();
  
  // repeated .NetProto_AddGoods.Type type = 3;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::NetProto_AddGoods_Type type(int index) const;
  inline void set_type(int index, ::NetProto_AddGoods_Type value);
  inline void add_type(::NetProto_AddGoods_Type value);
  inline const ::google::protobuf::RepeatedField<int>& type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_type();
  
  // repeated int32 id = 4;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();
  
  // @@protoc_insertion_point(class_scope:NetProto_AddGoods)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::GoodsInfo > goods_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pos_;
  ::google::protobuf::RepeatedField<int> type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddGoods* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddEquipments : public ::google::protobuf::Message {
 public:
  NetProto_AddEquipments();
  virtual ~NetProto_AddEquipments();
  
  NetProto_AddEquipments(const NetProto_AddEquipments& from);
  
  inline NetProto_AddEquipments& operator=(const NetProto_AddEquipments& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddEquipments& default_instance();
  
  void Swap(NetProto_AddEquipments* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddEquipments* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddEquipments& from);
  void MergeFrom(const NetProto_AddEquipments& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddEquipments_ID ID;
  static const ID GROUPID = NetProto_AddEquipments_ID_GROUPID;
  static const ID UNITID = NetProto_AddEquipments_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddEquipments_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddEquipments_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddEquipments_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddEquipments_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddEquipments_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddEquipments_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddEquipments_ID_Parse(name, value);
  }
  
  typedef NetProto_AddEquipments_Type Type;
  static const Type PACKAGE = NetProto_AddEquipments_Type_PACKAGE;
  static const Type BODY = NetProto_AddEquipments_Type_BODY;
  static inline bool Type_IsValid(int value) {
    return NetProto_AddEquipments_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_AddEquipments_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_AddEquipments_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_AddEquipments_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_AddEquipments_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_AddEquipments_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_AddEquipments_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .EquipmentInfo equipments = 1;
  inline int equipments_size() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 1;
  inline const ::EquipmentInfo& equipments(int index) const;
  inline ::EquipmentInfo* mutable_equipments(int index);
  inline ::EquipmentInfo* add_equipments();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >&
      equipments() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >*
      mutable_equipments();
  
  // repeated int32 pos = 2;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos(int index) const;
  inline void set_pos(int index, ::google::protobuf::int32 value);
  inline void add_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pos();
  
  // repeated .NetProto_AddEquipments.Type type = 3;
  inline int type_size() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::NetProto_AddEquipments_Type type(int index) const;
  inline void set_type(int index, ::NetProto_AddEquipments_Type value);
  inline void add_type(::NetProto_AddEquipments_Type value);
  inline const ::google::protobuf::RepeatedField<int>& type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_type();
  
  // repeated int32 id = 4;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();
  
  // @@protoc_insertion_point(class_scope:NetProto_AddEquipments)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::EquipmentInfo > equipments_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pos_;
  ::google::protobuf::RepeatedField<int> type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddEquipments* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ShiftItem : public ::google::protobuf::Message {
 public:
  NetProto_ShiftItem();
  virtual ~NetProto_ShiftItem();
  
  NetProto_ShiftItem(const NetProto_ShiftItem& from);
  
  inline NetProto_ShiftItem& operator=(const NetProto_ShiftItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ShiftItem& default_instance();
  
  void Swap(NetProto_ShiftItem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ShiftItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ShiftItem& from);
  void MergeFrom(const NetProto_ShiftItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ShiftItem_ID ID;
  static const ID GROUPID = NetProto_ShiftItem_ID_GROUPID;
  static const ID UNITID = NetProto_ShiftItem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ShiftItem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ShiftItem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ShiftItem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ShiftItem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ShiftItem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ShiftItem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ShiftItem_ID_Parse(name, value);
  }
  
  typedef NetProto_ShiftItem_Type Type;
  static const Type PACKAGE = NetProto_ShiftItem_Type_PACKAGE;
  static const Type BODY = NetProto_ShiftItem_Type_BODY;
  static const Type ALT = NetProto_ShiftItem_Type_ALT;
  static const Type SKILL = NetProto_ShiftItem_Type_SKILL;
  static const Type FASHION = NetProto_ShiftItem_Type_FASHION;
  static const Type WING = NetProto_ShiftItem_Type_WING;
  static inline bool Type_IsValid(int value) {
    return NetProto_ShiftItem_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_ShiftItem_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_ShiftItem_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_ShiftItem_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_ShiftItem_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_ShiftItem_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_ShiftItem_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_ShiftItem.Type prevType = 1;
  inline bool has_prevType() const;
  inline void clear_prevType();
  static const int kPrevTypeFieldNumber = 1;
  inline ::NetProto_ShiftItem_Type prevType() const;
  inline void set_prevType(::NetProto_ShiftItem_Type value);
  
  // optional int32 prevPos = 2;
  inline bool has_prevPos() const;
  inline void clear_prevPos();
  static const int kPrevPosFieldNumber = 2;
  inline ::google::protobuf::int32 prevPos() const;
  inline void set_prevPos(::google::protobuf::int32 value);
  
  // optional .NetProto_ShiftItem.Type newType = 3;
  inline bool has_newType() const;
  inline void clear_newType();
  static const int kNewTypeFieldNumber = 3;
  inline ::NetProto_ShiftItem_Type newType() const;
  inline void set_newType(::NetProto_ShiftItem_Type value);
  
  // optional int32 newPos = 4;
  inline bool has_newPos() const;
  inline void clear_newPos();
  static const int kNewPosFieldNumber = 4;
  inline ::google::protobuf::int32 newPos() const;
  inline void set_newPos(::google::protobuf::int32 value);
  
  // optional int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ShiftItem)
 private:
  inline void set_has_prevType();
  inline void clear_has_prevType();
  inline void set_has_prevPos();
  inline void clear_has_prevPos();
  inline void set_has_newType();
  inline void clear_has_newType();
  inline void set_has_newPos();
  inline void clear_has_newPos();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int prevType_;
  ::google::protobuf::int32 prevPos_;
  int newType_;
  ::google::protobuf::int32 newPos_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ShiftItem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_QueryItemInfo : public ::google::protobuf::Message {
 public:
  NetProto_QueryItemInfo();
  virtual ~NetProto_QueryItemInfo();
  
  NetProto_QueryItemInfo(const NetProto_QueryItemInfo& from);
  
  inline NetProto_QueryItemInfo& operator=(const NetProto_QueryItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_QueryItemInfo& default_instance();
  
  void Swap(NetProto_QueryItemInfo* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_QueryItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_QueryItemInfo& from);
  void MergeFrom(const NetProto_QueryItemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_QueryItemInfo_ID ID;
  static const ID GROUPID = NetProto_QueryItemInfo_ID_GROUPID;
  static const ID UNITID = NetProto_QueryItemInfo_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_QueryItemInfo_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_QueryItemInfo_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_QueryItemInfo_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_QueryItemInfo_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_QueryItemInfo_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_QueryItemInfo_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_QueryItemInfo_ID_Parse(name, value);
  }
  
  typedef NetProto_QueryItemInfo_Type Type;
  static const Type GOODS = NetProto_QueryItemInfo_Type_GOODS;
  static const Type EQUIPMENT = NetProto_QueryItemInfo_Type_EQUIPMENT;
  static inline bool Type_IsValid(int value) {
    return NetProto_QueryItemInfo_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_QueryItemInfo_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_QueryItemInfo_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_QueryItemInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_QueryItemInfo_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_QueryItemInfo_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_QueryItemInfo_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_QueryItemInfo.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_QueryItemInfo_Type type() const;
  inline void set_type(::NetProto_QueryItemInfo_Type value);
  
  // optional int64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_QueryItemInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_QueryItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BuyItem : public ::google::protobuf::Message {
 public:
  NetProto_BuyItem();
  virtual ~NetProto_BuyItem();
  
  NetProto_BuyItem(const NetProto_BuyItem& from);
  
  inline NetProto_BuyItem& operator=(const NetProto_BuyItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BuyItem& default_instance();
  
  void Swap(NetProto_BuyItem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BuyItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BuyItem& from);
  void MergeFrom(const NetProto_BuyItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BuyItem_ID ID;
  static const ID GROUPID = NetProto_BuyItem_ID_GROUPID;
  static const ID UNITID = NetProto_BuyItem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BuyItem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BuyItem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BuyItem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BuyItem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BuyItem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BuyItem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BuyItem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 business = 1;
  inline bool has_business() const;
  inline void clear_business();
  static const int kBusinessFieldNumber = 1;
  inline ::google::protobuf::int32 business() const;
  inline void set_business(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_BuyItem)
 private:
  inline void set_has_business();
  inline void clear_has_business();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 business_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BuyItem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SellItem : public ::google::protobuf::Message {
 public:
  NetProto_SellItem();
  virtual ~NetProto_SellItem();
  
  NetProto_SellItem(const NetProto_SellItem& from);
  
  inline NetProto_SellItem& operator=(const NetProto_SellItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SellItem& default_instance();
  
  void Swap(NetProto_SellItem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SellItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SellItem& from);
  void MergeFrom(const NetProto_SellItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SellItem_ID ID;
  static const ID GROUPID = NetProto_SellItem_ID_GROUPID;
  static const ID UNITID = NetProto_SellItem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SellItem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SellItem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SellItem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SellItem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SellItem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SellItem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SellItem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SellItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SellItem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Repair : public ::google::protobuf::Message {
 public:
  NetProto_Repair();
  virtual ~NetProto_Repair();
  
  NetProto_Repair(const NetProto_Repair& from);
  
  inline NetProto_Repair& operator=(const NetProto_Repair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Repair& default_instance();
  
  void Swap(NetProto_Repair* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Repair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Repair& from);
  void MergeFrom(const NetProto_Repair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Repair_ID ID;
  static const ID GROUPID = NetProto_Repair_ID_GROUPID;
  static const ID UNITID = NetProto_Repair_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Repair_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Repair_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Repair_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Repair_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Repair_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Repair_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Repair_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Repair)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_price();
  inline void clear_has_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Repair* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UseGoods : public ::google::protobuf::Message {
 public:
  NetProto_UseGoods();
  virtual ~NetProto_UseGoods();
  
  NetProto_UseGoods(const NetProto_UseGoods& from);
  
  inline NetProto_UseGoods& operator=(const NetProto_UseGoods& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UseGoods& default_instance();
  
  void Swap(NetProto_UseGoods* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UseGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UseGoods& from);
  void MergeFrom(const NetProto_UseGoods& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UseGoods_ID ID;
  static const ID GROUPID = NetProto_UseGoods_ID_GROUPID;
  static const ID UNITID = NetProto_UseGoods_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UseGoods_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UseGoods_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UseGoods_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UseGoods_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UseGoods_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UseGoods_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UseGoods_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated int32 boxItems = 2;
  inline int boxItems_size() const;
  inline void clear_boxItems();
  static const int kBoxItemsFieldNumber = 2;
  inline ::google::protobuf::int32 boxItems(int index) const;
  inline void set_boxItems(int index, ::google::protobuf::int32 value);
  inline void add_boxItems(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boxItems() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boxItems();
  
  // optional bool all = 3;
  inline bool has_all() const;
  inline void clear_all();
  static const int kAllFieldNumber = 3;
  inline bool all() const;
  inline void set_all(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_UseGoods)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_all();
  inline void clear_has_all();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boxItems_;
  ::google::protobuf::int32 id_;
  bool all_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UseGoods* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UnlockPackage : public ::google::protobuf::Message {
 public:
  NetProto_UnlockPackage();
  virtual ~NetProto_UnlockPackage();
  
  NetProto_UnlockPackage(const NetProto_UnlockPackage& from);
  
  inline NetProto_UnlockPackage& operator=(const NetProto_UnlockPackage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UnlockPackage& default_instance();
  
  void Swap(NetProto_UnlockPackage* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UnlockPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UnlockPackage& from);
  void MergeFrom(const NetProto_UnlockPackage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UnlockPackage_ID ID;
  static const ID GROUPID = NetProto_UnlockPackage_ID_GROUPID;
  static const ID UNITID = NetProto_UnlockPackage_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UnlockPackage_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UnlockPackage_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UnlockPackage_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UnlockPackage_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UnlockPackage_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UnlockPackage_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UnlockPackage_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_ItemPackage.Begin begin = 1;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 1;
  inline ::PB_ItemPackage_Begin begin() const;
  inline void set_begin(::PB_ItemPackage_Begin value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_UnlockPackage)
 private:
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int begin_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UnlockPackage* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RecoverDurability : public ::google::protobuf::Message {
 public:
  NetProto_RecoverDurability();
  virtual ~NetProto_RecoverDurability();
  
  NetProto_RecoverDurability(const NetProto_RecoverDurability& from);
  
  inline NetProto_RecoverDurability& operator=(const NetProto_RecoverDurability& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RecoverDurability& default_instance();
  
  void Swap(NetProto_RecoverDurability* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RecoverDurability* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RecoverDurability& from);
  void MergeFrom(const NetProto_RecoverDurability& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RecoverDurability_ID ID;
  static const ID GROUPID = NetProto_RecoverDurability_ID_GROUPID;
  static const ID UNITID = NetProto_RecoverDurability_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RecoverDurability_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RecoverDurability_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RecoverDurability_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RecoverDurability_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RecoverDurability_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RecoverDurability_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RecoverDurability_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_RecoverDurability)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RecoverDurability* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddDesignation : public ::google::protobuf::Message {
 public:
  NetProto_AddDesignation();
  virtual ~NetProto_AddDesignation();
  
  NetProto_AddDesignation(const NetProto_AddDesignation& from);
  
  inline NetProto_AddDesignation& operator=(const NetProto_AddDesignation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddDesignation& default_instance();
  
  void Swap(NetProto_AddDesignation* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddDesignation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddDesignation& from);
  void MergeFrom(const NetProto_AddDesignation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddDesignation_ID ID;
  static const ID GROUPID = NetProto_AddDesignation_ID_GROUPID;
  static const ID UNITID = NetProto_AddDesignation_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddDesignation_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddDesignation_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddDesignation_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddDesignation_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddDesignation_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddDesignation_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddDesignation_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_AddDesignation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddDesignation* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DelDesignation : public ::google::protobuf::Message {
 public:
  NetProto_DelDesignation();
  virtual ~NetProto_DelDesignation();
  
  NetProto_DelDesignation(const NetProto_DelDesignation& from);
  
  inline NetProto_DelDesignation& operator=(const NetProto_DelDesignation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DelDesignation& default_instance();
  
  void Swap(NetProto_DelDesignation* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DelDesignation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DelDesignation& from);
  void MergeFrom(const NetProto_DelDesignation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DelDesignation_ID ID;
  static const ID GROUPID = NetProto_DelDesignation_ID_GROUPID;
  static const ID UNITID = NetProto_DelDesignation_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DelDesignation_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DelDesignation_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DelDesignation_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DelDesignation_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DelDesignation_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DelDesignation_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DelDesignation_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DelDesignation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DelDesignation* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ShowDesignation : public ::google::protobuf::Message {
 public:
  NetProto_ShowDesignation();
  virtual ~NetProto_ShowDesignation();
  
  NetProto_ShowDesignation(const NetProto_ShowDesignation& from);
  
  inline NetProto_ShowDesignation& operator=(const NetProto_ShowDesignation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ShowDesignation& default_instance();
  
  void Swap(NetProto_ShowDesignation* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ShowDesignation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ShowDesignation& from);
  void MergeFrom(const NetProto_ShowDesignation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ShowDesignation_ID ID;
  static const ID GROUPID = NetProto_ShowDesignation_ID_GROUPID;
  static const ID UNITID = NetProto_ShowDesignation_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ShowDesignation_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ShowDesignation_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ShowDesignation_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ShowDesignation_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ShowDesignation_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ShowDesignation_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ShowDesignation_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline ::google::protobuf::int32 player() const;
  inline void set_player(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ShowDesignation)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 player_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ShowDesignation* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UnshowDesignation : public ::google::protobuf::Message {
 public:
  NetProto_UnshowDesignation();
  virtual ~NetProto_UnshowDesignation();
  
  NetProto_UnshowDesignation(const NetProto_UnshowDesignation& from);
  
  inline NetProto_UnshowDesignation& operator=(const NetProto_UnshowDesignation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UnshowDesignation& default_instance();
  
  void Swap(NetProto_UnshowDesignation* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UnshowDesignation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UnshowDesignation& from);
  void MergeFrom(const NetProto_UnshowDesignation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UnshowDesignation_ID ID;
  static const ID GROUPID = NetProto_UnshowDesignation_ID_GROUPID;
  static const ID UNITID = NetProto_UnshowDesignation_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UnshowDesignation_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UnshowDesignation_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UnshowDesignation_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UnshowDesignation_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UnshowDesignation_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UnshowDesignation_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UnshowDesignation_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline ::google::protobuf::int32 player() const;
  inline void set_player(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_UnshowDesignation)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 player_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UnshowDesignation* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Recharge : public ::google::protobuf::Message {
 public:
  NetProto_Recharge();
  virtual ~NetProto_Recharge();
  
  NetProto_Recharge(const NetProto_Recharge& from);
  
  inline NetProto_Recharge& operator=(const NetProto_Recharge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Recharge& default_instance();
  
  void Swap(NetProto_Recharge* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Recharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Recharge& from);
  void MergeFrom(const NetProto_Recharge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Recharge_ID ID;
  static const ID GROUPID = NetProto_Recharge_ID_GROUPID;
  static const ID UNITID = NetProto_Recharge_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Recharge_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Recharge_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Recharge_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Recharge_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Recharge_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Recharge_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Recharge_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string order = 1;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline const ::std::string& order() const;
  inline void set_order(const ::std::string& value);
  inline void set_order(const char* value);
  inline void set_order(const char* value, size_t size);
  inline ::std::string* mutable_order();
  inline ::std::string* release_order();
  
  // optional string product = 2;
  inline bool has_product() const;
  inline void clear_product();
  static const int kProductFieldNumber = 2;
  inline const ::std::string& product() const;
  inline void set_product(const ::std::string& value);
  inline void set_product(const char* value);
  inline void set_product(const char* value, size_t size);
  inline ::std::string* mutable_product();
  inline ::std::string* release_product();
  
  // optional int32 v = 3;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 3;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Recharge)
 private:
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_product();
  inline void clear_has_product();
  inline void set_has_v();
  inline void clear_has_v();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* order_;
  ::std::string* product_;
  ::google::protobuf::int32 v_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Recharge* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BusinessInfo : public ::google::protobuf::Message {
 public:
  NetProto_BusinessInfo();
  virtual ~NetProto_BusinessInfo();
  
  NetProto_BusinessInfo(const NetProto_BusinessInfo& from);
  
  inline NetProto_BusinessInfo& operator=(const NetProto_BusinessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BusinessInfo& default_instance();
  
  void Swap(NetProto_BusinessInfo* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BusinessInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BusinessInfo& from);
  void MergeFrom(const NetProto_BusinessInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BusinessInfo_ID ID;
  static const ID GROUPID = NetProto_BusinessInfo_ID_GROUPID;
  static const ID UNITID = NetProto_BusinessInfo_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BusinessInfo_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BusinessInfo_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BusinessInfo_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BusinessInfo_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BusinessInfo_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BusinessInfo_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BusinessInfo_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .BusinessInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::BusinessInfo& info() const;
  inline ::BusinessInfo* mutable_info();
  inline ::BusinessInfo* release_info();
  
  // @@protoc_insertion_point(class_scope:NetProto_BusinessInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::BusinessInfo* info_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BusinessInfo* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_TransformWar : public ::google::protobuf::Message {
 public:
  NetProto_TransformWar();
  virtual ~NetProto_TransformWar();
  
  NetProto_TransformWar(const NetProto_TransformWar& from);
  
  inline NetProto_TransformWar& operator=(const NetProto_TransformWar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_TransformWar& default_instance();
  
  void Swap(NetProto_TransformWar* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_TransformWar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_TransformWar& from);
  void MergeFrom(const NetProto_TransformWar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_TransformWar_ID ID;
  static const ID GROUPID = NetProto_TransformWar_ID_GROUPID;
  static const ID UNITID = NetProto_TransformWar_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_TransformWar_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_TransformWar_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_TransformWar_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_TransformWar_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_TransformWar_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_TransformWar_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_TransformWar_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_TransformWar)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_TransformWar* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_TransformLevelUp : public ::google::protobuf::Message {
 public:
  NetProto_TransformLevelUp();
  virtual ~NetProto_TransformLevelUp();
  
  NetProto_TransformLevelUp(const NetProto_TransformLevelUp& from);
  
  inline NetProto_TransformLevelUp& operator=(const NetProto_TransformLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_TransformLevelUp& default_instance();
  
  void Swap(NetProto_TransformLevelUp* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_TransformLevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_TransformLevelUp& from);
  void MergeFrom(const NetProto_TransformLevelUp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_TransformLevelUp_ID ID;
  static const ID GROUPID = NetProto_TransformLevelUp_ID_GROUPID;
  static const ID UNITID = NetProto_TransformLevelUp_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_TransformLevelUp_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_TransformLevelUp_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_TransformLevelUp_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_TransformLevelUp_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_TransformLevelUp_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_TransformLevelUp_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_TransformLevelUp_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_TransformLevelUp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_TransformLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_TransformActive : public ::google::protobuf::Message {
 public:
  NetProto_TransformActive();
  virtual ~NetProto_TransformActive();
  
  NetProto_TransformActive(const NetProto_TransformActive& from);
  
  inline NetProto_TransformActive& operator=(const NetProto_TransformActive& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_TransformActive& default_instance();
  
  void Swap(NetProto_TransformActive* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_TransformActive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_TransformActive& from);
  void MergeFrom(const NetProto_TransformActive& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_TransformActive_ID ID;
  static const ID GROUPID = NetProto_TransformActive_ID_GROUPID;
  static const ID UNITID = NetProto_TransformActive_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_TransformActive_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_TransformActive_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_TransformActive_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_TransformActive_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_TransformActive_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_TransformActive_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_TransformActive_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_TransformActive)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_TransformActive* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Reservation : public ::google::protobuf::Message {
 public:
  NetProto_Reservation();
  virtual ~NetProto_Reservation();
  
  NetProto_Reservation(const NetProto_Reservation& from);
  
  inline NetProto_Reservation& operator=(const NetProto_Reservation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Reservation& default_instance();
  
  void Swap(NetProto_Reservation* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Reservation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Reservation& from);
  void MergeFrom(const NetProto_Reservation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Reservation_ID ID;
  static const ID GROUPID = NetProto_Reservation_ID_GROUPID;
  static const ID UNITID = NetProto_Reservation_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Reservation_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Reservation_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Reservation_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Reservation_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Reservation_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Reservation_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Reservation_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 rmb = 2;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 2;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);
  
  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Reservation)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 rmb_;
  ::google::protobuf::int32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Reservation* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_OneReservation : public ::google::protobuf::Message {
 public:
  NetProto_OneReservation();
  virtual ~NetProto_OneReservation();
  
  NetProto_OneReservation(const NetProto_OneReservation& from);
  
  inline NetProto_OneReservation& operator=(const NetProto_OneReservation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_OneReservation& default_instance();
  
  void Swap(NetProto_OneReservation* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_OneReservation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_OneReservation& from);
  void MergeFrom(const NetProto_OneReservation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 powerType = 2;
  inline bool has_powerType() const;
  inline void clear_powerType();
  static const int kPowerTypeFieldNumber = 2;
  inline ::google::protobuf::int32 powerType() const;
  inline void set_powerType(::google::protobuf::int32 value);
  
  // optional int64 roleID1 = 3;
  inline bool has_roleID1() const;
  inline void clear_roleID1();
  static const int kRoleID1FieldNumber = 3;
  inline ::google::protobuf::int64 roleID1() const;
  inline void set_roleID1(::google::protobuf::int64 value);
  
  // optional int64 roleID2 = 4;
  inline bool has_roleID2() const;
  inline void clear_roleID2();
  static const int kRoleID2FieldNumber = 4;
  inline ::google::protobuf::int64 roleID2() const;
  inline void set_roleID2(::google::protobuf::int64 value);
  
  // optional string name1 = 5;
  inline bool has_name1() const;
  inline void clear_name1();
  static const int kName1FieldNumber = 5;
  inline const ::std::string& name1() const;
  inline void set_name1(const ::std::string& value);
  inline void set_name1(const char* value);
  inline void set_name1(const char* value, size_t size);
  inline ::std::string* mutable_name1();
  inline ::std::string* release_name1();
  
  // optional string name2 = 6;
  inline bool has_name2() const;
  inline void clear_name2();
  static const int kName2FieldNumber = 6;
  inline const ::std::string& name2() const;
  inline void set_name2(const ::std::string& value);
  inline void set_name2(const char* value);
  inline void set_name2(const char* value, size_t size);
  inline ::std::string* mutable_name2();
  inline ::std::string* release_name2();
  
  // optional int32 fans1 = 7;
  inline bool has_fans1() const;
  inline void clear_fans1();
  static const int kFans1FieldNumber = 7;
  inline ::google::protobuf::int32 fans1() const;
  inline void set_fans1(::google::protobuf::int32 value);
  
  // optional int32 fans2 = 8;
  inline bool has_fans2() const;
  inline void clear_fans2();
  static const int kFans2FieldNumber = 8;
  inline ::google::protobuf::int32 fans2() const;
  inline void set_fans2(::google::protobuf::int32 value);
  
  // optional int32 rmb = 9;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 9;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);
  
  // optional .PB_ProfessionInfo.Type type1 = 10;
  inline bool has_type1() const;
  inline void clear_type1();
  static const int kType1FieldNumber = 10;
  inline ::PB_ProfessionInfo_Type type1() const;
  inline void set_type1(::PB_ProfessionInfo_Type value);
  
  // optional .PB_ProfessionInfo.Type type2 = 11;
  inline bool has_type2() const;
  inline void clear_type2();
  static const int kType2FieldNumber = 11;
  inline ::PB_ProfessionInfo_Type type2() const;
  inline void set_type2(::PB_ProfessionInfo_Type value);
  
  // @@protoc_insertion_point(class_scope:NetProto_OneReservation)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_powerType();
  inline void clear_has_powerType();
  inline void set_has_roleID1();
  inline void clear_has_roleID1();
  inline void set_has_roleID2();
  inline void clear_has_roleID2();
  inline void set_has_name1();
  inline void clear_has_name1();
  inline void set_has_name2();
  inline void clear_has_name2();
  inline void set_has_fans1();
  inline void clear_has_fans1();
  inline void set_has_fans2();
  inline void clear_has_fans2();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_type1();
  inline void clear_has_type1();
  inline void set_has_type2();
  inline void clear_has_type2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 powerType_;
  ::google::protobuf::int64 roleID1_;
  ::google::protobuf::int64 roleID2_;
  ::std::string* name1_;
  ::std::string* name2_;
  ::google::protobuf::int32 fans1_;
  ::google::protobuf::int32 fans2_;
  ::google::protobuf::int32 rmb_;
  int type1_;
  int type2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_OneReservation* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ReservationList : public ::google::protobuf::Message {
 public:
  NetProto_ReservationList();
  virtual ~NetProto_ReservationList();
  
  NetProto_ReservationList(const NetProto_ReservationList& from);
  
  inline NetProto_ReservationList& operator=(const NetProto_ReservationList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ReservationList& default_instance();
  
  void Swap(NetProto_ReservationList* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ReservationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ReservationList& from);
  void MergeFrom(const NetProto_ReservationList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ReservationList_ID ID;
  static const ID GROUPID = NetProto_ReservationList_ID_GROUPID;
  static const ID UNITID = NetProto_ReservationList_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ReservationList_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ReservationList_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ReservationList_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ReservationList_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ReservationList_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ReservationList_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ReservationList_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .NetProto_OneReservation list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::NetProto_OneReservation& list(int index) const;
  inline ::NetProto_OneReservation* mutable_list(int index);
  inline ::NetProto_OneReservation* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_OneReservation >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_OneReservation >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:NetProto_ReservationList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NetProto_OneReservation > list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ReservationList* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Talk : public ::google::protobuf::Message {
 public:
  NetProto_Talk();
  virtual ~NetProto_Talk();
  
  NetProto_Talk(const NetProto_Talk& from);
  
  inline NetProto_Talk& operator=(const NetProto_Talk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Talk& default_instance();
  
  void Swap(NetProto_Talk* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Talk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Talk& from);
  void MergeFrom(const NetProto_Talk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Talk_ID ID;
  static const ID GROUPID = NetProto_Talk_ID_GROUPID;
  static const ID UNITID = NetProto_Talk_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Talk_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Talk_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Talk_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Talk_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Talk_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Talk_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Talk_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .PB_Vector3f pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::PB_Vector3f& pos() const;
  inline ::PB_Vector3f* mutable_pos();
  inline ::PB_Vector3f* release_pos();
  
  // @@protoc_insertion_point(class_scope:NetProto_Talk)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_Vector3f* pos_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Talk* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Answer : public ::google::protobuf::Message {
 public:
  NetProto_Answer();
  virtual ~NetProto_Answer();
  
  NetProto_Answer(const NetProto_Answer& from);
  
  inline NetProto_Answer& operator=(const NetProto_Answer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Answer& default_instance();
  
  void Swap(NetProto_Answer* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Answer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Answer& from);
  void MergeFrom(const NetProto_Answer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Answer_ID ID;
  static const ID GROUPID = NetProto_Answer_ID_GROUPID;
  static const ID UNITID = NetProto_Answer_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Answer_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Answer_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Answer_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Answer_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Answer_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Answer_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Answer_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated .PB_FuncInfo func = 2;
  inline int func_size() const;
  inline void clear_func();
  static const int kFuncFieldNumber = 2;
  inline const ::PB_FuncInfo& func(int index) const;
  inline ::PB_FuncInfo* mutable_func(int index);
  inline ::PB_FuncInfo* add_func();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_FuncInfo >&
      func() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_FuncInfo >*
      mutable_func();
  
  // repeated string str = 3;
  inline int str_size() const;
  inline void clear_str();
  static const int kStrFieldNumber = 3;
  inline const ::std::string& str(int index) const;
  inline ::std::string* mutable_str(int index);
  inline void set_str(int index, const ::std::string& value);
  inline void set_str(int index, const char* value);
  inline void set_str(int index, const char* value, size_t size);
  inline ::std::string* add_str();
  inline void add_str(const ::std::string& value);
  inline void add_str(const char* value);
  inline void add_str(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& str() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_str();
  
  // @@protoc_insertion_point(class_scope:NetProto_Answer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_FuncInfo > func_;
  ::google::protobuf::RepeatedPtrField< ::std::string> str_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Answer* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_RequestFunc : public ::google::protobuf::Message {
 public:
  NetProto_RequestFunc();
  virtual ~NetProto_RequestFunc();
  
  NetProto_RequestFunc(const NetProto_RequestFunc& from);
  
  inline NetProto_RequestFunc& operator=(const NetProto_RequestFunc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_RequestFunc& default_instance();
  
  void Swap(NetProto_RequestFunc* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_RequestFunc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_RequestFunc& from);
  void MergeFrom(const NetProto_RequestFunc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_RequestFunc_ID ID;
  static const ID GROUPID = NetProto_RequestFunc_ID_GROUPID;
  static const ID UNITID = NetProto_RequestFunc_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_RequestFunc_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_RequestFunc_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_RequestFunc_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_RequestFunc_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_RequestFunc_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_RequestFunc_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_RequestFunc_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_FuncInfo func = 1;
  inline bool has_func() const;
  inline void clear_func();
  static const int kFuncFieldNumber = 1;
  inline const ::PB_FuncInfo& func() const;
  inline ::PB_FuncInfo* mutable_func();
  inline ::PB_FuncInfo* release_func();
  
  // @@protoc_insertion_point(class_scope:NetProto_RequestFunc)
 private:
  inline void set_has_func();
  inline void clear_has_func();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_FuncInfo* func_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_RequestFunc* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ReplyFunc : public ::google::protobuf::Message {
 public:
  NetProto_ReplyFunc();
  virtual ~NetProto_ReplyFunc();
  
  NetProto_ReplyFunc(const NetProto_ReplyFunc& from);
  
  inline NetProto_ReplyFunc& operator=(const NetProto_ReplyFunc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ReplyFunc& default_instance();
  
  void Swap(NetProto_ReplyFunc* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ReplyFunc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ReplyFunc& from);
  void MergeFrom(const NetProto_ReplyFunc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ReplyFunc_ID ID;
  static const ID GROUPID = NetProto_ReplyFunc_ID_GROUPID;
  static const ID UNITID = NetProto_ReplyFunc_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ReplyFunc_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ReplyFunc_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ReplyFunc_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ReplyFunc_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ReplyFunc_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ReplyFunc_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ReplyFunc_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_FuncInfo func = 1;
  inline bool has_func() const;
  inline void clear_func();
  static const int kFuncFieldNumber = 1;
  inline const ::PB_FuncInfo& func() const;
  inline ::PB_FuncInfo* mutable_func();
  inline ::PB_FuncInfo* release_func();
  
  // optional .MissionContent mission = 2;
  inline bool has_mission() const;
  inline void clear_mission();
  static const int kMissionFieldNumber = 2;
  inline const ::MissionContent& mission() const;
  inline ::MissionContent* mutable_mission();
  inline ::MissionContent* release_mission();
  
  // @@protoc_insertion_point(class_scope:NetProto_ReplyFunc)
 private:
  inline void set_has_func();
  inline void clear_has_func();
  inline void set_has_mission();
  inline void clear_has_mission();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_FuncInfo* func_;
  ::MissionContent* mission_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ReplyFunc* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ApplyMission : public ::google::protobuf::Message {
 public:
  NetProto_ApplyMission();
  virtual ~NetProto_ApplyMission();
  
  NetProto_ApplyMission(const NetProto_ApplyMission& from);
  
  inline NetProto_ApplyMission& operator=(const NetProto_ApplyMission& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ApplyMission& default_instance();
  
  void Swap(NetProto_ApplyMission* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ApplyMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ApplyMission& from);
  void MergeFrom(const NetProto_ApplyMission& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ApplyMission_ID ID;
  static const ID GROUPID = NetProto_ApplyMission_ID_GROUPID;
  static const ID UNITID = NetProto_ApplyMission_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ApplyMission_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ApplyMission_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ApplyMission_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ApplyMission_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ApplyMission_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ApplyMission_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ApplyMission_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ApplyMission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ApplyMission* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_CompleteMission : public ::google::protobuf::Message {
 public:
  NetProto_CompleteMission();
  virtual ~NetProto_CompleteMission();
  
  NetProto_CompleteMission(const NetProto_CompleteMission& from);
  
  inline NetProto_CompleteMission& operator=(const NetProto_CompleteMission& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_CompleteMission& default_instance();
  
  void Swap(NetProto_CompleteMission* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_CompleteMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_CompleteMission& from);
  void MergeFrom(const NetProto_CompleteMission& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_CompleteMission_ID ID;
  static const ID GROUPID = NetProto_CompleteMission_ID_GROUPID;
  static const ID UNITID = NetProto_CompleteMission_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_CompleteMission_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_CompleteMission_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_CompleteMission_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_CompleteMission_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_CompleteMission_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_CompleteMission_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_CompleteMission_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_CompleteMission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_CompleteMission* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GiveUpMission : public ::google::protobuf::Message {
 public:
  NetProto_GiveUpMission();
  virtual ~NetProto_GiveUpMission();
  
  NetProto_GiveUpMission(const NetProto_GiveUpMission& from);
  
  inline NetProto_GiveUpMission& operator=(const NetProto_GiveUpMission& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GiveUpMission& default_instance();
  
  void Swap(NetProto_GiveUpMission* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GiveUpMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GiveUpMission& from);
  void MergeFrom(const NetProto_GiveUpMission& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GiveUpMission_ID ID;
  static const ID GROUPID = NetProto_GiveUpMission_ID_GROUPID;
  static const ID UNITID = NetProto_GiveUpMission_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GiveUpMission_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GiveUpMission_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GiveUpMission_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GiveUpMission_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GiveUpMission_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GiveUpMission_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GiveUpMission_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GiveUpMission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GiveUpMission* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Chat : public ::google::protobuf::Message {
 public:
  NetProto_Chat();
  virtual ~NetProto_Chat();
  
  NetProto_Chat(const NetProto_Chat& from);
  
  inline NetProto_Chat& operator=(const NetProto_Chat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Chat& default_instance();
  
  void Swap(NetProto_Chat* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Chat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Chat& from);
  void MergeFrom(const NetProto_Chat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Chat_ID ID;
  static const ID GROUPID = NetProto_Chat_ID_GROUPID;
  static const ID UNITID = NetProto_Chat_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Chat_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Chat_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Chat_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Chat_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Chat_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Chat_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Chat_ID_Parse(name, value);
  }
  
  typedef NetProto_Chat_Channel Channel;
  static const Channel SYSTEM = NetProto_Chat_Channel_SYSTEM;
  static const Channel GUILD = NetProto_Chat_Channel_GUILD;
  static const Channel TEAM = NetProto_Chat_Channel_TEAM;
  static const Channel WORLD = NetProto_Chat_Channel_WORLD;
  static const Channel SECRET = NetProto_Chat_Channel_SECRET;
  static const Channel CURSENCE = NetProto_Chat_Channel_CURSENCE;
  static inline bool Channel_IsValid(int value) {
    return NetProto_Chat_Channel_IsValid(value);
  }
  static const Channel Channel_MIN =
    NetProto_Chat_Channel_Channel_MIN;
  static const Channel Channel_MAX =
    NetProto_Chat_Channel_Channel_MAX;
  static const int Channel_ARRAYSIZE =
    NetProto_Chat_Channel_Channel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Channel_descriptor() {
    return NetProto_Chat_Channel_descriptor();
  }
  static inline const ::std::string& Channel_Name(Channel value) {
    return NetProto_Chat_Channel_Name(value);
  }
  static inline bool Channel_Parse(const ::std::string& name,
      Channel* value) {
    return NetProto_Chat_Channel_Parse(name, value);
  }
  
  typedef NetProto_Chat_Type Type;
  static const Type PLAYER = NetProto_Chat_Type_PLAYER;
  static const Type NPC = NetProto_Chat_Type_NPC;
  static inline bool Type_IsValid(int value) {
    return NetProto_Chat_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_Chat_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_Chat_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_Chat_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_Chat_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_Chat_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_Chat_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Chat.Channel channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::NetProto_Chat_Channel channel() const;
  inline void set_channel(::NetProto_Chat_Channel value);
  
  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional .NetProto_Chat.Type sType = 3;
  inline bool has_sType() const;
  inline void clear_sType();
  static const int kSTypeFieldNumber = 3;
  inline ::NetProto_Chat_Type sType() const;
  inline void set_sType(::NetProto_Chat_Type value);
  
  // optional .PB_FriendInfo sender = 4;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 4;
  inline const ::PB_FriendInfo& sender() const;
  inline ::PB_FriendInfo* mutable_sender();
  inline ::PB_FriendInfo* release_sender();
  
  // optional int64 receiver = 5;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 5;
  inline ::google::protobuf::int64 receiver() const;
  inline void set_receiver(::google::protobuf::int64 value);
  
  // optional int32 vip = 6;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 6;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Chat)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sType();
  inline void clear_has_sType();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_vip();
  inline void clear_has_vip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  int channel_;
  int sType_;
  ::PB_FriendInfo* sender_;
  ::google::protobuf::int64 receiver_;
  ::google::protobuf::int32 vip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Chat* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Message : public ::google::protobuf::Message {
 public:
  NetProto_Message();
  virtual ~NetProto_Message();
  
  NetProto_Message(const NetProto_Message& from);
  
  inline NetProto_Message& operator=(const NetProto_Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Message& default_instance();
  
  void Swap(NetProto_Message* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Message& from);
  void MergeFrom(const NetProto_Message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Message_ID ID;
  static const ID GROUPID = NetProto_Message_ID_GROUPID;
  static const ID UNITID = NetProto_Message_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Message_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Message_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Message_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Message_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Message_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Message_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Message_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Message)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Message* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_SendMail : public ::google::protobuf::Message {
 public:
  NetProto_SendMail();
  virtual ~NetProto_SendMail();
  
  NetProto_SendMail(const NetProto_SendMail& from);
  
  inline NetProto_SendMail& operator=(const NetProto_SendMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_SendMail& default_instance();
  
  void Swap(NetProto_SendMail* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_SendMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_SendMail& from);
  void MergeFrom(const NetProto_SendMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_SendMail_ID ID;
  static const ID GROUPID = NetProto_SendMail_ID_GROUPID;
  static const ID UNITID = NetProto_SendMail_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_SendMail_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_SendMail_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_SendMail_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_SendMail_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_SendMail_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_SendMail_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_SendMail_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 receiver = 1;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  inline ::google::protobuf::int64 receiver() const;
  inline void set_receiver(::google::protobuf::int64 value);
  
  // optional .PB_MailInfo mail = 2;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 2;
  inline const ::PB_MailInfo& mail() const;
  inline ::PB_MailInfo* mutable_mail();
  inline ::PB_MailInfo* release_mail();
  
  // optional int32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_SendMail)
 private:
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_mail();
  inline void clear_has_mail();
  inline void set_has_pos();
  inline void clear_has_pos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 receiver_;
  ::PB_MailInfo* mail_;
  ::google::protobuf::int32 pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_SendMail* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GetMailItem : public ::google::protobuf::Message {
 public:
  NetProto_GetMailItem();
  virtual ~NetProto_GetMailItem();
  
  NetProto_GetMailItem(const NetProto_GetMailItem& from);
  
  inline NetProto_GetMailItem& operator=(const NetProto_GetMailItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GetMailItem& default_instance();
  
  void Swap(NetProto_GetMailItem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GetMailItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GetMailItem& from);
  void MergeFrom(const NetProto_GetMailItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GetMailItem_ID ID;
  static const ID GROUPID = NetProto_GetMailItem_ID_GROUPID;
  static const ID UNITID = NetProto_GetMailItem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GetMailItem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GetMailItem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GetMailItem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GetMailItem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GetMailItem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GetMailItem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GetMailItem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GetMailItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GetMailItem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ReadMail : public ::google::protobuf::Message {
 public:
  NetProto_ReadMail();
  virtual ~NetProto_ReadMail();
  
  NetProto_ReadMail(const NetProto_ReadMail& from);
  
  inline NetProto_ReadMail& operator=(const NetProto_ReadMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ReadMail& default_instance();
  
  void Swap(NetProto_ReadMail* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ReadMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ReadMail& from);
  void MergeFrom(const NetProto_ReadMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ReadMail_ID ID;
  static const ID GROUPID = NetProto_ReadMail_ID_GROUPID;
  static const ID UNITID = NetProto_ReadMail_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ReadMail_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ReadMail_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ReadMail_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ReadMail_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ReadMail_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ReadMail_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ReadMail_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ReadMail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ReadMail* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DelMail : public ::google::protobuf::Message {
 public:
  NetProto_DelMail();
  virtual ~NetProto_DelMail();
  
  NetProto_DelMail(const NetProto_DelMail& from);
  
  inline NetProto_DelMail& operator=(const NetProto_DelMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DelMail& default_instance();
  
  void Swap(NetProto_DelMail* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DelMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DelMail& from);
  void MergeFrom(const NetProto_DelMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DelMail_ID ID;
  static const ID GROUPID = NetProto_DelMail_ID_GROUPID;
  static const ID UNITID = NetProto_DelMail_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DelMail_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DelMail_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DelMail_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DelMail_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DelMail_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DelMail_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DelMail_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DelMail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DelMail* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMLogin : public ::google::protobuf::Message {
 public:
  NetProto_GMLogin();
  virtual ~NetProto_GMLogin();
  
  NetProto_GMLogin(const NetProto_GMLogin& from);
  
  inline NetProto_GMLogin& operator=(const NetProto_GMLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMLogin& default_instance();
  
  void Swap(NetProto_GMLogin* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMLogin& from);
  void MergeFrom(const NetProto_GMLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMLogin_ID ID;
  static const ID GROUPID = NetProto_GMLogin_ID_GROUPID;
  static const ID UNITID = NetProto_GMLogin_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMLogin_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMLogin_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMLogin_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMLogin_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMLogin_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMLogin_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMLogin_ID_Parse(name, value);
  }
  
  typedef NetProto_GMLogin_OP OP;
  static const OP NONE = NetProto_GMLogin_OP_NONE;
  static const OP CP = NetProto_GMLogin_OP_CP;
  static const OP YUNYING = NetProto_GMLogin_OP_YUNYING;
  static const OP CUSTOM = NetProto_GMLogin_OP_CUSTOM;
  static inline bool OP_IsValid(int value) {
    return NetProto_GMLogin_OP_IsValid(value);
  }
  static const OP OP_MIN =
    NetProto_GMLogin_OP_OP_MIN;
  static const OP OP_MAX =
    NetProto_GMLogin_OP_OP_MAX;
  static const int OP_ARRAYSIZE =
    NetProto_GMLogin_OP_OP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_descriptor() {
    return NetProto_GMLogin_OP_descriptor();
  }
  static inline const ::std::string& OP_Name(OP value) {
    return NetProto_GMLogin_OP_Name(value);
  }
  static inline bool OP_Parse(const ::std::string& name,
      OP* value) {
    return NetProto_GMLogin_OP_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional string passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  
  // optional .NetProto_GMLogin.OP permission = 3;
  inline bool has_permission() const;
  inline void clear_permission();
  static const int kPermissionFieldNumber = 3;
  inline ::NetProto_GMLogin_OP permission() const;
  inline void set_permission(::NetProto_GMLogin_OP value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMLogin)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_permission();
  inline void clear_has_permission();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::std::string* passwd_;
  int permission_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMLogin* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMOrder : public ::google::protobuf::Message {
 public:
  NetProto_GMOrder();
  virtual ~NetProto_GMOrder();
  
  NetProto_GMOrder(const NetProto_GMOrder& from);
  
  inline NetProto_GMOrder& operator=(const NetProto_GMOrder& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMOrder& default_instance();
  
  void Swap(NetProto_GMOrder* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMOrder& from);
  void MergeFrom(const NetProto_GMOrder& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMOrder_ID ID;
  static const ID GROUPID = NetProto_GMOrder_ID_GROUPID;
  static const ID UNITID = NetProto_GMOrder_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMOrder_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMOrder_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMOrder_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMOrder_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMOrder_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMOrder_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMOrder_ID_Parse(name, value);
  }
  
  typedef NetProto_GMOrder_Type Type;
  static const Type ONLINE_NUM = NetProto_GMOrder_Type_ONLINE_NUM;
  static const Type GET_GOODS = NetProto_GMOrder_Type_GET_GOODS;
  static const Type GET_RMB = NetProto_GMOrder_Type_GET_RMB;
  static const Type GET_MONEY = NetProto_GMOrder_Type_GET_MONEY;
  static const Type MESSAGE = NetProto_GMOrder_Type_MESSAGE;
  static const Type SYSTEM = NetProto_GMOrder_Type_SYSTEM;
  static const Type GET_EQUIPMENT = NetProto_GMOrder_Type_GET_EQUIPMENT;
  static const Type RELOAD = NetProto_GMOrder_Type_RELOAD;
  static const Type MUL_EXP = NetProto_GMOrder_Type_MUL_EXP;
  static inline bool Type_IsValid(int value) {
    return NetProto_GMOrder_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NetProto_GMOrder_Type_Type_MIN;
  static const Type Type_MAX =
    NetProto_GMOrder_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NetProto_GMOrder_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NetProto_GMOrder_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NetProto_GMOrder_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NetProto_GMOrder_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GMOrder.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_GMOrder_Type type() const;
  inline void set_type(::NetProto_GMOrder_Type value);
  
  // optional int64 target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline ::google::protobuf::int64 target() const;
  inline void set_target(::google::protobuf::int64 value);
  
  // optional int64 nValue = 3;
  inline bool has_nValue() const;
  inline void clear_nValue();
  static const int kNValueFieldNumber = 3;
  inline ::google::protobuf::int64 nValue() const;
  inline void set_nValue(::google::protobuf::int64 value);
  
  // optional float fValue = 4;
  inline bool has_fValue() const;
  inline void clear_fValue();
  static const int kFValueFieldNumber = 4;
  inline float fValue() const;
  inline void set_fValue(float value);
  
  // optional string sValue = 5;
  inline bool has_sValue() const;
  inline void clear_sValue();
  static const int kSValueFieldNumber = 5;
  inline const ::std::string& sValue() const;
  inline void set_sValue(const ::std::string& value);
  inline void set_sValue(const char* value);
  inline void set_sValue(const char* value, size_t size);
  inline ::std::string* mutable_sValue();
  inline ::std::string* release_sValue();
  
  // optional int32 res = 6;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 6;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMOrder)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_nValue();
  inline void clear_has_nValue();
  inline void set_has_fValue();
  inline void clear_has_fValue();
  inline void set_has_sValue();
  inline void clear_has_sValue();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 target_;
  int type_;
  float fValue_;
  ::google::protobuf::int64 nValue_;
  ::std::string* sValue_;
  ::google::protobuf::int32 res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMOrder* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMOnlinePlayers : public ::google::protobuf::Message {
 public:
  NetProto_GMOnlinePlayers();
  virtual ~NetProto_GMOnlinePlayers();
  
  NetProto_GMOnlinePlayers(const NetProto_GMOnlinePlayers& from);
  
  inline NetProto_GMOnlinePlayers& operator=(const NetProto_GMOnlinePlayers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMOnlinePlayers& default_instance();
  
  void Swap(NetProto_GMOnlinePlayers* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMOnlinePlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMOnlinePlayers& from);
  void MergeFrom(const NetProto_GMOnlinePlayers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMOnlinePlayers_ID ID;
  static const ID GROUPID = NetProto_GMOnlinePlayers_ID_GROUPID;
  static const ID UNITID = NetProto_GMOnlinePlayers_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMOnlinePlayers_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMOnlinePlayers_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMOnlinePlayers_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMOnlinePlayers_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMOnlinePlayers_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMOnlinePlayers_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMOnlinePlayers_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();
  
  // repeated int64 roleID = 2;
  inline int roleID_size() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::int64 roleID(int index) const;
  inline void set_roleID(int index, ::google::protobuf::int64 value);
  inline void add_roleID(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      roleID() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_roleID();
  
  // @@protoc_insertion_point(class_scope:NetProto_GMOnlinePlayers)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMOnlinePlayers* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMChat : public ::google::protobuf::Message {
 public:
  NetProto_GMChat();
  virtual ~NetProto_GMChat();
  
  NetProto_GMChat(const NetProto_GMChat& from);
  
  inline NetProto_GMChat& operator=(const NetProto_GMChat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMChat& default_instance();
  
  void Swap(NetProto_GMChat* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMChat& from);
  void MergeFrom(const NetProto_GMChat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMChat_ID ID;
  static const ID GROUPID = NetProto_GMChat_ID_GROUPID;
  static const ID UNITID = NetProto_GMChat_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMChat_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMChat_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMChat_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMChat_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMChat_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMChat_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMChat_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Chat.Channel channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::NetProto_Chat_Channel channel() const;
  inline void set_channel(::NetProto_Chat_Channel value);
  
  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional .PB_FriendInfo sender = 3;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 3;
  inline const ::PB_FriendInfo& sender() const;
  inline ::PB_FriendInfo* mutable_sender();
  inline ::PB_FriendInfo* release_sender();
  
  // optional .PB_FriendInfo recver = 4;
  inline bool has_recver() const;
  inline void clear_recver();
  static const int kRecverFieldNumber = 4;
  inline const ::PB_FriendInfo& recver() const;
  inline ::PB_FriendInfo* mutable_recver();
  inline ::PB_FriendInfo* release_recver();
  
  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMChat)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_recver();
  inline void clear_has_recver();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  ::PB_FriendInfo* sender_;
  int channel_;
  ::google::protobuf::int32 time_;
  ::PB_FriendInfo* recver_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMChat* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMServerMgr : public ::google::protobuf::Message {
 public:
  NetProto_GMServerMgr();
  virtual ~NetProto_GMServerMgr();
  
  NetProto_GMServerMgr(const NetProto_GMServerMgr& from);
  
  inline NetProto_GMServerMgr& operator=(const NetProto_GMServerMgr& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMServerMgr& default_instance();
  
  void Swap(NetProto_GMServerMgr* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMServerMgr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMServerMgr& from);
  void MergeFrom(const NetProto_GMServerMgr& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMServerMgr_ID ID;
  static const ID GROUPID = NetProto_GMServerMgr_ID_GROUPID;
  static const ID UNITID = NetProto_GMServerMgr_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMServerMgr_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMServerMgr_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMServerMgr_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMServerMgr_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMServerMgr_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMServerMgr_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMServerMgr_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMServerMgr)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_num();
  inline void clear_has_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMServerMgr* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMPlayerQuery : public ::google::protobuf::Message {
 public:
  NetProto_GMPlayerQuery();
  virtual ~NetProto_GMPlayerQuery();
  
  NetProto_GMPlayerQuery(const NetProto_GMPlayerQuery& from);
  
  inline NetProto_GMPlayerQuery& operator=(const NetProto_GMPlayerQuery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMPlayerQuery& default_instance();
  
  void Swap(NetProto_GMPlayerQuery* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMPlayerQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMPlayerQuery& from);
  void MergeFrom(const NetProto_GMPlayerQuery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMPlayerQuery_ID ID;
  static const ID GROUPID = NetProto_GMPlayerQuery_ID_GROUPID;
  static const ID UNITID = NetProto_GMPlayerQuery_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMPlayerQuery_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMPlayerQuery_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMPlayerQuery_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMPlayerQuery_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMPlayerQuery_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMPlayerQuery_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMPlayerQuery_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_PlayerAtt att = 1;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 1;
  inline const ::PB_PlayerAtt& att() const;
  inline ::PB_PlayerAtt* mutable_att();
  inline ::PB_PlayerAtt* release_att();
  
  // optional bool online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline bool online() const;
  inline void set_online(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMPlayerQuery)
 private:
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_online();
  inline void clear_has_online();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_PlayerAtt* att_;
  bool online_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMPlayerQuery* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMForbid : public ::google::protobuf::Message {
 public:
  NetProto_GMForbid();
  virtual ~NetProto_GMForbid();
  
  NetProto_GMForbid(const NetProto_GMForbid& from);
  
  inline NetProto_GMForbid& operator=(const NetProto_GMForbid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMForbid& default_instance();
  
  void Swap(NetProto_GMForbid* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMForbid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMForbid& from);
  void MergeFrom(const NetProto_GMForbid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMForbid_ID ID;
  static const ID GROUPID = NetProto_GMForbid_ID_GROUPID;
  static const ID UNITID = NetProto_GMForbid_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMForbid_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMForbid_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMForbid_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMForbid_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMForbid_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMForbid_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMForbid_ID_Parse(name, value);
  }
  
  typedef NetProto_GMForbid_Select Select;
  static const Select NOTALKING = NetProto_GMForbid_Select_NOTALKING;
  static const Select FREEZE = NetProto_GMForbid_Select_FREEZE;
  static inline bool Select_IsValid(int value) {
    return NetProto_GMForbid_Select_IsValid(value);
  }
  static const Select Select_MIN =
    NetProto_GMForbid_Select_Select_MIN;
  static const Select Select_MAX =
    NetProto_GMForbid_Select_Select_MAX;
  static const int Select_ARRAYSIZE =
    NetProto_GMForbid_Select_Select_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Select_descriptor() {
    return NetProto_GMForbid_Select_descriptor();
  }
  static inline const ::std::string& Select_Name(Select value) {
    return NetProto_GMForbid_Select_Name(value);
  }
  static inline bool Select_Parse(const ::std::string& name,
      Select* value) {
    return NetProto_GMForbid_Select_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GMForbid.Select select = 1;
  inline bool has_select() const;
  inline void clear_select();
  static const int kSelectFieldNumber = 1;
  inline ::NetProto_GMForbid_Select select() const;
  inline void set_select(::NetProto_GMForbid_Select value);
  
  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // optional int32 startTime = 3;
  inline bool has_startTime() const;
  inline void clear_startTime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int32 startTime() const;
  inline void set_startTime(::google::protobuf::int32 value);
  
  // optional int32 endTime = 4;
  inline bool has_endTime() const;
  inline void clear_endTime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int32 endTime() const;
  inline void set_endTime(::google::protobuf::int32 value);
  
  // optional int64 roleID = 5;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 5;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional string GM = 6;
  inline bool has_GM() const;
  inline void clear_GM();
  static const int kGMFieldNumber = 6;
  inline const ::std::string& GM() const;
  inline void set_GM(const ::std::string& value);
  inline void set_GM(const char* value);
  inline void set_GM(const char* value, size_t size);
  inline ::std::string* mutable_GM();
  inline ::std::string* release_GM();
  
  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional .PB_ProfessionInfo.Type professionType = 9;
  inline bool has_professionType() const;
  inline void clear_professionType();
  static const int kProfessionTypeFieldNumber = 9;
  inline ::PB_ProfessionInfo_Type professionType() const;
  inline void set_professionType(::PB_ProfessionInfo_Type value);
  
  // optional int32 id = 10;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 10;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMForbid)
 private:
  inline void set_has_select();
  inline void clear_has_select();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_startTime();
  inline void clear_has_startTime();
  inline void set_has_endTime();
  inline void clear_has_endTime();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_GM();
  inline void clear_has_GM();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_professionType();
  inline void clear_has_professionType();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int select_;
  bool flag_;
  ::google::protobuf::int32 startTime_;
  ::google::protobuf::int32 endTime_;
  ::google::protobuf::int64 roleID_;
  ::std::string* GM_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  int professionType_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMForbid* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMNotice : public ::google::protobuf::Message {
 public:
  NetProto_GMNotice();
  virtual ~NetProto_GMNotice();
  
  NetProto_GMNotice(const NetProto_GMNotice& from);
  
  inline NetProto_GMNotice& operator=(const NetProto_GMNotice& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMNotice& default_instance();
  
  void Swap(NetProto_GMNotice* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMNotice& from);
  void MergeFrom(const NetProto_GMNotice& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMNotice_GMOP GMOP;
  static const GMOP ADD = NetProto_GMNotice_GMOP_ADD;
  static const GMOP DEL = NetProto_GMNotice_GMOP_DEL;
  static const GMOP ALTER = NetProto_GMNotice_GMOP_ALTER;
  static inline bool GMOP_IsValid(int value) {
    return NetProto_GMNotice_GMOP_IsValid(value);
  }
  static const GMOP GMOP_MIN =
    NetProto_GMNotice_GMOP_GMOP_MIN;
  static const GMOP GMOP_MAX =
    NetProto_GMNotice_GMOP_GMOP_MAX;
  static const int GMOP_ARRAYSIZE =
    NetProto_GMNotice_GMOP_GMOP_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GMOP_descriptor() {
    return NetProto_GMNotice_GMOP_descriptor();
  }
  static inline const ::std::string& GMOP_Name(GMOP value) {
    return NetProto_GMNotice_GMOP_Name(value);
  }
  static inline bool GMOP_Parse(const ::std::string& name,
      GMOP* value) {
    return NetProto_GMNotice_GMOP_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 startTime = 2;
  inline bool has_startTime() const;
  inline void clear_startTime();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::int32 startTime() const;
  inline void set_startTime(::google::protobuf::int32 value);
  
  // optional int32 endTime = 3;
  inline bool has_endTime() const;
  inline void clear_endTime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int32 endTime() const;
  inline void set_endTime(::google::protobuf::int32 value);
  
  // optional int32 hz = 4;
  inline bool has_hz() const;
  inline void clear_hz();
  static const int kHzFieldNumber = 4;
  inline ::google::protobuf::int32 hz() const;
  inline void set_hz(::google::protobuf::int32 value);
  
  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional bool state1 = 6;
  inline bool has_state1() const;
  inline void clear_state1();
  static const int kState1FieldNumber = 6;
  inline bool state1() const;
  inline void set_state1(bool value);
  
  // optional bool state2 = 7;
  inline bool has_state2() const;
  inline void clear_state2();
  static const int kState2FieldNumber = 7;
  inline bool state2() const;
  inline void set_state2(bool value);
  
  // optional .NetProto_GMNotice.GMOP op = 8;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 8;
  inline ::NetProto_GMNotice_GMOP op() const;
  inline void set_op(::NetProto_GMNotice_GMOP value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMNotice)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_startTime();
  inline void clear_has_startTime();
  inline void set_has_endTime();
  inline void clear_has_endTime();
  inline void set_has_hz();
  inline void clear_has_hz();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_state1();
  inline void clear_has_state1();
  inline void set_has_state2();
  inline void clear_has_state2();
  inline void set_has_op();
  inline void clear_has_op();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 startTime_;
  ::google::protobuf::int32 endTime_;
  ::google::protobuf::int32 hz_;
  ::std::string* content_;
  bool state1_;
  bool state2_;
  int op_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMNotice* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMRequest : public ::google::protobuf::Message {
 public:
  NetProto_GMRequest();
  virtual ~NetProto_GMRequest();
  
  NetProto_GMRequest(const NetProto_GMRequest& from);
  
  inline NetProto_GMRequest& operator=(const NetProto_GMRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMRequest& default_instance();
  
  void Swap(NetProto_GMRequest* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMRequest& from);
  void MergeFrom(const NetProto_GMRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMRequest_ID ID;
  static const ID GROUPID = NetProto_GMRequest_ID_GROUPID;
  static const ID UNITID = NetProto_GMRequest_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMRequest_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMRequest_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMRequest_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMRequest_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMRequest_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMRequest_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMRequest_ID_Parse(name, value);
  }
  
  typedef NetProto_GMRequest_Select Select;
  static const Select ALL = NetProto_GMRequest_Select_ALL;
  static const Select NOTALKING = NetProto_GMRequest_Select_NOTALKING;
  static const Select FREEZE = NetProto_GMRequest_Select_FREEZE;
  static inline bool Select_IsValid(int value) {
    return NetProto_GMRequest_Select_IsValid(value);
  }
  static const Select Select_MIN =
    NetProto_GMRequest_Select_Select_MIN;
  static const Select Select_MAX =
    NetProto_GMRequest_Select_Select_MAX;
  static const int Select_ARRAYSIZE =
    NetProto_GMRequest_Select_Select_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Select_descriptor() {
    return NetProto_GMRequest_Select_descriptor();
  }
  static inline const ::std::string& Select_Name(Select value) {
    return NetProto_GMRequest_Select_Name(value);
  }
  static inline bool Select_Parse(const ::std::string& name,
      Select* value) {
    return NetProto_GMRequest_Select_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GMRequest.Select select = 1;
  inline bool has_select() const;
  inline void clear_select();
  static const int kSelectFieldNumber = 1;
  inline ::NetProto_GMRequest_Select select() const;
  inline void set_select(::NetProto_GMRequest_Select value);
  
  // repeated .NetProto_GMForbid forbid = 2;
  inline int forbid_size() const;
  inline void clear_forbid();
  static const int kForbidFieldNumber = 2;
  inline const ::NetProto_GMForbid& forbid(int index) const;
  inline ::NetProto_GMForbid* mutable_forbid(int index);
  inline ::NetProto_GMForbid* add_forbid();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GMForbid >&
      forbid() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_GMForbid >*
      mutable_forbid();
  
  // @@protoc_insertion_point(class_scope:NetProto_GMRequest)
 private:
  inline void set_has_select();
  inline void clear_has_select();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NetProto_GMForbid > forbid_;
  int select_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMRequest* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMShutDownServer : public ::google::protobuf::Message {
 public:
  NetProto_GMShutDownServer();
  virtual ~NetProto_GMShutDownServer();
  
  NetProto_GMShutDownServer(const NetProto_GMShutDownServer& from);
  
  inline NetProto_GMShutDownServer& operator=(const NetProto_GMShutDownServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMShutDownServer& default_instance();
  
  void Swap(NetProto_GMShutDownServer* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMShutDownServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMShutDownServer& from);
  void MergeFrom(const NetProto_GMShutDownServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMShutDownServer_ID ID;
  static const ID GROUPID = NetProto_GMShutDownServer_ID_GROUPID;
  static const ID UNITID = NetProto_GMShutDownServer_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMShutDownServer_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMShutDownServer_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMShutDownServer_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMShutDownServer_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMShutDownServer_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMShutDownServer_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMShutDownServer_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_GMShutDownServer)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMShutDownServer* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMChatRecords : public ::google::protobuf::Message {
 public:
  NetProto_GMChatRecords();
  virtual ~NetProto_GMChatRecords();
  
  NetProto_GMChatRecords(const NetProto_GMChatRecords& from);
  
  inline NetProto_GMChatRecords& operator=(const NetProto_GMChatRecords& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMChatRecords& default_instance();
  
  void Swap(NetProto_GMChatRecords* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMChatRecords* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMChatRecords& from);
  void MergeFrom(const NetProto_GMChatRecords& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMChatRecords_ID ID;
  static const ID GROUPID = NetProto_GMChatRecords_ID_GROUPID;
  static const ID UNITID = NetProto_GMChatRecords_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMChatRecords_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMChatRecords_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMChatRecords_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMChatRecords_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMChatRecords_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMChatRecords_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMChatRecords_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 startTime = 1;
  inline bool has_startTime() const;
  inline void clear_startTime();
  static const int kStartTimeFieldNumber = 1;
  inline ::google::protobuf::int32 startTime() const;
  inline void set_startTime(::google::protobuf::int32 value);
  
  // optional int32 endTime = 2;
  inline bool has_endTime() const;
  inline void clear_endTime();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 endTime() const;
  inline void set_endTime(::google::protobuf::int32 value);
  
  // repeated .NetProto_GMChat chat = 3;
  inline int chat_size() const;
  inline void clear_chat();
  static const int kChatFieldNumber = 3;
  inline const ::NetProto_GMChat& chat(int index) const;
  inline ::NetProto_GMChat* mutable_chat(int index);
  inline ::NetProto_GMChat* add_chat();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GMChat >&
      chat() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_GMChat >*
      mutable_chat();
  
  // @@protoc_insertion_point(class_scope:NetProto_GMChatRecords)
 private:
  inline void set_has_startTime();
  inline void clear_has_startTime();
  inline void set_has_endTime();
  inline void clear_has_endTime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 startTime_;
  ::google::protobuf::int32 endTime_;
  ::google::protobuf::RepeatedPtrField< ::NetProto_GMChat > chat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMChatRecords* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMRegistrCount : public ::google::protobuf::Message {
 public:
  NetProto_GMRegistrCount();
  virtual ~NetProto_GMRegistrCount();
  
  NetProto_GMRegistrCount(const NetProto_GMRegistrCount& from);
  
  inline NetProto_GMRegistrCount& operator=(const NetProto_GMRegistrCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMRegistrCount& default_instance();
  
  void Swap(NetProto_GMRegistrCount* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMRegistrCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMRegistrCount& from);
  void MergeFrom(const NetProto_GMRegistrCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMRegistrCount_ID ID;
  static const ID GROUPID = NetProto_GMRegistrCount_ID_GROUPID;
  static const ID UNITID = NetProto_GMRegistrCount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMRegistrCount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMRegistrCount_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMRegistrCount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMRegistrCount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMRegistrCount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMRegistrCount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMRegistrCount_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 startTime = 1;
  inline bool has_startTime() const;
  inline void clear_startTime();
  static const int kStartTimeFieldNumber = 1;
  inline ::google::protobuf::int32 startTime() const;
  inline void set_startTime(::google::protobuf::int32 value);
  
  // optional int32 endTime = 2;
  inline bool has_endTime() const;
  inline void clear_endTime();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 endTime() const;
  inline void set_endTime(::google::protobuf::int32 value);
  
  // optional int32 deviceID = 3;
  inline bool has_deviceID() const;
  inline void clear_deviceID();
  static const int kDeviceIDFieldNumber = 3;
  inline ::google::protobuf::int32 deviceID() const;
  inline void set_deviceID(::google::protobuf::int32 value);
  
  // optional int32 allDeviceID = 4;
  inline bool has_allDeviceID() const;
  inline void clear_allDeviceID();
  static const int kAllDeviceIDFieldNumber = 4;
  inline ::google::protobuf::int32 allDeviceID() const;
  inline void set_allDeviceID(::google::protobuf::int32 value);
  
  // optional int32 accountID = 5;
  inline bool has_accountID() const;
  inline void clear_accountID();
  static const int kAccountIDFieldNumber = 5;
  inline ::google::protobuf::int32 accountID() const;
  inline void set_accountID(::google::protobuf::int32 value);
  
  // optional int32 allAccountID = 6;
  inline bool has_allAccountID() const;
  inline void clear_allAccountID();
  static const int kAllAccountIDFieldNumber = 6;
  inline ::google::protobuf::int32 allAccountID() const;
  inline void set_allAccountID(::google::protobuf::int32 value);
  
  // optional int32 roleID = 7;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 7;
  inline ::google::protobuf::int32 roleID() const;
  inline void set_roleID(::google::protobuf::int32 value);
  
  // optional int32 allRoleID = 8;
  inline bool has_allRoleID() const;
  inline void clear_allRoleID();
  static const int kAllRoleIDFieldNumber = 8;
  inline ::google::protobuf::int32 allRoleID() const;
  inline void set_allRoleID(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMRegistrCount)
 private:
  inline void set_has_startTime();
  inline void clear_has_startTime();
  inline void set_has_endTime();
  inline void clear_has_endTime();
  inline void set_has_deviceID();
  inline void clear_has_deviceID();
  inline void set_has_allDeviceID();
  inline void clear_has_allDeviceID();
  inline void set_has_accountID();
  inline void clear_has_accountID();
  inline void set_has_allAccountID();
  inline void clear_has_allAccountID();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_allRoleID();
  inline void clear_has_allRoleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 startTime_;
  ::google::protobuf::int32 endTime_;
  ::google::protobuf::int32 deviceID_;
  ::google::protobuf::int32 allDeviceID_;
  ::google::protobuf::int32 accountID_;
  ::google::protobuf::int32 allAccountID_;
  ::google::protobuf::int32 roleID_;
  ::google::protobuf::int32 allRoleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMRegistrCount* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMRoleCount : public ::google::protobuf::Message {
 public:
  NetProto_GMRoleCount();
  virtual ~NetProto_GMRoleCount();
  
  NetProto_GMRoleCount(const NetProto_GMRoleCount& from);
  
  inline NetProto_GMRoleCount& operator=(const NetProto_GMRoleCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMRoleCount& default_instance();
  
  void Swap(NetProto_GMRoleCount* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMRoleCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMRoleCount& from);
  void MergeFrom(const NetProto_GMRoleCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMRoleCount_ID ID;
  static const ID GROUPID = NetProto_GMRoleCount_ID_GROUPID;
  static const ID UNITID = NetProto_GMRoleCount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMRoleCount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMRoleCount_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMRoleCount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMRoleCount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMRoleCount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMRoleCount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMRoleCount_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 startTime = 1;
  inline bool has_startTime() const;
  inline void clear_startTime();
  static const int kStartTimeFieldNumber = 1;
  inline ::google::protobuf::int32 startTime() const;
  inline void set_startTime(::google::protobuf::int32 value);
  
  // optional int32 endTime = 2;
  inline bool has_endTime() const;
  inline void clear_endTime();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 endTime() const;
  inline void set_endTime(::google::protobuf::int32 value);
  
  // optional int32 maxCount = 3;
  inline bool has_maxCount() const;
  inline void clear_maxCount();
  static const int kMaxCountFieldNumber = 3;
  inline ::google::protobuf::int32 maxCount() const;
  inline void set_maxCount(::google::protobuf::int32 value);
  
  // optional int32 maxCountTime = 4;
  inline bool has_maxCountTime() const;
  inline void clear_maxCountTime();
  static const int kMaxCountTimeFieldNumber = 4;
  inline ::google::protobuf::int32 maxCountTime() const;
  inline void set_maxCountTime(::google::protobuf::int32 value);
  
  // optional int32 minCount = 5;
  inline bool has_minCount() const;
  inline void clear_minCount();
  static const int kMinCountFieldNumber = 5;
  inline ::google::protobuf::int32 minCount() const;
  inline void set_minCount(::google::protobuf::int32 value);
  
  // optional int32 minCountTime = 6;
  inline bool has_minCountTime() const;
  inline void clear_minCountTime();
  static const int kMinCountTimeFieldNumber = 6;
  inline ::google::protobuf::int32 minCountTime() const;
  inline void set_minCountTime(::google::protobuf::int32 value);
  
  // repeated int32 count = 7;
  inline int count_size() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::int32 count(int index) const;
  inline void set_count(int index, ::google::protobuf::int32 value);
  inline void add_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_count();
  
  // repeated int32 time = 8;
  inline int time_size() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::int32 time(int index) const;
  inline void set_time(int index, ::google::protobuf::int32 value);
  inline void add_time(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_time();
  
  // optional int32 interval = 9;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 9;
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMRoleCount)
 private:
  inline void set_has_startTime();
  inline void clear_has_startTime();
  inline void set_has_endTime();
  inline void clear_has_endTime();
  inline void set_has_maxCount();
  inline void clear_has_maxCount();
  inline void set_has_maxCountTime();
  inline void clear_has_maxCountTime();
  inline void set_has_minCount();
  inline void clear_has_minCount();
  inline void set_has_minCountTime();
  inline void clear_has_minCountTime();
  inline void set_has_interval();
  inline void clear_has_interval();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 startTime_;
  ::google::protobuf::int32 endTime_;
  ::google::protobuf::int32 maxCount_;
  ::google::protobuf::int32 maxCountTime_;
  ::google::protobuf::int32 minCount_;
  ::google::protobuf::int32 minCountTime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > time_;
  ::google::protobuf::int32 interval_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMRoleCount* default_instance_;
};
// -------------------------------------------------------------------

class LevelStatistics : public ::google::protobuf::Message {
 public:
  LevelStatistics();
  virtual ~LevelStatistics();
  
  LevelStatistics(const LevelStatistics& from);
  
  inline LevelStatistics& operator=(const LevelStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelStatistics& default_instance();
  
  void Swap(LevelStatistics* other);
  
  // implements Message ----------------------------------------------
  
  LevelStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelStatistics& from);
  void MergeFrom(const LevelStatistics& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:LevelStatistics)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static LevelStatistics* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMLevelStatistics : public ::google::protobuf::Message {
 public:
  NetProto_GMLevelStatistics();
  virtual ~NetProto_GMLevelStatistics();
  
  NetProto_GMLevelStatistics(const NetProto_GMLevelStatistics& from);
  
  inline NetProto_GMLevelStatistics& operator=(const NetProto_GMLevelStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMLevelStatistics& default_instance();
  
  void Swap(NetProto_GMLevelStatistics* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMLevelStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMLevelStatistics& from);
  void MergeFrom(const NetProto_GMLevelStatistics& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMLevelStatistics_ID ID;
  static const ID GROUPID = NetProto_GMLevelStatistics_ID_GROUPID;
  static const ID UNITID = NetProto_GMLevelStatistics_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMLevelStatistics_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMLevelStatistics_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMLevelStatistics_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMLevelStatistics_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMLevelStatistics_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMLevelStatistics_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMLevelStatistics_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 startTime = 1;
  inline bool has_startTime() const;
  inline void clear_startTime();
  static const int kStartTimeFieldNumber = 1;
  inline ::google::protobuf::int32 startTime() const;
  inline void set_startTime(::google::protobuf::int32 value);
  
  // optional int32 endTime = 2;
  inline bool has_endTime() const;
  inline void clear_endTime();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 endTime() const;
  inline void set_endTime(::google::protobuf::int32 value);
  
  // repeated .LevelStatistics array = 3;
  inline int array_size() const;
  inline void clear_array();
  static const int kArrayFieldNumber = 3;
  inline const ::LevelStatistics& array(int index) const;
  inline ::LevelStatistics* mutable_array(int index);
  inline ::LevelStatistics* add_array();
  inline const ::google::protobuf::RepeatedPtrField< ::LevelStatistics >&
      array() const;
  inline ::google::protobuf::RepeatedPtrField< ::LevelStatistics >*
      mutable_array();
  
  // @@protoc_insertion_point(class_scope:NetProto_GMLevelStatistics)
 private:
  inline void set_has_startTime();
  inline void clear_has_startTime();
  inline void set_has_endTime();
  inline void clear_has_endTime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 startTime_;
  ::google::protobuf::int32 endTime_;
  ::google::protobuf::RepeatedPtrField< ::LevelStatistics > array_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMLevelStatistics* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMRankStatistics : public ::google::protobuf::Message {
 public:
  NetProto_GMRankStatistics();
  virtual ~NetProto_GMRankStatistics();
  
  NetProto_GMRankStatistics(const NetProto_GMRankStatistics& from);
  
  inline NetProto_GMRankStatistics& operator=(const NetProto_GMRankStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMRankStatistics& default_instance();
  
  void Swap(NetProto_GMRankStatistics* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMRankStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMRankStatistics& from);
  void MergeFrom(const NetProto_GMRankStatistics& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMRankStatistics_ID ID;
  static const ID GROUPID = NetProto_GMRankStatistics_ID_GROUPID;
  static const ID UNITID = NetProto_GMRankStatistics_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMRankStatistics_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMRankStatistics_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMRankStatistics_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMRankStatistics_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMRankStatistics_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMRankStatistics_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMRankStatistics_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Rank.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Rank_Type type() const;
  inline void set_type(::NetProto_Rank_Type value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // repeated .RecordInfo rank = 3;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline const ::RecordInfo& rank(int index) const;
  inline ::RecordInfo* mutable_rank(int index);
  inline ::RecordInfo* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
      mutable_rank();
  
  // @@protoc_insertion_point(class_scope:NetProto_GMRankStatistics)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::RecordInfo > rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMRankStatistics* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMOpenGuide : public ::google::protobuf::Message {
 public:
  NetProto_GMOpenGuide();
  virtual ~NetProto_GMOpenGuide();
  
  NetProto_GMOpenGuide(const NetProto_GMOpenGuide& from);
  
  inline NetProto_GMOpenGuide& operator=(const NetProto_GMOpenGuide& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMOpenGuide& default_instance();
  
  void Swap(NetProto_GMOpenGuide* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMOpenGuide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMOpenGuide& from);
  void MergeFrom(const NetProto_GMOpenGuide& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMOpenGuide_ID ID;
  static const ID GROUPID = NetProto_GMOpenGuide_ID_GROUPID;
  static const ID UNITID = NetProto_GMOpenGuide_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMOpenGuide_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMOpenGuide_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMOpenGuide_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMOpenGuide_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMOpenGuide_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMOpenGuide_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMOpenGuide_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional bool open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline bool open() const;
  inline void set_open(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMOpenGuide)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_open();
  inline void clear_has_open();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 id_;
  bool open_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMOpenGuide* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMNoticeMgr : public ::google::protobuf::Message {
 public:
  NetProto_GMNoticeMgr();
  virtual ~NetProto_GMNoticeMgr();
  
  NetProto_GMNoticeMgr(const NetProto_GMNoticeMgr& from);
  
  inline NetProto_GMNoticeMgr& operator=(const NetProto_GMNoticeMgr& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMNoticeMgr& default_instance();
  
  void Swap(NetProto_GMNoticeMgr* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMNoticeMgr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMNoticeMgr& from);
  void MergeFrom(const NetProto_GMNoticeMgr& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMNoticeMgr_ID ID;
  static const ID GROUPID = NetProto_GMNoticeMgr_ID_GROUPID;
  static const ID UNITID = NetProto_GMNoticeMgr_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMNoticeMgr_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMNoticeMgr_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMNoticeMgr_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMNoticeMgr_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMNoticeMgr_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMNoticeMgr_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMNoticeMgr_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .NetProto_GMNotice notice = 1;
  inline int notice_size() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 1;
  inline const ::NetProto_GMNotice& notice(int index) const;
  inline ::NetProto_GMNotice* mutable_notice(int index);
  inline ::NetProto_GMNotice* add_notice();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GMNotice >&
      notice() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_GMNotice >*
      mutable_notice();
  
  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMNoticeMgr)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NetProto_GMNotice > notice_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMNoticeMgr* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMRegister : public ::google::protobuf::Message {
 public:
  NetProto_GMRegister();
  virtual ~NetProto_GMRegister();
  
  NetProto_GMRegister(const NetProto_GMRegister& from);
  
  inline NetProto_GMRegister& operator=(const NetProto_GMRegister& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMRegister& default_instance();
  
  void Swap(NetProto_GMRegister* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMRegister& from);
  void MergeFrom(const NetProto_GMRegister& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMRegister_ID ID;
  static const ID GROUPID = NetProto_GMRegister_ID_GROUPID;
  static const ID UNITID = NetProto_GMRegister_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMRegister_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMRegister_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMRegister_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMRegister_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMRegister_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMRegister_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMRegister_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional .NetProto_GMLogin.OP permission = 3;
  inline bool has_permission() const;
  inline void clear_permission();
  static const int kPermissionFieldNumber = 3;
  inline ::NetProto_GMLogin_OP permission() const;
  inline void set_permission(::NetProto_GMLogin_OP value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMRegister)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_permission();
  inline void clear_has_permission();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::std::string* password_;
  int permission_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMRegister* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMShutDownMessage : public ::google::protobuf::Message {
 public:
  NetProto_GMShutDownMessage();
  virtual ~NetProto_GMShutDownMessage();
  
  NetProto_GMShutDownMessage(const NetProto_GMShutDownMessage& from);
  
  inline NetProto_GMShutDownMessage& operator=(const NetProto_GMShutDownMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMShutDownMessage& default_instance();
  
  void Swap(NetProto_GMShutDownMessage* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMShutDownMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMShutDownMessage& from);
  void MergeFrom(const NetProto_GMShutDownMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMShutDownMessage_ID ID;
  static const ID GROUPID = NetProto_GMShutDownMessage_ID_GROUPID;
  static const ID UNITID = NetProto_GMShutDownMessage_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMShutDownMessage_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMShutDownMessage_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMShutDownMessage_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMShutDownMessage_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMShutDownMessage_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMShutDownMessage_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMShutDownMessage_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 groupID = 1;
  inline bool has_groupID() const;
  inline void clear_groupID();
  static const int kGroupIDFieldNumber = 1;
  inline ::google::protobuf::int32 groupID() const;
  inline void set_groupID(::google::protobuf::int32 value);
  
  // optional int32 unitID = 2;
  inline bool has_unitID() const;
  inline void clear_unitID();
  static const int kUnitIDFieldNumber = 2;
  inline ::google::protobuf::int32 unitID() const;
  inline void set_unitID(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMShutDownMessage)
 private:
  inline void set_has_groupID();
  inline void clear_has_groupID();
  inline void set_has_unitID();
  inline void clear_has_unitID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 groupID_;
  ::google::protobuf::int32 unitID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMShutDownMessage* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMOpenMessage : public ::google::protobuf::Message {
 public:
  NetProto_GMOpenMessage();
  virtual ~NetProto_GMOpenMessage();
  
  NetProto_GMOpenMessage(const NetProto_GMOpenMessage& from);
  
  inline NetProto_GMOpenMessage& operator=(const NetProto_GMOpenMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMOpenMessage& default_instance();
  
  void Swap(NetProto_GMOpenMessage* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMOpenMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMOpenMessage& from);
  void MergeFrom(const NetProto_GMOpenMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMOpenMessage_ID ID;
  static const ID GROUPID = NetProto_GMOpenMessage_ID_GROUPID;
  static const ID UNITID = NetProto_GMOpenMessage_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMOpenMessage_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMOpenMessage_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMOpenMessage_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMOpenMessage_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMOpenMessage_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMOpenMessage_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMOpenMessage_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 groupID = 1;
  inline bool has_groupID() const;
  inline void clear_groupID();
  static const int kGroupIDFieldNumber = 1;
  inline ::google::protobuf::int32 groupID() const;
  inline void set_groupID(::google::protobuf::int32 value);
  
  // optional int32 unitID = 2;
  inline bool has_unitID() const;
  inline void clear_unitID();
  static const int kUnitIDFieldNumber = 2;
  inline ::google::protobuf::int32 unitID() const;
  inline void set_unitID(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMOpenMessage)
 private:
  inline void set_has_groupID();
  inline void clear_has_groupID();
  inline void set_has_unitID();
  inline void clear_has_unitID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 groupID_;
  ::google::protobuf::int32 unitID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMOpenMessage* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMModifyVIP : public ::google::protobuf::Message {
 public:
  NetProto_GMModifyVIP();
  virtual ~NetProto_GMModifyVIP();
  
  NetProto_GMModifyVIP(const NetProto_GMModifyVIP& from);
  
  inline NetProto_GMModifyVIP& operator=(const NetProto_GMModifyVIP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMModifyVIP& default_instance();
  
  void Swap(NetProto_GMModifyVIP* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMModifyVIP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMModifyVIP& from);
  void MergeFrom(const NetProto_GMModifyVIP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMModifyVIP_ID ID;
  static const ID GROUPID = NetProto_GMModifyVIP_ID_GROUPID;
  static const ID UNITID = NetProto_GMModifyVIP_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMModifyVIP_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMModifyVIP_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMModifyVIP_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMModifyVIP_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMModifyVIP_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMModifyVIP_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMModifyVIP_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 delta = 2;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 2;
  inline ::google::protobuf::int32 delta() const;
  inline void set_delta(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMModifyVIP)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_delta();
  inline void clear_has_delta();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 delta_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMModifyVIP* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMAddExchange : public ::google::protobuf::Message {
 public:
  NetProto_GMAddExchange();
  virtual ~NetProto_GMAddExchange();
  
  NetProto_GMAddExchange(const NetProto_GMAddExchange& from);
  
  inline NetProto_GMAddExchange& operator=(const NetProto_GMAddExchange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMAddExchange& default_instance();
  
  void Swap(NetProto_GMAddExchange* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMAddExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMAddExchange& from);
  void MergeFrom(const NetProto_GMAddExchange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMAddExchange_ID ID;
  static const ID GROUPID = NetProto_GMAddExchange_ID_GROUPID;
  static const ID UNITID = NetProto_GMAddExchange_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMAddExchange_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMAddExchange_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMAddExchange_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMAddExchange_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMAddExchange_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMAddExchange_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMAddExchange_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated string exchange = 1;
  inline int exchange_size() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  inline const ::std::string& exchange(int index) const;
  inline ::std::string* mutable_exchange(int index);
  inline void set_exchange(int index, const ::std::string& value);
  inline void set_exchange(int index, const char* value);
  inline void set_exchange(int index, const char* value, size_t size);
  inline ::std::string* add_exchange();
  inline void add_exchange(const ::std::string& value);
  inline void add_exchange(const char* value);
  inline void add_exchange(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& exchange() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_exchange();
  
  // optional int32 group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);
  
  // optional int32 endTime = 3;
  inline bool has_endTime() const;
  inline void clear_endTime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int32 endTime() const;
  inline void set_endTime(::google::protobuf::int32 value);
  
  // optional int32 giftID = 4;
  inline bool has_giftID() const;
  inline void clear_giftID();
  static const int kGiftIDFieldNumber = 4;
  inline ::google::protobuf::int32 giftID() const;
  inline void set_giftID(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMAddExchange)
 private:
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_endTime();
  inline void clear_has_endTime();
  inline void set_has_giftID();
  inline void clear_has_giftID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> exchange_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 endTime_;
  ::google::protobuf::int32 giftID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMAddExchange* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMQueryFaction : public ::google::protobuf::Message {
 public:
  NetProto_GMQueryFaction();
  virtual ~NetProto_GMQueryFaction();
  
  NetProto_GMQueryFaction(const NetProto_GMQueryFaction& from);
  
  inline NetProto_GMQueryFaction& operator=(const NetProto_GMQueryFaction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMQueryFaction& default_instance();
  
  void Swap(NetProto_GMQueryFaction* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMQueryFaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMQueryFaction& from);
  void MergeFrom(const NetProto_GMQueryFaction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMQueryFaction_ID ID;
  static const ID GROUPID = NetProto_GMQueryFaction_ID_GROUPID;
  static const ID UNITID = NetProto_GMQueryFaction_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMQueryFaction_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMQueryFaction_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMQueryFaction_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMQueryFaction_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMQueryFaction_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMQueryFaction_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMQueryFaction_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_FactionInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::NetProto_FactionInfo& info() const;
  inline ::NetProto_FactionInfo* mutable_info();
  inline ::NetProto_FactionInfo* release_info();
  
  // repeated .NetProto_FactionMem mem = 2;
  inline int mem_size() const;
  inline void clear_mem();
  static const int kMemFieldNumber = 2;
  inline const ::NetProto_FactionMem& mem(int index) const;
  inline ::NetProto_FactionMem* mutable_mem(int index);
  inline ::NetProto_FactionMem* add_mem();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem >&
      mem() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem >*
      mutable_mem();
  
  // optional string winName = 3;
  inline bool has_winName() const;
  inline void clear_winName();
  static const int kWinNameFieldNumber = 3;
  inline const ::std::string& winName() const;
  inline void set_winName(const ::std::string& value);
  inline void set_winName(const char* value);
  inline void set_winName(const char* value, size_t size);
  inline ::std::string* mutable_winName();
  inline ::std::string* release_winName();
  
  // @@protoc_insertion_point(class_scope:NetProto_GMQueryFaction)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_winName();
  inline void clear_has_winName();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_FactionInfo* info_;
  ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem > mem_;
  ::std::string* winName_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMQueryFaction* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMChangeFactionMem : public ::google::protobuf::Message {
 public:
  NetProto_GMChangeFactionMem();
  virtual ~NetProto_GMChangeFactionMem();
  
  NetProto_GMChangeFactionMem(const NetProto_GMChangeFactionMem& from);
  
  inline NetProto_GMChangeFactionMem& operator=(const NetProto_GMChangeFactionMem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMChangeFactionMem& default_instance();
  
  void Swap(NetProto_GMChangeFactionMem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMChangeFactionMem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMChangeFactionMem& from);
  void MergeFrom(const NetProto_GMChangeFactionMem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMChangeFactionMem_ID ID;
  static const ID GROUPID = NetProto_GMChangeFactionMem_ID_GROUPID;
  static const ID UNITID = NetProto_GMChangeFactionMem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMChangeFactionMem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMChangeFactionMem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMChangeFactionMem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMChangeFactionMem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMChangeFactionMem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMChangeFactionMem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMChangeFactionMem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string factionName = 1;
  inline bool has_factionName() const;
  inline void clear_factionName();
  static const int kFactionNameFieldNumber = 1;
  inline const ::std::string& factionName() const;
  inline void set_factionName(const ::std::string& value);
  inline void set_factionName(const char* value);
  inline void set_factionName(const char* value, size_t size);
  inline ::std::string* mutable_factionName();
  inline ::std::string* release_factionName();
  
  // optional int64 roleID = 2;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional bool flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMChangeFactionMem)
 private:
  inline void set_has_factionName();
  inline void clear_has_factionName();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* factionName_;
  ::google::protobuf::int64 roleID_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMChangeFactionMem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMAddRekooRole : public ::google::protobuf::Message {
 public:
  NetProto_GMAddRekooRole();
  virtual ~NetProto_GMAddRekooRole();
  
  NetProto_GMAddRekooRole(const NetProto_GMAddRekooRole& from);
  
  inline NetProto_GMAddRekooRole& operator=(const NetProto_GMAddRekooRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMAddRekooRole& default_instance();
  
  void Swap(NetProto_GMAddRekooRole* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMAddRekooRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMAddRekooRole& from);
  void MergeFrom(const NetProto_GMAddRekooRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMAddRekooRole_ID ID;
  static const ID GROUPID = NetProto_GMAddRekooRole_ID_GROUPID;
  static const ID UNITID = NetProto_GMAddRekooRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMAddRekooRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMAddRekooRole_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMAddRekooRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMAddRekooRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMAddRekooRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMAddRekooRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMAddRekooRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_GMAddRekooRole)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMAddRekooRole* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_GMLoginInfo : public ::google::protobuf::Message {
 public:
  NetProto_GMLoginInfo();
  virtual ~NetProto_GMLoginInfo();
  
  NetProto_GMLoginInfo(const NetProto_GMLoginInfo& from);
  
  inline NetProto_GMLoginInfo& operator=(const NetProto_GMLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_GMLoginInfo& default_instance();
  
  void Swap(NetProto_GMLoginInfo* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_GMLoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_GMLoginInfo& from);
  void MergeFrom(const NetProto_GMLoginInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_GMLoginInfo_ID ID;
  static const ID GROUPID = NetProto_GMLoginInfo_ID_GROUPID;
  static const ID UNITID = NetProto_GMLoginInfo_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_GMLoginInfo_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_GMLoginInfo_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_GMLoginInfo_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_GMLoginInfo_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_GMLoginInfo_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_GMLoginInfo_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_GMLoginInfo_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // @@protoc_insertion_point(class_scope:NetProto_GMLoginInfo)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_str();
  inline void clear_has_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_GMLoginInfo* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ObtainPet : public ::google::protobuf::Message {
 public:
  NetProto_ObtainPet();
  virtual ~NetProto_ObtainPet();
  
  NetProto_ObtainPet(const NetProto_ObtainPet& from);
  
  inline NetProto_ObtainPet& operator=(const NetProto_ObtainPet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ObtainPet& default_instance();
  
  void Swap(NetProto_ObtainPet* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ObtainPet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ObtainPet& from);
  void MergeFrom(const NetProto_ObtainPet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ObtainPet_ID ID;
  static const ID GROUPID = NetProto_ObtainPet_ID_GROUPID;
  static const ID UNITID = NetProto_ObtainPet_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ObtainPet_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ObtainPet_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ObtainPet_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ObtainPet_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ObtainPet_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ObtainPet_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ObtainPet_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ObtainPet)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ObtainPet* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PetFighting : public ::google::protobuf::Message {
 public:
  NetProto_PetFighting();
  virtual ~NetProto_PetFighting();
  
  NetProto_PetFighting(const NetProto_PetFighting& from);
  
  inline NetProto_PetFighting& operator=(const NetProto_PetFighting& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PetFighting& default_instance();
  
  void Swap(NetProto_PetFighting* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PetFighting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PetFighting& from);
  void MergeFrom(const NetProto_PetFighting& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PetFighting_ID ID;
  static const ID GROUPID = NetProto_PetFighting_ID_GROUPID;
  static const ID UNITID = NetProto_PetFighting_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PetFighting_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PetFighting_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PetFighting_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PetFighting_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PetFighting_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PetFighting_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PetFighting_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PetFighting)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PetFighting* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PetRest : public ::google::protobuf::Message {
 public:
  NetProto_PetRest();
  virtual ~NetProto_PetRest();
  
  NetProto_PetRest(const NetProto_PetRest& from);
  
  inline NetProto_PetRest& operator=(const NetProto_PetRest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PetRest& default_instance();
  
  void Swap(NetProto_PetRest* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PetRest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PetRest& from);
  void MergeFrom(const NetProto_PetRest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PetRest_ID ID;
  static const ID GROUPID = NetProto_PetRest_ID_GROUPID;
  static const ID UNITID = NetProto_PetRest_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PetRest_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PetRest_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PetRest_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PetRest_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PetRest_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PetRest_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PetRest_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PetRest)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PetRest* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PetAttach : public ::google::protobuf::Message {
 public:
  NetProto_PetAttach();
  virtual ~NetProto_PetAttach();
  
  NetProto_PetAttach(const NetProto_PetAttach& from);
  
  inline NetProto_PetAttach& operator=(const NetProto_PetAttach& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PetAttach& default_instance();
  
  void Swap(NetProto_PetAttach* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PetAttach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PetAttach& from);
  void MergeFrom(const NetProto_PetAttach& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PetAttach_ID ID;
  static const ID GROUPID = NetProto_PetAttach_ID_GROUPID;
  static const ID UNITID = NetProto_PetAttach_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PetAttach_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PetAttach_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PetAttach_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PetAttach_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PetAttach_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PetAttach_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PetAttach_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PetAttach)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PetAttach* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PetLevelUp : public ::google::protobuf::Message {
 public:
  NetProto_PetLevelUp();
  virtual ~NetProto_PetLevelUp();
  
  NetProto_PetLevelUp(const NetProto_PetLevelUp& from);
  
  inline NetProto_PetLevelUp& operator=(const NetProto_PetLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PetLevelUp& default_instance();
  
  void Swap(NetProto_PetLevelUp* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PetLevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PetLevelUp& from);
  void MergeFrom(const NetProto_PetLevelUp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PetLevelUp_ID ID;
  static const ID GROUPID = NetProto_PetLevelUp_ID_GROUPID;
  static const ID UNITID = NetProto_PetLevelUp_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PetLevelUp_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PetLevelUp_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PetLevelUp_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PetLevelUp_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PetLevelUp_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PetLevelUp_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PetLevelUp_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 change = 2;
  inline bool has_change() const;
  inline void clear_change();
  static const int kChangeFieldNumber = 2;
  inline ::google::protobuf::int32 change() const;
  inline void set_change(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PetLevelUp)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_change();
  inline void clear_has_change();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 change_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PetLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PetLearnSkill : public ::google::protobuf::Message {
 public:
  NetProto_PetLearnSkill();
  virtual ~NetProto_PetLearnSkill();
  
  NetProto_PetLearnSkill(const NetProto_PetLearnSkill& from);
  
  inline NetProto_PetLearnSkill& operator=(const NetProto_PetLearnSkill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PetLearnSkill& default_instance();
  
  void Swap(NetProto_PetLearnSkill* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PetLearnSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PetLearnSkill& from);
  void MergeFrom(const NetProto_PetLearnSkill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PetLearnSkill_ID ID;
  static const ID GROUPID = NetProto_PetLearnSkill_ID_GROUPID;
  static const ID UNITID = NetProto_PetLearnSkill_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PetLearnSkill_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PetLearnSkill_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PetLearnSkill_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PetLearnSkill_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PetLearnSkill_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PetLearnSkill_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PetLearnSkill_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 skillID = 2;
  inline bool has_skillID() const;
  inline void clear_skillID();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::int32 skillID() const;
  inline void set_skillID(::google::protobuf::int32 value);
  
  // optional int32 skillsIndex = 3;
  inline bool has_skillsIndex() const;
  inline void clear_skillsIndex();
  static const int kSkillsIndexFieldNumber = 3;
  inline ::google::protobuf::int32 skillsIndex() const;
  inline void set_skillsIndex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PetLearnSkill)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_skillID();
  inline void clear_has_skillID();
  inline void set_has_skillsIndex();
  inline void clear_has_skillsIndex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 skillID_;
  ::google::protobuf::int32 skillsIndex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PetLearnSkill* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PetInherit : public ::google::protobuf::Message {
 public:
  NetProto_PetInherit();
  virtual ~NetProto_PetInherit();
  
  NetProto_PetInherit(const NetProto_PetInherit& from);
  
  inline NetProto_PetInherit& operator=(const NetProto_PetInherit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PetInherit& default_instance();
  
  void Swap(NetProto_PetInherit* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PetInherit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PetInherit& from);
  void MergeFrom(const NetProto_PetInherit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PetInherit_ID ID;
  static const ID GROUPID = NetProto_PetInherit_ID_GROUPID;
  static const ID UNITID = NetProto_PetInherit_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PetInherit_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PetInherit_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PetInherit_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PetInherit_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PetInherit_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PetInherit_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PetInherit_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 indexPre = 1;
  inline bool has_indexPre() const;
  inline void clear_indexPre();
  static const int kIndexPreFieldNumber = 1;
  inline ::google::protobuf::int32 indexPre() const;
  inline void set_indexPre(::google::protobuf::int32 value);
  
  // optional int32 indexAfter = 2;
  inline bool has_indexAfter() const;
  inline void clear_indexAfter();
  static const int kIndexAfterFieldNumber = 2;
  inline ::google::protobuf::int32 indexAfter() const;
  inline void set_indexAfter(::google::protobuf::int32 value);
  
  // optional bool inheritSkill = 3;
  inline bool has_inheritSkill() const;
  inline void clear_inheritSkill();
  static const int kInheritSkillFieldNumber = 3;
  inline bool inheritSkill() const;
  inline void set_inheritSkill(bool value);
  
  // optional .PB_PetAsset pet = 4;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 4;
  inline const ::PB_PetAsset& pet() const;
  inline ::PB_PetAsset* mutable_pet();
  inline ::PB_PetAsset* release_pet();
  
  // @@protoc_insertion_point(class_scope:NetProto_PetInherit)
 private:
  inline void set_has_indexPre();
  inline void clear_has_indexPre();
  inline void set_has_indexAfter();
  inline void clear_has_indexAfter();
  inline void set_has_inheritSkill();
  inline void clear_has_inheritSkill();
  inline void set_has_pet();
  inline void clear_has_pet();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 indexPre_;
  ::google::protobuf::int32 indexAfter_;
  ::PB_PetAsset* pet_;
  bool inheritSkill_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PetInherit* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PetAdvance : public ::google::protobuf::Message {
 public:
  NetProto_PetAdvance();
  virtual ~NetProto_PetAdvance();
  
  NetProto_PetAdvance(const NetProto_PetAdvance& from);
  
  inline NetProto_PetAdvance& operator=(const NetProto_PetAdvance& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PetAdvance& default_instance();
  
  void Swap(NetProto_PetAdvance* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PetAdvance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PetAdvance& from);
  void MergeFrom(const NetProto_PetAdvance& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PetAdvance_ID ID;
  static const ID GROUPID = NetProto_PetAdvance_ID_GROUPID;
  static const ID UNITID = NetProto_PetAdvance_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PetAdvance_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PetAdvance_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PetAdvance_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PetAdvance_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PetAdvance_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PetAdvance_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PetAdvance_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PetAdvance)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PetAdvance* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PetPsychicsLevelUp : public ::google::protobuf::Message {
 public:
  NetProto_PetPsychicsLevelUp();
  virtual ~NetProto_PetPsychicsLevelUp();
  
  NetProto_PetPsychicsLevelUp(const NetProto_PetPsychicsLevelUp& from);
  
  inline NetProto_PetPsychicsLevelUp& operator=(const NetProto_PetPsychicsLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PetPsychicsLevelUp& default_instance();
  
  void Swap(NetProto_PetPsychicsLevelUp* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PetPsychicsLevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PetPsychicsLevelUp& from);
  void MergeFrom(const NetProto_PetPsychicsLevelUp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PetPsychicsLevelUp_ID ID;
  static const ID GROUPID = NetProto_PetPsychicsLevelUp_ID_GROUPID;
  static const ID UNITID = NetProto_PetPsychicsLevelUp_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PetPsychicsLevelUp_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PetPsychicsLevelUp_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PetPsychicsLevelUp_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PetPsychicsLevelUp_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PetPsychicsLevelUp_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PetPsychicsLevelUp_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PetPsychicsLevelUp_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PetPsychicsLevelUp)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PetPsychicsLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ActiveGemRequest : public ::google::protobuf::Message {
 public:
  NetProto_ActiveGemRequest();
  virtual ~NetProto_ActiveGemRequest();
  
  NetProto_ActiveGemRequest(const NetProto_ActiveGemRequest& from);
  
  inline NetProto_ActiveGemRequest& operator=(const NetProto_ActiveGemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ActiveGemRequest& default_instance();
  
  void Swap(NetProto_ActiveGemRequest* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ActiveGemRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ActiveGemRequest& from);
  void MergeFrom(const NetProto_ActiveGemRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ActiveGemRequest_ID ID;
  static const ID GROUPID = NetProto_ActiveGemRequest_ID_GROUPID;
  static const ID UNITID = NetProto_ActiveGemRequest_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ActiveGemRequest_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ActiveGemRequest_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ActiveGemRequest_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ActiveGemRequest_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ActiveGemRequest_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ActiveGemRequest_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ActiveGemRequest_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ActiveGemRequest)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ActiveGemRequest* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ActiveDoubleGem : public ::google::protobuf::Message {
 public:
  NetProto_ActiveDoubleGem();
  virtual ~NetProto_ActiveDoubleGem();
  
  NetProto_ActiveDoubleGem(const NetProto_ActiveDoubleGem& from);
  
  inline NetProto_ActiveDoubleGem& operator=(const NetProto_ActiveDoubleGem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ActiveDoubleGem& default_instance();
  
  void Swap(NetProto_ActiveDoubleGem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ActiveDoubleGem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ActiveDoubleGem& from);
  void MergeFrom(const NetProto_ActiveDoubleGem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ActiveDoubleGem_ID ID;
  static const ID GROUPID = NetProto_ActiveDoubleGem_ID_GROUPID;
  static const ID UNITID = NetProto_ActiveDoubleGem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ActiveDoubleGem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ActiveDoubleGem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ActiveDoubleGem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ActiveDoubleGem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ActiveDoubleGem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ActiveDoubleGem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ActiveDoubleGem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_ActiveDoubleGem)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ActiveDoubleGem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ActiveUpGradeGem : public ::google::protobuf::Message {
 public:
  NetProto_ActiveUpGradeGem();
  virtual ~NetProto_ActiveUpGradeGem();
  
  NetProto_ActiveUpGradeGem(const NetProto_ActiveUpGradeGem& from);
  
  inline NetProto_ActiveUpGradeGem& operator=(const NetProto_ActiveUpGradeGem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ActiveUpGradeGem& default_instance();
  
  void Swap(NetProto_ActiveUpGradeGem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ActiveUpGradeGem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ActiveUpGradeGem& from);
  void MergeFrom(const NetProto_ActiveUpGradeGem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ActiveUpGradeGem_ID ID;
  static const ID GROUPID = NetProto_ActiveUpGradeGem_ID_GROUPID;
  static const ID UNITID = NetProto_ActiveUpGradeGem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ActiveUpGradeGem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ActiveUpGradeGem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ActiveUpGradeGem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ActiveUpGradeGem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ActiveUpGradeGem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ActiveUpGradeGem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ActiveUpGradeGem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ActiveUpGradeGem)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ActiveUpGradeGem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ActiveGetGem : public ::google::protobuf::Message {
 public:
  NetProto_ActiveGetGem();
  virtual ~NetProto_ActiveGetGem();
  
  NetProto_ActiveGetGem(const NetProto_ActiveGetGem& from);
  
  inline NetProto_ActiveGetGem& operator=(const NetProto_ActiveGetGem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ActiveGetGem& default_instance();
  
  void Swap(NetProto_ActiveGetGem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ActiveGetGem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ActiveGetGem& from);
  void MergeFrom(const NetProto_ActiveGetGem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ActiveGetGem_ID ID;
  static const ID GROUPID = NetProto_ActiveGetGem_ID_GROUPID;
  static const ID UNITID = NetProto_ActiveGetGem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ActiveGetGem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ActiveGetGem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ActiveGetGem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ActiveGetGem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ActiveGetGem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ActiveGetGem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ActiveGetGem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional bool flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ActiveGetGem)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ActiveGetGem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ActiveFight : public ::google::protobuf::Message {
 public:
  NetProto_ActiveFight();
  virtual ~NetProto_ActiveFight();
  
  NetProto_ActiveFight(const NetProto_ActiveFight& from);
  
  inline NetProto_ActiveFight& operator=(const NetProto_ActiveFight& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ActiveFight& default_instance();
  
  void Swap(NetProto_ActiveFight* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ActiveFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ActiveFight& from);
  void MergeFrom(const NetProto_ActiveFight& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ActiveFight_ID ID;
  static const ID GROUPID = NetProto_ActiveFight_ID_GROUPID;
  static const ID UNITID = NetProto_ActiveFight_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ActiveFight_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ActiveFight_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ActiveFight_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ActiveFight_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ActiveFight_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ActiveFight_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ActiveFight_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_ActiveFight)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ActiveFight* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ActiveStrongeSolider : public ::google::protobuf::Message {
 public:
  NetProto_ActiveStrongeSolider();
  virtual ~NetProto_ActiveStrongeSolider();
  
  NetProto_ActiveStrongeSolider(const NetProto_ActiveStrongeSolider& from);
  
  inline NetProto_ActiveStrongeSolider& operator=(const NetProto_ActiveStrongeSolider& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ActiveStrongeSolider& default_instance();
  
  void Swap(NetProto_ActiveStrongeSolider* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ActiveStrongeSolider* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ActiveStrongeSolider& from);
  void MergeFrom(const NetProto_ActiveStrongeSolider& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ActiveStrongeSolider_ID ID;
  static const ID GROUPID = NetProto_ActiveStrongeSolider_ID_GROUPID;
  static const ID UNITID = NetProto_ActiveStrongeSolider_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ActiveStrongeSolider_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ActiveStrongeSolider_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ActiveStrongeSolider_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ActiveStrongeSolider_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ActiveStrongeSolider_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ActiveStrongeSolider_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ActiveStrongeSolider_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ActiveStrongeSolider)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ActiveStrongeSolider* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_EnterPlayOff : public ::google::protobuf::Message {
 public:
  NetProto_EnterPlayOff();
  virtual ~NetProto_EnterPlayOff();
  
  NetProto_EnterPlayOff(const NetProto_EnterPlayOff& from);
  
  inline NetProto_EnterPlayOff& operator=(const NetProto_EnterPlayOff& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_EnterPlayOff& default_instance();
  
  void Swap(NetProto_EnterPlayOff* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_EnterPlayOff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_EnterPlayOff& from);
  void MergeFrom(const NetProto_EnterPlayOff& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_EnterPlayOff_ID ID;
  static const ID GROUPID = NetProto_EnterPlayOff_ID_GROUPID;
  static const ID UNITID = NetProto_EnterPlayOff_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_EnterPlayOff_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_EnterPlayOff_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_EnterPlayOff_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_EnterPlayOff_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_EnterPlayOff_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_EnterPlayOff_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_EnterPlayOff_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_EnterPlayOff)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_EnterPlayOff* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PlayOffInfo : public ::google::protobuf::Message {
 public:
  NetProto_PlayOffInfo();
  virtual ~NetProto_PlayOffInfo();
  
  NetProto_PlayOffInfo(const NetProto_PlayOffInfo& from);
  
  inline NetProto_PlayOffInfo& operator=(const NetProto_PlayOffInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PlayOffInfo& default_instance();
  
  void Swap(NetProto_PlayOffInfo* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PlayOffInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PlayOffInfo& from);
  void MergeFrom(const NetProto_PlayOffInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PlayOffInfo_ID ID;
  static const ID GROUPID = NetProto_PlayOffInfo_ID_GROUPID;
  static const ID UNITID = NetProto_PlayOffInfo_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PlayOffInfo_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PlayOffInfo_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PlayOffInfo_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PlayOffInfo_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PlayOffInfo_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PlayOffInfo_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PlayOffInfo_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 day = 2;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);
  
  // optional int32 pass = 3;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 3;
  inline ::google::protobuf::int32 pass() const;
  inline void set_pass(::google::protobuf::int32 value);
  
  // optional int32 overTime = 4;
  inline bool has_overTime() const;
  inline void clear_overTime();
  static const int kOverTimeFieldNumber = 4;
  inline ::google::protobuf::int32 overTime() const;
  inline void set_overTime(::google::protobuf::int32 value);
  
  // optional int32 result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional .PB_PlayerAtt att = 6;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 6;
  inline const ::PB_PlayerAtt& att() const;
  inline ::PB_PlayerAtt* mutable_att();
  inline ::PB_PlayerAtt* release_att();
  
  // optional int32 res = 7;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 7;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // optional int32 turn = 8;
  inline bool has_turn() const;
  inline void clear_turn();
  static const int kTurnFieldNumber = 8;
  inline ::google::protobuf::int32 turn() const;
  inline void set_turn(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_PlayOffInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_pass();
  inline void clear_has_pass();
  inline void set_has_overTime();
  inline void clear_has_overTime();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_turn();
  inline void clear_has_turn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 pass_;
  ::google::protobuf::int32 overTime_;
  ::PB_PlayerAtt* att_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 res_;
  ::google::protobuf::int32 turn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PlayOffInfo* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_PreparePlayOff : public ::google::protobuf::Message {
 public:
  NetProto_PreparePlayOff();
  virtual ~NetProto_PreparePlayOff();
  
  NetProto_PreparePlayOff(const NetProto_PreparePlayOff& from);
  
  inline NetProto_PreparePlayOff& operator=(const NetProto_PreparePlayOff& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_PreparePlayOff& default_instance();
  
  void Swap(NetProto_PreparePlayOff* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_PreparePlayOff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_PreparePlayOff& from);
  void MergeFrom(const NetProto_PreparePlayOff& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_PreparePlayOff_ID ID;
  static const ID GROUPID = NetProto_PreparePlayOff_ID_GROUPID;
  static const ID UNITID = NetProto_PreparePlayOff_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_PreparePlayOff_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_PreparePlayOff_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_PreparePlayOff_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_PreparePlayOff_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_PreparePlayOff_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_PreparePlayOff_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_PreparePlayOff_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_PreparePlayOff)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_PreparePlayOff* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Treasure : public ::google::protobuf::Message {
 public:
  NetProto_Treasure();
  virtual ~NetProto_Treasure();
  
  NetProto_Treasure(const NetProto_Treasure& from);
  
  inline NetProto_Treasure& operator=(const NetProto_Treasure& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Treasure& default_instance();
  
  void Swap(NetProto_Treasure* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Treasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Treasure& from);
  void MergeFrom(const NetProto_Treasure& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Treasure_ID ID;
  static const ID GROUPID = NetProto_Treasure_ID_GROUPID;
  static const ID UNITID = NetProto_Treasure_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Treasure_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Treasure_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Treasure_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Treasure_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Treasure_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Treasure_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Treasure_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Treasure)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Treasure* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Hire : public ::google::protobuf::Message {
 public:
  NetProto_Hire();
  virtual ~NetProto_Hire();
  
  NetProto_Hire(const NetProto_Hire& from);
  
  inline NetProto_Hire& operator=(const NetProto_Hire& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Hire& default_instance();
  
  void Swap(NetProto_Hire* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Hire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Hire& from);
  void MergeFrom(const NetProto_Hire& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Hire_ID ID;
  static const ID GROUPID = NetProto_Hire_ID_GROUPID;
  static const ID UNITID = NetProto_Hire_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Hire_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Hire_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Hire_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Hire_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Hire_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Hire_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Hire_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .PB_PlayerAtt att = 1;
  inline int att_size() const;
  inline void clear_att();
  static const int kAttFieldNumber = 1;
  inline const ::PB_PlayerAtt& att(int index) const;
  inline ::PB_PlayerAtt* mutable_att(int index);
  inline ::PB_PlayerAtt* add_att();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
      att() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
      mutable_att();
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Hire)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt > att_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Hire* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_MoneyTree : public ::google::protobuf::Message {
 public:
  NetProto_MoneyTree();
  virtual ~NetProto_MoneyTree();
  
  NetProto_MoneyTree(const NetProto_MoneyTree& from);
  
  inline NetProto_MoneyTree& operator=(const NetProto_MoneyTree& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_MoneyTree& default_instance();
  
  void Swap(NetProto_MoneyTree* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_MoneyTree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_MoneyTree& from);
  void MergeFrom(const NetProto_MoneyTree& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_MoneyTree_ID ID;
  static const ID GROUPID = NetProto_MoneyTree_ID_GROUPID;
  static const ID UNITID = NetProto_MoneyTree_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_MoneyTree_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_MoneyTree_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_MoneyTree_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_MoneyTree_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_MoneyTree_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_MoneyTree_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_MoneyTree_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_MoneyTree)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_MoneyTree* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_TreasureBox : public ::google::protobuf::Message {
 public:
  NetProto_TreasureBox();
  virtual ~NetProto_TreasureBox();
  
  NetProto_TreasureBox(const NetProto_TreasureBox& from);
  
  inline NetProto_TreasureBox& operator=(const NetProto_TreasureBox& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_TreasureBox& default_instance();
  
  void Swap(NetProto_TreasureBox* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_TreasureBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_TreasureBox& from);
  void MergeFrom(const NetProto_TreasureBox& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_TreasureBox_ID ID;
  static const ID GROUPID = NetProto_TreasureBox_ID_GROUPID;
  static const ID UNITID = NetProto_TreasureBox_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_TreasureBox_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_TreasureBox_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_TreasureBox_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_TreasureBox_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_TreasureBox_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_TreasureBox_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_TreasureBox_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .PB_ItemInfo items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::PB_ItemInfo& items(int index) const;
  inline ::PB_ItemInfo* mutable_items(int index);
  inline ::PB_ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:NetProto_TreasureBox)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_TreasureBox* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FlyPlan : public ::google::protobuf::Message {
 public:
  NetProto_FlyPlan();
  virtual ~NetProto_FlyPlan();
  
  NetProto_FlyPlan(const NetProto_FlyPlan& from);
  
  inline NetProto_FlyPlan& operator=(const NetProto_FlyPlan& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FlyPlan& default_instance();
  
  void Swap(NetProto_FlyPlan* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FlyPlan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FlyPlan& from);
  void MergeFrom(const NetProto_FlyPlan& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FlyPlan_ID ID;
  static const ID GROUPID = NetProto_FlyPlan_ID_GROUPID;
  static const ID UNITID = NetProto_FlyPlan_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FlyPlan_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FlyPlan_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FlyPlan_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FlyPlan_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FlyPlan_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FlyPlan_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FlyPlan_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_FlyPlan)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FlyPlan* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_BlessCome : public ::google::protobuf::Message {
 public:
  NetProto_BlessCome();
  virtual ~NetProto_BlessCome();
  
  NetProto_BlessCome(const NetProto_BlessCome& from);
  
  inline NetProto_BlessCome& operator=(const NetProto_BlessCome& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_BlessCome& default_instance();
  
  void Swap(NetProto_BlessCome* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_BlessCome* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_BlessCome& from);
  void MergeFrom(const NetProto_BlessCome& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_BlessCome_ID ID;
  static const ID GROUPID = NetProto_BlessCome_ID_GROUPID;
  static const ID UNITID = NetProto_BlessCome_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_BlessCome_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_BlessCome_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_BlessCome_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_BlessCome_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_BlessCome_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_BlessCome_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_BlessCome_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_BlessCome)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_BlessCome* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ModifyBlessScore : public ::google::protobuf::Message {
 public:
  NetProto_ModifyBlessScore();
  virtual ~NetProto_ModifyBlessScore();
  
  NetProto_ModifyBlessScore(const NetProto_ModifyBlessScore& from);
  
  inline NetProto_ModifyBlessScore& operator=(const NetProto_ModifyBlessScore& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ModifyBlessScore& default_instance();
  
  void Swap(NetProto_ModifyBlessScore* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ModifyBlessScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ModifyBlessScore& from);
  void MergeFrom(const NetProto_ModifyBlessScore& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ModifyBlessScore_ID ID;
  static const ID GROUPID = NetProto_ModifyBlessScore_ID_GROUPID;
  static const ID UNITID = NetProto_ModifyBlessScore_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ModifyBlessScore_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ModifyBlessScore_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ModifyBlessScore_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ModifyBlessScore_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ModifyBlessScore_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ModifyBlessScore_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ModifyBlessScore_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 bless = 1;
  inline bool has_bless() const;
  inline void clear_bless();
  static const int kBlessFieldNumber = 1;
  inline ::google::protobuf::int32 bless() const;
  inline void set_bless(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ModifyBlessScore)
 private:
  inline void set_has_bless();
  inline void clear_has_bless();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 bless_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ModifyBlessScore* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_TopUpObtRMB : public ::google::protobuf::Message {
 public:
  NetProto_TopUpObtRMB();
  virtual ~NetProto_TopUpObtRMB();
  
  NetProto_TopUpObtRMB(const NetProto_TopUpObtRMB& from);
  
  inline NetProto_TopUpObtRMB& operator=(const NetProto_TopUpObtRMB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_TopUpObtRMB& default_instance();
  
  void Swap(NetProto_TopUpObtRMB* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_TopUpObtRMB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_TopUpObtRMB& from);
  void MergeFrom(const NetProto_TopUpObtRMB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_TopUpObtRMB_ID ID;
  static const ID GROUPID = NetProto_TopUpObtRMB_ID_GROUPID;
  static const ID UNITID = NetProto_TopUpObtRMB_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_TopUpObtRMB_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_TopUpObtRMB_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_TopUpObtRMB_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_TopUpObtRMB_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_TopUpObtRMB_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_TopUpObtRMB_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_TopUpObtRMB_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:NetProto_TopUpObtRMB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_TopUpObtRMB* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_ServerOpenTime : public ::google::protobuf::Message {
 public:
  NetProto_ServerOpenTime();
  virtual ~NetProto_ServerOpenTime();
  
  NetProto_ServerOpenTime(const NetProto_ServerOpenTime& from);
  
  inline NetProto_ServerOpenTime& operator=(const NetProto_ServerOpenTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_ServerOpenTime& default_instance();
  
  void Swap(NetProto_ServerOpenTime* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_ServerOpenTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_ServerOpenTime& from);
  void MergeFrom(const NetProto_ServerOpenTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_ServerOpenTime_ID ID;
  static const ID GROUPID = NetProto_ServerOpenTime_ID_GROUPID;
  static const ID UNITID = NetProto_ServerOpenTime_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_ServerOpenTime_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_ServerOpenTime_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_ServerOpenTime_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_ServerOpenTime_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_ServerOpenTime_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_ServerOpenTime_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_ServerOpenTime_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 serverOpenTime = 1;
  inline bool has_serverOpenTime() const;
  inline void clear_serverOpenTime();
  static const int kServerOpenTimeFieldNumber = 1;
  inline ::google::protobuf::int32 serverOpenTime() const;
  inline void set_serverOpenTime(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_ServerOpenTime)
 private:
  inline void set_has_serverOpenTime();
  inline void clear_has_serverOpenTime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 serverOpenTime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_ServerOpenTime* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_InvateCode : public ::google::protobuf::Message {
 public:
  NetProto_InvateCode();
  virtual ~NetProto_InvateCode();
  
  NetProto_InvateCode(const NetProto_InvateCode& from);
  
  inline NetProto_InvateCode& operator=(const NetProto_InvateCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_InvateCode& default_instance();
  
  void Swap(NetProto_InvateCode* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_InvateCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_InvateCode& from);
  void MergeFrom(const NetProto_InvateCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_InvateCode_ID ID;
  static const ID GROUPID = NetProto_InvateCode_ID_GROUPID;
  static const ID UNITID = NetProto_InvateCode_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_InvateCode_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_InvateCode_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_InvateCode_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_InvateCode_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_InvateCode_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_InvateCode_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_InvateCode_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string othercode = 1;
  inline bool has_othercode() const;
  inline void clear_othercode();
  static const int kOthercodeFieldNumber = 1;
  inline const ::std::string& othercode() const;
  inline void set_othercode(const ::std::string& value);
  inline void set_othercode(const char* value);
  inline void set_othercode(const char* value, size_t size);
  inline ::std::string* mutable_othercode();
  inline ::std::string* release_othercode();
  
  // @@protoc_insertion_point(class_scope:NetProto_InvateCode)
 private:
  inline void set_has_othercode();
  inline void clear_has_othercode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* othercode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_InvateCode* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_UpdateInvateCount : public ::google::protobuf::Message {
 public:
  NetProto_UpdateInvateCount();
  virtual ~NetProto_UpdateInvateCount();
  
  NetProto_UpdateInvateCount(const NetProto_UpdateInvateCount& from);
  
  inline NetProto_UpdateInvateCount& operator=(const NetProto_UpdateInvateCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_UpdateInvateCount& default_instance();
  
  void Swap(NetProto_UpdateInvateCount* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_UpdateInvateCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_UpdateInvateCount& from);
  void MergeFrom(const NetProto_UpdateInvateCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_UpdateInvateCount_ID ID;
  static const ID GROUPID = NetProto_UpdateInvateCount_ID_GROUPID;
  static const ID UNITID = NetProto_UpdateInvateCount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_UpdateInvateCount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_UpdateInvateCount_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_UpdateInvateCount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_UpdateInvateCount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_UpdateInvateCount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_UpdateInvateCount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_UpdateInvateCount_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_UpdateInvateCount)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_UpdateInvateCount* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_CreateFaction : public ::google::protobuf::Message {
 public:
  NetProto_CreateFaction();
  virtual ~NetProto_CreateFaction();
  
  NetProto_CreateFaction(const NetProto_CreateFaction& from);
  
  inline NetProto_CreateFaction& operator=(const NetProto_CreateFaction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_CreateFaction& default_instance();
  
  void Swap(NetProto_CreateFaction* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_CreateFaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_CreateFaction& from);
  void MergeFrom(const NetProto_CreateFaction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_CreateFaction_ID ID;
  static const ID GROUPID = NetProto_CreateFaction_ID_GROUPID;
  static const ID UNITID = NetProto_CreateFaction_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_CreateFaction_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_CreateFaction_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_CreateFaction_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_CreateFaction_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_CreateFaction_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_CreateFaction_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_CreateFaction_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string str = 1;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // optional int32 res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_CreateFaction)
 private:
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_;
  ::google::protobuf::int32 res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_CreateFaction* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DelFaction : public ::google::protobuf::Message {
 public:
  NetProto_DelFaction();
  virtual ~NetProto_DelFaction();
  
  NetProto_DelFaction(const NetProto_DelFaction& from);
  
  inline NetProto_DelFaction& operator=(const NetProto_DelFaction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DelFaction& default_instance();
  
  void Swap(NetProto_DelFaction* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DelFaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DelFaction& from);
  void MergeFrom(const NetProto_DelFaction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DelFaction_ID ID;
  static const ID GROUPID = NetProto_DelFaction_ID_GROUPID;
  static const ID UNITID = NetProto_DelFaction_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DelFaction_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DelFaction_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DelFaction_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DelFaction_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DelFaction_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DelFaction_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DelFaction_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DelFaction)
 private:
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DelFaction* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Donate : public ::google::protobuf::Message {
 public:
  NetProto_Donate();
  virtual ~NetProto_Donate();
  
  NetProto_Donate(const NetProto_Donate& from);
  
  inline NetProto_Donate& operator=(const NetProto_Donate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Donate& default_instance();
  
  void Swap(NetProto_Donate* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Donate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Donate& from);
  void MergeFrom(const NetProto_Donate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Donate_ID ID;
  static const ID GROUPID = NetProto_Donate_ID_GROUPID;
  static const ID UNITID = NetProto_Donate_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Donate_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Donate_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Donate_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Donate_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Donate_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Donate_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Donate_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Donate)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Donate* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionNotice : public ::google::protobuf::Message {
 public:
  NetProto_FactionNotice();
  virtual ~NetProto_FactionNotice();
  
  NetProto_FactionNotice(const NetProto_FactionNotice& from);
  
  inline NetProto_FactionNotice& operator=(const NetProto_FactionNotice& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionNotice& default_instance();
  
  void Swap(NetProto_FactionNotice* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionNotice& from);
  void MergeFrom(const NetProto_FactionNotice& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionNotice_ID ID;
  static const ID GROUPID = NetProto_FactionNotice_ID_GROUPID;
  static const ID UNITID = NetProto_FactionNotice_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionNotice_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionNotice_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionNotice_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionNotice_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionNotice_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionNotice_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionNotice_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string str = 1;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionNotice)
 private:
  inline void set_has_str();
  inline void clear_has_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionNotice* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Designate : public ::google::protobuf::Message {
 public:
  NetProto_Designate();
  virtual ~NetProto_Designate();
  
  NetProto_Designate(const NetProto_Designate& from);
  
  inline NetProto_Designate& operator=(const NetProto_Designate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Designate& default_instance();
  
  void Swap(NetProto_Designate* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Designate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Designate& from);
  void MergeFrom(const NetProto_Designate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Designate_ID ID;
  static const ID GROUPID = NetProto_Designate_ID_GROUPID;
  static const ID UNITID = NetProto_Designate_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Designate_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Designate_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Designate_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Designate_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Designate_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Designate_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Designate_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Designate)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Designate* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AddMem : public ::google::protobuf::Message {
 public:
  NetProto_AddMem();
  virtual ~NetProto_AddMem();
  
  NetProto_AddMem(const NetProto_AddMem& from);
  
  inline NetProto_AddMem& operator=(const NetProto_AddMem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AddMem& default_instance();
  
  void Swap(NetProto_AddMem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AddMem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AddMem& from);
  void MergeFrom(const NetProto_AddMem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AddMem_ID ID;
  static const ID GROUPID = NetProto_AddMem_ID_GROUPID;
  static const ID UNITID = NetProto_AddMem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AddMem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AddMem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AddMem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AddMem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AddMem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AddMem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AddMem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_AddMem)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AddMem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_DelMem : public ::google::protobuf::Message {
 public:
  NetProto_DelMem();
  virtual ~NetProto_DelMem();
  
  NetProto_DelMem(const NetProto_DelMem& from);
  
  inline NetProto_DelMem& operator=(const NetProto_DelMem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_DelMem& default_instance();
  
  void Swap(NetProto_DelMem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_DelMem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_DelMem& from);
  void MergeFrom(const NetProto_DelMem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_DelMem_ID ID;
  static const ID GROUPID = NetProto_DelMem_ID_GROUPID;
  static const ID UNITID = NetProto_DelMem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_DelMem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_DelMem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_DelMem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_DelMem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_DelMem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_DelMem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_DelMem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_DelMem)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_DelMem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Applicant : public ::google::protobuf::Message {
 public:
  NetProto_Applicant();
  virtual ~NetProto_Applicant();
  
  NetProto_Applicant(const NetProto_Applicant& from);
  
  inline NetProto_Applicant& operator=(const NetProto_Applicant& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Applicant& default_instance();
  
  void Swap(NetProto_Applicant* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Applicant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Applicant& from);
  void MergeFrom(const NetProto_Applicant& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Applicant_ID ID;
  static const ID GROUPID = NetProto_Applicant_ID_GROUPID;
  static const ID UNITID = NetProto_Applicant_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Applicant_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Applicant_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Applicant_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Applicant_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Applicant_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Applicant_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Applicant_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string str = 1;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // @@protoc_insertion_point(class_scope:NetProto_Applicant)
 private:
  inline void set_has_str();
  inline void clear_has_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Applicant* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_Guardian : public ::google::protobuf::Message {
 public:
  NetProto_Guardian();
  virtual ~NetProto_Guardian();
  
  NetProto_Guardian(const NetProto_Guardian& from);
  
  inline NetProto_Guardian& operator=(const NetProto_Guardian& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_Guardian& default_instance();
  
  void Swap(NetProto_Guardian* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_Guardian* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_Guardian& from);
  void MergeFrom(const NetProto_Guardian& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_Guardian_ID ID;
  static const ID GROUPID = NetProto_Guardian_ID_GROUPID;
  static const ID UNITID = NetProto_Guardian_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_Guardian_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_Guardian_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_Guardian_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_Guardian_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_Guardian_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_Guardian_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_Guardian_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_Guardian)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_Guardian* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionInfo : public ::google::protobuf::Message {
 public:
  NetProto_FactionInfo();
  virtual ~NetProto_FactionInfo();
  
  NetProto_FactionInfo(const NetProto_FactionInfo& from);
  
  inline NetProto_FactionInfo& operator=(const NetProto_FactionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionInfo& default_instance();
  
  void Swap(NetProto_FactionInfo* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionInfo& from);
  void MergeFrom(const NetProto_FactionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionInfo_ID ID;
  static const ID GROUPID = NetProto_FactionInfo_ID_GROUPID;
  static const ID UNITID = NetProto_FactionInfo_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionInfo_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionInfo_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionInfo_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionInfo_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionInfo_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionInfo_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionInfo_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int64 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);
  
  // optional int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // optional string str = 5;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 5;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 num_;
  ::std::string* str_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionInfo* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionMem : public ::google::protobuf::Message {
 public:
  NetProto_FactionMem();
  virtual ~NetProto_FactionMem();
  
  NetProto_FactionMem(const NetProto_FactionMem& from);
  
  inline NetProto_FactionMem& operator=(const NetProto_FactionMem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionMem& default_instance();
  
  void Swap(NetProto_FactionMem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionMem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionMem& from);
  void MergeFrom(const NetProto_FactionMem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionMem_ID ID;
  static const ID GROUPID = NetProto_FactionMem_ID_GROUPID;
  static const ID UNITID = NetProto_FactionMem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionMem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionMem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionMem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionMem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionMem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionMem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionMem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 contribute = 1;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 1;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 office = 3;
  inline bool has_office() const;
  inline void clear_office();
  static const int kOfficeFieldNumber = 3;
  inline ::google::protobuf::int32 office() const;
  inline void set_office(::google::protobuf::int32 value);
  
  // optional int32 lastLoginTime = 4;
  inline bool has_lastLoginTime() const;
  inline void clear_lastLoginTime();
  static const int kLastLoginTimeFieldNumber = 4;
  inline ::google::protobuf::int32 lastLoginTime() const;
  inline void set_lastLoginTime(::google::protobuf::int32 value);
  
  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int64 roleID = 6;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 6;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionMem)
 private:
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_office();
  inline void clear_has_office();
  inline void set_has_lastLoginTime();
  inline void clear_has_lastLoginTime();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 contribute_;
  ::google::protobuf::int32 office_;
  ::google::protobuf::int32 lastLoginTime_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionMem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionChangeMem : public ::google::protobuf::Message {
 public:
  NetProto_FactionChangeMem();
  virtual ~NetProto_FactionChangeMem();
  
  NetProto_FactionChangeMem(const NetProto_FactionChangeMem& from);
  
  inline NetProto_FactionChangeMem& operator=(const NetProto_FactionChangeMem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionChangeMem& default_instance();
  
  void Swap(NetProto_FactionChangeMem* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionChangeMem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionChangeMem& from);
  void MergeFrom(const NetProto_FactionChangeMem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionChangeMem_ID ID;
  static const ID GROUPID = NetProto_FactionChangeMem_ID_GROUPID;
  static const ID UNITID = NetProto_FactionChangeMem_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionChangeMem_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionChangeMem_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionChangeMem_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionChangeMem_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionChangeMem_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionChangeMem_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionChangeMem_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .NetProto_FactionMem data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::NetProto_FactionMem& data(int index) const;
  inline ::NetProto_FactionMem* mutable_data(int index);
  inline ::NetProto_FactionMem* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem >*
      mutable_data();
  
  // repeated bool flag = 2;
  inline int flag_size() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag(int index) const;
  inline void set_flag(int index, bool value);
  inline void add_flag(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      flag() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_flag();
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionChangeMem)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem > data_;
  ::google::protobuf::RepeatedField< bool > flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionChangeMem* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionGuardian : public ::google::protobuf::Message {
 public:
  NetProto_FactionGuardian();
  virtual ~NetProto_FactionGuardian();
  
  NetProto_FactionGuardian(const NetProto_FactionGuardian& from);
  
  inline NetProto_FactionGuardian& operator=(const NetProto_FactionGuardian& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionGuardian& default_instance();
  
  void Swap(NetProto_FactionGuardian* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionGuardian* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionGuardian& from);
  void MergeFrom(const NetProto_FactionGuardian& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionGuardian_ID ID;
  static const ID GROUPID = NetProto_FactionGuardian_ID_GROUPID;
  static const ID UNITID = NetProto_FactionGuardian_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionGuardian_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionGuardian_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionGuardian_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionGuardian_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionGuardian_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionGuardian_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionGuardian_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline ::google::protobuf::int32 item() const;
  inline void set_item(::google::protobuf::int32 value);
  
  // optional string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionGuardian)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_;
  ::google::protobuf::int32 item_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionGuardian* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionApplicant : public ::google::protobuf::Message {
 public:
  NetProto_FactionApplicant();
  virtual ~NetProto_FactionApplicant();
  
  NetProto_FactionApplicant(const NetProto_FactionApplicant& from);
  
  inline NetProto_FactionApplicant& operator=(const NetProto_FactionApplicant& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionApplicant& default_instance();
  
  void Swap(NetProto_FactionApplicant* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionApplicant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionApplicant& from);
  void MergeFrom(const NetProto_FactionApplicant& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionApplicant_ID ID;
  static const ID GROUPID = NetProto_FactionApplicant_ID_GROUPID;
  static const ID UNITID = NetProto_FactionApplicant_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionApplicant_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionApplicant_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionApplicant_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionApplicant_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionApplicant_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionApplicant_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionApplicant_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 power = 2;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 2;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // optional int32 vip = 3;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 3;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int64 roleID = 5;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 5;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionApplicant)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 power_;
  ::std::string* name_;
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 vip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionApplicant* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionAllApplicant : public ::google::protobuf::Message {
 public:
  NetProto_FactionAllApplicant();
  virtual ~NetProto_FactionAllApplicant();
  
  NetProto_FactionAllApplicant(const NetProto_FactionAllApplicant& from);
  
  inline NetProto_FactionAllApplicant& operator=(const NetProto_FactionAllApplicant& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionAllApplicant& default_instance();
  
  void Swap(NetProto_FactionAllApplicant* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionAllApplicant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionAllApplicant& from);
  void MergeFrom(const NetProto_FactionAllApplicant& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionAllApplicant_ID ID;
  static const ID GROUPID = NetProto_FactionAllApplicant_ID_GROUPID;
  static const ID UNITID = NetProto_FactionAllApplicant_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionAllApplicant_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionAllApplicant_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionAllApplicant_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionAllApplicant_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionAllApplicant_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionAllApplicant_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionAllApplicant_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .NetProto_FactionApplicant data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::NetProto_FactionApplicant& data(int index) const;
  inline ::NetProto_FactionApplicant* mutable_data(int index);
  inline ::NetProto_FactionApplicant* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_FactionApplicant >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_FactionApplicant >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionAllApplicant)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NetProto_FactionApplicant > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionAllApplicant* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_FactionList : public ::google::protobuf::Message {
 public:
  NetProto_FactionList();
  virtual ~NetProto_FactionList();
  
  NetProto_FactionList(const NetProto_FactionList& from);
  
  inline NetProto_FactionList& operator=(const NetProto_FactionList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_FactionList& default_instance();
  
  void Swap(NetProto_FactionList* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_FactionList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_FactionList& from);
  void MergeFrom(const NetProto_FactionList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_FactionList_ID ID;
  static const ID GROUPID = NetProto_FactionList_ID_GROUPID;
  static const ID UNITID = NetProto_FactionList_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_FactionList_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_FactionList_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_FactionList_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_FactionList_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_FactionList_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_FactionList_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_FactionList_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .NetProto_FactionInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::NetProto_FactionInfo& info(int index) const;
  inline ::NetProto_FactionInfo* mutable_info(int index);
  inline ::NetProto_FactionInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_FactionInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_FactionInfo >*
      mutable_info();
  
  // repeated string str = 2;
  inline int str_size() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str(int index) const;
  inline ::std::string* mutable_str(int index);
  inline void set_str(int index, const ::std::string& value);
  inline void set_str(int index, const char* value);
  inline void set_str(int index, const char* value, size_t size);
  inline ::std::string* add_str();
  inline void add_str(const ::std::string& value);
  inline void add_str(const char* value);
  inline void add_str(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& str() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_str();
  
  // @@protoc_insertion_point(class_scope:NetProto_FactionList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NetProto_FactionInfo > info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> str_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_FactionList* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AcceptToFaction : public ::google::protobuf::Message {
 public:
  NetProto_AcceptToFaction();
  virtual ~NetProto_AcceptToFaction();
  
  NetProto_AcceptToFaction(const NetProto_AcceptToFaction& from);
  
  inline NetProto_AcceptToFaction& operator=(const NetProto_AcceptToFaction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AcceptToFaction& default_instance();
  
  void Swap(NetProto_AcceptToFaction* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AcceptToFaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AcceptToFaction& from);
  void MergeFrom(const NetProto_AcceptToFaction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AcceptToFaction_ID ID;
  static const ID GROUPID = NetProto_AcceptToFaction_ID_GROUPID;
  static const ID UNITID = NetProto_AcceptToFaction_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AcceptToFaction_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AcceptToFaction_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AcceptToFaction_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AcceptToFaction_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AcceptToFaction_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AcceptToFaction_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AcceptToFaction_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string factionName = 1;
  inline bool has_factionName() const;
  inline void clear_factionName();
  static const int kFactionNameFieldNumber = 1;
  inline const ::std::string& factionName() const;
  inline void set_factionName(const ::std::string& value);
  inline void set_factionName(const char* value);
  inline void set_factionName(const char* value, size_t size);
  inline ::std::string* mutable_factionName();
  inline ::std::string* release_factionName();
  
  // @@protoc_insertion_point(class_scope:NetProto_AcceptToFaction)
 private:
  inline void set_has_factionName();
  inline void clear_has_factionName();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* factionName_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AcceptToFaction* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_AsyncStatistics : public ::google::protobuf::Message {
 public:
  NetProto_AsyncStatistics();
  virtual ~NetProto_AsyncStatistics();
  
  NetProto_AsyncStatistics(const NetProto_AsyncStatistics& from);
  
  inline NetProto_AsyncStatistics& operator=(const NetProto_AsyncStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_AsyncStatistics& default_instance();
  
  void Swap(NetProto_AsyncStatistics* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_AsyncStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_AsyncStatistics& from);
  void MergeFrom(const NetProto_AsyncStatistics& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_AsyncStatistics_ID ID;
  static const ID GROUPID = NetProto_AsyncStatistics_ID_GROUPID;
  static const ID UNITID = NetProto_AsyncStatistics_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_AsyncStatistics_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_AsyncStatistics_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_AsyncStatistics_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_AsyncStatistics_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_AsyncStatistics_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_AsyncStatistics_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_AsyncStatistics_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional bool isFirstIN = 1;
  inline bool has_isFirstIN() const;
  inline void clear_isFirstIN();
  static const int kIsFirstINFieldNumber = 1;
  inline bool isFirstIN() const;
  inline void set_isFirstIN(bool value);
  
  // optional bool beginAutoInit = 2;
  inline bool has_beginAutoInit() const;
  inline void clear_beginAutoInit();
  static const int kBeginAutoInitFieldNumber = 2;
  inline bool beginAutoInit() const;
  inline void set_beginAutoInit(bool value);
  
  // optional bool beginDecompress = 3;
  inline bool has_beginDecompress() const;
  inline void clear_beginDecompress();
  static const int kBeginDecompressFieldNumber = 3;
  inline bool beginDecompress() const;
  inline void set_beginDecompress(bool value);
  
  // optional int32 decompressCur = 4;
  inline bool has_decompressCur() const;
  inline void clear_decompressCur();
  static const int kDecompressCurFieldNumber = 4;
  inline ::google::protobuf::int32 decompressCur() const;
  inline void set_decompressCur(::google::protobuf::int32 value);
  
  // optional int32 decompressTotal = 5;
  inline bool has_decompressTotal() const;
  inline void clear_decompressTotal();
  static const int kDecompressTotalFieldNumber = 5;
  inline ::google::protobuf::int32 decompressTotal() const;
  inline void set_decompressTotal(::google::protobuf::int32 value);
  
  // optional bool beginInit = 6;
  inline bool has_beginInit() const;
  inline void clear_beginInit();
  static const int kBeginInitFieldNumber = 6;
  inline bool beginInit() const;
  inline void set_beginInit(bool value);
  
  // optional bool checkVersion = 7;
  inline bool has_checkVersion() const;
  inline void clear_checkVersion();
  static const int kCheckVersionFieldNumber = 7;
  inline bool checkVersion() const;
  inline void set_checkVersion(bool value);
  
  // optional bool beginDownload = 8;
  inline bool has_beginDownload() const;
  inline void clear_beginDownload();
  static const int kBeginDownloadFieldNumber = 8;
  inline bool beginDownload() const;
  inline void set_beginDownload(bool value);
  
  // optional string md5 = 9;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 9;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  
  // repeated int32 needDownload = 10;
  inline int needDownload_size() const;
  inline void clear_needDownload();
  static const int kNeedDownloadFieldNumber = 10;
  inline ::google::protobuf::int32 needDownload(int index) const;
  inline void set_needDownload(int index, ::google::protobuf::int32 value);
  inline void add_needDownload(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      needDownload() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_needDownload();
  
  // optional int32 downloadFile = 11;
  inline bool has_downloadFile() const;
  inline void clear_downloadFile();
  static const int kDownloadFileFieldNumber = 11;
  inline ::google::protobuf::int32 downloadFile() const;
  inline void set_downloadFile(::google::protobuf::int32 value);
  
  // optional int32 overDownloadFile = 12;
  inline bool has_overDownloadFile() const;
  inline void clear_overDownloadFile();
  static const int kOverDownloadFileFieldNumber = 12;
  inline ::google::protobuf::int32 overDownloadFile() const;
  inline void set_overDownloadFile(::google::protobuf::int32 value);
  
  // optional bool endDownload = 13;
  inline bool has_endDownload() const;
  inline void clear_endDownload();
  static const int kEndDownloadFieldNumber = 13;
  inline bool endDownload() const;
  inline void set_endDownload(bool value);
  
  // optional bool beginLoad = 14;
  inline bool has_beginLoad() const;
  inline void clear_beginLoad();
  static const int kBeginLoadFieldNumber = 14;
  inline bool beginLoad() const;
  inline void set_beginLoad(bool value);
  
  // optional bool endLoad = 15;
  inline bool has_endLoad() const;
  inline void clear_endLoad();
  static const int kEndLoadFieldNumber = 15;
  inline bool endLoad() const;
  inline void set_endLoad(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_AsyncStatistics)
 private:
  inline void set_has_isFirstIN();
  inline void clear_has_isFirstIN();
  inline void set_has_beginAutoInit();
  inline void clear_has_beginAutoInit();
  inline void set_has_beginDecompress();
  inline void clear_has_beginDecompress();
  inline void set_has_decompressCur();
  inline void clear_has_decompressCur();
  inline void set_has_decompressTotal();
  inline void clear_has_decompressTotal();
  inline void set_has_beginInit();
  inline void clear_has_beginInit();
  inline void set_has_checkVersion();
  inline void clear_has_checkVersion();
  inline void set_has_beginDownload();
  inline void clear_has_beginDownload();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_downloadFile();
  inline void clear_has_downloadFile();
  inline void set_has_overDownloadFile();
  inline void clear_has_overDownloadFile();
  inline void set_has_endDownload();
  inline void clear_has_endDownload();
  inline void set_has_beginLoad();
  inline void clear_has_beginLoad();
  inline void set_has_endLoad();
  inline void clear_has_endLoad();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool isFirstIN_;
  bool beginAutoInit_;
  bool beginDecompress_;
  bool beginInit_;
  ::google::protobuf::int32 decompressCur_;
  ::std::string* md5_;
  ::google::protobuf::int32 decompressTotal_;
  bool checkVersion_;
  bool beginDownload_;
  bool endDownload_;
  bool beginLoad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > needDownload_;
  ::google::protobuf::int32 downloadFile_;
  ::google::protobuf::int32 overDownloadFile_;
  bool endLoad_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_AsyncStatistics* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_StatisticsAGSLoadScene : public ::google::protobuf::Message {
 public:
  NetProto_StatisticsAGSLoadScene();
  virtual ~NetProto_StatisticsAGSLoadScene();
  
  NetProto_StatisticsAGSLoadScene(const NetProto_StatisticsAGSLoadScene& from);
  
  inline NetProto_StatisticsAGSLoadScene& operator=(const NetProto_StatisticsAGSLoadScene& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_StatisticsAGSLoadScene& default_instance();
  
  void Swap(NetProto_StatisticsAGSLoadScene* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_StatisticsAGSLoadScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_StatisticsAGSLoadScene& from);
  void MergeFrom(const NetProto_StatisticsAGSLoadScene& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_StatisticsAGSLoadScene_ID ID;
  static const ID GROUPID = NetProto_StatisticsAGSLoadScene_ID_GROUPID;
  static const ID UNITID = NetProto_StatisticsAGSLoadScene_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_StatisticsAGSLoadScene_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_StatisticsAGSLoadScene_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_StatisticsAGSLoadScene_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_StatisticsAGSLoadScene_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_StatisticsAGSLoadScene_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_StatisticsAGSLoadScene_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_StatisticsAGSLoadScene_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional bool after = 1;
  inline bool has_after() const;
  inline void clear_after();
  static const int kAfterFieldNumber = 1;
  inline bool after() const;
  inline void set_after(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_StatisticsAGSLoadScene)
 private:
  inline void set_has_after();
  inline void clear_has_after();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool after_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_StatisticsAGSLoadScene* default_instance_;
};
// -------------------------------------------------------------------

class NetProto_StatisticsAGSLoadNPC : public ::google::protobuf::Message {
 public:
  NetProto_StatisticsAGSLoadNPC();
  virtual ~NetProto_StatisticsAGSLoadNPC();
  
  NetProto_StatisticsAGSLoadNPC(const NetProto_StatisticsAGSLoadNPC& from);
  
  inline NetProto_StatisticsAGSLoadNPC& operator=(const NetProto_StatisticsAGSLoadNPC& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetProto_StatisticsAGSLoadNPC& default_instance();
  
  void Swap(NetProto_StatisticsAGSLoadNPC* other);
  
  // implements Message ----------------------------------------------
  
  NetProto_StatisticsAGSLoadNPC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetProto_StatisticsAGSLoadNPC& from);
  void MergeFrom(const NetProto_StatisticsAGSLoadNPC& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef NetProto_StatisticsAGSLoadNPC_ID ID;
  static const ID GROUPID = NetProto_StatisticsAGSLoadNPC_ID_GROUPID;
  static const ID UNITID = NetProto_StatisticsAGSLoadNPC_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return NetProto_StatisticsAGSLoadNPC_ID_IsValid(value);
  }
  static const ID ID_MIN =
    NetProto_StatisticsAGSLoadNPC_ID_ID_MIN;
  static const ID ID_MAX =
    NetProto_StatisticsAGSLoadNPC_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    NetProto_StatisticsAGSLoadNPC_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return NetProto_StatisticsAGSLoadNPC_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return NetProto_StatisticsAGSLoadNPC_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return NetProto_StatisticsAGSLoadNPC_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional bool after = 2;
  inline bool has_after() const;
  inline void clear_after();
  static const int kAfterFieldNumber = 2;
  inline bool after() const;
  inline void set_after(bool value);
  
  // @@protoc_insertion_point(class_scope:NetProto_StatisticsAGSLoadNPC)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_after();
  inline void clear_has_after();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  bool after_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_NetProto_2eproto();
  friend void protobuf_AssignDesc_NetProto_2eproto();
  friend void protobuf_ShutdownFile_NetProto_2eproto();
  
  void InitAsDefaultInstance();
  static NetProto_StatisticsAGSLoadNPC* default_instance_;
};
// ===================================================================


// ===================================================================

// NetProto_ClientException

// optional string output = 1;
inline bool NetProto_ClientException::has_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ClientException::set_has_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ClientException::clear_has_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ClientException::clear_output() {
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    output_->clear();
  }
  clear_has_output();
}
inline const ::std::string& NetProto_ClientException::output() const {
  return *output_;
}
inline void NetProto_ClientException::set_output(const ::std::string& value) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  output_->assign(value);
}
inline void NetProto_ClientException::set_output(const char* value) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  output_->assign(value);
}
inline void NetProto_ClientException::set_output(const char* value, size_t size) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_ClientException::mutable_output() {
  set_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    output_ = new ::std::string;
  }
  return output_;
}
inline ::std::string* NetProto_ClientException::release_output() {
  clear_has_output();
  if (output_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = output_;
    output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stackTrace = 2;
inline bool NetProto_ClientException::has_stackTrace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ClientException::set_has_stackTrace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ClientException::clear_has_stackTrace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ClientException::clear_stackTrace() {
  if (stackTrace_ != &::google::protobuf::internal::kEmptyString) {
    stackTrace_->clear();
  }
  clear_has_stackTrace();
}
inline const ::std::string& NetProto_ClientException::stackTrace() const {
  return *stackTrace_;
}
inline void NetProto_ClientException::set_stackTrace(const ::std::string& value) {
  set_has_stackTrace();
  if (stackTrace_ == &::google::protobuf::internal::kEmptyString) {
    stackTrace_ = new ::std::string;
  }
  stackTrace_->assign(value);
}
inline void NetProto_ClientException::set_stackTrace(const char* value) {
  set_has_stackTrace();
  if (stackTrace_ == &::google::protobuf::internal::kEmptyString) {
    stackTrace_ = new ::std::string;
  }
  stackTrace_->assign(value);
}
inline void NetProto_ClientException::set_stackTrace(const char* value, size_t size) {
  set_has_stackTrace();
  if (stackTrace_ == &::google::protobuf::internal::kEmptyString) {
    stackTrace_ = new ::std::string;
  }
  stackTrace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_ClientException::mutable_stackTrace() {
  set_has_stackTrace();
  if (stackTrace_ == &::google::protobuf::internal::kEmptyString) {
    stackTrace_ = new ::std::string;
  }
  return stackTrace_;
}
inline ::std::string* NetProto_ClientException::release_stackTrace() {
  clear_has_stackTrace();
  if (stackTrace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stackTrace_;
    stackTrace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string type = 3;
inline bool NetProto_ClientException::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_ClientException::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_ClientException::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_ClientException::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& NetProto_ClientException::type() const {
  return *type_;
}
inline void NetProto_ClientException::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void NetProto_ClientException::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void NetProto_ClientException::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_ClientException::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* NetProto_ClientException::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_Heartbeat

// -------------------------------------------------------------------

// NetProto_Login

// optional string account = 1;
inline bool NetProto_Login::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Login::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Login::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Login::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& NetProto_Login::account() const {
  return *account_;
}
inline void NetProto_Login::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_Login::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_Login::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* NetProto_Login::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 2;
inline bool NetProto_Login::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Login::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Login::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Login::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& NetProto_Login::password() const {
  return *password_;
}
inline void NetProto_Login::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NetProto_Login::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NetProto_Login::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* NetProto_Login::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 version = 3;
inline bool NetProto_Login::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Login::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Login::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Login::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 NetProto_Login::version() const {
  return version_;
}
inline void NetProto_Login::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
}

// optional string platform = 4;
inline bool NetProto_Login::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Login::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Login::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Login::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& NetProto_Login::platform() const {
  return *platform_;
}
inline void NetProto_Login::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void NetProto_Login::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void NetProto_Login::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* NetProto_Login::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string deviceID = 5;
inline bool NetProto_Login::has_deviceID() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_Login::set_has_deviceID() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_Login::clear_has_deviceID() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_Login::clear_deviceID() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    deviceID_->clear();
  }
  clear_has_deviceID();
}
inline const ::std::string& NetProto_Login::deviceID() const {
  return *deviceID_;
}
inline void NetProto_Login::set_deviceID(const ::std::string& value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_Login::set_deviceID(const char* value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_Login::set_deviceID(const char* value, size_t size) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_deviceID() {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  return deviceID_;
}
inline ::std::string* NetProto_Login::release_deviceID() {
  clear_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceID_;
    deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string idfa = 6;
inline bool NetProto_Login::has_idfa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_Login::set_has_idfa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_Login::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_Login::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& NetProto_Login::idfa() const {
  return *idfa_;
}
inline void NetProto_Login::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_Login::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_Login::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  return idfa_;
}
inline ::std::string* NetProto_Login::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string osversion = 7;
inline bool NetProto_Login::has_osversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_Login::set_has_osversion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_Login::clear_has_osversion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_Login::clear_osversion() {
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    osversion_->clear();
  }
  clear_has_osversion();
}
inline const ::std::string& NetProto_Login::osversion() const {
  return *osversion_;
}
inline void NetProto_Login::set_osversion(const ::std::string& value) {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  osversion_->assign(value);
}
inline void NetProto_Login::set_osversion(const char* value) {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  osversion_->assign(value);
}
inline void NetProto_Login::set_osversion(const char* value, size_t size) {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  osversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_osversion() {
  set_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    osversion_ = new ::std::string;
  }
  return osversion_;
}
inline ::std::string* NetProto_Login::release_osversion() {
  clear_has_osversion();
  if (osversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = osversion_;
    osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string phonetype = 8;
inline bool NetProto_Login::has_phonetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_Login::set_has_phonetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_Login::clear_has_phonetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_Login::clear_phonetype() {
  if (phonetype_ != &::google::protobuf::internal::kEmptyString) {
    phonetype_->clear();
  }
  clear_has_phonetype();
}
inline const ::std::string& NetProto_Login::phonetype() const {
  return *phonetype_;
}
inline void NetProto_Login::set_phonetype(const ::std::string& value) {
  set_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    phonetype_ = new ::std::string;
  }
  phonetype_->assign(value);
}
inline void NetProto_Login::set_phonetype(const char* value) {
  set_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    phonetype_ = new ::std::string;
  }
  phonetype_->assign(value);
}
inline void NetProto_Login::set_phonetype(const char* value, size_t size) {
  set_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    phonetype_ = new ::std::string;
  }
  phonetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_phonetype() {
  set_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    phonetype_ = new ::std::string;
  }
  return phonetype_;
}
inline ::std::string* NetProto_Login::release_phonetype() {
  clear_has_phonetype();
  if (phonetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phonetype_;
    phonetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string imei = 9;
inline bool NetProto_Login::has_imei() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetProto_Login::set_has_imei() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetProto_Login::clear_has_imei() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetProto_Login::clear_imei() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& NetProto_Login::imei() const {
  return *imei_;
}
inline void NetProto_Login::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void NetProto_Login::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void NetProto_Login::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  return imei_;
}
inline ::std::string* NetProto_Login::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string addTime = 10;
inline bool NetProto_Login::has_addTime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NetProto_Login::set_has_addTime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NetProto_Login::clear_has_addTime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NetProto_Login::clear_addTime() {
  if (addTime_ != &::google::protobuf::internal::kEmptyString) {
    addTime_->clear();
  }
  clear_has_addTime();
}
inline const ::std::string& NetProto_Login::addTime() const {
  return *addTime_;
}
inline void NetProto_Login::set_addTime(const ::std::string& value) {
  set_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    addTime_ = new ::std::string;
  }
  addTime_->assign(value);
}
inline void NetProto_Login::set_addTime(const char* value) {
  set_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    addTime_ = new ::std::string;
  }
  addTime_->assign(value);
}
inline void NetProto_Login::set_addTime(const char* value, size_t size) {
  set_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    addTime_ = new ::std::string;
  }
  addTime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_addTime() {
  set_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    addTime_ = new ::std::string;
  }
  return addTime_;
}
inline ::std::string* NetProto_Login::release_addTime() {
  clear_has_addTime();
  if (addTime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addTime_;
    addTime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string deviceAddTime = 11;
inline bool NetProto_Login::has_deviceAddTime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NetProto_Login::set_has_deviceAddTime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NetProto_Login::clear_has_deviceAddTime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NetProto_Login::clear_deviceAddTime() {
  if (deviceAddTime_ != &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_->clear();
  }
  clear_has_deviceAddTime();
}
inline const ::std::string& NetProto_Login::deviceAddTime() const {
  return *deviceAddTime_;
}
inline void NetProto_Login::set_deviceAddTime(const ::std::string& value) {
  set_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_ = new ::std::string;
  }
  deviceAddTime_->assign(value);
}
inline void NetProto_Login::set_deviceAddTime(const char* value) {
  set_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_ = new ::std::string;
  }
  deviceAddTime_->assign(value);
}
inline void NetProto_Login::set_deviceAddTime(const char* value, size_t size) {
  set_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_ = new ::std::string;
  }
  deviceAddTime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_deviceAddTime() {
  set_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    deviceAddTime_ = new ::std::string;
  }
  return deviceAddTime_;
}
inline ::std::string* NetProto_Login::release_deviceAddTime() {
  clear_has_deviceAddTime();
  if (deviceAddTime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceAddTime_;
    deviceAddTime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string activateKey = 12;
inline bool NetProto_Login::has_activateKey() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NetProto_Login::set_has_activateKey() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NetProto_Login::clear_has_activateKey() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NetProto_Login::clear_activateKey() {
  if (activateKey_ != &::google::protobuf::internal::kEmptyString) {
    activateKey_->clear();
  }
  clear_has_activateKey();
}
inline const ::std::string& NetProto_Login::activateKey() const {
  return *activateKey_;
}
inline void NetProto_Login::set_activateKey(const ::std::string& value) {
  set_has_activateKey();
  if (activateKey_ == &::google::protobuf::internal::kEmptyString) {
    activateKey_ = new ::std::string;
  }
  activateKey_->assign(value);
}
inline void NetProto_Login::set_activateKey(const char* value) {
  set_has_activateKey();
  if (activateKey_ == &::google::protobuf::internal::kEmptyString) {
    activateKey_ = new ::std::string;
  }
  activateKey_->assign(value);
}
inline void NetProto_Login::set_activateKey(const char* value, size_t size) {
  set_has_activateKey();
  if (activateKey_ == &::google::protobuf::internal::kEmptyString) {
    activateKey_ = new ::std::string;
  }
  activateKey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_activateKey() {
  set_has_activateKey();
  if (activateKey_ == &::google::protobuf::internal::kEmptyString) {
    activateKey_ = new ::std::string;
  }
  return activateKey_;
}
inline ::std::string* NetProto_Login::release_activateKey() {
  clear_has_activateKey();
  if (activateKey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activateKey_;
    activateKey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool loginLater = 13;
inline bool NetProto_Login::has_loginLater() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NetProto_Login::set_has_loginLater() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NetProto_Login::clear_has_loginLater() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NetProto_Login::clear_loginLater() {
  loginLater_ = false;
  clear_has_loginLater();
}
inline bool NetProto_Login::loginLater() const {
  return loginLater_;
}
inline void NetProto_Login::set_loginLater(bool value) {
  set_has_loginLater();
  loginLater_ = value;
}

// optional string session_id = 14;
inline bool NetProto_Login::has_session_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NetProto_Login::set_has_session_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NetProto_Login::clear_has_session_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NetProto_Login::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& NetProto_Login::session_id() const {
  return *session_id_;
}
inline void NetProto_Login::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void NetProto_Login::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void NetProto_Login::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* NetProto_Login::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string session_type = 15;
inline bool NetProto_Login::has_session_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NetProto_Login::set_has_session_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NetProto_Login::clear_has_session_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NetProto_Login::clear_session_type() {
  if (session_type_ != &::google::protobuf::internal::kEmptyString) {
    session_type_->clear();
  }
  clear_has_session_type();
}
inline const ::std::string& NetProto_Login::session_type() const {
  return *session_type_;
}
inline void NetProto_Login::set_session_type(const ::std::string& value) {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  session_type_->assign(value);
}
inline void NetProto_Login::set_session_type(const char* value) {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  session_type_->assign(value);
}
inline void NetProto_Login::set_session_type(const char* value, size_t size) {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  session_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_session_type() {
  set_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    session_type_ = new ::std::string;
  }
  return session_type_;
}
inline ::std::string* NetProto_Login::release_session_type() {
  clear_has_session_type();
  if (session_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_type_;
    session_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string openid = 16;
inline bool NetProto_Login::has_openid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NetProto_Login::set_has_openid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NetProto_Login::clear_has_openid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NetProto_Login::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& NetProto_Login::openid() const {
  return *openid_;
}
inline void NetProto_Login::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void NetProto_Login::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void NetProto_Login::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* NetProto_Login::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string openkey = 17;
inline bool NetProto_Login::has_openkey() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NetProto_Login::set_has_openkey() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NetProto_Login::clear_has_openkey() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NetProto_Login::clear_openkey() {
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    openkey_->clear();
  }
  clear_has_openkey();
}
inline const ::std::string& NetProto_Login::openkey() const {
  return *openkey_;
}
inline void NetProto_Login::set_openkey(const ::std::string& value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void NetProto_Login::set_openkey(const char* value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void NetProto_Login::set_openkey(const char* value, size_t size) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_openkey() {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  return openkey_;
}
inline ::std::string* NetProto_Login::release_openkey() {
  clear_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openkey_;
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pay_token = 18;
inline bool NetProto_Login::has_pay_token() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NetProto_Login::set_has_pay_token() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NetProto_Login::clear_has_pay_token() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NetProto_Login::clear_pay_token() {
  if (pay_token_ != &::google::protobuf::internal::kEmptyString) {
    pay_token_->clear();
  }
  clear_has_pay_token();
}
inline const ::std::string& NetProto_Login::pay_token() const {
  return *pay_token_;
}
inline void NetProto_Login::set_pay_token(const ::std::string& value) {
  set_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    pay_token_ = new ::std::string;
  }
  pay_token_->assign(value);
}
inline void NetProto_Login::set_pay_token(const char* value) {
  set_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    pay_token_ = new ::std::string;
  }
  pay_token_->assign(value);
}
inline void NetProto_Login::set_pay_token(const char* value, size_t size) {
  set_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    pay_token_ = new ::std::string;
  }
  pay_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_pay_token() {
  set_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    pay_token_ = new ::std::string;
  }
  return pay_token_;
}
inline ::std::string* NetProto_Login::release_pay_token() {
  clear_has_pay_token();
  if (pay_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pay_token_;
    pay_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pf = 19;
inline bool NetProto_Login::has_pf() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NetProto_Login::set_has_pf() {
  _has_bits_[0] |= 0x00040000u;
}
inline void NetProto_Login::clear_has_pf() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void NetProto_Login::clear_pf() {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    pf_->clear();
  }
  clear_has_pf();
}
inline const ::std::string& NetProto_Login::pf() const {
  return *pf_;
}
inline void NetProto_Login::set_pf(const ::std::string& value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void NetProto_Login::set_pf(const char* value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void NetProto_Login::set_pf(const char* value, size_t size) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_pf() {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  return pf_;
}
inline ::std::string* NetProto_Login::release_pf() {
  clear_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pf_;
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pfkey = 20;
inline bool NetProto_Login::has_pfkey() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NetProto_Login::set_has_pfkey() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NetProto_Login::clear_has_pfkey() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NetProto_Login::clear_pfkey() {
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    pfkey_->clear();
  }
  clear_has_pfkey();
}
inline const ::std::string& NetProto_Login::pfkey() const {
  return *pfkey_;
}
inline void NetProto_Login::set_pfkey(const ::std::string& value) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(value);
}
inline void NetProto_Login::set_pfkey(const char* value) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(value);
}
inline void NetProto_Login::set_pfkey(const char* value, size_t size) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Login::mutable_pfkey() {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  return pfkey_;
}
inline ::std::string* NetProto_Login::release_pfkey() {
  clear_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pfkey_;
    pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_LoginResult

// optional int32 id = 1;
inline bool NetProto_LoginResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_LoginResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_LoginResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_LoginResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_LoginResult::id() const {
  return id_;
}
inline void NetProto_LoginResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 serverOpenTime = 2;
inline bool NetProto_LoginResult::has_serverOpenTime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_LoginResult::set_has_serverOpenTime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_LoginResult::clear_has_serverOpenTime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_LoginResult::clear_serverOpenTime() {
  serverOpenTime_ = 0;
  clear_has_serverOpenTime();
}
inline ::google::protobuf::int32 NetProto_LoginResult::serverOpenTime() const {
  return serverOpenTime_;
}
inline void NetProto_LoginResult::set_serverOpenTime(::google::protobuf::int32 value) {
  set_has_serverOpenTime();
  serverOpenTime_ = value;
}

// -------------------------------------------------------------------

// NetProto_Logout

// optional int32 id = 1;
inline bool NetProto_Logout::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Logout::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Logout::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Logout::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Logout::id() const {
  return id_;
}
inline void NetProto_Logout::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_SelectRole

// optional int32 id = 1;
inline bool NetProto_SelectRole::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SelectRole::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SelectRole::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SelectRole::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_SelectRole::id() const {
  return id_;
}
inline void NetProto_SelectRole::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_CreateRole

// optional .PB_ProfessionInfo.Type type = 1;
inline bool NetProto_CreateRole::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_CreateRole::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_CreateRole::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_CreateRole::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PB_ProfessionInfo_Type NetProto_CreateRole::type() const {
  return static_cast< ::PB_ProfessionInfo_Type >(type_);
}
inline void NetProto_CreateRole::set_type(::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string name = 2;
inline bool NetProto_CreateRole::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_CreateRole::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_CreateRole::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_CreateRole::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetProto_CreateRole::name() const {
  return *name_;
}
inline void NetProto_CreateRole::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_CreateRole::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_CreateRole::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_CreateRole::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetProto_CreateRole::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool male = 3;
inline bool NetProto_CreateRole::has_male() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_CreateRole::set_has_male() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_CreateRole::clear_has_male() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_CreateRole::clear_male() {
  male_ = false;
  clear_has_male();
}
inline bool NetProto_CreateRole::male() const {
  return male_;
}
inline void NetProto_CreateRole::set_male(bool value) {
  set_has_male();
  male_ = value;
}

// -------------------------------------------------------------------

// NetProto_ServerTime

// optional int64 time = 1;
inline bool NetProto_ServerTime::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ServerTime::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ServerTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ServerTime::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 NetProto_ServerTime::time() const {
  return time_;
}
inline void NetProto_ServerTime::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 cur = 2;
inline bool NetProto_ServerTime::has_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ServerTime::set_has_cur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ServerTime::clear_has_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ServerTime::clear_cur() {
  cur_ = 0;
  clear_has_cur();
}
inline ::google::protobuf::int32 NetProto_ServerTime::cur() const {
  return cur_;
}
inline void NetProto_ServerTime::set_cur(::google::protobuf::int32 value) {
  set_has_cur();
  cur_ = value;
}

// -------------------------------------------------------------------

// NetProto_RoleList

// repeated .PB_PlayerAtt roles = 1;
inline int NetProto_RoleList::roles_size() const {
  return roles_.size();
}
inline void NetProto_RoleList::clear_roles() {
  roles_.Clear();
}
inline const ::PB_PlayerAtt& NetProto_RoleList::roles(int index) const {
  return roles_.Get(index);
}
inline ::PB_PlayerAtt* NetProto_RoleList::mutable_roles(int index) {
  return roles_.Mutable(index);
}
inline ::PB_PlayerAtt* NetProto_RoleList::add_roles() {
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
NetProto_RoleList::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
NetProto_RoleList::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// NetProto_DeleteRole

// optional int32 id = 1;
inline bool NetProto_DeleteRole::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DeleteRole::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DeleteRole::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DeleteRole::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_DeleteRole::id() const {
  return id_;
}
inline void NetProto_DeleteRole::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_ReLogin

// optional string account = 1;
inline bool NetProto_ReLogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ReLogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ReLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ReLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& NetProto_ReLogin::account() const {
  return *account_;
}
inline void NetProto_ReLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_ReLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_ReLogin::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_ReLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* NetProto_ReLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 2;
inline bool NetProto_ReLogin::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ReLogin::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ReLogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ReLogin::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& NetProto_ReLogin::password() const {
  return *password_;
}
inline void NetProto_ReLogin::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NetProto_ReLogin::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NetProto_ReLogin::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_ReLogin::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* NetProto_ReLogin::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string platform = 3;
inline bool NetProto_ReLogin::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_ReLogin::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_ReLogin::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_ReLogin::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& NetProto_ReLogin::platform() const {
  return *platform_;
}
inline void NetProto_ReLogin::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void NetProto_ReLogin::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void NetProto_ReLogin::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_ReLogin::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* NetProto_ReLogin::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_ReLoginResult

// optional int32 id = 1;
inline bool NetProto_ReLoginResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ReLoginResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ReLoginResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ReLoginResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ReLoginResult::id() const {
  return id_;
}
inline void NetProto_ReLoginResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_Rank

// optional .NetProto_Rank.Type type = 1;
inline bool NetProto_Rank::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Rank::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Rank::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Rank::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::NetProto_Rank_Type NetProto_Rank::type() const {
  return static_cast< ::NetProto_Rank_Type >(type_);
}
inline void NetProto_Rank::set_type(::NetProto_Rank_Type value) {
  GOOGLE_DCHECK(::NetProto_Rank_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .RecordInfo rank = 2;
inline int NetProto_Rank::rank_size() const {
  return rank_.size();
}
inline void NetProto_Rank::clear_rank() {
  rank_.Clear();
}
inline const ::RecordInfo& NetProto_Rank::rank(int index) const {
  return rank_.Get(index);
}
inline ::RecordInfo* NetProto_Rank::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::RecordInfo* NetProto_Rank::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
NetProto_Rank::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
NetProto_Rank::mutable_rank() {
  return &rank_;
}

// optional int32 range = 4;
inline bool NetProto_Rank::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Rank::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Rank::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Rank::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline ::google::protobuf::int32 NetProto_Rank::range() const {
  return range_;
}
inline void NetProto_Rank::set_range(::google::protobuf::int32 value) {
  set_has_range();
  range_ = value;
}

// optional .RecordInfo finalKiller = 5;
inline bool NetProto_Rank::has_finalKiller() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Rank::set_has_finalKiller() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Rank::clear_has_finalKiller() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Rank::clear_finalKiller() {
  if (finalKiller_ != NULL) finalKiller_->::RecordInfo::Clear();
  clear_has_finalKiller();
}
inline const ::RecordInfo& NetProto_Rank::finalKiller() const {
  return finalKiller_ != NULL ? *finalKiller_ : *default_instance_->finalKiller_;
}
inline ::RecordInfo* NetProto_Rank::mutable_finalKiller() {
  set_has_finalKiller();
  if (finalKiller_ == NULL) finalKiller_ = new ::RecordInfo;
  return finalKiller_;
}
inline ::RecordInfo* NetProto_Rank::release_finalKiller() {
  clear_has_finalKiller();
  ::RecordInfo* temp = finalKiller_;
  finalKiller_ = NULL;
  return temp;
}

// optional .RecordInfo self = 6;
inline bool NetProto_Rank::has_self() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_Rank::set_has_self() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_Rank::clear_has_self() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_Rank::clear_self() {
  if (self_ != NULL) self_->::RecordInfo::Clear();
  clear_has_self();
}
inline const ::RecordInfo& NetProto_Rank::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::RecordInfo* NetProto_Rank::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::RecordInfo;
  return self_;
}
inline ::RecordInfo* NetProto_Rank::release_self() {
  clear_has_self();
  ::RecordInfo* temp = self_;
  self_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_SetUp

// optional int32 soundVolume = 1;
inline bool NetProto_SetUp::has_soundVolume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SetUp::set_has_soundVolume() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SetUp::clear_has_soundVolume() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SetUp::clear_soundVolume() {
  soundVolume_ = 0;
  clear_has_soundVolume();
}
inline ::google::protobuf::int32 NetProto_SetUp::soundVolume() const {
  return soundVolume_;
}
inline void NetProto_SetUp::set_soundVolume(::google::protobuf::int32 value) {
  set_has_soundVolume();
  soundVolume_ = value;
}

// optional int32 musicVolume = 2;
inline bool NetProto_SetUp::has_musicVolume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SetUp::set_has_musicVolume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SetUp::clear_has_musicVolume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SetUp::clear_musicVolume() {
  musicVolume_ = 0;
  clear_has_musicVolume();
}
inline ::google::protobuf::int32 NetProto_SetUp::musicVolume() const {
  return musicVolume_;
}
inline void NetProto_SetUp::set_musicVolume(::google::protobuf::int32 value) {
  set_has_musicVolume();
  musicVolume_ = value;
}

// optional int32 playerNum = 3;
inline bool NetProto_SetUp::has_playerNum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_SetUp::set_has_playerNum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_SetUp::clear_has_playerNum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_SetUp::clear_playerNum() {
  playerNum_ = 0;
  clear_has_playerNum();
}
inline ::google::protobuf::int32 NetProto_SetUp::playerNum() const {
  return playerNum_;
}
inline void NetProto_SetUp::set_playerNum(::google::protobuf::int32 value) {
  set_has_playerNum();
  playerNum_ = value;
}

// optional bool fixedCamera = 4;
inline bool NetProto_SetUp::has_fixedCamera() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_SetUp::set_has_fixedCamera() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_SetUp::clear_has_fixedCamera() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_SetUp::clear_fixedCamera() {
  fixedCamera_ = false;
  clear_has_fixedCamera();
}
inline bool NetProto_SetUp::fixedCamera() const {
  return fixedCamera_;
}
inline void NetProto_SetUp::set_fixedCamera(bool value) {
  set_has_fixedCamera();
  fixedCamera_ = value;
}

// optional bool displayOtherEffect = 5;
inline bool NetProto_SetUp::has_displayOtherEffect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_SetUp::set_has_displayOtherEffect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_SetUp::clear_has_displayOtherEffect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_SetUp::clear_displayOtherEffect() {
  displayOtherEffect_ = false;
  clear_has_displayOtherEffect();
}
inline bool NetProto_SetUp::displayOtherEffect() const {
  return displayOtherEffect_;
}
inline void NetProto_SetUp::set_displayOtherEffect(bool value) {
  set_has_displayOtherEffect();
  displayOtherEffect_ = value;
}

// optional bool displayMyEffect = 6;
inline bool NetProto_SetUp::has_displayMyEffect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_SetUp::set_has_displayMyEffect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_SetUp::clear_has_displayMyEffect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_SetUp::clear_displayMyEffect() {
  displayMyEffect_ = false;
  clear_has_displayMyEffect();
}
inline bool NetProto_SetUp::displayMyEffect() const {
  return displayMyEffect_;
}
inline void NetProto_SetUp::set_displayMyEffect(bool value) {
  set_has_displayMyEffect();
  displayMyEffect_ = value;
}

// optional bool displayOtherHurtNum = 7;
inline bool NetProto_SetUp::has_displayOtherHurtNum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_SetUp::set_has_displayOtherHurtNum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_SetUp::clear_has_displayOtherHurtNum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_SetUp::clear_displayOtherHurtNum() {
  displayOtherHurtNum_ = false;
  clear_has_displayOtherHurtNum();
}
inline bool NetProto_SetUp::displayOtherHurtNum() const {
  return displayOtherHurtNum_;
}
inline void NetProto_SetUp::set_displayOtherHurtNum(bool value) {
  set_has_displayOtherHurtNum();
  displayOtherHurtNum_ = value;
}

// -------------------------------------------------------------------

// NetProto_Register

// optional string account = 1;
inline bool NetProto_Register::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Register::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Register::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Register::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& NetProto_Register::account() const {
  return *account_;
}
inline void NetProto_Register::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_Register::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_Register::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Register::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* NetProto_Register::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 2;
inline bool NetProto_Register::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Register::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Register::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Register::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& NetProto_Register::password() const {
  return *password_;
}
inline void NetProto_Register::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NetProto_Register::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NetProto_Register::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Register::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* NetProto_Register::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string deviceID = 3;
inline bool NetProto_Register::has_deviceID() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Register::set_has_deviceID() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Register::clear_has_deviceID() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Register::clear_deviceID() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    deviceID_->clear();
  }
  clear_has_deviceID();
}
inline const ::std::string& NetProto_Register::deviceID() const {
  return *deviceID_;
}
inline void NetProto_Register::set_deviceID(const ::std::string& value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_Register::set_deviceID(const char* value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_Register::set_deviceID(const char* value, size_t size) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Register::mutable_deviceID() {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  return deviceID_;
}
inline ::std::string* NetProto_Register::release_deviceID() {
  clear_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceID_;
    deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string idfa = 4;
inline bool NetProto_Register::has_idfa() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Register::set_has_idfa() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Register::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Register::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& NetProto_Register::idfa() const {
  return *idfa_;
}
inline void NetProto_Register::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_Register::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_Register::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Register::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  return idfa_;
}
inline ::std::string* NetProto_Register::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_GetKeyGift

// optional string key = 1;
inline bool NetProto_GetKeyGift::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GetKeyGift::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GetKeyGift::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GetKeyGift::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& NetProto_GetKeyGift::key() const {
  return *key_;
}
inline void NetProto_GetKeyGift::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void NetProto_GetKeyGift::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void NetProto_GetKeyGift::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GetKeyGift::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* NetProto_GetKeyGift::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 res = 2;
inline bool NetProto_GetKeyGift::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GetKeyGift::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GetKeyGift::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GetKeyGift::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 NetProto_GetKeyGift::res() const {
  return res_;
}
inline void NetProto_GetKeyGift::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// NetProto_StatisticsUIBtn

// optional string ui = 1;
inline bool NetProto_StatisticsUIBtn::has_ui() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_StatisticsUIBtn::set_has_ui() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_StatisticsUIBtn::clear_has_ui() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_StatisticsUIBtn::clear_ui() {
  if (ui_ != &::google::protobuf::internal::kEmptyString) {
    ui_->clear();
  }
  clear_has_ui();
}
inline const ::std::string& NetProto_StatisticsUIBtn::ui() const {
  return *ui_;
}
inline void NetProto_StatisticsUIBtn::set_ui(const ::std::string& value) {
  set_has_ui();
  if (ui_ == &::google::protobuf::internal::kEmptyString) {
    ui_ = new ::std::string;
  }
  ui_->assign(value);
}
inline void NetProto_StatisticsUIBtn::set_ui(const char* value) {
  set_has_ui();
  if (ui_ == &::google::protobuf::internal::kEmptyString) {
    ui_ = new ::std::string;
  }
  ui_->assign(value);
}
inline void NetProto_StatisticsUIBtn::set_ui(const char* value, size_t size) {
  set_has_ui();
  if (ui_ == &::google::protobuf::internal::kEmptyString) {
    ui_ = new ::std::string;
  }
  ui_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_StatisticsUIBtn::mutable_ui() {
  set_has_ui();
  if (ui_ == &::google::protobuf::internal::kEmptyString) {
    ui_ = new ::std::string;
  }
  return ui_;
}
inline ::std::string* NetProto_StatisticsUIBtn::release_ui() {
  clear_has_ui();
  if (ui_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ui_;
    ui_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 btn = 2;
inline bool NetProto_StatisticsUIBtn::has_btn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_StatisticsUIBtn::set_has_btn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_StatisticsUIBtn::clear_has_btn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_StatisticsUIBtn::clear_btn() {
  btn_ = 0;
  clear_has_btn();
}
inline ::google::protobuf::int32 NetProto_StatisticsUIBtn::btn() const {
  return btn_;
}
inline void NetProto_StatisticsUIBtn::set_btn(::google::protobuf::int32 value) {
  set_has_btn();
  btn_ = value;
}

// optional string param = 3;
inline bool NetProto_StatisticsUIBtn::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_StatisticsUIBtn::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_StatisticsUIBtn::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_StatisticsUIBtn::clear_param() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& NetProto_StatisticsUIBtn::param() const {
  return *param_;
}
inline void NetProto_StatisticsUIBtn::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void NetProto_StatisticsUIBtn::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void NetProto_StatisticsUIBtn::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_StatisticsUIBtn::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  return param_;
}
inline ::std::string* NetProto_StatisticsUIBtn::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_StatisticsGuide

// optional int32 pass = 1;
inline bool NetProto_StatisticsGuide::has_pass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_StatisticsGuide::set_has_pass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_StatisticsGuide::clear_has_pass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_StatisticsGuide::clear_pass() {
  pass_ = 0;
  clear_has_pass();
}
inline ::google::protobuf::int32 NetProto_StatisticsGuide::pass() const {
  return pass_;
}
inline void NetProto_StatisticsGuide::set_pass(::google::protobuf::int32 value) {
  set_has_pass();
  pass_ = value;
}

// optional int32 node = 2;
inline bool NetProto_StatisticsGuide::has_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_StatisticsGuide::set_has_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_StatisticsGuide::clear_has_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_StatisticsGuide::clear_node() {
  node_ = 0;
  clear_has_node();
}
inline ::google::protobuf::int32 NetProto_StatisticsGuide::node() const {
  return node_;
}
inline void NetProto_StatisticsGuide::set_node(::google::protobuf::int32 value) {
  set_has_node();
  node_ = value;
}

// -------------------------------------------------------------------

// NetProto_LoginLaterTime

// optional int32 time = 1;
inline bool NetProto_LoginLaterTime::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_LoginLaterTime::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_LoginLaterTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_LoginLaterTime::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 NetProto_LoginLaterTime::time() const {
  return time_;
}
inline void NetProto_LoginLaterTime::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// NetProto_TencentBuyGoodsUrl

// optional string payitem = 1;
inline bool NetProto_TencentBuyGoodsUrl::has_payitem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_TencentBuyGoodsUrl::set_has_payitem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_has_payitem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_payitem() {
  if (payitem_ != &::google::protobuf::internal::kEmptyString) {
    payitem_->clear();
  }
  clear_has_payitem();
}
inline const ::std::string& NetProto_TencentBuyGoodsUrl::payitem() const {
  return *payitem_;
}
inline void NetProto_TencentBuyGoodsUrl::set_payitem(const ::std::string& value) {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  payitem_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_payitem(const char* value) {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  payitem_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_payitem(const char* value, size_t size) {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  payitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::mutable_payitem() {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  return payitem_;
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::release_payitem() {
  clear_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payitem_;
    payitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string goodsmeta = 2;
inline bool NetProto_TencentBuyGoodsUrl::has_goodsmeta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_TencentBuyGoodsUrl::set_has_goodsmeta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_has_goodsmeta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_goodsmeta() {
  if (goodsmeta_ != &::google::protobuf::internal::kEmptyString) {
    goodsmeta_->clear();
  }
  clear_has_goodsmeta();
}
inline const ::std::string& NetProto_TencentBuyGoodsUrl::goodsmeta() const {
  return *goodsmeta_;
}
inline void NetProto_TencentBuyGoodsUrl::set_goodsmeta(const ::std::string& value) {
  set_has_goodsmeta();
  if (goodsmeta_ == &::google::protobuf::internal::kEmptyString) {
    goodsmeta_ = new ::std::string;
  }
  goodsmeta_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_goodsmeta(const char* value) {
  set_has_goodsmeta();
  if (goodsmeta_ == &::google::protobuf::internal::kEmptyString) {
    goodsmeta_ = new ::std::string;
  }
  goodsmeta_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_goodsmeta(const char* value, size_t size) {
  set_has_goodsmeta();
  if (goodsmeta_ == &::google::protobuf::internal::kEmptyString) {
    goodsmeta_ = new ::std::string;
  }
  goodsmeta_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::mutable_goodsmeta() {
  set_has_goodsmeta();
  if (goodsmeta_ == &::google::protobuf::internal::kEmptyString) {
    goodsmeta_ = new ::std::string;
  }
  return goodsmeta_;
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::release_goodsmeta() {
  clear_has_goodsmeta();
  if (goodsmeta_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = goodsmeta_;
    goodsmeta_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string goodsurl = 3;
inline bool NetProto_TencentBuyGoodsUrl::has_goodsurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_TencentBuyGoodsUrl::set_has_goodsurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_has_goodsurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_goodsurl() {
  if (goodsurl_ != &::google::protobuf::internal::kEmptyString) {
    goodsurl_->clear();
  }
  clear_has_goodsurl();
}
inline const ::std::string& NetProto_TencentBuyGoodsUrl::goodsurl() const {
  return *goodsurl_;
}
inline void NetProto_TencentBuyGoodsUrl::set_goodsurl(const ::std::string& value) {
  set_has_goodsurl();
  if (goodsurl_ == &::google::protobuf::internal::kEmptyString) {
    goodsurl_ = new ::std::string;
  }
  goodsurl_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_goodsurl(const char* value) {
  set_has_goodsurl();
  if (goodsurl_ == &::google::protobuf::internal::kEmptyString) {
    goodsurl_ = new ::std::string;
  }
  goodsurl_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_goodsurl(const char* value, size_t size) {
  set_has_goodsurl();
  if (goodsurl_ == &::google::protobuf::internal::kEmptyString) {
    goodsurl_ = new ::std::string;
  }
  goodsurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::mutable_goodsurl() {
  set_has_goodsurl();
  if (goodsurl_ == &::google::protobuf::internal::kEmptyString) {
    goodsurl_ = new ::std::string;
  }
  return goodsurl_;
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::release_goodsurl() {
  clear_has_goodsurl();
  if (goodsurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = goodsurl_;
    goodsurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string appmetadata = 4;
inline bool NetProto_TencentBuyGoodsUrl::has_appmetadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_TencentBuyGoodsUrl::set_has_appmetadata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_has_appmetadata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_appmetadata() {
  if (appmetadata_ != &::google::protobuf::internal::kEmptyString) {
    appmetadata_->clear();
  }
  clear_has_appmetadata();
}
inline const ::std::string& NetProto_TencentBuyGoodsUrl::appmetadata() const {
  return *appmetadata_;
}
inline void NetProto_TencentBuyGoodsUrl::set_appmetadata(const ::std::string& value) {
  set_has_appmetadata();
  if (appmetadata_ == &::google::protobuf::internal::kEmptyString) {
    appmetadata_ = new ::std::string;
  }
  appmetadata_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_appmetadata(const char* value) {
  set_has_appmetadata();
  if (appmetadata_ == &::google::protobuf::internal::kEmptyString) {
    appmetadata_ = new ::std::string;
  }
  appmetadata_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_appmetadata(const char* value, size_t size) {
  set_has_appmetadata();
  if (appmetadata_ == &::google::protobuf::internal::kEmptyString) {
    appmetadata_ = new ::std::string;
  }
  appmetadata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::mutable_appmetadata() {
  set_has_appmetadata();
  if (appmetadata_ == &::google::protobuf::internal::kEmptyString) {
    appmetadata_ = new ::std::string;
  }
  return appmetadata_;
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::release_appmetadata() {
  clear_has_appmetadata();
  if (appmetadata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appmetadata_;
    appmetadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string url = 5;
inline bool NetProto_TencentBuyGoodsUrl::has_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_TencentBuyGoodsUrl::set_has_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_has_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& NetProto_TencentBuyGoodsUrl::url() const {
  return *url_;
}
inline void NetProto_TencentBuyGoodsUrl::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string amt = 6;
inline bool NetProto_TencentBuyGoodsUrl::has_amt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_TencentBuyGoodsUrl::set_has_amt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_has_amt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_TencentBuyGoodsUrl::clear_amt() {
  if (amt_ != &::google::protobuf::internal::kEmptyString) {
    amt_->clear();
  }
  clear_has_amt();
}
inline const ::std::string& NetProto_TencentBuyGoodsUrl::amt() const {
  return *amt_;
}
inline void NetProto_TencentBuyGoodsUrl::set_amt(const ::std::string& value) {
  set_has_amt();
  if (amt_ == &::google::protobuf::internal::kEmptyString) {
    amt_ = new ::std::string;
  }
  amt_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_amt(const char* value) {
  set_has_amt();
  if (amt_ == &::google::protobuf::internal::kEmptyString) {
    amt_ = new ::std::string;
  }
  amt_->assign(value);
}
inline void NetProto_TencentBuyGoodsUrl::set_amt(const char* value, size_t size) {
  set_has_amt();
  if (amt_ == &::google::protobuf::internal::kEmptyString) {
    amt_ = new ::std::string;
  }
  amt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::mutable_amt() {
  set_has_amt();
  if (amt_ == &::google::protobuf::internal::kEmptyString) {
    amt_ = new ::std::string;
  }
  return amt_;
}
inline ::std::string* NetProto_TencentBuyGoodsUrl::release_amt() {
  clear_has_amt();
  if (amt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = amt_;
    amt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_LoginURL

// optional string url = 1;
inline bool NetProto_LoginURL::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_LoginURL::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_LoginURL::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_LoginURL::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& NetProto_LoginURL::url() const {
  return *url_;
}
inline void NetProto_LoginURL::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void NetProto_LoginURL::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void NetProto_LoginURL::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_LoginURL::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* NetProto_LoginURL::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 result = 2;
inline bool NetProto_LoginURL::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_LoginURL::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_LoginURL::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_LoginURL::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 NetProto_LoginURL::result() const {
  return result_;
}
inline void NetProto_LoginURL::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// NetProto_RechargeParam

// optional string param = 1;
inline bool NetProto_RechargeParam::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RechargeParam::set_has_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RechargeParam::clear_has_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RechargeParam::clear_param() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& NetProto_RechargeParam::param() const {
  return *param_;
}
inline void NetProto_RechargeParam::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void NetProto_RechargeParam::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void NetProto_RechargeParam::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_RechargeParam::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  return param_;
}
inline ::std::string* NetProto_RechargeParam::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float v = 2;
inline bool NetProto_RechargeParam::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_RechargeParam::set_has_v() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_RechargeParam::clear_has_v() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_RechargeParam::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline float NetProto_RechargeParam::v() const {
  return v_;
}
inline void NetProto_RechargeParam::set_v(float value) {
  set_has_v();
  v_ = value;
}

// -------------------------------------------------------------------

// NetProto_AddPlayers

// repeated int32 id = 1;
inline int NetProto_AddPlayers::id_size() const {
  return id_.size();
}
inline void NetProto_AddPlayers::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 NetProto_AddPlayers::id(int index) const {
  return id_.Get(index);
}
inline void NetProto_AddPlayers::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
}
inline void NetProto_AddPlayers::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_AddPlayers::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_AddPlayers::mutable_id() {
  return &id_;
}

// repeated .PB_PlayerAtt att = 2;
inline int NetProto_AddPlayers::att_size() const {
  return att_.size();
}
inline void NetProto_AddPlayers::clear_att() {
  att_.Clear();
}
inline const ::PB_PlayerAtt& NetProto_AddPlayers::att(int index) const {
  return att_.Get(index);
}
inline ::PB_PlayerAtt* NetProto_AddPlayers::mutable_att(int index) {
  return att_.Mutable(index);
}
inline ::PB_PlayerAtt* NetProto_AddPlayers::add_att() {
  return att_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
NetProto_AddPlayers::att() const {
  return att_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
NetProto_AddPlayers::mutable_att() {
  return &att_;
}

// repeated int32 type = 3;
inline int NetProto_AddPlayers::type_size() const {
  return type_.size();
}
inline void NetProto_AddPlayers::clear_type() {
  type_.Clear();
}
inline ::google::protobuf::int32 NetProto_AddPlayers::type(int index) const {
  return type_.Get(index);
}
inline void NetProto_AddPlayers::set_type(int index, ::google::protobuf::int32 value) {
  type_.Set(index, value);
}
inline void NetProto_AddPlayers::add_type(::google::protobuf::int32 value) {
  type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_AddPlayers::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_AddPlayers::mutable_type() {
  return &type_;
}

// -------------------------------------------------------------------

// NetProto_LoadScene

// optional .NetProto_LoadScene.Type type = 1;
inline bool NetProto_LoadScene::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_LoadScene::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_LoadScene::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_LoadScene::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_LoadScene_Type NetProto_LoadScene::type() const {
  return static_cast< ::NetProto_LoadScene_Type >(type_);
}
inline void NetProto_LoadScene::set_type(::NetProto_LoadScene_Type value) {
  GOOGLE_DCHECK(::NetProto_LoadScene_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool NetProto_LoadScene::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_LoadScene::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_LoadScene::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_LoadScene::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_LoadScene::id() const {
  return id_;
}
inline void NetProto_LoadScene::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 pos = 3;
inline bool NetProto_LoadScene::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_LoadScene::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_LoadScene::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_LoadScene::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 NetProto_LoadScene::pos() const {
  return pos_;
}
inline void NetProto_LoadScene::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 gemRecover = 4;
inline bool NetProto_LoadScene::has_gemRecover() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_LoadScene::set_has_gemRecover() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_LoadScene::clear_has_gemRecover() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_LoadScene::clear_gemRecover() {
  gemRecover_ = 0;
  clear_has_gemRecover();
}
inline ::google::protobuf::int32 NetProto_LoadScene::gemRecover() const {
  return gemRecover_;
}
inline void NetProto_LoadScene::set_gemRecover(::google::protobuf::int32 value) {
  set_has_gemRecover();
  gemRecover_ = value;
}

// -------------------------------------------------------------------

// NetProto_DoLoadScene

// optional int32 id = 1;
inline bool NetProto_DoLoadScene::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DoLoadScene::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DoLoadScene::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DoLoadScene::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_DoLoadScene::id() const {
  return id_;
}
inline void NetProto_DoLoadScene::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 mapID = 2;
inline bool NetProto_DoLoadScene::has_mapID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_DoLoadScene::set_has_mapID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_DoLoadScene::clear_has_mapID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_DoLoadScene::clear_mapID() {
  mapID_ = 0;
  clear_has_mapID();
}
inline ::google::protobuf::int32 NetProto_DoLoadScene::mapID() const {
  return mapID_;
}
inline void NetProto_DoLoadScene::set_mapID(::google::protobuf::int32 value) {
  set_has_mapID();
  mapID_ = value;
}

// optional .PB_Vector2i coord = 3;
inline bool NetProto_DoLoadScene::has_coord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_DoLoadScene::set_has_coord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_DoLoadScene::clear_has_coord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_DoLoadScene::clear_coord() {
  if (coord_ != NULL) coord_->::PB_Vector2i::Clear();
  clear_has_coord();
}
inline const ::PB_Vector2i& NetProto_DoLoadScene::coord() const {
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::PB_Vector2i* NetProto_DoLoadScene::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) coord_ = new ::PB_Vector2i;
  return coord_;
}
inline ::PB_Vector2i* NetProto_DoLoadScene::release_coord() {
  clear_has_coord();
  ::PB_Vector2i* temp = coord_;
  coord_ = NULL;
  return temp;
}

// optional bool multipleRoom = 4;
inline bool NetProto_DoLoadScene::has_multipleRoom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_DoLoadScene::set_has_multipleRoom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_DoLoadScene::clear_has_multipleRoom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_DoLoadScene::clear_multipleRoom() {
  multipleRoom_ = false;
  clear_has_multipleRoom();
}
inline bool NetProto_DoLoadScene::multipleRoom() const {
  return multipleRoom_;
}
inline void NetProto_DoLoadScene::set_multipleRoom(bool value) {
  set_has_multipleRoom();
  multipleRoom_ = value;
}

// -------------------------------------------------------------------

// NetProto_EndLoadScene

// -------------------------------------------------------------------

// NetProto_AddNPCs

// repeated int32 id = 1;
inline int NetProto_AddNPCs::id_size() const {
  return id_.size();
}
inline void NetProto_AddNPCs::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 NetProto_AddNPCs::id(int index) const {
  return id_.Get(index);
}
inline void NetProto_AddNPCs::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
}
inline void NetProto_AddNPCs::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_AddNPCs::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_AddNPCs::mutable_id() {
  return &id_;
}

// repeated .PB_NPCAtt att = 2;
inline int NetProto_AddNPCs::att_size() const {
  return att_.size();
}
inline void NetProto_AddNPCs::clear_att() {
  att_.Clear();
}
inline const ::PB_NPCAtt& NetProto_AddNPCs::att(int index) const {
  return att_.Get(index);
}
inline ::PB_NPCAtt* NetProto_AddNPCs::mutable_att(int index) {
  return att_.Mutable(index);
}
inline ::PB_NPCAtt* NetProto_AddNPCs::add_att() {
  return att_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >&
NetProto_AddNPCs::att() const {
  return att_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >*
NetProto_AddNPCs::mutable_att() {
  return &att_;
}

// -------------------------------------------------------------------

// NetProto_ClearRoom

// optional int32 totalTime = 1;
inline bool NetProto_ClearRoom::has_totalTime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ClearRoom::set_has_totalTime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ClearRoom::clear_has_totalTime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ClearRoom::clear_totalTime() {
  totalTime_ = 0;
  clear_has_totalTime();
}
inline ::google::protobuf::int32 NetProto_ClearRoom::totalTime() const {
  return totalTime_;
}
inline void NetProto_ClearRoom::set_totalTime(::google::protobuf::int32 value) {
  set_has_totalTime();
  totalTime_ = value;
}

// optional int32 index = 2;
inline bool NetProto_ClearRoom::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ClearRoom::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ClearRoom::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ClearRoom::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_ClearRoom::index() const {
  return index_;
}
inline void NetProto_ClearRoom::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int64 time = 3;
inline bool NetProto_ClearRoom::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_ClearRoom::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_ClearRoom::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_ClearRoom::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 NetProto_ClearRoom::time() const {
  return time_;
}
inline void NetProto_ClearRoom::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string md5 = 4;
inline bool NetProto_ClearRoom::has_md5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_ClearRoom::set_has_md5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_ClearRoom::clear_has_md5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_ClearRoom::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& NetProto_ClearRoom::md5() const {
  return *md5_;
}
inline void NetProto_ClearRoom::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void NetProto_ClearRoom::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void NetProto_ClearRoom::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_ClearRoom::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* NetProto_ClearRoom::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 exp = 5;
inline bool NetProto_ClearRoom::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_ClearRoom::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_ClearRoom::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_ClearRoom::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 NetProto_ClearRoom::exp() const {
  return exp_;
}
inline void NetProto_ClearRoom::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 money = 6;
inline bool NetProto_ClearRoom::has_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_ClearRoom::set_has_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_ClearRoom::clear_has_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_ClearRoom::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 NetProto_ClearRoom::money() const {
  return money_;
}
inline void NetProto_ClearRoom::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 honor = 7;
inline bool NetProto_ClearRoom::has_honor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_ClearRoom::set_has_honor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_ClearRoom::clear_has_honor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_ClearRoom::clear_honor() {
  honor_ = 0;
  clear_has_honor();
}
inline ::google::protobuf::int32 NetProto_ClearRoom::honor() const {
  return honor_;
}
inline void NetProto_ClearRoom::set_honor(::google::protobuf::int32 value) {
  set_has_honor();
  honor_ = value;
}

// optional int32 godScore = 8;
inline bool NetProto_ClearRoom::has_godScore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_ClearRoom::set_has_godScore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_ClearRoom::clear_has_godScore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_ClearRoom::clear_godScore() {
  godScore_ = 0;
  clear_has_godScore();
}
inline ::google::protobuf::int32 NetProto_ClearRoom::godScore() const {
  return godScore_;
}
inline void NetProto_ClearRoom::set_godScore(::google::protobuf::int32 value) {
  set_has_godScore();
  godScore_ = value;
}

// optional int32 upRank = 9;
inline bool NetProto_ClearRoom::has_upRank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetProto_ClearRoom::set_has_upRank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetProto_ClearRoom::clear_has_upRank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetProto_ClearRoom::clear_upRank() {
  upRank_ = 0;
  clear_has_upRank();
}
inline ::google::protobuf::int32 NetProto_ClearRoom::upRank() const {
  return upRank_;
}
inline void NetProto_ClearRoom::set_upRank(::google::protobuf::int32 value) {
  set_has_upRank();
  upRank_ = value;
}

// -------------------------------------------------------------------

// NetProto_OpenRoomBox

// optional .NetProto_OpenRoomBox.Type type = 1;
inline bool NetProto_OpenRoomBox::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_OpenRoomBox::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_OpenRoomBox::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_OpenRoomBox::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_OpenRoomBox_Type NetProto_OpenRoomBox::type() const {
  return static_cast< ::NetProto_OpenRoomBox_Type >(type_);
}
inline void NetProto_OpenRoomBox::set_type(::NetProto_OpenRoomBox_Type value) {
  GOOGLE_DCHECK(::NetProto_OpenRoomBox_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int32 result = 2;
inline int NetProto_OpenRoomBox::result_size() const {
  return result_.size();
}
inline void NetProto_OpenRoomBox::clear_result() {
  result_.Clear();
}
inline ::google::protobuf::int32 NetProto_OpenRoomBox::result(int index) const {
  return result_.Get(index);
}
inline void NetProto_OpenRoomBox::set_result(int index, ::google::protobuf::int32 value) {
  result_.Set(index, value);
}
inline void NetProto_OpenRoomBox::add_result(::google::protobuf::int32 value) {
  result_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_OpenRoomBox::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_OpenRoomBox::mutable_result() {
  return &result_;
}

// -------------------------------------------------------------------

// NetProto_BeginWaitRoom

// optional int32 map = 1;
inline bool NetProto_BeginWaitRoom::has_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BeginWaitRoom::set_has_map() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BeginWaitRoom::clear_has_map() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BeginWaitRoom::clear_map() {
  map_ = 0;
  clear_has_map();
}
inline ::google::protobuf::int32 NetProto_BeginWaitRoom::map() const {
  return map_;
}
inline void NetProto_BeginWaitRoom::set_map(::google::protobuf::int32 value) {
  set_has_map();
  map_ = value;
}

// -------------------------------------------------------------------

// NetProto_EndWaitRoom

// -------------------------------------------------------------------

// NetProto_GenNPCs

// optional int32 group = 1;
inline bool NetProto_GenNPCs::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GenNPCs::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GenNPCs::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GenNPCs::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 NetProto_GenNPCs::group() const {
  return group_;
}
inline void NetProto_GenNPCs::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 pass = 2;
inline bool NetProto_GenNPCs::has_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GenNPCs::set_has_pass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GenNPCs::clear_has_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GenNPCs::clear_pass() {
  pass_ = 0;
  clear_has_pass();
}
inline ::google::protobuf::int32 NetProto_GenNPCs::pass() const {
  return pass_;
}
inline void NetProto_GenNPCs::set_pass(::google::protobuf::int32 value) {
  set_has_pass();
  pass_ = value;
}

// -------------------------------------------------------------------

// NetProto_ResetEvent

// optional bool monday = 1;
inline bool NetProto_ResetEvent::has_monday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ResetEvent::set_has_monday() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ResetEvent::clear_has_monday() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ResetEvent::clear_monday() {
  monday_ = false;
  clear_has_monday();
}
inline bool NetProto_ResetEvent::monday() const {
  return monday_;
}
inline void NetProto_ResetEvent::set_monday(bool value) {
  set_has_monday();
  monday_ = value;
}

// optional bool resetCome = 2;
inline bool NetProto_ResetEvent::has_resetCome() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ResetEvent::set_has_resetCome() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ResetEvent::clear_has_resetCome() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ResetEvent::clear_resetCome() {
  resetCome_ = false;
  clear_has_resetCome();
}
inline bool NetProto_ResetEvent::resetCome() const {
  return resetCome_;
}
inline void NetProto_ResetEvent::set_resetCome(bool value) {
  set_has_resetCome();
  resetCome_ = value;
}

// -------------------------------------------------------------------

// NetProto_QuickFight

// optional int32 map = 1;
inline bool NetProto_QuickFight::has_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_QuickFight::set_has_map() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_QuickFight::clear_has_map() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_QuickFight::clear_map() {
  map_ = 0;
  clear_has_map();
}
inline ::google::protobuf::int32 NetProto_QuickFight::map() const {
  return map_;
}
inline void NetProto_QuickFight::set_map(::google::protobuf::int32 value) {
  set_has_map();
  map_ = value;
}

// repeated .NetProto_GetRes res = 2;
inline int NetProto_QuickFight::res_size() const {
  return res_.size();
}
inline void NetProto_QuickFight::clear_res() {
  res_.Clear();
}
inline const ::NetProto_GetRes& NetProto_QuickFight::res(int index) const {
  return res_.Get(index);
}
inline ::NetProto_GetRes* NetProto_QuickFight::mutable_res(int index) {
  return res_.Mutable(index);
}
inline ::NetProto_GetRes* NetProto_QuickFight::add_res() {
  return res_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GetRes >&
NetProto_QuickFight::res() const {
  return res_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_GetRes >*
NetProto_QuickFight::mutable_res() {
  return &res_;
}

// optional int32 count = 3;
inline bool NetProto_QuickFight::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_QuickFight::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_QuickFight::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_QuickFight::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_QuickFight::count() const {
  return count_;
}
inline void NetProto_QuickFight::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_Win

// optional int32 honor = 1;
inline bool NetProto_Win::has_honor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Win::set_has_honor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Win::clear_has_honor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Win::clear_honor() {
  honor_ = 0;
  clear_has_honor();
}
inline ::google::protobuf::int32 NetProto_Win::honor() const {
  return honor_;
}
inline void NetProto_Win::set_honor(::google::protobuf::int32 value) {
  set_has_honor();
  honor_ = value;
}

// optional int32 pvpScore = 2;
inline bool NetProto_Win::has_pvpScore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Win::set_has_pvpScore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Win::clear_has_pvpScore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Win::clear_pvpScore() {
  pvpScore_ = 0;
  clear_has_pvpScore();
}
inline ::google::protobuf::int32 NetProto_Win::pvpScore() const {
  return pvpScore_;
}
inline void NetProto_Win::set_pvpScore(::google::protobuf::int32 value) {
  set_has_pvpScore();
  pvpScore_ = value;
}

// -------------------------------------------------------------------

// NetProto_Lose

// -------------------------------------------------------------------

// NetProto_Timeout

// -------------------------------------------------------------------

// NetProto_BeginWaitPVP

// optional .NetProto_BeginWaitPVP.Type type = 1;
inline bool NetProto_BeginWaitPVP::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BeginWaitPVP::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BeginWaitPVP::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BeginWaitPVP::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_BeginWaitPVP_Type NetProto_BeginWaitPVP::type() const {
  return static_cast< ::NetProto_BeginWaitPVP_Type >(type_);
}
inline void NetProto_BeginWaitPVP::set_type(::NetProto_BeginWaitPVP_Type value) {
  GOOGLE_DCHECK(::NetProto_BeginWaitPVP_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool res = 2;
inline bool NetProto_BeginWaitPVP::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_BeginWaitPVP::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_BeginWaitPVP::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_BeginWaitPVP::clear_res() {
  res_ = false;
  clear_has_res();
}
inline bool NetProto_BeginWaitPVP::res() const {
  return res_;
}
inline void NetProto_BeginWaitPVP::set_res(bool value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// NetProto_EndWaitPVP

// optional .NetProto_EndWaitPVP.Type type = 1;
inline bool NetProto_EndWaitPVP::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_EndWaitPVP::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_EndWaitPVP::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_EndWaitPVP::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_EndWaitPVP_Type NetProto_EndWaitPVP::type() const {
  return static_cast< ::NetProto_EndWaitPVP_Type >(type_);
}
inline void NetProto_EndWaitPVP::set_type(::NetProto_EndWaitPVP_Type value) {
  GOOGLE_DCHECK(::NetProto_EndWaitPVP_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NetProto_Lottery

// optional int32 res = 1;
inline bool NetProto_Lottery::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Lottery::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Lottery::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Lottery::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 NetProto_Lottery::res() const {
  return res_;
}
inline void NetProto_Lottery::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// NetProto_GetGift

// optional .AwardInfo.Type type = 1;
inline bool NetProto_GetGift::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GetGift::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GetGift::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GetGift::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::AwardInfo_Type NetProto_GetGift::type() const {
  return static_cast< ::AwardInfo_Type >(type_);
}
inline void NetProto_GetGift::set_type(::AwardInfo_Type value) {
  GOOGLE_DCHECK(::AwardInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 index = 2;
inline bool NetProto_GetGift::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GetGift::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GetGift::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GetGift::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_GetGift::index() const {
  return index_;
}
inline void NetProto_GetGift::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 arg = 3;
inline bool NetProto_GetGift::has_arg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GetGift::set_has_arg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GetGift::clear_has_arg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GetGift::clear_arg() {
  arg_ = 0;
  clear_has_arg();
}
inline ::google::protobuf::int32 NetProto_GetGift::arg() const {
  return arg_;
}
inline void NetProto_GetGift::set_arg(::google::protobuf::int32 value) {
  set_has_arg();
  arg_ = value;
}

// -------------------------------------------------------------------

// NetProto_SingleRecord

// optional int32 mapID = 1;
inline bool NetProto_SingleRecord::has_mapID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SingleRecord::set_has_mapID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SingleRecord::clear_has_mapID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SingleRecord::clear_mapID() {
  mapID_ = 0;
  clear_has_mapID();
}
inline ::google::protobuf::int32 NetProto_SingleRecord::mapID() const {
  return mapID_;
}
inline void NetProto_SingleRecord::set_mapID(::google::protobuf::int32 value) {
  set_has_mapID();
  mapID_ = value;
}

// optional .RecordInfo record = 2;
inline bool NetProto_SingleRecord::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SingleRecord::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SingleRecord::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SingleRecord::clear_record() {
  if (record_ != NULL) record_->::RecordInfo::Clear();
  clear_has_record();
}
inline const ::RecordInfo& NetProto_SingleRecord::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::RecordInfo* NetProto_SingleRecord::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::RecordInfo;
  return record_;
}
inline ::RecordInfo* NetProto_SingleRecord::release_record() {
  clear_has_record();
  ::RecordInfo* temp = record_;
  record_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_EndLoadModel

// -------------------------------------------------------------------

// NetProto_RoomWaitCount

// optional int32 room = 1;
inline bool NetProto_RoomWaitCount::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RoomWaitCount::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RoomWaitCount::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RoomWaitCount::clear_room() {
  room_ = 0;
  clear_has_room();
}
inline ::google::protobuf::int32 NetProto_RoomWaitCount::room() const {
  return room_;
}
inline void NetProto_RoomWaitCount::set_room(::google::protobuf::int32 value) {
  set_has_room();
  room_ = value;
}

// optional int32 count = 2;
inline bool NetProto_RoomWaitCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_RoomWaitCount::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_RoomWaitCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_RoomWaitCount::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_RoomWaitCount::count() const {
  return count_;
}
inline void NetProto_RoomWaitCount::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_PVPWaitCount

// optional .NetProto_PVPWaitCount.Type type = 1;
inline bool NetProto_PVPWaitCount::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PVPWaitCount::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PVPWaitCount::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PVPWaitCount::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_PVPWaitCount_Type NetProto_PVPWaitCount::type() const {
  return static_cast< ::NetProto_PVPWaitCount_Type >(type_);
}
inline void NetProto_PVPWaitCount::set_type(::NetProto_PVPWaitCount_Type value) {
  GOOGLE_DCHECK(::NetProto_PVPWaitCount_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 count = 2;
inline bool NetProto_PVPWaitCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_PVPWaitCount::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_PVPWaitCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_PVPWaitCount::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_PVPWaitCount::count() const {
  return count_;
}
inline void NetProto_PVPWaitCount::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_CancelWaitRoom

// -------------------------------------------------------------------

// NetProto_CancelWaitPVP

// -------------------------------------------------------------------

// NetProto_GetRes

// repeated .PB_ItemInfo items = 1;
inline int NetProto_GetRes::items_size() const {
  return items_.size();
}
inline void NetProto_GetRes::clear_items() {
  items_.Clear();
}
inline const ::PB_ItemInfo& NetProto_GetRes::items(int index) const {
  return items_.Get(index);
}
inline ::PB_ItemInfo* NetProto_GetRes::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::PB_ItemInfo* NetProto_GetRes::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
NetProto_GetRes::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
NetProto_GetRes::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// NetProto_Invest

// optional int32 id = 1;
inline bool NetProto_Invest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Invest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Invest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Invest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Invest::id() const {
  return id_;
}
inline void NetProto_Invest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_InvestAward

// optional int32 id = 1;
inline bool NetProto_InvestAward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_InvestAward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_InvestAward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_InvestAward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_InvestAward::id() const {
  return id_;
}
inline void NetProto_InvestAward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 index = 2;
inline bool NetProto_InvestAward::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_InvestAward::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_InvestAward::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_InvestAward::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_InvestAward::index() const {
  return index_;
}
inline void NetProto_InvestAward::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_InvestAwardInfo

// repeated int32 award = 1;
inline int NetProto_InvestAwardInfo::award_size() const {
  return award_.size();
}
inline void NetProto_InvestAwardInfo::clear_award() {
  award_.Clear();
}
inline ::google::protobuf::int32 NetProto_InvestAwardInfo::award(int index) const {
  return award_.Get(index);
}
inline void NetProto_InvestAwardInfo::set_award(int index, ::google::protobuf::int32 value) {
  award_.Set(index, value);
}
inline void NetProto_InvestAwardInfo::add_award(::google::protobuf::int32 value) {
  award_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_InvestAwardInfo::award() const {
  return award_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_InvestAwardInfo::mutable_award() {
  return &award_;
}

// -------------------------------------------------------------------

// NetProto_SetDayEvent

// optional int32 id = 1;
inline bool NetProto_SetDayEvent::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SetDayEvent::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SetDayEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SetDayEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_SetDayEvent::id() const {
  return id_;
}
inline void NetProto_SetDayEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 v = 2;
inline bool NetProto_SetDayEvent::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SetDayEvent::set_has_v() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SetDayEvent::clear_has_v() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SetDayEvent::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 NetProto_SetDayEvent::v() const {
  return v_;
}
inline void NetProto_SetDayEvent::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
}

// -------------------------------------------------------------------

// NetProto_SetFixedEvent

// optional int32 id = 1;
inline bool NetProto_SetFixedEvent::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SetFixedEvent::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SetFixedEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SetFixedEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_SetFixedEvent::id() const {
  return id_;
}
inline void NetProto_SetFixedEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 v = 2;
inline bool NetProto_SetFixedEvent::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SetFixedEvent::set_has_v() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SetFixedEvent::clear_has_v() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SetFixedEvent::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 NetProto_SetFixedEvent::v() const {
  return v_;
}
inline void NetProto_SetFixedEvent::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
}

// -------------------------------------------------------------------

// NetProto_Info

// optional string content = 1;
inline bool NetProto_Info::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Info::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Info::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Info::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& NetProto_Info::content() const {
  return *content_;
}
inline void NetProto_Info::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_Info::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_Info::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Info::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* NetProto_Info::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_Error

// optional string content = 1;
inline bool NetProto_Error::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Error::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Error::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Error::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& NetProto_Error::content() const {
  return *content_;
}
inline void NetProto_Error::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_Error::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_Error::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Error::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* NetProto_Error::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_GodAward

// optional int64 prevDayRank = 1;
inline bool NetProto_GodAward::has_prevDayRank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GodAward::set_has_prevDayRank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GodAward::clear_has_prevDayRank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GodAward::clear_prevDayRank() {
  prevDayRank_ = GOOGLE_LONGLONG(0);
  clear_has_prevDayRank();
}
inline ::google::protobuf::int64 NetProto_GodAward::prevDayRank() const {
  return prevDayRank_;
}
inline void NetProto_GodAward::set_prevDayRank(::google::protobuf::int64 value) {
  set_has_prevDayRank();
  prevDayRank_ = value;
}

// optional int32 prevDayGoods = 2;
inline bool NetProto_GodAward::has_prevDayGoods() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GodAward::set_has_prevDayGoods() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GodAward::clear_has_prevDayGoods() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GodAward::clear_prevDayGoods() {
  prevDayGoods_ = 0;
  clear_has_prevDayGoods();
}
inline ::google::protobuf::int32 NetProto_GodAward::prevDayGoods() const {
  return prevDayGoods_;
}
inline void NetProto_GodAward::set_prevDayGoods(::google::protobuf::int32 value) {
  set_has_prevDayGoods();
  prevDayGoods_ = value;
}

// optional int64 prevWeekRank = 3;
inline bool NetProto_GodAward::has_prevWeekRank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GodAward::set_has_prevWeekRank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GodAward::clear_has_prevWeekRank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GodAward::clear_prevWeekRank() {
  prevWeekRank_ = GOOGLE_LONGLONG(0);
  clear_has_prevWeekRank();
}
inline ::google::protobuf::int64 NetProto_GodAward::prevWeekRank() const {
  return prevWeekRank_;
}
inline void NetProto_GodAward::set_prevWeekRank(::google::protobuf::int64 value) {
  set_has_prevWeekRank();
  prevWeekRank_ = value;
}

// optional int32 prevWeekGoods = 4;
inline bool NetProto_GodAward::has_prevWeekGoods() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GodAward::set_has_prevWeekGoods() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GodAward::clear_has_prevWeekGoods() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GodAward::clear_prevWeekGoods() {
  prevWeekGoods_ = 0;
  clear_has_prevWeekGoods();
}
inline ::google::protobuf::int32 NetProto_GodAward::prevWeekGoods() const {
  return prevWeekGoods_;
}
inline void NetProto_GodAward::set_prevWeekGoods(::google::protobuf::int32 value) {
  set_has_prevWeekGoods();
  prevWeekGoods_ = value;
}

// -------------------------------------------------------------------

// NetProto_CreateRoom

// optional int32 map = 1;
inline bool NetProto_CreateRoom::has_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_CreateRoom::set_has_map() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_CreateRoom::clear_has_map() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_CreateRoom::clear_map() {
  map_ = 0;
  clear_has_map();
}
inline ::google::protobuf::int32 NetProto_CreateRoom::map() const {
  return map_;
}
inline void NetProto_CreateRoom::set_map(::google::protobuf::int32 value) {
  set_has_map();
  map_ = value;
}

// optional bool noPower = 2;
inline bool NetProto_CreateRoom::has_noPower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_CreateRoom::set_has_noPower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_CreateRoom::clear_has_noPower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_CreateRoom::clear_noPower() {
  noPower_ = false;
  clear_has_noPower();
}
inline bool NetProto_CreateRoom::noPower() const {
  return noPower_;
}
inline void NetProto_CreateRoom::set_noPower(bool value) {
  set_has_noPower();
  noPower_ = value;
}

// optional .RoomInfo info = 3;
inline bool NetProto_CreateRoom::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_CreateRoom::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_CreateRoom::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_CreateRoom::clear_info() {
  if (info_ != NULL) info_->::RoomInfo::Clear();
  clear_has_info();
}
inline const ::RoomInfo& NetProto_CreateRoom::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::RoomInfo* NetProto_CreateRoom::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::RoomInfo;
  return info_;
}
inline ::RoomInfo* NetProto_CreateRoom::release_info() {
  clear_has_info();
  ::RoomInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_JoinRoom

// optional int32 id = 1;
inline bool NetProto_JoinRoom::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_JoinRoom::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_JoinRoom::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_JoinRoom::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_JoinRoom::id() const {
  return id_;
}
inline void NetProto_JoinRoom::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 pos = 2;
inline bool NetProto_JoinRoom::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_JoinRoom::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_JoinRoom::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_JoinRoom::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 NetProto_JoinRoom::pos() const {
  return pos_;
}
inline void NetProto_JoinRoom::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional .PB_FriendInfo info = 3;
inline bool NetProto_JoinRoom::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_JoinRoom::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_JoinRoom::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_JoinRoom::clear_info() {
  if (info_ != NULL) info_->::PB_FriendInfo::Clear();
  clear_has_info();
}
inline const ::PB_FriendInfo& NetProto_JoinRoom::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PB_FriendInfo* NetProto_JoinRoom::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PB_FriendInfo;
  return info_;
}
inline ::PB_FriendInfo* NetProto_JoinRoom::release_info() {
  clear_has_info();
  ::PB_FriendInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// optional int32 power = 4;
inline bool NetProto_JoinRoom::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_JoinRoom::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_JoinRoom::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_JoinRoom::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 NetProto_JoinRoom::power() const {
  return power_;
}
inline void NetProto_JoinRoom::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional bool noPower = 5;
inline bool NetProto_JoinRoom::has_noPower() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_JoinRoom::set_has_noPower() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_JoinRoom::clear_has_noPower() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_JoinRoom::clear_noPower() {
  noPower_ = false;
  clear_has_noPower();
}
inline bool NetProto_JoinRoom::noPower() const {
  return noPower_;
}
inline void NetProto_JoinRoom::set_noPower(bool value) {
  set_has_noPower();
  noPower_ = value;
}

// optional int32 playerID = 6;
inline bool NetProto_JoinRoom::has_playerID() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_JoinRoom::set_has_playerID() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_JoinRoom::clear_has_playerID() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_JoinRoom::clear_playerID() {
  playerID_ = 0;
  clear_has_playerID();
}
inline ::google::protobuf::int32 NetProto_JoinRoom::playerID() const {
  return playerID_;
}
inline void NetProto_JoinRoom::set_playerID(::google::protobuf::int32 value) {
  set_has_playerID();
  playerID_ = value;
}

// optional .PB_EquipmentAtt att = 7;
inline bool NetProto_JoinRoom::has_att() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_JoinRoom::set_has_att() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_JoinRoom::clear_has_att() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_JoinRoom::clear_att() {
  if (att_ != NULL) att_->::PB_EquipmentAtt::Clear();
  clear_has_att();
}
inline const ::PB_EquipmentAtt& NetProto_JoinRoom::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_EquipmentAtt* NetProto_JoinRoom::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_EquipmentAtt;
  return att_;
}
inline ::PB_EquipmentAtt* NetProto_JoinRoom::release_att() {
  clear_has_att();
  ::PB_EquipmentAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// optional bool male = 8;
inline bool NetProto_JoinRoom::has_male() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_JoinRoom::set_has_male() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_JoinRoom::clear_has_male() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_JoinRoom::clear_male() {
  male_ = false;
  clear_has_male();
}
inline bool NetProto_JoinRoom::male() const {
  return male_;
}
inline void NetProto_JoinRoom::set_male(bool value) {
  set_has_male();
  male_ = value;
}

// optional int32 map = 9;
inline bool NetProto_JoinRoom::has_map() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetProto_JoinRoom::set_has_map() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetProto_JoinRoom::clear_has_map() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetProto_JoinRoom::clear_map() {
  map_ = 0;
  clear_has_map();
}
inline ::google::protobuf::int32 NetProto_JoinRoom::map() const {
  return map_;
}
inline void NetProto_JoinRoom::set_map(::google::protobuf::int32 value) {
  set_has_map();
  map_ = value;
}

// repeated .PB_EquipAsset equips = 10;
inline int NetProto_JoinRoom::equips_size() const {
  return equips_.size();
}
inline void NetProto_JoinRoom::clear_equips() {
  equips_.Clear();
}
inline const ::PB_EquipAsset& NetProto_JoinRoom::equips(int index) const {
  return equips_.Get(index);
}
inline ::PB_EquipAsset* NetProto_JoinRoom::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::PB_EquipAsset* NetProto_JoinRoom::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset >&
NetProto_JoinRoom::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset >*
NetProto_JoinRoom::mutable_equips() {
  return &equips_;
}

// -------------------------------------------------------------------

// NetProto_LeaveRoom

// optional int32 pos = 1;
inline bool NetProto_LeaveRoom::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_LeaveRoom::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_LeaveRoom::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_LeaveRoom::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 NetProto_LeaveRoom::pos() const {
  return pos_;
}
inline void NetProto_LeaveRoom::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// NetProto_DestroyRoom

// -------------------------------------------------------------------

// NetProto_RoomList

// repeated .RoomInfo rooms = 1;
inline int NetProto_RoomList::rooms_size() const {
  return rooms_.size();
}
inline void NetProto_RoomList::clear_rooms() {
  rooms_.Clear();
}
inline const ::RoomInfo& NetProto_RoomList::rooms(int index) const {
  return rooms_.Get(index);
}
inline ::RoomInfo* NetProto_RoomList::mutable_rooms(int index) {
  return rooms_.Mutable(index);
}
inline ::RoomInfo* NetProto_RoomList::add_rooms() {
  return rooms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RoomInfo >&
NetProto_RoomList::rooms() const {
  return rooms_;
}
inline ::google::protobuf::RepeatedPtrField< ::RoomInfo >*
NetProto_RoomList::mutable_rooms() {
  return &rooms_;
}

// -------------------------------------------------------------------

// NetProto_EvictRole

// optional int32 pos = 1;
inline bool NetProto_EvictRole::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_EvictRole::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_EvictRole::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_EvictRole::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 NetProto_EvictRole::pos() const {
  return pos_;
}
inline void NetProto_EvictRole::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// NetProto_InviteFriend

// optional int64 roleID = 1;
inline bool NetProto_InviteFriend::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_InviteFriend::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_InviteFriend::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_InviteFriend::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_InviteFriend::roleID() const {
  return roleID_;
}
inline void NetProto_InviteFriend::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 id = 2;
inline bool NetProto_InviteFriend::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_InviteFriend::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_InviteFriend::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_InviteFriend::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_InviteFriend::id() const {
  return id_;
}
inline void NetProto_InviteFriend::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string src = 3;
inline bool NetProto_InviteFriend::has_src() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_InviteFriend::set_has_src() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_InviteFriend::clear_has_src() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_InviteFriend::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& NetProto_InviteFriend::src() const {
  return *src_;
}
inline void NetProto_InviteFriend::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void NetProto_InviteFriend::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void NetProto_InviteFriend::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_InviteFriend::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* NetProto_InviteFriend::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 map = 4;
inline bool NetProto_InviteFriend::has_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_InviteFriend::set_has_map() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_InviteFriend::clear_has_map() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_InviteFriend::clear_map() {
  map_ = 0;
  clear_has_map();
}
inline ::google::protobuf::int32 NetProto_InviteFriend::map() const {
  return map_;
}
inline void NetProto_InviteFriend::set_map(::google::protobuf::int32 value) {
  set_has_map();
  map_ = value;
}

// optional int32 flag = 5;
inline bool NetProto_InviteFriend::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_InviteFriend::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_InviteFriend::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_InviteFriend::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 NetProto_InviteFriend::flag() const {
  return flag_;
}
inline void NetProto_InviteFriend::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// NetProto_BeginMultiRoom

// -------------------------------------------------------------------

// NetProto_ResetCheckPoint

// -------------------------------------------------------------------

// NetProto_GenPet

// optional int32 id = 1;
inline bool NetProto_GenPet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GenPet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GenPet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GenPet::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_GenPet::id() const {
  return id_;
}
inline void NetProto_GenPet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 player = 2;
inline bool NetProto_GenPet::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GenPet::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GenPet::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GenPet::clear_player() {
  player_ = 0;
  clear_has_player();
}
inline ::google::protobuf::int32 NetProto_GenPet::player() const {
  return player_;
}
inline void NetProto_GenPet::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
}

// -------------------------------------------------------------------

// NetProto_OpenObstacle

// optional int32 id = 1;
inline bool NetProto_OpenObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_OpenObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_OpenObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_OpenObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_OpenObstacle::id() const {
  return id_;
}
inline void NetProto_OpenObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_RegistDeviceServer

// optional string deviceID = 1;
inline bool NetProto_RegistDeviceServer::has_deviceID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RegistDeviceServer::set_has_deviceID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RegistDeviceServer::clear_has_deviceID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RegistDeviceServer::clear_deviceID() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    deviceID_->clear();
  }
  clear_has_deviceID();
}
inline const ::std::string& NetProto_RegistDeviceServer::deviceID() const {
  return *deviceID_;
}
inline void NetProto_RegistDeviceServer::set_deviceID(const ::std::string& value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_RegistDeviceServer::set_deviceID(const char* value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_RegistDeviceServer::set_deviceID(const char* value, size_t size) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_RegistDeviceServer::mutable_deviceID() {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  return deviceID_;
}
inline ::std::string* NetProto_RegistDeviceServer::release_deviceID() {
  clear_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceID_;
    deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string idfa = 2;
inline bool NetProto_RegistDeviceServer::has_idfa() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_RegistDeviceServer::set_has_idfa() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_RegistDeviceServer::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_RegistDeviceServer::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& NetProto_RegistDeviceServer::idfa() const {
  return *idfa_;
}
inline void NetProto_RegistDeviceServer::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_RegistDeviceServer::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_RegistDeviceServer::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_RegistDeviceServer::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  return idfa_;
}
inline ::std::string* NetProto_RegistDeviceServer::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_StartLoad1

// optional string deviceID = 1;
inline bool NetProto_StartLoad1::has_deviceID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_StartLoad1::set_has_deviceID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_StartLoad1::clear_has_deviceID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_StartLoad1::clear_deviceID() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    deviceID_->clear();
  }
  clear_has_deviceID();
}
inline const ::std::string& NetProto_StartLoad1::deviceID() const {
  return *deviceID_;
}
inline void NetProto_StartLoad1::set_deviceID(const ::std::string& value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_StartLoad1::set_deviceID(const char* value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_StartLoad1::set_deviceID(const char* value, size_t size) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_StartLoad1::mutable_deviceID() {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  return deviceID_;
}
inline ::std::string* NetProto_StartLoad1::release_deviceID() {
  clear_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceID_;
    deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string idfa = 2;
inline bool NetProto_StartLoad1::has_idfa() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_StartLoad1::set_has_idfa() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_StartLoad1::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_StartLoad1::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& NetProto_StartLoad1::idfa() const {
  return *idfa_;
}
inline void NetProto_StartLoad1::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_StartLoad1::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_StartLoad1::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_StartLoad1::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  return idfa_;
}
inline ::std::string* NetProto_StartLoad1::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_EndLoad1

// optional string deviceID = 1;
inline bool NetProto_EndLoad1::has_deviceID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_EndLoad1::set_has_deviceID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_EndLoad1::clear_has_deviceID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_EndLoad1::clear_deviceID() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    deviceID_->clear();
  }
  clear_has_deviceID();
}
inline const ::std::string& NetProto_EndLoad1::deviceID() const {
  return *deviceID_;
}
inline void NetProto_EndLoad1::set_deviceID(const ::std::string& value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_EndLoad1::set_deviceID(const char* value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_EndLoad1::set_deviceID(const char* value, size_t size) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_EndLoad1::mutable_deviceID() {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  return deviceID_;
}
inline ::std::string* NetProto_EndLoad1::release_deviceID() {
  clear_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceID_;
    deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string idfa = 2;
inline bool NetProto_EndLoad1::has_idfa() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_EndLoad1::set_has_idfa() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_EndLoad1::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_EndLoad1::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& NetProto_EndLoad1::idfa() const {
  return *idfa_;
}
inline void NetProto_EndLoad1::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_EndLoad1::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_EndLoad1::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_EndLoad1::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  return idfa_;
}
inline ::std::string* NetProto_EndLoad1::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_StartLoad2

// -------------------------------------------------------------------

// NetProto_EndLoad2

// -------------------------------------------------------------------

// NetProto_BeginFighting

// -------------------------------------------------------------------

// NetProto_DelNPCs

// repeated int32 id = 1;
inline int NetProto_DelNPCs::id_size() const {
  return id_.size();
}
inline void NetProto_DelNPCs::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 NetProto_DelNPCs::id(int index) const {
  return id_.Get(index);
}
inline void NetProto_DelNPCs::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
}
inline void NetProto_DelNPCs::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_DelNPCs::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_DelNPCs::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// NetProto_WorldBossCurRank

// repeated .RecordInfo rank = 1;
inline int NetProto_WorldBossCurRank::rank_size() const {
  return rank_.size();
}
inline void NetProto_WorldBossCurRank::clear_rank() {
  rank_.Clear();
}
inline const ::RecordInfo& NetProto_WorldBossCurRank::rank(int index) const {
  return rank_.Get(index);
}
inline ::RecordInfo* NetProto_WorldBossCurRank::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::RecordInfo* NetProto_WorldBossCurRank::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
NetProto_WorldBossCurRank::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
NetProto_WorldBossCurRank::mutable_rank() {
  return &rank_;
}

// optional .RecordInfo self = 2;
inline bool NetProto_WorldBossCurRank::has_self() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_WorldBossCurRank::set_has_self() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_WorldBossCurRank::clear_has_self() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_WorldBossCurRank::clear_self() {
  if (self_ != NULL) self_->::RecordInfo::Clear();
  clear_has_self();
}
inline const ::RecordInfo& NetProto_WorldBossCurRank::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::RecordInfo* NetProto_WorldBossCurRank::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::RecordInfo;
  return self_;
}
inline ::RecordInfo* NetProto_WorldBossCurRank::release_self() {
  clear_has_self();
  ::RecordInfo* temp = self_;
  self_ = NULL;
  return temp;
}

// optional int32 selfRank = 3;
inline bool NetProto_WorldBossCurRank::has_selfRank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_WorldBossCurRank::set_has_selfRank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_WorldBossCurRank::clear_has_selfRank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_WorldBossCurRank::clear_selfRank() {
  selfRank_ = 0;
  clear_has_selfRank();
}
inline ::google::protobuf::int32 NetProto_WorldBossCurRank::selfRank() const {
  return selfRank_;
}
inline void NetProto_WorldBossCurRank::set_selfRank(::google::protobuf::int32 value) {
  set_has_selfRank();
  selfRank_ = value;
}

// -------------------------------------------------------------------

// NetProto_FactionWarCurRank

// repeated .RecordInfo rank = 1;
inline int NetProto_FactionWarCurRank::rank_size() const {
  return rank_.size();
}
inline void NetProto_FactionWarCurRank::clear_rank() {
  rank_.Clear();
}
inline const ::RecordInfo& NetProto_FactionWarCurRank::rank(int index) const {
  return rank_.Get(index);
}
inline ::RecordInfo* NetProto_FactionWarCurRank::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::RecordInfo* NetProto_FactionWarCurRank::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
NetProto_FactionWarCurRank::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
NetProto_FactionWarCurRank::mutable_rank() {
  return &rank_;
}

// optional .RecordInfo self = 2;
inline bool NetProto_FactionWarCurRank::has_self() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_FactionWarCurRank::set_has_self() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_FactionWarCurRank::clear_has_self() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_FactionWarCurRank::clear_self() {
  if (self_ != NULL) self_->::RecordInfo::Clear();
  clear_has_self();
}
inline const ::RecordInfo& NetProto_FactionWarCurRank::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::RecordInfo* NetProto_FactionWarCurRank::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::RecordInfo;
  return self_;
}
inline ::RecordInfo* NetProto_FactionWarCurRank::release_self() {
  clear_has_self();
  ::RecordInfo* temp = self_;
  self_ = NULL;
  return temp;
}

// optional int32 selfRank = 3;
inline bool NetProto_FactionWarCurRank::has_selfRank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_FactionWarCurRank::set_has_selfRank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_FactionWarCurRank::clear_has_selfRank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_FactionWarCurRank::clear_selfRank() {
  selfRank_ = 0;
  clear_has_selfRank();
}
inline ::google::protobuf::int32 NetProto_FactionWarCurRank::selfRank() const {
  return selfRank_;
}
inline void NetProto_FactionWarCurRank::set_selfRank(::google::protobuf::int32 value) {
  set_has_selfRank();
  selfRank_ = value;
}

// -------------------------------------------------------------------

// NetProto_FactionWarPrevWinner

// optional string name = 1;
inline bool NetProto_FactionWarPrevWinner::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FactionWarPrevWinner::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FactionWarPrevWinner::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FactionWarPrevWinner::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetProto_FactionWarPrevWinner::name() const {
  return *name_;
}
inline void NetProto_FactionWarPrevWinner::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_FactionWarPrevWinner::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_FactionWarPrevWinner::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_FactionWarPrevWinner::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetProto_FactionWarPrevWinner::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_GetMonthCardAward

// -------------------------------------------------------------------

// NetProto_ExchangeGoods

// optional int32 index = 1;
inline bool NetProto_ExchangeGoods::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ExchangeGoods::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ExchangeGoods::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ExchangeGoods::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_ExchangeGoods::index() const {
  return index_;
}
inline void NetProto_ExchangeGoods::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional bool all = 2;
inline bool NetProto_ExchangeGoods::has_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ExchangeGoods::set_has_all() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ExchangeGoods::clear_has_all() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ExchangeGoods::clear_all() {
  all_ = false;
  clear_has_all();
}
inline bool NetProto_ExchangeGoods::all() const {
  return all_;
}
inline void NetProto_ExchangeGoods::set_all(bool value) {
  set_has_all();
  all_ = value;
}

// -------------------------------------------------------------------

// NetProto_BuyMonthCard

// optional int32 expire = 1;
inline bool NetProto_BuyMonthCard::has_expire() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BuyMonthCard::set_has_expire() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BuyMonthCard::clear_has_expire() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BuyMonthCard::clear_expire() {
  expire_ = 0;
  clear_has_expire();
}
inline ::google::protobuf::int32 NetProto_BuyMonthCard::expire() const {
  return expire_;
}
inline void NetProto_BuyMonthCard::set_expire(::google::protobuf::int32 value) {
  set_has_expire();
  expire_ = value;
}

// -------------------------------------------------------------------

// NetProto_UseLuckyCard

// -------------------------------------------------------------------

// NetProto_BIActive

// optional string deviceID = 1;
inline bool NetProto_BIActive::has_deviceID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BIActive::set_has_deviceID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BIActive::clear_has_deviceID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BIActive::clear_deviceID() {
  if (deviceID_ != &::google::protobuf::internal::kEmptyString) {
    deviceID_->clear();
  }
  clear_has_deviceID();
}
inline const ::std::string& NetProto_BIActive::deviceID() const {
  return *deviceID_;
}
inline void NetProto_BIActive::set_deviceID(const ::std::string& value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_BIActive::set_deviceID(const char* value) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(value);
}
inline void NetProto_BIActive::set_deviceID(const char* value, size_t size) {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  deviceID_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_BIActive::mutable_deviceID() {
  set_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    deviceID_ = new ::std::string;
  }
  return deviceID_;
}
inline ::std::string* NetProto_BIActive::release_deviceID() {
  clear_has_deviceID();
  if (deviceID_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceID_;
    deviceID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string idfa = 2;
inline bool NetProto_BIActive::has_idfa() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_BIActive::set_has_idfa() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_BIActive::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_BIActive::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& NetProto_BIActive::idfa() const {
  return *idfa_;
}
inline void NetProto_BIActive::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_BIActive::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void NetProto_BIActive::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_BIActive::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  return idfa_;
}
inline ::std::string* NetProto_BIActive::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_Move

// optional .NetProto_Move.Type type = 1;
inline bool NetProto_Move::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Move::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Move::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Move::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_Move_Type NetProto_Move::type() const {
  return static_cast< ::NetProto_Move_Type >(type_);
}
inline void NetProto_Move::set_type(::NetProto_Move_Type value) {
  GOOGLE_DCHECK(::NetProto_Move_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool NetProto_Move::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Move::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Move::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Move::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Move::id() const {
  return id_;
}
inline void NetProto_Move::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PB_Vector3f start = 3;
inline bool NetProto_Move::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Move::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Move::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Move::clear_start() {
  if (start_ != NULL) start_->::PB_Vector3f::Clear();
  clear_has_start();
}
inline const ::PB_Vector3f& NetProto_Move::start() const {
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::PB_Vector3f* NetProto_Move::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::PB_Vector3f;
  return start_;
}
inline ::PB_Vector3f* NetProto_Move::release_start() {
  clear_has_start();
  ::PB_Vector3f* temp = start_;
  start_ = NULL;
  return temp;
}

// optional .PB_Vector3f end = 4;
inline bool NetProto_Move::has_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Move::set_has_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Move::clear_has_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Move::clear_end() {
  if (end_ != NULL) end_->::PB_Vector3f::Clear();
  clear_has_end();
}
inline const ::PB_Vector3f& NetProto_Move::end() const {
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
inline ::PB_Vector3f* NetProto_Move::mutable_end() {
  set_has_end();
  if (end_ == NULL) end_ = new ::PB_Vector3f;
  return end_;
}
inline ::PB_Vector3f* NetProto_Move::release_end() {
  clear_has_end();
  ::PB_Vector3f* temp = end_;
  end_ = NULL;
  return temp;
}

// optional int32 serialNum = 5;
inline bool NetProto_Move::has_serialNum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_Move::set_has_serialNum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_Move::clear_has_serialNum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_Move::clear_serialNum() {
  serialNum_ = 0;
  clear_has_serialNum();
}
inline ::google::protobuf::int32 NetProto_Move::serialNum() const {
  return serialNum_;
}
inline void NetProto_Move::set_serialNum(::google::protobuf::int32 value) {
  set_has_serialNum();
  serialNum_ = value;
}

// -------------------------------------------------------------------

// NetProto_Wear

// optional int32 id = 1;
inline bool NetProto_Wear::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Wear::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Wear::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Wear::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Wear::id() const {
  return id_;
}
inline void NetProto_Wear::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 equipment = 2;
inline bool NetProto_Wear::has_equipment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Wear::set_has_equipment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Wear::clear_has_equipment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Wear::clear_equipment() {
  equipment_ = GOOGLE_LONGLONG(0);
  clear_has_equipment();
}
inline ::google::protobuf::int64 NetProto_Wear::equipment() const {
  return equipment_;
}
inline void NetProto_Wear::set_equipment(::google::protobuf::int64 value) {
  set_has_equipment();
  equipment_ = value;
}

// -------------------------------------------------------------------

// NetProto_Unwear

// optional int32 id = 1;
inline bool NetProto_Unwear::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Unwear::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Unwear::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Unwear::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Unwear::id() const {
  return id_;
}
inline void NetProto_Unwear::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .EquipmentInfo.Type pos = 2;
inline bool NetProto_Unwear::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Unwear::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Unwear::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Unwear::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::EquipmentInfo_Type NetProto_Unwear::pos() const {
  return static_cast< ::EquipmentInfo_Type >(pos_);
}
inline void NetProto_Unwear::set_pos(::EquipmentInfo_Type value) {
  GOOGLE_DCHECK(::EquipmentInfo_Type_IsValid(value));
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// NetProto_Attack

// optional .NetProto_Attack.Type aType = 1;
inline bool NetProto_Attack::has_aType() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Attack::set_has_aType() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Attack::clear_has_aType() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Attack::clear_aType() {
  aType_ = 0;
  clear_has_aType();
}
inline ::NetProto_Attack_Type NetProto_Attack::aType() const {
  return static_cast< ::NetProto_Attack_Type >(aType_);
}
inline void NetProto_Attack::set_aType(::NetProto_Attack_Type value) {
  GOOGLE_DCHECK(::NetProto_Attack_Type_IsValid(value));
  set_has_aType();
  aType_ = value;
}

// optional int32 aID = 2;
inline bool NetProto_Attack::has_aID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Attack::set_has_aID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Attack::clear_has_aID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Attack::clear_aID() {
  aID_ = 0;
  clear_has_aID();
}
inline ::google::protobuf::int32 NetProto_Attack::aID() const {
  return aID_;
}
inline void NetProto_Attack::set_aID(::google::protobuf::int32 value) {
  set_has_aID();
  aID_ = value;
}

// optional .PB_Skill aSkill = 3;
inline bool NetProto_Attack::has_aSkill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Attack::set_has_aSkill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Attack::clear_has_aSkill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Attack::clear_aSkill() {
  if (aSkill_ != NULL) aSkill_->::PB_Skill::Clear();
  clear_has_aSkill();
}
inline const ::PB_Skill& NetProto_Attack::aSkill() const {
  return aSkill_ != NULL ? *aSkill_ : *default_instance_->aSkill_;
}
inline ::PB_Skill* NetProto_Attack::mutable_aSkill() {
  set_has_aSkill();
  if (aSkill_ == NULL) aSkill_ = new ::PB_Skill;
  return aSkill_;
}
inline ::PB_Skill* NetProto_Attack::release_aSkill() {
  clear_has_aSkill();
  ::PB_Skill* temp = aSkill_;
  aSkill_ = NULL;
  return temp;
}

// optional .NetProto_Attack.Type dType = 4;
inline bool NetProto_Attack::has_dType() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Attack::set_has_dType() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Attack::clear_has_dType() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Attack::clear_dType() {
  dType_ = 0;
  clear_has_dType();
}
inline ::NetProto_Attack_Type NetProto_Attack::dType() const {
  return static_cast< ::NetProto_Attack_Type >(dType_);
}
inline void NetProto_Attack::set_dType(::NetProto_Attack_Type value) {
  GOOGLE_DCHECK(::NetProto_Attack_Type_IsValid(value));
  set_has_dType();
  dType_ = value;
}

// optional int32 dID = 5;
inline bool NetProto_Attack::has_dID() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_Attack::set_has_dID() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_Attack::clear_has_dID() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_Attack::clear_dID() {
  dID_ = 0;
  clear_has_dID();
}
inline ::google::protobuf::int32 NetProto_Attack::dID() const {
  return dID_;
}
inline void NetProto_Attack::set_dID(::google::protobuf::int32 value) {
  set_has_dID();
  dID_ = value;
}

// optional .PB_Vector3f tPos = 6;
inline bool NetProto_Attack::has_tPos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_Attack::set_has_tPos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_Attack::clear_has_tPos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_Attack::clear_tPos() {
  if (tPos_ != NULL) tPos_->::PB_Vector3f::Clear();
  clear_has_tPos();
}
inline const ::PB_Vector3f& NetProto_Attack::tPos() const {
  return tPos_ != NULL ? *tPos_ : *default_instance_->tPos_;
}
inline ::PB_Vector3f* NetProto_Attack::mutable_tPos() {
  set_has_tPos();
  if (tPos_ == NULL) tPos_ = new ::PB_Vector3f;
  return tPos_;
}
inline ::PB_Vector3f* NetProto_Attack::release_tPos() {
  clear_has_tPos();
  ::PB_Vector3f* temp = tPos_;
  tPos_ = NULL;
  return temp;
}

// repeated int32 skills = 7;
inline int NetProto_Attack::skills_size() const {
  return skills_.size();
}
inline void NetProto_Attack::clear_skills() {
  skills_.Clear();
}
inline ::google::protobuf::int32 NetProto_Attack::skills(int index) const {
  return skills_.Get(index);
}
inline void NetProto_Attack::set_skills(int index, ::google::protobuf::int32 value) {
  skills_.Set(index, value);
}
inline void NetProto_Attack::add_skills(::google::protobuf::int32 value) {
  skills_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_Attack::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_Attack::mutable_skills() {
  return &skills_;
}

// optional int64 serverTime = 8;
inline bool NetProto_Attack::has_serverTime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_Attack::set_has_serverTime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_Attack::clear_has_serverTime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_Attack::clear_serverTime() {
  serverTime_ = GOOGLE_LONGLONG(0);
  clear_has_serverTime();
}
inline ::google::protobuf::int64 NetProto_Attack::serverTime() const {
  return serverTime_;
}
inline void NetProto_Attack::set_serverTime(::google::protobuf::int64 value) {
  set_has_serverTime();
  serverTime_ = value;
}

// -------------------------------------------------------------------

// NetProto_DoAttack

// optional .NetProto_DoAttack.Type aType = 1;
inline bool NetProto_DoAttack::has_aType() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DoAttack::set_has_aType() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DoAttack::clear_has_aType() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DoAttack::clear_aType() {
  aType_ = 0;
  clear_has_aType();
}
inline ::NetProto_DoAttack_Type NetProto_DoAttack::aType() const {
  return static_cast< ::NetProto_DoAttack_Type >(aType_);
}
inline void NetProto_DoAttack::set_aType(::NetProto_DoAttack_Type value) {
  GOOGLE_DCHECK(::NetProto_DoAttack_Type_IsValid(value));
  set_has_aType();
  aType_ = value;
}

// optional int32 aID = 2;
inline bool NetProto_DoAttack::has_aID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_DoAttack::set_has_aID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_DoAttack::clear_has_aID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_DoAttack::clear_aID() {
  aID_ = 0;
  clear_has_aID();
}
inline ::google::protobuf::int32 NetProto_DoAttack::aID() const {
  return aID_;
}
inline void NetProto_DoAttack::set_aID(::google::protobuf::int32 value) {
  set_has_aID();
  aID_ = value;
}

// optional .PB_Skill aSkill = 3;
inline bool NetProto_DoAttack::has_aSkill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_DoAttack::set_has_aSkill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_DoAttack::clear_has_aSkill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_DoAttack::clear_aSkill() {
  if (aSkill_ != NULL) aSkill_->::PB_Skill::Clear();
  clear_has_aSkill();
}
inline const ::PB_Skill& NetProto_DoAttack::aSkill() const {
  return aSkill_ != NULL ? *aSkill_ : *default_instance_->aSkill_;
}
inline ::PB_Skill* NetProto_DoAttack::mutable_aSkill() {
  set_has_aSkill();
  if (aSkill_ == NULL) aSkill_ = new ::PB_Skill;
  return aSkill_;
}
inline ::PB_Skill* NetProto_DoAttack::release_aSkill() {
  clear_has_aSkill();
  ::PB_Skill* temp = aSkill_;
  aSkill_ = NULL;
  return temp;
}

// repeated int32 aSkillID = 4;
inline int NetProto_DoAttack::aSkillID_size() const {
  return aSkillID_.size();
}
inline void NetProto_DoAttack::clear_aSkillID() {
  aSkillID_.Clear();
}
inline ::google::protobuf::int32 NetProto_DoAttack::aSkillID(int index) const {
  return aSkillID_.Get(index);
}
inline void NetProto_DoAttack::set_aSkillID(int index, ::google::protobuf::int32 value) {
  aSkillID_.Set(index, value);
}
inline void NetProto_DoAttack::add_aSkillID(::google::protobuf::int32 value) {
  aSkillID_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_DoAttack::aSkillID() const {
  return aSkillID_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_DoAttack::mutable_aSkillID() {
  return &aSkillID_;
}

// optional .NetProto_DoAttack.Type dType = 5;
inline bool NetProto_DoAttack::has_dType() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_DoAttack::set_has_dType() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_DoAttack::clear_has_dType() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_DoAttack::clear_dType() {
  dType_ = 0;
  clear_has_dType();
}
inline ::NetProto_DoAttack_Type NetProto_DoAttack::dType() const {
  return static_cast< ::NetProto_DoAttack_Type >(dType_);
}
inline void NetProto_DoAttack::set_dType(::NetProto_DoAttack_Type value) {
  GOOGLE_DCHECK(::NetProto_DoAttack_Type_IsValid(value));
  set_has_dType();
  dType_ = value;
}

// optional int32 dID = 6;
inline bool NetProto_DoAttack::has_dID() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_DoAttack::set_has_dID() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_DoAttack::clear_has_dID() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_DoAttack::clear_dID() {
  dID_ = 0;
  clear_has_dID();
}
inline ::google::protobuf::int32 NetProto_DoAttack::dID() const {
  return dID_;
}
inline void NetProto_DoAttack::set_dID(::google::protobuf::int32 value) {
  set_has_dID();
  dID_ = value;
}

// optional .PB_Vector3f tPos = 7;
inline bool NetProto_DoAttack::has_tPos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_DoAttack::set_has_tPos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_DoAttack::clear_has_tPos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_DoAttack::clear_tPos() {
  if (tPos_ != NULL) tPos_->::PB_Vector3f::Clear();
  clear_has_tPos();
}
inline const ::PB_Vector3f& NetProto_DoAttack::tPos() const {
  return tPos_ != NULL ? *tPos_ : *default_instance_->tPos_;
}
inline ::PB_Vector3f* NetProto_DoAttack::mutable_tPos() {
  set_has_tPos();
  if (tPos_ == NULL) tPos_ = new ::PB_Vector3f;
  return tPos_;
}
inline ::PB_Vector3f* NetProto_DoAttack::release_tPos() {
  clear_has_tPos();
  ::PB_Vector3f* temp = tPos_;
  tPos_ = NULL;
  return temp;
}

// optional .PB_Vector3f aPos = 8;
inline bool NetProto_DoAttack::has_aPos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_DoAttack::set_has_aPos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_DoAttack::clear_has_aPos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_DoAttack::clear_aPos() {
  if (aPos_ != NULL) aPos_->::PB_Vector3f::Clear();
  clear_has_aPos();
}
inline const ::PB_Vector3f& NetProto_DoAttack::aPos() const {
  return aPos_ != NULL ? *aPos_ : *default_instance_->aPos_;
}
inline ::PB_Vector3f* NetProto_DoAttack::mutable_aPos() {
  set_has_aPos();
  if (aPos_ == NULL) aPos_ = new ::PB_Vector3f;
  return aPos_;
}
inline ::PB_Vector3f* NetProto_DoAttack::release_aPos() {
  clear_has_aPos();
  ::PB_Vector3f* temp = aPos_;
  aPos_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_SetPos

// optional int32 id = 1;
inline bool NetProto_SetPos::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SetPos::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SetPos::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SetPos::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_SetPos::id() const {
  return id_;
}
inline void NetProto_SetPos::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 serialNum = 2;
inline bool NetProto_SetPos::has_serialNum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SetPos::set_has_serialNum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SetPos::clear_has_serialNum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SetPos::clear_serialNum() {
  serialNum_ = 0;
  clear_has_serialNum();
}
inline ::google::protobuf::int32 NetProto_SetPos::serialNum() const {
  return serialNum_;
}
inline void NetProto_SetPos::set_serialNum(::google::protobuf::int32 value) {
  set_has_serialNum();
  serialNum_ = value;
}

// optional .PB_Vector3f position = 3;
inline bool NetProto_SetPos::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_SetPos::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_SetPos::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_SetPos::clear_position() {
  if (position_ != NULL) position_->::PB_Vector3f::Clear();
  clear_has_position();
}
inline const ::PB_Vector3f& NetProto_SetPos::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::PB_Vector3f* NetProto_SetPos::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::PB_Vector3f;
  return position_;
}
inline ::PB_Vector3f* NetProto_SetPos::release_position() {
  clear_has_position();
  ::PB_Vector3f* temp = position_;
  position_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_Die

// optional .NetProto_Die.Type type = 1;
inline bool NetProto_Die::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Die::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Die::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Die::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_Die_Type NetProto_Die::type() const {
  return static_cast< ::NetProto_Die_Type >(type_);
}
inline void NetProto_Die::set_type(::NetProto_Die_Type value) {
  GOOGLE_DCHECK(::NetProto_Die_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool NetProto_Die::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Die::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Die::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Die::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Die::id() const {
  return id_;
}
inline void NetProto_Die::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_Die.Type mType = 3;
inline bool NetProto_Die::has_mType() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Die::set_has_mType() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Die::clear_has_mType() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Die::clear_mType() {
  mType_ = 0;
  clear_has_mType();
}
inline ::NetProto_Die_Type NetProto_Die::mType() const {
  return static_cast< ::NetProto_Die_Type >(mType_);
}
inline void NetProto_Die::set_mType(::NetProto_Die_Type value) {
  GOOGLE_DCHECK(::NetProto_Die_Type_IsValid(value));
  set_has_mType();
  mType_ = value;
}

// optional int32 mID = 4;
inline bool NetProto_Die::has_mID() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Die::set_has_mID() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Die::clear_has_mID() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Die::clear_mID() {
  mID_ = 0;
  clear_has_mID();
}
inline ::google::protobuf::int32 NetProto_Die::mID() const {
  return mID_;
}
inline void NetProto_Die::set_mID(::google::protobuf::int32 value) {
  set_has_mID();
  mID_ = value;
}

// -------------------------------------------------------------------

// NetProto_Revive

// optional .NetProto_Revive.Type type = 1;
inline bool NetProto_Revive::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Revive::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Revive::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Revive::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_Revive_Type NetProto_Revive::type() const {
  return static_cast< ::NetProto_Revive_Type >(type_);
}
inline void NetProto_Revive::set_type(::NetProto_Revive_Type value) {
  GOOGLE_DCHECK(::NetProto_Revive_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool NetProto_Revive::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Revive::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Revive::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Revive::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Revive::id() const {
  return id_;
}
inline void NetProto_Revive::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PB_Vector2i coord = 3;
inline bool NetProto_Revive::has_coord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Revive::set_has_coord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Revive::clear_has_coord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Revive::clear_coord() {
  if (coord_ != NULL) coord_->::PB_Vector2i::Clear();
  clear_has_coord();
}
inline const ::PB_Vector2i& NetProto_Revive::coord() const {
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::PB_Vector2i* NetProto_Revive::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) coord_ = new ::PB_Vector2i;
  return coord_;
}
inline ::PB_Vector2i* NetProto_Revive::release_coord() {
  clear_has_coord();
  ::PB_Vector2i* temp = coord_;
  coord_ = NULL;
  return temp;
}

// optional float hp = 4;
inline bool NetProto_Revive::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Revive::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Revive::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Revive::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline float NetProto_Revive::hp() const {
  return hp_;
}
inline void NetProto_Revive::set_hp(float value) {
  set_has_hp();
  hp_ = value;
}

// optional bool changeScene = 5;
inline bool NetProto_Revive::has_changeScene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_Revive::set_has_changeScene() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_Revive::clear_has_changeScene() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_Revive::clear_changeScene() {
  changeScene_ = false;
  clear_has_changeScene();
}
inline bool NetProto_Revive::changeScene() const {
  return changeScene_;
}
inline void NetProto_Revive::set_changeScene(bool value) {
  set_has_changeScene();
  changeScene_ = value;
}

// optional .NetProto_Revive.Way way = 6;
inline bool NetProto_Revive::has_way() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_Revive::set_has_way() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_Revive::clear_has_way() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_Revive::clear_way() {
  way_ = 0;
  clear_has_way();
}
inline ::NetProto_Revive_Way NetProto_Revive::way() const {
  return static_cast< ::NetProto_Revive_Way >(way_);
}
inline void NetProto_Revive::set_way(::NetProto_Revive_Way value) {
  GOOGLE_DCHECK(::NetProto_Revive_Way_IsValid(value));
  set_has_way();
  way_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyExp

// optional int64 exp = 1;
inline bool NetProto_ModifyExp::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyExp::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyExp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyExp::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 NetProto_ModifyExp::exp() const {
  return exp_;
}
inline void NetProto_ModifyExp::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// NetProto_PickItem

// optional int32 dropList = 1;
inline bool NetProto_PickItem::has_dropList() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PickItem::set_has_dropList() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PickItem::clear_has_dropList() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PickItem::clear_dropList() {
  dropList_ = 0;
  clear_has_dropList();
}
inline ::google::protobuf::int32 NetProto_PickItem::dropList() const {
  return dropList_;
}
inline void NetProto_PickItem::set_dropList(::google::protobuf::int32 value) {
  set_has_dropList();
  dropList_ = value;
}

// optional int32 index = 2;
inline bool NetProto_PickItem::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_PickItem::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_PickItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_PickItem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_PickItem::index() const {
  return index_;
}
inline void NetProto_PickItem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 packagePos = 3;
inline bool NetProto_PickItem::has_packagePos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_PickItem::set_has_packagePos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_PickItem::clear_has_packagePos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_PickItem::clear_packagePos() {
  packagePos_ = 0;
  clear_has_packagePos();
}
inline ::google::protobuf::int32 NetProto_PickItem::packagePos() const {
  return packagePos_;
}
inline void NetProto_PickItem::set_packagePos(::google::protobuf::int32 value) {
  set_has_packagePos();
  packagePos_ = value;
}

// optional int32 owner = 4;
inline bool NetProto_PickItem::has_owner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_PickItem::set_has_owner() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_PickItem::clear_has_owner() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_PickItem::clear_owner() {
  owner_ = 0;
  clear_has_owner();
}
inline ::google::protobuf::int32 NetProto_PickItem::owner() const {
  return owner_;
}
inline void NetProto_PickItem::set_owner(::google::protobuf::int32 value) {
  set_has_owner();
  owner_ = value;
}

// -------------------------------------------------------------------

// NetProto_LevelUp

// optional int32 id = 1;
inline bool NetProto_LevelUp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_LevelUp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_LevelUp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_LevelUp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_LevelUp::id() const {
  return id_;
}
inline void NetProto_LevelUp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2;
inline bool NetProto_LevelUp::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_LevelUp::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_LevelUp::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_LevelUp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetProto_LevelUp::level() const {
  return level_;
}
inline void NetProto_LevelUp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyMoney

// optional int64 money = 1;
inline bool NetProto_ModifyMoney::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyMoney::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyMoney::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyMoney::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 NetProto_ModifyMoney::money() const {
  return money_;
}
inline void NetProto_ModifyMoney::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// NetProto_GetItem

// optional .PB_ItemInfo item = 1;
inline bool NetProto_GetItem::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GetItem::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GetItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GetItem::clear_item() {
  if (item_ != NULL) item_->::PB_ItemInfo::Clear();
  clear_has_item();
}
inline const ::PB_ItemInfo& NetProto_GetItem::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::PB_ItemInfo* NetProto_GetItem::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::PB_ItemInfo;
  return item_;
}
inline ::PB_ItemInfo* NetProto_GetItem::release_item() {
  clear_has_item();
  ::PB_ItemInfo* temp = item_;
  item_ = NULL;
  return temp;
}

// optional int32 pos = 2;
inline bool NetProto_GetItem::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GetItem::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GetItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GetItem::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 NetProto_GetItem::pos() const {
  return pos_;
}
inline void NetProto_GetItem::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// NetProto_QueryPlayer

// optional int64 roleID = 1;
inline bool NetProto_QueryPlayer::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_QueryPlayer::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_QueryPlayer::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_QueryPlayer::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_QueryPlayer::roleID() const {
  return roleID_;
}
inline void NetProto_QueryPlayer::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional .PB_PlayerAtt att = 2;
inline bool NetProto_QueryPlayer::has_att() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_QueryPlayer::set_has_att() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_QueryPlayer::clear_has_att() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_QueryPlayer::clear_att() {
  if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
  clear_has_att();
}
inline const ::PB_PlayerAtt& NetProto_QueryPlayer::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_PlayerAtt* NetProto_QueryPlayer::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_PlayerAtt;
  return att_;
}
inline ::PB_PlayerAtt* NetProto_QueryPlayer::release_att() {
  clear_has_att();
  ::PB_PlayerAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// optional bool online = 3;
inline bool NetProto_QueryPlayer::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_QueryPlayer::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_QueryPlayer::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_QueryPlayer::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool NetProto_QueryPlayer::online() const {
  return online_;
}
inline void NetProto_QueryPlayer::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional string name = 4;
inline bool NetProto_QueryPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_QueryPlayer::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_QueryPlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_QueryPlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetProto_QueryPlayer::name() const {
  return *name_;
}
inline void NetProto_QueryPlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_QueryPlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_QueryPlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_QueryPlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetProto_QueryPlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_PlayerStatus

// repeated int64 roles = 1;
inline int NetProto_PlayerStatus::roles_size() const {
  return roles_.size();
}
inline void NetProto_PlayerStatus::clear_roles() {
  roles_.Clear();
}
inline ::google::protobuf::int64 NetProto_PlayerStatus::roles(int index) const {
  return roles_.Get(index);
}
inline void NetProto_PlayerStatus::set_roles(int index, ::google::protobuf::int64 value) {
  roles_.Set(index, value);
}
inline void NetProto_PlayerStatus::add_roles(::google::protobuf::int64 value) {
  roles_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
NetProto_PlayerStatus::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
NetProto_PlayerStatus::mutable_roles() {
  return &roles_;
}

// repeated .NetProto_PlayerStatus.Status statuses = 2;
inline int NetProto_PlayerStatus::statuses_size() const {
  return statuses_.size();
}
inline void NetProto_PlayerStatus::clear_statuses() {
  statuses_.Clear();
}
inline ::NetProto_PlayerStatus_Status NetProto_PlayerStatus::statuses(int index) const {
  return static_cast< ::NetProto_PlayerStatus_Status >(statuses_.Get(index));
}
inline void NetProto_PlayerStatus::set_statuses(int index, ::NetProto_PlayerStatus_Status value) {
  GOOGLE_DCHECK(::NetProto_PlayerStatus_Status_IsValid(value));
  statuses_.Set(index, value);
}
inline void NetProto_PlayerStatus::add_statuses(::NetProto_PlayerStatus_Status value) {
  GOOGLE_DCHECK(::NetProto_PlayerStatus_Status_IsValid(value));
  statuses_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
NetProto_PlayerStatus::statuses() const {
  return statuses_;
}
inline ::google::protobuf::RepeatedField<int>*
NetProto_PlayerStatus::mutable_statuses() {
  return &statuses_;
}

// repeated int32 level = 3;
inline int NetProto_PlayerStatus::level_size() const {
  return level_.size();
}
inline void NetProto_PlayerStatus::clear_level() {
  level_.Clear();
}
inline ::google::protobuf::int32 NetProto_PlayerStatus::level(int index) const {
  return level_.Get(index);
}
inline void NetProto_PlayerStatus::set_level(int index, ::google::protobuf::int32 value) {
  level_.Set(index, value);
}
inline void NetProto_PlayerStatus::add_level(::google::protobuf::int32 value) {
  level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_PlayerStatus::level() const {
  return level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_PlayerStatus::mutable_level() {
  return &level_;
}

// repeated int32 vip = 4;
inline int NetProto_PlayerStatus::vip_size() const {
  return vip_.size();
}
inline void NetProto_PlayerStatus::clear_vip() {
  vip_.Clear();
}
inline ::google::protobuf::int32 NetProto_PlayerStatus::vip(int index) const {
  return vip_.Get(index);
}
inline void NetProto_PlayerStatus::set_vip(int index, ::google::protobuf::int32 value) {
  vip_.Set(index, value);
}
inline void NetProto_PlayerStatus::add_vip(::google::protobuf::int32 value) {
  vip_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_PlayerStatus::vip() const {
  return vip_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_PlayerStatus::mutable_vip() {
  return &vip_;
}

// -------------------------------------------------------------------

// NetProto_AddFriend

// optional int64 roleID = 1;
inline bool NetProto_AddFriend::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_AddFriend::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_AddFriend::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_AddFriend::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_AddFriend::roleID() const {
  return roleID_;
}
inline void NetProto_AddFriend::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional string name = 2;
inline bool NetProto_AddFriend::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_AddFriend::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_AddFriend::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_AddFriend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetProto_AddFriend::name() const {
  return *name_;
}
inline void NetProto_AddFriend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_AddFriend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_AddFriend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_AddFriend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetProto_AddFriend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .PB_ProfessionInfo.Type professionType = 3;
inline bool NetProto_AddFriend::has_professionType() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_AddFriend::set_has_professionType() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_AddFriend::clear_has_professionType() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_AddFriend::clear_professionType() {
  professionType_ = 0;
  clear_has_professionType();
}
inline ::PB_ProfessionInfo_Type NetProto_AddFriend::professionType() const {
  return static_cast< ::PB_ProfessionInfo_Type >(professionType_);
}
inline void NetProto_AddFriend::set_professionType(::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  set_has_professionType();
  professionType_ = value;
}

// -------------------------------------------------------------------

// NetProto_DelFriend

// optional int64 roleID = 1;
inline bool NetProto_DelFriend::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DelFriend::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DelFriend::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DelFriend::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_DelFriend::roleID() const {
  return roleID_;
}
inline void NetProto_DelFriend::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional bool flag = 2;
inline bool NetProto_DelFriend::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_DelFriend::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_DelFriend::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_DelFriend::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool NetProto_DelFriend::flag() const {
  return flag_;
}
inline void NetProto_DelFriend::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyHP

// optional int32 id = 1;
inline bool NetProto_ModifyHP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyHP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyHP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyHP::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ModifyHP::id() const {
  return id_;
}
inline void NetProto_ModifyHP::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 hp = 2;
inline bool NetProto_ModifyHP::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ModifyHP::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ModifyHP::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ModifyHP::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 NetProto_ModifyHP::hp() const {
  return hp_;
}
inline void NetProto_ModifyHP::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyMana

// optional int32 id = 1;
inline bool NetProto_ModifyMana::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyMana::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyMana::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyMana::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ModifyMana::id() const {
  return id_;
}
inline void NetProto_ModifyMana::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 mana = 2;
inline bool NetProto_ModifyMana::has_mana() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ModifyMana::set_has_mana() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ModifyMana::clear_has_mana() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ModifyMana::clear_mana() {
  mana_ = 0;
  clear_has_mana();
}
inline ::google::protobuf::int32 NetProto_ModifyMana::mana() const {
  return mana_;
}
inline void NetProto_ModifyMana::set_mana(::google::protobuf::int32 value) {
  set_has_mana();
  mana_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyFaction

// optional .NetProto_ModifyFaction.Type type = 1;
inline bool NetProto_ModifyFaction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyFaction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyFaction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyFaction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_ModifyFaction_Type NetProto_ModifyFaction::type() const {
  return static_cast< ::NetProto_ModifyFaction_Type >(type_);
}
inline void NetProto_ModifyFaction::set_type(::NetProto_ModifyFaction_Type value) {
  GOOGLE_DCHECK(::NetProto_ModifyFaction_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool NetProto_ModifyFaction::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ModifyFaction::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ModifyFaction::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ModifyFaction::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ModifyFaction::id() const {
  return id_;
}
inline void NetProto_ModifyFaction::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 selfFaction = 3;
inline bool NetProto_ModifyFaction::has_selfFaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_ModifyFaction::set_has_selfFaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_ModifyFaction::clear_has_selfFaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_ModifyFaction::clear_selfFaction() {
  selfFaction_ = 0;
  clear_has_selfFaction();
}
inline ::google::protobuf::int32 NetProto_ModifyFaction::selfFaction() const {
  return selfFaction_;
}
inline void NetProto_ModifyFaction::set_selfFaction(::google::protobuf::int32 value) {
  set_has_selfFaction();
  selfFaction_ = value;
}

// optional int32 friendlyFaction = 4;
inline bool NetProto_ModifyFaction::has_friendlyFaction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_ModifyFaction::set_has_friendlyFaction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_ModifyFaction::clear_has_friendlyFaction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_ModifyFaction::clear_friendlyFaction() {
  friendlyFaction_ = 0;
  clear_has_friendlyFaction();
}
inline ::google::protobuf::int32 NetProto_ModifyFaction::friendlyFaction() const {
  return friendlyFaction_;
}
inline void NetProto_ModifyFaction::set_friendlyFaction(::google::protobuf::int32 value) {
  set_has_friendlyFaction();
  friendlyFaction_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyMaxHP

// optional int32 id = 1;
inline bool NetProto_ModifyMaxHP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyMaxHP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyMaxHP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyMaxHP::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ModifyMaxHP::id() const {
  return id_;
}
inline void NetProto_ModifyMaxHP::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 maxHP = 2;
inline bool NetProto_ModifyMaxHP::has_maxHP() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ModifyMaxHP::set_has_maxHP() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ModifyMaxHP::clear_has_maxHP() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ModifyMaxHP::clear_maxHP() {
  maxHP_ = 0;
  clear_has_maxHP();
}
inline ::google::protobuf::int32 NetProto_ModifyMaxHP::maxHP() const {
  return maxHP_;
}
inline void NetProto_ModifyMaxHP::set_maxHP(::google::protobuf::int32 value) {
  set_has_maxHP();
  maxHP_ = value;
}

// -------------------------------------------------------------------

// NetProto_RequestPK

// optional .PB_FriendInfo target = 1;
inline bool NetProto_RequestPK::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RequestPK::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RequestPK::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RequestPK::clear_target() {
  if (target_ != NULL) target_->::PB_FriendInfo::Clear();
  clear_has_target();
}
inline const ::PB_FriendInfo& NetProto_RequestPK::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::PB_FriendInfo* NetProto_RequestPK::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::PB_FriendInfo;
  return target_;
}
inline ::PB_FriendInfo* NetProto_RequestPK::release_target() {
  clear_has_target();
  ::PB_FriendInfo* temp = target_;
  target_ = NULL;
  return temp;
}

// optional int32 res = 2;
inline bool NetProto_RequestPK::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_RequestPK::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_RequestPK::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_RequestPK::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 NetProto_RequestPK::res() const {
  return res_;
}
inline void NetProto_RequestPK::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// NetProto_ApplyPK

// optional int64 origin = 1;
inline bool NetProto_ApplyPK::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ApplyPK::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ApplyPK::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ApplyPK::clear_origin() {
  origin_ = GOOGLE_LONGLONG(0);
  clear_has_origin();
}
inline ::google::protobuf::int64 NetProto_ApplyPK::origin() const {
  return origin_;
}
inline void NetProto_ApplyPK::set_origin(::google::protobuf::int64 value) {
  set_has_origin();
  origin_ = value;
}

// -------------------------------------------------------------------

// NetProto_Strong

// optional .NetProto_Strong.Pos pos = 1;
inline bool NetProto_Strong::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Strong::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Strong::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Strong::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::NetProto_Strong_Pos NetProto_Strong::pos() const {
  return static_cast< ::NetProto_Strong_Pos >(pos_);
}
inline void NetProto_Strong::set_pos(::NetProto_Strong_Pos value) {
  GOOGLE_DCHECK(::NetProto_Strong_Pos_IsValid(value));
  set_has_pos();
  pos_ = value;
}

// optional int32 id = 2;
inline bool NetProto_Strong::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Strong::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Strong::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Strong::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Strong::id() const {
  return id_;
}
inline void NetProto_Strong::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_Strong.Result results = 3;
inline bool NetProto_Strong::has_results() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Strong::set_has_results() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Strong::clear_has_results() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Strong::clear_results() {
  results_ = 0;
  clear_has_results();
}
inline ::NetProto_Strong_Result NetProto_Strong::results() const {
  return static_cast< ::NetProto_Strong_Result >(results_);
}
inline void NetProto_Strong::set_results(::NetProto_Strong_Result value) {
  GOOGLE_DCHECK(::NetProto_Strong_Result_IsValid(value));
  set_has_results();
  results_ = value;
}

// optional bool protect = 4;
inline bool NetProto_Strong::has_protect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Strong::set_has_protect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Strong::clear_has_protect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Strong::clear_protect() {
  protect_ = false;
  clear_has_protect();
}
inline bool NetProto_Strong::protect() const {
  return protect_;
}
inline void NetProto_Strong::set_protect(bool value) {
  set_has_protect();
  protect_ = value;
}

// -------------------------------------------------------------------

// NetProto_ClearStrong

// optional .NetProto_ClearStrong.Pos pos = 1;
inline bool NetProto_ClearStrong::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ClearStrong::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ClearStrong::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ClearStrong::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::NetProto_ClearStrong_Pos NetProto_ClearStrong::pos() const {
  return static_cast< ::NetProto_ClearStrong_Pos >(pos_);
}
inline void NetProto_ClearStrong::set_pos(::NetProto_ClearStrong_Pos value) {
  GOOGLE_DCHECK(::NetProto_ClearStrong_Pos_IsValid(value));
  set_has_pos();
  pos_ = value;
}

// optional int32 id = 2;
inline bool NetProto_ClearStrong::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ClearStrong::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ClearStrong::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ClearStrong::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ClearStrong::id() const {
  return id_;
}
inline void NetProto_ClearStrong::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_Transform

// optional int32 id = 1;
inline bool NetProto_Transform::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Transform::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Transform::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Transform::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Transform::id() const {
  return id_;
}
inline void NetProto_Transform::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_Transform.Type type = 2;
inline bool NetProto_Transform::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Transform::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Transform::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Transform::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_Transform_Type NetProto_Transform::type() const {
  return static_cast< ::NetProto_Transform_Type >(type_);
}
inline void NetProto_Transform::set_type(::NetProto_Transform_Type value) {
  GOOGLE_DCHECK(::NetProto_Transform_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NetProto_Mount

// optional .NetProto_Mount.Pos pos = 1;
inline bool NetProto_Mount::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Mount::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Mount::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Mount::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::NetProto_Mount_Pos NetProto_Mount::pos() const {
  return static_cast< ::NetProto_Mount_Pos >(pos_);
}
inline void NetProto_Mount::set_pos(::NetProto_Mount_Pos value) {
  GOOGLE_DCHECK(::NetProto_Mount_Pos_IsValid(value));
  set_has_pos();
  pos_ = value;
}

// optional int32 id = 2;
inline bool NetProto_Mount::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Mount::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Mount::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Mount::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Mount::id() const {
  return id_;
}
inline void NetProto_Mount::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 mountPos = 3;
inline bool NetProto_Mount::has_mountPos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Mount::set_has_mountPos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Mount::clear_has_mountPos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Mount::clear_mountPos() {
  mountPos_ = 0;
  clear_has_mountPos();
}
inline ::google::protobuf::int32 NetProto_Mount::mountPos() const {
  return mountPos_;
}
inline void NetProto_Mount::set_mountPos(::google::protobuf::int32 value) {
  set_has_mountPos();
  mountPos_ = value;
}

// optional int32 gemPos = 4;
inline bool NetProto_Mount::has_gemPos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Mount::set_has_gemPos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Mount::clear_has_gemPos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Mount::clear_gemPos() {
  gemPos_ = 0;
  clear_has_gemPos();
}
inline ::google::protobuf::int32 NetProto_Mount::gemPos() const {
  return gemPos_;
}
inline void NetProto_Mount::set_gemPos(::google::protobuf::int32 value) {
  set_has_gemPos();
  gemPos_ = value;
}

// -------------------------------------------------------------------

// NetProto_TalkTo

// optional int32 id = 1;
inline bool NetProto_TalkTo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_TalkTo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_TalkTo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_TalkTo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_TalkTo::id() const {
  return id_;
}
inline void NetProto_TalkTo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 map = 2;
inline bool NetProto_TalkTo::has_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_TalkTo::set_has_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_TalkTo::clear_has_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_TalkTo::clear_map() {
  map_ = 0;
  clear_has_map();
}
inline ::google::protobuf::int32 NetProto_TalkTo::map() const {
  return map_;
}
inline void NetProto_TalkTo::set_map(::google::protobuf::int32 value) {
  set_has_map();
  map_ = value;
}

// optional int32 npc = 3;
inline bool NetProto_TalkTo::has_npc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_TalkTo::set_has_npc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_TalkTo::clear_has_npc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_TalkTo::clear_npc() {
  npc_ = 0;
  clear_has_npc();
}
inline ::google::protobuf::int32 NetProto_TalkTo::npc() const {
  return npc_;
}
inline void NetProto_TalkTo::set_npc(::google::protobuf::int32 value) {
  set_has_npc();
  npc_ = value;
}

// -------------------------------------------------------------------

// NetProto_Recover

// optional int32 id = 1;
inline bool NetProto_Recover::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Recover::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Recover::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Recover::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Recover::id() const {
  return id_;
}
inline void NetProto_Recover::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_AddBloodNode

// optional .NetProto_AddBloodNode.Type type = 1;
inline bool NetProto_AddBloodNode::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_AddBloodNode::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_AddBloodNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_AddBloodNode::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_AddBloodNode_Type NetProto_AddBloodNode::type() const {
  return static_cast< ::NetProto_AddBloodNode_Type >(type_);
}
inline void NetProto_AddBloodNode::set_type(::NetProto_AddBloodNode_Type value) {
  GOOGLE_DCHECK(::NetProto_AddBloodNode_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool res = 2;
inline bool NetProto_AddBloodNode::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_AddBloodNode::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_AddBloodNode::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_AddBloodNode::clear_res() {
  res_ = false;
  clear_has_res();
}
inline bool NetProto_AddBloodNode::res() const {
  return res_;
}
inline void NetProto_AddBloodNode::set_res(bool value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// NetProto_AddBloodEffect

// optional .NetProto_AddBloodEffect.Type type = 1;
inline bool NetProto_AddBloodEffect::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_AddBloodEffect::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_AddBloodEffect::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_AddBloodEffect::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_AddBloodEffect_Type NetProto_AddBloodEffect::type() const {
  return static_cast< ::NetProto_AddBloodEffect_Type >(type_);
}
inline void NetProto_AddBloodEffect::set_type(::NetProto_AddBloodEffect_Type value) {
  GOOGLE_DCHECK(::NetProto_AddBloodEffect_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 soul = 2;
inline bool NetProto_AddBloodEffect::has_soul() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_AddBloodEffect::set_has_soul() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_AddBloodEffect::clear_has_soul() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_AddBloodEffect::clear_soul() {
  soul_ = 0;
  clear_has_soul();
}
inline ::google::protobuf::int32 NetProto_AddBloodEffect::soul() const {
  return soul_;
}
inline void NetProto_AddBloodEffect::set_soul(::google::protobuf::int32 value) {
  set_has_soul();
  soul_ = value;
}

// optional int32 res = 3;
inline bool NetProto_AddBloodEffect::has_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_AddBloodEffect::set_has_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_AddBloodEffect::clear_has_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_AddBloodEffect::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 NetProto_AddBloodEffect::res() const {
  return res_;
}
inline void NetProto_AddBloodEffect::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// optional int32 count = 4;
inline bool NetProto_AddBloodEffect::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_AddBloodEffect::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_AddBloodEffect::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_AddBloodEffect::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_AddBloodEffect::count() const {
  return count_;
}
inline void NetProto_AddBloodEffect::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_Explore

// optional .ExploreInfo.Type type = 1;
inline bool NetProto_Explore::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Explore::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Explore::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Explore::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ExploreInfo_Type NetProto_Explore::type() const {
  return static_cast< ::ExploreInfo_Type >(type_);
}
inline void NetProto_Explore::set_type(::ExploreInfo_Type value) {
  GOOGLE_DCHECK(::ExploreInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 event1 = 2;
inline bool NetProto_Explore::has_event1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Explore::set_has_event1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Explore::clear_has_event1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Explore::clear_event1() {
  event1_ = 0;
  clear_has_event1();
}
inline ::google::protobuf::int32 NetProto_Explore::event1() const {
  return event1_;
}
inline void NetProto_Explore::set_event1(::google::protobuf::int32 value) {
  set_has_event1();
  event1_ = value;
}

// optional int32 event2 = 3;
inline bool NetProto_Explore::has_event2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Explore::set_has_event2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Explore::clear_has_event2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Explore::clear_event2() {
  event2_ = 0;
  clear_has_event2();
}
inline ::google::protobuf::int32 NetProto_Explore::event2() const {
  return event2_;
}
inline void NetProto_Explore::set_event2(::google::protobuf::int32 value) {
  set_has_event2();
  event2_ = value;
}

// -------------------------------------------------------------------

// NetProto_UnlockBlood

// -------------------------------------------------------------------

// NetProto_UpdatePos

// optional int32 id = 1;
inline bool NetProto_UpdatePos::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_UpdatePos::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_UpdatePos::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_UpdatePos::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_UpdatePos::id() const {
  return id_;
}
inline void NetProto_UpdatePos::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PB_Vector3f pos = 2;
inline bool NetProto_UpdatePos::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_UpdatePos::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_UpdatePos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_UpdatePos::clear_pos() {
  if (pos_ != NULL) pos_->::PB_Vector3f::Clear();
  clear_has_pos();
}
inline const ::PB_Vector3f& NetProto_UpdatePos::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB_Vector3f* NetProto_UpdatePos::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB_Vector3f;
  return pos_;
}
inline ::PB_Vector3f* NetProto_UpdatePos::release_pos() {
  clear_has_pos();
  ::PB_Vector3f* temp = pos_;
  pos_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_SayHello

// optional int64 srcID = 1;
inline bool NetProto_SayHello::has_srcID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SayHello::set_has_srcID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SayHello::clear_has_srcID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SayHello::clear_srcID() {
  srcID_ = GOOGLE_LONGLONG(0);
  clear_has_srcID();
}
inline ::google::protobuf::int64 NetProto_SayHello::srcID() const {
  return srcID_;
}
inline void NetProto_SayHello::set_srcID(::google::protobuf::int64 value) {
  set_has_srcID();
  srcID_ = value;
}

// optional string srcName = 2;
inline bool NetProto_SayHello::has_srcName() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SayHello::set_has_srcName() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SayHello::clear_has_srcName() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SayHello::clear_srcName() {
  if (srcName_ != &::google::protobuf::internal::kEmptyString) {
    srcName_->clear();
  }
  clear_has_srcName();
}
inline const ::std::string& NetProto_SayHello::srcName() const {
  return *srcName_;
}
inline void NetProto_SayHello::set_srcName(const ::std::string& value) {
  set_has_srcName();
  if (srcName_ == &::google::protobuf::internal::kEmptyString) {
    srcName_ = new ::std::string;
  }
  srcName_->assign(value);
}
inline void NetProto_SayHello::set_srcName(const char* value) {
  set_has_srcName();
  if (srcName_ == &::google::protobuf::internal::kEmptyString) {
    srcName_ = new ::std::string;
  }
  srcName_->assign(value);
}
inline void NetProto_SayHello::set_srcName(const char* value, size_t size) {
  set_has_srcName();
  if (srcName_ == &::google::protobuf::internal::kEmptyString) {
    srcName_ = new ::std::string;
  }
  srcName_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_SayHello::mutable_srcName() {
  set_has_srcName();
  if (srcName_ == &::google::protobuf::internal::kEmptyString) {
    srcName_ = new ::std::string;
  }
  return srcName_;
}
inline ::std::string* NetProto_SayHello::release_srcName() {
  clear_has_srcName();
  if (srcName_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srcName_;
    srcName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 destID = 3;
inline bool NetProto_SayHello::has_destID() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_SayHello::set_has_destID() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_SayHello::clear_has_destID() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_SayHello::clear_destID() {
  destID_ = GOOGLE_LONGLONG(0);
  clear_has_destID();
}
inline ::google::protobuf::int64 NetProto_SayHello::destID() const {
  return destID_;
}
inline void NetProto_SayHello::set_destID(::google::protobuf::int64 value) {
  set_has_destID();
  destID_ = value;
}

// -------------------------------------------------------------------

// NetProto_CompleteGuide

// optional int32 id = 1;
inline bool NetProto_CompleteGuide::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_CompleteGuide::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_CompleteGuide::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_CompleteGuide::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_CompleteGuide::id() const {
  return id_;
}
inline void NetProto_CompleteGuide::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_Arrange

// optional .PB_ItemPackage.Begin begin = 1;
inline bool NetProto_Arrange::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Arrange::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Arrange::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Arrange::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
inline ::PB_ItemPackage_Begin NetProto_Arrange::begin() const {
  return static_cast< ::PB_ItemPackage_Begin >(begin_);
}
inline void NetProto_Arrange::set_begin(::PB_ItemPackage_Begin value) {
  GOOGLE_DCHECK(::PB_ItemPackage_Begin_IsValid(value));
  set_has_begin();
  begin_ = value;
}

// repeated .PB_ItemInfo items = 2;
inline int NetProto_Arrange::items_size() const {
  return items_.size();
}
inline void NetProto_Arrange::clear_items() {
  items_.Clear();
}
inline const ::PB_ItemInfo& NetProto_Arrange::items(int index) const {
  return items_.Get(index);
}
inline ::PB_ItemInfo* NetProto_Arrange::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::PB_ItemInfo* NetProto_Arrange::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
NetProto_Arrange::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
NetProto_Arrange::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// NetProto_IgnorePK

// -------------------------------------------------------------------

// NetProto_ModifyRMB

// optional int64 value = 1;
inline bool NetProto_ModifyRMB::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyRMB::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyRMB::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyRMB::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 NetProto_ModifyRMB::value() const {
  return value_;
}
inline void NetProto_ModifyRMB::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional int64 total = 2;
inline bool NetProto_ModifyRMB::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ModifyRMB::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ModifyRMB::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ModifyRMB::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
  clear_has_total();
}
inline ::google::protobuf::int64 NetProto_ModifyRMB::total() const {
  return total_;
}
inline void NetProto_ModifyRMB::set_total(::google::protobuf::int64 value) {
  set_has_total();
  total_ = value;
}

// optional int64 totalCost = 3;
inline bool NetProto_ModifyRMB::has_totalCost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_ModifyRMB::set_has_totalCost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_ModifyRMB::clear_has_totalCost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_ModifyRMB::clear_totalCost() {
  totalCost_ = GOOGLE_LONGLONG(0);
  clear_has_totalCost();
}
inline ::google::protobuf::int64 NetProto_ModifyRMB::totalCost() const {
  return totalCost_;
}
inline void NetProto_ModifyRMB::set_totalCost(::google::protobuf::int64 value) {
  set_has_totalCost();
  totalCost_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifySoulJade

// optional int64 value = 1;
inline bool NetProto_ModifySoulJade::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifySoulJade::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifySoulJade::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifySoulJade::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 NetProto_ModifySoulJade::value() const {
  return value_;
}
inline void NetProto_ModifySoulJade::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifySoul

// optional int64 value = 1;
inline bool NetProto_ModifySoul::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifySoul::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifySoul::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifySoul::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 NetProto_ModifySoul::value() const {
  return value_;
}
inline void NetProto_ModifySoul::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyHonor

// optional int32 value = 1;
inline bool NetProto_ModifyHonor::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyHonor::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyHonor::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyHonor::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 NetProto_ModifyHonor::value() const {
  return value_;
}
inline void NetProto_ModifyHonor::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyDurability

// optional int32 value = 1;
inline bool NetProto_ModifyDurability::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyDurability::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyDurability::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyDurability::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 NetProto_ModifyDurability::value() const {
  return value_;
}
inline void NetProto_ModifyDurability::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifySoulStone

// optional int64 value = 1;
inline bool NetProto_ModifySoulStone::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifySoulStone::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifySoulStone::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifySoulStone::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 NetProto_ModifySoulStone::value() const {
  return value_;
}
inline void NetProto_ModifySoulStone::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyPKScore

// optional int64 value = 1;
inline bool NetProto_ModifyPKScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyPKScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyPKScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyPKScore::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 NetProto_ModifyPKScore::value() const {
  return value_;
}
inline void NetProto_ModifyPKScore::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_DelItem

// optional int32 pos = 1;
inline bool NetProto_DelItem::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DelItem::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DelItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DelItem::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 NetProto_DelItem::pos() const {
  return pos_;
}
inline void NetProto_DelItem::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 count = 2;
inline bool NetProto_DelItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_DelItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_DelItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_DelItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_DelItem::count() const {
  return count_;
}
inline void NetProto_DelItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyVIP

// optional int32 player = 1;
inline bool NetProto_ModifyVIP::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyVIP::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyVIP::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyVIP::clear_player() {
  player_ = 0;
  clear_has_player();
}
inline ::google::protobuf::int32 NetProto_ModifyVIP::player() const {
  return player_;
}
inline void NetProto_ModifyVIP::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
}

// optional int32 vip = 2;
inline bool NetProto_ModifyVIP::has_vip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ModifyVIP::set_has_vip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ModifyVIP::clear_has_vip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ModifyVIP::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 NetProto_ModifyVIP::vip() const {
  return vip_;
}
inline void NetProto_ModifyVIP::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// -------------------------------------------------------------------

// NetProto_RandomGodTarget

// optional .PB_PlayerAtt att = 1;
inline bool NetProto_RandomGodTarget::has_att() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RandomGodTarget::set_has_att() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RandomGodTarget::clear_has_att() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RandomGodTarget::clear_att() {
  if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
  clear_has_att();
}
inline const ::PB_PlayerAtt& NetProto_RandomGodTarget::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_PlayerAtt* NetProto_RandomGodTarget::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_PlayerAtt;
  return att_;
}
inline ::PB_PlayerAtt* NetProto_RandomGodTarget::release_att() {
  clear_has_att();
  ::PB_PlayerAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// optional int32 event = 2;
inline bool NetProto_RandomGodTarget::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_RandomGodTarget::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_RandomGodTarget::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_RandomGodTarget::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::google::protobuf::int32 NetProto_RandomGodTarget::event() const {
  return event_;
}
inline void NetProto_RandomGodTarget::set_event(::google::protobuf::int32 value) {
  set_has_event();
  event_ = value;
}

// -------------------------------------------------------------------

// NetProto_Inspire

// optional .NetProto_Inspire.Type type = 1;
inline bool NetProto_Inspire::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Inspire::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Inspire::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Inspire::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_Inspire_Type NetProto_Inspire::type() const {
  return static_cast< ::NetProto_Inspire_Type >(type_);
}
inline void NetProto_Inspire::set_type(::NetProto_Inspire_Type value) {
  GOOGLE_DCHECK(::NetProto_Inspire_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .NetProto_Inspire.Dest dest = 2;
inline bool NetProto_Inspire::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Inspire::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Inspire::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Inspire::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::NetProto_Inspire_Dest NetProto_Inspire::dest() const {
  return static_cast< ::NetProto_Inspire_Dest >(dest_);
}
inline void NetProto_Inspire::set_dest(::NetProto_Inspire_Dest value) {
  GOOGLE_DCHECK(::NetProto_Inspire_Dest_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// -------------------------------------------------------------------

// NetProto_RequestGodTarget

// -------------------------------------------------------------------

// NetProto_ModifyGodScore

// optional int32 value = 1;
inline bool NetProto_ModifyGodScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyGodScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyGodScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyGodScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 NetProto_ModifyGodScore::value() const {
  return value_;
}
inline void NetProto_ModifyGodScore::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_GodRank

// optional int32 self = 1;
inline bool NetProto_GodRank::has_self() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GodRank::set_has_self() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GodRank::clear_has_self() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GodRank::clear_self() {
  self_ = 0;
  clear_has_self();
}
inline ::google::protobuf::int32 NetProto_GodRank::self() const {
  return self_;
}
inline void NetProto_GodRank::set_self(::google::protobuf::int32 value) {
  set_has_self();
  self_ = value;
}

// optional int32 target = 2;
inline bool NetProto_GodRank::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GodRank::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GodRank::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GodRank::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 NetProto_GodRank::target() const {
  return target_;
}
inline void NetProto_GodRank::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// -------------------------------------------------------------------

// NetProto_GetFashion

// optional int32 v = 1;
inline bool NetProto_GetFashion::has_v() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GetFashion::set_has_v() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GetFashion::clear_has_v() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GetFashion::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 NetProto_GetFashion::v() const {
  return v_;
}
inline void NetProto_GetFashion::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
}

// optional int32 pos = 2;
inline bool NetProto_GetFashion::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GetFashion::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GetFashion::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GetFashion::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 NetProto_GetFashion::pos() const {
  return pos_;
}
inline void NetProto_GetFashion::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// NetProto_SyncAtt

// repeated int32 properties = 1;
inline int NetProto_SyncAtt::properties_size() const {
  return properties_.size();
}
inline void NetProto_SyncAtt::clear_properties() {
  properties_.Clear();
}
inline ::google::protobuf::int32 NetProto_SyncAtt::properties(int index) const {
  return properties_.Get(index);
}
inline void NetProto_SyncAtt::set_properties(int index, ::google::protobuf::int32 value) {
  properties_.Set(index, value);
}
inline void NetProto_SyncAtt::add_properties(::google::protobuf::int32 value) {
  properties_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_SyncAtt::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_SyncAtt::mutable_properties() {
  return &properties_;
}

// repeated .PB_FightPropertyDelta propertiesDelta = 2;
inline int NetProto_SyncAtt::propertiesDelta_size() const {
  return propertiesDelta_.size();
}
inline void NetProto_SyncAtt::clear_propertiesDelta() {
  propertiesDelta_.Clear();
}
inline const ::PB_FightPropertyDelta& NetProto_SyncAtt::propertiesDelta(int index) const {
  return propertiesDelta_.Get(index);
}
inline ::PB_FightPropertyDelta* NetProto_SyncAtt::mutable_propertiesDelta(int index) {
  return propertiesDelta_.Mutable(index);
}
inline ::PB_FightPropertyDelta* NetProto_SyncAtt::add_propertiesDelta() {
  return propertiesDelta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta >&
NetProto_SyncAtt::propertiesDelta() const {
  return propertiesDelta_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta >*
NetProto_SyncAtt::mutable_propertiesDelta() {
  return &propertiesDelta_;
}

// optional int32 index = 3;
inline bool NetProto_SyncAtt::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_SyncAtt::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_SyncAtt::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_SyncAtt::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_SyncAtt::index() const {
  return index_;
}
inline void NetProto_SyncAtt::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int64 time = 4;
inline bool NetProto_SyncAtt::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_SyncAtt::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_SyncAtt::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_SyncAtt::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 NetProto_SyncAtt::time() const {
  return time_;
}
inline void NetProto_SyncAtt::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string md5 = 5;
inline bool NetProto_SyncAtt::has_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_SyncAtt::set_has_md5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_SyncAtt::clear_has_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_SyncAtt::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& NetProto_SyncAtt::md5() const {
  return *md5_;
}
inline void NetProto_SyncAtt::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void NetProto_SyncAtt::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void NetProto_SyncAtt::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_SyncAtt::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* NetProto_SyncAtt::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_ModifySubRMB

// optional int64 value = 1;
inline bool NetProto_ModifySubRMB::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifySubRMB::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifySubRMB::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifySubRMB::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 NetProto_ModifySubRMB::value() const {
  return value_;
}
inline void NetProto_ModifySubRMB::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_GenEquip

// optional int32 id = 1;
inline bool NetProto_GenEquip::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GenEquip::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GenEquip::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GenEquip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_GenEquip::id() const {
  return id_;
}
inline void NetProto_GenEquip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_GenGem

// optional .NetProto_GenGem.Way way = 1;
inline bool NetProto_GenGem::has_way() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GenGem::set_has_way() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GenGem::clear_has_way() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GenGem::clear_way() {
  way_ = 0;
  clear_has_way();
}
inline ::NetProto_GenGem_Way NetProto_GenGem::way() const {
  return static_cast< ::NetProto_GenGem_Way >(way_);
}
inline void NetProto_GenGem::set_way(::NetProto_GenGem_Way value) {
  GOOGLE_DCHECK(::NetProto_GenGem_Way_IsValid(value));
  set_has_way();
  way_ = value;
}

// optional int32 type = 2;
inline bool NetProto_GenGem::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GenGem::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GenGem::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GenGem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NetProto_GenGem::type() const {
  return type_;
}
inline void NetProto_GenGem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 level = 3;
inline bool NetProto_GenGem::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GenGem::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GenGem::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GenGem::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetProto_GenGem::level() const {
  return level_;
}
inline void NetProto_GenGem::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated .PB_ItemInfo results = 4;
inline int NetProto_GenGem::results_size() const {
  return results_.size();
}
inline void NetProto_GenGem::clear_results() {
  results_.Clear();
}
inline const ::PB_ItemInfo& NetProto_GenGem::results(int index) const {
  return results_.Get(index);
}
inline ::PB_ItemInfo* NetProto_GenGem::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::PB_ItemInfo* NetProto_GenGem::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
NetProto_GenGem::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
NetProto_GenGem::mutable_results() {
  return &results_;
}

// optional int32 success = 5;
inline bool NetProto_GenGem::has_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_GenGem::set_has_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_GenGem::clear_has_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_GenGem::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 NetProto_GenGem::success() const {
  return success_;
}
inline void NetProto_GenGem::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// optional int32 fail = 6;
inline bool NetProto_GenGem::has_fail() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_GenGem::set_has_fail() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_GenGem::clear_has_fail() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_GenGem::clear_fail() {
  fail_ = 0;
  clear_has_fail();
}
inline ::google::protobuf::int32 NetProto_GenGem::fail() const {
  return fail_;
}
inline void NetProto_GenGem::set_fail(::google::protobuf::int32 value) {
  set_has_fail();
  fail_ = value;
}

// -------------------------------------------------------------------

// NetProto_UnlockHole

// optional .NetProto_UnlockHole.Pos pos = 1;
inline bool NetProto_UnlockHole::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_UnlockHole::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_UnlockHole::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_UnlockHole::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::NetProto_UnlockHole_Pos NetProto_UnlockHole::pos() const {
  return static_cast< ::NetProto_UnlockHole_Pos >(pos_);
}
inline void NetProto_UnlockHole::set_pos(::NetProto_UnlockHole_Pos value) {
  GOOGLE_DCHECK(::NetProto_UnlockHole_Pos_IsValid(value));
  set_has_pos();
  pos_ = value;
}

// optional int32 id = 2;
inline bool NetProto_UnlockHole::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_UnlockHole::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_UnlockHole::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_UnlockHole::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_UnlockHole::id() const {
  return id_;
}
inline void NetProto_UnlockHole::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 index = 3;
inline bool NetProto_UnlockHole::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_UnlockHole::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_UnlockHole::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_UnlockHole::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_UnlockHole::index() const {
  return index_;
}
inline void NetProto_UnlockHole::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_UnmountGem

// optional .NetProto_UnmountGem.Pos pos = 1;
inline bool NetProto_UnmountGem::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_UnmountGem::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_UnmountGem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_UnmountGem::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::NetProto_UnmountGem_Pos NetProto_UnmountGem::pos() const {
  return static_cast< ::NetProto_UnmountGem_Pos >(pos_);
}
inline void NetProto_UnmountGem::set_pos(::NetProto_UnmountGem_Pos value) {
  GOOGLE_DCHECK(::NetProto_UnmountGem_Pos_IsValid(value));
  set_has_pos();
  pos_ = value;
}

// optional int32 id = 2;
inline bool NetProto_UnmountGem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_UnmountGem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_UnmountGem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_UnmountGem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_UnmountGem::id() const {
  return id_;
}
inline void NetProto_UnmountGem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 index = 3;
inline bool NetProto_UnmountGem::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_UnmountGem::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_UnmountGem::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_UnmountGem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_UnmountGem::index() const {
  return index_;
}
inline void NetProto_UnmountGem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_EnhanceDelta

// optional .NetProto_EnhanceDelta.Pos pos = 1;
inline bool NetProto_EnhanceDelta::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_EnhanceDelta::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_EnhanceDelta::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_EnhanceDelta::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::NetProto_EnhanceDelta_Pos NetProto_EnhanceDelta::pos() const {
  return static_cast< ::NetProto_EnhanceDelta_Pos >(pos_);
}
inline void NetProto_EnhanceDelta::set_pos(::NetProto_EnhanceDelta_Pos value) {
  GOOGLE_DCHECK(::NetProto_EnhanceDelta_Pos_IsValid(value));
  set_has_pos();
  pos_ = value;
}

// optional int32 id = 2;
inline bool NetProto_EnhanceDelta::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_EnhanceDelta::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_EnhanceDelta::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_EnhanceDelta::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_EnhanceDelta::id() const {
  return id_;
}
inline void NetProto_EnhanceDelta::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool ten = 3;
inline bool NetProto_EnhanceDelta::has_ten() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_EnhanceDelta::set_has_ten() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_EnhanceDelta::clear_has_ten() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_EnhanceDelta::clear_ten() {
  ten_ = false;
  clear_has_ten();
}
inline bool NetProto_EnhanceDelta::ten() const {
  return ten_;
}
inline void NetProto_EnhanceDelta::set_ten(bool value) {
  set_has_ten();
  ten_ = value;
}

// repeated int32 delta = 4;
inline int NetProto_EnhanceDelta::delta_size() const {
  return delta_.size();
}
inline void NetProto_EnhanceDelta::clear_delta() {
  delta_.Clear();
}
inline ::google::protobuf::int32 NetProto_EnhanceDelta::delta(int index) const {
  return delta_.Get(index);
}
inline void NetProto_EnhanceDelta::set_delta(int index, ::google::protobuf::int32 value) {
  delta_.Set(index, value);
}
inline void NetProto_EnhanceDelta::add_delta(::google::protobuf::int32 value) {
  delta_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_EnhanceDelta::delta() const {
  return delta_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_EnhanceDelta::mutable_delta() {
  return &delta_;
}

// -------------------------------------------------------------------

// NetProto_Enhance

// optional .NetProto_Enhance.Pos pos = 1;
inline bool NetProto_Enhance::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Enhance::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Enhance::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Enhance::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::NetProto_Enhance_Pos NetProto_Enhance::pos() const {
  return static_cast< ::NetProto_Enhance_Pos >(pos_);
}
inline void NetProto_Enhance::set_pos(::NetProto_Enhance_Pos value) {
  GOOGLE_DCHECK(::NetProto_Enhance_Pos_IsValid(value));
  set_has_pos();
  pos_ = value;
}

// optional int32 id = 2;
inline bool NetProto_Enhance::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Enhance::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Enhance::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Enhance::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Enhance::id() const {
  return id_;
}
inline void NetProto_Enhance::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_Inherit

// optional .NetProto_Inherit.Pos parentPos = 1;
inline bool NetProto_Inherit::has_parentPos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Inherit::set_has_parentPos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Inherit::clear_has_parentPos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Inherit::clear_parentPos() {
  parentPos_ = 0;
  clear_has_parentPos();
}
inline ::NetProto_Inherit_Pos NetProto_Inherit::parentPos() const {
  return static_cast< ::NetProto_Inherit_Pos >(parentPos_);
}
inline void NetProto_Inherit::set_parentPos(::NetProto_Inherit_Pos value) {
  GOOGLE_DCHECK(::NetProto_Inherit_Pos_IsValid(value));
  set_has_parentPos();
  parentPos_ = value;
}

// optional int32 parentID = 2;
inline bool NetProto_Inherit::has_parentID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Inherit::set_has_parentID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Inherit::clear_has_parentID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Inherit::clear_parentID() {
  parentID_ = 0;
  clear_has_parentID();
}
inline ::google::protobuf::int32 NetProto_Inherit::parentID() const {
  return parentID_;
}
inline void NetProto_Inherit::set_parentID(::google::protobuf::int32 value) {
  set_has_parentID();
  parentID_ = value;
}

// optional .NetProto_Inherit.Pos childPos = 3;
inline bool NetProto_Inherit::has_childPos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Inherit::set_has_childPos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Inherit::clear_has_childPos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Inherit::clear_childPos() {
  childPos_ = 0;
  clear_has_childPos();
}
inline ::NetProto_Inherit_Pos NetProto_Inherit::childPos() const {
  return static_cast< ::NetProto_Inherit_Pos >(childPos_);
}
inline void NetProto_Inherit::set_childPos(::NetProto_Inherit_Pos value) {
  GOOGLE_DCHECK(::NetProto_Inherit_Pos_IsValid(value));
  set_has_childPos();
  childPos_ = value;
}

// optional int32 childID = 4;
inline bool NetProto_Inherit::has_childID() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Inherit::set_has_childID() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Inherit::clear_has_childID() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Inherit::clear_childID() {
  childID_ = 0;
  clear_has_childID();
}
inline ::google::protobuf::int32 NetProto_Inherit::childID() const {
  return childID_;
}
inline void NetProto_Inherit::set_childID(::google::protobuf::int32 value) {
  set_has_childID();
  childID_ = value;
}

// optional bool useRMB = 5;
inline bool NetProto_Inherit::has_useRMB() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_Inherit::set_has_useRMB() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_Inherit::clear_has_useRMB() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_Inherit::clear_useRMB() {
  useRMB_ = false;
  clear_has_useRMB();
}
inline bool NetProto_Inherit::useRMB() const {
  return useRMB_;
}
inline void NetProto_Inherit::set_useRMB(bool value) {
  set_has_useRMB();
  useRMB_ = value;
}

// -------------------------------------------------------------------

// NetProto_StrongBaseWing

// optional bool useRMB = 1;
inline bool NetProto_StrongBaseWing::has_useRMB() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_StrongBaseWing::set_has_useRMB() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_StrongBaseWing::clear_has_useRMB() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_StrongBaseWing::clear_useRMB() {
  useRMB_ = false;
  clear_has_useRMB();
}
inline bool NetProto_StrongBaseWing::useRMB() const {
  return useRMB_;
}
inline void NetProto_StrongBaseWing::set_useRMB(bool value) {
  set_has_useRMB();
  useRMB_ = value;
}

// -------------------------------------------------------------------

// NetProto_BuyWing

// optional int32 id = 1;
inline bool NetProto_BuyWing::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BuyWing::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BuyWing::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BuyWing::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_BuyWing::id() const {
  return id_;
}
inline void NetProto_BuyWing::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool forever = 2;
inline bool NetProto_BuyWing::has_forever() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_BuyWing::set_has_forever() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_BuyWing::clear_has_forever() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_BuyWing::clear_forever() {
  forever_ = false;
  clear_has_forever();
}
inline bool NetProto_BuyWing::forever() const {
  return forever_;
}
inline void NetProto_BuyWing::set_forever(bool value) {
  set_has_forever();
  forever_ = value;
}

// -------------------------------------------------------------------

// NetProto_WearWing

// optional int32 id = 1;
inline bool NetProto_WearWing::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_WearWing::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_WearWing::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_WearWing::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_WearWing::id() const {
  return id_;
}
inline void NetProto_WearWing::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool baseWing = 2;
inline bool NetProto_WearWing::has_baseWing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_WearWing::set_has_baseWing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_WearWing::clear_has_baseWing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_WearWing::clear_baseWing() {
  baseWing_ = false;
  clear_has_baseWing();
}
inline bool NetProto_WearWing::baseWing() const {
  return baseWing_;
}
inline void NetProto_WearWing::set_baseWing(bool value) {
  set_has_baseWing();
  baseWing_ = value;
}

// -------------------------------------------------------------------

// NetProto_GetWing

// optional int32 v = 1;
inline bool NetProto_GetWing::has_v() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GetWing::set_has_v() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GetWing::clear_has_v() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GetWing::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 NetProto_GetWing::v() const {
  return v_;
}
inline void NetProto_GetWing::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
}

// optional int32 pos = 2;
inline bool NetProto_GetWing::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GetWing::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GetWing::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GetWing::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 NetProto_GetWing::pos() const {
  return pos_;
}
inline void NetProto_GetWing::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// NetProto_BuyFashion

// optional int32 id = 1;
inline bool NetProto_BuyFashion::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BuyFashion::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BuyFashion::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BuyFashion::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_BuyFashion::id() const {
  return id_;
}
inline void NetProto_BuyFashion::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool forever = 2;
inline bool NetProto_BuyFashion::has_forever() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_BuyFashion::set_has_forever() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_BuyFashion::clear_has_forever() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_BuyFashion::clear_forever() {
  forever_ = false;
  clear_has_forever();
}
inline bool NetProto_BuyFashion::forever() const {
  return forever_;
}
inline void NetProto_BuyFashion::set_forever(bool value) {
  set_has_forever();
  forever_ = value;
}

// -------------------------------------------------------------------

// NetProto_MakeFashionHole

// optional int32 id = 1;
inline bool NetProto_MakeFashionHole::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_MakeFashionHole::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_MakeFashionHole::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_MakeFashionHole::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_MakeFashionHole::id() const {
  return id_;
}
inline void NetProto_MakeFashionHole::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 index = 2;
inline bool NetProto_MakeFashionHole::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_MakeFashionHole::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_MakeFashionHole::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_MakeFashionHole::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_MakeFashionHole::index() const {
  return index_;
}
inline void NetProto_MakeFashionHole::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_FashionInlay

// optional int32 id = 1;
inline bool NetProto_FashionInlay::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FashionInlay::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FashionInlay::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FashionInlay::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_FashionInlay::id() const {
  return id_;
}
inline void NetProto_FashionInlay::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 index = 2;
inline bool NetProto_FashionInlay::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_FashionInlay::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_FashionInlay::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_FashionInlay::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_FashionInlay::index() const {
  return index_;
}
inline void NetProto_FashionInlay::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 runeid = 3;
inline bool NetProto_FashionInlay::has_runeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_FashionInlay::set_has_runeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_FashionInlay::clear_has_runeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_FashionInlay::clear_runeid() {
  runeid_ = 0;
  clear_has_runeid();
}
inline ::google::protobuf::int32 NetProto_FashionInlay::runeid() const {
  return runeid_;
}
inline void NetProto_FashionInlay::set_runeid(::google::protobuf::int32 value) {
  set_has_runeid();
  runeid_ = value;
}

// optional bool flag = 4;
inline bool NetProto_FashionInlay::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_FashionInlay::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_FashionInlay::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_FashionInlay::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool NetProto_FashionInlay::flag() const {
  return flag_;
}
inline void NetProto_FashionInlay::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// NetProto_FashionUnInlay

// optional int32 id = 1;
inline bool NetProto_FashionUnInlay::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FashionUnInlay::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FashionUnInlay::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FashionUnInlay::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_FashionUnInlay::id() const {
  return id_;
}
inline void NetProto_FashionUnInlay::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 index = 2;
inline bool NetProto_FashionUnInlay::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_FashionUnInlay::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_FashionUnInlay::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_FashionUnInlay::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_FashionUnInlay::index() const {
  return index_;
}
inline void NetProto_FashionUnInlay::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_ServerLimitItem

// optional .PB_ItemInfo.Type type = 1;
inline bool NetProto_ServerLimitItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ServerLimitItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ServerLimitItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ServerLimitItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PB_ItemInfo_Type NetProto_ServerLimitItem::type() const {
  return static_cast< ::PB_ItemInfo_Type >(type_);
}
inline void NetProto_ServerLimitItem::set_type(::PB_ItemInfo_Type value) {
  GOOGLE_DCHECK(::PB_ItemInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool NetProto_ServerLimitItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ServerLimitItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ServerLimitItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ServerLimitItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ServerLimitItem::id() const {
  return id_;
}
inline void NetProto_ServerLimitItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 3;
inline bool NetProto_ServerLimitItem::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_ServerLimitItem::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_ServerLimitItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_ServerLimitItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_ServerLimitItem::count() const {
  return count_;
}
inline void NetProto_ServerLimitItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_FriendsLove

// optional int64 roleID = 1;
inline bool NetProto_FriendsLove::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FriendsLove::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FriendsLove::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FriendsLove::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_FriendsLove::roleID() const {
  return roleID_;
}
inline void NetProto_FriendsLove::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional bool flag = 2;
inline bool NetProto_FriendsLove::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_FriendsLove::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_FriendsLove::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_FriendsLove::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool NetProto_FriendsLove::flag() const {
  return flag_;
}
inline void NetProto_FriendsLove::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// NetProto_ChangePartner

// optional int32 index = 1;
inline bool NetProto_ChangePartner::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ChangePartner::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ChangePartner::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ChangePartner::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_ChangePartner::index() const {
  return index_;
}
inline void NetProto_ChangePartner::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional .PB_FriendInfo fans = 2;
inline bool NetProto_ChangePartner::has_fans() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ChangePartner::set_has_fans() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ChangePartner::clear_has_fans() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ChangePartner::clear_fans() {
  if (fans_ != NULL) fans_->::PB_FriendInfo::Clear();
  clear_has_fans();
}
inline const ::PB_FriendInfo& NetProto_ChangePartner::fans() const {
  return fans_ != NULL ? *fans_ : *default_instance_->fans_;
}
inline ::PB_FriendInfo* NetProto_ChangePartner::mutable_fans() {
  set_has_fans();
  if (fans_ == NULL) fans_ = new ::PB_FriendInfo;
  return fans_;
}
inline ::PB_FriendInfo* NetProto_ChangePartner::release_fans() {
  clear_has_fans();
  ::PB_FriendInfo* temp = fans_;
  fans_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_AddFansLove

// optional int64 roleID = 1;
inline bool NetProto_AddFansLove::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_AddFansLove::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_AddFansLove::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_AddFansLove::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_AddFansLove::roleID() const {
  return roleID_;
}
inline void NetProto_AddFansLove::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyLovePoint

// optional int32 lovePoint = 1;
inline bool NetProto_ModifyLovePoint::has_lovePoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyLovePoint::set_has_lovePoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyLovePoint::clear_has_lovePoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyLovePoint::clear_lovePoint() {
  lovePoint_ = 0;
  clear_has_lovePoint();
}
inline ::google::protobuf::int32 NetProto_ModifyLovePoint::lovePoint() const {
  return lovePoint_;
}
inline void NetProto_ModifyLovePoint::set_lovePoint(::google::protobuf::int32 value) {
  set_has_lovePoint();
  lovePoint_ = value;
}

// -------------------------------------------------------------------

// NetProto_BuyDurability

// optional int32 index = 1;
inline bool NetProto_BuyDurability::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BuyDurability::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BuyDurability::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BuyDurability::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_BuyDurability::index() const {
  return index_;
}
inline void NetProto_BuyDurability::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_LoginObtRMB

// optional int32 count = 1;
inline bool NetProto_LoginObtRMB::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_LoginObtRMB::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_LoginObtRMB::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_LoginObtRMB::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_LoginObtRMB::count() const {
  return count_;
}
inline void NetProto_LoginObtRMB::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_UnwearWing

// -------------------------------------------------------------------

// NetProto_GetEquip

// optional int32 id = 1;
inline bool NetProto_GetEquip::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GetEquip::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GetEquip::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GetEquip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_GetEquip::id() const {
  return id_;
}
inline void NetProto_GetEquip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PB_EquipAsset asset = 2;
inline bool NetProto_GetEquip::has_asset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GetEquip::set_has_asset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GetEquip::clear_has_asset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GetEquip::clear_asset() {
  if (asset_ != NULL) asset_->::PB_EquipAsset::Clear();
  clear_has_asset();
}
inline const ::PB_EquipAsset& NetProto_GetEquip::asset() const {
  return asset_ != NULL ? *asset_ : *default_instance_->asset_;
}
inline ::PB_EquipAsset* NetProto_GetEquip::mutable_asset() {
  set_has_asset();
  if (asset_ == NULL) asset_ = new ::PB_EquipAsset;
  return asset_;
}
inline ::PB_EquipAsset* NetProto_GetEquip::release_asset() {
  clear_has_asset();
  ::PB_EquipAsset* temp = asset_;
  asset_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_ResetCount

// optional .NetProto_ResetCount.Type type = 1;
inline bool NetProto_ResetCount::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ResetCount::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ResetCount::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ResetCount::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_ResetCount_Type NetProto_ResetCount::type() const {
  return static_cast< ::NetProto_ResetCount_Type >(type_);
}
inline void NetProto_ResetCount::set_type(::NetProto_ResetCount_Type value) {
  GOOGLE_DCHECK(::NetProto_ResetCount_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 arg = 2;
inline bool NetProto_ResetCount::has_arg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ResetCount::set_has_arg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ResetCount::clear_has_arg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ResetCount::clear_arg() {
  arg_ = 0;
  clear_has_arg();
}
inline ::google::protobuf::int32 NetProto_ResetCount::arg() const {
  return arg_;
}
inline void NetProto_ResetCount::set_arg(::google::protobuf::int32 value) {
  set_has_arg();
  arg_ = value;
}

// -------------------------------------------------------------------

// NetProto_GodPlayer

// optional .PB_ProfessionInfo.Type professionType = 1;
inline bool NetProto_GodPlayer::has_professionType() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GodPlayer::set_has_professionType() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GodPlayer::clear_has_professionType() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GodPlayer::clear_professionType() {
  professionType_ = 0;
  clear_has_professionType();
}
inline ::PB_ProfessionInfo_Type NetProto_GodPlayer::professionType() const {
  return static_cast< ::PB_ProfessionInfo_Type >(professionType_);
}
inline void NetProto_GodPlayer::set_professionType(::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  set_has_professionType();
  professionType_ = value;
}

// optional int32 godRank = 2;
inline bool NetProto_GodPlayer::has_godRank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GodPlayer::set_has_godRank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GodPlayer::clear_has_godRank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GodPlayer::clear_godRank() {
  godRank_ = 0;
  clear_has_godRank();
}
inline ::google::protobuf::int32 NetProto_GodPlayer::godRank() const {
  return godRank_;
}
inline void NetProto_GodPlayer::set_godRank(::google::protobuf::int32 value) {
  set_has_godRank();
  godRank_ = value;
}

// optional int32 power = 3;
inline bool NetProto_GodPlayer::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GodPlayer::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GodPlayer::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GodPlayer::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 NetProto_GodPlayer::power() const {
  return power_;
}
inline void NetProto_GodPlayer::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 inspire = 4;
inline bool NetProto_GodPlayer::has_inspire() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GodPlayer::set_has_inspire() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GodPlayer::clear_has_inspire() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GodPlayer::clear_inspire() {
  inspire_ = 0;
  clear_has_inspire();
}
inline ::google::protobuf::int32 NetProto_GodPlayer::inspire() const {
  return inspire_;
}
inline void NetProto_GodPlayer::set_inspire(::google::protobuf::int32 value) {
  set_has_inspire();
  inspire_ = value;
}

// optional int64 roleID = 5;
inline bool NetProto_GodPlayer::has_roleID() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_GodPlayer::set_has_roleID() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_GodPlayer::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_GodPlayer::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_GodPlayer::roleID() const {
  return roleID_;
}
inline void NetProto_GodPlayer::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional string str = 6;
inline bool NetProto_GodPlayer::has_str() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_GodPlayer::set_has_str() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_GodPlayer::clear_has_str() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_GodPlayer::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& NetProto_GodPlayer::str() const {
  return *str_;
}
inline void NetProto_GodPlayer::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_GodPlayer::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_GodPlayer::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GodPlayer::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* NetProto_GodPlayer::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 7;
inline bool NetProto_GodPlayer::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_GodPlayer::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_GodPlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_GodPlayer::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetProto_GodPlayer::level() const {
  return level_;
}
inline void NetProto_GodPlayer::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// NetProto_GodRandomPlayer

// repeated .NetProto_GodPlayer player = 1;
inline int NetProto_GodRandomPlayer::player_size() const {
  return player_.size();
}
inline void NetProto_GodRandomPlayer::clear_player() {
  player_.Clear();
}
inline const ::NetProto_GodPlayer& NetProto_GodRandomPlayer::player(int index) const {
  return player_.Get(index);
}
inline ::NetProto_GodPlayer* NetProto_GodRandomPlayer::mutable_player(int index) {
  return player_.Mutable(index);
}
inline ::NetProto_GodPlayer* NetProto_GodRandomPlayer::add_player() {
  return player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GodPlayer >&
NetProto_GodRandomPlayer::player() const {
  return player_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_GodPlayer >*
NetProto_GodRandomPlayer::mutable_player() {
  return &player_;
}

// -------------------------------------------------------------------

// NetProto_GodRecords

// repeated bool flag = 1;
inline int NetProto_GodRecords::flag_size() const {
  return flag_.size();
}
inline void NetProto_GodRecords::clear_flag() {
  flag_.Clear();
}
inline bool NetProto_GodRecords::flag(int index) const {
  return flag_.Get(index);
}
inline void NetProto_GodRecords::set_flag(int index, bool value) {
  flag_.Set(index, value);
}
inline void NetProto_GodRecords::add_flag(bool value) {
  flag_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
NetProto_GodRecords::flag() const {
  return flag_;
}
inline ::google::protobuf::RepeatedField< bool >*
NetProto_GodRecords::mutable_flag() {
  return &flag_;
}

// repeated int32 num = 2;
inline int NetProto_GodRecords::num_size() const {
  return num_.size();
}
inline void NetProto_GodRecords::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::int32 NetProto_GodRecords::num(int index) const {
  return num_.Get(index);
}
inline void NetProto_GodRecords::set_num(int index, ::google::protobuf::int32 value) {
  num_.Set(index, value);
}
inline void NetProto_GodRecords::add_num(::google::protobuf::int32 value) {
  num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_GodRecords::num() const {
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_GodRecords::mutable_num() {
  return &num_;
}

// repeated .PB_ProfessionInfo.Type professionType = 3;
inline int NetProto_GodRecords::professionType_size() const {
  return professionType_.size();
}
inline void NetProto_GodRecords::clear_professionType() {
  professionType_.Clear();
}
inline ::PB_ProfessionInfo_Type NetProto_GodRecords::professionType(int index) const {
  return static_cast< ::PB_ProfessionInfo_Type >(professionType_.Get(index));
}
inline void NetProto_GodRecords::set_professionType(int index, ::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  professionType_.Set(index, value);
}
inline void NetProto_GodRecords::add_professionType(::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  professionType_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
NetProto_GodRecords::professionType() const {
  return professionType_;
}
inline ::google::protobuf::RepeatedField<int>*
NetProto_GodRecords::mutable_professionType() {
  return &professionType_;
}

// repeated int32 level = 4;
inline int NetProto_GodRecords::level_size() const {
  return level_.size();
}
inline void NetProto_GodRecords::clear_level() {
  level_.Clear();
}
inline ::google::protobuf::int32 NetProto_GodRecords::level(int index) const {
  return level_.Get(index);
}
inline void NetProto_GodRecords::set_level(int index, ::google::protobuf::int32 value) {
  level_.Set(index, value);
}
inline void NetProto_GodRecords::add_level(::google::protobuf::int32 value) {
  level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_GodRecords::level() const {
  return level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_GodRecords::mutable_level() {
  return &level_;
}

// repeated string name = 5;
inline int NetProto_GodRecords::name_size() const {
  return name_.size();
}
inline void NetProto_GodRecords::clear_name() {
  name_.Clear();
}
inline const ::std::string& NetProto_GodRecords::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* NetProto_GodRecords::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void NetProto_GodRecords::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void NetProto_GodRecords::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void NetProto_GodRecords::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GodRecords::add_name() {
  return name_.Add();
}
inline void NetProto_GodRecords::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void NetProto_GodRecords::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void NetProto_GodRecords::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetProto_GodRecords::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetProto_GodRecords::mutable_name() {
  return &name_;
}

// repeated int32 time = 6;
inline int NetProto_GodRecords::time_size() const {
  return time_.size();
}
inline void NetProto_GodRecords::clear_time() {
  time_.Clear();
}
inline ::google::protobuf::int32 NetProto_GodRecords::time(int index) const {
  return time_.Get(index);
}
inline void NetProto_GodRecords::set_time(int index, ::google::protobuf::int32 value) {
  time_.Set(index, value);
}
inline void NetProto_GodRecords::add_time(::google::protobuf::int32 value) {
  time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_GodRecords::time() const {
  return time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_GodRecords::mutable_time() {
  return &time_;
}

// repeated int64 roleID = 7;
inline int NetProto_GodRecords::roleID_size() const {
  return roleID_.size();
}
inline void NetProto_GodRecords::clear_roleID() {
  roleID_.Clear();
}
inline ::google::protobuf::int64 NetProto_GodRecords::roleID(int index) const {
  return roleID_.Get(index);
}
inline void NetProto_GodRecords::set_roleID(int index, ::google::protobuf::int64 value) {
  roleID_.Set(index, value);
}
inline void NetProto_GodRecords::add_roleID(::google::protobuf::int64 value) {
  roleID_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
NetProto_GodRecords::roleID() const {
  return roleID_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
NetProto_GodRecords::mutable_roleID() {
  return &roleID_;
}

// -------------------------------------------------------------------

// NetProto_GodPanel

// optional .NetProto_GodPlayer player = 1;
inline bool NetProto_GodPanel::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GodPanel::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GodPanel::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GodPanel::clear_player() {
  if (player_ != NULL) player_->::NetProto_GodPlayer::Clear();
  clear_has_player();
}
inline const ::NetProto_GodPlayer& NetProto_GodPanel::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::NetProto_GodPlayer* NetProto_GodPanel::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::NetProto_GodPlayer;
  return player_;
}
inline ::NetProto_GodPlayer* NetProto_GodPanel::release_player() {
  clear_has_player();
  ::NetProto_GodPlayer* temp = player_;
  player_ = NULL;
  return temp;
}

// optional int32 num = 2;
inline bool NetProto_GodPanel::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GodPanel::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GodPanel::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GodPanel::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 NetProto_GodPanel::num() const {
  return num_;
}
inline void NetProto_GodPanel::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 nextTime = 3;
inline bool NetProto_GodPanel::has_nextTime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GodPanel::set_has_nextTime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GodPanel::clear_has_nextTime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GodPanel::clear_nextTime() {
  nextTime_ = 0;
  clear_has_nextTime();
}
inline ::google::protobuf::int32 NetProto_GodPanel::nextTime() const {
  return nextTime_;
}
inline void NetProto_GodPanel::set_nextTime(::google::protobuf::int32 value) {
  set_has_nextTime();
  nextTime_ = value;
}

// -------------------------------------------------------------------

// NetProto_SelectGodRole

// optional int64 roleID = 1;
inline bool NetProto_SelectGodRole::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SelectGodRole::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SelectGodRole::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SelectGodRole::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_SelectGodRole::roleID() const {
  return roleID_;
}
inline void NetProto_SelectGodRole::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional .PB_PlayerAtt att = 2;
inline bool NetProto_SelectGodRole::has_att() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SelectGodRole::set_has_att() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SelectGodRole::clear_has_att() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SelectGodRole::clear_att() {
  if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
  clear_has_att();
}
inline const ::PB_PlayerAtt& NetProto_SelectGodRole::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_PlayerAtt* NetProto_SelectGodRole::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_PlayerAtt;
  return att_;
}
inline ::PB_PlayerAtt* NetProto_SelectGodRole::release_att() {
  clear_has_att();
  ::PB_PlayerAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_SetSpecial

// optional int32 npc = 1;
inline bool NetProto_SetSpecial::has_npc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SetSpecial::set_has_npc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SetSpecial::clear_has_npc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SetSpecial::clear_npc() {
  npc_ = 0;
  clear_has_npc();
}
inline ::google::protobuf::int32 NetProto_SetSpecial::npc() const {
  return npc_;
}
inline void NetProto_SetSpecial::set_npc(::google::protobuf::int32 value) {
  set_has_npc();
  npc_ = value;
}

// optional bool enable = 2;
inline bool NetProto_SetSpecial::has_enable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SetSpecial::set_has_enable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SetSpecial::clear_has_enable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SetSpecial::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool NetProto_SetSpecial::enable() const {
  return enable_;
}
inline void NetProto_SetSpecial::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
}

// -------------------------------------------------------------------

// NetProto_ResolveEquips

// optional int32 op = 1;
inline bool NetProto_ResolveEquips::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ResolveEquips::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ResolveEquips::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ResolveEquips::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 NetProto_ResolveEquips::op() const {
  return op_;
}
inline void NetProto_ResolveEquips::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyPKScoreActive

// optional int64 value = 1;
inline bool NetProto_ModifyPKScoreActive::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyPKScoreActive::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyPKScoreActive::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyPKScoreActive::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 NetProto_ModifyPKScoreActive::value() const {
  return value_;
}
inline void NetProto_ModifyPKScoreActive::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyRMBActive

// optional int64 value = 1;
inline bool NetProto_ModifyRMBActive::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyRMBActive::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyRMBActive::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyRMBActive::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 NetProto_ModifyRMBActive::value() const {
  return value_;
}
inline void NetProto_ModifyRMBActive::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_DropItem

// optional int32 npc = 1;
inline bool NetProto_DropItem::has_npc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DropItem::set_has_npc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DropItem::clear_has_npc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DropItem::clear_npc() {
  npc_ = 0;
  clear_has_npc();
}
inline ::google::protobuf::int32 NetProto_DropItem::npc() const {
  return npc_;
}
inline void NetProto_DropItem::set_npc(::google::protobuf::int32 value) {
  set_has_npc();
  npc_ = value;
}

// optional int32 index = 2;
inline bool NetProto_DropItem::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_DropItem::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_DropItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_DropItem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_DropItem::index() const {
  return index_;
}
inline void NetProto_DropItem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 v = 3;
inline bool NetProto_DropItem::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_DropItem::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_DropItem::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_DropItem::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 NetProto_DropItem::v() const {
  return v_;
}
inline void NetProto_DropItem::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
}

// optional int32 v1 = 4;
inline bool NetProto_DropItem::has_v1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_DropItem::set_has_v1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_DropItem::clear_has_v1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_DropItem::clear_v1() {
  v1_ = 0;
  clear_has_v1();
}
inline ::google::protobuf::int32 NetProto_DropItem::v1() const {
  return v1_;
}
inline void NetProto_DropItem::set_v1(::google::protobuf::int32 value) {
  set_has_v1();
  v1_ = value;
}

// optional int32 v2 = 5;
inline bool NetProto_DropItem::has_v2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_DropItem::set_has_v2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_DropItem::clear_has_v2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_DropItem::clear_v2() {
  v2_ = 0;
  clear_has_v2();
}
inline ::google::protobuf::int32 NetProto_DropItem::v2() const {
  return v2_;
}
inline void NetProto_DropItem::set_v2(::google::protobuf::int32 value) {
  set_has_v2();
  v2_ = value;
}

// -------------------------------------------------------------------

// NetProto_SellGoods

// optional .GoodsInfo.ColorType op = 1;
inline bool NetProto_SellGoods::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SellGoods::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SellGoods::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SellGoods::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::GoodsInfo_ColorType NetProto_SellGoods::op() const {
  return static_cast< ::GoodsInfo_ColorType >(op_);
}
inline void NetProto_SellGoods::set_op(::GoodsInfo_ColorType value) {
  GOOGLE_DCHECK(::GoodsInfo_ColorType_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional .PB_ItemPackage.Begin type = 2;
inline bool NetProto_SellGoods::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SellGoods::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SellGoods::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SellGoods::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PB_ItemPackage_Begin NetProto_SellGoods::type() const {
  return static_cast< ::PB_ItemPackage_Begin >(type_);
}
inline void NetProto_SellGoods::set_type(::PB_ItemPackage_Begin value) {
  GOOGLE_DCHECK(::PB_ItemPackage_Begin_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NetProto_Luck

// optional int32 index = 1;
inline bool NetProto_Luck::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Luck::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Luck::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Luck::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_Luck::index() const {
  return index_;
}
inline void NetProto_Luck::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional bool free = 2;
inline bool NetProto_Luck::has_free() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Luck::set_has_free() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Luck::clear_has_free() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Luck::clear_free() {
  free_ = false;
  clear_has_free();
}
inline bool NetProto_Luck::free() const {
  return free_;
}
inline void NetProto_Luck::set_free(bool value) {
  set_has_free();
  free_ = value;
}

// -------------------------------------------------------------------

// NetProto_GrabRedEnvelope

// optional string str = 1;
inline bool NetProto_GrabRedEnvelope::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GrabRedEnvelope::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GrabRedEnvelope::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GrabRedEnvelope::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& NetProto_GrabRedEnvelope::str() const {
  return *str_;
}
inline void NetProto_GrabRedEnvelope::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_GrabRedEnvelope::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_GrabRedEnvelope::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GrabRedEnvelope::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* NetProto_GrabRedEnvelope::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .NetProto_GetRes gr = 2;
inline bool NetProto_GrabRedEnvelope::has_gr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GrabRedEnvelope::set_has_gr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GrabRedEnvelope::clear_has_gr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GrabRedEnvelope::clear_gr() {
  if (gr_ != NULL) gr_->::NetProto_GetRes::Clear();
  clear_has_gr();
}
inline const ::NetProto_GetRes& NetProto_GrabRedEnvelope::gr() const {
  return gr_ != NULL ? *gr_ : *default_instance_->gr_;
}
inline ::NetProto_GetRes* NetProto_GrabRedEnvelope::mutable_gr() {
  set_has_gr();
  if (gr_ == NULL) gr_ = new ::NetProto_GetRes;
  return gr_;
}
inline ::NetProto_GetRes* NetProto_GrabRedEnvelope::release_gr() {
  clear_has_gr();
  ::NetProto_GetRes* temp = gr_;
  gr_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_CatGift

// optional int32 allCount = 1;
inline bool NetProto_CatGift::has_allCount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_CatGift::set_has_allCount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_CatGift::clear_has_allCount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_CatGift::clear_allCount() {
  allCount_ = 0;
  clear_has_allCount();
}
inline ::google::protobuf::int32 NetProto_CatGift::allCount() const {
  return allCount_;
}
inline void NetProto_CatGift::set_allCount(::google::protobuf::int32 value) {
  set_has_allCount();
  allCount_ = value;
}

// optional int32 count = 2;
inline bool NetProto_CatGift::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_CatGift::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_CatGift::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_CatGift::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_CatGift::count() const {
  return count_;
}
inline void NetProto_CatGift::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_GroupPurchase

// optional int32 allCount = 1;
inline bool NetProto_GroupPurchase::has_allCount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GroupPurchase::set_has_allCount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GroupPurchase::clear_has_allCount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GroupPurchase::clear_allCount() {
  allCount_ = 0;
  clear_has_allCount();
}
inline ::google::protobuf::int32 NetProto_GroupPurchase::allCount() const {
  return allCount_;
}
inline void NetProto_GroupPurchase::set_allCount(::google::protobuf::int32 value) {
  set_has_allCount();
  allCount_ = value;
}

// -------------------------------------------------------------------

// NetProto_Rides

// optional int32 rides = 1;
inline bool NetProto_Rides::has_rides() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Rides::set_has_rides() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Rides::clear_has_rides() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Rides::clear_rides() {
  rides_ = 0;
  clear_has_rides();
}
inline ::google::protobuf::int32 NetProto_Rides::rides() const {
  return rides_;
}
inline void NetProto_Rides::set_rides(::google::protobuf::int32 value) {
  set_has_rides();
  rides_ = value;
}

// -------------------------------------------------------------------

// NetProto_RidesTrain

// optional int32 index = 1;
inline bool NetProto_RidesTrain::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RidesTrain::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RidesTrain::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RidesTrain::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_RidesTrain::index() const {
  return index_;
}
inline void NetProto_RidesTrain::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional bool high = 2;
inline bool NetProto_RidesTrain::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_RidesTrain::set_has_high() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_RidesTrain::clear_has_high() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_RidesTrain::clear_high() {
  high_ = false;
  clear_has_high();
}
inline bool NetProto_RidesTrain::high() const {
  return high_;
}
inline void NetProto_RidesTrain::set_high(bool value) {
  set_has_high();
  high_ = value;
}

// optional int32 upProperty = 3;
inline bool NetProto_RidesTrain::has_upProperty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_RidesTrain::set_has_upProperty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_RidesTrain::clear_has_upProperty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_RidesTrain::clear_upProperty() {
  upProperty_ = 0;
  clear_has_upProperty();
}
inline ::google::protobuf::int32 NetProto_RidesTrain::upProperty() const {
  return upProperty_;
}
inline void NetProto_RidesTrain::set_upProperty(::google::protobuf::int32 value) {
  set_has_upProperty();
  upProperty_ = value;
}

// optional int32 downProperty = 4;
inline bool NetProto_RidesTrain::has_downProperty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_RidesTrain::set_has_downProperty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_RidesTrain::clear_has_downProperty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_RidesTrain::clear_downProperty() {
  downProperty_ = 0;
  clear_has_downProperty();
}
inline ::google::protobuf::int32 NetProto_RidesTrain::downProperty() const {
  return downProperty_;
}
inline void NetProto_RidesTrain::set_downProperty(::google::protobuf::int32 value) {
  set_has_downProperty();
  downProperty_ = value;
}

// optional int32 upv = 5;
inline bool NetProto_RidesTrain::has_upv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_RidesTrain::set_has_upv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_RidesTrain::clear_has_upv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_RidesTrain::clear_upv() {
  upv_ = 0;
  clear_has_upv();
}
inline ::google::protobuf::int32 NetProto_RidesTrain::upv() const {
  return upv_;
}
inline void NetProto_RidesTrain::set_upv(::google::protobuf::int32 value) {
  set_has_upv();
  upv_ = value;
}

// optional int32 downv = 6;
inline bool NetProto_RidesTrain::has_downv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_RidesTrain::set_has_downv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_RidesTrain::clear_has_downv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_RidesTrain::clear_downv() {
  downv_ = 0;
  clear_has_downv();
}
inline ::google::protobuf::int32 NetProto_RidesTrain::downv() const {
  return downv_;
}
inline void NetProto_RidesTrain::set_downv(::google::protobuf::int32 value) {
  set_has_downv();
  downv_ = value;
}

// -------------------------------------------------------------------

// NetProto_GenRides

// repeated int32 indexes = 1;
inline int NetProto_GenRides::indexes_size() const {
  return indexes_.size();
}
inline void NetProto_GenRides::clear_indexes() {
  indexes_.Clear();
}
inline ::google::protobuf::int32 NetProto_GenRides::indexes(int index) const {
  return indexes_.Get(index);
}
inline void NetProto_GenRides::set_indexes(int index, ::google::protobuf::int32 value) {
  indexes_.Set(index, value);
}
inline void NetProto_GenRides::add_indexes(::google::protobuf::int32 value) {
  indexes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_GenRides::indexes() const {
  return indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_GenRides::mutable_indexes() {
  return &indexes_;
}

// repeated int32 ids = 2;
inline int NetProto_GenRides::ids_size() const {
  return ids_.size();
}
inline void NetProto_GenRides::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int32 NetProto_GenRides::ids(int index) const {
  return ids_.Get(index);
}
inline void NetProto_GenRides::set_ids(int index, ::google::protobuf::int32 value) {
  ids_.Set(index, value);
}
inline void NetProto_GenRides::add_ids(::google::protobuf::int32 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_GenRides::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_GenRides::mutable_ids() {
  return &ids_;
}

// -------------------------------------------------------------------

// NetProto_GodShip

// optional int32 index = 1;
inline bool NetProto_GodShip::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GodShip::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GodShip::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GodShip::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_GodShip::index() const {
  return index_;
}
inline void NetProto_GodShip::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional bool next = 2;
inline bool NetProto_GodShip::has_next() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GodShip::set_has_next() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GodShip::clear_has_next() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GodShip::clear_next() {
  next_ = false;
  clear_has_next();
}
inline bool NetProto_GodShip::next() const {
  return next_;
}
inline void NetProto_GodShip::set_next(bool value) {
  set_has_next();
  next_ = value;
}

// optional int32 cut = 3;
inline bool NetProto_GodShip::has_cut() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GodShip::set_has_cut() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GodShip::clear_has_cut() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GodShip::clear_cut() {
  cut_ = 0;
  clear_has_cut();
}
inline ::google::protobuf::int32 NetProto_GodShip::cut() const {
  return cut_;
}
inline void NetProto_GodShip::set_cut(::google::protobuf::int32 value) {
  set_has_cut();
  cut_ = value;
}

// -------------------------------------------------------------------

// NetProto_Swallow

// optional int32 index = 1;
inline bool NetProto_Swallow::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Swallow::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Swallow::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Swallow::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_Swallow::index() const {
  return index_;
}
inline void NetProto_Swallow::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 select = 2;
inline bool NetProto_Swallow::has_select() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Swallow::set_has_select() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Swallow::clear_has_select() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Swallow::clear_select() {
  select_ = 0;
  clear_has_select();
}
inline ::google::protobuf::int32 NetProto_Swallow::select() const {
  return select_;
}
inline void NetProto_Swallow::set_select(::google::protobuf::int32 value) {
  set_has_select();
  select_ = value;
}

// -------------------------------------------------------------------

// NetProto_GodPackage

// optional int32 pool = 1;
inline bool NetProto_GodPackage::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GodPackage::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GodPackage::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GodPackage::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::google::protobuf::int32 NetProto_GodPackage::pool() const {
  return pool_;
}
inline void NetProto_GodPackage::set_pool(::google::protobuf::int32 value) {
  set_has_pool();
  pool_ = value;
}

// optional int32 package = 2;
inline bool NetProto_GodPackage::has_package() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GodPackage::set_has_package() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GodPackage::clear_has_package() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GodPackage::clear_package() {
  package_ = 0;
  clear_has_package();
}
inline ::google::protobuf::int32 NetProto_GodPackage::package() const {
  return package_;
}
inline void NetProto_GodPackage::set_package(::google::protobuf::int32 value) {
  set_has_package();
  package_ = value;
}

// optional int32 id = 3;
inline bool NetProto_GodPackage::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GodPackage::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GodPackage::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GodPackage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_GodPackage::id() const {
  return id_;
}
inline void NetProto_GodPackage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 exp = 4;
inline bool NetProto_GodPackage::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GodPackage::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GodPackage::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GodPackage::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 NetProto_GodPackage::exp() const {
  return exp_;
}
inline void NetProto_GodPackage::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 level = 5;
inline bool NetProto_GodPackage::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_GodPackage::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_GodPackage::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_GodPackage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetProto_GodPackage::level() const {
  return level_;
}
inline void NetProto_GodPackage::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 quality = 6;
inline bool NetProto_GodPackage::has_quality() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_GodPackage::set_has_quality() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_GodPackage::clear_has_quality() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_GodPackage::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 NetProto_GodPackage::quality() const {
  return quality_;
}
inline void NetProto_GodPackage::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// -------------------------------------------------------------------

// NetProto_WearGodShip

// optional int32 index = 1;
inline bool NetProto_WearGodShip::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_WearGodShip::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_WearGodShip::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_WearGodShip::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_WearGodShip::index() const {
  return index_;
}
inline void NetProto_WearGodShip::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_UnWearGodShip

// optional int32 index = 1;
inline bool NetProto_UnWearGodShip::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_UnWearGodShip::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_UnWearGodShip::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_UnWearGodShip::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_UnWearGodShip::index() const {
  return index_;
}
inline void NetProto_UnWearGodShip::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_ArrangeGodShip

// -------------------------------------------------------------------

// NetProto_RidesUP

// optional int32 index = 1;
inline bool NetProto_RidesUP::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RidesUP::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RidesUP::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RidesUP::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_RidesUP::index() const {
  return index_;
}
inline void NetProto_RidesUP::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 star = 2;
inline bool NetProto_RidesUP::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_RidesUP::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_RidesUP::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_RidesUP::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 NetProto_RidesUP::star() const {
  return star_;
}
inline void NetProto_RidesUP::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// NetProto_RidesInherit

// optional int32 target = 1;
inline bool NetProto_RidesInherit::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RidesInherit::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RidesInherit::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RidesInherit::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 NetProto_RidesInherit::target() const {
  return target_;
}
inline void NetProto_RidesInherit::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// repeated int32 ridesExpend = 2;
inline int NetProto_RidesInherit::ridesExpend_size() const {
  return ridesExpend_.size();
}
inline void NetProto_RidesInherit::clear_ridesExpend() {
  ridesExpend_.Clear();
}
inline ::google::protobuf::int32 NetProto_RidesInherit::ridesExpend(int index) const {
  return ridesExpend_.Get(index);
}
inline void NetProto_RidesInherit::set_ridesExpend(int index, ::google::protobuf::int32 value) {
  ridesExpend_.Set(index, value);
}
inline void NetProto_RidesInherit::add_ridesExpend(::google::protobuf::int32 value) {
  ridesExpend_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_RidesInherit::ridesExpend() const {
  return ridesExpend_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_RidesInherit::mutable_ridesExpend() {
  return &ridesExpend_;
}

// optional int64 curExp = 3;
inline bool NetProto_RidesInherit::has_curExp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_RidesInherit::set_has_curExp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_RidesInherit::clear_has_curExp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_RidesInherit::clear_curExp() {
  curExp_ = GOOGLE_LONGLONG(0);
  clear_has_curExp();
}
inline ::google::protobuf::int64 NetProto_RidesInherit::curExp() const {
  return curExp_;
}
inline void NetProto_RidesInherit::set_curExp(::google::protobuf::int64 value) {
  set_has_curExp();
  curExp_ = value;
}

// optional int32 level = 4;
inline bool NetProto_RidesInherit::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_RidesInherit::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_RidesInherit::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_RidesInherit::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetProto_RidesInherit::level() const {
  return level_;
}
inline void NetProto_RidesInherit::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 potential = 5;
inline bool NetProto_RidesInherit::has_potential() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_RidesInherit::set_has_potential() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_RidesInherit::clear_has_potential() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_RidesInherit::clear_potential() {
  potential_ = 0;
  clear_has_potential();
}
inline ::google::protobuf::int32 NetProto_RidesInherit::potential() const {
  return potential_;
}
inline void NetProto_RidesInherit::set_potential(::google::protobuf::int32 value) {
  set_has_potential();
  potential_ = value;
}

// -------------------------------------------------------------------

// NetProto_SingleGodShip

// optional int32 index = 1;
inline bool NetProto_SingleGodShip::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SingleGodShip::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SingleGodShip::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SingleGodShip::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_SingleGodShip::index() const {
  return index_;
}
inline void NetProto_SingleGodShip::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated int32 eat = 2;
inline int NetProto_SingleGodShip::eat_size() const {
  return eat_.size();
}
inline void NetProto_SingleGodShip::clear_eat() {
  eat_.Clear();
}
inline ::google::protobuf::int32 NetProto_SingleGodShip::eat(int index) const {
  return eat_.Get(index);
}
inline void NetProto_SingleGodShip::set_eat(int index, ::google::protobuf::int32 value) {
  eat_.Set(index, value);
}
inline void NetProto_SingleGodShip::add_eat(::google::protobuf::int32 value) {
  eat_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_SingleGodShip::eat() const {
  return eat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_SingleGodShip::mutable_eat() {
  return &eat_;
}

// -------------------------------------------------------------------

// NetProto_RidesLockAtt

// optional int32 index = 1;
inline bool NetProto_RidesLockAtt::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RidesLockAtt::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RidesLockAtt::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RidesLockAtt::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_RidesLockAtt::index() const {
  return index_;
}
inline void NetProto_RidesLockAtt::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 lockIndex = 2;
inline bool NetProto_RidesLockAtt::has_lockIndex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_RidesLockAtt::set_has_lockIndex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_RidesLockAtt::clear_has_lockIndex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_RidesLockAtt::clear_lockIndex() {
  lockIndex_ = 0;
  clear_has_lockIndex();
}
inline ::google::protobuf::int32 NetProto_RidesLockAtt::lockIndex() const {
  return lockIndex_;
}
inline void NetProto_RidesLockAtt::set_lockIndex(::google::protobuf::int32 value) {
  set_has_lockIndex();
  lockIndex_ = value;
}

// optional bool lock = 3;
inline bool NetProto_RidesLockAtt::has_lock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_RidesLockAtt::set_has_lock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_RidesLockAtt::clear_has_lock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_RidesLockAtt::clear_lock() {
  lock_ = false;
  clear_has_lock();
}
inline bool NetProto_RidesLockAtt::lock() const {
  return lock_;
}
inline void NetProto_RidesLockAtt::set_lock(bool value) {
  set_has_lock();
  lock_ = value;
}

// -------------------------------------------------------------------

// NetProto_RidesConfirmTrain

// optional int32 index = 1;
inline bool NetProto_RidesConfirmTrain::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RidesConfirmTrain::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RidesConfirmTrain::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RidesConfirmTrain::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_RidesConfirmTrain::index() const {
  return index_;
}
inline void NetProto_RidesConfirmTrain::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_RidesUnLockAtt

// optional int32 index = 1;
inline bool NetProto_RidesUnLockAtt::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RidesUnLockAtt::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RidesUnLockAtt::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RidesUnLockAtt::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_RidesUnLockAtt::index() const {
  return index_;
}
inline void NetProto_RidesUnLockAtt::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_AddStatus

// optional int32 statusID = 1;
inline bool NetProto_AddStatus::has_statusID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_AddStatus::set_has_statusID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_AddStatus::clear_has_statusID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_AddStatus::clear_statusID() {
  statusID_ = 0;
  clear_has_statusID();
}
inline ::google::protobuf::int32 NetProto_AddStatus::statusID() const {
  return statusID_;
}
inline void NetProto_AddStatus::set_statusID(::google::protobuf::int32 value) {
  set_has_statusID();
  statusID_ = value;
}

// optional .NetProto_AddStatus.Type type = 2;
inline bool NetProto_AddStatus::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_AddStatus::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_AddStatus::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_AddStatus::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_AddStatus_Type NetProto_AddStatus::type() const {
  return static_cast< ::NetProto_AddStatus_Type >(type_);
}
inline void NetProto_AddStatus::set_type(::NetProto_AddStatus_Type value) {
  GOOGLE_DCHECK(::NetProto_AddStatus_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 targetID = 3;
inline bool NetProto_AddStatus::has_targetID() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_AddStatus::set_has_targetID() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_AddStatus::clear_has_targetID() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_AddStatus::clear_targetID() {
  targetID_ = 0;
  clear_has_targetID();
}
inline ::google::protobuf::int32 NetProto_AddStatus::targetID() const {
  return targetID_;
}
inline void NetProto_AddStatus::set_targetID(::google::protobuf::int32 value) {
  set_has_targetID();
  targetID_ = value;
}

// optional int32 time = 4;
inline bool NetProto_AddStatus::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_AddStatus::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_AddStatus::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_AddStatus::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 NetProto_AddStatus::time() const {
  return time_;
}
inline void NetProto_AddStatus::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional .PB_Vector3f dest = 5;
inline bool NetProto_AddStatus::has_dest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_AddStatus::set_has_dest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_AddStatus::clear_has_dest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_AddStatus::clear_dest() {
  if (dest_ != NULL) dest_->::PB_Vector3f::Clear();
  clear_has_dest();
}
inline const ::PB_Vector3f& NetProto_AddStatus::dest() const {
  return dest_ != NULL ? *dest_ : *default_instance_->dest_;
}
inline ::PB_Vector3f* NetProto_AddStatus::mutable_dest() {
  set_has_dest();
  if (dest_ == NULL) dest_ = new ::PB_Vector3f;
  return dest_;
}
inline ::PB_Vector3f* NetProto_AddStatus::release_dest() {
  clear_has_dest();
  ::PB_Vector3f* temp = dest_;
  dest_ = NULL;
  return temp;
}

// repeated int32 delSkills = 6;
inline int NetProto_AddStatus::delSkills_size() const {
  return delSkills_.size();
}
inline void NetProto_AddStatus::clear_delSkills() {
  delSkills_.Clear();
}
inline ::google::protobuf::int32 NetProto_AddStatus::delSkills(int index) const {
  return delSkills_.Get(index);
}
inline void NetProto_AddStatus::set_delSkills(int index, ::google::protobuf::int32 value) {
  delSkills_.Set(index, value);
}
inline void NetProto_AddStatus::add_delSkills(::google::protobuf::int32 value) {
  delSkills_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_AddStatus::delSkills() const {
  return delSkills_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_AddStatus::mutable_delSkills() {
  return &delSkills_;
}

// optional int32 aID = 7;
inline bool NetProto_AddStatus::has_aID() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_AddStatus::set_has_aID() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_AddStatus::clear_has_aID() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_AddStatus::clear_aID() {
  aID_ = 0;
  clear_has_aID();
}
inline ::google::protobuf::int32 NetProto_AddStatus::aID() const {
  return aID_;
}
inline void NetProto_AddStatus::set_aID(::google::protobuf::int32 value) {
  set_has_aID();
  aID_ = value;
}

// -------------------------------------------------------------------

// NetProto_Hit

// optional int32 aSkillID = 1;
inline bool NetProto_Hit::has_aSkillID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Hit::set_has_aSkillID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Hit::clear_has_aSkillID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Hit::clear_aSkillID() {
  aSkillID_ = 0;
  clear_has_aSkillID();
}
inline ::google::protobuf::int32 NetProto_Hit::aSkillID() const {
  return aSkillID_;
}
inline void NetProto_Hit::set_aSkillID(::google::protobuf::int32 value) {
  set_has_aSkillID();
  aSkillID_ = value;
}

// repeated .NetProto_Hit.Type dType = 2;
inline int NetProto_Hit::dType_size() const {
  return dType_.size();
}
inline void NetProto_Hit::clear_dType() {
  dType_.Clear();
}
inline ::NetProto_Hit_Type NetProto_Hit::dType(int index) const {
  return static_cast< ::NetProto_Hit_Type >(dType_.Get(index));
}
inline void NetProto_Hit::set_dType(int index, ::NetProto_Hit_Type value) {
  GOOGLE_DCHECK(::NetProto_Hit_Type_IsValid(value));
  dType_.Set(index, value);
}
inline void NetProto_Hit::add_dType(::NetProto_Hit_Type value) {
  GOOGLE_DCHECK(::NetProto_Hit_Type_IsValid(value));
  dType_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
NetProto_Hit::dType() const {
  return dType_;
}
inline ::google::protobuf::RepeatedField<int>*
NetProto_Hit::mutable_dType() {
  return &dType_;
}

// repeated int32 dID = 3;
inline int NetProto_Hit::dID_size() const {
  return dID_.size();
}
inline void NetProto_Hit::clear_dID() {
  dID_.Clear();
}
inline ::google::protobuf::int32 NetProto_Hit::dID(int index) const {
  return dID_.Get(index);
}
inline void NetProto_Hit::set_dID(int index, ::google::protobuf::int32 value) {
  dID_.Set(index, value);
}
inline void NetProto_Hit::add_dID(::google::protobuf::int32 value) {
  dID_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_Hit::dID() const {
  return dID_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_Hit::mutable_dID() {
  return &dID_;
}

// optional .NetProto_Hit.Type aType = 4;
inline bool NetProto_Hit::has_aType() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Hit::set_has_aType() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Hit::clear_has_aType() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Hit::clear_aType() {
  aType_ = 0;
  clear_has_aType();
}
inline ::NetProto_Hit_Type NetProto_Hit::aType() const {
  return static_cast< ::NetProto_Hit_Type >(aType_);
}
inline void NetProto_Hit::set_aType(::NetProto_Hit_Type value) {
  GOOGLE_DCHECK(::NetProto_Hit_Type_IsValid(value));
  set_has_aType();
  aType_ = value;
}

// optional int32 aID = 5;
inline bool NetProto_Hit::has_aID() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_Hit::set_has_aID() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_Hit::clear_has_aID() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_Hit::clear_aID() {
  aID_ = 0;
  clear_has_aID();
}
inline ::google::protobuf::int32 NetProto_Hit::aID() const {
  return aID_;
}
inline void NetProto_Hit::set_aID(::google::protobuf::int32 value) {
  set_has_aID();
  aID_ = value;
}

// repeated .NetProto_AddStatus statuses = 6;
inline int NetProto_Hit::statuses_size() const {
  return statuses_.size();
}
inline void NetProto_Hit::clear_statuses() {
  statuses_.Clear();
}
inline const ::NetProto_AddStatus& NetProto_Hit::statuses(int index) const {
  return statuses_.Get(index);
}
inline ::NetProto_AddStatus* NetProto_Hit::mutable_statuses(int index) {
  return statuses_.Mutable(index);
}
inline ::NetProto_AddStatus* NetProto_Hit::add_statuses() {
  return statuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_AddStatus >&
NetProto_Hit::statuses() const {
  return statuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_AddStatus >*
NetProto_Hit::mutable_statuses() {
  return &statuses_;
}

// optional bool resistControl = 7;
inline bool NetProto_Hit::has_resistControl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_Hit::set_has_resistControl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_Hit::clear_has_resistControl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_Hit::clear_resistControl() {
  resistControl_ = false;
  clear_has_resistControl();
}
inline bool NetProto_Hit::resistControl() const {
  return resistControl_;
}
inline void NetProto_Hit::set_resistControl(bool value) {
  set_has_resistControl();
  resistControl_ = value;
}

// -------------------------------------------------------------------

// NetProto_StatusEffect

// optional .StatusInfo.StatusType statusType = 1;
inline bool NetProto_StatusEffect::has_statusType() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_StatusEffect::set_has_statusType() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_StatusEffect::clear_has_statusType() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_StatusEffect::clear_statusType() {
  statusType_ = 0;
  clear_has_statusType();
}
inline ::StatusInfo_StatusType NetProto_StatusEffect::statusType() const {
  return static_cast< ::StatusInfo_StatusType >(statusType_);
}
inline void NetProto_StatusEffect::set_statusType(::StatusInfo_StatusType value) {
  GOOGLE_DCHECK(::StatusInfo_StatusType_IsValid(value));
  set_has_statusType();
  statusType_ = value;
}

// optional int32 value = 2;
inline bool NetProto_StatusEffect::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_StatusEffect::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_StatusEffect::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_StatusEffect::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 NetProto_StatusEffect::value() const {
  return value_;
}
inline void NetProto_StatusEffect::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional .NetProto_StatusEffect.Type type = 3;
inline bool NetProto_StatusEffect::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_StatusEffect::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_StatusEffect::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_StatusEffect::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_StatusEffect_Type NetProto_StatusEffect::type() const {
  return static_cast< ::NetProto_StatusEffect_Type >(type_);
}
inline void NetProto_StatusEffect::set_type(::NetProto_StatusEffect_Type value) {
  GOOGLE_DCHECK(::NetProto_StatusEffect_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 4;
inline bool NetProto_StatusEffect::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_StatusEffect::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_StatusEffect::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_StatusEffect::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_StatusEffect::id() const {
  return id_;
}
inline void NetProto_StatusEffect::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_StatusEffect.Effect effect = 5;
inline bool NetProto_StatusEffect::has_effect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_StatusEffect::set_has_effect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_StatusEffect::clear_has_effect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_StatusEffect::clear_effect() {
  effect_ = 0;
  clear_has_effect();
}
inline ::NetProto_StatusEffect_Effect NetProto_StatusEffect::effect() const {
  return static_cast< ::NetProto_StatusEffect_Effect >(effect_);
}
inline void NetProto_StatusEffect::set_effect(::NetProto_StatusEffect_Effect value) {
  GOOGLE_DCHECK(::NetProto_StatusEffect_Effect_IsValid(value));
  set_has_effect();
  effect_ = value;
}

// optional int32 skillID = 6;
inline bool NetProto_StatusEffect::has_skillID() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_StatusEffect::set_has_skillID() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_StatusEffect::clear_has_skillID() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_StatusEffect::clear_skillID() {
  skillID_ = 0;
  clear_has_skillID();
}
inline ::google::protobuf::int32 NetProto_StatusEffect::skillID() const {
  return skillID_;
}
inline void NetProto_StatusEffect::set_skillID(::google::protobuf::int32 value) {
  set_has_skillID();
  skillID_ = value;
}

// -------------------------------------------------------------------

// NetProto_StaticOver

// optional .NetProto_StaticOver.Type type = 1;
inline bool NetProto_StaticOver::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_StaticOver::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_StaticOver::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_StaticOver::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_StaticOver_Type NetProto_StaticOver::type() const {
  return static_cast< ::NetProto_StaticOver_Type >(type_);
}
inline void NetProto_StaticOver::set_type(::NetProto_StaticOver_Type value) {
  GOOGLE_DCHECK(::NetProto_StaticOver_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool NetProto_StaticOver::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_StaticOver::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_StaticOver::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_StaticOver::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_StaticOver::id() const {
  return id_;
}
inline void NetProto_StaticOver::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_Standup

// optional .NetProto_Standup.Type type = 1;
inline bool NetProto_Standup::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Standup::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Standup::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Standup::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_Standup_Type NetProto_Standup::type() const {
  return static_cast< ::NetProto_Standup_Type >(type_);
}
inline void NetProto_Standup::set_type(::NetProto_Standup_Type value) {
  GOOGLE_DCHECK(::NetProto_Standup_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool NetProto_Standup::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Standup::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Standup::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Standup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Standup::id() const {
  return id_;
}
inline void NetProto_Standup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_SkillLevelUp

// optional int32 id = 1;
inline bool NetProto_SkillLevelUp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SkillLevelUp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SkillLevelUp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SkillLevelUp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_SkillLevelUp::id() const {
  return id_;
}
inline void NetProto_SkillLevelUp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 delta = 2;
inline bool NetProto_SkillLevelUp::has_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SkillLevelUp::set_has_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SkillLevelUp::clear_has_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SkillLevelUp::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline ::google::protobuf::int32 NetProto_SkillLevelUp::delta() const {
  return delta_;
}
inline void NetProto_SkillLevelUp::set_delta(::google::protobuf::int32 value) {
  set_has_delta();
  delta_ = value;
}

// optional int64 money = 3;
inline bool NetProto_SkillLevelUp::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_SkillLevelUp::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_SkillLevelUp::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_SkillLevelUp::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 NetProto_SkillLevelUp::money() const {
  return money_;
}
inline void NetProto_SkillLevelUp::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// NetProto_ClearSkill

// optional int32 id = 1;
inline bool NetProto_ClearSkill::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ClearSkill::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ClearSkill::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ClearSkill::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ClearSkill::id() const {
  return id_;
}
inline void NetProto_ClearSkill::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_DestroySkill

// optional int32 id = 1;
inline bool NetProto_DestroySkill::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DestroySkill::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DestroySkill::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DestroySkill::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_DestroySkill::id() const {
  return id_;
}
inline void NetProto_DestroySkill::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 skill = 2;
inline int NetProto_DestroySkill::skill_size() const {
  return skill_.size();
}
inline void NetProto_DestroySkill::clear_skill() {
  skill_.Clear();
}
inline ::google::protobuf::int32 NetProto_DestroySkill::skill(int index) const {
  return skill_.Get(index);
}
inline void NetProto_DestroySkill::set_skill(int index, ::google::protobuf::int32 value) {
  skill_.Set(index, value);
}
inline void NetProto_DestroySkill::add_skill(::google::protobuf::int32 value) {
  skill_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_DestroySkill::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_DestroySkill::mutable_skill() {
  return &skill_;
}

// optional bool immediately = 3;
inline bool NetProto_DestroySkill::has_immediately() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_DestroySkill::set_has_immediately() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_DestroySkill::clear_has_immediately() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_DestroySkill::clear_immediately() {
  immediately_ = false;
  clear_has_immediately();
}
inline bool NetProto_DestroySkill::immediately() const {
  return immediately_;
}
inline void NetProto_DestroySkill::set_immediately(bool value) {
  set_has_immediately();
  immediately_ = value;
}

// -------------------------------------------------------------------

// NetProto_AddGoods

// repeated .GoodsInfo goods = 1;
inline int NetProto_AddGoods::goods_size() const {
  return goods_.size();
}
inline void NetProto_AddGoods::clear_goods() {
  goods_.Clear();
}
inline const ::GoodsInfo& NetProto_AddGoods::goods(int index) const {
  return goods_.Get(index);
}
inline ::GoodsInfo* NetProto_AddGoods::mutable_goods(int index) {
  return goods_.Mutable(index);
}
inline ::GoodsInfo* NetProto_AddGoods::add_goods() {
  return goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GoodsInfo >&
NetProto_AddGoods::goods() const {
  return goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::GoodsInfo >*
NetProto_AddGoods::mutable_goods() {
  return &goods_;
}

// repeated int32 pos = 2;
inline int NetProto_AddGoods::pos_size() const {
  return pos_.size();
}
inline void NetProto_AddGoods::clear_pos() {
  pos_.Clear();
}
inline ::google::protobuf::int32 NetProto_AddGoods::pos(int index) const {
  return pos_.Get(index);
}
inline void NetProto_AddGoods::set_pos(int index, ::google::protobuf::int32 value) {
  pos_.Set(index, value);
}
inline void NetProto_AddGoods::add_pos(::google::protobuf::int32 value) {
  pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_AddGoods::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_AddGoods::mutable_pos() {
  return &pos_;
}

// repeated .NetProto_AddGoods.Type type = 3;
inline int NetProto_AddGoods::type_size() const {
  return type_.size();
}
inline void NetProto_AddGoods::clear_type() {
  type_.Clear();
}
inline ::NetProto_AddGoods_Type NetProto_AddGoods::type(int index) const {
  return static_cast< ::NetProto_AddGoods_Type >(type_.Get(index));
}
inline void NetProto_AddGoods::set_type(int index, ::NetProto_AddGoods_Type value) {
  GOOGLE_DCHECK(::NetProto_AddGoods_Type_IsValid(value));
  type_.Set(index, value);
}
inline void NetProto_AddGoods::add_type(::NetProto_AddGoods_Type value) {
  GOOGLE_DCHECK(::NetProto_AddGoods_Type_IsValid(value));
  type_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
NetProto_AddGoods::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedField<int>*
NetProto_AddGoods::mutable_type() {
  return &type_;
}

// repeated int32 id = 4;
inline int NetProto_AddGoods::id_size() const {
  return id_.size();
}
inline void NetProto_AddGoods::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 NetProto_AddGoods::id(int index) const {
  return id_.Get(index);
}
inline void NetProto_AddGoods::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
}
inline void NetProto_AddGoods::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_AddGoods::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_AddGoods::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// NetProto_AddEquipments

// repeated .EquipmentInfo equipments = 1;
inline int NetProto_AddEquipments::equipments_size() const {
  return equipments_.size();
}
inline void NetProto_AddEquipments::clear_equipments() {
  equipments_.Clear();
}
inline const ::EquipmentInfo& NetProto_AddEquipments::equipments(int index) const {
  return equipments_.Get(index);
}
inline ::EquipmentInfo* NetProto_AddEquipments::mutable_equipments(int index) {
  return equipments_.Mutable(index);
}
inline ::EquipmentInfo* NetProto_AddEquipments::add_equipments() {
  return equipments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >&
NetProto_AddEquipments::equipments() const {
  return equipments_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >*
NetProto_AddEquipments::mutable_equipments() {
  return &equipments_;
}

// repeated int32 pos = 2;
inline int NetProto_AddEquipments::pos_size() const {
  return pos_.size();
}
inline void NetProto_AddEquipments::clear_pos() {
  pos_.Clear();
}
inline ::google::protobuf::int32 NetProto_AddEquipments::pos(int index) const {
  return pos_.Get(index);
}
inline void NetProto_AddEquipments::set_pos(int index, ::google::protobuf::int32 value) {
  pos_.Set(index, value);
}
inline void NetProto_AddEquipments::add_pos(::google::protobuf::int32 value) {
  pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_AddEquipments::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_AddEquipments::mutable_pos() {
  return &pos_;
}

// repeated .NetProto_AddEquipments.Type type = 3;
inline int NetProto_AddEquipments::type_size() const {
  return type_.size();
}
inline void NetProto_AddEquipments::clear_type() {
  type_.Clear();
}
inline ::NetProto_AddEquipments_Type NetProto_AddEquipments::type(int index) const {
  return static_cast< ::NetProto_AddEquipments_Type >(type_.Get(index));
}
inline void NetProto_AddEquipments::set_type(int index, ::NetProto_AddEquipments_Type value) {
  GOOGLE_DCHECK(::NetProto_AddEquipments_Type_IsValid(value));
  type_.Set(index, value);
}
inline void NetProto_AddEquipments::add_type(::NetProto_AddEquipments_Type value) {
  GOOGLE_DCHECK(::NetProto_AddEquipments_Type_IsValid(value));
  type_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
NetProto_AddEquipments::type() const {
  return type_;
}
inline ::google::protobuf::RepeatedField<int>*
NetProto_AddEquipments::mutable_type() {
  return &type_;
}

// repeated int32 id = 4;
inline int NetProto_AddEquipments::id_size() const {
  return id_.size();
}
inline void NetProto_AddEquipments::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 NetProto_AddEquipments::id(int index) const {
  return id_.Get(index);
}
inline void NetProto_AddEquipments::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
}
inline void NetProto_AddEquipments::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_AddEquipments::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_AddEquipments::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// NetProto_ShiftItem

// optional .NetProto_ShiftItem.Type prevType = 1;
inline bool NetProto_ShiftItem::has_prevType() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ShiftItem::set_has_prevType() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ShiftItem::clear_has_prevType() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ShiftItem::clear_prevType() {
  prevType_ = 0;
  clear_has_prevType();
}
inline ::NetProto_ShiftItem_Type NetProto_ShiftItem::prevType() const {
  return static_cast< ::NetProto_ShiftItem_Type >(prevType_);
}
inline void NetProto_ShiftItem::set_prevType(::NetProto_ShiftItem_Type value) {
  GOOGLE_DCHECK(::NetProto_ShiftItem_Type_IsValid(value));
  set_has_prevType();
  prevType_ = value;
}

// optional int32 prevPos = 2;
inline bool NetProto_ShiftItem::has_prevPos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ShiftItem::set_has_prevPos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ShiftItem::clear_has_prevPos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ShiftItem::clear_prevPos() {
  prevPos_ = 0;
  clear_has_prevPos();
}
inline ::google::protobuf::int32 NetProto_ShiftItem::prevPos() const {
  return prevPos_;
}
inline void NetProto_ShiftItem::set_prevPos(::google::protobuf::int32 value) {
  set_has_prevPos();
  prevPos_ = value;
}

// optional .NetProto_ShiftItem.Type newType = 3;
inline bool NetProto_ShiftItem::has_newType() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_ShiftItem::set_has_newType() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_ShiftItem::clear_has_newType() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_ShiftItem::clear_newType() {
  newType_ = 0;
  clear_has_newType();
}
inline ::NetProto_ShiftItem_Type NetProto_ShiftItem::newType() const {
  return static_cast< ::NetProto_ShiftItem_Type >(newType_);
}
inline void NetProto_ShiftItem::set_newType(::NetProto_ShiftItem_Type value) {
  GOOGLE_DCHECK(::NetProto_ShiftItem_Type_IsValid(value));
  set_has_newType();
  newType_ = value;
}

// optional int32 newPos = 4;
inline bool NetProto_ShiftItem::has_newPos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_ShiftItem::set_has_newPos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_ShiftItem::clear_has_newPos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_ShiftItem::clear_newPos() {
  newPos_ = 0;
  clear_has_newPos();
}
inline ::google::protobuf::int32 NetProto_ShiftItem::newPos() const {
  return newPos_;
}
inline void NetProto_ShiftItem::set_newPos(::google::protobuf::int32 value) {
  set_has_newPos();
  newPos_ = value;
}

// optional int32 count = 5;
inline bool NetProto_ShiftItem::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_ShiftItem::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_ShiftItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_ShiftItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_ShiftItem::count() const {
  return count_;
}
inline void NetProto_ShiftItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_QueryItemInfo

// optional .NetProto_QueryItemInfo.Type type = 1;
inline bool NetProto_QueryItemInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_QueryItemInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_QueryItemInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_QueryItemInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_QueryItemInfo_Type NetProto_QueryItemInfo::type() const {
  return static_cast< ::NetProto_QueryItemInfo_Type >(type_);
}
inline void NetProto_QueryItemInfo::set_type(::NetProto_QueryItemInfo_Type value) {
  GOOGLE_DCHECK(::NetProto_QueryItemInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 id = 2;
inline bool NetProto_QueryItemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_QueryItemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_QueryItemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_QueryItemInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 NetProto_QueryItemInfo::id() const {
  return id_;
}
inline void NetProto_QueryItemInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_BuyItem

// optional int32 business = 1;
inline bool NetProto_BuyItem::has_business() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BuyItem::set_has_business() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BuyItem::clear_has_business() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BuyItem::clear_business() {
  business_ = 0;
  clear_has_business();
}
inline ::google::protobuf::int32 NetProto_BuyItem::business() const {
  return business_;
}
inline void NetProto_BuyItem::set_business(::google::protobuf::int32 value) {
  set_has_business();
  business_ = value;
}

// optional int32 id = 2;
inline bool NetProto_BuyItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_BuyItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_BuyItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_BuyItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_BuyItem::id() const {
  return id_;
}
inline void NetProto_BuyItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 3;
inline bool NetProto_BuyItem::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_BuyItem::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_BuyItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_BuyItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_BuyItem::count() const {
  return count_;
}
inline void NetProto_BuyItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_SellItem

// optional int32 id = 1;
inline bool NetProto_SellItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SellItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SellItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SellItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_SellItem::id() const {
  return id_;
}
inline void NetProto_SellItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 2;
inline bool NetProto_SellItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SellItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SellItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SellItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_SellItem::count() const {
  return count_;
}
inline void NetProto_SellItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_Repair

// optional int32 id = 1;
inline bool NetProto_Repair::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Repair::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Repair::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Repair::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Repair::id() const {
  return id_;
}
inline void NetProto_Repair::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 price = 2;
inline bool NetProto_Repair::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Repair::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Repair::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Repair::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 NetProto_Repair::price() const {
  return price_;
}
inline void NetProto_Repair::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// NetProto_UseGoods

// optional int32 id = 1;
inline bool NetProto_UseGoods::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_UseGoods::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_UseGoods::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_UseGoods::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_UseGoods::id() const {
  return id_;
}
inline void NetProto_UseGoods::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 boxItems = 2;
inline int NetProto_UseGoods::boxItems_size() const {
  return boxItems_.size();
}
inline void NetProto_UseGoods::clear_boxItems() {
  boxItems_.Clear();
}
inline ::google::protobuf::int32 NetProto_UseGoods::boxItems(int index) const {
  return boxItems_.Get(index);
}
inline void NetProto_UseGoods::set_boxItems(int index, ::google::protobuf::int32 value) {
  boxItems_.Set(index, value);
}
inline void NetProto_UseGoods::add_boxItems(::google::protobuf::int32 value) {
  boxItems_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_UseGoods::boxItems() const {
  return boxItems_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_UseGoods::mutable_boxItems() {
  return &boxItems_;
}

// optional bool all = 3;
inline bool NetProto_UseGoods::has_all() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_UseGoods::set_has_all() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_UseGoods::clear_has_all() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_UseGoods::clear_all() {
  all_ = false;
  clear_has_all();
}
inline bool NetProto_UseGoods::all() const {
  return all_;
}
inline void NetProto_UseGoods::set_all(bool value) {
  set_has_all();
  all_ = value;
}

// -------------------------------------------------------------------

// NetProto_UnlockPackage

// optional .PB_ItemPackage.Begin begin = 1;
inline bool NetProto_UnlockPackage::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_UnlockPackage::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_UnlockPackage::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_UnlockPackage::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
inline ::PB_ItemPackage_Begin NetProto_UnlockPackage::begin() const {
  return static_cast< ::PB_ItemPackage_Begin >(begin_);
}
inline void NetProto_UnlockPackage::set_begin(::PB_ItemPackage_Begin value) {
  GOOGLE_DCHECK(::PB_ItemPackage_Begin_IsValid(value));
  set_has_begin();
  begin_ = value;
}

// optional int32 count = 2;
inline bool NetProto_UnlockPackage::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_UnlockPackage::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_UnlockPackage::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_UnlockPackage::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_UnlockPackage::count() const {
  return count_;
}
inline void NetProto_UnlockPackage::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_RecoverDurability

// -------------------------------------------------------------------

// NetProto_AddDesignation

// optional int32 id = 1;
inline bool NetProto_AddDesignation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_AddDesignation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_AddDesignation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_AddDesignation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_AddDesignation::id() const {
  return id_;
}
inline void NetProto_AddDesignation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_DelDesignation

// optional int32 id = 1;
inline bool NetProto_DelDesignation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DelDesignation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DelDesignation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DelDesignation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_DelDesignation::id() const {
  return id_;
}
inline void NetProto_DelDesignation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_ShowDesignation

// optional int32 player = 1;
inline bool NetProto_ShowDesignation::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ShowDesignation::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ShowDesignation::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ShowDesignation::clear_player() {
  player_ = 0;
  clear_has_player();
}
inline ::google::protobuf::int32 NetProto_ShowDesignation::player() const {
  return player_;
}
inline void NetProto_ShowDesignation::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
}

// optional int32 id = 2;
inline bool NetProto_ShowDesignation::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ShowDesignation::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ShowDesignation::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ShowDesignation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ShowDesignation::id() const {
  return id_;
}
inline void NetProto_ShowDesignation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_UnshowDesignation

// optional int32 player = 1;
inline bool NetProto_UnshowDesignation::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_UnshowDesignation::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_UnshowDesignation::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_UnshowDesignation::clear_player() {
  player_ = 0;
  clear_has_player();
}
inline ::google::protobuf::int32 NetProto_UnshowDesignation::player() const {
  return player_;
}
inline void NetProto_UnshowDesignation::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
}

// optional int32 id = 2;
inline bool NetProto_UnshowDesignation::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_UnshowDesignation::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_UnshowDesignation::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_UnshowDesignation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_UnshowDesignation::id() const {
  return id_;
}
inline void NetProto_UnshowDesignation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_Recharge

// optional string order = 1;
inline bool NetProto_Recharge::has_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Recharge::set_has_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Recharge::clear_has_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Recharge::clear_order() {
  if (order_ != &::google::protobuf::internal::kEmptyString) {
    order_->clear();
  }
  clear_has_order();
}
inline const ::std::string& NetProto_Recharge::order() const {
  return *order_;
}
inline void NetProto_Recharge::set_order(const ::std::string& value) {
  set_has_order();
  if (order_ == &::google::protobuf::internal::kEmptyString) {
    order_ = new ::std::string;
  }
  order_->assign(value);
}
inline void NetProto_Recharge::set_order(const char* value) {
  set_has_order();
  if (order_ == &::google::protobuf::internal::kEmptyString) {
    order_ = new ::std::string;
  }
  order_->assign(value);
}
inline void NetProto_Recharge::set_order(const char* value, size_t size) {
  set_has_order();
  if (order_ == &::google::protobuf::internal::kEmptyString) {
    order_ = new ::std::string;
  }
  order_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Recharge::mutable_order() {
  set_has_order();
  if (order_ == &::google::protobuf::internal::kEmptyString) {
    order_ = new ::std::string;
  }
  return order_;
}
inline ::std::string* NetProto_Recharge::release_order() {
  clear_has_order();
  if (order_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_;
    order_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string product = 2;
inline bool NetProto_Recharge::has_product() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Recharge::set_has_product() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Recharge::clear_has_product() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Recharge::clear_product() {
  if (product_ != &::google::protobuf::internal::kEmptyString) {
    product_->clear();
  }
  clear_has_product();
}
inline const ::std::string& NetProto_Recharge::product() const {
  return *product_;
}
inline void NetProto_Recharge::set_product(const ::std::string& value) {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  product_->assign(value);
}
inline void NetProto_Recharge::set_product(const char* value) {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  product_->assign(value);
}
inline void NetProto_Recharge::set_product(const char* value, size_t size) {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  product_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Recharge::mutable_product() {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  return product_;
}
inline ::std::string* NetProto_Recharge::release_product() {
  clear_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_;
    product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 v = 3;
inline bool NetProto_Recharge::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Recharge::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Recharge::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Recharge::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 NetProto_Recharge::v() const {
  return v_;
}
inline void NetProto_Recharge::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
}

// -------------------------------------------------------------------

// NetProto_BusinessInfo

// optional int32 id = 1;
inline bool NetProto_BusinessInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BusinessInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BusinessInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BusinessInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_BusinessInfo::id() const {
  return id_;
}
inline void NetProto_BusinessInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .BusinessInfo info = 2;
inline bool NetProto_BusinessInfo::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_BusinessInfo::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_BusinessInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_BusinessInfo::clear_info() {
  if (info_ != NULL) info_->::BusinessInfo::Clear();
  clear_has_info();
}
inline const ::BusinessInfo& NetProto_BusinessInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::BusinessInfo* NetProto_BusinessInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::BusinessInfo;
  return info_;
}
inline ::BusinessInfo* NetProto_BusinessInfo::release_info() {
  clear_has_info();
  ::BusinessInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_TransformWar

// optional int32 id = 1;
inline bool NetProto_TransformWar::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_TransformWar::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_TransformWar::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_TransformWar::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_TransformWar::id() const {
  return id_;
}
inline void NetProto_TransformWar::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_TransformLevelUp

// optional int32 id = 1;
inline bool NetProto_TransformLevelUp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_TransformLevelUp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_TransformLevelUp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_TransformLevelUp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_TransformLevelUp::id() const {
  return id_;
}
inline void NetProto_TransformLevelUp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_TransformActive

// optional int32 id = 1;
inline bool NetProto_TransformActive::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_TransformActive::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_TransformActive::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_TransformActive::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_TransformActive::id() const {
  return id_;
}
inline void NetProto_TransformActive::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 index = 2;
inline bool NetProto_TransformActive::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_TransformActive::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_TransformActive::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_TransformActive::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_TransformActive::index() const {
  return index_;
}
inline void NetProto_TransformActive::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_Reservation

// optional int64 roleID = 1;
inline bool NetProto_Reservation::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Reservation::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Reservation::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Reservation::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_Reservation::roleID() const {
  return roleID_;
}
inline void NetProto_Reservation::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 rmb = 2;
inline bool NetProto_Reservation::has_rmb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Reservation::set_has_rmb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Reservation::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Reservation::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 NetProto_Reservation::rmb() const {
  return rmb_;
}
inline void NetProto_Reservation::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional int32 time = 3;
inline bool NetProto_Reservation::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Reservation::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Reservation::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Reservation::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 NetProto_Reservation::time() const {
  return time_;
}
inline void NetProto_Reservation::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// NetProto_OneReservation

// optional int32 index = 1;
inline bool NetProto_OneReservation::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_OneReservation::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_OneReservation::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_OneReservation::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_OneReservation::index() const {
  return index_;
}
inline void NetProto_OneReservation::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 powerType = 2;
inline bool NetProto_OneReservation::has_powerType() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_OneReservation::set_has_powerType() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_OneReservation::clear_has_powerType() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_OneReservation::clear_powerType() {
  powerType_ = 0;
  clear_has_powerType();
}
inline ::google::protobuf::int32 NetProto_OneReservation::powerType() const {
  return powerType_;
}
inline void NetProto_OneReservation::set_powerType(::google::protobuf::int32 value) {
  set_has_powerType();
  powerType_ = value;
}

// optional int64 roleID1 = 3;
inline bool NetProto_OneReservation::has_roleID1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_OneReservation::set_has_roleID1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_OneReservation::clear_has_roleID1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_OneReservation::clear_roleID1() {
  roleID1_ = GOOGLE_LONGLONG(0);
  clear_has_roleID1();
}
inline ::google::protobuf::int64 NetProto_OneReservation::roleID1() const {
  return roleID1_;
}
inline void NetProto_OneReservation::set_roleID1(::google::protobuf::int64 value) {
  set_has_roleID1();
  roleID1_ = value;
}

// optional int64 roleID2 = 4;
inline bool NetProto_OneReservation::has_roleID2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_OneReservation::set_has_roleID2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_OneReservation::clear_has_roleID2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_OneReservation::clear_roleID2() {
  roleID2_ = GOOGLE_LONGLONG(0);
  clear_has_roleID2();
}
inline ::google::protobuf::int64 NetProto_OneReservation::roleID2() const {
  return roleID2_;
}
inline void NetProto_OneReservation::set_roleID2(::google::protobuf::int64 value) {
  set_has_roleID2();
  roleID2_ = value;
}

// optional string name1 = 5;
inline bool NetProto_OneReservation::has_name1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_OneReservation::set_has_name1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_OneReservation::clear_has_name1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_OneReservation::clear_name1() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    name1_->clear();
  }
  clear_has_name1();
}
inline const ::std::string& NetProto_OneReservation::name1() const {
  return *name1_;
}
inline void NetProto_OneReservation::set_name1(const ::std::string& value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void NetProto_OneReservation::set_name1(const char* value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void NetProto_OneReservation::set_name1(const char* value, size_t size) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_OneReservation::mutable_name1() {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  return name1_;
}
inline ::std::string* NetProto_OneReservation::release_name1() {
  clear_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name1_;
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name2 = 6;
inline bool NetProto_OneReservation::has_name2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_OneReservation::set_has_name2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_OneReservation::clear_has_name2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_OneReservation::clear_name2() {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    name2_->clear();
  }
  clear_has_name2();
}
inline const ::std::string& NetProto_OneReservation::name2() const {
  return *name2_;
}
inline void NetProto_OneReservation::set_name2(const ::std::string& value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void NetProto_OneReservation::set_name2(const char* value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void NetProto_OneReservation::set_name2(const char* value, size_t size) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_OneReservation::mutable_name2() {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  return name2_;
}
inline ::std::string* NetProto_OneReservation::release_name2() {
  clear_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name2_;
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 fans1 = 7;
inline bool NetProto_OneReservation::has_fans1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_OneReservation::set_has_fans1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_OneReservation::clear_has_fans1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_OneReservation::clear_fans1() {
  fans1_ = 0;
  clear_has_fans1();
}
inline ::google::protobuf::int32 NetProto_OneReservation::fans1() const {
  return fans1_;
}
inline void NetProto_OneReservation::set_fans1(::google::protobuf::int32 value) {
  set_has_fans1();
  fans1_ = value;
}

// optional int32 fans2 = 8;
inline bool NetProto_OneReservation::has_fans2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_OneReservation::set_has_fans2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_OneReservation::clear_has_fans2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_OneReservation::clear_fans2() {
  fans2_ = 0;
  clear_has_fans2();
}
inline ::google::protobuf::int32 NetProto_OneReservation::fans2() const {
  return fans2_;
}
inline void NetProto_OneReservation::set_fans2(::google::protobuf::int32 value) {
  set_has_fans2();
  fans2_ = value;
}

// optional int32 rmb = 9;
inline bool NetProto_OneReservation::has_rmb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetProto_OneReservation::set_has_rmb() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetProto_OneReservation::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetProto_OneReservation::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 NetProto_OneReservation::rmb() const {
  return rmb_;
}
inline void NetProto_OneReservation::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional .PB_ProfessionInfo.Type type1 = 10;
inline bool NetProto_OneReservation::has_type1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NetProto_OneReservation::set_has_type1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NetProto_OneReservation::clear_has_type1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NetProto_OneReservation::clear_type1() {
  type1_ = 0;
  clear_has_type1();
}
inline ::PB_ProfessionInfo_Type NetProto_OneReservation::type1() const {
  return static_cast< ::PB_ProfessionInfo_Type >(type1_);
}
inline void NetProto_OneReservation::set_type1(::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  set_has_type1();
  type1_ = value;
}

// optional .PB_ProfessionInfo.Type type2 = 11;
inline bool NetProto_OneReservation::has_type2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NetProto_OneReservation::set_has_type2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NetProto_OneReservation::clear_has_type2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NetProto_OneReservation::clear_type2() {
  type2_ = 0;
  clear_has_type2();
}
inline ::PB_ProfessionInfo_Type NetProto_OneReservation::type2() const {
  return static_cast< ::PB_ProfessionInfo_Type >(type2_);
}
inline void NetProto_OneReservation::set_type2(::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  set_has_type2();
  type2_ = value;
}

// -------------------------------------------------------------------

// NetProto_ReservationList

// repeated .NetProto_OneReservation list = 1;
inline int NetProto_ReservationList::list_size() const {
  return list_.size();
}
inline void NetProto_ReservationList::clear_list() {
  list_.Clear();
}
inline const ::NetProto_OneReservation& NetProto_ReservationList::list(int index) const {
  return list_.Get(index);
}
inline ::NetProto_OneReservation* NetProto_ReservationList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::NetProto_OneReservation* NetProto_ReservationList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_OneReservation >&
NetProto_ReservationList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_OneReservation >*
NetProto_ReservationList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// NetProto_Talk

// optional int32 id = 1;
inline bool NetProto_Talk::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Talk::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Talk::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Talk::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Talk::id() const {
  return id_;
}
inline void NetProto_Talk::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PB_Vector3f pos = 2;
inline bool NetProto_Talk::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Talk::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Talk::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Talk::clear_pos() {
  if (pos_ != NULL) pos_->::PB_Vector3f::Clear();
  clear_has_pos();
}
inline const ::PB_Vector3f& NetProto_Talk::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PB_Vector3f* NetProto_Talk::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PB_Vector3f;
  return pos_;
}
inline ::PB_Vector3f* NetProto_Talk::release_pos() {
  clear_has_pos();
  ::PB_Vector3f* temp = pos_;
  pos_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_Answer

// optional int32 id = 1;
inline bool NetProto_Answer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Answer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Answer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Answer::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_Answer::id() const {
  return id_;
}
inline void NetProto_Answer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .PB_FuncInfo func = 2;
inline int NetProto_Answer::func_size() const {
  return func_.size();
}
inline void NetProto_Answer::clear_func() {
  func_.Clear();
}
inline const ::PB_FuncInfo& NetProto_Answer::func(int index) const {
  return func_.Get(index);
}
inline ::PB_FuncInfo* NetProto_Answer::mutable_func(int index) {
  return func_.Mutable(index);
}
inline ::PB_FuncInfo* NetProto_Answer::add_func() {
  return func_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_FuncInfo >&
NetProto_Answer::func() const {
  return func_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_FuncInfo >*
NetProto_Answer::mutable_func() {
  return &func_;
}

// repeated string str = 3;
inline int NetProto_Answer::str_size() const {
  return str_.size();
}
inline void NetProto_Answer::clear_str() {
  str_.Clear();
}
inline const ::std::string& NetProto_Answer::str(int index) const {
  return str_.Get(index);
}
inline ::std::string* NetProto_Answer::mutable_str(int index) {
  return str_.Mutable(index);
}
inline void NetProto_Answer::set_str(int index, const ::std::string& value) {
  str_.Mutable(index)->assign(value);
}
inline void NetProto_Answer::set_str(int index, const char* value) {
  str_.Mutable(index)->assign(value);
}
inline void NetProto_Answer::set_str(int index, const char* value, size_t size) {
  str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Answer::add_str() {
  return str_.Add();
}
inline void NetProto_Answer::add_str(const ::std::string& value) {
  str_.Add()->assign(value);
}
inline void NetProto_Answer::add_str(const char* value) {
  str_.Add()->assign(value);
}
inline void NetProto_Answer::add_str(const char* value, size_t size) {
  str_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetProto_Answer::str() const {
  return str_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetProto_Answer::mutable_str() {
  return &str_;
}

// -------------------------------------------------------------------

// NetProto_RequestFunc

// optional .PB_FuncInfo func = 1;
inline bool NetProto_RequestFunc::has_func() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_RequestFunc::set_has_func() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_RequestFunc::clear_has_func() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_RequestFunc::clear_func() {
  if (func_ != NULL) func_->::PB_FuncInfo::Clear();
  clear_has_func();
}
inline const ::PB_FuncInfo& NetProto_RequestFunc::func() const {
  return func_ != NULL ? *func_ : *default_instance_->func_;
}
inline ::PB_FuncInfo* NetProto_RequestFunc::mutable_func() {
  set_has_func();
  if (func_ == NULL) func_ = new ::PB_FuncInfo;
  return func_;
}
inline ::PB_FuncInfo* NetProto_RequestFunc::release_func() {
  clear_has_func();
  ::PB_FuncInfo* temp = func_;
  func_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_ReplyFunc

// optional .PB_FuncInfo func = 1;
inline bool NetProto_ReplyFunc::has_func() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ReplyFunc::set_has_func() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ReplyFunc::clear_has_func() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ReplyFunc::clear_func() {
  if (func_ != NULL) func_->::PB_FuncInfo::Clear();
  clear_has_func();
}
inline const ::PB_FuncInfo& NetProto_ReplyFunc::func() const {
  return func_ != NULL ? *func_ : *default_instance_->func_;
}
inline ::PB_FuncInfo* NetProto_ReplyFunc::mutable_func() {
  set_has_func();
  if (func_ == NULL) func_ = new ::PB_FuncInfo;
  return func_;
}
inline ::PB_FuncInfo* NetProto_ReplyFunc::release_func() {
  clear_has_func();
  ::PB_FuncInfo* temp = func_;
  func_ = NULL;
  return temp;
}

// optional .MissionContent mission = 2;
inline bool NetProto_ReplyFunc::has_mission() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ReplyFunc::set_has_mission() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ReplyFunc::clear_has_mission() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ReplyFunc::clear_mission() {
  if (mission_ != NULL) mission_->::MissionContent::Clear();
  clear_has_mission();
}
inline const ::MissionContent& NetProto_ReplyFunc::mission() const {
  return mission_ != NULL ? *mission_ : *default_instance_->mission_;
}
inline ::MissionContent* NetProto_ReplyFunc::mutable_mission() {
  set_has_mission();
  if (mission_ == NULL) mission_ = new ::MissionContent;
  return mission_;
}
inline ::MissionContent* NetProto_ReplyFunc::release_mission() {
  clear_has_mission();
  ::MissionContent* temp = mission_;
  mission_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_ApplyMission

// optional int32 id = 1;
inline bool NetProto_ApplyMission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ApplyMission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ApplyMission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ApplyMission::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ApplyMission::id() const {
  return id_;
}
inline void NetProto_ApplyMission::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_CompleteMission

// optional int32 id = 1;
inline bool NetProto_CompleteMission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_CompleteMission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_CompleteMission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_CompleteMission::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_CompleteMission::id() const {
  return id_;
}
inline void NetProto_CompleteMission::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_GiveUpMission

// optional int32 id = 1;
inline bool NetProto_GiveUpMission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GiveUpMission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GiveUpMission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GiveUpMission::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_GiveUpMission::id() const {
  return id_;
}
inline void NetProto_GiveUpMission::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_Chat

// optional .NetProto_Chat.Channel channel = 1;
inline bool NetProto_Chat::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Chat::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Chat::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Chat::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::NetProto_Chat_Channel NetProto_Chat::channel() const {
  return static_cast< ::NetProto_Chat_Channel >(channel_);
}
inline void NetProto_Chat::set_channel(::NetProto_Chat_Channel value) {
  GOOGLE_DCHECK(::NetProto_Chat_Channel_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// optional string content = 2;
inline bool NetProto_Chat::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Chat::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Chat::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Chat::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& NetProto_Chat::content() const {
  return *content_;
}
inline void NetProto_Chat::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_Chat::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_Chat::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Chat::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* NetProto_Chat::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .NetProto_Chat.Type sType = 3;
inline bool NetProto_Chat::has_sType() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_Chat::set_has_sType() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_Chat::clear_has_sType() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_Chat::clear_sType() {
  sType_ = 0;
  clear_has_sType();
}
inline ::NetProto_Chat_Type NetProto_Chat::sType() const {
  return static_cast< ::NetProto_Chat_Type >(sType_);
}
inline void NetProto_Chat::set_sType(::NetProto_Chat_Type value) {
  GOOGLE_DCHECK(::NetProto_Chat_Type_IsValid(value));
  set_has_sType();
  sType_ = value;
}

// optional .PB_FriendInfo sender = 4;
inline bool NetProto_Chat::has_sender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_Chat::set_has_sender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_Chat::clear_has_sender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_Chat::clear_sender() {
  if (sender_ != NULL) sender_->::PB_FriendInfo::Clear();
  clear_has_sender();
}
inline const ::PB_FriendInfo& NetProto_Chat::sender() const {
  return sender_ != NULL ? *sender_ : *default_instance_->sender_;
}
inline ::PB_FriendInfo* NetProto_Chat::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) sender_ = new ::PB_FriendInfo;
  return sender_;
}
inline ::PB_FriendInfo* NetProto_Chat::release_sender() {
  clear_has_sender();
  ::PB_FriendInfo* temp = sender_;
  sender_ = NULL;
  return temp;
}

// optional int64 receiver = 5;
inline bool NetProto_Chat::has_receiver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_Chat::set_has_receiver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_Chat::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_Chat::clear_receiver() {
  receiver_ = GOOGLE_LONGLONG(0);
  clear_has_receiver();
}
inline ::google::protobuf::int64 NetProto_Chat::receiver() const {
  return receiver_;
}
inline void NetProto_Chat::set_receiver(::google::protobuf::int64 value) {
  set_has_receiver();
  receiver_ = value;
}

// optional int32 vip = 6;
inline bool NetProto_Chat::has_vip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_Chat::set_has_vip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_Chat::clear_has_vip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_Chat::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 NetProto_Chat::vip() const {
  return vip_;
}
inline void NetProto_Chat::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// -------------------------------------------------------------------

// NetProto_Message

// optional string content = 1;
inline bool NetProto_Message::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Message::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Message::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Message::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& NetProto_Message::content() const {
  return *content_;
}
inline void NetProto_Message::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_Message::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_Message::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Message::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* NetProto_Message::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 count = 2;
inline bool NetProto_Message::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Message::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Message::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Message::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_Message::count() const {
  return count_;
}
inline void NetProto_Message::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_SendMail

// optional int64 receiver = 1;
inline bool NetProto_SendMail::has_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_SendMail::set_has_receiver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_SendMail::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_SendMail::clear_receiver() {
  receiver_ = GOOGLE_LONGLONG(0);
  clear_has_receiver();
}
inline ::google::protobuf::int64 NetProto_SendMail::receiver() const {
  return receiver_;
}
inline void NetProto_SendMail::set_receiver(::google::protobuf::int64 value) {
  set_has_receiver();
  receiver_ = value;
}

// optional .PB_MailInfo mail = 2;
inline bool NetProto_SendMail::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_SendMail::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_SendMail::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_SendMail::clear_mail() {
  if (mail_ != NULL) mail_->::PB_MailInfo::Clear();
  clear_has_mail();
}
inline const ::PB_MailInfo& NetProto_SendMail::mail() const {
  return mail_ != NULL ? *mail_ : *default_instance_->mail_;
}
inline ::PB_MailInfo* NetProto_SendMail::mutable_mail() {
  set_has_mail();
  if (mail_ == NULL) mail_ = new ::PB_MailInfo;
  return mail_;
}
inline ::PB_MailInfo* NetProto_SendMail::release_mail() {
  clear_has_mail();
  ::PB_MailInfo* temp = mail_;
  mail_ = NULL;
  return temp;
}

// optional int32 pos = 3;
inline bool NetProto_SendMail::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_SendMail::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_SendMail::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_SendMail::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 NetProto_SendMail::pos() const {
  return pos_;
}
inline void NetProto_SendMail::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// NetProto_GetMailItem

// optional int32 id = 1;
inline bool NetProto_GetMailItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GetMailItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GetMailItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GetMailItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_GetMailItem::id() const {
  return id_;
}
inline void NetProto_GetMailItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_ReadMail

// optional int32 id = 1;
inline bool NetProto_ReadMail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ReadMail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ReadMail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ReadMail::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ReadMail::id() const {
  return id_;
}
inline void NetProto_ReadMail::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_DelMail

// optional int32 id = 1;
inline bool NetProto_DelMail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DelMail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DelMail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DelMail::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_DelMail::id() const {
  return id_;
}
inline void NetProto_DelMail::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMLogin

// optional string account = 1;
inline bool NetProto_GMLogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMLogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& NetProto_GMLogin::account() const {
  return *account_;
}
inline void NetProto_GMLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_GMLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_GMLogin::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* NetProto_GMLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string passwd = 2;
inline bool NetProto_GMLogin::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMLogin::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMLogin::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMLogin::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& NetProto_GMLogin::passwd() const {
  return *passwd_;
}
inline void NetProto_GMLogin::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void NetProto_GMLogin::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void NetProto_GMLogin::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMLogin::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* NetProto_GMLogin::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .NetProto_GMLogin.OP permission = 3;
inline bool NetProto_GMLogin::has_permission() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMLogin::set_has_permission() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMLogin::clear_has_permission() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMLogin::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::NetProto_GMLogin_OP NetProto_GMLogin::permission() const {
  return static_cast< ::NetProto_GMLogin_OP >(permission_);
}
inline void NetProto_GMLogin::set_permission(::NetProto_GMLogin_OP value) {
  GOOGLE_DCHECK(::NetProto_GMLogin_OP_IsValid(value));
  set_has_permission();
  permission_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMOrder

// optional .NetProto_GMOrder.Type type = 1;
inline bool NetProto_GMOrder::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMOrder::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMOrder::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMOrder::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::NetProto_GMOrder_Type NetProto_GMOrder::type() const {
  return static_cast< ::NetProto_GMOrder_Type >(type_);
}
inline void NetProto_GMOrder::set_type(::NetProto_GMOrder_Type value) {
  GOOGLE_DCHECK(::NetProto_GMOrder_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 target = 2;
inline bool NetProto_GMOrder::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMOrder::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMOrder::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMOrder::clear_target() {
  target_ = GOOGLE_LONGLONG(0);
  clear_has_target();
}
inline ::google::protobuf::int64 NetProto_GMOrder::target() const {
  return target_;
}
inline void NetProto_GMOrder::set_target(::google::protobuf::int64 value) {
  set_has_target();
  target_ = value;
}

// optional int64 nValue = 3;
inline bool NetProto_GMOrder::has_nValue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMOrder::set_has_nValue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMOrder::clear_has_nValue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMOrder::clear_nValue() {
  nValue_ = GOOGLE_LONGLONG(0);
  clear_has_nValue();
}
inline ::google::protobuf::int64 NetProto_GMOrder::nValue() const {
  return nValue_;
}
inline void NetProto_GMOrder::set_nValue(::google::protobuf::int64 value) {
  set_has_nValue();
  nValue_ = value;
}

// optional float fValue = 4;
inline bool NetProto_GMOrder::has_fValue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GMOrder::set_has_fValue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GMOrder::clear_has_fValue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GMOrder::clear_fValue() {
  fValue_ = 0;
  clear_has_fValue();
}
inline float NetProto_GMOrder::fValue() const {
  return fValue_;
}
inline void NetProto_GMOrder::set_fValue(float value) {
  set_has_fValue();
  fValue_ = value;
}

// optional string sValue = 5;
inline bool NetProto_GMOrder::has_sValue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_GMOrder::set_has_sValue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_GMOrder::clear_has_sValue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_GMOrder::clear_sValue() {
  if (sValue_ != &::google::protobuf::internal::kEmptyString) {
    sValue_->clear();
  }
  clear_has_sValue();
}
inline const ::std::string& NetProto_GMOrder::sValue() const {
  return *sValue_;
}
inline void NetProto_GMOrder::set_sValue(const ::std::string& value) {
  set_has_sValue();
  if (sValue_ == &::google::protobuf::internal::kEmptyString) {
    sValue_ = new ::std::string;
  }
  sValue_->assign(value);
}
inline void NetProto_GMOrder::set_sValue(const char* value) {
  set_has_sValue();
  if (sValue_ == &::google::protobuf::internal::kEmptyString) {
    sValue_ = new ::std::string;
  }
  sValue_->assign(value);
}
inline void NetProto_GMOrder::set_sValue(const char* value, size_t size) {
  set_has_sValue();
  if (sValue_ == &::google::protobuf::internal::kEmptyString) {
    sValue_ = new ::std::string;
  }
  sValue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMOrder::mutable_sValue() {
  set_has_sValue();
  if (sValue_ == &::google::protobuf::internal::kEmptyString) {
    sValue_ = new ::std::string;
  }
  return sValue_;
}
inline ::std::string* NetProto_GMOrder::release_sValue() {
  clear_has_sValue();
  if (sValue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sValue_;
    sValue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 res = 6;
inline bool NetProto_GMOrder::has_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_GMOrder::set_has_res() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_GMOrder::clear_has_res() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_GMOrder::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 NetProto_GMOrder::res() const {
  return res_;
}
inline void NetProto_GMOrder::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMOnlinePlayers

// repeated string name = 1;
inline int NetProto_GMOnlinePlayers::name_size() const {
  return name_.size();
}
inline void NetProto_GMOnlinePlayers::clear_name() {
  name_.Clear();
}
inline const ::std::string& NetProto_GMOnlinePlayers::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* NetProto_GMOnlinePlayers::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void NetProto_GMOnlinePlayers::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void NetProto_GMOnlinePlayers::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void NetProto_GMOnlinePlayers::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMOnlinePlayers::add_name() {
  return name_.Add();
}
inline void NetProto_GMOnlinePlayers::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void NetProto_GMOnlinePlayers::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void NetProto_GMOnlinePlayers::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetProto_GMOnlinePlayers::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetProto_GMOnlinePlayers::mutable_name() {
  return &name_;
}

// repeated int64 roleID = 2;
inline int NetProto_GMOnlinePlayers::roleID_size() const {
  return roleID_.size();
}
inline void NetProto_GMOnlinePlayers::clear_roleID() {
  roleID_.Clear();
}
inline ::google::protobuf::int64 NetProto_GMOnlinePlayers::roleID(int index) const {
  return roleID_.Get(index);
}
inline void NetProto_GMOnlinePlayers::set_roleID(int index, ::google::protobuf::int64 value) {
  roleID_.Set(index, value);
}
inline void NetProto_GMOnlinePlayers::add_roleID(::google::protobuf::int64 value) {
  roleID_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
NetProto_GMOnlinePlayers::roleID() const {
  return roleID_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
NetProto_GMOnlinePlayers::mutable_roleID() {
  return &roleID_;
}

// -------------------------------------------------------------------

// NetProto_GMChat

// optional .NetProto_Chat.Channel channel = 1;
inline bool NetProto_GMChat::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMChat::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMChat::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMChat::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::NetProto_Chat_Channel NetProto_GMChat::channel() const {
  return static_cast< ::NetProto_Chat_Channel >(channel_);
}
inline void NetProto_GMChat::set_channel(::NetProto_Chat_Channel value) {
  GOOGLE_DCHECK(::NetProto_Chat_Channel_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// optional string content = 2;
inline bool NetProto_GMChat::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMChat::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMChat::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMChat::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& NetProto_GMChat::content() const {
  return *content_;
}
inline void NetProto_GMChat::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_GMChat::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_GMChat::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMChat::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* NetProto_GMChat::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .PB_FriendInfo sender = 3;
inline bool NetProto_GMChat::has_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMChat::set_has_sender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMChat::clear_has_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMChat::clear_sender() {
  if (sender_ != NULL) sender_->::PB_FriendInfo::Clear();
  clear_has_sender();
}
inline const ::PB_FriendInfo& NetProto_GMChat::sender() const {
  return sender_ != NULL ? *sender_ : *default_instance_->sender_;
}
inline ::PB_FriendInfo* NetProto_GMChat::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) sender_ = new ::PB_FriendInfo;
  return sender_;
}
inline ::PB_FriendInfo* NetProto_GMChat::release_sender() {
  clear_has_sender();
  ::PB_FriendInfo* temp = sender_;
  sender_ = NULL;
  return temp;
}

// optional .PB_FriendInfo recver = 4;
inline bool NetProto_GMChat::has_recver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GMChat::set_has_recver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GMChat::clear_has_recver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GMChat::clear_recver() {
  if (recver_ != NULL) recver_->::PB_FriendInfo::Clear();
  clear_has_recver();
}
inline const ::PB_FriendInfo& NetProto_GMChat::recver() const {
  return recver_ != NULL ? *recver_ : *default_instance_->recver_;
}
inline ::PB_FriendInfo* NetProto_GMChat::mutable_recver() {
  set_has_recver();
  if (recver_ == NULL) recver_ = new ::PB_FriendInfo;
  return recver_;
}
inline ::PB_FriendInfo* NetProto_GMChat::release_recver() {
  clear_has_recver();
  ::PB_FriendInfo* temp = recver_;
  recver_ = NULL;
  return temp;
}

// optional int32 time = 5;
inline bool NetProto_GMChat::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_GMChat::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_GMChat::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_GMChat::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 NetProto_GMChat::time() const {
  return time_;
}
inline void NetProto_GMChat::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMServerMgr

// optional int32 time = 1;
inline bool NetProto_GMServerMgr::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMServerMgr::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMServerMgr::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMServerMgr::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 NetProto_GMServerMgr::time() const {
  return time_;
}
inline void NetProto_GMServerMgr::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 num = 2;
inline bool NetProto_GMServerMgr::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMServerMgr::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMServerMgr::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMServerMgr::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 NetProto_GMServerMgr::num() const {
  return num_;
}
inline void NetProto_GMServerMgr::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMPlayerQuery

// optional .PB_PlayerAtt att = 1;
inline bool NetProto_GMPlayerQuery::has_att() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMPlayerQuery::set_has_att() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMPlayerQuery::clear_has_att() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMPlayerQuery::clear_att() {
  if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
  clear_has_att();
}
inline const ::PB_PlayerAtt& NetProto_GMPlayerQuery::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_PlayerAtt* NetProto_GMPlayerQuery::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_PlayerAtt;
  return att_;
}
inline ::PB_PlayerAtt* NetProto_GMPlayerQuery::release_att() {
  clear_has_att();
  ::PB_PlayerAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// optional bool online = 2;
inline bool NetProto_GMPlayerQuery::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMPlayerQuery::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMPlayerQuery::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMPlayerQuery::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool NetProto_GMPlayerQuery::online() const {
  return online_;
}
inline void NetProto_GMPlayerQuery::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMForbid

// optional .NetProto_GMForbid.Select select = 1;
inline bool NetProto_GMForbid::has_select() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMForbid::set_has_select() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMForbid::clear_has_select() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMForbid::clear_select() {
  select_ = 1;
  clear_has_select();
}
inline ::NetProto_GMForbid_Select NetProto_GMForbid::select() const {
  return static_cast< ::NetProto_GMForbid_Select >(select_);
}
inline void NetProto_GMForbid::set_select(::NetProto_GMForbid_Select value) {
  GOOGLE_DCHECK(::NetProto_GMForbid_Select_IsValid(value));
  set_has_select();
  select_ = value;
}

// optional bool flag = 2;
inline bool NetProto_GMForbid::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMForbid::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMForbid::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMForbid::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool NetProto_GMForbid::flag() const {
  return flag_;
}
inline void NetProto_GMForbid::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 startTime = 3;
inline bool NetProto_GMForbid::has_startTime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMForbid::set_has_startTime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMForbid::clear_has_startTime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMForbid::clear_startTime() {
  startTime_ = 0;
  clear_has_startTime();
}
inline ::google::protobuf::int32 NetProto_GMForbid::startTime() const {
  return startTime_;
}
inline void NetProto_GMForbid::set_startTime(::google::protobuf::int32 value) {
  set_has_startTime();
  startTime_ = value;
}

// optional int32 endTime = 4;
inline bool NetProto_GMForbid::has_endTime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GMForbid::set_has_endTime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GMForbid::clear_has_endTime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GMForbid::clear_endTime() {
  endTime_ = 0;
  clear_has_endTime();
}
inline ::google::protobuf::int32 NetProto_GMForbid::endTime() const {
  return endTime_;
}
inline void NetProto_GMForbid::set_endTime(::google::protobuf::int32 value) {
  set_has_endTime();
  endTime_ = value;
}

// optional int64 roleID = 5;
inline bool NetProto_GMForbid::has_roleID() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_GMForbid::set_has_roleID() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_GMForbid::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_GMForbid::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_GMForbid::roleID() const {
  return roleID_;
}
inline void NetProto_GMForbid::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional string GM = 6;
inline bool NetProto_GMForbid::has_GM() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_GMForbid::set_has_GM() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_GMForbid::clear_has_GM() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_GMForbid::clear_GM() {
  if (GM_ != &::google::protobuf::internal::kEmptyString) {
    GM_->clear();
  }
  clear_has_GM();
}
inline const ::std::string& NetProto_GMForbid::GM() const {
  return *GM_;
}
inline void NetProto_GMForbid::set_GM(const ::std::string& value) {
  set_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    GM_ = new ::std::string;
  }
  GM_->assign(value);
}
inline void NetProto_GMForbid::set_GM(const char* value) {
  set_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    GM_ = new ::std::string;
  }
  GM_->assign(value);
}
inline void NetProto_GMForbid::set_GM(const char* value, size_t size) {
  set_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    GM_ = new ::std::string;
  }
  GM_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMForbid::mutable_GM() {
  set_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    GM_ = new ::std::string;
  }
  return GM_;
}
inline ::std::string* NetProto_GMForbid::release_GM() {
  clear_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = GM_;
    GM_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 7;
inline bool NetProto_GMForbid::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_GMForbid::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_GMForbid::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_GMForbid::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetProto_GMForbid::name() const {
  return *name_;
}
inline void NetProto_GMForbid::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_GMForbid::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_GMForbid::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMForbid::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetProto_GMForbid::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 8;
inline bool NetProto_GMForbid::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_GMForbid::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_GMForbid::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_GMForbid::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetProto_GMForbid::level() const {
  return level_;
}
inline void NetProto_GMForbid::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional .PB_ProfessionInfo.Type professionType = 9;
inline bool NetProto_GMForbid::has_professionType() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetProto_GMForbid::set_has_professionType() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetProto_GMForbid::clear_has_professionType() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetProto_GMForbid::clear_professionType() {
  professionType_ = 0;
  clear_has_professionType();
}
inline ::PB_ProfessionInfo_Type NetProto_GMForbid::professionType() const {
  return static_cast< ::PB_ProfessionInfo_Type >(professionType_);
}
inline void NetProto_GMForbid::set_professionType(::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  set_has_professionType();
  professionType_ = value;
}

// optional int32 id = 10;
inline bool NetProto_GMForbid::has_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NetProto_GMForbid::set_has_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NetProto_GMForbid::clear_has_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NetProto_GMForbid::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_GMForbid::id() const {
  return id_;
}
inline void NetProto_GMForbid::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMNotice

// optional int32 id = 1;
inline bool NetProto_GMNotice::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMNotice::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMNotice::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMNotice::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_GMNotice::id() const {
  return id_;
}
inline void NetProto_GMNotice::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 startTime = 2;
inline bool NetProto_GMNotice::has_startTime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMNotice::set_has_startTime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMNotice::clear_has_startTime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMNotice::clear_startTime() {
  startTime_ = 0;
  clear_has_startTime();
}
inline ::google::protobuf::int32 NetProto_GMNotice::startTime() const {
  return startTime_;
}
inline void NetProto_GMNotice::set_startTime(::google::protobuf::int32 value) {
  set_has_startTime();
  startTime_ = value;
}

// optional int32 endTime = 3;
inline bool NetProto_GMNotice::has_endTime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMNotice::set_has_endTime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMNotice::clear_has_endTime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMNotice::clear_endTime() {
  endTime_ = 0;
  clear_has_endTime();
}
inline ::google::protobuf::int32 NetProto_GMNotice::endTime() const {
  return endTime_;
}
inline void NetProto_GMNotice::set_endTime(::google::protobuf::int32 value) {
  set_has_endTime();
  endTime_ = value;
}

// optional int32 hz = 4;
inline bool NetProto_GMNotice::has_hz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GMNotice::set_has_hz() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GMNotice::clear_has_hz() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GMNotice::clear_hz() {
  hz_ = 0;
  clear_has_hz();
}
inline ::google::protobuf::int32 NetProto_GMNotice::hz() const {
  return hz_;
}
inline void NetProto_GMNotice::set_hz(::google::protobuf::int32 value) {
  set_has_hz();
  hz_ = value;
}

// optional string content = 5;
inline bool NetProto_GMNotice::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_GMNotice::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_GMNotice::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_GMNotice::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& NetProto_GMNotice::content() const {
  return *content_;
}
inline void NetProto_GMNotice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_GMNotice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NetProto_GMNotice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMNotice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* NetProto_GMNotice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool state1 = 6;
inline bool NetProto_GMNotice::has_state1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_GMNotice::set_has_state1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_GMNotice::clear_has_state1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_GMNotice::clear_state1() {
  state1_ = false;
  clear_has_state1();
}
inline bool NetProto_GMNotice::state1() const {
  return state1_;
}
inline void NetProto_GMNotice::set_state1(bool value) {
  set_has_state1();
  state1_ = value;
}

// optional bool state2 = 7;
inline bool NetProto_GMNotice::has_state2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_GMNotice::set_has_state2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_GMNotice::clear_has_state2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_GMNotice::clear_state2() {
  state2_ = false;
  clear_has_state2();
}
inline bool NetProto_GMNotice::state2() const {
  return state2_;
}
inline void NetProto_GMNotice::set_state2(bool value) {
  set_has_state2();
  state2_ = value;
}

// optional .NetProto_GMNotice.GMOP op = 8;
inline bool NetProto_GMNotice::has_op() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_GMNotice::set_has_op() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_GMNotice::clear_has_op() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_GMNotice::clear_op() {
  op_ = 1;
  clear_has_op();
}
inline ::NetProto_GMNotice_GMOP NetProto_GMNotice::op() const {
  return static_cast< ::NetProto_GMNotice_GMOP >(op_);
}
inline void NetProto_GMNotice::set_op(::NetProto_GMNotice_GMOP value) {
  GOOGLE_DCHECK(::NetProto_GMNotice_GMOP_IsValid(value));
  set_has_op();
  op_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMRequest

// optional .NetProto_GMRequest.Select select = 1;
inline bool NetProto_GMRequest::has_select() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMRequest::set_has_select() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMRequest::clear_has_select() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMRequest::clear_select() {
  select_ = 1;
  clear_has_select();
}
inline ::NetProto_GMRequest_Select NetProto_GMRequest::select() const {
  return static_cast< ::NetProto_GMRequest_Select >(select_);
}
inline void NetProto_GMRequest::set_select(::NetProto_GMRequest_Select value) {
  GOOGLE_DCHECK(::NetProto_GMRequest_Select_IsValid(value));
  set_has_select();
  select_ = value;
}

// repeated .NetProto_GMForbid forbid = 2;
inline int NetProto_GMRequest::forbid_size() const {
  return forbid_.size();
}
inline void NetProto_GMRequest::clear_forbid() {
  forbid_.Clear();
}
inline const ::NetProto_GMForbid& NetProto_GMRequest::forbid(int index) const {
  return forbid_.Get(index);
}
inline ::NetProto_GMForbid* NetProto_GMRequest::mutable_forbid(int index) {
  return forbid_.Mutable(index);
}
inline ::NetProto_GMForbid* NetProto_GMRequest::add_forbid() {
  return forbid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GMForbid >&
NetProto_GMRequest::forbid() const {
  return forbid_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_GMForbid >*
NetProto_GMRequest::mutable_forbid() {
  return &forbid_;
}

// -------------------------------------------------------------------

// NetProto_GMShutDownServer

// -------------------------------------------------------------------

// NetProto_GMChatRecords

// optional int32 startTime = 1;
inline bool NetProto_GMChatRecords::has_startTime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMChatRecords::set_has_startTime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMChatRecords::clear_has_startTime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMChatRecords::clear_startTime() {
  startTime_ = 0;
  clear_has_startTime();
}
inline ::google::protobuf::int32 NetProto_GMChatRecords::startTime() const {
  return startTime_;
}
inline void NetProto_GMChatRecords::set_startTime(::google::protobuf::int32 value) {
  set_has_startTime();
  startTime_ = value;
}

// optional int32 endTime = 2;
inline bool NetProto_GMChatRecords::has_endTime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMChatRecords::set_has_endTime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMChatRecords::clear_has_endTime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMChatRecords::clear_endTime() {
  endTime_ = 0;
  clear_has_endTime();
}
inline ::google::protobuf::int32 NetProto_GMChatRecords::endTime() const {
  return endTime_;
}
inline void NetProto_GMChatRecords::set_endTime(::google::protobuf::int32 value) {
  set_has_endTime();
  endTime_ = value;
}

// repeated .NetProto_GMChat chat = 3;
inline int NetProto_GMChatRecords::chat_size() const {
  return chat_.size();
}
inline void NetProto_GMChatRecords::clear_chat() {
  chat_.Clear();
}
inline const ::NetProto_GMChat& NetProto_GMChatRecords::chat(int index) const {
  return chat_.Get(index);
}
inline ::NetProto_GMChat* NetProto_GMChatRecords::mutable_chat(int index) {
  return chat_.Mutable(index);
}
inline ::NetProto_GMChat* NetProto_GMChatRecords::add_chat() {
  return chat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GMChat >&
NetProto_GMChatRecords::chat() const {
  return chat_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_GMChat >*
NetProto_GMChatRecords::mutable_chat() {
  return &chat_;
}

// -------------------------------------------------------------------

// NetProto_GMRegistrCount

// optional int32 startTime = 1;
inline bool NetProto_GMRegistrCount::has_startTime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMRegistrCount::set_has_startTime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMRegistrCount::clear_has_startTime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMRegistrCount::clear_startTime() {
  startTime_ = 0;
  clear_has_startTime();
}
inline ::google::protobuf::int32 NetProto_GMRegistrCount::startTime() const {
  return startTime_;
}
inline void NetProto_GMRegistrCount::set_startTime(::google::protobuf::int32 value) {
  set_has_startTime();
  startTime_ = value;
}

// optional int32 endTime = 2;
inline bool NetProto_GMRegistrCount::has_endTime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMRegistrCount::set_has_endTime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMRegistrCount::clear_has_endTime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMRegistrCount::clear_endTime() {
  endTime_ = 0;
  clear_has_endTime();
}
inline ::google::protobuf::int32 NetProto_GMRegistrCount::endTime() const {
  return endTime_;
}
inline void NetProto_GMRegistrCount::set_endTime(::google::protobuf::int32 value) {
  set_has_endTime();
  endTime_ = value;
}

// optional int32 deviceID = 3;
inline bool NetProto_GMRegistrCount::has_deviceID() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMRegistrCount::set_has_deviceID() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMRegistrCount::clear_has_deviceID() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMRegistrCount::clear_deviceID() {
  deviceID_ = 0;
  clear_has_deviceID();
}
inline ::google::protobuf::int32 NetProto_GMRegistrCount::deviceID() const {
  return deviceID_;
}
inline void NetProto_GMRegistrCount::set_deviceID(::google::protobuf::int32 value) {
  set_has_deviceID();
  deviceID_ = value;
}

// optional int32 allDeviceID = 4;
inline bool NetProto_GMRegistrCount::has_allDeviceID() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GMRegistrCount::set_has_allDeviceID() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GMRegistrCount::clear_has_allDeviceID() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GMRegistrCount::clear_allDeviceID() {
  allDeviceID_ = 0;
  clear_has_allDeviceID();
}
inline ::google::protobuf::int32 NetProto_GMRegistrCount::allDeviceID() const {
  return allDeviceID_;
}
inline void NetProto_GMRegistrCount::set_allDeviceID(::google::protobuf::int32 value) {
  set_has_allDeviceID();
  allDeviceID_ = value;
}

// optional int32 accountID = 5;
inline bool NetProto_GMRegistrCount::has_accountID() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_GMRegistrCount::set_has_accountID() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_GMRegistrCount::clear_has_accountID() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_GMRegistrCount::clear_accountID() {
  accountID_ = 0;
  clear_has_accountID();
}
inline ::google::protobuf::int32 NetProto_GMRegistrCount::accountID() const {
  return accountID_;
}
inline void NetProto_GMRegistrCount::set_accountID(::google::protobuf::int32 value) {
  set_has_accountID();
  accountID_ = value;
}

// optional int32 allAccountID = 6;
inline bool NetProto_GMRegistrCount::has_allAccountID() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_GMRegistrCount::set_has_allAccountID() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_GMRegistrCount::clear_has_allAccountID() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_GMRegistrCount::clear_allAccountID() {
  allAccountID_ = 0;
  clear_has_allAccountID();
}
inline ::google::protobuf::int32 NetProto_GMRegistrCount::allAccountID() const {
  return allAccountID_;
}
inline void NetProto_GMRegistrCount::set_allAccountID(::google::protobuf::int32 value) {
  set_has_allAccountID();
  allAccountID_ = value;
}

// optional int32 roleID = 7;
inline bool NetProto_GMRegistrCount::has_roleID() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_GMRegistrCount::set_has_roleID() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_GMRegistrCount::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_GMRegistrCount::clear_roleID() {
  roleID_ = 0;
  clear_has_roleID();
}
inline ::google::protobuf::int32 NetProto_GMRegistrCount::roleID() const {
  return roleID_;
}
inline void NetProto_GMRegistrCount::set_roleID(::google::protobuf::int32 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 allRoleID = 8;
inline bool NetProto_GMRegistrCount::has_allRoleID() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_GMRegistrCount::set_has_allRoleID() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_GMRegistrCount::clear_has_allRoleID() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_GMRegistrCount::clear_allRoleID() {
  allRoleID_ = 0;
  clear_has_allRoleID();
}
inline ::google::protobuf::int32 NetProto_GMRegistrCount::allRoleID() const {
  return allRoleID_;
}
inline void NetProto_GMRegistrCount::set_allRoleID(::google::protobuf::int32 value) {
  set_has_allRoleID();
  allRoleID_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMRoleCount

// optional int32 startTime = 1;
inline bool NetProto_GMRoleCount::has_startTime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMRoleCount::set_has_startTime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMRoleCount::clear_has_startTime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMRoleCount::clear_startTime() {
  startTime_ = 0;
  clear_has_startTime();
}
inline ::google::protobuf::int32 NetProto_GMRoleCount::startTime() const {
  return startTime_;
}
inline void NetProto_GMRoleCount::set_startTime(::google::protobuf::int32 value) {
  set_has_startTime();
  startTime_ = value;
}

// optional int32 endTime = 2;
inline bool NetProto_GMRoleCount::has_endTime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMRoleCount::set_has_endTime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMRoleCount::clear_has_endTime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMRoleCount::clear_endTime() {
  endTime_ = 0;
  clear_has_endTime();
}
inline ::google::protobuf::int32 NetProto_GMRoleCount::endTime() const {
  return endTime_;
}
inline void NetProto_GMRoleCount::set_endTime(::google::protobuf::int32 value) {
  set_has_endTime();
  endTime_ = value;
}

// optional int32 maxCount = 3;
inline bool NetProto_GMRoleCount::has_maxCount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMRoleCount::set_has_maxCount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMRoleCount::clear_has_maxCount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMRoleCount::clear_maxCount() {
  maxCount_ = 0;
  clear_has_maxCount();
}
inline ::google::protobuf::int32 NetProto_GMRoleCount::maxCount() const {
  return maxCount_;
}
inline void NetProto_GMRoleCount::set_maxCount(::google::protobuf::int32 value) {
  set_has_maxCount();
  maxCount_ = value;
}

// optional int32 maxCountTime = 4;
inline bool NetProto_GMRoleCount::has_maxCountTime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GMRoleCount::set_has_maxCountTime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GMRoleCount::clear_has_maxCountTime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GMRoleCount::clear_maxCountTime() {
  maxCountTime_ = 0;
  clear_has_maxCountTime();
}
inline ::google::protobuf::int32 NetProto_GMRoleCount::maxCountTime() const {
  return maxCountTime_;
}
inline void NetProto_GMRoleCount::set_maxCountTime(::google::protobuf::int32 value) {
  set_has_maxCountTime();
  maxCountTime_ = value;
}

// optional int32 minCount = 5;
inline bool NetProto_GMRoleCount::has_minCount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_GMRoleCount::set_has_minCount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_GMRoleCount::clear_has_minCount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_GMRoleCount::clear_minCount() {
  minCount_ = 0;
  clear_has_minCount();
}
inline ::google::protobuf::int32 NetProto_GMRoleCount::minCount() const {
  return minCount_;
}
inline void NetProto_GMRoleCount::set_minCount(::google::protobuf::int32 value) {
  set_has_minCount();
  minCount_ = value;
}

// optional int32 minCountTime = 6;
inline bool NetProto_GMRoleCount::has_minCountTime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_GMRoleCount::set_has_minCountTime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_GMRoleCount::clear_has_minCountTime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_GMRoleCount::clear_minCountTime() {
  minCountTime_ = 0;
  clear_has_minCountTime();
}
inline ::google::protobuf::int32 NetProto_GMRoleCount::minCountTime() const {
  return minCountTime_;
}
inline void NetProto_GMRoleCount::set_minCountTime(::google::protobuf::int32 value) {
  set_has_minCountTime();
  minCountTime_ = value;
}

// repeated int32 count = 7;
inline int NetProto_GMRoleCount::count_size() const {
  return count_.size();
}
inline void NetProto_GMRoleCount::clear_count() {
  count_.Clear();
}
inline ::google::protobuf::int32 NetProto_GMRoleCount::count(int index) const {
  return count_.Get(index);
}
inline void NetProto_GMRoleCount::set_count(int index, ::google::protobuf::int32 value) {
  count_.Set(index, value);
}
inline void NetProto_GMRoleCount::add_count(::google::protobuf::int32 value) {
  count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_GMRoleCount::count() const {
  return count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_GMRoleCount::mutable_count() {
  return &count_;
}

// repeated int32 time = 8;
inline int NetProto_GMRoleCount::time_size() const {
  return time_.size();
}
inline void NetProto_GMRoleCount::clear_time() {
  time_.Clear();
}
inline ::google::protobuf::int32 NetProto_GMRoleCount::time(int index) const {
  return time_.Get(index);
}
inline void NetProto_GMRoleCount::set_time(int index, ::google::protobuf::int32 value) {
  time_.Set(index, value);
}
inline void NetProto_GMRoleCount::add_time(::google::protobuf::int32 value) {
  time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_GMRoleCount::time() const {
  return time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_GMRoleCount::mutable_time() {
  return &time_;
}

// optional int32 interval = 9;
inline bool NetProto_GMRoleCount::has_interval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetProto_GMRoleCount::set_has_interval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetProto_GMRoleCount::clear_has_interval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetProto_GMRoleCount::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 NetProto_GMRoleCount::interval() const {
  return interval_;
}
inline void NetProto_GMRoleCount::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
}

// -------------------------------------------------------------------

// LevelStatistics

// optional int32 level = 1;
inline bool LevelStatistics::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelStatistics::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelStatistics::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelStatistics::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 LevelStatistics::level() const {
  return level_;
}
inline void LevelStatistics::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 count = 2;
inline bool LevelStatistics::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelStatistics::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelStatistics::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelStatistics::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 LevelStatistics::count() const {
  return count_;
}
inline void LevelStatistics::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMLevelStatistics

// optional int32 startTime = 1;
inline bool NetProto_GMLevelStatistics::has_startTime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMLevelStatistics::set_has_startTime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMLevelStatistics::clear_has_startTime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMLevelStatistics::clear_startTime() {
  startTime_ = 0;
  clear_has_startTime();
}
inline ::google::protobuf::int32 NetProto_GMLevelStatistics::startTime() const {
  return startTime_;
}
inline void NetProto_GMLevelStatistics::set_startTime(::google::protobuf::int32 value) {
  set_has_startTime();
  startTime_ = value;
}

// optional int32 endTime = 2;
inline bool NetProto_GMLevelStatistics::has_endTime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMLevelStatistics::set_has_endTime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMLevelStatistics::clear_has_endTime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMLevelStatistics::clear_endTime() {
  endTime_ = 0;
  clear_has_endTime();
}
inline ::google::protobuf::int32 NetProto_GMLevelStatistics::endTime() const {
  return endTime_;
}
inline void NetProto_GMLevelStatistics::set_endTime(::google::protobuf::int32 value) {
  set_has_endTime();
  endTime_ = value;
}

// repeated .LevelStatistics array = 3;
inline int NetProto_GMLevelStatistics::array_size() const {
  return array_.size();
}
inline void NetProto_GMLevelStatistics::clear_array() {
  array_.Clear();
}
inline const ::LevelStatistics& NetProto_GMLevelStatistics::array(int index) const {
  return array_.Get(index);
}
inline ::LevelStatistics* NetProto_GMLevelStatistics::mutable_array(int index) {
  return array_.Mutable(index);
}
inline ::LevelStatistics* NetProto_GMLevelStatistics::add_array() {
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LevelStatistics >&
NetProto_GMLevelStatistics::array() const {
  return array_;
}
inline ::google::protobuf::RepeatedPtrField< ::LevelStatistics >*
NetProto_GMLevelStatistics::mutable_array() {
  return &array_;
}

// -------------------------------------------------------------------

// NetProto_GMRankStatistics

// optional .NetProto_Rank.Type type = 1;
inline bool NetProto_GMRankStatistics::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMRankStatistics::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMRankStatistics::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMRankStatistics::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::NetProto_Rank_Type NetProto_GMRankStatistics::type() const {
  return static_cast< ::NetProto_Rank_Type >(type_);
}
inline void NetProto_GMRankStatistics::set_type(::NetProto_Rank_Type value) {
  GOOGLE_DCHECK(::NetProto_Rank_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 count = 2;
inline bool NetProto_GMRankStatistics::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMRankStatistics::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMRankStatistics::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMRankStatistics::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_GMRankStatistics::count() const {
  return count_;
}
inline void NetProto_GMRankStatistics::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .RecordInfo rank = 3;
inline int NetProto_GMRankStatistics::rank_size() const {
  return rank_.size();
}
inline void NetProto_GMRankStatistics::clear_rank() {
  rank_.Clear();
}
inline const ::RecordInfo& NetProto_GMRankStatistics::rank(int index) const {
  return rank_.Get(index);
}
inline ::RecordInfo* NetProto_GMRankStatistics::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::RecordInfo* NetProto_GMRankStatistics::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
NetProto_GMRankStatistics::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
NetProto_GMRankStatistics::mutable_rank() {
  return &rank_;
}

// -------------------------------------------------------------------

// NetProto_GMOpenGuide

// optional int64 roleID = 1;
inline bool NetProto_GMOpenGuide::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMOpenGuide::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMOpenGuide::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMOpenGuide::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_GMOpenGuide::roleID() const {
  return roleID_;
}
inline void NetProto_GMOpenGuide::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 id = 2;
inline bool NetProto_GMOpenGuide::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMOpenGuide::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMOpenGuide::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMOpenGuide::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_GMOpenGuide::id() const {
  return id_;
}
inline void NetProto_GMOpenGuide::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool open = 3;
inline bool NetProto_GMOpenGuide::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMOpenGuide::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMOpenGuide::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMOpenGuide::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool NetProto_GMOpenGuide::open() const {
  return open_;
}
inline void NetProto_GMOpenGuide::set_open(bool value) {
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMNoticeMgr

// repeated .NetProto_GMNotice notice = 1;
inline int NetProto_GMNoticeMgr::notice_size() const {
  return notice_.size();
}
inline void NetProto_GMNoticeMgr::clear_notice() {
  notice_.Clear();
}
inline const ::NetProto_GMNotice& NetProto_GMNoticeMgr::notice(int index) const {
  return notice_.Get(index);
}
inline ::NetProto_GMNotice* NetProto_GMNoticeMgr::mutable_notice(int index) {
  return notice_.Mutable(index);
}
inline ::NetProto_GMNotice* NetProto_GMNoticeMgr::add_notice() {
  return notice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_GMNotice >&
NetProto_GMNoticeMgr::notice() const {
  return notice_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_GMNotice >*
NetProto_GMNoticeMgr::mutable_notice() {
  return &notice_;
}

// optional bool flag = 2;
inline bool NetProto_GMNoticeMgr::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMNoticeMgr::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMNoticeMgr::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMNoticeMgr::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool NetProto_GMNoticeMgr::flag() const {
  return flag_;
}
inline void NetProto_GMNoticeMgr::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMRegister

// optional string account = 1;
inline bool NetProto_GMRegister::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMRegister::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMRegister::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMRegister::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& NetProto_GMRegister::account() const {
  return *account_;
}
inline void NetProto_GMRegister::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_GMRegister::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void NetProto_GMRegister::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMRegister::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* NetProto_GMRegister::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 2;
inline bool NetProto_GMRegister::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMRegister::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMRegister::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMRegister::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& NetProto_GMRegister::password() const {
  return *password_;
}
inline void NetProto_GMRegister::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NetProto_GMRegister::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void NetProto_GMRegister::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMRegister::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* NetProto_GMRegister::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .NetProto_GMLogin.OP permission = 3;
inline bool NetProto_GMRegister::has_permission() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMRegister::set_has_permission() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMRegister::clear_has_permission() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMRegister::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::NetProto_GMLogin_OP NetProto_GMRegister::permission() const {
  return static_cast< ::NetProto_GMLogin_OP >(permission_);
}
inline void NetProto_GMRegister::set_permission(::NetProto_GMLogin_OP value) {
  GOOGLE_DCHECK(::NetProto_GMLogin_OP_IsValid(value));
  set_has_permission();
  permission_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMShutDownMessage

// optional int32 groupID = 1;
inline bool NetProto_GMShutDownMessage::has_groupID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMShutDownMessage::set_has_groupID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMShutDownMessage::clear_has_groupID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMShutDownMessage::clear_groupID() {
  groupID_ = 0;
  clear_has_groupID();
}
inline ::google::protobuf::int32 NetProto_GMShutDownMessage::groupID() const {
  return groupID_;
}
inline void NetProto_GMShutDownMessage::set_groupID(::google::protobuf::int32 value) {
  set_has_groupID();
  groupID_ = value;
}

// optional int32 unitID = 2;
inline bool NetProto_GMShutDownMessage::has_unitID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMShutDownMessage::set_has_unitID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMShutDownMessage::clear_has_unitID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMShutDownMessage::clear_unitID() {
  unitID_ = 0;
  clear_has_unitID();
}
inline ::google::protobuf::int32 NetProto_GMShutDownMessage::unitID() const {
  return unitID_;
}
inline void NetProto_GMShutDownMessage::set_unitID(::google::protobuf::int32 value) {
  set_has_unitID();
  unitID_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMOpenMessage

// optional int32 groupID = 1;
inline bool NetProto_GMOpenMessage::has_groupID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMOpenMessage::set_has_groupID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMOpenMessage::clear_has_groupID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMOpenMessage::clear_groupID() {
  groupID_ = 0;
  clear_has_groupID();
}
inline ::google::protobuf::int32 NetProto_GMOpenMessage::groupID() const {
  return groupID_;
}
inline void NetProto_GMOpenMessage::set_groupID(::google::protobuf::int32 value) {
  set_has_groupID();
  groupID_ = value;
}

// optional int32 unitID = 2;
inline bool NetProto_GMOpenMessage::has_unitID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMOpenMessage::set_has_unitID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMOpenMessage::clear_has_unitID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMOpenMessage::clear_unitID() {
  unitID_ = 0;
  clear_has_unitID();
}
inline ::google::protobuf::int32 NetProto_GMOpenMessage::unitID() const {
  return unitID_;
}
inline void NetProto_GMOpenMessage::set_unitID(::google::protobuf::int32 value) {
  set_has_unitID();
  unitID_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMModifyVIP

// optional int64 roleID = 1;
inline bool NetProto_GMModifyVIP::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMModifyVIP::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMModifyVIP::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMModifyVIP::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_GMModifyVIP::roleID() const {
  return roleID_;
}
inline void NetProto_GMModifyVIP::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 delta = 2;
inline bool NetProto_GMModifyVIP::has_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMModifyVIP::set_has_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMModifyVIP::clear_has_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMModifyVIP::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline ::google::protobuf::int32 NetProto_GMModifyVIP::delta() const {
  return delta_;
}
inline void NetProto_GMModifyVIP::set_delta(::google::protobuf::int32 value) {
  set_has_delta();
  delta_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMAddExchange

// repeated string exchange = 1;
inline int NetProto_GMAddExchange::exchange_size() const {
  return exchange_.size();
}
inline void NetProto_GMAddExchange::clear_exchange() {
  exchange_.Clear();
}
inline const ::std::string& NetProto_GMAddExchange::exchange(int index) const {
  return exchange_.Get(index);
}
inline ::std::string* NetProto_GMAddExchange::mutable_exchange(int index) {
  return exchange_.Mutable(index);
}
inline void NetProto_GMAddExchange::set_exchange(int index, const ::std::string& value) {
  exchange_.Mutable(index)->assign(value);
}
inline void NetProto_GMAddExchange::set_exchange(int index, const char* value) {
  exchange_.Mutable(index)->assign(value);
}
inline void NetProto_GMAddExchange::set_exchange(int index, const char* value, size_t size) {
  exchange_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMAddExchange::add_exchange() {
  return exchange_.Add();
}
inline void NetProto_GMAddExchange::add_exchange(const ::std::string& value) {
  exchange_.Add()->assign(value);
}
inline void NetProto_GMAddExchange::add_exchange(const char* value) {
  exchange_.Add()->assign(value);
}
inline void NetProto_GMAddExchange::add_exchange(const char* value, size_t size) {
  exchange_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetProto_GMAddExchange::exchange() const {
  return exchange_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetProto_GMAddExchange::mutable_exchange() {
  return &exchange_;
}

// optional int32 group = 2;
inline bool NetProto_GMAddExchange::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMAddExchange::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMAddExchange::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMAddExchange::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 NetProto_GMAddExchange::group() const {
  return group_;
}
inline void NetProto_GMAddExchange::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 endTime = 3;
inline bool NetProto_GMAddExchange::has_endTime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMAddExchange::set_has_endTime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMAddExchange::clear_has_endTime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMAddExchange::clear_endTime() {
  endTime_ = 0;
  clear_has_endTime();
}
inline ::google::protobuf::int32 NetProto_GMAddExchange::endTime() const {
  return endTime_;
}
inline void NetProto_GMAddExchange::set_endTime(::google::protobuf::int32 value) {
  set_has_endTime();
  endTime_ = value;
}

// optional int32 giftID = 4;
inline bool NetProto_GMAddExchange::has_giftID() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_GMAddExchange::set_has_giftID() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_GMAddExchange::clear_has_giftID() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_GMAddExchange::clear_giftID() {
  giftID_ = 0;
  clear_has_giftID();
}
inline ::google::protobuf::int32 NetProto_GMAddExchange::giftID() const {
  return giftID_;
}
inline void NetProto_GMAddExchange::set_giftID(::google::protobuf::int32 value) {
  set_has_giftID();
  giftID_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMQueryFaction

// optional .NetProto_FactionInfo info = 1;
inline bool NetProto_GMQueryFaction::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMQueryFaction::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMQueryFaction::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMQueryFaction::clear_info() {
  if (info_ != NULL) info_->::NetProto_FactionInfo::Clear();
  clear_has_info();
}
inline const ::NetProto_FactionInfo& NetProto_GMQueryFaction::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::NetProto_FactionInfo* NetProto_GMQueryFaction::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::NetProto_FactionInfo;
  return info_;
}
inline ::NetProto_FactionInfo* NetProto_GMQueryFaction::release_info() {
  clear_has_info();
  ::NetProto_FactionInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// repeated .NetProto_FactionMem mem = 2;
inline int NetProto_GMQueryFaction::mem_size() const {
  return mem_.size();
}
inline void NetProto_GMQueryFaction::clear_mem() {
  mem_.Clear();
}
inline const ::NetProto_FactionMem& NetProto_GMQueryFaction::mem(int index) const {
  return mem_.Get(index);
}
inline ::NetProto_FactionMem* NetProto_GMQueryFaction::mutable_mem(int index) {
  return mem_.Mutable(index);
}
inline ::NetProto_FactionMem* NetProto_GMQueryFaction::add_mem() {
  return mem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem >&
NetProto_GMQueryFaction::mem() const {
  return mem_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem >*
NetProto_GMQueryFaction::mutable_mem() {
  return &mem_;
}

// optional string winName = 3;
inline bool NetProto_GMQueryFaction::has_winName() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMQueryFaction::set_has_winName() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMQueryFaction::clear_has_winName() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMQueryFaction::clear_winName() {
  if (winName_ != &::google::protobuf::internal::kEmptyString) {
    winName_->clear();
  }
  clear_has_winName();
}
inline const ::std::string& NetProto_GMQueryFaction::winName() const {
  return *winName_;
}
inline void NetProto_GMQueryFaction::set_winName(const ::std::string& value) {
  set_has_winName();
  if (winName_ == &::google::protobuf::internal::kEmptyString) {
    winName_ = new ::std::string;
  }
  winName_->assign(value);
}
inline void NetProto_GMQueryFaction::set_winName(const char* value) {
  set_has_winName();
  if (winName_ == &::google::protobuf::internal::kEmptyString) {
    winName_ = new ::std::string;
  }
  winName_->assign(value);
}
inline void NetProto_GMQueryFaction::set_winName(const char* value, size_t size) {
  set_has_winName();
  if (winName_ == &::google::protobuf::internal::kEmptyString) {
    winName_ = new ::std::string;
  }
  winName_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMQueryFaction::mutable_winName() {
  set_has_winName();
  if (winName_ == &::google::protobuf::internal::kEmptyString) {
    winName_ = new ::std::string;
  }
  return winName_;
}
inline ::std::string* NetProto_GMQueryFaction::release_winName() {
  clear_has_winName();
  if (winName_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winName_;
    winName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_GMChangeFactionMem

// optional string factionName = 1;
inline bool NetProto_GMChangeFactionMem::has_factionName() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMChangeFactionMem::set_has_factionName() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMChangeFactionMem::clear_has_factionName() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMChangeFactionMem::clear_factionName() {
  if (factionName_ != &::google::protobuf::internal::kEmptyString) {
    factionName_->clear();
  }
  clear_has_factionName();
}
inline const ::std::string& NetProto_GMChangeFactionMem::factionName() const {
  return *factionName_;
}
inline void NetProto_GMChangeFactionMem::set_factionName(const ::std::string& value) {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  factionName_->assign(value);
}
inline void NetProto_GMChangeFactionMem::set_factionName(const char* value) {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  factionName_->assign(value);
}
inline void NetProto_GMChangeFactionMem::set_factionName(const char* value, size_t size) {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  factionName_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMChangeFactionMem::mutable_factionName() {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  return factionName_;
}
inline ::std::string* NetProto_GMChangeFactionMem::release_factionName() {
  clear_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = factionName_;
    factionName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 roleID = 2;
inline bool NetProto_GMChangeFactionMem::has_roleID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMChangeFactionMem::set_has_roleID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMChangeFactionMem::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMChangeFactionMem::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_GMChangeFactionMem::roleID() const {
  return roleID_;
}
inline void NetProto_GMChangeFactionMem::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional bool flag = 3;
inline bool NetProto_GMChangeFactionMem::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_GMChangeFactionMem::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_GMChangeFactionMem::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_GMChangeFactionMem::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool NetProto_GMChangeFactionMem::flag() const {
  return flag_;
}
inline void NetProto_GMChangeFactionMem::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMAddRekooRole

// optional int64 roleID = 1;
inline bool NetProto_GMAddRekooRole::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMAddRekooRole::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMAddRekooRole::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMAddRekooRole::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_GMAddRekooRole::roleID() const {
  return roleID_;
}
inline void NetProto_GMAddRekooRole::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// -------------------------------------------------------------------

// NetProto_GMLoginInfo

// optional int32 count = 1;
inline bool NetProto_GMLoginInfo::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_GMLoginInfo::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_GMLoginInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_GMLoginInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_GMLoginInfo::count() const {
  return count_;
}
inline void NetProto_GMLoginInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional string str = 2;
inline bool NetProto_GMLoginInfo::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_GMLoginInfo::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_GMLoginInfo::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_GMLoginInfo::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& NetProto_GMLoginInfo::str() const {
  return *str_;
}
inline void NetProto_GMLoginInfo::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_GMLoginInfo::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_GMLoginInfo::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_GMLoginInfo::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* NetProto_GMLoginInfo::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_ObtainPet

// optional int32 id = 1;
inline bool NetProto_ObtainPet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ObtainPet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ObtainPet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ObtainPet::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_ObtainPet::id() const {
  return id_;
}
inline void NetProto_ObtainPet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 index = 2;
inline bool NetProto_ObtainPet::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_ObtainPet::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_ObtainPet::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_ObtainPet::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_ObtainPet::index() const {
  return index_;
}
inline void NetProto_ObtainPet::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_PetFighting

// optional int32 index = 1;
inline bool NetProto_PetFighting::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PetFighting::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PetFighting::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PetFighting::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_PetFighting::index() const {
  return index_;
}
inline void NetProto_PetFighting::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_PetRest

// optional int32 index = 1;
inline bool NetProto_PetRest::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PetRest::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PetRest::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PetRest::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_PetRest::index() const {
  return index_;
}
inline void NetProto_PetRest::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional bool flag = 2;
inline bool NetProto_PetRest::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_PetRest::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_PetRest::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_PetRest::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool NetProto_PetRest::flag() const {
  return flag_;
}
inline void NetProto_PetRest::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// NetProto_PetAttach

// optional int32 index = 1;
inline bool NetProto_PetAttach::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PetAttach::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PetAttach::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PetAttach::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_PetAttach::index() const {
  return index_;
}
inline void NetProto_PetAttach::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_PetLevelUp

// optional int32 index = 1;
inline bool NetProto_PetLevelUp::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PetLevelUp::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PetLevelUp::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PetLevelUp::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_PetLevelUp::index() const {
  return index_;
}
inline void NetProto_PetLevelUp::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 change = 2;
inline bool NetProto_PetLevelUp::has_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_PetLevelUp::set_has_change() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_PetLevelUp::clear_has_change() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_PetLevelUp::clear_change() {
  change_ = 0;
  clear_has_change();
}
inline ::google::protobuf::int32 NetProto_PetLevelUp::change() const {
  return change_;
}
inline void NetProto_PetLevelUp::set_change(::google::protobuf::int32 value) {
  set_has_change();
  change_ = value;
}

// -------------------------------------------------------------------

// NetProto_PetLearnSkill

// optional int32 index = 1;
inline bool NetProto_PetLearnSkill::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PetLearnSkill::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PetLearnSkill::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PetLearnSkill::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_PetLearnSkill::index() const {
  return index_;
}
inline void NetProto_PetLearnSkill::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 skillID = 2;
inline bool NetProto_PetLearnSkill::has_skillID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_PetLearnSkill::set_has_skillID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_PetLearnSkill::clear_has_skillID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_PetLearnSkill::clear_skillID() {
  skillID_ = 0;
  clear_has_skillID();
}
inline ::google::protobuf::int32 NetProto_PetLearnSkill::skillID() const {
  return skillID_;
}
inline void NetProto_PetLearnSkill::set_skillID(::google::protobuf::int32 value) {
  set_has_skillID();
  skillID_ = value;
}

// optional int32 skillsIndex = 3;
inline bool NetProto_PetLearnSkill::has_skillsIndex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_PetLearnSkill::set_has_skillsIndex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_PetLearnSkill::clear_has_skillsIndex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_PetLearnSkill::clear_skillsIndex() {
  skillsIndex_ = 0;
  clear_has_skillsIndex();
}
inline ::google::protobuf::int32 NetProto_PetLearnSkill::skillsIndex() const {
  return skillsIndex_;
}
inline void NetProto_PetLearnSkill::set_skillsIndex(::google::protobuf::int32 value) {
  set_has_skillsIndex();
  skillsIndex_ = value;
}

// -------------------------------------------------------------------

// NetProto_PetInherit

// optional int32 indexPre = 1;
inline bool NetProto_PetInherit::has_indexPre() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PetInherit::set_has_indexPre() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PetInherit::clear_has_indexPre() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PetInherit::clear_indexPre() {
  indexPre_ = 0;
  clear_has_indexPre();
}
inline ::google::protobuf::int32 NetProto_PetInherit::indexPre() const {
  return indexPre_;
}
inline void NetProto_PetInherit::set_indexPre(::google::protobuf::int32 value) {
  set_has_indexPre();
  indexPre_ = value;
}

// optional int32 indexAfter = 2;
inline bool NetProto_PetInherit::has_indexAfter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_PetInherit::set_has_indexAfter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_PetInherit::clear_has_indexAfter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_PetInherit::clear_indexAfter() {
  indexAfter_ = 0;
  clear_has_indexAfter();
}
inline ::google::protobuf::int32 NetProto_PetInherit::indexAfter() const {
  return indexAfter_;
}
inline void NetProto_PetInherit::set_indexAfter(::google::protobuf::int32 value) {
  set_has_indexAfter();
  indexAfter_ = value;
}

// optional bool inheritSkill = 3;
inline bool NetProto_PetInherit::has_inheritSkill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_PetInherit::set_has_inheritSkill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_PetInherit::clear_has_inheritSkill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_PetInherit::clear_inheritSkill() {
  inheritSkill_ = false;
  clear_has_inheritSkill();
}
inline bool NetProto_PetInherit::inheritSkill() const {
  return inheritSkill_;
}
inline void NetProto_PetInherit::set_inheritSkill(bool value) {
  set_has_inheritSkill();
  inheritSkill_ = value;
}

// optional .PB_PetAsset pet = 4;
inline bool NetProto_PetInherit::has_pet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_PetInherit::set_has_pet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_PetInherit::clear_has_pet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_PetInherit::clear_pet() {
  if (pet_ != NULL) pet_->::PB_PetAsset::Clear();
  clear_has_pet();
}
inline const ::PB_PetAsset& NetProto_PetInherit::pet() const {
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::PB_PetAsset* NetProto_PetInherit::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::PB_PetAsset;
  return pet_;
}
inline ::PB_PetAsset* NetProto_PetInherit::release_pet() {
  clear_has_pet();
  ::PB_PetAsset* temp = pet_;
  pet_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NetProto_PetAdvance

// optional int32 index = 1;
inline bool NetProto_PetAdvance::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PetAdvance::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PetAdvance::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PetAdvance::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_PetAdvance::index() const {
  return index_;
}
inline void NetProto_PetAdvance::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_PetPsychicsLevelUp

// optional int32 index = 1;
inline bool NetProto_PetPsychicsLevelUp::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PetPsychicsLevelUp::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PetPsychicsLevelUp::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PetPsychicsLevelUp::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_PetPsychicsLevelUp::index() const {
  return index_;
}
inline void NetProto_PetPsychicsLevelUp::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 res = 2;
inline bool NetProto_PetPsychicsLevelUp::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_PetPsychicsLevelUp::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_PetPsychicsLevelUp::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_PetPsychicsLevelUp::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 NetProto_PetPsychicsLevelUp::res() const {
  return res_;
}
inline void NetProto_PetPsychicsLevelUp::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// NetProto_ActiveGemRequest

// optional int32 value = 1;
inline bool NetProto_ActiveGemRequest::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ActiveGemRequest::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ActiveGemRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ActiveGemRequest::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 NetProto_ActiveGemRequest::value() const {
  return value_;
}
inline void NetProto_ActiveGemRequest::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// NetProto_ActiveDoubleGem

// -------------------------------------------------------------------

// NetProto_ActiveUpGradeGem

// optional int32 index = 1;
inline bool NetProto_ActiveUpGradeGem::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ActiveUpGradeGem::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ActiveUpGradeGem::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ActiveUpGradeGem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_ActiveUpGradeGem::index() const {
  return index_;
}
inline void NetProto_ActiveUpGradeGem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_ActiveGetGem

// optional bool flag = 1;
inline bool NetProto_ActiveGetGem::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ActiveGetGem::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ActiveGetGem::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ActiveGetGem::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool NetProto_ActiveGetGem::flag() const {
  return flag_;
}
inline void NetProto_ActiveGetGem::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// NetProto_ActiveFight

// -------------------------------------------------------------------

// NetProto_ActiveStrongeSolider

// optional int32 count = 1;
inline bool NetProto_ActiveStrongeSolider::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ActiveStrongeSolider::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ActiveStrongeSolider::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ActiveStrongeSolider::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_ActiveStrongeSolider::count() const {
  return count_;
}
inline void NetProto_ActiveStrongeSolider::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_EnterPlayOff

// optional int32 id = 1;
inline bool NetProto_EnterPlayOff::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_EnterPlayOff::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_EnterPlayOff::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_EnterPlayOff::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_EnterPlayOff::id() const {
  return id_;
}
inline void NetProto_EnterPlayOff::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NetProto_PlayOffInfo

// optional int32 id = 1;
inline bool NetProto_PlayOffInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_PlayOffInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_PlayOffInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_PlayOffInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetProto_PlayOffInfo::id() const {
  return id_;
}
inline void NetProto_PlayOffInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 day = 2;
inline bool NetProto_PlayOffInfo::has_day() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_PlayOffInfo::set_has_day() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_PlayOffInfo::clear_has_day() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_PlayOffInfo::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 NetProto_PlayOffInfo::day() const {
  return day_;
}
inline void NetProto_PlayOffInfo::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// optional int32 pass = 3;
inline bool NetProto_PlayOffInfo::has_pass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_PlayOffInfo::set_has_pass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_PlayOffInfo::clear_has_pass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_PlayOffInfo::clear_pass() {
  pass_ = 0;
  clear_has_pass();
}
inline ::google::protobuf::int32 NetProto_PlayOffInfo::pass() const {
  return pass_;
}
inline void NetProto_PlayOffInfo::set_pass(::google::protobuf::int32 value) {
  set_has_pass();
  pass_ = value;
}

// optional int32 overTime = 4;
inline bool NetProto_PlayOffInfo::has_overTime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_PlayOffInfo::set_has_overTime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_PlayOffInfo::clear_has_overTime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_PlayOffInfo::clear_overTime() {
  overTime_ = 0;
  clear_has_overTime();
}
inline ::google::protobuf::int32 NetProto_PlayOffInfo::overTime() const {
  return overTime_;
}
inline void NetProto_PlayOffInfo::set_overTime(::google::protobuf::int32 value) {
  set_has_overTime();
  overTime_ = value;
}

// optional int32 result = 5;
inline bool NetProto_PlayOffInfo::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_PlayOffInfo::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_PlayOffInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_PlayOffInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 NetProto_PlayOffInfo::result() const {
  return result_;
}
inline void NetProto_PlayOffInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .PB_PlayerAtt att = 6;
inline bool NetProto_PlayOffInfo::has_att() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_PlayOffInfo::set_has_att() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_PlayOffInfo::clear_has_att() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_PlayOffInfo::clear_att() {
  if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
  clear_has_att();
}
inline const ::PB_PlayerAtt& NetProto_PlayOffInfo::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_PlayerAtt* NetProto_PlayOffInfo::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_PlayerAtt;
  return att_;
}
inline ::PB_PlayerAtt* NetProto_PlayOffInfo::release_att() {
  clear_has_att();
  ::PB_PlayerAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// optional int32 res = 7;
inline bool NetProto_PlayOffInfo::has_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_PlayOffInfo::set_has_res() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_PlayOffInfo::clear_has_res() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_PlayOffInfo::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 NetProto_PlayOffInfo::res() const {
  return res_;
}
inline void NetProto_PlayOffInfo::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// optional int32 turn = 8;
inline bool NetProto_PlayOffInfo::has_turn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_PlayOffInfo::set_has_turn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_PlayOffInfo::clear_has_turn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_PlayOffInfo::clear_turn() {
  turn_ = 0;
  clear_has_turn();
}
inline ::google::protobuf::int32 NetProto_PlayOffInfo::turn() const {
  return turn_;
}
inline void NetProto_PlayOffInfo::set_turn(::google::protobuf::int32 value) {
  set_has_turn();
  turn_ = value;
}

// -------------------------------------------------------------------

// NetProto_PreparePlayOff

// -------------------------------------------------------------------

// NetProto_Treasure

// optional int32 index = 1;
inline bool NetProto_Treasure::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Treasure::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Treasure::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Treasure::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_Treasure::index() const {
  return index_;
}
inline void NetProto_Treasure::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 count = 2;
inline bool NetProto_Treasure::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Treasure::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Treasure::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Treasure::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_Treasure::count() const {
  return count_;
}
inline void NetProto_Treasure::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_Hire

// repeated .PB_PlayerAtt att = 1;
inline int NetProto_Hire::att_size() const {
  return att_.size();
}
inline void NetProto_Hire::clear_att() {
  att_.Clear();
}
inline const ::PB_PlayerAtt& NetProto_Hire::att(int index) const {
  return att_.Get(index);
}
inline ::PB_PlayerAtt* NetProto_Hire::mutable_att(int index) {
  return att_.Mutable(index);
}
inline ::PB_PlayerAtt* NetProto_Hire::add_att() {
  return att_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
NetProto_Hire::att() const {
  return att_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
NetProto_Hire::mutable_att() {
  return &att_;
}

// optional int32 index = 2;
inline bool NetProto_Hire::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Hire::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Hire::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Hire::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_Hire::index() const {
  return index_;
}
inline void NetProto_Hire::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_MoneyTree

// optional int32 index = 1;
inline bool NetProto_MoneyTree::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_MoneyTree::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_MoneyTree::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_MoneyTree::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_MoneyTree::index() const {
  return index_;
}
inline void NetProto_MoneyTree::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 count = 2;
inline bool NetProto_MoneyTree::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_MoneyTree::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_MoneyTree::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_MoneyTree::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_MoneyTree::count() const {
  return count_;
}
inline void NetProto_MoneyTree::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_TreasureBox

// repeated .PB_ItemInfo items = 1;
inline int NetProto_TreasureBox::items_size() const {
  return items_.size();
}
inline void NetProto_TreasureBox::clear_items() {
  items_.Clear();
}
inline const ::PB_ItemInfo& NetProto_TreasureBox::items(int index) const {
  return items_.Get(index);
}
inline ::PB_ItemInfo* NetProto_TreasureBox::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::PB_ItemInfo* NetProto_TreasureBox::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
NetProto_TreasureBox::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
NetProto_TreasureBox::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// NetProto_FlyPlan

// optional int32 index = 1;
inline bool NetProto_FlyPlan::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FlyPlan::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FlyPlan::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FlyPlan::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_FlyPlan::index() const {
  return index_;
}
inline void NetProto_FlyPlan::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// NetProto_BlessCome

// optional int32 count = 1;
inline bool NetProto_BlessCome::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_BlessCome::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_BlessCome::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_BlessCome::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_BlessCome::count() const {
  return count_;
}
inline void NetProto_BlessCome::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_ModifyBlessScore

// optional int32 bless = 1;
inline bool NetProto_ModifyBlessScore::has_bless() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ModifyBlessScore::set_has_bless() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ModifyBlessScore::clear_has_bless() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ModifyBlessScore::clear_bless() {
  bless_ = 0;
  clear_has_bless();
}
inline ::google::protobuf::int32 NetProto_ModifyBlessScore::bless() const {
  return bless_;
}
inline void NetProto_ModifyBlessScore::set_bless(::google::protobuf::int32 value) {
  set_has_bless();
  bless_ = value;
}

// -------------------------------------------------------------------

// NetProto_TopUpObtRMB

// -------------------------------------------------------------------

// NetProto_ServerOpenTime

// optional int32 serverOpenTime = 1;
inline bool NetProto_ServerOpenTime::has_serverOpenTime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_ServerOpenTime::set_has_serverOpenTime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_ServerOpenTime::clear_has_serverOpenTime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_ServerOpenTime::clear_serverOpenTime() {
  serverOpenTime_ = 0;
  clear_has_serverOpenTime();
}
inline ::google::protobuf::int32 NetProto_ServerOpenTime::serverOpenTime() const {
  return serverOpenTime_;
}
inline void NetProto_ServerOpenTime::set_serverOpenTime(::google::protobuf::int32 value) {
  set_has_serverOpenTime();
  serverOpenTime_ = value;
}

// -------------------------------------------------------------------

// NetProto_InvateCode

// optional string othercode = 1;
inline bool NetProto_InvateCode::has_othercode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_InvateCode::set_has_othercode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_InvateCode::clear_has_othercode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_InvateCode::clear_othercode() {
  if (othercode_ != &::google::protobuf::internal::kEmptyString) {
    othercode_->clear();
  }
  clear_has_othercode();
}
inline const ::std::string& NetProto_InvateCode::othercode() const {
  return *othercode_;
}
inline void NetProto_InvateCode::set_othercode(const ::std::string& value) {
  set_has_othercode();
  if (othercode_ == &::google::protobuf::internal::kEmptyString) {
    othercode_ = new ::std::string;
  }
  othercode_->assign(value);
}
inline void NetProto_InvateCode::set_othercode(const char* value) {
  set_has_othercode();
  if (othercode_ == &::google::protobuf::internal::kEmptyString) {
    othercode_ = new ::std::string;
  }
  othercode_->assign(value);
}
inline void NetProto_InvateCode::set_othercode(const char* value, size_t size) {
  set_has_othercode();
  if (othercode_ == &::google::protobuf::internal::kEmptyString) {
    othercode_ = new ::std::string;
  }
  othercode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_InvateCode::mutable_othercode() {
  set_has_othercode();
  if (othercode_ == &::google::protobuf::internal::kEmptyString) {
    othercode_ = new ::std::string;
  }
  return othercode_;
}
inline ::std::string* NetProto_InvateCode::release_othercode() {
  clear_has_othercode();
  if (othercode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = othercode_;
    othercode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_UpdateInvateCount

// optional int32 count = 1;
inline bool NetProto_UpdateInvateCount::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_UpdateInvateCount::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_UpdateInvateCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_UpdateInvateCount::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NetProto_UpdateInvateCount::count() const {
  return count_;
}
inline void NetProto_UpdateInvateCount::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// NetProto_CreateFaction

// optional string str = 1;
inline bool NetProto_CreateFaction::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_CreateFaction::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_CreateFaction::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_CreateFaction::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& NetProto_CreateFaction::str() const {
  return *str_;
}
inline void NetProto_CreateFaction::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_CreateFaction::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_CreateFaction::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_CreateFaction::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* NetProto_CreateFaction::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 res = 2;
inline bool NetProto_CreateFaction::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_CreateFaction::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_CreateFaction::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_CreateFaction::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 NetProto_CreateFaction::res() const {
  return res_;
}
inline void NetProto_CreateFaction::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// NetProto_DelFaction

// optional int32 res = 1;
inline bool NetProto_DelFaction::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DelFaction::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DelFaction::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DelFaction::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 NetProto_DelFaction::res() const {
  return res_;
}
inline void NetProto_DelFaction::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// NetProto_Donate

// optional int32 type = 1;
inline bool NetProto_Donate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Donate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Donate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Donate::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NetProto_Donate::type() const {
  return type_;
}
inline void NetProto_Donate::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NetProto_FactionNotice

// optional string str = 1;
inline bool NetProto_FactionNotice::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FactionNotice::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FactionNotice::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FactionNotice::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& NetProto_FactionNotice::str() const {
  return *str_;
}
inline void NetProto_FactionNotice::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_FactionNotice::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_FactionNotice::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_FactionNotice::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* NetProto_FactionNotice::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_Designate

// optional int64 roleID = 1;
inline bool NetProto_Designate::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Designate::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Designate::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Designate::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_Designate::roleID() const {
  return roleID_;
}
inline void NetProto_Designate::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 type = 2;
inline bool NetProto_Designate::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_Designate::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_Designate::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_Designate::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NetProto_Designate::type() const {
  return type_;
}
inline void NetProto_Designate::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NetProto_AddMem

// optional int64 roleID = 1;
inline bool NetProto_AddMem::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_AddMem::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_AddMem::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_AddMem::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_AddMem::roleID() const {
  return roleID_;
}
inline void NetProto_AddMem::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional bool flag = 2;
inline bool NetProto_AddMem::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_AddMem::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_AddMem::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_AddMem::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool NetProto_AddMem::flag() const {
  return flag_;
}
inline void NetProto_AddMem::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// NetProto_DelMem

// optional int64 roleID = 1;
inline bool NetProto_DelMem::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_DelMem::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_DelMem::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_DelMem::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_DelMem::roleID() const {
  return roleID_;
}
inline void NetProto_DelMem::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// -------------------------------------------------------------------

// NetProto_Applicant

// optional string str = 1;
inline bool NetProto_Applicant::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Applicant::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Applicant::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Applicant::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& NetProto_Applicant::str() const {
  return *str_;
}
inline void NetProto_Applicant::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_Applicant::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_Applicant::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_Applicant::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* NetProto_Applicant::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_Guardian

// optional int32 type = 1;
inline bool NetProto_Guardian::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_Guardian::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_Guardian::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_Guardian::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NetProto_Guardian::type() const {
  return type_;
}
inline void NetProto_Guardian::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NetProto_FactionInfo

// optional string name = 1;
inline bool NetProto_FactionInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FactionInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FactionInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FactionInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetProto_FactionInfo::name() const {
  return *name_;
}
inline void NetProto_FactionInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_FactionInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_FactionInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_FactionInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetProto_FactionInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 2;
inline bool NetProto_FactionInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_FactionInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_FactionInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_FactionInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 NetProto_FactionInfo::rank() const {
  return rank_;
}
inline void NetProto_FactionInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 exp = 3;
inline bool NetProto_FactionInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_FactionInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_FactionInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_FactionInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 NetProto_FactionInfo::exp() const {
  return exp_;
}
inline void NetProto_FactionInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 num = 4;
inline bool NetProto_FactionInfo::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_FactionInfo::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_FactionInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_FactionInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 NetProto_FactionInfo::num() const {
  return num_;
}
inline void NetProto_FactionInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional string str = 5;
inline bool NetProto_FactionInfo::has_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_FactionInfo::set_has_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_FactionInfo::clear_has_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_FactionInfo::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& NetProto_FactionInfo::str() const {
  return *str_;
}
inline void NetProto_FactionInfo::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_FactionInfo::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_FactionInfo::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_FactionInfo::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* NetProto_FactionInfo::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 6;
inline bool NetProto_FactionInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_FactionInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_FactionInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_FactionInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetProto_FactionInfo::level() const {
  return level_;
}
inline void NetProto_FactionInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// NetProto_FactionMem

// optional int32 contribute = 1;
inline bool NetProto_FactionMem::has_contribute() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FactionMem::set_has_contribute() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FactionMem::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FactionMem::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 NetProto_FactionMem::contribute() const {
  return contribute_;
}
inline void NetProto_FactionMem::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional string name = 2;
inline bool NetProto_FactionMem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_FactionMem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_FactionMem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_FactionMem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetProto_FactionMem::name() const {
  return *name_;
}
inline void NetProto_FactionMem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_FactionMem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_FactionMem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_FactionMem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetProto_FactionMem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 office = 3;
inline bool NetProto_FactionMem::has_office() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_FactionMem::set_has_office() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_FactionMem::clear_has_office() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_FactionMem::clear_office() {
  office_ = 0;
  clear_has_office();
}
inline ::google::protobuf::int32 NetProto_FactionMem::office() const {
  return office_;
}
inline void NetProto_FactionMem::set_office(::google::protobuf::int32 value) {
  set_has_office();
  office_ = value;
}

// optional int32 lastLoginTime = 4;
inline bool NetProto_FactionMem::has_lastLoginTime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_FactionMem::set_has_lastLoginTime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_FactionMem::clear_has_lastLoginTime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_FactionMem::clear_lastLoginTime() {
  lastLoginTime_ = 0;
  clear_has_lastLoginTime();
}
inline ::google::protobuf::int32 NetProto_FactionMem::lastLoginTime() const {
  return lastLoginTime_;
}
inline void NetProto_FactionMem::set_lastLoginTime(::google::protobuf::int32 value) {
  set_has_lastLoginTime();
  lastLoginTime_ = value;
}

// optional int32 type = 5;
inline bool NetProto_FactionMem::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_FactionMem::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_FactionMem::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_FactionMem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NetProto_FactionMem::type() const {
  return type_;
}
inline void NetProto_FactionMem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 roleID = 6;
inline bool NetProto_FactionMem::has_roleID() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_FactionMem::set_has_roleID() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_FactionMem::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_FactionMem::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_FactionMem::roleID() const {
  return roleID_;
}
inline void NetProto_FactionMem::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// -------------------------------------------------------------------

// NetProto_FactionChangeMem

// repeated .NetProto_FactionMem data = 1;
inline int NetProto_FactionChangeMem::data_size() const {
  return data_.size();
}
inline void NetProto_FactionChangeMem::clear_data() {
  data_.Clear();
}
inline const ::NetProto_FactionMem& NetProto_FactionChangeMem::data(int index) const {
  return data_.Get(index);
}
inline ::NetProto_FactionMem* NetProto_FactionChangeMem::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::NetProto_FactionMem* NetProto_FactionChangeMem::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem >&
NetProto_FactionChangeMem::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_FactionMem >*
NetProto_FactionChangeMem::mutable_data() {
  return &data_;
}

// repeated bool flag = 2;
inline int NetProto_FactionChangeMem::flag_size() const {
  return flag_.size();
}
inline void NetProto_FactionChangeMem::clear_flag() {
  flag_.Clear();
}
inline bool NetProto_FactionChangeMem::flag(int index) const {
  return flag_.Get(index);
}
inline void NetProto_FactionChangeMem::set_flag(int index, bool value) {
  flag_.Set(index, value);
}
inline void NetProto_FactionChangeMem::add_flag(bool value) {
  flag_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
NetProto_FactionChangeMem::flag() const {
  return flag_;
}
inline ::google::protobuf::RepeatedField< bool >*
NetProto_FactionChangeMem::mutable_flag() {
  return &flag_;
}

// -------------------------------------------------------------------

// NetProto_FactionGuardian

// optional int32 item = 1;
inline bool NetProto_FactionGuardian::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FactionGuardian::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FactionGuardian::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FactionGuardian::clear_item() {
  item_ = 0;
  clear_has_item();
}
inline ::google::protobuf::int32 NetProto_FactionGuardian::item() const {
  return item_;
}
inline void NetProto_FactionGuardian::set_item(::google::protobuf::int32 value) {
  set_has_item();
  item_ = value;
}

// optional string str = 2;
inline bool NetProto_FactionGuardian::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_FactionGuardian::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_FactionGuardian::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_FactionGuardian::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& NetProto_FactionGuardian::str() const {
  return *str_;
}
inline void NetProto_FactionGuardian::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_FactionGuardian::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void NetProto_FactionGuardian::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_FactionGuardian::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* NetProto_FactionGuardian::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 3;
inline bool NetProto_FactionGuardian::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_FactionGuardian::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_FactionGuardian::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_FactionGuardian::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NetProto_FactionGuardian::type() const {
  return type_;
}
inline void NetProto_FactionGuardian::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NetProto_FactionApplicant

// optional int32 level = 1;
inline bool NetProto_FactionApplicant::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_FactionApplicant::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_FactionApplicant::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_FactionApplicant::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetProto_FactionApplicant::level() const {
  return level_;
}
inline void NetProto_FactionApplicant::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 power = 2;
inline bool NetProto_FactionApplicant::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_FactionApplicant::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_FactionApplicant::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_FactionApplicant::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 NetProto_FactionApplicant::power() const {
  return power_;
}
inline void NetProto_FactionApplicant::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 vip = 3;
inline bool NetProto_FactionApplicant::has_vip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_FactionApplicant::set_has_vip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_FactionApplicant::clear_has_vip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_FactionApplicant::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 NetProto_FactionApplicant::vip() const {
  return vip_;
}
inline void NetProto_FactionApplicant::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// optional string name = 4;
inline bool NetProto_FactionApplicant::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_FactionApplicant::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_FactionApplicant::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_FactionApplicant::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetProto_FactionApplicant::name() const {
  return *name_;
}
inline void NetProto_FactionApplicant::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_FactionApplicant::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetProto_FactionApplicant::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_FactionApplicant::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetProto_FactionApplicant::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 roleID = 5;
inline bool NetProto_FactionApplicant::has_roleID() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_FactionApplicant::set_has_roleID() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_FactionApplicant::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_FactionApplicant::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 NetProto_FactionApplicant::roleID() const {
  return roleID_;
}
inline void NetProto_FactionApplicant::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// -------------------------------------------------------------------

// NetProto_FactionAllApplicant

// repeated .NetProto_FactionApplicant data = 1;
inline int NetProto_FactionAllApplicant::data_size() const {
  return data_.size();
}
inline void NetProto_FactionAllApplicant::clear_data() {
  data_.Clear();
}
inline const ::NetProto_FactionApplicant& NetProto_FactionAllApplicant::data(int index) const {
  return data_.Get(index);
}
inline ::NetProto_FactionApplicant* NetProto_FactionAllApplicant::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::NetProto_FactionApplicant* NetProto_FactionAllApplicant::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_FactionApplicant >&
NetProto_FactionAllApplicant::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_FactionApplicant >*
NetProto_FactionAllApplicant::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// NetProto_FactionList

// repeated .NetProto_FactionInfo info = 1;
inline int NetProto_FactionList::info_size() const {
  return info_.size();
}
inline void NetProto_FactionList::clear_info() {
  info_.Clear();
}
inline const ::NetProto_FactionInfo& NetProto_FactionList::info(int index) const {
  return info_.Get(index);
}
inline ::NetProto_FactionInfo* NetProto_FactionList::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::NetProto_FactionInfo* NetProto_FactionList::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_FactionInfo >&
NetProto_FactionList::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_FactionInfo >*
NetProto_FactionList::mutable_info() {
  return &info_;
}

// repeated string str = 2;
inline int NetProto_FactionList::str_size() const {
  return str_.size();
}
inline void NetProto_FactionList::clear_str() {
  str_.Clear();
}
inline const ::std::string& NetProto_FactionList::str(int index) const {
  return str_.Get(index);
}
inline ::std::string* NetProto_FactionList::mutable_str(int index) {
  return str_.Mutable(index);
}
inline void NetProto_FactionList::set_str(int index, const ::std::string& value) {
  str_.Mutable(index)->assign(value);
}
inline void NetProto_FactionList::set_str(int index, const char* value) {
  str_.Mutable(index)->assign(value);
}
inline void NetProto_FactionList::set_str(int index, const char* value, size_t size) {
  str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_FactionList::add_str() {
  return str_.Add();
}
inline void NetProto_FactionList::add_str(const ::std::string& value) {
  str_.Add()->assign(value);
}
inline void NetProto_FactionList::add_str(const char* value) {
  str_.Add()->assign(value);
}
inline void NetProto_FactionList::add_str(const char* value, size_t size) {
  str_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetProto_FactionList::str() const {
  return str_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetProto_FactionList::mutable_str() {
  return &str_;
}

// -------------------------------------------------------------------

// NetProto_AcceptToFaction

// optional string factionName = 1;
inline bool NetProto_AcceptToFaction::has_factionName() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_AcceptToFaction::set_has_factionName() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_AcceptToFaction::clear_has_factionName() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_AcceptToFaction::clear_factionName() {
  if (factionName_ != &::google::protobuf::internal::kEmptyString) {
    factionName_->clear();
  }
  clear_has_factionName();
}
inline const ::std::string& NetProto_AcceptToFaction::factionName() const {
  return *factionName_;
}
inline void NetProto_AcceptToFaction::set_factionName(const ::std::string& value) {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  factionName_->assign(value);
}
inline void NetProto_AcceptToFaction::set_factionName(const char* value) {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  factionName_->assign(value);
}
inline void NetProto_AcceptToFaction::set_factionName(const char* value, size_t size) {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  factionName_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_AcceptToFaction::mutable_factionName() {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  return factionName_;
}
inline ::std::string* NetProto_AcceptToFaction::release_factionName() {
  clear_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = factionName_;
    factionName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NetProto_AsyncStatistics

// optional bool isFirstIN = 1;
inline bool NetProto_AsyncStatistics::has_isFirstIN() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_isFirstIN() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_AsyncStatistics::clear_has_isFirstIN() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_AsyncStatistics::clear_isFirstIN() {
  isFirstIN_ = false;
  clear_has_isFirstIN();
}
inline bool NetProto_AsyncStatistics::isFirstIN() const {
  return isFirstIN_;
}
inline void NetProto_AsyncStatistics::set_isFirstIN(bool value) {
  set_has_isFirstIN();
  isFirstIN_ = value;
}

// optional bool beginAutoInit = 2;
inline bool NetProto_AsyncStatistics::has_beginAutoInit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_beginAutoInit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_AsyncStatistics::clear_has_beginAutoInit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_AsyncStatistics::clear_beginAutoInit() {
  beginAutoInit_ = false;
  clear_has_beginAutoInit();
}
inline bool NetProto_AsyncStatistics::beginAutoInit() const {
  return beginAutoInit_;
}
inline void NetProto_AsyncStatistics::set_beginAutoInit(bool value) {
  set_has_beginAutoInit();
  beginAutoInit_ = value;
}

// optional bool beginDecompress = 3;
inline bool NetProto_AsyncStatistics::has_beginDecompress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_beginDecompress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProto_AsyncStatistics::clear_has_beginDecompress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProto_AsyncStatistics::clear_beginDecompress() {
  beginDecompress_ = false;
  clear_has_beginDecompress();
}
inline bool NetProto_AsyncStatistics::beginDecompress() const {
  return beginDecompress_;
}
inline void NetProto_AsyncStatistics::set_beginDecompress(bool value) {
  set_has_beginDecompress();
  beginDecompress_ = value;
}

// optional int32 decompressCur = 4;
inline bool NetProto_AsyncStatistics::has_decompressCur() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_decompressCur() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProto_AsyncStatistics::clear_has_decompressCur() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProto_AsyncStatistics::clear_decompressCur() {
  decompressCur_ = 0;
  clear_has_decompressCur();
}
inline ::google::protobuf::int32 NetProto_AsyncStatistics::decompressCur() const {
  return decompressCur_;
}
inline void NetProto_AsyncStatistics::set_decompressCur(::google::protobuf::int32 value) {
  set_has_decompressCur();
  decompressCur_ = value;
}

// optional int32 decompressTotal = 5;
inline bool NetProto_AsyncStatistics::has_decompressTotal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_decompressTotal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProto_AsyncStatistics::clear_has_decompressTotal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProto_AsyncStatistics::clear_decompressTotal() {
  decompressTotal_ = 0;
  clear_has_decompressTotal();
}
inline ::google::protobuf::int32 NetProto_AsyncStatistics::decompressTotal() const {
  return decompressTotal_;
}
inline void NetProto_AsyncStatistics::set_decompressTotal(::google::protobuf::int32 value) {
  set_has_decompressTotal();
  decompressTotal_ = value;
}

// optional bool beginInit = 6;
inline bool NetProto_AsyncStatistics::has_beginInit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_beginInit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProto_AsyncStatistics::clear_has_beginInit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProto_AsyncStatistics::clear_beginInit() {
  beginInit_ = false;
  clear_has_beginInit();
}
inline bool NetProto_AsyncStatistics::beginInit() const {
  return beginInit_;
}
inline void NetProto_AsyncStatistics::set_beginInit(bool value) {
  set_has_beginInit();
  beginInit_ = value;
}

// optional bool checkVersion = 7;
inline bool NetProto_AsyncStatistics::has_checkVersion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_checkVersion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetProto_AsyncStatistics::clear_has_checkVersion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetProto_AsyncStatistics::clear_checkVersion() {
  checkVersion_ = false;
  clear_has_checkVersion();
}
inline bool NetProto_AsyncStatistics::checkVersion() const {
  return checkVersion_;
}
inline void NetProto_AsyncStatistics::set_checkVersion(bool value) {
  set_has_checkVersion();
  checkVersion_ = value;
}

// optional bool beginDownload = 8;
inline bool NetProto_AsyncStatistics::has_beginDownload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_beginDownload() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetProto_AsyncStatistics::clear_has_beginDownload() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetProto_AsyncStatistics::clear_beginDownload() {
  beginDownload_ = false;
  clear_has_beginDownload();
}
inline bool NetProto_AsyncStatistics::beginDownload() const {
  return beginDownload_;
}
inline void NetProto_AsyncStatistics::set_beginDownload(bool value) {
  set_has_beginDownload();
  beginDownload_ = value;
}

// optional string md5 = 9;
inline bool NetProto_AsyncStatistics::has_md5() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_md5() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetProto_AsyncStatistics::clear_has_md5() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetProto_AsyncStatistics::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& NetProto_AsyncStatistics::md5() const {
  return *md5_;
}
inline void NetProto_AsyncStatistics::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void NetProto_AsyncStatistics::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void NetProto_AsyncStatistics::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetProto_AsyncStatistics::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* NetProto_AsyncStatistics::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 needDownload = 10;
inline int NetProto_AsyncStatistics::needDownload_size() const {
  return needDownload_.size();
}
inline void NetProto_AsyncStatistics::clear_needDownload() {
  needDownload_.Clear();
}
inline ::google::protobuf::int32 NetProto_AsyncStatistics::needDownload(int index) const {
  return needDownload_.Get(index);
}
inline void NetProto_AsyncStatistics::set_needDownload(int index, ::google::protobuf::int32 value) {
  needDownload_.Set(index, value);
}
inline void NetProto_AsyncStatistics::add_needDownload(::google::protobuf::int32 value) {
  needDownload_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetProto_AsyncStatistics::needDownload() const {
  return needDownload_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetProto_AsyncStatistics::mutable_needDownload() {
  return &needDownload_;
}

// optional int32 downloadFile = 11;
inline bool NetProto_AsyncStatistics::has_downloadFile() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_downloadFile() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NetProto_AsyncStatistics::clear_has_downloadFile() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NetProto_AsyncStatistics::clear_downloadFile() {
  downloadFile_ = 0;
  clear_has_downloadFile();
}
inline ::google::protobuf::int32 NetProto_AsyncStatistics::downloadFile() const {
  return downloadFile_;
}
inline void NetProto_AsyncStatistics::set_downloadFile(::google::protobuf::int32 value) {
  set_has_downloadFile();
  downloadFile_ = value;
}

// optional int32 overDownloadFile = 12;
inline bool NetProto_AsyncStatistics::has_overDownloadFile() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_overDownloadFile() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NetProto_AsyncStatistics::clear_has_overDownloadFile() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NetProto_AsyncStatistics::clear_overDownloadFile() {
  overDownloadFile_ = 0;
  clear_has_overDownloadFile();
}
inline ::google::protobuf::int32 NetProto_AsyncStatistics::overDownloadFile() const {
  return overDownloadFile_;
}
inline void NetProto_AsyncStatistics::set_overDownloadFile(::google::protobuf::int32 value) {
  set_has_overDownloadFile();
  overDownloadFile_ = value;
}

// optional bool endDownload = 13;
inline bool NetProto_AsyncStatistics::has_endDownload() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_endDownload() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NetProto_AsyncStatistics::clear_has_endDownload() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NetProto_AsyncStatistics::clear_endDownload() {
  endDownload_ = false;
  clear_has_endDownload();
}
inline bool NetProto_AsyncStatistics::endDownload() const {
  return endDownload_;
}
inline void NetProto_AsyncStatistics::set_endDownload(bool value) {
  set_has_endDownload();
  endDownload_ = value;
}

// optional bool beginLoad = 14;
inline bool NetProto_AsyncStatistics::has_beginLoad() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_beginLoad() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NetProto_AsyncStatistics::clear_has_beginLoad() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NetProto_AsyncStatistics::clear_beginLoad() {
  beginLoad_ = false;
  clear_has_beginLoad();
}
inline bool NetProto_AsyncStatistics::beginLoad() const {
  return beginLoad_;
}
inline void NetProto_AsyncStatistics::set_beginLoad(bool value) {
  set_has_beginLoad();
  beginLoad_ = value;
}

// optional bool endLoad = 15;
inline bool NetProto_AsyncStatistics::has_endLoad() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NetProto_AsyncStatistics::set_has_endLoad() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NetProto_AsyncStatistics::clear_has_endLoad() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NetProto_AsyncStatistics::clear_endLoad() {
  endLoad_ = false;
  clear_has_endLoad();
}
inline bool NetProto_AsyncStatistics::endLoad() const {
  return endLoad_;
}
inline void NetProto_AsyncStatistics::set_endLoad(bool value) {
  set_has_endLoad();
  endLoad_ = value;
}

// -------------------------------------------------------------------

// NetProto_StatisticsAGSLoadScene

// optional bool after = 1;
inline bool NetProto_StatisticsAGSLoadScene::has_after() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_StatisticsAGSLoadScene::set_has_after() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_StatisticsAGSLoadScene::clear_has_after() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_StatisticsAGSLoadScene::clear_after() {
  after_ = false;
  clear_has_after();
}
inline bool NetProto_StatisticsAGSLoadScene::after() const {
  return after_;
}
inline void NetProto_StatisticsAGSLoadScene::set_after(bool value) {
  set_has_after();
  after_ = value;
}

// -------------------------------------------------------------------

// NetProto_StatisticsAGSLoadNPC

// optional int32 index = 1;
inline bool NetProto_StatisticsAGSLoadNPC::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProto_StatisticsAGSLoadNPC::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProto_StatisticsAGSLoadNPC::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProto_StatisticsAGSLoadNPC::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 NetProto_StatisticsAGSLoadNPC::index() const {
  return index_;
}
inline void NetProto_StatisticsAGSLoadNPC::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional bool after = 2;
inline bool NetProto_StatisticsAGSLoadNPC::has_after() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProto_StatisticsAGSLoadNPC::set_has_after() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProto_StatisticsAGSLoadNPC::clear_has_after() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProto_StatisticsAGSLoadNPC::clear_after() {
  after_ = false;
  clear_has_after();
}
inline bool NetProto_StatisticsAGSLoadNPC::after() const {
  return after_;
}
inline void NetProto_StatisticsAGSLoadNPC::set_after(bool value) {
  set_has_after();
  after_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ClientException_ID>() {
  return ::NetProto_ClientException_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Heartbeat_ID>() {
  return ::NetProto_Heartbeat_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Login_ID>() {
  return ::NetProto_Login_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_LoginResult_ID>() {
  return ::NetProto_LoginResult_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Logout_ID>() {
  return ::NetProto_Logout_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SelectRole_ID>() {
  return ::NetProto_SelectRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_CreateRole_ID>() {
  return ::NetProto_CreateRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ServerTime_ID>() {
  return ::NetProto_ServerTime_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RoleList_ID>() {
  return ::NetProto_RoleList_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DeleteRole_ID>() {
  return ::NetProto_DeleteRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ReLogin_ID>() {
  return ::NetProto_ReLogin_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ReLoginResult_ID>() {
  return ::NetProto_ReLoginResult_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Rank_ID>() {
  return ::NetProto_Rank_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Rank_Type>() {
  return ::NetProto_Rank_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SetUp_ID>() {
  return ::NetProto_SetUp_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Register_ID>() {
  return ::NetProto_Register_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GetKeyGift_ID>() {
  return ::NetProto_GetKeyGift_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StatisticsUIBtn_ID>() {
  return ::NetProto_StatisticsUIBtn_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StatisticsGuide_ID>() {
  return ::NetProto_StatisticsGuide_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_LoginLaterTime_ID>() {
  return ::NetProto_LoginLaterTime_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_TencentBuyGoodsUrl_ID>() {
  return ::NetProto_TencentBuyGoodsUrl_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_LoginURL_ID>() {
  return ::NetProto_LoginURL_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RechargeParam_ID>() {
  return ::NetProto_RechargeParam_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddPlayers_ID>() {
  return ::NetProto_AddPlayers_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_LoadScene_ID>() {
  return ::NetProto_LoadScene_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_LoadScene_Type>() {
  return ::NetProto_LoadScene_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DoLoadScene_ID>() {
  return ::NetProto_DoLoadScene_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EndLoadScene_ID>() {
  return ::NetProto_EndLoadScene_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddNPCs_ID>() {
  return ::NetProto_AddNPCs_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ClearRoom_ID>() {
  return ::NetProto_ClearRoom_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_OpenRoomBox_ID>() {
  return ::NetProto_OpenRoomBox_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_OpenRoomBox_Type>() {
  return ::NetProto_OpenRoomBox_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BeginWaitRoom_ID>() {
  return ::NetProto_BeginWaitRoom_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EndWaitRoom_ID>() {
  return ::NetProto_EndWaitRoom_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GenNPCs_ID>() {
  return ::NetProto_GenNPCs_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ResetEvent_ID>() {
  return ::NetProto_ResetEvent_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_QuickFight_ID>() {
  return ::NetProto_QuickFight_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Win_ID>() {
  return ::NetProto_Win_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Lose_ID>() {
  return ::NetProto_Lose_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Timeout_ID>() {
  return ::NetProto_Timeout_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BeginWaitPVP_ID>() {
  return ::NetProto_BeginWaitPVP_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BeginWaitPVP_Type>() {
  return ::NetProto_BeginWaitPVP_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EndWaitPVP_ID>() {
  return ::NetProto_EndWaitPVP_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EndWaitPVP_Type>() {
  return ::NetProto_EndWaitPVP_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Lottery_ID>() {
  return ::NetProto_Lottery_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GetGift_ID>() {
  return ::NetProto_GetGift_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SingleRecord_ID>() {
  return ::NetProto_SingleRecord_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EndLoadModel_ID>() {
  return ::NetProto_EndLoadModel_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RoomWaitCount_ID>() {
  return ::NetProto_RoomWaitCount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PVPWaitCount_ID>() {
  return ::NetProto_PVPWaitCount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PVPWaitCount_Type>() {
  return ::NetProto_PVPWaitCount_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_CancelWaitRoom_ID>() {
  return ::NetProto_CancelWaitRoom_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_CancelWaitPVP_ID>() {
  return ::NetProto_CancelWaitPVP_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GetRes_ID>() {
  return ::NetProto_GetRes_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Invest_ID>() {
  return ::NetProto_Invest_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_InvestAward_ID>() {
  return ::NetProto_InvestAward_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_InvestAwardInfo_ID>() {
  return ::NetProto_InvestAwardInfo_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SetDayEvent_ID>() {
  return ::NetProto_SetDayEvent_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SetFixedEvent_ID>() {
  return ::NetProto_SetFixedEvent_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Info_ID>() {
  return ::NetProto_Info_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Error_ID>() {
  return ::NetProto_Error_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GodAward_ID>() {
  return ::NetProto_GodAward_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_CreateRoom_ID>() {
  return ::NetProto_CreateRoom_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_JoinRoom_ID>() {
  return ::NetProto_JoinRoom_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_LeaveRoom_ID>() {
  return ::NetProto_LeaveRoom_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DestroyRoom_ID>() {
  return ::NetProto_DestroyRoom_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RoomList_ID>() {
  return ::NetProto_RoomList_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EvictRole_ID>() {
  return ::NetProto_EvictRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_InviteFriend_ID>() {
  return ::NetProto_InviteFriend_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BeginMultiRoom_ID>() {
  return ::NetProto_BeginMultiRoom_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ResetCheckPoint_ID>() {
  return ::NetProto_ResetCheckPoint_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GenPet_ID>() {
  return ::NetProto_GenPet_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_OpenObstacle_ID>() {
  return ::NetProto_OpenObstacle_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RegistDeviceServer_ID>() {
  return ::NetProto_RegistDeviceServer_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StartLoad1_ID>() {
  return ::NetProto_StartLoad1_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EndLoad1_ID>() {
  return ::NetProto_EndLoad1_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StartLoad2_ID>() {
  return ::NetProto_StartLoad2_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EndLoad2_ID>() {
  return ::NetProto_EndLoad2_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BeginFighting_ID>() {
  return ::NetProto_BeginFighting_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DelNPCs_ID>() {
  return ::NetProto_DelNPCs_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_WorldBossCurRank_ID>() {
  return ::NetProto_WorldBossCurRank_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionWarCurRank_ID>() {
  return ::NetProto_FactionWarCurRank_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionWarPrevWinner_ID>() {
  return ::NetProto_FactionWarPrevWinner_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GetMonthCardAward_ID>() {
  return ::NetProto_GetMonthCardAward_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ExchangeGoods_ID>() {
  return ::NetProto_ExchangeGoods_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BuyMonthCard_ID>() {
  return ::NetProto_BuyMonthCard_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UseLuckyCard_ID>() {
  return ::NetProto_UseLuckyCard_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BIActive_ID>() {
  return ::NetProto_BIActive_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Move_ID>() {
  return ::NetProto_Move_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Move_Type>() {
  return ::NetProto_Move_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Wear_ID>() {
  return ::NetProto_Wear_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Unwear_ID>() {
  return ::NetProto_Unwear_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Attack_ID>() {
  return ::NetProto_Attack_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Attack_Type>() {
  return ::NetProto_Attack_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DoAttack_ID>() {
  return ::NetProto_DoAttack_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DoAttack_Type>() {
  return ::NetProto_DoAttack_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SetPos_ID>() {
  return ::NetProto_SetPos_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Die_ID>() {
  return ::NetProto_Die_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Die_Type>() {
  return ::NetProto_Die_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Revive_ID>() {
  return ::NetProto_Revive_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Revive_Type>() {
  return ::NetProto_Revive_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Revive_Way>() {
  return ::NetProto_Revive_Way_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyExp_ID>() {
  return ::NetProto_ModifyExp_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PickItem_ID>() {
  return ::NetProto_PickItem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_LevelUp_ID>() {
  return ::NetProto_LevelUp_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyMoney_ID>() {
  return ::NetProto_ModifyMoney_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GetItem_ID>() {
  return ::NetProto_GetItem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_QueryPlayer_ID>() {
  return ::NetProto_QueryPlayer_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PlayerStatus_ID>() {
  return ::NetProto_PlayerStatus_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PlayerStatus_Status>() {
  return ::NetProto_PlayerStatus_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddFriend_ID>() {
  return ::NetProto_AddFriend_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DelFriend_ID>() {
  return ::NetProto_DelFriend_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyHP_ID>() {
  return ::NetProto_ModifyHP_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyMana_ID>() {
  return ::NetProto_ModifyMana_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyFaction_ID>() {
  return ::NetProto_ModifyFaction_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyFaction_Type>() {
  return ::NetProto_ModifyFaction_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyMaxHP_ID>() {
  return ::NetProto_ModifyMaxHP_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RequestPK_ID>() {
  return ::NetProto_RequestPK_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ApplyPK_ID>() {
  return ::NetProto_ApplyPK_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Strong_ID>() {
  return ::NetProto_Strong_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Strong_Pos>() {
  return ::NetProto_Strong_Pos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Strong_Result>() {
  return ::NetProto_Strong_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ClearStrong_ID>() {
  return ::NetProto_ClearStrong_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ClearStrong_Pos>() {
  return ::NetProto_ClearStrong_Pos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Transform_ID>() {
  return ::NetProto_Transform_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Transform_Type>() {
  return ::NetProto_Transform_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Mount_ID>() {
  return ::NetProto_Mount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Mount_Pos>() {
  return ::NetProto_Mount_Pos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_TalkTo_ID>() {
  return ::NetProto_TalkTo_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Recover_ID>() {
  return ::NetProto_Recover_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddBloodNode_ID>() {
  return ::NetProto_AddBloodNode_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddBloodNode_Type>() {
  return ::NetProto_AddBloodNode_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddBloodEffect_ID>() {
  return ::NetProto_AddBloodEffect_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddBloodEffect_Type>() {
  return ::NetProto_AddBloodEffect_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Explore_ID>() {
  return ::NetProto_Explore_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UnlockBlood_ID>() {
  return ::NetProto_UnlockBlood_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UpdatePos_ID>() {
  return ::NetProto_UpdatePos_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SayHello_ID>() {
  return ::NetProto_SayHello_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_CompleteGuide_ID>() {
  return ::NetProto_CompleteGuide_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Arrange_ID>() {
  return ::NetProto_Arrange_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_IgnorePK_ID>() {
  return ::NetProto_IgnorePK_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyRMB_ID>() {
  return ::NetProto_ModifyRMB_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifySoulJade_ID>() {
  return ::NetProto_ModifySoulJade_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifySoul_ID>() {
  return ::NetProto_ModifySoul_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyHonor_ID>() {
  return ::NetProto_ModifyHonor_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyDurability_ID>() {
  return ::NetProto_ModifyDurability_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifySoulStone_ID>() {
  return ::NetProto_ModifySoulStone_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyPKScore_ID>() {
  return ::NetProto_ModifyPKScore_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DelItem_ID>() {
  return ::NetProto_DelItem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyVIP_ID>() {
  return ::NetProto_ModifyVIP_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RandomGodTarget_ID>() {
  return ::NetProto_RandomGodTarget_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Inspire_ID>() {
  return ::NetProto_Inspire_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Inspire_Type>() {
  return ::NetProto_Inspire_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Inspire_Dest>() {
  return ::NetProto_Inspire_Dest_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RequestGodTarget_ID>() {
  return ::NetProto_RequestGodTarget_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyGodScore_ID>() {
  return ::NetProto_ModifyGodScore_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GodRank_ID>() {
  return ::NetProto_GodRank_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GetFashion_ID>() {
  return ::NetProto_GetFashion_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SyncAtt_ID>() {
  return ::NetProto_SyncAtt_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifySubRMB_ID>() {
  return ::NetProto_ModifySubRMB_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GenEquip_ID>() {
  return ::NetProto_GenEquip_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GenGem_ID>() {
  return ::NetProto_GenGem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GenGem_Way>() {
  return ::NetProto_GenGem_Way_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UnlockHole_ID>() {
  return ::NetProto_UnlockHole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UnlockHole_Pos>() {
  return ::NetProto_UnlockHole_Pos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UnmountGem_ID>() {
  return ::NetProto_UnmountGem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UnmountGem_Pos>() {
  return ::NetProto_UnmountGem_Pos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EnhanceDelta_ID>() {
  return ::NetProto_EnhanceDelta_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EnhanceDelta_Pos>() {
  return ::NetProto_EnhanceDelta_Pos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Enhance_ID>() {
  return ::NetProto_Enhance_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Enhance_Pos>() {
  return ::NetProto_Enhance_Pos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Inherit_ID>() {
  return ::NetProto_Inherit_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Inherit_Pos>() {
  return ::NetProto_Inherit_Pos_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StrongBaseWing_ID>() {
  return ::NetProto_StrongBaseWing_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BuyWing_ID>() {
  return ::NetProto_BuyWing_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_WearWing_ID>() {
  return ::NetProto_WearWing_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GetWing_ID>() {
  return ::NetProto_GetWing_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BuyFashion_ID>() {
  return ::NetProto_BuyFashion_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_MakeFashionHole_ID>() {
  return ::NetProto_MakeFashionHole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FashionInlay_ID>() {
  return ::NetProto_FashionInlay_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FashionUnInlay_ID>() {
  return ::NetProto_FashionUnInlay_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ServerLimitItem_ID>() {
  return ::NetProto_ServerLimitItem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FriendsLove_ID>() {
  return ::NetProto_FriendsLove_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ChangePartner_ID>() {
  return ::NetProto_ChangePartner_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddFansLove_ID>() {
  return ::NetProto_AddFansLove_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyLovePoint_ID>() {
  return ::NetProto_ModifyLovePoint_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BuyDurability_ID>() {
  return ::NetProto_BuyDurability_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_LoginObtRMB_ID>() {
  return ::NetProto_LoginObtRMB_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UnwearWing_ID>() {
  return ::NetProto_UnwearWing_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GetEquip_ID>() {
  return ::NetProto_GetEquip_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ResetCount_ID>() {
  return ::NetProto_ResetCount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ResetCount_Type>() {
  return ::NetProto_ResetCount_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GodPlayer_ID>() {
  return ::NetProto_GodPlayer_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GodRandomPlayer_ID>() {
  return ::NetProto_GodRandomPlayer_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GodRecords_ID>() {
  return ::NetProto_GodRecords_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GodPanel_ID>() {
  return ::NetProto_GodPanel_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SelectGodRole_ID>() {
  return ::NetProto_SelectGodRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SetSpecial_ID>() {
  return ::NetProto_SetSpecial_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ResolveEquips_ID>() {
  return ::NetProto_ResolveEquips_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyPKScoreActive_ID>() {
  return ::NetProto_ModifyPKScoreActive_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyRMBActive_ID>() {
  return ::NetProto_ModifyRMBActive_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DropItem_ID>() {
  return ::NetProto_DropItem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SellGoods_ID>() {
  return ::NetProto_SellGoods_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Luck_ID>() {
  return ::NetProto_Luck_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GrabRedEnvelope_ID>() {
  return ::NetProto_GrabRedEnvelope_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_CatGift_ID>() {
  return ::NetProto_CatGift_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GroupPurchase_ID>() {
  return ::NetProto_GroupPurchase_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Rides_ID>() {
  return ::NetProto_Rides_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RidesTrain_ID>() {
  return ::NetProto_RidesTrain_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GenRides_ID>() {
  return ::NetProto_GenRides_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GodShip_ID>() {
  return ::NetProto_GodShip_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Swallow_ID>() {
  return ::NetProto_Swallow_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GodPackage_ID>() {
  return ::NetProto_GodPackage_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_WearGodShip_ID>() {
  return ::NetProto_WearGodShip_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UnWearGodShip_ID>() {
  return ::NetProto_UnWearGodShip_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ArrangeGodShip_ID>() {
  return ::NetProto_ArrangeGodShip_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RidesUP_ID>() {
  return ::NetProto_RidesUP_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RidesInherit_ID>() {
  return ::NetProto_RidesInherit_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SingleGodShip_ID>() {
  return ::NetProto_SingleGodShip_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RidesLockAtt_ID>() {
  return ::NetProto_RidesLockAtt_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RidesConfirmTrain_ID>() {
  return ::NetProto_RidesConfirmTrain_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RidesUnLockAtt_ID>() {
  return ::NetProto_RidesUnLockAtt_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddStatus_ID>() {
  return ::NetProto_AddStatus_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddStatus_Type>() {
  return ::NetProto_AddStatus_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Hit_ID>() {
  return ::NetProto_Hit_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Hit_Type>() {
  return ::NetProto_Hit_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StatusEffect_ID>() {
  return ::NetProto_StatusEffect_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StatusEffect_Type>() {
  return ::NetProto_StatusEffect_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StatusEffect_Effect>() {
  return ::NetProto_StatusEffect_Effect_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StaticOver_ID>() {
  return ::NetProto_StaticOver_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StaticOver_Type>() {
  return ::NetProto_StaticOver_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Standup_ID>() {
  return ::NetProto_Standup_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Standup_Type>() {
  return ::NetProto_Standup_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SkillLevelUp_ID>() {
  return ::NetProto_SkillLevelUp_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ClearSkill_ID>() {
  return ::NetProto_ClearSkill_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DestroySkill_ID>() {
  return ::NetProto_DestroySkill_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddGoods_ID>() {
  return ::NetProto_AddGoods_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddGoods_Type>() {
  return ::NetProto_AddGoods_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddEquipments_ID>() {
  return ::NetProto_AddEquipments_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddEquipments_Type>() {
  return ::NetProto_AddEquipments_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ShiftItem_ID>() {
  return ::NetProto_ShiftItem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ShiftItem_Type>() {
  return ::NetProto_ShiftItem_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_QueryItemInfo_ID>() {
  return ::NetProto_QueryItemInfo_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_QueryItemInfo_Type>() {
  return ::NetProto_QueryItemInfo_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BuyItem_ID>() {
  return ::NetProto_BuyItem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SellItem_ID>() {
  return ::NetProto_SellItem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Repair_ID>() {
  return ::NetProto_Repair_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UseGoods_ID>() {
  return ::NetProto_UseGoods_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UnlockPackage_ID>() {
  return ::NetProto_UnlockPackage_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RecoverDurability_ID>() {
  return ::NetProto_RecoverDurability_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddDesignation_ID>() {
  return ::NetProto_AddDesignation_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DelDesignation_ID>() {
  return ::NetProto_DelDesignation_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ShowDesignation_ID>() {
  return ::NetProto_ShowDesignation_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UnshowDesignation_ID>() {
  return ::NetProto_UnshowDesignation_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Recharge_ID>() {
  return ::NetProto_Recharge_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BusinessInfo_ID>() {
  return ::NetProto_BusinessInfo_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_TransformWar_ID>() {
  return ::NetProto_TransformWar_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_TransformLevelUp_ID>() {
  return ::NetProto_TransformLevelUp_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_TransformActive_ID>() {
  return ::NetProto_TransformActive_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Reservation_ID>() {
  return ::NetProto_Reservation_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ReservationList_ID>() {
  return ::NetProto_ReservationList_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Talk_ID>() {
  return ::NetProto_Talk_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Answer_ID>() {
  return ::NetProto_Answer_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_RequestFunc_ID>() {
  return ::NetProto_RequestFunc_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ReplyFunc_ID>() {
  return ::NetProto_ReplyFunc_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ApplyMission_ID>() {
  return ::NetProto_ApplyMission_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_CompleteMission_ID>() {
  return ::NetProto_CompleteMission_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GiveUpMission_ID>() {
  return ::NetProto_GiveUpMission_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Chat_ID>() {
  return ::NetProto_Chat_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Chat_Channel>() {
  return ::NetProto_Chat_Channel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Chat_Type>() {
  return ::NetProto_Chat_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Message_ID>() {
  return ::NetProto_Message_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_SendMail_ID>() {
  return ::NetProto_SendMail_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GetMailItem_ID>() {
  return ::NetProto_GetMailItem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ReadMail_ID>() {
  return ::NetProto_ReadMail_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DelMail_ID>() {
  return ::NetProto_DelMail_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMLogin_ID>() {
  return ::NetProto_GMLogin_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMLogin_OP>() {
  return ::NetProto_GMLogin_OP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMOrder_ID>() {
  return ::NetProto_GMOrder_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMOrder_Type>() {
  return ::NetProto_GMOrder_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMOnlinePlayers_ID>() {
  return ::NetProto_GMOnlinePlayers_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMChat_ID>() {
  return ::NetProto_GMChat_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMServerMgr_ID>() {
  return ::NetProto_GMServerMgr_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMPlayerQuery_ID>() {
  return ::NetProto_GMPlayerQuery_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMForbid_ID>() {
  return ::NetProto_GMForbid_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMForbid_Select>() {
  return ::NetProto_GMForbid_Select_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMNotice_GMOP>() {
  return ::NetProto_GMNotice_GMOP_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMRequest_ID>() {
  return ::NetProto_GMRequest_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMRequest_Select>() {
  return ::NetProto_GMRequest_Select_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMShutDownServer_ID>() {
  return ::NetProto_GMShutDownServer_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMChatRecords_ID>() {
  return ::NetProto_GMChatRecords_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMRegistrCount_ID>() {
  return ::NetProto_GMRegistrCount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMRoleCount_ID>() {
  return ::NetProto_GMRoleCount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMLevelStatistics_ID>() {
  return ::NetProto_GMLevelStatistics_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMRankStatistics_ID>() {
  return ::NetProto_GMRankStatistics_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMOpenGuide_ID>() {
  return ::NetProto_GMOpenGuide_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMNoticeMgr_ID>() {
  return ::NetProto_GMNoticeMgr_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMRegister_ID>() {
  return ::NetProto_GMRegister_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMShutDownMessage_ID>() {
  return ::NetProto_GMShutDownMessage_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMOpenMessage_ID>() {
  return ::NetProto_GMOpenMessage_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMModifyVIP_ID>() {
  return ::NetProto_GMModifyVIP_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMAddExchange_ID>() {
  return ::NetProto_GMAddExchange_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMQueryFaction_ID>() {
  return ::NetProto_GMQueryFaction_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMChangeFactionMem_ID>() {
  return ::NetProto_GMChangeFactionMem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMAddRekooRole_ID>() {
  return ::NetProto_GMAddRekooRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_GMLoginInfo_ID>() {
  return ::NetProto_GMLoginInfo_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ObtainPet_ID>() {
  return ::NetProto_ObtainPet_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PetFighting_ID>() {
  return ::NetProto_PetFighting_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PetRest_ID>() {
  return ::NetProto_PetRest_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PetAttach_ID>() {
  return ::NetProto_PetAttach_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PetLevelUp_ID>() {
  return ::NetProto_PetLevelUp_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PetLearnSkill_ID>() {
  return ::NetProto_PetLearnSkill_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PetInherit_ID>() {
  return ::NetProto_PetInherit_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PetAdvance_ID>() {
  return ::NetProto_PetAdvance_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PetPsychicsLevelUp_ID>() {
  return ::NetProto_PetPsychicsLevelUp_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ActiveGemRequest_ID>() {
  return ::NetProto_ActiveGemRequest_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ActiveDoubleGem_ID>() {
  return ::NetProto_ActiveDoubleGem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ActiveUpGradeGem_ID>() {
  return ::NetProto_ActiveUpGradeGem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ActiveGetGem_ID>() {
  return ::NetProto_ActiveGetGem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ActiveFight_ID>() {
  return ::NetProto_ActiveFight_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ActiveStrongeSolider_ID>() {
  return ::NetProto_ActiveStrongeSolider_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_EnterPlayOff_ID>() {
  return ::NetProto_EnterPlayOff_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PlayOffInfo_ID>() {
  return ::NetProto_PlayOffInfo_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_PreparePlayOff_ID>() {
  return ::NetProto_PreparePlayOff_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Treasure_ID>() {
  return ::NetProto_Treasure_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Hire_ID>() {
  return ::NetProto_Hire_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_MoneyTree_ID>() {
  return ::NetProto_MoneyTree_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_TreasureBox_ID>() {
  return ::NetProto_TreasureBox_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FlyPlan_ID>() {
  return ::NetProto_FlyPlan_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_BlessCome_ID>() {
  return ::NetProto_BlessCome_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ModifyBlessScore_ID>() {
  return ::NetProto_ModifyBlessScore_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_TopUpObtRMB_ID>() {
  return ::NetProto_TopUpObtRMB_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_ServerOpenTime_ID>() {
  return ::NetProto_ServerOpenTime_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_InvateCode_ID>() {
  return ::NetProto_InvateCode_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_UpdateInvateCount_ID>() {
  return ::NetProto_UpdateInvateCount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_CreateFaction_ID>() {
  return ::NetProto_CreateFaction_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DelFaction_ID>() {
  return ::NetProto_DelFaction_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Donate_ID>() {
  return ::NetProto_Donate_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionNotice_ID>() {
  return ::NetProto_FactionNotice_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Designate_ID>() {
  return ::NetProto_Designate_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AddMem_ID>() {
  return ::NetProto_AddMem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_DelMem_ID>() {
  return ::NetProto_DelMem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Applicant_ID>() {
  return ::NetProto_Applicant_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_Guardian_ID>() {
  return ::NetProto_Guardian_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionInfo_ID>() {
  return ::NetProto_FactionInfo_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionMem_ID>() {
  return ::NetProto_FactionMem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionChangeMem_ID>() {
  return ::NetProto_FactionChangeMem_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionGuardian_ID>() {
  return ::NetProto_FactionGuardian_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionApplicant_ID>() {
  return ::NetProto_FactionApplicant_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionAllApplicant_ID>() {
  return ::NetProto_FactionAllApplicant_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_FactionList_ID>() {
  return ::NetProto_FactionList_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AcceptToFaction_ID>() {
  return ::NetProto_AcceptToFaction_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_AsyncStatistics_ID>() {
  return ::NetProto_AsyncStatistics_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StatisticsAGSLoadScene_ID>() {
  return ::NetProto_StatisticsAGSLoadScene_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetProto_StatisticsAGSLoadNPC_ID>() {
  return ::NetProto_StatisticsAGSLoadNPC_ID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NetProto_2eproto__INCLUDED

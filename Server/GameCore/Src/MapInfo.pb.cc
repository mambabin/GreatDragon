// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MapInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NPCSceneUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCSceneUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* JumpPointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JumpPointInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JumpTableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JumpTableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCPass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCPass_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PathNode_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObstacleTriggerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleTriggerInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObstacleTriggerInfo_OpenType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapUnit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapUnit_SceneType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapInfo_MapType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapInfo_AwardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MapInfo_OpenNPCType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockInfo_BlockType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MapInfo_2eproto() {
  protobuf_AddDesc_MapInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MapInfo.proto");
  GOOGLE_CHECK(file != NULL);
  NPCSceneUnit_descriptor_ = file->message_type(0);
  static const int NPCSceneUnit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSceneUnit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSceneUnit, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSceneUnit, resID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSceneUnit, rotation_),
  };
  NPCSceneUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCSceneUnit_descriptor_,
      NPCSceneUnit::default_instance_,
      NPCSceneUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSceneUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSceneUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCSceneUnit));
  JumpPointInfo_descriptor_ = file->message_type(1);
  static const int JumpPointInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpPointInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpPointInfo, enterCoord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpPointInfo, nextMap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpPointInfo, nextPoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpPointInfo, coord_),
  };
  JumpPointInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JumpPointInfo_descriptor_,
      JumpPointInfo::default_instance_,
      JumpPointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpPointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpPointInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JumpPointInfo));
  JumpTableInfo_descriptor_ = file->message_type(2);
  static const int JumpTableInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpTableInfo, table_),
  };
  JumpTableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JumpTableInfo_descriptor_,
      JumpTableInfo::default_instance_,
      JumpTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpTableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpTableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JumpTableInfo));
  AudioItemInfo_descriptor_ = file->message_type(3);
  static const int AudioItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, audioID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, maxDistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, minInterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, maxInterval_),
  };
  AudioItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioItemInfo_descriptor_,
      AudioItemInfo::default_instance_,
      AudioItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioItemInfo));
  NPCPass_descriptor_ = file->message_type(4);
  static const int NPCPass_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCPass, npcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCPass, delay_),
  };
  NPCPass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCPass_descriptor_,
      NPCPass::default_instance_,
      NPCPass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCPass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCPass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCPass));
  NPCGroup_descriptor_ = file->message_type(5);
  static const int NPCGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCGroup, pass_),
  };
  NPCGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCGroup_descriptor_,
      NPCGroup::default_instance_,
      NPCGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCGroup));
  PathNode_descriptor_ = file->message_type(6);
  static const int PathNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNode, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNode, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNode, pos_),
  };
  PathNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathNode_descriptor_,
      PathNode::default_instance_,
      PathNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathNode));
  PathNode_Type_descriptor_ = PathNode_descriptor_->enum_type(0);
  ObstacleTriggerInfo_descriptor_ = file->message_type(7);
  static const int ObstacleTriggerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleTriggerInfo, openType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleTriggerInfo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleTriggerInfo, id_),
  };
  ObstacleTriggerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObstacleTriggerInfo_descriptor_,
      ObstacleTriggerInfo::default_instance_,
      ObstacleTriggerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleTriggerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleTriggerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObstacleTriggerInfo));
  ObstacleTriggerInfo_OpenType_descriptor_ = ObstacleTriggerInfo_descriptor_->enum_type(0);
  MapUnit_descriptor_ = file->message_type(8);
  static const int MapUnit_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, npcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, jumpTable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, audioItems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, resID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, npcGroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, sceneType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, protectNPC_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, targetNode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, obstacleTriggerInfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, friendlyNpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, freeCoords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, enemyTargetNode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, heroNPC_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, ourRecoverHPNode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, enemyRecoverHPNode_),
  };
  MapUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapUnit_descriptor_,
      MapUnit::default_instance_,
      MapUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapUnit));
  MapUnit_SceneType_descriptor_ = MapUnit_descriptor_->enum_type(0);
  MapInfo_descriptor_ = file->message_type(9);
  static const int MapInfo_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, mapType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, requireMission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, sceneAudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, freeBox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, gemBox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, requiredPower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, awardType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, showBox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, smallSoulJade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, soulStone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, child_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, sweepMoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, elite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, requiredLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, openNpcType_),
  };
  MapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapInfo_descriptor_,
      MapInfo::default_instance_,
      MapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapInfo));
  MapInfo_MapType_descriptor_ = MapInfo_descriptor_->enum_type(0);
  MapInfo_AwardType_descriptor_ = MapInfo_descriptor_->enum_type(1);
  MapInfo_OpenNPCType_descriptor_ = MapInfo_descriptor_->enum_type(2);
  AllMapInfo_descriptor_ = file->message_type(10);
  static const int AllMapInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMapInfo, mapInfo_),
  };
  AllMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllMapInfo_descriptor_,
      AllMapInfo::default_instance_,
      AllMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllMapInfo));
  BlockInfo_descriptor_ = file->message_type(11);
  static const int BlockInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, blockTypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, realLength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, realWidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, logicLength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, logicWidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, obstacles_),
  };
  BlockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockInfo_descriptor_,
      BlockInfo::default_instance_,
      BlockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockInfo));
  BlockInfo_BlockType_descriptor_ = BlockInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MapInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCSceneUnit_descriptor_, &NPCSceneUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JumpPointInfo_descriptor_, &JumpPointInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JumpTableInfo_descriptor_, &JumpTableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioItemInfo_descriptor_, &AudioItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCPass_descriptor_, &NPCPass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCGroup_descriptor_, &NPCGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathNode_descriptor_, &PathNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObstacleTriggerInfo_descriptor_, &ObstacleTriggerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapUnit_descriptor_, &MapUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapInfo_descriptor_, &MapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllMapInfo_descriptor_, &AllMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockInfo_descriptor_, &BlockInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MapInfo_2eproto() {
  delete NPCSceneUnit::default_instance_;
  delete NPCSceneUnit_reflection_;
  delete JumpPointInfo::default_instance_;
  delete JumpPointInfo_reflection_;
  delete JumpTableInfo::default_instance_;
  delete JumpTableInfo_reflection_;
  delete AudioItemInfo::default_instance_;
  delete AudioItemInfo_reflection_;
  delete NPCPass::default_instance_;
  delete NPCPass_reflection_;
  delete NPCGroup::default_instance_;
  delete NPCGroup_reflection_;
  delete PathNode::default_instance_;
  delete PathNode_reflection_;
  delete ObstacleTriggerInfo::default_instance_;
  delete ObstacleTriggerInfo_reflection_;
  delete MapUnit::default_instance_;
  delete MapUnit_reflection_;
  delete MapInfo::default_instance_;
  delete MapInfo_reflection_;
  delete AllMapInfo::default_instance_;
  delete AllMapInfo_reflection_;
  delete BlockInfo::default_instance_;
  delete BlockInfo_reflection_;
}

void protobuf_AddDesc_MapInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Math_2eproto();
  ::protobuf_AddDesc_BoxInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMapInfo.proto\032\nMath.proto\032\rBoxInfo.pro"
    "to\"f\n\014NPCSceneUnit\022\n\n\002id\030\001 \001(\005\022\033\n\005coord\030"
    "\002 \001(\0132\014.PB_Vector2i\022\r\n\005resID\030\003 \001(\005\022\036\n\010ro"
    "tation\030\004 \001(\0132\014.PB_Vector3f\"~\n\rJumpPointI"
    "nfo\022\n\n\002id\030\001 \001(\005\022 \n\nenterCoord\030\002 \001(\0132\014.PB"
    "_Vector2i\022\017\n\007nextMap\030\003 \001(\005\022\021\n\tnextPoint\030"
    "\004 \001(\005\022\033\n\005coord\030\005 \001(\0132\014.PB_Vector2i\".\n\rJu"
    "mpTableInfo\022\035\n\005table\030\001 \003(\0132\016.JumpPointIn"
    "fo\"\256\001\n\rAudioItemInfo\022\017\n\007audioID\030\001 \001(\t\022\016\n"
    "\006volume\030\002 \001(\002\022\023\n\013maxDistance\030\003 \001(\002\022\016\n\006nu"
    "mber\030\004 \001(\005\022\023\n\013minInterval\030\005 \001(\005\022\r\n\005delay"
    "\030\006 \001(\005\022\036\n\010position\030\007 \001(\0132\014.PB_Vector3f\022\023"
    "\n\013maxInterval\030\010 \001(\005\"&\n\007NPCPass\022\014\n\004npcs\030\001"
    " \003(\005\022\r\n\005delay\030\002 \001(\005\"\"\n\010NPCGroup\022\026\n\004pass\030"
    "\001 \003(\0132\010.NPCPass\"\202\001\n\010PathNode\022\n\n\002id\030\001 \001(\005"
    "\022\034\n\004type\030\002 \001(\0162\016.PathNode.Type\022\014\n\004next\030\003"
    " \003(\005\022\031\n\003pos\030\004 \001(\0132\014.PB_Vector3f\"#\n\004Type\022"
    "\010\n\004PATH\020\000\022\007\n\003NPC\020\001\022\010\n\004DOOR\020\002\"\202\001\n\023Obstacl"
    "eTriggerInfo\022\020\n\010openType\030\001 \001(\005\022\r\n\005param\030"
    "\002 \003(\005\022\n\n\002id\030\003 \001(\005\">\n\010OpenType\022\010\n\004NONE\020\000\022"
    "\022\n\016KILL_GROUP_NPC\020\001\022\024\n\020SHOW_UI_PROGRESS\020"
    "\002\"\224\004\n\007MapUnit\022\n\n\002id\030\001 \001(\005\022\033\n\004npcs\030\002 \003(\0132"
    "\r.NPCSceneUnit\022!\n\tjumpTable\030\003 \001(\0132\016.Jump"
    "TableInfo\022\"\n\naudioItems\030\004 \003(\0132\016.AudioIte"
    "mInfo\022\r\n\005resID\030\005 \001(\005\022\034\n\tnpcGroups\030\006 \003(\0132"
    "\t.NPCGroup\022\020\n\004boss\030\007 \001(\005:\002-1\022%\n\tsceneTyp"
    "e\030\010 \001(\0162\022.MapUnit.SceneType\022\027\n\004path\030\t \003("
    "\0132\t.PathNode\022\026\n\nprotectNPC\030\n \001(\005:\002-1\022\026\n\n"
    "targetNode\030\013 \001(\005:\002-1\0221\n\023obstacleTriggerI"
    "nfo\030\014 \003(\0132\024.ObstacleTriggerInfo\022\023\n\013frien"
    "dlyNpc\030\r \003(\005\022 \n\nfreeCoords\030\016 \003(\0132\014.PB_Ve"
    "ctor3f\022\027\n\017enemyTargetNode\030\017 \001(\005\022\017\n\007heroN"
    "PC\030\020 \003(\005\022\030\n\020ourRecoverHPNode\030\021 \003(\005\022\032\n\022en"
    "emyRecoverHPNode\030\022 \003(\005\" \n\tSceneType\022\010\n\004L"
    "AND\020\000\022\t\n\005OCEAN\020\001\"\261\005\n\007MapInfo\022!\n\007mapType\030"
    "\001 \001(\0162\020.MapInfo.MapType\022\n\n\002id\030\002 \001(\005\022\014\n\004n"
    "ame\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t\022\026\n\016requireMissio"
    "n\030\005 \001(\005\022\022\n\nsceneAudio\030\006 \003(\005\022\017\n\007freeBox\030\007"
    " \001(\005\022\016\n\006gemBox\030\010 \001(\005\022\013\n\003exp\030\t \001(\005\022\r\n\005hon"
    "or\030\n \001(\005\022\025\n\rrequiredPower\030\013 \001(\005\022\022\n\ndurab"
    "ility\030\014 \001(\005\022%\n\tawardType\030\r \001(\0162\022.MapInfo"
    ".AwardType\022\r\n\005money\030\016 \001(\005\022\013\n\003rmb\030\017 \001(\005\022\014"
    "\n\004soul\030\020 \001(\005\022\017\n\007showBox\030\021 \001(\005\022\025\n\rsmallSo"
    "ulJade\030\022 \001(\005\022\021\n\tsoulStone\030\023 \001(\005\022\016\n\006paren"
    "t\030\024 \001(\005\022\r\n\005child\030\025 \001(\005\022\022\n\nsweepMoney\030\026 \001"
    "(\005\022\r\n\005elite\030\027 \001(\010\022\025\n\rrequiredLevel\030\030 \001(\005"
    "\022)\n\013openNpcType\030\031 \001(\0162\024.MapInfo.OpenNPCT"
    "ype\"m\n\007MapType\022\t\n\005PEACE\020\000\022\n\n\006SINGLE\020\001\022\010\n"
    "\004ROOM\020\002\022\007\n\003PVP\020\003\022\r\n\tONLY_ROOM\020\004\022\014\n\010PRACT"
    "ICE\020\005\022\010\n\004HELL\020\006\022\021\n\rBATTLE_SINGLE\020\007\" \n\tAw"
    "ardType\022\t\n\005FINAL\020\000\022\010\n\004PASS\020\001\"&\n\013OpenNPCT"
    "ype\022\n\n\006NORMAL\020\000\022\013\n\007TRIGGER\020\001\"\'\n\nAllMapIn"
    "fo\022\031\n\007mapInfo\030\001 \003(\0132\010.MapInfo\"\346\001\n\tBlockI"
    "nfo\022\n\n\002id\030\001 \001(\005\022(\n\nblockTypes\030\002 \003(\0162\024.Bl"
    "ockInfo.BlockType\022\022\n\nrealLength\030\003 \001(\005\022\021\n"
    "\trealWidth\030\004 \001(\005\022\023\n\013logicLength\030\005 \001(\005\022\022\n"
    "\nlogicWidth\030\006 \001(\005\022\021\n\tobstacles\030\007 \003(\005\"@\n\t"
    "BlockType\022\013\n\007DEFAULT\020\000\022\016\n\nUNWALKABLE\020\001\022\026"
    "\n\022UNWALKABLE_UNSKILL\020\002", 2342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MapInfo.proto", &protobuf_RegisterTypes);
  NPCSceneUnit::default_instance_ = new NPCSceneUnit();
  JumpPointInfo::default_instance_ = new JumpPointInfo();
  JumpTableInfo::default_instance_ = new JumpTableInfo();
  AudioItemInfo::default_instance_ = new AudioItemInfo();
  NPCPass::default_instance_ = new NPCPass();
  NPCGroup::default_instance_ = new NPCGroup();
  PathNode::default_instance_ = new PathNode();
  ObstacleTriggerInfo::default_instance_ = new ObstacleTriggerInfo();
  MapUnit::default_instance_ = new MapUnit();
  MapInfo::default_instance_ = new MapInfo();
  AllMapInfo::default_instance_ = new AllMapInfo();
  BlockInfo::default_instance_ = new BlockInfo();
  NPCSceneUnit::default_instance_->InitAsDefaultInstance();
  JumpPointInfo::default_instance_->InitAsDefaultInstance();
  JumpTableInfo::default_instance_->InitAsDefaultInstance();
  AudioItemInfo::default_instance_->InitAsDefaultInstance();
  NPCPass::default_instance_->InitAsDefaultInstance();
  NPCGroup::default_instance_->InitAsDefaultInstance();
  PathNode::default_instance_->InitAsDefaultInstance();
  ObstacleTriggerInfo::default_instance_->InitAsDefaultInstance();
  MapUnit::default_instance_->InitAsDefaultInstance();
  MapInfo::default_instance_->InitAsDefaultInstance();
  AllMapInfo::default_instance_->InitAsDefaultInstance();
  BlockInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MapInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MapInfo_2eproto {
  StaticDescriptorInitializer_MapInfo_2eproto() {
    protobuf_AddDesc_MapInfo_2eproto();
  }
} static_descriptor_initializer_MapInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int NPCSceneUnit::kIdFieldNumber;
const int NPCSceneUnit::kCoordFieldNumber;
const int NPCSceneUnit::kResIDFieldNumber;
const int NPCSceneUnit::kRotationFieldNumber;
#endif  // !_MSC_VER

NPCSceneUnit::NPCSceneUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NPCSceneUnit::InitAsDefaultInstance() {
  coord_ = const_cast< ::PB_Vector2i*>(&::PB_Vector2i::default_instance());
  rotation_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

NPCSceneUnit::NPCSceneUnit(const NPCSceneUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NPCSceneUnit::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  coord_ = NULL;
  resID_ = 0;
  rotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCSceneUnit::~NPCSceneUnit() {
  SharedDtor();
}

void NPCSceneUnit::SharedDtor() {
  if (this != default_instance_) {
    delete coord_;
    delete rotation_;
  }
}

void NPCSceneUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCSceneUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCSceneUnit_descriptor_;
}

const NPCSceneUnit& NPCSceneUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

NPCSceneUnit* NPCSceneUnit::default_instance_ = NULL;

NPCSceneUnit* NPCSceneUnit::New() const {
  return new NPCSceneUnit;
}

void NPCSceneUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_coord()) {
      if (coord_ != NULL) coord_->::PB_Vector2i::Clear();
    }
    resID_ = 0;
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::PB_Vector3f::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCSceneUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_coord;
        break;
      }
      
      // optional .PB_Vector2i coord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resID;
        break;
      }
      
      // optional int32 resID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resID_)));
          set_has_resID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rotation;
        break;
      }
      
      // optional .PB_Vector3f rotation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NPCSceneUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .PB_Vector2i coord = 2;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->coord(), output);
  }
  
  // optional int32 resID = 3;
  if (has_resID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resID(), output);
  }
  
  // optional .PB_Vector3f rotation = 4;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rotation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NPCSceneUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .PB_Vector2i coord = 2;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->coord(), target);
  }
  
  // optional int32 resID = 3;
  if (has_resID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resID(), target);
  }
  
  // optional .PB_Vector3f rotation = 4;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rotation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NPCSceneUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PB_Vector2i coord = 2;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }
    
    // optional int32 resID = 3;
    if (has_resID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resID());
    }
    
    // optional .PB_Vector3f rotation = 4;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCSceneUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCSceneUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCSceneUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCSceneUnit::MergeFrom(const NPCSceneUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_coord()) {
      mutable_coord()->::PB_Vector2i::MergeFrom(from.coord());
    }
    if (from.has_resID()) {
      set_resID(from.resID());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::PB_Vector3f::MergeFrom(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCSceneUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCSceneUnit::CopyFrom(const NPCSceneUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCSceneUnit::IsInitialized() const {
  
  return true;
}

void NPCSceneUnit::Swap(NPCSceneUnit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(coord_, other->coord_);
    std::swap(resID_, other->resID_);
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCSceneUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCSceneUnit_descriptor_;
  metadata.reflection = NPCSceneUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JumpPointInfo::kIdFieldNumber;
const int JumpPointInfo::kEnterCoordFieldNumber;
const int JumpPointInfo::kNextMapFieldNumber;
const int JumpPointInfo::kNextPointFieldNumber;
const int JumpPointInfo::kCoordFieldNumber;
#endif  // !_MSC_VER

JumpPointInfo::JumpPointInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JumpPointInfo::InitAsDefaultInstance() {
  enterCoord_ = const_cast< ::PB_Vector2i*>(&::PB_Vector2i::default_instance());
  coord_ = const_cast< ::PB_Vector2i*>(&::PB_Vector2i::default_instance());
}

JumpPointInfo::JumpPointInfo(const JumpPointInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JumpPointInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  enterCoord_ = NULL;
  nextMap_ = 0;
  nextPoint_ = 0;
  coord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JumpPointInfo::~JumpPointInfo() {
  SharedDtor();
}

void JumpPointInfo::SharedDtor() {
  if (this != default_instance_) {
    delete enterCoord_;
    delete coord_;
  }
}

void JumpPointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpPointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JumpPointInfo_descriptor_;
}

const JumpPointInfo& JumpPointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

JumpPointInfo* JumpPointInfo::default_instance_ = NULL;

JumpPointInfo* JumpPointInfo::New() const {
  return new JumpPointInfo;
}

void JumpPointInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_enterCoord()) {
      if (enterCoord_ != NULL) enterCoord_->::PB_Vector2i::Clear();
    }
    nextMap_ = 0;
    nextPoint_ = 0;
    if (has_coord()) {
      if (coord_ != NULL) coord_->::PB_Vector2i::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JumpPointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enterCoord;
        break;
      }
      
      // optional .PB_Vector2i enterCoord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enterCoord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterCoord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextMap;
        break;
      }
      
      // optional int32 nextMap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextMap_)));
          set_has_nextMap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nextPoint;
        break;
      }
      
      // optional int32 nextPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextPoint_)));
          set_has_nextPoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_coord;
        break;
      }
      
      // optional .PB_Vector2i coord = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JumpPointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .PB_Vector2i enterCoord = 2;
  if (has_enterCoord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enterCoord(), output);
  }
  
  // optional int32 nextMap = 3;
  if (has_nextMap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nextMap(), output);
  }
  
  // optional int32 nextPoint = 4;
  if (has_nextPoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nextPoint(), output);
  }
  
  // optional .PB_Vector2i coord = 5;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->coord(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JumpPointInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .PB_Vector2i enterCoord = 2;
  if (has_enterCoord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enterCoord(), target);
  }
  
  // optional int32 nextMap = 3;
  if (has_nextMap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nextMap(), target);
  }
  
  // optional int32 nextPoint = 4;
  if (has_nextPoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nextPoint(), target);
  }
  
  // optional .PB_Vector2i coord = 5;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->coord(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JumpPointInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PB_Vector2i enterCoord = 2;
    if (has_enterCoord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterCoord());
    }
    
    // optional int32 nextMap = 3;
    if (has_nextMap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextMap());
    }
    
    // optional int32 nextPoint = 4;
    if (has_nextPoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextPoint());
    }
    
    // optional .PB_Vector2i coord = 5;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coord());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpPointInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JumpPointInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JumpPointInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JumpPointInfo::MergeFrom(const JumpPointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_enterCoord()) {
      mutable_enterCoord()->::PB_Vector2i::MergeFrom(from.enterCoord());
    }
    if (from.has_nextMap()) {
      set_nextMap(from.nextMap());
    }
    if (from.has_nextPoint()) {
      set_nextPoint(from.nextPoint());
    }
    if (from.has_coord()) {
      mutable_coord()->::PB_Vector2i::MergeFrom(from.coord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JumpPointInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpPointInfo::CopyFrom(const JumpPointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpPointInfo::IsInitialized() const {
  
  return true;
}

void JumpPointInfo::Swap(JumpPointInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(enterCoord_, other->enterCoord_);
    std::swap(nextMap_, other->nextMap_);
    std::swap(nextPoint_, other->nextPoint_);
    std::swap(coord_, other->coord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JumpPointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JumpPointInfo_descriptor_;
  metadata.reflection = JumpPointInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JumpTableInfo::kTableFieldNumber;
#endif  // !_MSC_VER

JumpTableInfo::JumpTableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JumpTableInfo::InitAsDefaultInstance() {
}

JumpTableInfo::JumpTableInfo(const JumpTableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JumpTableInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JumpTableInfo::~JumpTableInfo() {
  SharedDtor();
}

void JumpTableInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JumpTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JumpTableInfo_descriptor_;
}

const JumpTableInfo& JumpTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

JumpTableInfo* JumpTableInfo::default_instance_ = NULL;

JumpTableInfo* JumpTableInfo::New() const {
  return new JumpTableInfo;
}

void JumpTableInfo::Clear() {
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JumpTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .JumpPointInfo table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JumpTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .JumpPointInfo table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JumpTableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .JumpPointInfo table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JumpTableInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .JumpPointInfo table = 1;
  total_size += 1 * this->table_size();
  for (int i = 0; i < this->table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JumpTableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JumpTableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JumpTableInfo::MergeFrom(const JumpTableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_.MergeFrom(from.table_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JumpTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpTableInfo::CopyFrom(const JumpTableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpTableInfo::IsInitialized() const {
  
  return true;
}

void JumpTableInfo::Swap(JumpTableInfo* other) {
  if (other != this) {
    table_.Swap(&other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JumpTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JumpTableInfo_descriptor_;
  metadata.reflection = JumpTableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioItemInfo::kAudioIDFieldNumber;
const int AudioItemInfo::kVolumeFieldNumber;
const int AudioItemInfo::kMaxDistanceFieldNumber;
const int AudioItemInfo::kNumberFieldNumber;
const int AudioItemInfo::kMinIntervalFieldNumber;
const int AudioItemInfo::kDelayFieldNumber;
const int AudioItemInfo::kPositionFieldNumber;
const int AudioItemInfo::kMaxIntervalFieldNumber;
#endif  // !_MSC_VER

AudioItemInfo::AudioItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AudioItemInfo::InitAsDefaultInstance() {
  position_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

AudioItemInfo::AudioItemInfo(const AudioItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AudioItemInfo::SharedCtor() {
  _cached_size_ = 0;
  audioID_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = 0;
  maxDistance_ = 0;
  number_ = 0;
  minInterval_ = 0;
  delay_ = 0;
  position_ = NULL;
  maxInterval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioItemInfo::~AudioItemInfo() {
  SharedDtor();
}

void AudioItemInfo::SharedDtor() {
  if (audioID_ != &::google::protobuf::internal::kEmptyString) {
    delete audioID_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void AudioItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioItemInfo_descriptor_;
}

const AudioItemInfo& AudioItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

AudioItemInfo* AudioItemInfo::default_instance_ = NULL;

AudioItemInfo* AudioItemInfo::New() const {
  return new AudioItemInfo;
}

void AudioItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_audioID()) {
      if (audioID_ != &::google::protobuf::internal::kEmptyString) {
        audioID_->clear();
      }
    }
    volume_ = 0;
    maxDistance_ = 0;
    number_ = 0;
    minInterval_ = 0;
    delay_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::PB_Vector3f::Clear();
    }
    maxInterval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string audioID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audioID()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->audioID().data(), this->audioID().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_volume;
        break;
      }
      
      // optional float volume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_maxDistance;
        break;
      }
      
      // optional float maxDistance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxDistance_)));
          set_has_maxDistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_number;
        break;
      }
      
      // optional int32 number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minInterval;
        break;
      }
      
      // optional int32 minInterval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minInterval_)));
          set_has_minInterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delay;
        break;
      }
      
      // optional int32 delay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_position;
        break;
      }
      
      // optional .PB_Vector3f position = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxInterval;
        break;
      }
      
      // optional int32 maxInterval = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxInterval_)));
          set_has_maxInterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AudioItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string audioID = 1;
  if (has_audioID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audioID().data(), this->audioID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->audioID(), output);
  }
  
  // optional float volume = 2;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->volume(), output);
  }
  
  // optional float maxDistance = 3;
  if (has_maxDistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxDistance(), output);
  }
  
  // optional int32 number = 4;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->number(), output);
  }
  
  // optional int32 minInterval = 5;
  if (has_minInterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minInterval(), output);
  }
  
  // optional int32 delay = 6;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delay(), output);
  }
  
  // optional .PB_Vector3f position = 7;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->position(), output);
  }
  
  // optional int32 maxInterval = 8;
  if (has_maxInterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxInterval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AudioItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string audioID = 1;
  if (has_audioID()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audioID().data(), this->audioID().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->audioID(), target);
  }
  
  // optional float volume = 2;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->volume(), target);
  }
  
  // optional float maxDistance = 3;
  if (has_maxDistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxDistance(), target);
  }
  
  // optional int32 number = 4;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->number(), target);
  }
  
  // optional int32 minInterval = 5;
  if (has_minInterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minInterval(), target);
  }
  
  // optional int32 delay = 6;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delay(), target);
  }
  
  // optional .PB_Vector3f position = 7;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->position(), target);
  }
  
  // optional int32 maxInterval = 8;
  if (has_maxInterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxInterval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AudioItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string audioID = 1;
    if (has_audioID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audioID());
    }
    
    // optional float volume = 2;
    if (has_volume()) {
      total_size += 1 + 4;
    }
    
    // optional float maxDistance = 3;
    if (has_maxDistance()) {
      total_size += 1 + 4;
    }
    
    // optional int32 number = 4;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
    // optional int32 minInterval = 5;
    if (has_minInterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minInterval());
    }
    
    // optional int32 delay = 6;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }
    
    // optional .PB_Vector3f position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional int32 maxInterval = 8;
    if (has_maxInterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxInterval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioItemInfo::MergeFrom(const AudioItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audioID()) {
      set_audioID(from.audioID());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_maxDistance()) {
      set_maxDistance(from.maxDistance());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_minInterval()) {
      set_minInterval(from.minInterval());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_position()) {
      mutable_position()->::PB_Vector3f::MergeFrom(from.position());
    }
    if (from.has_maxInterval()) {
      set_maxInterval(from.maxInterval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioItemInfo::CopyFrom(const AudioItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioItemInfo::IsInitialized() const {
  
  return true;
}

void AudioItemInfo::Swap(AudioItemInfo* other) {
  if (other != this) {
    std::swap(audioID_, other->audioID_);
    std::swap(volume_, other->volume_);
    std::swap(maxDistance_, other->maxDistance_);
    std::swap(number_, other->number_);
    std::swap(minInterval_, other->minInterval_);
    std::swap(delay_, other->delay_);
    std::swap(position_, other->position_);
    std::swap(maxInterval_, other->maxInterval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioItemInfo_descriptor_;
  metadata.reflection = AudioItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCPass::kNpcsFieldNumber;
const int NPCPass::kDelayFieldNumber;
#endif  // !_MSC_VER

NPCPass::NPCPass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NPCPass::InitAsDefaultInstance() {
}

NPCPass::NPCPass(const NPCPass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NPCPass::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCPass::~NPCPass() {
  SharedDtor();
}

void NPCPass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCPass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCPass_descriptor_;
}

const NPCPass& NPCPass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

NPCPass* NPCPass::default_instance_ = NULL;

NPCPass* NPCPass::New() const {
  return new NPCPass;
}

void NPCPass::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    delay_ = 0;
  }
  npcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 npcs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_npcs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_npcs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_npcs;
        if (input->ExpectTag(16)) goto parse_delay;
        break;
      }
      
      // optional int32 delay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NPCPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 npcs = 1;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->npcs(i), output);
  }
  
  // optional int32 delay = 2;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NPCPass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 npcs = 1;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->npcs(i), target);
  }
  
  // optional int32 delay = 2;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NPCPass::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 delay = 2;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }
    
  }
  // repeated int32 npcs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->npcs(i));
    }
    total_size += 1 * this->npcs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCPass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCPass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCPass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCPass::MergeFrom(const NPCPass& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCPass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCPass::CopyFrom(const NPCPass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCPass::IsInitialized() const {
  
  return true;
}

void NPCPass::Swap(NPCPass* other) {
  if (other != this) {
    npcs_.Swap(&other->npcs_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCPass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCPass_descriptor_;
  metadata.reflection = NPCPass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCGroup::kPassFieldNumber;
#endif  // !_MSC_VER

NPCGroup::NPCGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NPCGroup::InitAsDefaultInstance() {
}

NPCGroup::NPCGroup(const NPCGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NPCGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCGroup::~NPCGroup() {
  SharedDtor();
}

void NPCGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCGroup_descriptor_;
}

const NPCGroup& NPCGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

NPCGroup* NPCGroup::default_instance_ = NULL;

NPCGroup* NPCGroup::New() const {
  return new NPCGroup;
}

void NPCGroup::Clear() {
  pass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NPCPass pass = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pass;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NPCGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NPCPass pass = 1;
  for (int i = 0; i < this->pass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pass(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NPCGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NPCPass pass = 1;
  for (int i = 0; i < this->pass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pass(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NPCGroup::ByteSize() const {
  int total_size = 0;
  
  // repeated .NPCPass pass = 1;
  total_size += 1 * this->pass_size();
  for (int i = 0; i < this->pass_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pass(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCGroup::MergeFrom(const NPCGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_.MergeFrom(from.pass_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCGroup::CopyFrom(const NPCGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCGroup::IsInitialized() const {
  
  return true;
}

void NPCGroup::Swap(NPCGroup* other) {
  if (other != this) {
    pass_.Swap(&other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCGroup_descriptor_;
  metadata.reflection = NPCGroup_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PathNode_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathNode_Type_descriptor_;
}
bool PathNode_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PathNode_Type PathNode::PATH;
const PathNode_Type PathNode::NPC;
const PathNode_Type PathNode::DOOR;
const PathNode_Type PathNode::Type_MIN;
const PathNode_Type PathNode::Type_MAX;
const int PathNode::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PathNode::kIdFieldNumber;
const int PathNode::kTypeFieldNumber;
const int PathNode::kNextFieldNumber;
const int PathNode::kPosFieldNumber;
#endif  // !_MSC_VER

PathNode::PathNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathNode::InitAsDefaultInstance() {
  pos_ = const_cast< ::PB_Vector3f*>(&::PB_Vector3f::default_instance());
}

PathNode::PathNode(const PathNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathNode::~PathNode() {
  SharedDtor();
}

void PathNode::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void PathNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathNode_descriptor_;
}

const PathNode& PathNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

PathNode* PathNode::default_instance_ = NULL;

PathNode* PathNode::New() const {
  return new PathNode;
}

void PathNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PB_Vector3f::Clear();
    }
  }
  next_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .PathNode.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PathNode_Type_IsValid(value)) {
            set_type(static_cast< ::PathNode_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_next;
        break;
      }
      
      // repeated int32 next = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_next())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_next())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_next;
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }
      
      // optional .PB_Vector3f pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .PathNode.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // repeated int32 next = 3;
  for (int i = 0; i < this->next_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->next(i), output);
  }
  
  // optional .PB_Vector3f pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .PathNode.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // repeated int32 next = 3;
  for (int i = 0; i < this->next_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->next(i), target);
  }
  
  // optional .PB_Vector3f pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PathNode.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .PB_Vector3f pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
  }
  // repeated int32 next = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->next_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->next(i));
    }
    total_size += 1 * this->next_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathNode::MergeFrom(const PathNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  next_.MergeFrom(from.next_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::PB_Vector3f::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathNode::CopyFrom(const PathNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathNode::IsInitialized() const {
  
  return true;
}

void PathNode::Swap(PathNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    next_.Swap(&other->next_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathNode_descriptor_;
  metadata.reflection = PathNode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ObstacleTriggerInfo_OpenType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleTriggerInfo_OpenType_descriptor_;
}
bool ObstacleTriggerInfo_OpenType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ObstacleTriggerInfo_OpenType ObstacleTriggerInfo::NONE;
const ObstacleTriggerInfo_OpenType ObstacleTriggerInfo::KILL_GROUP_NPC;
const ObstacleTriggerInfo_OpenType ObstacleTriggerInfo::SHOW_UI_PROGRESS;
const ObstacleTriggerInfo_OpenType ObstacleTriggerInfo::OpenType_MIN;
const ObstacleTriggerInfo_OpenType ObstacleTriggerInfo::OpenType_MAX;
const int ObstacleTriggerInfo::OpenType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ObstacleTriggerInfo::kOpenTypeFieldNumber;
const int ObstacleTriggerInfo::kParamFieldNumber;
const int ObstacleTriggerInfo::kIdFieldNumber;
#endif  // !_MSC_VER

ObstacleTriggerInfo::ObstacleTriggerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObstacleTriggerInfo::InitAsDefaultInstance() {
}

ObstacleTriggerInfo::ObstacleTriggerInfo(const ObstacleTriggerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObstacleTriggerInfo::SharedCtor() {
  _cached_size_ = 0;
  openType_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleTriggerInfo::~ObstacleTriggerInfo() {
  SharedDtor();
}

void ObstacleTriggerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObstacleTriggerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleTriggerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleTriggerInfo_descriptor_;
}

const ObstacleTriggerInfo& ObstacleTriggerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

ObstacleTriggerInfo* ObstacleTriggerInfo::default_instance_ = NULL;

ObstacleTriggerInfo* ObstacleTriggerInfo::New() const {
  return new ObstacleTriggerInfo;
}

void ObstacleTriggerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    openType_ = 0;
    id_ = 0;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObstacleTriggerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 openType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openType_)));
          set_has_openType();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }
      
      // repeated int32 param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param;
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObstacleTriggerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 openType = 1;
  if (has_openType()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->openType(), output);
  }
  
  // repeated int32 param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->param(i), output);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObstacleTriggerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 openType = 1;
  if (has_openType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->openType(), target);
  }
  
  // repeated int32 param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->param(i), target);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObstacleTriggerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 openType = 1;
    if (has_openType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openType());
    }
    
    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  // repeated int32 param = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param(i));
    }
    total_size += 1 * this->param_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleTriggerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObstacleTriggerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObstacleTriggerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObstacleTriggerInfo::MergeFrom(const ObstacleTriggerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openType()) {
      set_openType(from.openType());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObstacleTriggerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleTriggerInfo::CopyFrom(const ObstacleTriggerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleTriggerInfo::IsInitialized() const {
  
  return true;
}

void ObstacleTriggerInfo::Swap(ObstacleTriggerInfo* other) {
  if (other != this) {
    std::swap(openType_, other->openType_);
    param_.Swap(&other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObstacleTriggerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleTriggerInfo_descriptor_;
  metadata.reflection = ObstacleTriggerInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MapUnit_SceneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapUnit_SceneType_descriptor_;
}
bool MapUnit_SceneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapUnit_SceneType MapUnit::LAND;
const MapUnit_SceneType MapUnit::OCEAN;
const MapUnit_SceneType MapUnit::SceneType_MIN;
const MapUnit_SceneType MapUnit::SceneType_MAX;
const int MapUnit::SceneType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MapUnit::kIdFieldNumber;
const int MapUnit::kNpcsFieldNumber;
const int MapUnit::kJumpTableFieldNumber;
const int MapUnit::kAudioItemsFieldNumber;
const int MapUnit::kResIDFieldNumber;
const int MapUnit::kNpcGroupsFieldNumber;
const int MapUnit::kBossFieldNumber;
const int MapUnit::kSceneTypeFieldNumber;
const int MapUnit::kPathFieldNumber;
const int MapUnit::kProtectNPCFieldNumber;
const int MapUnit::kTargetNodeFieldNumber;
const int MapUnit::kObstacleTriggerInfoFieldNumber;
const int MapUnit::kFriendlyNpcFieldNumber;
const int MapUnit::kFreeCoordsFieldNumber;
const int MapUnit::kEnemyTargetNodeFieldNumber;
const int MapUnit::kHeroNPCFieldNumber;
const int MapUnit::kOurRecoverHPNodeFieldNumber;
const int MapUnit::kEnemyRecoverHPNodeFieldNumber;
#endif  // !_MSC_VER

MapUnit::MapUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapUnit::InitAsDefaultInstance() {
  jumpTable_ = const_cast< ::JumpTableInfo*>(&::JumpTableInfo::default_instance());
}

MapUnit::MapUnit(const MapUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapUnit::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  jumpTable_ = NULL;
  resID_ = 0;
  boss_ = -1;
  sceneType_ = 0;
  protectNPC_ = -1;
  targetNode_ = -1;
  enemyTargetNode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapUnit::~MapUnit() {
  SharedDtor();
}

void MapUnit::SharedDtor() {
  if (this != default_instance_) {
    delete jumpTable_;
  }
}

void MapUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapUnit_descriptor_;
}

const MapUnit& MapUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

MapUnit* MapUnit::default_instance_ = NULL;

MapUnit* MapUnit::New() const {
  return new MapUnit;
}

void MapUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_jumpTable()) {
      if (jumpTable_ != NULL) jumpTable_->::JumpTableInfo::Clear();
    }
    resID_ = 0;
    boss_ = -1;
    sceneType_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    protectNPC_ = -1;
    targetNode_ = -1;
    enemyTargetNode_ = 0;
  }
  npcs_.Clear();
  audioItems_.Clear();
  npcGroups_.Clear();
  path_.Clear();
  obstacleTriggerInfo_.Clear();
  friendlyNpc_.Clear();
  freeCoords_.Clear();
  heroNPC_.Clear();
  ourRecoverHPNode_.Clear();
  enemyRecoverHPNode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_npcs;
        break;
      }
      
      // repeated .NPCSceneUnit npcs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_npcs;
        if (input->ExpectTag(26)) goto parse_jumpTable;
        break;
      }
      
      // optional .JumpTableInfo jumpTable = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jumpTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jumpTable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_audioItems;
        break;
      }
      
      // repeated .AudioItemInfo audioItems = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audioItems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_audioItems;
        if (input->ExpectTag(40)) goto parse_resID;
        break;
      }
      
      // optional int32 resID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resID_)));
          set_has_resID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_npcGroups;
        break;
      }
      
      // repeated .NPCGroup npcGroups = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npcGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcGroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_npcGroups;
        if (input->ExpectTag(56)) goto parse_boss;
        break;
      }
      
      // optional int32 boss = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sceneType;
        break;
      }
      
      // optional .MapUnit.SceneType sceneType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MapUnit_SceneType_IsValid(value)) {
            set_sceneType(static_cast< ::MapUnit_SceneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_path;
        break;
      }
      
      // repeated .PathNode path = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_path;
        if (input->ExpectTag(80)) goto parse_protectNPC;
        break;
      }
      
      // optional int32 protectNPC = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protectNPC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protectNPC_)));
          set_has_protectNPC();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_targetNode;
        break;
      }
      
      // optional int32 targetNode = 11 [default = -1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetNode_)));
          set_has_targetNode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_obstacleTriggerInfo;
        break;
      }
      
      // repeated .ObstacleTriggerInfo obstacleTriggerInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obstacleTriggerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacleTriggerInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_obstacleTriggerInfo;
        if (input->ExpectTag(104)) goto parse_friendlyNpc;
        break;
      }
      
      // repeated int32 friendlyNpc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendlyNpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_friendlyNpc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_friendlyNpc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_friendlyNpc;
        if (input->ExpectTag(114)) goto parse_freeCoords;
        break;
      }
      
      // repeated .PB_Vector3f freeCoords = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_freeCoords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freeCoords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_freeCoords;
        if (input->ExpectTag(120)) goto parse_enemyTargetNode;
        break;
      }
      
      // optional int32 enemyTargetNode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemyTargetNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemyTargetNode_)));
          set_has_enemyTargetNode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_heroNPC;
        break;
      }
      
      // repeated int32 heroNPC = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroNPC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_heroNPC())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_heroNPC())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_heroNPC;
        if (input->ExpectTag(136)) goto parse_ourRecoverHPNode;
        break;
      }
      
      // repeated int32 ourRecoverHPNode = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ourRecoverHPNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_ourRecoverHPNode())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ourRecoverHPNode())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_ourRecoverHPNode;
        if (input->ExpectTag(144)) goto parse_enemyRecoverHPNode;
        break;
      }
      
      // repeated int32 enemyRecoverHPNode = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemyRecoverHPNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_enemyRecoverHPNode())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enemyRecoverHPNode())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_enemyRecoverHPNode;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .NPCSceneUnit npcs = 2;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->npcs(i), output);
  }
  
  // optional .JumpTableInfo jumpTable = 3;
  if (has_jumpTable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->jumpTable(), output);
  }
  
  // repeated .AudioItemInfo audioItems = 4;
  for (int i = 0; i < this->audioItems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->audioItems(i), output);
  }
  
  // optional int32 resID = 5;
  if (has_resID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resID(), output);
  }
  
  // repeated .NPCGroup npcGroups = 6;
  for (int i = 0; i < this->npcGroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->npcGroups(i), output);
  }
  
  // optional int32 boss = 7 [default = -1];
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->boss(), output);
  }
  
  // optional .MapUnit.SceneType sceneType = 8;
  if (has_sceneType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->sceneType(), output);
  }
  
  // repeated .PathNode path = 9;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->path(i), output);
  }
  
  // optional int32 protectNPC = 10 [default = -1];
  if (has_protectNPC()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->protectNPC(), output);
  }
  
  // optional int32 targetNode = 11 [default = -1];
  if (has_targetNode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->targetNode(), output);
  }
  
  // repeated .ObstacleTriggerInfo obstacleTriggerInfo = 12;
  for (int i = 0; i < this->obstacleTriggerInfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->obstacleTriggerInfo(i), output);
  }
  
  // repeated int32 friendlyNpc = 13;
  for (int i = 0; i < this->friendlyNpc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->friendlyNpc(i), output);
  }
  
  // repeated .PB_Vector3f freeCoords = 14;
  for (int i = 0; i < this->freeCoords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->freeCoords(i), output);
  }
  
  // optional int32 enemyTargetNode = 15;
  if (has_enemyTargetNode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->enemyTargetNode(), output);
  }
  
  // repeated int32 heroNPC = 16;
  for (int i = 0; i < this->heroNPC_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->heroNPC(i), output);
  }
  
  // repeated int32 ourRecoverHPNode = 17;
  for (int i = 0; i < this->ourRecoverHPNode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->ourRecoverHPNode(i), output);
  }
  
  // repeated int32 enemyRecoverHPNode = 18;
  for (int i = 0; i < this->enemyRecoverHPNode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->enemyRecoverHPNode(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .NPCSceneUnit npcs = 2;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->npcs(i), target);
  }
  
  // optional .JumpTableInfo jumpTable = 3;
  if (has_jumpTable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->jumpTable(), target);
  }
  
  // repeated .AudioItemInfo audioItems = 4;
  for (int i = 0; i < this->audioItems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->audioItems(i), target);
  }
  
  // optional int32 resID = 5;
  if (has_resID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resID(), target);
  }
  
  // repeated .NPCGroup npcGroups = 6;
  for (int i = 0; i < this->npcGroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->npcGroups(i), target);
  }
  
  // optional int32 boss = 7 [default = -1];
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->boss(), target);
  }
  
  // optional .MapUnit.SceneType sceneType = 8;
  if (has_sceneType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->sceneType(), target);
  }
  
  // repeated .PathNode path = 9;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->path(i), target);
  }
  
  // optional int32 protectNPC = 10 [default = -1];
  if (has_protectNPC()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->protectNPC(), target);
  }
  
  // optional int32 targetNode = 11 [default = -1];
  if (has_targetNode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->targetNode(), target);
  }
  
  // repeated .ObstacleTriggerInfo obstacleTriggerInfo = 12;
  for (int i = 0; i < this->obstacleTriggerInfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->obstacleTriggerInfo(i), target);
  }
  
  // repeated int32 friendlyNpc = 13;
  for (int i = 0; i < this->friendlyNpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->friendlyNpc(i), target);
  }
  
  // repeated .PB_Vector3f freeCoords = 14;
  for (int i = 0; i < this->freeCoords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->freeCoords(i), target);
  }
  
  // optional int32 enemyTargetNode = 15;
  if (has_enemyTargetNode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->enemyTargetNode(), target);
  }
  
  // repeated int32 heroNPC = 16;
  for (int i = 0; i < this->heroNPC_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->heroNPC(i), target);
  }
  
  // repeated int32 ourRecoverHPNode = 17;
  for (int i = 0; i < this->ourRecoverHPNode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->ourRecoverHPNode(i), target);
  }
  
  // repeated int32 enemyRecoverHPNode = 18;
  for (int i = 0; i < this->enemyRecoverHPNode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->enemyRecoverHPNode(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapUnit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .JumpTableInfo jumpTable = 3;
    if (has_jumpTable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jumpTable());
    }
    
    // optional int32 resID = 5;
    if (has_resID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resID());
    }
    
    // optional int32 boss = 7 [default = -1];
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss());
    }
    
    // optional .MapUnit.SceneType sceneType = 8;
    if (has_sceneType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sceneType());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 protectNPC = 10 [default = -1];
    if (has_protectNPC()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protectNPC());
    }
    
    // optional int32 targetNode = 11 [default = -1];
    if (has_targetNode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetNode());
    }
    
    // optional int32 enemyTargetNode = 15;
    if (has_enemyTargetNode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemyTargetNode());
    }
    
  }
  // repeated .NPCSceneUnit npcs = 2;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }
  
  // repeated .AudioItemInfo audioItems = 4;
  total_size += 1 * this->audioItems_size();
  for (int i = 0; i < this->audioItems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->audioItems(i));
  }
  
  // repeated .NPCGroup npcGroups = 6;
  total_size += 1 * this->npcGroups_size();
  for (int i = 0; i < this->npcGroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcGroups(i));
  }
  
  // repeated .PathNode path = 9;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }
  
  // repeated .ObstacleTriggerInfo obstacleTriggerInfo = 12;
  total_size += 1 * this->obstacleTriggerInfo_size();
  for (int i = 0; i < this->obstacleTriggerInfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacleTriggerInfo(i));
  }
  
  // repeated int32 friendlyNpc = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->friendlyNpc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->friendlyNpc(i));
    }
    total_size += 1 * this->friendlyNpc_size() + data_size;
  }
  
  // repeated .PB_Vector3f freeCoords = 14;
  total_size += 1 * this->freeCoords_size();
  for (int i = 0; i < this->freeCoords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freeCoords(i));
  }
  
  // repeated int32 heroNPC = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroNPC_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->heroNPC(i));
    }
    total_size += 2 * this->heroNPC_size() + data_size;
  }
  
  // repeated int32 ourRecoverHPNode = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->ourRecoverHPNode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ourRecoverHPNode(i));
    }
    total_size += 2 * this->ourRecoverHPNode_size() + data_size;
  }
  
  // repeated int32 enemyRecoverHPNode = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemyRecoverHPNode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enemyRecoverHPNode(i));
    }
    total_size += 2 * this->enemyRecoverHPNode_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapUnit::MergeFrom(const MapUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  audioItems_.MergeFrom(from.audioItems_);
  npcGroups_.MergeFrom(from.npcGroups_);
  path_.MergeFrom(from.path_);
  obstacleTriggerInfo_.MergeFrom(from.obstacleTriggerInfo_);
  friendlyNpc_.MergeFrom(from.friendlyNpc_);
  freeCoords_.MergeFrom(from.freeCoords_);
  heroNPC_.MergeFrom(from.heroNPC_);
  ourRecoverHPNode_.MergeFrom(from.ourRecoverHPNode_);
  enemyRecoverHPNode_.MergeFrom(from.enemyRecoverHPNode_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_jumpTable()) {
      mutable_jumpTable()->::JumpTableInfo::MergeFrom(from.jumpTable());
    }
    if (from.has_resID()) {
      set_resID(from.resID());
    }
    if (from.has_boss()) {
      set_boss(from.boss());
    }
    if (from.has_sceneType()) {
      set_sceneType(from.sceneType());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_protectNPC()) {
      set_protectNPC(from.protectNPC());
    }
    if (from.has_targetNode()) {
      set_targetNode(from.targetNode());
    }
    if (from.has_enemyTargetNode()) {
      set_enemyTargetNode(from.enemyTargetNode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapUnit::CopyFrom(const MapUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapUnit::IsInitialized() const {
  
  return true;
}

void MapUnit::Swap(MapUnit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    npcs_.Swap(&other->npcs_);
    std::swap(jumpTable_, other->jumpTable_);
    audioItems_.Swap(&other->audioItems_);
    std::swap(resID_, other->resID_);
    npcGroups_.Swap(&other->npcGroups_);
    std::swap(boss_, other->boss_);
    std::swap(sceneType_, other->sceneType_);
    path_.Swap(&other->path_);
    std::swap(protectNPC_, other->protectNPC_);
    std::swap(targetNode_, other->targetNode_);
    obstacleTriggerInfo_.Swap(&other->obstacleTriggerInfo_);
    friendlyNpc_.Swap(&other->friendlyNpc_);
    freeCoords_.Swap(&other->freeCoords_);
    std::swap(enemyTargetNode_, other->enemyTargetNode_);
    heroNPC_.Swap(&other->heroNPC_);
    ourRecoverHPNode_.Swap(&other->ourRecoverHPNode_);
    enemyRecoverHPNode_.Swap(&other->enemyRecoverHPNode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapUnit_descriptor_;
  metadata.reflection = MapUnit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MapInfo_MapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfo_MapType_descriptor_;
}
bool MapInfo_MapType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapInfo_MapType MapInfo::PEACE;
const MapInfo_MapType MapInfo::SINGLE;
const MapInfo_MapType MapInfo::ROOM;
const MapInfo_MapType MapInfo::PVP;
const MapInfo_MapType MapInfo::ONLY_ROOM;
const MapInfo_MapType MapInfo::PRACTICE;
const MapInfo_MapType MapInfo::HELL;
const MapInfo_MapType MapInfo::BATTLE_SINGLE;
const MapInfo_MapType MapInfo::MapType_MIN;
const MapInfo_MapType MapInfo::MapType_MAX;
const int MapInfo::MapType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MapInfo_AwardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfo_AwardType_descriptor_;
}
bool MapInfo_AwardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapInfo_AwardType MapInfo::FINAL;
const MapInfo_AwardType MapInfo::PASS;
const MapInfo_AwardType MapInfo::AwardType_MIN;
const MapInfo_AwardType MapInfo::AwardType_MAX;
const int MapInfo::AwardType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MapInfo_OpenNPCType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfo_OpenNPCType_descriptor_;
}
bool MapInfo_OpenNPCType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapInfo_OpenNPCType MapInfo::NORMAL;
const MapInfo_OpenNPCType MapInfo::TRIGGER;
const MapInfo_OpenNPCType MapInfo::OpenNPCType_MIN;
const MapInfo_OpenNPCType MapInfo::OpenNPCType_MAX;
const int MapInfo::OpenNPCType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MapInfo::kMapTypeFieldNumber;
const int MapInfo::kIdFieldNumber;
const int MapInfo::kNameFieldNumber;
const int MapInfo::kDescFieldNumber;
const int MapInfo::kRequireMissionFieldNumber;
const int MapInfo::kSceneAudioFieldNumber;
const int MapInfo::kFreeBoxFieldNumber;
const int MapInfo::kGemBoxFieldNumber;
const int MapInfo::kExpFieldNumber;
const int MapInfo::kHonorFieldNumber;
const int MapInfo::kRequiredPowerFieldNumber;
const int MapInfo::kDurabilityFieldNumber;
const int MapInfo::kAwardTypeFieldNumber;
const int MapInfo::kMoneyFieldNumber;
const int MapInfo::kRmbFieldNumber;
const int MapInfo::kSoulFieldNumber;
const int MapInfo::kShowBoxFieldNumber;
const int MapInfo::kSmallSoulJadeFieldNumber;
const int MapInfo::kSoulStoneFieldNumber;
const int MapInfo::kParentFieldNumber;
const int MapInfo::kChildFieldNumber;
const int MapInfo::kSweepMoneyFieldNumber;
const int MapInfo::kEliteFieldNumber;
const int MapInfo::kRequiredLevelFieldNumber;
const int MapInfo::kOpenNpcTypeFieldNumber;
#endif  // !_MSC_VER

MapInfo::MapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapInfo::InitAsDefaultInstance() {
}

MapInfo::MapInfo(const MapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapInfo::SharedCtor() {
  _cached_size_ = 0;
  mapType_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requireMission_ = 0;
  freeBox_ = 0;
  gemBox_ = 0;
  exp_ = 0;
  honor_ = 0;
  requiredPower_ = 0;
  durability_ = 0;
  awardType_ = 0;
  money_ = 0;
  rmb_ = 0;
  soul_ = 0;
  showBox_ = 0;
  smallSoulJade_ = 0;
  soulStone_ = 0;
  parent_ = 0;
  child_ = 0;
  sweepMoney_ = 0;
  elite_ = false;
  requiredLevel_ = 0;
  openNpcType_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapInfo::~MapInfo() {
  SharedDtor();
}

void MapInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void MapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfo_descriptor_;
}

const MapInfo& MapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

MapInfo* MapInfo::default_instance_ = NULL;

MapInfo* MapInfo::New() const {
  return new MapInfo;
}

void MapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapType_ = 0;
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    requireMission_ = 0;
    freeBox_ = 0;
    gemBox_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0;
    honor_ = 0;
    requiredPower_ = 0;
    durability_ = 0;
    awardType_ = 0;
    money_ = 0;
    rmb_ = 0;
    soul_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    showBox_ = 0;
    smallSoulJade_ = 0;
    soulStone_ = 0;
    parent_ = 0;
    child_ = 0;
    sweepMoney_ = 0;
    elite_ = false;
    requiredLevel_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    openNpcType_ = 0;
  }
  sceneAudio_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MapInfo.MapType mapType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MapInfo_MapType_IsValid(value)) {
            set_mapType(static_cast< ::MapInfo_MapType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }
      
      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_requireMission;
        break;
      }
      
      // optional int32 requireMission = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requireMission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requireMission_)));
          set_has_requireMission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sceneAudio;
        break;
      }
      
      // repeated int32 sceneAudio = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_sceneAudio())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sceneAudio())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sceneAudio;
        if (input->ExpectTag(56)) goto parse_freeBox;
        break;
      }
      
      // optional int32 freeBox = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeBox_)));
          set_has_freeBox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gemBox;
        break;
      }
      
      // optional int32 gemBox = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gemBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemBox_)));
          set_has_gemBox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_honor;
        break;
      }
      
      // optional int32 honor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_requiredPower;
        break;
      }
      
      // optional int32 requiredPower = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredPower_)));
          set_has_requiredPower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_durability;
        break;
      }
      
      // optional int32 durability = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durability_)));
          set_has_durability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_awardType;
        break;
      }
      
      // optional .MapInfo.AwardType awardType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MapInfo_AwardType_IsValid(value)) {
            set_awardType(static_cast< ::MapInfo_AwardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_money;
        break;
      }
      
      // optional int32 money = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_soul;
        break;
      }
      
      // optional int32 soul = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_)));
          set_has_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_showBox;
        break;
      }
      
      // optional int32 showBox = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showBox_)));
          set_has_showBox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_smallSoulJade;
        break;
      }
      
      // optional int32 smallSoulJade = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallSoulJade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smallSoulJade_)));
          set_has_smallSoulJade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_soulStone;
        break;
      }
      
      // optional int32 soulStone = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulStone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soulStone_)));
          set_has_soulStone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_parent;
        break;
      }
      
      // optional int32 parent = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_child;
        break;
      }
      
      // optional int32 child = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_child:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_)));
          set_has_child();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_sweepMoney;
        break;
      }
      
      // optional int32 sweepMoney = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweepMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweepMoney_)));
          set_has_sweepMoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_elite;
        break;
      }
      
      // optional bool elite = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &elite_)));
          set_has_elite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_requiredLevel;
        break;
      }
      
      // optional int32 requiredLevel = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredLevel_)));
          set_has_requiredLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_openNpcType;
        break;
      }
      
      // optional .MapInfo.OpenNPCType openNpcType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openNpcType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MapInfo_OpenNPCType_IsValid(value)) {
            set_openNpcType(static_cast< ::MapInfo_OpenNPCType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MapInfo.MapType mapType = 1;
  if (has_mapType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mapType(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }
  
  // optional int32 requireMission = 5;
  if (has_requireMission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->requireMission(), output);
  }
  
  // repeated int32 sceneAudio = 6;
  for (int i = 0; i < this->sceneAudio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->sceneAudio(i), output);
  }
  
  // optional int32 freeBox = 7;
  if (has_freeBox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->freeBox(), output);
  }
  
  // optional int32 gemBox = 8;
  if (has_gemBox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gemBox(), output);
  }
  
  // optional int32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exp(), output);
  }
  
  // optional int32 honor = 10;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->honor(), output);
  }
  
  // optional int32 requiredPower = 11;
  if (has_requiredPower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->requiredPower(), output);
  }
  
  // optional int32 durability = 12;
  if (has_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->durability(), output);
  }
  
  // optional .MapInfo.AwardType awardType = 13;
  if (has_awardType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->awardType(), output);
  }
  
  // optional int32 money = 14;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->money(), output);
  }
  
  // optional int32 rmb = 15;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->rmb(), output);
  }
  
  // optional int32 soul = 16;
  if (has_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->soul(), output);
  }
  
  // optional int32 showBox = 17;
  if (has_showBox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->showBox(), output);
  }
  
  // optional int32 smallSoulJade = 18;
  if (has_smallSoulJade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->smallSoulJade(), output);
  }
  
  // optional int32 soulStone = 19;
  if (has_soulStone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->soulStone(), output);
  }
  
  // optional int32 parent = 20;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->parent(), output);
  }
  
  // optional int32 child = 21;
  if (has_child()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->child(), output);
  }
  
  // optional int32 sweepMoney = 22;
  if (has_sweepMoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->sweepMoney(), output);
  }
  
  // optional bool elite = 23;
  if (has_elite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->elite(), output);
  }
  
  // optional int32 requiredLevel = 24;
  if (has_requiredLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->requiredLevel(), output);
  }
  
  // optional .MapInfo.OpenNPCType openNpcType = 25;
  if (has_openNpcType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->openNpcType(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MapInfo.MapType mapType = 1;
  if (has_mapType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mapType(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }
  
  // optional int32 requireMission = 5;
  if (has_requireMission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->requireMission(), target);
  }
  
  // repeated int32 sceneAudio = 6;
  for (int i = 0; i < this->sceneAudio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->sceneAudio(i), target);
  }
  
  // optional int32 freeBox = 7;
  if (has_freeBox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->freeBox(), target);
  }
  
  // optional int32 gemBox = 8;
  if (has_gemBox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gemBox(), target);
  }
  
  // optional int32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exp(), target);
  }
  
  // optional int32 honor = 10;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->honor(), target);
  }
  
  // optional int32 requiredPower = 11;
  if (has_requiredPower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->requiredPower(), target);
  }
  
  // optional int32 durability = 12;
  if (has_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->durability(), target);
  }
  
  // optional .MapInfo.AwardType awardType = 13;
  if (has_awardType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->awardType(), target);
  }
  
  // optional int32 money = 14;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->money(), target);
  }
  
  // optional int32 rmb = 15;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->rmb(), target);
  }
  
  // optional int32 soul = 16;
  if (has_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->soul(), target);
  }
  
  // optional int32 showBox = 17;
  if (has_showBox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->showBox(), target);
  }
  
  // optional int32 smallSoulJade = 18;
  if (has_smallSoulJade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->smallSoulJade(), target);
  }
  
  // optional int32 soulStone = 19;
  if (has_soulStone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->soulStone(), target);
  }
  
  // optional int32 parent = 20;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->parent(), target);
  }
  
  // optional int32 child = 21;
  if (has_child()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->child(), target);
  }
  
  // optional int32 sweepMoney = 22;
  if (has_sweepMoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->sweepMoney(), target);
  }
  
  // optional bool elite = 23;
  if (has_elite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->elite(), target);
  }
  
  // optional int32 requiredLevel = 24;
  if (has_requiredLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->requiredLevel(), target);
  }
  
  // optional .MapInfo.OpenNPCType openNpcType = 25;
  if (has_openNpcType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->openNpcType(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MapInfo.MapType mapType = 1;
    if (has_mapType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mapType());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 requireMission = 5;
    if (has_requireMission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requireMission());
    }
    
    // optional int32 freeBox = 7;
    if (has_freeBox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeBox());
    }
    
    // optional int32 gemBox = 8;
    if (has_gemBox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemBox());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 honor = 10;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }
    
    // optional int32 requiredPower = 11;
    if (has_requiredPower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredPower());
    }
    
    // optional int32 durability = 12;
    if (has_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->durability());
    }
    
    // optional .MapInfo.AwardType awardType = 13;
    if (has_awardType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->awardType());
    }
    
    // optional int32 money = 14;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
    // optional int32 rmb = 15;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional int32 soul = 16;
    if (has_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 showBox = 17;
    if (has_showBox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showBox());
    }
    
    // optional int32 smallSoulJade = 18;
    if (has_smallSoulJade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smallSoulJade());
    }
    
    // optional int32 soulStone = 19;
    if (has_soulStone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soulStone());
    }
    
    // optional int32 parent = 20;
    if (has_parent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent());
    }
    
    // optional int32 child = 21;
    if (has_child()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child());
    }
    
    // optional int32 sweepMoney = 22;
    if (has_sweepMoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweepMoney());
    }
    
    // optional bool elite = 23;
    if (has_elite()) {
      total_size += 2 + 1;
    }
    
    // optional int32 requiredLevel = 24;
    if (has_requiredLevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredLevel());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .MapInfo.OpenNPCType openNpcType = 25;
    if (has_openNpcType()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->openNpcType());
    }
    
  }
  // repeated int32 sceneAudio = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->sceneAudio_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sceneAudio(i));
    }
    total_size += 1 * this->sceneAudio_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapInfo::MergeFrom(const MapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sceneAudio_.MergeFrom(from.sceneAudio_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapType()) {
      set_mapType(from.mapType());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_requireMission()) {
      set_requireMission(from.requireMission());
    }
    if (from.has_freeBox()) {
      set_freeBox(from.freeBox());
    }
    if (from.has_gemBox()) {
      set_gemBox(from.gemBox());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_requiredPower()) {
      set_requiredPower(from.requiredPower());
    }
    if (from.has_durability()) {
      set_durability(from.durability());
    }
    if (from.has_awardType()) {
      set_awardType(from.awardType());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_soul()) {
      set_soul(from.soul());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_showBox()) {
      set_showBox(from.showBox());
    }
    if (from.has_smallSoulJade()) {
      set_smallSoulJade(from.smallSoulJade());
    }
    if (from.has_soulStone()) {
      set_soulStone(from.soulStone());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_child()) {
      set_child(from.child());
    }
    if (from.has_sweepMoney()) {
      set_sweepMoney(from.sweepMoney());
    }
    if (from.has_elite()) {
      set_elite(from.elite());
    }
    if (from.has_requiredLevel()) {
      set_requiredLevel(from.requiredLevel());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_openNpcType()) {
      set_openNpcType(from.openNpcType());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo::CopyFrom(const MapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  
  return true;
}

void MapInfo::Swap(MapInfo* other) {
  if (other != this) {
    std::swap(mapType_, other->mapType_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(requireMission_, other->requireMission_);
    sceneAudio_.Swap(&other->sceneAudio_);
    std::swap(freeBox_, other->freeBox_);
    std::swap(gemBox_, other->gemBox_);
    std::swap(exp_, other->exp_);
    std::swap(honor_, other->honor_);
    std::swap(requiredPower_, other->requiredPower_);
    std::swap(durability_, other->durability_);
    std::swap(awardType_, other->awardType_);
    std::swap(money_, other->money_);
    std::swap(rmb_, other->rmb_);
    std::swap(soul_, other->soul_);
    std::swap(showBox_, other->showBox_);
    std::swap(smallSoulJade_, other->smallSoulJade_);
    std::swap(soulStone_, other->soulStone_);
    std::swap(parent_, other->parent_);
    std::swap(child_, other->child_);
    std::swap(sweepMoney_, other->sweepMoney_);
    std::swap(elite_, other->elite_);
    std::swap(requiredLevel_, other->requiredLevel_);
    std::swap(openNpcType_, other->openNpcType_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapInfo_descriptor_;
  metadata.reflection = MapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllMapInfo::kMapInfoFieldNumber;
#endif  // !_MSC_VER

AllMapInfo::AllMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllMapInfo::InitAsDefaultInstance() {
}

AllMapInfo::AllMapInfo(const AllMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllMapInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllMapInfo::~AllMapInfo() {
  SharedDtor();
}

void AllMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllMapInfo_descriptor_;
}

const AllMapInfo& AllMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

AllMapInfo* AllMapInfo::default_instance_ = NULL;

AllMapInfo* AllMapInfo::New() const {
  return new AllMapInfo;
}

void AllMapInfo::Clear() {
  mapInfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapInfo mapInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mapInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapInfo mapInfo = 1;
  for (int i = 0; i < this->mapInfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapInfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapInfo mapInfo = 1;
  for (int i = 0; i < this->mapInfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapInfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllMapInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .MapInfo mapInfo = 1;
  total_size += 1 * this->mapInfo_size();
  for (int i = 0; i < this->mapInfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapInfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllMapInfo::MergeFrom(const AllMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapInfo_.MergeFrom(from.mapInfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllMapInfo::CopyFrom(const AllMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllMapInfo::IsInitialized() const {
  
  return true;
}

void AllMapInfo::Swap(AllMapInfo* other) {
  if (other != this) {
    mapInfo_.Swap(&other->mapInfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllMapInfo_descriptor_;
  metadata.reflection = AllMapInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BlockInfo_BlockType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockInfo_BlockType_descriptor_;
}
bool BlockInfo_BlockType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlockInfo_BlockType BlockInfo::DEFAULT;
const BlockInfo_BlockType BlockInfo::UNWALKABLE;
const BlockInfo_BlockType BlockInfo::UNWALKABLE_UNSKILL;
const BlockInfo_BlockType BlockInfo::BlockType_MIN;
const BlockInfo_BlockType BlockInfo::BlockType_MAX;
const int BlockInfo::BlockType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BlockInfo::kIdFieldNumber;
const int BlockInfo::kBlockTypesFieldNumber;
const int BlockInfo::kRealLengthFieldNumber;
const int BlockInfo::kRealWidthFieldNumber;
const int BlockInfo::kLogicLengthFieldNumber;
const int BlockInfo::kLogicWidthFieldNumber;
const int BlockInfo::kObstaclesFieldNumber;
#endif  // !_MSC_VER

BlockInfo::BlockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockInfo::InitAsDefaultInstance() {
}

BlockInfo::BlockInfo(const BlockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  realLength_ = 0;
  realWidth_ = 0;
  logicLength_ = 0;
  logicWidth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockInfo::~BlockInfo() {
  SharedDtor();
}

void BlockInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockInfo_descriptor_;
}

const BlockInfo& BlockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapInfo_2eproto();  return *default_instance_;
}

BlockInfo* BlockInfo::default_instance_ = NULL;

BlockInfo* BlockInfo::New() const {
  return new BlockInfo;
}

void BlockInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    realLength_ = 0;
    realWidth_ = 0;
    logicLength_ = 0;
    logicWidth_ = 0;
  }
  blockTypes_.Clear();
  obstacles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blockTypes;
        break;
      }
      
      // repeated .BlockInfo.BlockType blockTypes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blockTypes:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BlockInfo_BlockType_IsValid(value)) {
            add_blockTypes(static_cast< ::BlockInfo_BlockType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::BlockInfo_BlockType_IsValid,
                 this->mutable_blockTypes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blockTypes;
        if (input->ExpectTag(24)) goto parse_realLength;
        break;
      }
      
      // optional int32 realLength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realLength_)));
          set_has_realLength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_realWidth;
        break;
      }
      
      // optional int32 realWidth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realWidth_)));
          set_has_realWidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_logicLength;
        break;
      }
      
      // optional int32 logicLength = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logicLength_)));
          set_has_logicLength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logicWidth;
        break;
      }
      
      // optional int32 logicWidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logicWidth_)));
          set_has_logicWidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_obstacles;
        break;
      }
      
      // repeated int32 obstacles = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obstacles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_obstacles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_obstacles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_obstacles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .BlockInfo.BlockType blockTypes = 2;
  for (int i = 0; i < this->blockTypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->blockTypes(i), output);
  }
  
  // optional int32 realLength = 3;
  if (has_realLength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->realLength(), output);
  }
  
  // optional int32 realWidth = 4;
  if (has_realWidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->realWidth(), output);
  }
  
  // optional int32 logicLength = 5;
  if (has_logicLength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->logicLength(), output);
  }
  
  // optional int32 logicWidth = 6;
  if (has_logicWidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->logicWidth(), output);
  }
  
  // repeated int32 obstacles = 7;
  for (int i = 0; i < this->obstacles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->obstacles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .BlockInfo.BlockType blockTypes = 2;
  for (int i = 0; i < this->blockTypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->blockTypes(i), target);
  }
  
  // optional int32 realLength = 3;
  if (has_realLength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->realLength(), target);
  }
  
  // optional int32 realWidth = 4;
  if (has_realWidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->realWidth(), target);
  }
  
  // optional int32 logicLength = 5;
  if (has_logicLength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->logicLength(), target);
  }
  
  // optional int32 logicWidth = 6;
  if (has_logicWidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->logicWidth(), target);
  }
  
  // repeated int32 obstacles = 7;
  for (int i = 0; i < this->obstacles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->obstacles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 realLength = 3;
    if (has_realLength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->realLength());
    }
    
    // optional int32 realWidth = 4;
    if (has_realWidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->realWidth());
    }
    
    // optional int32 logicLength = 5;
    if (has_logicLength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logicLength());
    }
    
    // optional int32 logicWidth = 6;
    if (has_logicWidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logicWidth());
    }
    
  }
  // repeated .BlockInfo.BlockType blockTypes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->blockTypes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->blockTypes(i));
    }
    total_size += 1 * this->blockTypes_size() + data_size;
  }
  
  // repeated int32 obstacles = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->obstacles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->obstacles(i));
    }
    total_size += 1 * this->obstacles_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockInfo::MergeFrom(const BlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  blockTypes_.MergeFrom(from.blockTypes_);
  obstacles_.MergeFrom(from.obstacles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_realLength()) {
      set_realLength(from.realLength());
    }
    if (from.has_realWidth()) {
      set_realWidth(from.realWidth());
    }
    if (from.has_logicLength()) {
      set_logicLength(from.logicLength());
    }
    if (from.has_logicWidth()) {
      set_logicWidth(from.logicWidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockInfo::CopyFrom(const BlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo::IsInitialized() const {
  
  return true;
}

void BlockInfo::Swap(BlockInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    blockTypes_.Swap(&other->blockTypes_);
    std::swap(realLength_, other->realLength_);
    std::swap(realWidth_, other->realWidth_);
    std::swap(logicLength_, other->logicLength_);
    std::swap(logicWidth_, other->logicWidth_);
    obstacles_.Swap(&other->obstacles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockInfo_descriptor_;
  metadata.reflection = BlockInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

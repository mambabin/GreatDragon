// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StatusInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusInfo_StatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusInfo_TargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusInfo_TriggerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusInfo_HurtType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusInfo_PosType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllStatuses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllStatuses_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StatusInfo_2eproto() {
  protobuf_AddDesc_StatusInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StatusInfo.proto");
  GOOGLE_CHECK(file != NULL);
  StatusInfo_descriptor_ = file->message_type(0);
  static const int StatusInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, statusType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, targetType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, triggerType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, hurtType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, posType_),
  };
  StatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusInfo_descriptor_,
      StatusInfo::default_instance_,
      StatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusInfo));
  StatusInfo_StatusType_descriptor_ = StatusInfo_descriptor_->enum_type(0);
  StatusInfo_TargetType_descriptor_ = StatusInfo_descriptor_->enum_type(1);
  StatusInfo_TriggerType_descriptor_ = StatusInfo_descriptor_->enum_type(2);
  StatusInfo_HurtType_descriptor_ = StatusInfo_descriptor_->enum_type(3);
  StatusInfo_PosType_descriptor_ = StatusInfo_descriptor_->enum_type(4);
  AllStatuses_descriptor_ = file->message_type(1);
  static const int AllStatuses_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllStatuses, statuses_),
  };
  AllStatuses_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllStatuses_descriptor_,
      AllStatuses::default_instance_,
      AllStatuses_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllStatuses, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllStatuses, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllStatuses));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StatusInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusInfo_descriptor_, &StatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllStatuses_descriptor_, &AllStatuses::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StatusInfo_2eproto() {
  delete StatusInfo::default_instance_;
  delete StatusInfo_reflection_;
  delete AllStatuses::default_instance_;
  delete AllStatuses_reflection_;
}

void protobuf_AddDesc_StatusInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020StatusInfo.proto\"\376\005\n\nStatusInfo\022\n\n\002id\030"
    "\001 \001(\005\022*\n\nstatusType\030\002 \001(\0162\026.StatusInfo.S"
    "tatusType\022\r\n\005value\030\003 \001(\005\022\017\n\007percent\030\004 \001("
    "\002\022\r\n\005count\030\005 \001(\005\022\020\n\010interval\030\006 \001(\005\022\014\n\004ra"
    "te\030\007 \001(\002\022*\n\ntargetType\030\010 \001(\0162\026.StatusInf"
    "o.TargetType\022,\n\013triggerType\030\t \001(\0162\027.Stat"
    "usInfo.TriggerType\022\014\n\004next\030\n \001(\005\022\013\n\003res\030"
    "\013 \001(\005\022&\n\010hurtType\030\014 \001(\0162\024.StatusInfo.Hur"
    "tType\022$\n\007posType\030\r \001(\0162\023.StatusInfo.PosT"
    "ype\"\333\001\n\nStatusType\022\010\n\004HURT\020\000\022\n\n\006STATIC\020\001"
    "\022\013\n\007FLYAWAY\020\002\022\007\n\003GOD\020\003\022\007\n\003SKY\020\004\022\n\n\006GROUN"
    "D\020\005\022\013\n\007STANDUP\020\006\022\t\n\005SPEED\020\007\022\014\n\010CANTMOVE\020"
    "\010\022\t\n\005GIDDY\020\t\022\010\n\004FEAR\020\n\022\013\n\007RECOVER\020\013\022\n\n\006F"
    "REEZE\020\014\022\016\n\nIGNORE_DEF\020\r\022\014\n\010SELF_ATT\020\016\022\014\n"
    "\010DEC_HURT\020\017\022\014\n\010ROOM_EXP\020\020\"7\n\nTargetType\022"
    "\r\n\tNO_TARGET\020\000\022\014\n\010ATTACKER\020\001\022\014\n\010DEFENDER"
    "\020\002\"B\n\013TriggerType\022\016\n\nNO_TRIGGER\020\000\022\007\n\003HIT"
    "\020\001\022\n\n\006ATTACK\020\002\022\016\n\nBEATTACKED\020\003\"\"\n\010HurtTy"
    "pe\022\n\n\006NORMAL\020\000\022\n\n\006ALWAYS\020\001\"\'\n\007PosType\022\010\n"
    "\004HEAD\020\000\022\010\n\004BODY\020\001\022\010\n\004FEET\020\002\",\n\013AllStatus"
    "es\022\035\n\010statuses\030\001 \003(\0132\013.StatusInfo", 833);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StatusInfo.proto", &protobuf_RegisterTypes);
  StatusInfo::default_instance_ = new StatusInfo();
  AllStatuses::default_instance_ = new AllStatuses();
  StatusInfo::default_instance_->InitAsDefaultInstance();
  AllStatuses::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StatusInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StatusInfo_2eproto {
  StaticDescriptorInitializer_StatusInfo_2eproto() {
    protobuf_AddDesc_StatusInfo_2eproto();
  }
} static_descriptor_initializer_StatusInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* StatusInfo_StatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_StatusType_descriptor_;
}
bool StatusInfo_StatusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusInfo_StatusType StatusInfo::HURT;
const StatusInfo_StatusType StatusInfo::STATIC;
const StatusInfo_StatusType StatusInfo::FLYAWAY;
const StatusInfo_StatusType StatusInfo::GOD;
const StatusInfo_StatusType StatusInfo::SKY;
const StatusInfo_StatusType StatusInfo::GROUND;
const StatusInfo_StatusType StatusInfo::STANDUP;
const StatusInfo_StatusType StatusInfo::SPEED;
const StatusInfo_StatusType StatusInfo::CANTMOVE;
const StatusInfo_StatusType StatusInfo::GIDDY;
const StatusInfo_StatusType StatusInfo::FEAR;
const StatusInfo_StatusType StatusInfo::RECOVER;
const StatusInfo_StatusType StatusInfo::FREEZE;
const StatusInfo_StatusType StatusInfo::IGNORE_DEF;
const StatusInfo_StatusType StatusInfo::SELF_ATT;
const StatusInfo_StatusType StatusInfo::DEC_HURT;
const StatusInfo_StatusType StatusInfo::ROOM_EXP;
const StatusInfo_StatusType StatusInfo::StatusType_MIN;
const StatusInfo_StatusType StatusInfo::StatusType_MAX;
const int StatusInfo::StatusType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* StatusInfo_TargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_TargetType_descriptor_;
}
bool StatusInfo_TargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusInfo_TargetType StatusInfo::NO_TARGET;
const StatusInfo_TargetType StatusInfo::ATTACKER;
const StatusInfo_TargetType StatusInfo::DEFENDER;
const StatusInfo_TargetType StatusInfo::TargetType_MIN;
const StatusInfo_TargetType StatusInfo::TargetType_MAX;
const int StatusInfo::TargetType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* StatusInfo_TriggerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_TriggerType_descriptor_;
}
bool StatusInfo_TriggerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusInfo_TriggerType StatusInfo::NO_TRIGGER;
const StatusInfo_TriggerType StatusInfo::HIT;
const StatusInfo_TriggerType StatusInfo::ATTACK;
const StatusInfo_TriggerType StatusInfo::BEATTACKED;
const StatusInfo_TriggerType StatusInfo::TriggerType_MIN;
const StatusInfo_TriggerType StatusInfo::TriggerType_MAX;
const int StatusInfo::TriggerType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* StatusInfo_HurtType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_HurtType_descriptor_;
}
bool StatusInfo_HurtType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusInfo_HurtType StatusInfo::NORMAL;
const StatusInfo_HurtType StatusInfo::ALWAYS;
const StatusInfo_HurtType StatusInfo::HurtType_MIN;
const StatusInfo_HurtType StatusInfo::HurtType_MAX;
const int StatusInfo::HurtType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* StatusInfo_PosType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_PosType_descriptor_;
}
bool StatusInfo_PosType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusInfo_PosType StatusInfo::HEAD;
const StatusInfo_PosType StatusInfo::BODY;
const StatusInfo_PosType StatusInfo::FEET;
const StatusInfo_PosType StatusInfo::PosType_MIN;
const StatusInfo_PosType StatusInfo::PosType_MAX;
const int StatusInfo::PosType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StatusInfo::kIdFieldNumber;
const int StatusInfo::kStatusTypeFieldNumber;
const int StatusInfo::kValueFieldNumber;
const int StatusInfo::kPercentFieldNumber;
const int StatusInfo::kCountFieldNumber;
const int StatusInfo::kIntervalFieldNumber;
const int StatusInfo::kRateFieldNumber;
const int StatusInfo::kTargetTypeFieldNumber;
const int StatusInfo::kTriggerTypeFieldNumber;
const int StatusInfo::kNextFieldNumber;
const int StatusInfo::kResFieldNumber;
const int StatusInfo::kHurtTypeFieldNumber;
const int StatusInfo::kPosTypeFieldNumber;
#endif  // !_MSC_VER

StatusInfo::StatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusInfo::InitAsDefaultInstance() {
}

StatusInfo::StatusInfo(const StatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  statusType_ = 0;
  value_ = 0;
  percent_ = 0;
  count_ = 0;
  interval_ = 0;
  rate_ = 0;
  targetType_ = 0;
  triggerType_ = 0;
  next_ = 0;
  res_ = 0;
  hurtType_ = 0;
  posType_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusInfo::~StatusInfo() {
  SharedDtor();
}

void StatusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_descriptor_;
}

const StatusInfo& StatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusInfo_2eproto();  return *default_instance_;
}

StatusInfo* StatusInfo::default_instance_ = NULL;

StatusInfo* StatusInfo::New() const {
  return new StatusInfo;
}

void StatusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    statusType_ = 0;
    value_ = 0;
    percent_ = 0;
    count_ = 0;
    interval_ = 0;
    rate_ = 0;
    targetType_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    triggerType_ = 0;
    next_ = 0;
    res_ = 0;
    hurtType_ = 0;
    posType_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_statusType;
        break;
      }
      
      // optional .StatusInfo.StatusType statusType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statusType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatusInfo_StatusType_IsValid(value)) {
            set_statusType(static_cast< ::StatusInfo_StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }
      
      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_percent;
        break;
      }
      
      // optional float percent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }
      
      // optional int32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_interval;
        break;
      }
      
      // optional int32 interval = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_rate;
        break;
      }
      
      // optional float rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_targetType;
        break;
      }
      
      // optional .StatusInfo.TargetType targetType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatusInfo_TargetType_IsValid(value)) {
            set_targetType(static_cast< ::StatusInfo_TargetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_triggerType;
        break;
      }
      
      // optional .StatusInfo.TriggerType triggerType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triggerType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatusInfo_TriggerType_IsValid(value)) {
            set_triggerType(static_cast< ::StatusInfo_TriggerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_next;
        break;
      }
      
      // optional int32 next = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_)));
          set_has_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_res;
        break;
      }
      
      // optional int32 res = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hurtType;
        break;
      }
      
      // optional .StatusInfo.HurtType hurtType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurtType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatusInfo_HurtType_IsValid(value)) {
            set_hurtType(static_cast< ::StatusInfo_HurtType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_posType;
        break;
      }
      
      // optional .StatusInfo.PosType posType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatusInfo_PosType_IsValid(value)) {
            set_posType(static_cast< ::StatusInfo_PosType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .StatusInfo.StatusType statusType = 2;
  if (has_statusType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->statusType(), output);
  }
  
  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }
  
  // optional float percent = 4;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->percent(), output);
  }
  
  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }
  
  // optional int32 interval = 6;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->interval(), output);
  }
  
  // optional float rate = 7;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rate(), output);
  }
  
  // optional .StatusInfo.TargetType targetType = 8;
  if (has_targetType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->targetType(), output);
  }
  
  // optional .StatusInfo.TriggerType triggerType = 9;
  if (has_triggerType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->triggerType(), output);
  }
  
  // optional int32 next = 10;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->next(), output);
  }
  
  // optional int32 res = 11;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->res(), output);
  }
  
  // optional .StatusInfo.HurtType hurtType = 12;
  if (has_hurtType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->hurtType(), output);
  }
  
  // optional .StatusInfo.PosType posType = 13;
  if (has_posType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->posType(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .StatusInfo.StatusType statusType = 2;
  if (has_statusType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->statusType(), target);
  }
  
  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }
  
  // optional float percent = 4;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->percent(), target);
  }
  
  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }
  
  // optional int32 interval = 6;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->interval(), target);
  }
  
  // optional float rate = 7;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rate(), target);
  }
  
  // optional .StatusInfo.TargetType targetType = 8;
  if (has_targetType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->targetType(), target);
  }
  
  // optional .StatusInfo.TriggerType triggerType = 9;
  if (has_triggerType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->triggerType(), target);
  }
  
  // optional int32 next = 10;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->next(), target);
  }
  
  // optional int32 res = 11;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->res(), target);
  }
  
  // optional .StatusInfo.HurtType hurtType = 12;
  if (has_hurtType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->hurtType(), target);
  }
  
  // optional .StatusInfo.PosType posType = 13;
  if (has_posType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->posType(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .StatusInfo.StatusType statusType = 2;
    if (has_statusType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->statusType());
    }
    
    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional float percent = 4;
    if (has_percent()) {
      total_size += 1 + 4;
    }
    
    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 interval = 6;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }
    
    // optional float rate = 7;
    if (has_rate()) {
      total_size += 1 + 4;
    }
    
    // optional .StatusInfo.TargetType targetType = 8;
    if (has_targetType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->targetType());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .StatusInfo.TriggerType triggerType = 9;
    if (has_triggerType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->triggerType());
    }
    
    // optional int32 next = 10;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next());
    }
    
    // optional int32 res = 11;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }
    
    // optional .StatusInfo.HurtType hurtType = 12;
    if (has_hurtType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hurtType());
    }
    
    // optional .StatusInfo.PosType posType = 13;
    if (has_posType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->posType());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusInfo::MergeFrom(const StatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_statusType()) {
      set_statusType(from.statusType());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_targetType()) {
      set_targetType(from.targetType());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_triggerType()) {
      set_triggerType(from.triggerType());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_hurtType()) {
      set_hurtType(from.hurtType());
    }
    if (from.has_posType()) {
      set_posType(from.posType());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusInfo::CopyFrom(const StatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusInfo::IsInitialized() const {
  
  return true;
}

void StatusInfo::Swap(StatusInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(statusType_, other->statusType_);
    std::swap(value_, other->value_);
    std::swap(percent_, other->percent_);
    std::swap(count_, other->count_);
    std::swap(interval_, other->interval_);
    std::swap(rate_, other->rate_);
    std::swap(targetType_, other->targetType_);
    std::swap(triggerType_, other->triggerType_);
    std::swap(next_, other->next_);
    std::swap(res_, other->res_);
    std::swap(hurtType_, other->hurtType_);
    std::swap(posType_, other->posType_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusInfo_descriptor_;
  metadata.reflection = StatusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllStatuses::kStatusesFieldNumber;
#endif  // !_MSC_VER

AllStatuses::AllStatuses()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllStatuses::InitAsDefaultInstance() {
}

AllStatuses::AllStatuses(const AllStatuses& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllStatuses::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllStatuses::~AllStatuses() {
  SharedDtor();
}

void AllStatuses::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllStatuses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllStatuses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllStatuses_descriptor_;
}

const AllStatuses& AllStatuses::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusInfo_2eproto();  return *default_instance_;
}

AllStatuses* AllStatuses::default_instance_ = NULL;

AllStatuses* AllStatuses::New() const {
  return new AllStatuses;
}

void AllStatuses::Clear() {
  statuses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllStatuses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .StatusInfo statuses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statuses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_statuses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllStatuses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .StatusInfo statuses = 1;
  for (int i = 0; i < this->statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statuses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllStatuses::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .StatusInfo statuses = 1;
  for (int i = 0; i < this->statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statuses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllStatuses::ByteSize() const {
  int total_size = 0;
  
  // repeated .StatusInfo statuses = 1;
  total_size += 1 * this->statuses_size();
  for (int i = 0; i < this->statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statuses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllStatuses::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllStatuses* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllStatuses*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllStatuses::MergeFrom(const AllStatuses& from) {
  GOOGLE_CHECK_NE(&from, this);
  statuses_.MergeFrom(from.statuses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllStatuses::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllStatuses::CopyFrom(const AllStatuses& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllStatuses::IsInitialized() const {
  
  return true;
}

void AllStatuses::Swap(AllStatuses* other) {
  if (other != this) {
    statuses_.Swap(&other->statuses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllStatuses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllStatuses_descriptor_;
  metadata.reflection = AllStatuses_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BoxInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BoxInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllBoxes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllBoxes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BoxInfo_2eproto() {
  protobuf_AddDesc_BoxInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BoxInfo.proto");
  GOOGLE_CHECK(file != NULL);
  BoxInfo_descriptor_ = file->message_type(0);
  static const int BoxInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, arg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, arg3_),
  };
  BoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxInfo_descriptor_,
      BoxInfo::default_instance_,
      BoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxInfo));
  BoxInfo_Type_descriptor_ = BoxInfo_descriptor_->enum_type(0);
  AllBoxes_descriptor_ = file->message_type(1);
  static const int AllBoxes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBoxes, boxes_),
  };
  AllBoxes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllBoxes_descriptor_,
      AllBoxes::default_instance_,
      AllBoxes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBoxes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBoxes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllBoxes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BoxInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxInfo_descriptor_, &BoxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllBoxes_descriptor_, &AllBoxes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BoxInfo_2eproto() {
  delete BoxInfo::default_instance_;
  delete BoxInfo_reflection_;
  delete AllBoxes::default_instance_;
  delete AllBoxes_reflection_;
}

void protobuf_AddDesc_BoxInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rBoxInfo.proto\"\306\002\n\007BoxInfo\022\n\n\002id\030\001 \001(\005\022"
    "\013\n\003num\030\002 \001(\005\022\014\n\004prof\030\003 \001(\010\022\033\n\004type\030\004 \003(\016"
    "2\r.BoxInfo.Type\022\014\n\004arg1\030\005 \003(\005\022\014\n\004arg2\030\006 "
    "\003(\005\022\014\n\004arg3\030\007 \003(\005\"\314\001\n\004Type\022\010\n\004NONE\020\000\022\007\n\003"
    "EXP\020\001\022\t\n\005MONEY\020\002\022\t\n\005GOODS\020\003\022\r\n\tEQUIPMENT"
    "\020\004\022\007\n\003RMB\020\005\022\010\n\004SOUL\020\006\022\014\n\010SOULJADE\020\007\022\r\n\tS"
    "OULSTONE\020\010\022\017\n\013DESIGNATION\020\t\022\013\n\007FASHION\020\n"
    "\022\n\n\006SUBRMB\020\013\022\010\n\004WING\020\014\022\014\n\010GODSCORE\020\r\022\r\n\t"
    "TRANSFORM\020\016\022\013\n\007GODSHIP\020\017\"#\n\010AllBoxes\022\027\n\005"
    "boxes\030\001 \003(\0132\010.BoxInfo", 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BoxInfo.proto", &protobuf_RegisterTypes);
  BoxInfo::default_instance_ = new BoxInfo();
  AllBoxes::default_instance_ = new AllBoxes();
  BoxInfo::default_instance_->InitAsDefaultInstance();
  AllBoxes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BoxInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BoxInfo_2eproto {
  StaticDescriptorInitializer_BoxInfo_2eproto() {
    protobuf_AddDesc_BoxInfo_2eproto();
  }
} static_descriptor_initializer_BoxInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* BoxInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxInfo_Type_descriptor_;
}
bool BoxInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BoxInfo_Type BoxInfo::NONE;
const BoxInfo_Type BoxInfo::EXP;
const BoxInfo_Type BoxInfo::MONEY;
const BoxInfo_Type BoxInfo::GOODS;
const BoxInfo_Type BoxInfo::EQUIPMENT;
const BoxInfo_Type BoxInfo::RMB;
const BoxInfo_Type BoxInfo::SOUL;
const BoxInfo_Type BoxInfo::SOULJADE;
const BoxInfo_Type BoxInfo::SOULSTONE;
const BoxInfo_Type BoxInfo::DESIGNATION;
const BoxInfo_Type BoxInfo::FASHION;
const BoxInfo_Type BoxInfo::SUBRMB;
const BoxInfo_Type BoxInfo::WING;
const BoxInfo_Type BoxInfo::GODSCORE;
const BoxInfo_Type BoxInfo::TRANSFORM;
const BoxInfo_Type BoxInfo::GODSHIP;
const BoxInfo_Type BoxInfo::Type_MIN;
const BoxInfo_Type BoxInfo::Type_MAX;
const int BoxInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BoxInfo::kIdFieldNumber;
const int BoxInfo::kNumFieldNumber;
const int BoxInfo::kProfFieldNumber;
const int BoxInfo::kTypeFieldNumber;
const int BoxInfo::kArg1FieldNumber;
const int BoxInfo::kArg2FieldNumber;
const int BoxInfo::kArg3FieldNumber;
#endif  // !_MSC_VER

BoxInfo::BoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoxInfo::InitAsDefaultInstance() {
}

BoxInfo::BoxInfo(const BoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoxInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  prof_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxInfo::~BoxInfo() {
  SharedDtor();
}

void BoxInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxInfo_descriptor_;
}

const BoxInfo& BoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BoxInfo_2eproto();  return *default_instance_;
}

BoxInfo* BoxInfo::default_instance_ = NULL;

BoxInfo* BoxInfo::New() const {
  return new BoxInfo;
}

void BoxInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
    prof_ = false;
  }
  type_.Clear();
  arg1_.Clear();
  arg2_.Clear();
  arg3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }
      
      // optional bool prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // repeated .BoxInfo.Type type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BoxInfo_Type_IsValid(value)) {
            add_type(static_cast< ::BoxInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::BoxInfo_Type_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        if (input->ExpectTag(40)) goto parse_arg1;
        break;
      }
      
      // repeated int32 arg1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_arg1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arg1;
        if (input->ExpectTag(48)) goto parse_arg2;
        break;
      }
      
      // repeated int32 arg2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_arg2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_arg2;
        if (input->ExpectTag(56)) goto parse_arg3;
        break;
      }
      
      // repeated int32 arg3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_arg3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_arg3;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // optional bool prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prof(), output);
  }
  
  // repeated .BoxInfo.Type type = 4;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(i), output);
  }
  
  // repeated int32 arg1 = 5;
  for (int i = 0; i < this->arg1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->arg1(i), output);
  }
  
  // repeated int32 arg2 = 6;
  for (int i = 0; i < this->arg2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->arg2(i), output);
  }
  
  // repeated int32 arg3 = 7;
  for (int i = 0; i < this->arg3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->arg3(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // optional bool prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prof(), target);
  }
  
  // repeated .BoxInfo.Type type = 4;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(i), target);
  }
  
  // repeated int32 arg1 = 5;
  for (int i = 0; i < this->arg1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->arg1(i), target);
  }
  
  // repeated int32 arg2 = 6;
  for (int i = 0; i < this->arg2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->arg2(i), target);
  }
  
  // repeated int32 arg3 = 7;
  for (int i = 0; i < this->arg3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->arg3(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoxInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional bool prof = 3;
    if (has_prof()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .BoxInfo.Type type = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  // repeated int32 arg1 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg1(i));
    }
    total_size += 1 * this->arg1_size() + data_size;
  }
  
  // repeated int32 arg2 = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg2(i));
    }
    total_size += 1 * this->arg2_size() + data_size;
  }
  
  // repeated int32 arg3 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg3(i));
    }
    total_size += 1 * this->arg3_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxInfo::MergeFrom(const BoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  arg1_.MergeFrom(from.arg1_);
  arg2_.MergeFrom(from.arg2_);
  arg3_.MergeFrom(from.arg3_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxInfo::CopyFrom(const BoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxInfo::IsInitialized() const {
  
  return true;
}

void BoxInfo::Swap(BoxInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(prof_, other->prof_);
    type_.Swap(&other->type_);
    arg1_.Swap(&other->arg1_);
    arg2_.Swap(&other->arg2_);
    arg3_.Swap(&other->arg3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxInfo_descriptor_;
  metadata.reflection = BoxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllBoxes::kBoxesFieldNumber;
#endif  // !_MSC_VER

AllBoxes::AllBoxes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllBoxes::InitAsDefaultInstance() {
}

AllBoxes::AllBoxes(const AllBoxes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllBoxes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllBoxes::~AllBoxes() {
  SharedDtor();
}

void AllBoxes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllBoxes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllBoxes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllBoxes_descriptor_;
}

const AllBoxes& AllBoxes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BoxInfo_2eproto();  return *default_instance_;
}

AllBoxes* AllBoxes::default_instance_ = NULL;

AllBoxes* AllBoxes::New() const {
  return new AllBoxes;
}

void AllBoxes::Clear() {
  boxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllBoxes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BoxInfo boxes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_boxes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllBoxes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BoxInfo boxes = 1;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boxes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllBoxes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BoxInfo boxes = 1;
  for (int i = 0; i < this->boxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boxes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllBoxes::ByteSize() const {
  int total_size = 0;
  
  // repeated .BoxInfo boxes = 1;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllBoxes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllBoxes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllBoxes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllBoxes::MergeFrom(const AllBoxes& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllBoxes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllBoxes::CopyFrom(const AllBoxes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllBoxes::IsInitialized() const {
  
  return true;
}

void AllBoxes::Swap(AllBoxes* other) {
  if (other != this) {
    boxes_.Swap(&other->boxes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllBoxes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllBoxes_descriptor_;
  metadata.reflection = AllBoxes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemBaseInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_ItemInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_ItemInfo_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ItemBaseInfo_2eproto() {
  protobuf_AddDesc_ItemBaseInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ItemBaseInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PB_ItemInfo_descriptor_ = file->message_type(0);
  static const int PB_ItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemInfo, count_),
  };
  PB_ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_ItemInfo_descriptor_,
      PB_ItemInfo::default_instance_,
      PB_ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_ItemInfo));
  PB_ItemInfo_Type_descriptor_ = PB_ItemInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ItemBaseInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_ItemInfo_descriptor_, &PB_ItemInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ItemBaseInfo_2eproto() {
  delete PB_ItemInfo::default_instance_;
  delete PB_ItemInfo_reflection_;
}

void protobuf_AddDesc_ItemBaseInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ItemBaseInfo.proto\"\374\002\n\013PB_ItemInfo\022\037\n\004"
    "type\030\001 \001(\0162\021.PB_ItemInfo.Type\022\n\n\002id\030\002 \001("
    "\003\022\r\n\005count\030\003 \001(\005\"\260\002\n\004Type\022\010\n\004NONE\020\000\022\t\n\005G"
    "OODS\020\001\022\r\n\tEQUIPMENT\020\002\022\t\n\005MONEY\020\003\022\t\n\005SKIL"
    "L\020\004\022\013\n\007FASHION\020\005\022\017\n\013DESIGNATION\020\006\022\007\n\003RMB"
    "\020\007\022\014\n\010SOULJADE\020\010\022\010\n\004SOUL\020\t\022\r\n\tSOULSTONE\020"
    "\n\022\007\n\003EXP\020\013\022\t\n\005HONOR\020\014\022\016\n\nDURABILITY\020\r\022\n\n"
    "\006SUBRMB\020\016\022\010\n\004WING\020\017\022\010\n\004RUNE\020\020\022\014\n\010GODSCOR"
    "E\020\021\022\r\n\tTRANSFORM\020\022\022\006\n\002HP\020\023\022\007\n\003PET\020\024\022\007\n\003V"
    "IP\020\025\022\t\n\005RIDES\020\026\022\013\n\007GODSHIP\020\027\022\r\n\tRIDESFOO"
    "D\020\030", 403);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ItemBaseInfo.proto", &protobuf_RegisterTypes);
  PB_ItemInfo::default_instance_ = new PB_ItemInfo();
  PB_ItemInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemBaseInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemBaseInfo_2eproto {
  StaticDescriptorInitializer_ItemBaseInfo_2eproto() {
    protobuf_AddDesc_ItemBaseInfo_2eproto();
  }
} static_descriptor_initializer_ItemBaseInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PB_ItemInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ItemInfo_Type_descriptor_;
}
bool PB_ItemInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_ItemInfo_Type PB_ItemInfo::NONE;
const PB_ItemInfo_Type PB_ItemInfo::GOODS;
const PB_ItemInfo_Type PB_ItemInfo::EQUIPMENT;
const PB_ItemInfo_Type PB_ItemInfo::MONEY;
const PB_ItemInfo_Type PB_ItemInfo::SKILL;
const PB_ItemInfo_Type PB_ItemInfo::FASHION;
const PB_ItemInfo_Type PB_ItemInfo::DESIGNATION;
const PB_ItemInfo_Type PB_ItemInfo::RMB;
const PB_ItemInfo_Type PB_ItemInfo::SOULJADE;
const PB_ItemInfo_Type PB_ItemInfo::SOUL;
const PB_ItemInfo_Type PB_ItemInfo::SOULSTONE;
const PB_ItemInfo_Type PB_ItemInfo::EXP;
const PB_ItemInfo_Type PB_ItemInfo::HONOR;
const PB_ItemInfo_Type PB_ItemInfo::DURABILITY;
const PB_ItemInfo_Type PB_ItemInfo::SUBRMB;
const PB_ItemInfo_Type PB_ItemInfo::WING;
const PB_ItemInfo_Type PB_ItemInfo::RUNE;
const PB_ItemInfo_Type PB_ItemInfo::GODSCORE;
const PB_ItemInfo_Type PB_ItemInfo::TRANSFORM;
const PB_ItemInfo_Type PB_ItemInfo::HP;
const PB_ItemInfo_Type PB_ItemInfo::PET;
const PB_ItemInfo_Type PB_ItemInfo::VIP;
const PB_ItemInfo_Type PB_ItemInfo::RIDES;
const PB_ItemInfo_Type PB_ItemInfo::GODSHIP;
const PB_ItemInfo_Type PB_ItemInfo::RIDESFOOD;
const PB_ItemInfo_Type PB_ItemInfo::Type_MIN;
const PB_ItemInfo_Type PB_ItemInfo::Type_MAX;
const int PB_ItemInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PB_ItemInfo::kTypeFieldNumber;
const int PB_ItemInfo::kIdFieldNumber;
const int PB_ItemInfo::kCountFieldNumber;
#endif  // !_MSC_VER

PB_ItemInfo::PB_ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_ItemInfo::InitAsDefaultInstance() {
}

PB_ItemInfo::PB_ItemInfo(const PB_ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_ItemInfo::~PB_ItemInfo() {
  SharedDtor();
}

void PB_ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ItemInfo_descriptor_;
}

const PB_ItemInfo& PB_ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemBaseInfo_2eproto();  return *default_instance_;
}

PB_ItemInfo* PB_ItemInfo::default_instance_ = NULL;

PB_ItemInfo* PB_ItemInfo::New() const {
  return new PB_ItemInfo;
}

void PB_ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_ItemInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ItemInfo_Type_IsValid(value)) {
            set_type(static_cast< ::PB_ItemInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_ItemInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_ItemInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_ItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_ItemInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_ItemInfo::MergeFrom(const PB_ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_ItemInfo::CopyFrom(const PB_ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_ItemInfo::IsInitialized() const {
  
  return true;
}

void PB_ItemInfo::Swap(PB_ItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_ItemInfo_descriptor_;
  metadata.reflection = PB_ItemInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

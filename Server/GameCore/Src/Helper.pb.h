// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Helper.proto

#ifndef PROTOBUF_Helper_2eproto__INCLUDED
#define PROTOBUF_Helper_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Helper_2eproto();
void protobuf_AssignDesc_Helper_2eproto();
void protobuf_ShutdownFile_Helper_2eproto();

class HelperNode;
class AllHelperNodes;
class HelperItem;
class HelperGroup;
class AllHelper;

enum HelperNode_BtnFunc {
  HelperNode_BtnFunc_NONE = 0,
  HelperNode_BtnFunc_UI_SINGLEMAP = 1,
  HelperNode_BtnFunc_UI_ELITEMAP = 2,
  HelperNode_BtnFunc_UI = 3
};
bool HelperNode_BtnFunc_IsValid(int value);
const HelperNode_BtnFunc HelperNode_BtnFunc_BtnFunc_MIN = HelperNode_BtnFunc_NONE;
const HelperNode_BtnFunc HelperNode_BtnFunc_BtnFunc_MAX = HelperNode_BtnFunc_UI;
const int HelperNode_BtnFunc_BtnFunc_ARRAYSIZE = HelperNode_BtnFunc_BtnFunc_MAX + 1;

const ::google::protobuf::EnumDescriptor* HelperNode_BtnFunc_descriptor();
inline const ::std::string& HelperNode_BtnFunc_Name(HelperNode_BtnFunc value) {
  return ::google::protobuf::internal::NameOfEnum(
    HelperNode_BtnFunc_descriptor(), value);
}
inline bool HelperNode_BtnFunc_Parse(
    const ::std::string& name, HelperNode_BtnFunc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HelperNode_BtnFunc>(
    HelperNode_BtnFunc_descriptor(), name, value);
}
// ===================================================================

class HelperNode : public ::google::protobuf::Message {
 public:
  HelperNode();
  virtual ~HelperNode();
  
  HelperNode(const HelperNode& from);
  
  inline HelperNode& operator=(const HelperNode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelperNode& default_instance();
  
  void Swap(HelperNode* other);
  
  // implements Message ----------------------------------------------
  
  HelperNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelperNode& from);
  void MergeFrom(const HelperNode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef HelperNode_BtnFunc BtnFunc;
  static const BtnFunc NONE = HelperNode_BtnFunc_NONE;
  static const BtnFunc UI_SINGLEMAP = HelperNode_BtnFunc_UI_SINGLEMAP;
  static const BtnFunc UI_ELITEMAP = HelperNode_BtnFunc_UI_ELITEMAP;
  static const BtnFunc UI = HelperNode_BtnFunc_UI;
  static inline bool BtnFunc_IsValid(int value) {
    return HelperNode_BtnFunc_IsValid(value);
  }
  static const BtnFunc BtnFunc_MIN =
    HelperNode_BtnFunc_BtnFunc_MIN;
  static const BtnFunc BtnFunc_MAX =
    HelperNode_BtnFunc_BtnFunc_MAX;
  static const int BtnFunc_ARRAYSIZE =
    HelperNode_BtnFunc_BtnFunc_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BtnFunc_descriptor() {
    return HelperNode_BtnFunc_descriptor();
  }
  static inline const ::std::string& BtnFunc_Name(BtnFunc value) {
    return HelperNode_BtnFunc_Name(value);
  }
  static inline bool BtnFunc_Parse(const ::std::string& name,
      BtnFunc* value) {
    return HelperNode_BtnFunc_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .HelperNode.BtnFunc btnFunc = 2;
  inline bool has_btnFunc() const;
  inline void clear_btnFunc();
  static const int kBtnFuncFieldNumber = 2;
  inline ::HelperNode_BtnFunc btnFunc() const;
  inline void set_btnFunc(::HelperNode_BtnFunc value);
  
  // optional int32 param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:HelperNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_btnFunc();
  inline void clear_has_btnFunc();
  inline void set_has_param();
  inline void clear_has_param();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  int btnFunc_;
  ::google::protobuf::int32 param_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Helper_2eproto();
  friend void protobuf_AssignDesc_Helper_2eproto();
  friend void protobuf_ShutdownFile_Helper_2eproto();
  
  void InitAsDefaultInstance();
  static HelperNode* default_instance_;
};
// -------------------------------------------------------------------

class AllHelperNodes : public ::google::protobuf::Message {
 public:
  AllHelperNodes();
  virtual ~AllHelperNodes();
  
  AllHelperNodes(const AllHelperNodes& from);
  
  inline AllHelperNodes& operator=(const AllHelperNodes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllHelperNodes& default_instance();
  
  void Swap(AllHelperNodes* other);
  
  // implements Message ----------------------------------------------
  
  AllHelperNodes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllHelperNodes& from);
  void MergeFrom(const AllHelperNodes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .HelperNode nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::HelperNode& nodes(int index) const;
  inline ::HelperNode* mutable_nodes(int index);
  inline ::HelperNode* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::HelperNode >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelperNode >*
      mutable_nodes();
  
  // @@protoc_insertion_point(class_scope:AllHelperNodes)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HelperNode > nodes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Helper_2eproto();
  friend void protobuf_AssignDesc_Helper_2eproto();
  friend void protobuf_ShutdownFile_Helper_2eproto();
  
  void InitAsDefaultInstance();
  static AllHelperNodes* default_instance_;
};
// -------------------------------------------------------------------

class HelperItem : public ::google::protobuf::Message {
 public:
  HelperItem();
  virtual ~HelperItem();
  
  HelperItem(const HelperItem& from);
  
  inline HelperItem& operator=(const HelperItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelperItem& default_instance();
  
  void Swap(HelperItem* other);
  
  // implements Message ----------------------------------------------
  
  HelperItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelperItem& from);
  void MergeFrom(const HelperItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string nodeNames = 2;
  inline bool has_nodeNames() const;
  inline void clear_nodeNames();
  static const int kNodeNamesFieldNumber = 2;
  inline const ::std::string& nodeNames() const;
  inline void set_nodeNames(const ::std::string& value);
  inline void set_nodeNames(const char* value);
  inline void set_nodeNames(const char* value, size_t size);
  inline ::std::string* mutable_nodeNames();
  inline ::std::string* release_nodeNames();
  
  // optional string nodeDesc = 3;
  inline bool has_nodeDesc() const;
  inline void clear_nodeDesc();
  static const int kNodeDescFieldNumber = 3;
  inline const ::std::string& nodeDesc() const;
  inline void set_nodeDesc(const ::std::string& value);
  inline void set_nodeDesc(const char* value);
  inline void set_nodeDesc(const char* value, size_t size);
  inline ::std::string* mutable_nodeDesc();
  inline ::std::string* release_nodeDesc();
  
  // @@protoc_insertion_point(class_scope:HelperItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nodeNames();
  inline void clear_has_nodeNames();
  inline void set_has_nodeDesc();
  inline void clear_has_nodeDesc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* nodeNames_;
  ::std::string* nodeDesc_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Helper_2eproto();
  friend void protobuf_AssignDesc_Helper_2eproto();
  friend void protobuf_ShutdownFile_Helper_2eproto();
  
  void InitAsDefaultInstance();
  static HelperItem* default_instance_;
};
// -------------------------------------------------------------------

class HelperGroup : public ::google::protobuf::Message {
 public:
  HelperGroup();
  virtual ~HelperGroup();
  
  HelperGroup(const HelperGroup& from);
  
  inline HelperGroup& operator=(const HelperGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelperGroup& default_instance();
  
  void Swap(HelperGroup* other);
  
  // implements Message ----------------------------------------------
  
  HelperGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelperGroup& from);
  void MergeFrom(const HelperGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .HelperItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::HelperItem& items(int index) const;
  inline ::HelperItem* mutable_items(int index);
  inline ::HelperItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::HelperItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelperItem >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:HelperGroup)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::HelperItem > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Helper_2eproto();
  friend void protobuf_AssignDesc_Helper_2eproto();
  friend void protobuf_ShutdownFile_Helper_2eproto();
  
  void InitAsDefaultInstance();
  static HelperGroup* default_instance_;
};
// -------------------------------------------------------------------

class AllHelper : public ::google::protobuf::Message {
 public:
  AllHelper();
  virtual ~AllHelper();
  
  AllHelper(const AllHelper& from);
  
  inline AllHelper& operator=(const AllHelper& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllHelper& default_instance();
  
  void Swap(AllHelper* other);
  
  // implements Message ----------------------------------------------
  
  AllHelper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllHelper& from);
  void MergeFrom(const AllHelper& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .HelperGroup helpers = 1;
  inline int helpers_size() const;
  inline void clear_helpers();
  static const int kHelpersFieldNumber = 1;
  inline const ::HelperGroup& helpers(int index) const;
  inline ::HelperGroup* mutable_helpers(int index);
  inline ::HelperGroup* add_helpers();
  inline const ::google::protobuf::RepeatedPtrField< ::HelperGroup >&
      helpers() const;
  inline ::google::protobuf::RepeatedPtrField< ::HelperGroup >*
      mutable_helpers();
  
  // @@protoc_insertion_point(class_scope:AllHelper)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HelperGroup > helpers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Helper_2eproto();
  friend void protobuf_AssignDesc_Helper_2eproto();
  friend void protobuf_ShutdownFile_Helper_2eproto();
  
  void InitAsDefaultInstance();
  static AllHelper* default_instance_;
};
// ===================================================================


// ===================================================================

// HelperNode

// optional int32 id = 1;
inline bool HelperNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelperNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelperNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelperNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 HelperNode::id() const {
  return id_;
}
inline void HelperNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .HelperNode.BtnFunc btnFunc = 2;
inline bool HelperNode::has_btnFunc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelperNode::set_has_btnFunc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelperNode::clear_has_btnFunc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelperNode::clear_btnFunc() {
  btnFunc_ = 0;
  clear_has_btnFunc();
}
inline ::HelperNode_BtnFunc HelperNode::btnFunc() const {
  return static_cast< ::HelperNode_BtnFunc >(btnFunc_);
}
inline void HelperNode::set_btnFunc(::HelperNode_BtnFunc value) {
  GOOGLE_DCHECK(::HelperNode_BtnFunc_IsValid(value));
  set_has_btnFunc();
  btnFunc_ = value;
}

// optional int32 param = 3;
inline bool HelperNode::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HelperNode::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HelperNode::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HelperNode::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 HelperNode::param() const {
  return param_;
}
inline void HelperNode::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// AllHelperNodes

// repeated .HelperNode nodes = 1;
inline int AllHelperNodes::nodes_size() const {
  return nodes_.size();
}
inline void AllHelperNodes::clear_nodes() {
  nodes_.Clear();
}
inline const ::HelperNode& AllHelperNodes::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::HelperNode* AllHelperNodes::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::HelperNode* AllHelperNodes::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelperNode >&
AllHelperNodes::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelperNode >*
AllHelperNodes::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// HelperItem

// optional int32 id = 1;
inline bool HelperItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelperItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelperItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelperItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 HelperItem::id() const {
  return id_;
}
inline void HelperItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string nodeNames = 2;
inline bool HelperItem::has_nodeNames() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelperItem::set_has_nodeNames() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelperItem::clear_has_nodeNames() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelperItem::clear_nodeNames() {
  if (nodeNames_ != &::google::protobuf::internal::kEmptyString) {
    nodeNames_->clear();
  }
  clear_has_nodeNames();
}
inline const ::std::string& HelperItem::nodeNames() const {
  return *nodeNames_;
}
inline void HelperItem::set_nodeNames(const ::std::string& value) {
  set_has_nodeNames();
  if (nodeNames_ == &::google::protobuf::internal::kEmptyString) {
    nodeNames_ = new ::std::string;
  }
  nodeNames_->assign(value);
}
inline void HelperItem::set_nodeNames(const char* value) {
  set_has_nodeNames();
  if (nodeNames_ == &::google::protobuf::internal::kEmptyString) {
    nodeNames_ = new ::std::string;
  }
  nodeNames_->assign(value);
}
inline void HelperItem::set_nodeNames(const char* value, size_t size) {
  set_has_nodeNames();
  if (nodeNames_ == &::google::protobuf::internal::kEmptyString) {
    nodeNames_ = new ::std::string;
  }
  nodeNames_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelperItem::mutable_nodeNames() {
  set_has_nodeNames();
  if (nodeNames_ == &::google::protobuf::internal::kEmptyString) {
    nodeNames_ = new ::std::string;
  }
  return nodeNames_;
}
inline ::std::string* HelperItem::release_nodeNames() {
  clear_has_nodeNames();
  if (nodeNames_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nodeNames_;
    nodeNames_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string nodeDesc = 3;
inline bool HelperItem::has_nodeDesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HelperItem::set_has_nodeDesc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HelperItem::clear_has_nodeDesc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HelperItem::clear_nodeDesc() {
  if (nodeDesc_ != &::google::protobuf::internal::kEmptyString) {
    nodeDesc_->clear();
  }
  clear_has_nodeDesc();
}
inline const ::std::string& HelperItem::nodeDesc() const {
  return *nodeDesc_;
}
inline void HelperItem::set_nodeDesc(const ::std::string& value) {
  set_has_nodeDesc();
  if (nodeDesc_ == &::google::protobuf::internal::kEmptyString) {
    nodeDesc_ = new ::std::string;
  }
  nodeDesc_->assign(value);
}
inline void HelperItem::set_nodeDesc(const char* value) {
  set_has_nodeDesc();
  if (nodeDesc_ == &::google::protobuf::internal::kEmptyString) {
    nodeDesc_ = new ::std::string;
  }
  nodeDesc_->assign(value);
}
inline void HelperItem::set_nodeDesc(const char* value, size_t size) {
  set_has_nodeDesc();
  if (nodeDesc_ == &::google::protobuf::internal::kEmptyString) {
    nodeDesc_ = new ::std::string;
  }
  nodeDesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelperItem::mutable_nodeDesc() {
  set_has_nodeDesc();
  if (nodeDesc_ == &::google::protobuf::internal::kEmptyString) {
    nodeDesc_ = new ::std::string;
  }
  return nodeDesc_;
}
inline ::std::string* HelperItem::release_nodeDesc() {
  clear_has_nodeDesc();
  if (nodeDesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nodeDesc_;
    nodeDesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// HelperGroup

// optional string name = 1;
inline bool HelperGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelperGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelperGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelperGroup::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HelperGroup::name() const {
  return *name_;
}
inline void HelperGroup::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelperGroup::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelperGroup::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelperGroup::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HelperGroup::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .HelperItem items = 2;
inline int HelperGroup::items_size() const {
  return items_.size();
}
inline void HelperGroup::clear_items() {
  items_.Clear();
}
inline const ::HelperItem& HelperGroup::items(int index) const {
  return items_.Get(index);
}
inline ::HelperItem* HelperGroup::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::HelperItem* HelperGroup::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelperItem >&
HelperGroup::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelperItem >*
HelperGroup::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// AllHelper

// repeated .HelperGroup helpers = 1;
inline int AllHelper::helpers_size() const {
  return helpers_.size();
}
inline void AllHelper::clear_helpers() {
  helpers_.Clear();
}
inline const ::HelperGroup& AllHelper::helpers(int index) const {
  return helpers_.Get(index);
}
inline ::HelperGroup* AllHelper::mutable_helpers(int index) {
  return helpers_.Mutable(index);
}
inline ::HelperGroup* AllHelper::add_helpers() {
  return helpers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HelperGroup >&
AllHelper::helpers() const {
  return helpers_;
}
inline ::google::protobuf::RepeatedPtrField< ::HelperGroup >*
AllHelper::mutable_helpers() {
  return &helpers_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HelperNode_BtnFunc>() {
  return ::HelperNode_BtnFunc_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Helper_2eproto__INCLUDED

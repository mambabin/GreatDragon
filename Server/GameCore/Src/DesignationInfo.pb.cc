// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DesignationInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DesignationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DesignationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllDesignationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllDesignationInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DesignationInfo_2eproto() {
  protobuf_AddDesc_DesignationInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DesignationInfo.proto");
  GOOGLE_CHECK(file != NULL);
  DesignationInfo_descriptor_ = file->message_type(0);
  static const int DesignationInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, propertiesDelta_),
  };
  DesignationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DesignationInfo_descriptor_,
      DesignationInfo::default_instance_,
      DesignationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesignationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DesignationInfo));
  AllDesignationInfo_descriptor_ = file->message_type(1);
  static const int AllDesignationInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDesignationInfo, designationInfo_),
  };
  AllDesignationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllDesignationInfo_descriptor_,
      AllDesignationInfo::default_instance_,
      AllDesignationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDesignationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDesignationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllDesignationInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DesignationInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DesignationInfo_descriptor_, &DesignationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllDesignationInfo_descriptor_, &AllDesignationInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DesignationInfo_2eproto() {
  delete DesignationInfo::default_instance_;
  delete DesignationInfo_reflection_;
  delete AllDesignationInfo::default_instance_;
  delete AllDesignationInfo_reflection_;
}

void protobuf_AddDesc_DesignationInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_FightInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025DesignationInfo.proto\032\017FightInfo.proto"
    "\"\271\001\n\017DesignationInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name"
    "\030\002 \001(\t\022\r\n\005group\030\003 \001(\005\022\014\n\004pass\030\004 \001(\005\022\013\n\003p"
    "ic\030\005 \001(\005\022\014\n\004desc\030\006 \001(\t\022\014\n\004time\030\007 \001(\005\022-\n\n"
    "properties\030\010 \003(\0162\031.PB_FightAtt.PropertyT"
    "ype\022\027\n\017propertiesDelta\030\t \003(\005\"\?\n\022AllDesig"
    "nationInfo\022)\n\017designationInfo\030\001 \003(\0132\020.De"
    "signationInfo", 293);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DesignationInfo.proto", &protobuf_RegisterTypes);
  DesignationInfo::default_instance_ = new DesignationInfo();
  AllDesignationInfo::default_instance_ = new AllDesignationInfo();
  DesignationInfo::default_instance_->InitAsDefaultInstance();
  AllDesignationInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DesignationInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DesignationInfo_2eproto {
  StaticDescriptorInitializer_DesignationInfo_2eproto() {
    protobuf_AddDesc_DesignationInfo_2eproto();
  }
} static_descriptor_initializer_DesignationInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DesignationInfo::kIdFieldNumber;
const int DesignationInfo::kNameFieldNumber;
const int DesignationInfo::kGroupFieldNumber;
const int DesignationInfo::kPassFieldNumber;
const int DesignationInfo::kPicFieldNumber;
const int DesignationInfo::kDescFieldNumber;
const int DesignationInfo::kTimeFieldNumber;
const int DesignationInfo::kPropertiesFieldNumber;
const int DesignationInfo::kPropertiesDeltaFieldNumber;
#endif  // !_MSC_VER

DesignationInfo::DesignationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DesignationInfo::InitAsDefaultInstance() {
}

DesignationInfo::DesignationInfo(const DesignationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DesignationInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = 0;
  pass_ = 0;
  pic_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DesignationInfo::~DesignationInfo() {
  SharedDtor();
}

void DesignationInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void DesignationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DesignationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DesignationInfo_descriptor_;
}

const DesignationInfo& DesignationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DesignationInfo_2eproto();  return *default_instance_;
}

DesignationInfo* DesignationInfo::default_instance_ = NULL;

DesignationInfo* DesignationInfo::New() const {
  return new DesignationInfo;
}

void DesignationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    group_ = 0;
    pass_ = 0;
    pic_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    time_ = 0;
  }
  properties_.Clear();
  propertiesDelta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DesignationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }
      
      // optional int32 group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pass;
        break;
      }
      
      // optional int32 pass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pic;
        break;
      }
      
      // optional int32 pic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }
      
      // optional string desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }
      
      // optional int32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_properties;
        break;
      }
      
      // repeated .PB_FightAtt.PropertyType properties = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_properties:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_FightAtt_PropertyType_IsValid(value)) {
            add_properties(static_cast< ::PB_FightAtt_PropertyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::PB_FightAtt_PropertyType_IsValid,
                 this->mutable_properties())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_properties;
        if (input->ExpectTag(72)) goto parse_propertiesDelta;
        break;
      }
      
      // repeated int32 propertiesDelta = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertiesDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_propertiesDelta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_propertiesDelta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_propertiesDelta;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DesignationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group(), output);
  }
  
  // optional int32 pass = 4;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pass(), output);
  }
  
  // optional int32 pic = 5;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pic(), output);
  }
  
  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->desc(), output);
  }
  
  // optional int32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time(), output);
  }
  
  // repeated .PB_FightAtt.PropertyType properties = 8;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->properties(i), output);
  }
  
  // repeated int32 propertiesDelta = 9;
  for (int i = 0; i < this->propertiesDelta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->propertiesDelta(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DesignationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group(), target);
  }
  
  // optional int32 pass = 4;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pass(), target);
  }
  
  // optional int32 pic = 5;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pic(), target);
  }
  
  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desc(), target);
  }
  
  // optional int32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time(), target);
  }
  
  // repeated .PB_FightAtt.PropertyType properties = 8;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->properties(i), target);
  }
  
  // repeated int32 propertiesDelta = 9;
  for (int i = 0; i < this->propertiesDelta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->propertiesDelta(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DesignationInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }
    
    // optional int32 pass = 4;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }
    
    // optional int32 pic = 5;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }
    
    // optional string desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  // repeated .PB_FightAtt.PropertyType properties = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->properties_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->properties(i));
    }
    total_size += 1 * this->properties_size() + data_size;
  }
  
  // repeated int32 propertiesDelta = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->propertiesDelta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->propertiesDelta(i));
    }
    total_size += 1 * this->propertiesDelta_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesignationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DesignationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DesignationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DesignationInfo::MergeFrom(const DesignationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  propertiesDelta_.MergeFrom(from.propertiesDelta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DesignationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DesignationInfo::CopyFrom(const DesignationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesignationInfo::IsInitialized() const {
  
  return true;
}

void DesignationInfo::Swap(DesignationInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(group_, other->group_);
    std::swap(pass_, other->pass_);
    std::swap(pic_, other->pic_);
    std::swap(desc_, other->desc_);
    std::swap(time_, other->time_);
    properties_.Swap(&other->properties_);
    propertiesDelta_.Swap(&other->propertiesDelta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DesignationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DesignationInfo_descriptor_;
  metadata.reflection = DesignationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllDesignationInfo::kDesignationInfoFieldNumber;
#endif  // !_MSC_VER

AllDesignationInfo::AllDesignationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllDesignationInfo::InitAsDefaultInstance() {
}

AllDesignationInfo::AllDesignationInfo(const AllDesignationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllDesignationInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllDesignationInfo::~AllDesignationInfo() {
  SharedDtor();
}

void AllDesignationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllDesignationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllDesignationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllDesignationInfo_descriptor_;
}

const AllDesignationInfo& AllDesignationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DesignationInfo_2eproto();  return *default_instance_;
}

AllDesignationInfo* AllDesignationInfo::default_instance_ = NULL;

AllDesignationInfo* AllDesignationInfo::New() const {
  return new AllDesignationInfo;
}

void AllDesignationInfo::Clear() {
  designationInfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllDesignationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DesignationInfo designationInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_designationInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_designationInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_designationInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllDesignationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DesignationInfo designationInfo = 1;
  for (int i = 0; i < this->designationInfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->designationInfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllDesignationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DesignationInfo designationInfo = 1;
  for (int i = 0; i < this->designationInfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->designationInfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllDesignationInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .DesignationInfo designationInfo = 1;
  total_size += 1 * this->designationInfo_size();
  for (int i = 0; i < this->designationInfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->designationInfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllDesignationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllDesignationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllDesignationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllDesignationInfo::MergeFrom(const AllDesignationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  designationInfo_.MergeFrom(from.designationInfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllDesignationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllDesignationInfo::CopyFrom(const AllDesignationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllDesignationInfo::IsInitialized() const {
  
  return true;
}

void AllDesignationInfo::Swap(AllDesignationInfo* other) {
  if (other != this) {
    designationInfo_.Swap(&other->designationInfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllDesignationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllDesignationInfo_descriptor_;
  metadata.reflection = AllDesignationInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

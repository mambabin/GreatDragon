// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentRandom.proto

#ifndef PROTOBUF_EquipmentRandom_2eproto__INCLUDED
#define PROTOBUF_EquipmentRandom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "EquipmentInfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EquipmentRandom_2eproto();
void protobuf_AssignDesc_EquipmentRandom_2eproto();
void protobuf_ShutdownFile_EquipmentRandom_2eproto();

class EquipmentRandomColor;
class AllEquipmentRandomColor;
class EquipmentRandomPos;
class AllEquipmentRandomPos;
class EquipmentRandomLevel;
class AllEquipmentRandomLevel;
class EquipmentRandomEffect;
class AllEquipmentRandomEffect;

// ===================================================================

class EquipmentRandomColor : public ::google::protobuf::Message {
 public:
  EquipmentRandomColor();
  virtual ~EquipmentRandomColor();
  
  EquipmentRandomColor(const EquipmentRandomColor& from);
  
  inline EquipmentRandomColor& operator=(const EquipmentRandomColor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRandomColor& default_instance();
  
  void Swap(EquipmentRandomColor* other);
  
  // implements Message ----------------------------------------------
  
  EquipmentRandomColor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRandomColor& from);
  void MergeFrom(const EquipmentRandomColor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .EquipmentInfo.ColorType color = 1;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline ::EquipmentInfo_ColorType color() const;
  inline void set_color(::EquipmentInfo_ColorType value);
  
  // optional int32 chance1 = 2;
  inline bool has_chance1() const;
  inline void clear_chance1();
  static const int kChance1FieldNumber = 2;
  inline ::google::protobuf::int32 chance1() const;
  inline void set_chance1(::google::protobuf::int32 value);
  
  // optional int32 chance2 = 3;
  inline bool has_chance2() const;
  inline void clear_chance2();
  static const int kChance2FieldNumber = 3;
  inline ::google::protobuf::int32 chance2() const;
  inline void set_chance2(::google::protobuf::int32 value);
  
  // optional int32 chance3 = 4;
  inline bool has_chance3() const;
  inline void clear_chance3();
  static const int kChance3FieldNumber = 4;
  inline ::google::protobuf::int32 chance3() const;
  inline void set_chance3(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:EquipmentRandomColor)
 private:
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_chance1();
  inline void clear_has_chance1();
  inline void set_has_chance2();
  inline void clear_has_chance2();
  inline void set_has_chance3();
  inline void clear_has_chance3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int color_;
  ::google::protobuf::int32 chance1_;
  ::google::protobuf::int32 chance2_;
  ::google::protobuf::int32 chance3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentRandom_2eproto();
  friend void protobuf_AssignDesc_EquipmentRandom_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRandom_2eproto();
  
  void InitAsDefaultInstance();
  static EquipmentRandomColor* default_instance_;
};
// -------------------------------------------------------------------

class AllEquipmentRandomColor : public ::google::protobuf::Message {
 public:
  AllEquipmentRandomColor();
  virtual ~AllEquipmentRandomColor();
  
  AllEquipmentRandomColor(const AllEquipmentRandomColor& from);
  
  inline AllEquipmentRandomColor& operator=(const AllEquipmentRandomColor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllEquipmentRandomColor& default_instance();
  
  void Swap(AllEquipmentRandomColor* other);
  
  // implements Message ----------------------------------------------
  
  AllEquipmentRandomColor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllEquipmentRandomColor& from);
  void MergeFrom(const AllEquipmentRandomColor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .EquipmentRandomColor equipmentRandomColor = 1;
  inline int equipmentRandomColor_size() const;
  inline void clear_equipmentRandomColor();
  static const int kEquipmentRandomColorFieldNumber = 1;
  inline const ::EquipmentRandomColor& equipmentRandomColor(int index) const;
  inline ::EquipmentRandomColor* mutable_equipmentRandomColor(int index);
  inline ::EquipmentRandomColor* add_equipmentRandomColor();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentRandomColor >&
      equipmentRandomColor() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentRandomColor >*
      mutable_equipmentRandomColor();
  
  // @@protoc_insertion_point(class_scope:AllEquipmentRandomColor)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::EquipmentRandomColor > equipmentRandomColor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentRandom_2eproto();
  friend void protobuf_AssignDesc_EquipmentRandom_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRandom_2eproto();
  
  void InitAsDefaultInstance();
  static AllEquipmentRandomColor* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRandomPos : public ::google::protobuf::Message {
 public:
  EquipmentRandomPos();
  virtual ~EquipmentRandomPos();
  
  EquipmentRandomPos(const EquipmentRandomPos& from);
  
  inline EquipmentRandomPos& operator=(const EquipmentRandomPos& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRandomPos& default_instance();
  
  void Swap(EquipmentRandomPos* other);
  
  // implements Message ----------------------------------------------
  
  EquipmentRandomPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRandomPos& from);
  void MergeFrom(const EquipmentRandomPos& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .EquipmentInfo.Type pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::EquipmentInfo_Type pos() const;
  inline void set_pos(::EquipmentInfo_Type value);
  
  // optional int32 atk = 2;
  inline bool has_atk() const;
  inline void clear_atk();
  static const int kAtkFieldNumber = 2;
  inline ::google::protobuf::int32 atk() const;
  inline void set_atk(::google::protobuf::int32 value);
  
  // optional int32 def = 3;
  inline bool has_def() const;
  inline void clear_def();
  static const int kDefFieldNumber = 3;
  inline ::google::protobuf::int32 def() const;
  inline void set_def(::google::protobuf::int32 value);
  
  // optional int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional int32 crit = 5;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 5;
  inline ::google::protobuf::int32 crit() const;
  inline void set_crit(::google::protobuf::int32 value);
  
  // optional int32 accuracy = 6;
  inline bool has_accuracy() const;
  inline void clear_accuracy();
  static const int kAccuracyFieldNumber = 6;
  inline ::google::protobuf::int32 accuracy() const;
  inline void set_accuracy(::google::protobuf::int32 value);
  
  // optional int32 dodge = 7;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 7;
  inline ::google::protobuf::int32 dodge() const;
  inline void set_dodge(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:EquipmentRandomPos)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_atk();
  inline void clear_has_atk();
  inline void set_has_def();
  inline void clear_has_def();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_accuracy();
  inline void clear_has_accuracy();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int pos_;
  ::google::protobuf::int32 atk_;
  ::google::protobuf::int32 def_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 crit_;
  ::google::protobuf::int32 accuracy_;
  ::google::protobuf::int32 dodge_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentRandom_2eproto();
  friend void protobuf_AssignDesc_EquipmentRandom_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRandom_2eproto();
  
  void InitAsDefaultInstance();
  static EquipmentRandomPos* default_instance_;
};
// -------------------------------------------------------------------

class AllEquipmentRandomPos : public ::google::protobuf::Message {
 public:
  AllEquipmentRandomPos();
  virtual ~AllEquipmentRandomPos();
  
  AllEquipmentRandomPos(const AllEquipmentRandomPos& from);
  
  inline AllEquipmentRandomPos& operator=(const AllEquipmentRandomPos& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllEquipmentRandomPos& default_instance();
  
  void Swap(AllEquipmentRandomPos* other);
  
  // implements Message ----------------------------------------------
  
  AllEquipmentRandomPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllEquipmentRandomPos& from);
  void MergeFrom(const AllEquipmentRandomPos& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .EquipmentRandomPos equipmentRandomPos = 1;
  inline int equipmentRandomPos_size() const;
  inline void clear_equipmentRandomPos();
  static const int kEquipmentRandomPosFieldNumber = 1;
  inline const ::EquipmentRandomPos& equipmentRandomPos(int index) const;
  inline ::EquipmentRandomPos* mutable_equipmentRandomPos(int index);
  inline ::EquipmentRandomPos* add_equipmentRandomPos();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentRandomPos >&
      equipmentRandomPos() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentRandomPos >*
      mutable_equipmentRandomPos();
  
  // @@protoc_insertion_point(class_scope:AllEquipmentRandomPos)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::EquipmentRandomPos > equipmentRandomPos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentRandom_2eproto();
  friend void protobuf_AssignDesc_EquipmentRandom_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRandom_2eproto();
  
  void InitAsDefaultInstance();
  static AllEquipmentRandomPos* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRandomLevel : public ::google::protobuf::Message {
 public:
  EquipmentRandomLevel();
  virtual ~EquipmentRandomLevel();
  
  EquipmentRandomLevel(const EquipmentRandomLevel& from);
  
  inline EquipmentRandomLevel& operator=(const EquipmentRandomLevel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRandomLevel& default_instance();
  
  void Swap(EquipmentRandomLevel* other);
  
  // implements Message ----------------------------------------------
  
  EquipmentRandomLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRandomLevel& from);
  void MergeFrom(const EquipmentRandomLevel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 atkMin = 2;
  inline bool has_atkMin() const;
  inline void clear_atkMin();
  static const int kAtkMinFieldNumber = 2;
  inline ::google::protobuf::int32 atkMin() const;
  inline void set_atkMin(::google::protobuf::int32 value);
  
  // optional int32 atkMax = 3;
  inline bool has_atkMax() const;
  inline void clear_atkMax();
  static const int kAtkMaxFieldNumber = 3;
  inline ::google::protobuf::int32 atkMax() const;
  inline void set_atkMax(::google::protobuf::int32 value);
  
  // optional int32 defMin = 4;
  inline bool has_defMin() const;
  inline void clear_defMin();
  static const int kDefMinFieldNumber = 4;
  inline ::google::protobuf::int32 defMin() const;
  inline void set_defMin(::google::protobuf::int32 value);
  
  // optional int32 defMax = 5;
  inline bool has_defMax() const;
  inline void clear_defMax();
  static const int kDefMaxFieldNumber = 5;
  inline ::google::protobuf::int32 defMax() const;
  inline void set_defMax(::google::protobuf::int32 value);
  
  // optional int32 hpMin = 6;
  inline bool has_hpMin() const;
  inline void clear_hpMin();
  static const int kHpMinFieldNumber = 6;
  inline ::google::protobuf::int32 hpMin() const;
  inline void set_hpMin(::google::protobuf::int32 value);
  
  // optional int32 hpMax = 7;
  inline bool has_hpMax() const;
  inline void clear_hpMax();
  static const int kHpMaxFieldNumber = 7;
  inline ::google::protobuf::int32 hpMax() const;
  inline void set_hpMax(::google::protobuf::int32 value);
  
  // optional int32 critMin = 8;
  inline bool has_critMin() const;
  inline void clear_critMin();
  static const int kCritMinFieldNumber = 8;
  inline ::google::protobuf::int32 critMin() const;
  inline void set_critMin(::google::protobuf::int32 value);
  
  // optional int32 critMax = 9;
  inline bool has_critMax() const;
  inline void clear_critMax();
  static const int kCritMaxFieldNumber = 9;
  inline ::google::protobuf::int32 critMax() const;
  inline void set_critMax(::google::protobuf::int32 value);
  
  // optional int32 accuracyMin = 10;
  inline bool has_accuracyMin() const;
  inline void clear_accuracyMin();
  static const int kAccuracyMinFieldNumber = 10;
  inline ::google::protobuf::int32 accuracyMin() const;
  inline void set_accuracyMin(::google::protobuf::int32 value);
  
  // optional int32 accuracyMax = 11;
  inline bool has_accuracyMax() const;
  inline void clear_accuracyMax();
  static const int kAccuracyMaxFieldNumber = 11;
  inline ::google::protobuf::int32 accuracyMax() const;
  inline void set_accuracyMax(::google::protobuf::int32 value);
  
  // optional int32 dodgeMin = 12;
  inline bool has_dodgeMin() const;
  inline void clear_dodgeMin();
  static const int kDodgeMinFieldNumber = 12;
  inline ::google::protobuf::int32 dodgeMin() const;
  inline void set_dodgeMin(::google::protobuf::int32 value);
  
  // optional int32 dodgeMax = 13;
  inline bool has_dodgeMax() const;
  inline void clear_dodgeMax();
  static const int kDodgeMaxFieldNumber = 13;
  inline ::google::protobuf::int32 dodgeMax() const;
  inline void set_dodgeMax(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:EquipmentRandomLevel)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_atkMin();
  inline void clear_has_atkMin();
  inline void set_has_atkMax();
  inline void clear_has_atkMax();
  inline void set_has_defMin();
  inline void clear_has_defMin();
  inline void set_has_defMax();
  inline void clear_has_defMax();
  inline void set_has_hpMin();
  inline void clear_has_hpMin();
  inline void set_has_hpMax();
  inline void clear_has_hpMax();
  inline void set_has_critMin();
  inline void clear_has_critMin();
  inline void set_has_critMax();
  inline void clear_has_critMax();
  inline void set_has_accuracyMin();
  inline void clear_has_accuracyMin();
  inline void set_has_accuracyMax();
  inline void clear_has_accuracyMax();
  inline void set_has_dodgeMin();
  inline void clear_has_dodgeMin();
  inline void set_has_dodgeMax();
  inline void clear_has_dodgeMax();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 atkMin_;
  ::google::protobuf::int32 atkMax_;
  ::google::protobuf::int32 defMin_;
  ::google::protobuf::int32 defMax_;
  ::google::protobuf::int32 hpMin_;
  ::google::protobuf::int32 hpMax_;
  ::google::protobuf::int32 critMin_;
  ::google::protobuf::int32 critMax_;
  ::google::protobuf::int32 accuracyMin_;
  ::google::protobuf::int32 accuracyMax_;
  ::google::protobuf::int32 dodgeMin_;
  ::google::protobuf::int32 dodgeMax_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentRandom_2eproto();
  friend void protobuf_AssignDesc_EquipmentRandom_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRandom_2eproto();
  
  void InitAsDefaultInstance();
  static EquipmentRandomLevel* default_instance_;
};
// -------------------------------------------------------------------

class AllEquipmentRandomLevel : public ::google::protobuf::Message {
 public:
  AllEquipmentRandomLevel();
  virtual ~AllEquipmentRandomLevel();
  
  AllEquipmentRandomLevel(const AllEquipmentRandomLevel& from);
  
  inline AllEquipmentRandomLevel& operator=(const AllEquipmentRandomLevel& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllEquipmentRandomLevel& default_instance();
  
  void Swap(AllEquipmentRandomLevel* other);
  
  // implements Message ----------------------------------------------
  
  AllEquipmentRandomLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllEquipmentRandomLevel& from);
  void MergeFrom(const AllEquipmentRandomLevel& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .EquipmentRandomLevel equipmentRandomLevel = 1;
  inline int equipmentRandomLevel_size() const;
  inline void clear_equipmentRandomLevel();
  static const int kEquipmentRandomLevelFieldNumber = 1;
  inline const ::EquipmentRandomLevel& equipmentRandomLevel(int index) const;
  inline ::EquipmentRandomLevel* mutable_equipmentRandomLevel(int index);
  inline ::EquipmentRandomLevel* add_equipmentRandomLevel();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentRandomLevel >&
      equipmentRandomLevel() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentRandomLevel >*
      mutable_equipmentRandomLevel();
  
  // @@protoc_insertion_point(class_scope:AllEquipmentRandomLevel)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::EquipmentRandomLevel > equipmentRandomLevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentRandom_2eproto();
  friend void protobuf_AssignDesc_EquipmentRandom_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRandom_2eproto();
  
  void InitAsDefaultInstance();
  static AllEquipmentRandomLevel* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentRandomEffect : public ::google::protobuf::Message {
 public:
  EquipmentRandomEffect();
  virtual ~EquipmentRandomEffect();
  
  EquipmentRandomEffect(const EquipmentRandomEffect& from);
  
  inline EquipmentRandomEffect& operator=(const EquipmentRandomEffect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentRandomEffect& default_instance();
  
  void Swap(EquipmentRandomEffect* other);
  
  // implements Message ----------------------------------------------
  
  EquipmentRandomEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentRandomEffect& from);
  void MergeFrom(const EquipmentRandomEffect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 effectId = 2;
  inline bool has_effectId() const;
  inline void clear_effectId();
  static const int kEffectIdFieldNumber = 2;
  inline ::google::protobuf::int32 effectId() const;
  inline void set_effectId(::google::protobuf::int32 value);
  
  // optional int32 chance = 3;
  inline bool has_chance() const;
  inline void clear_chance();
  static const int kChanceFieldNumber = 3;
  inline ::google::protobuf::int32 chance() const;
  inline void set_chance(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:EquipmentRandomEffect)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_effectId();
  inline void clear_has_effectId();
  inline void set_has_chance();
  inline void clear_has_chance();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 effectId_;
  ::google::protobuf::int32 chance_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentRandom_2eproto();
  friend void protobuf_AssignDesc_EquipmentRandom_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRandom_2eproto();
  
  void InitAsDefaultInstance();
  static EquipmentRandomEffect* default_instance_;
};
// -------------------------------------------------------------------

class AllEquipmentRandomEffect : public ::google::protobuf::Message {
 public:
  AllEquipmentRandomEffect();
  virtual ~AllEquipmentRandomEffect();
  
  AllEquipmentRandomEffect(const AllEquipmentRandomEffect& from);
  
  inline AllEquipmentRandomEffect& operator=(const AllEquipmentRandomEffect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllEquipmentRandomEffect& default_instance();
  
  void Swap(AllEquipmentRandomEffect* other);
  
  // implements Message ----------------------------------------------
  
  AllEquipmentRandomEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllEquipmentRandomEffect& from);
  void MergeFrom(const AllEquipmentRandomEffect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .EquipmentRandomEffect equipmentRandomEffect = 1;
  inline int equipmentRandomEffect_size() const;
  inline void clear_equipmentRandomEffect();
  static const int kEquipmentRandomEffectFieldNumber = 1;
  inline const ::EquipmentRandomEffect& equipmentRandomEffect(int index) const;
  inline ::EquipmentRandomEffect* mutable_equipmentRandomEffect(int index);
  inline ::EquipmentRandomEffect* add_equipmentRandomEffect();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentRandomEffect >&
      equipmentRandomEffect() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentRandomEffect >*
      mutable_equipmentRandomEffect();
  
  // @@protoc_insertion_point(class_scope:AllEquipmentRandomEffect)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::EquipmentRandomEffect > equipmentRandomEffect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentRandom_2eproto();
  friend void protobuf_AssignDesc_EquipmentRandom_2eproto();
  friend void protobuf_ShutdownFile_EquipmentRandom_2eproto();
  
  void InitAsDefaultInstance();
  static AllEquipmentRandomEffect* default_instance_;
};
// ===================================================================


// ===================================================================

// EquipmentRandomColor

// optional .EquipmentInfo.ColorType color = 1;
inline bool EquipmentRandomColor::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRandomColor::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRandomColor::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRandomColor::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::EquipmentInfo_ColorType EquipmentRandomColor::color() const {
  return static_cast< ::EquipmentInfo_ColorType >(color_);
}
inline void EquipmentRandomColor::set_color(::EquipmentInfo_ColorType value) {
  GOOGLE_DCHECK(::EquipmentInfo_ColorType_IsValid(value));
  set_has_color();
  color_ = value;
}

// optional int32 chance1 = 2;
inline bool EquipmentRandomColor::has_chance1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRandomColor::set_has_chance1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRandomColor::clear_has_chance1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRandomColor::clear_chance1() {
  chance1_ = 0;
  clear_has_chance1();
}
inline ::google::protobuf::int32 EquipmentRandomColor::chance1() const {
  return chance1_;
}
inline void EquipmentRandomColor::set_chance1(::google::protobuf::int32 value) {
  set_has_chance1();
  chance1_ = value;
}

// optional int32 chance2 = 3;
inline bool EquipmentRandomColor::has_chance2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentRandomColor::set_has_chance2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentRandomColor::clear_has_chance2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentRandomColor::clear_chance2() {
  chance2_ = 0;
  clear_has_chance2();
}
inline ::google::protobuf::int32 EquipmentRandomColor::chance2() const {
  return chance2_;
}
inline void EquipmentRandomColor::set_chance2(::google::protobuf::int32 value) {
  set_has_chance2();
  chance2_ = value;
}

// optional int32 chance3 = 4;
inline bool EquipmentRandomColor::has_chance3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentRandomColor::set_has_chance3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentRandomColor::clear_has_chance3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentRandomColor::clear_chance3() {
  chance3_ = 0;
  clear_has_chance3();
}
inline ::google::protobuf::int32 EquipmentRandomColor::chance3() const {
  return chance3_;
}
inline void EquipmentRandomColor::set_chance3(::google::protobuf::int32 value) {
  set_has_chance3();
  chance3_ = value;
}

// -------------------------------------------------------------------

// AllEquipmentRandomColor

// repeated .EquipmentRandomColor equipmentRandomColor = 1;
inline int AllEquipmentRandomColor::equipmentRandomColor_size() const {
  return equipmentRandomColor_.size();
}
inline void AllEquipmentRandomColor::clear_equipmentRandomColor() {
  equipmentRandomColor_.Clear();
}
inline const ::EquipmentRandomColor& AllEquipmentRandomColor::equipmentRandomColor(int index) const {
  return equipmentRandomColor_.Get(index);
}
inline ::EquipmentRandomColor* AllEquipmentRandomColor::mutable_equipmentRandomColor(int index) {
  return equipmentRandomColor_.Mutable(index);
}
inline ::EquipmentRandomColor* AllEquipmentRandomColor::add_equipmentRandomColor() {
  return equipmentRandomColor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentRandomColor >&
AllEquipmentRandomColor::equipmentRandomColor() const {
  return equipmentRandomColor_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentRandomColor >*
AllEquipmentRandomColor::mutable_equipmentRandomColor() {
  return &equipmentRandomColor_;
}

// -------------------------------------------------------------------

// EquipmentRandomPos

// optional .EquipmentInfo.Type pos = 1;
inline bool EquipmentRandomPos::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRandomPos::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRandomPos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRandomPos::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::EquipmentInfo_Type EquipmentRandomPos::pos() const {
  return static_cast< ::EquipmentInfo_Type >(pos_);
}
inline void EquipmentRandomPos::set_pos(::EquipmentInfo_Type value) {
  GOOGLE_DCHECK(::EquipmentInfo_Type_IsValid(value));
  set_has_pos();
  pos_ = value;
}

// optional int32 atk = 2;
inline bool EquipmentRandomPos::has_atk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRandomPos::set_has_atk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRandomPos::clear_has_atk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRandomPos::clear_atk() {
  atk_ = 0;
  clear_has_atk();
}
inline ::google::protobuf::int32 EquipmentRandomPos::atk() const {
  return atk_;
}
inline void EquipmentRandomPos::set_atk(::google::protobuf::int32 value) {
  set_has_atk();
  atk_ = value;
}

// optional int32 def = 3;
inline bool EquipmentRandomPos::has_def() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentRandomPos::set_has_def() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentRandomPos::clear_has_def() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentRandomPos::clear_def() {
  def_ = 0;
  clear_has_def();
}
inline ::google::protobuf::int32 EquipmentRandomPos::def() const {
  return def_;
}
inline void EquipmentRandomPos::set_def(::google::protobuf::int32 value) {
  set_has_def();
  def_ = value;
}

// optional int32 hp = 4;
inline bool EquipmentRandomPos::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentRandomPos::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentRandomPos::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentRandomPos::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 EquipmentRandomPos::hp() const {
  return hp_;
}
inline void EquipmentRandomPos::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 crit = 5;
inline bool EquipmentRandomPos::has_crit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentRandomPos::set_has_crit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentRandomPos::clear_has_crit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentRandomPos::clear_crit() {
  crit_ = 0;
  clear_has_crit();
}
inline ::google::protobuf::int32 EquipmentRandomPos::crit() const {
  return crit_;
}
inline void EquipmentRandomPos::set_crit(::google::protobuf::int32 value) {
  set_has_crit();
  crit_ = value;
}

// optional int32 accuracy = 6;
inline bool EquipmentRandomPos::has_accuracy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipmentRandomPos::set_has_accuracy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipmentRandomPos::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipmentRandomPos::clear_accuracy() {
  accuracy_ = 0;
  clear_has_accuracy();
}
inline ::google::protobuf::int32 EquipmentRandomPos::accuracy() const {
  return accuracy_;
}
inline void EquipmentRandomPos::set_accuracy(::google::protobuf::int32 value) {
  set_has_accuracy();
  accuracy_ = value;
}

// optional int32 dodge = 7;
inline bool EquipmentRandomPos::has_dodge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipmentRandomPos::set_has_dodge() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipmentRandomPos::clear_has_dodge() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipmentRandomPos::clear_dodge() {
  dodge_ = 0;
  clear_has_dodge();
}
inline ::google::protobuf::int32 EquipmentRandomPos::dodge() const {
  return dodge_;
}
inline void EquipmentRandomPos::set_dodge(::google::protobuf::int32 value) {
  set_has_dodge();
  dodge_ = value;
}

// -------------------------------------------------------------------

// AllEquipmentRandomPos

// repeated .EquipmentRandomPos equipmentRandomPos = 1;
inline int AllEquipmentRandomPos::equipmentRandomPos_size() const {
  return equipmentRandomPos_.size();
}
inline void AllEquipmentRandomPos::clear_equipmentRandomPos() {
  equipmentRandomPos_.Clear();
}
inline const ::EquipmentRandomPos& AllEquipmentRandomPos::equipmentRandomPos(int index) const {
  return equipmentRandomPos_.Get(index);
}
inline ::EquipmentRandomPos* AllEquipmentRandomPos::mutable_equipmentRandomPos(int index) {
  return equipmentRandomPos_.Mutable(index);
}
inline ::EquipmentRandomPos* AllEquipmentRandomPos::add_equipmentRandomPos() {
  return equipmentRandomPos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentRandomPos >&
AllEquipmentRandomPos::equipmentRandomPos() const {
  return equipmentRandomPos_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentRandomPos >*
AllEquipmentRandomPos::mutable_equipmentRandomPos() {
  return &equipmentRandomPos_;
}

// -------------------------------------------------------------------

// EquipmentRandomLevel

// optional int32 level = 1;
inline bool EquipmentRandomLevel::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRandomLevel::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRandomLevel::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRandomLevel::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::level() const {
  return level_;
}
inline void EquipmentRandomLevel::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 atkMin = 2;
inline bool EquipmentRandomLevel::has_atkMin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRandomLevel::set_has_atkMin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRandomLevel::clear_has_atkMin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRandomLevel::clear_atkMin() {
  atkMin_ = 0;
  clear_has_atkMin();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::atkMin() const {
  return atkMin_;
}
inline void EquipmentRandomLevel::set_atkMin(::google::protobuf::int32 value) {
  set_has_atkMin();
  atkMin_ = value;
}

// optional int32 atkMax = 3;
inline bool EquipmentRandomLevel::has_atkMax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentRandomLevel::set_has_atkMax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentRandomLevel::clear_has_atkMax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentRandomLevel::clear_atkMax() {
  atkMax_ = 0;
  clear_has_atkMax();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::atkMax() const {
  return atkMax_;
}
inline void EquipmentRandomLevel::set_atkMax(::google::protobuf::int32 value) {
  set_has_atkMax();
  atkMax_ = value;
}

// optional int32 defMin = 4;
inline bool EquipmentRandomLevel::has_defMin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentRandomLevel::set_has_defMin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentRandomLevel::clear_has_defMin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentRandomLevel::clear_defMin() {
  defMin_ = 0;
  clear_has_defMin();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::defMin() const {
  return defMin_;
}
inline void EquipmentRandomLevel::set_defMin(::google::protobuf::int32 value) {
  set_has_defMin();
  defMin_ = value;
}

// optional int32 defMax = 5;
inline bool EquipmentRandomLevel::has_defMax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentRandomLevel::set_has_defMax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentRandomLevel::clear_has_defMax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentRandomLevel::clear_defMax() {
  defMax_ = 0;
  clear_has_defMax();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::defMax() const {
  return defMax_;
}
inline void EquipmentRandomLevel::set_defMax(::google::protobuf::int32 value) {
  set_has_defMax();
  defMax_ = value;
}

// optional int32 hpMin = 6;
inline bool EquipmentRandomLevel::has_hpMin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipmentRandomLevel::set_has_hpMin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipmentRandomLevel::clear_has_hpMin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipmentRandomLevel::clear_hpMin() {
  hpMin_ = 0;
  clear_has_hpMin();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::hpMin() const {
  return hpMin_;
}
inline void EquipmentRandomLevel::set_hpMin(::google::protobuf::int32 value) {
  set_has_hpMin();
  hpMin_ = value;
}

// optional int32 hpMax = 7;
inline bool EquipmentRandomLevel::has_hpMax() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipmentRandomLevel::set_has_hpMax() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipmentRandomLevel::clear_has_hpMax() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipmentRandomLevel::clear_hpMax() {
  hpMax_ = 0;
  clear_has_hpMax();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::hpMax() const {
  return hpMax_;
}
inline void EquipmentRandomLevel::set_hpMax(::google::protobuf::int32 value) {
  set_has_hpMax();
  hpMax_ = value;
}

// optional int32 critMin = 8;
inline bool EquipmentRandomLevel::has_critMin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipmentRandomLevel::set_has_critMin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipmentRandomLevel::clear_has_critMin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipmentRandomLevel::clear_critMin() {
  critMin_ = 0;
  clear_has_critMin();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::critMin() const {
  return critMin_;
}
inline void EquipmentRandomLevel::set_critMin(::google::protobuf::int32 value) {
  set_has_critMin();
  critMin_ = value;
}

// optional int32 critMax = 9;
inline bool EquipmentRandomLevel::has_critMax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipmentRandomLevel::set_has_critMax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipmentRandomLevel::clear_has_critMax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipmentRandomLevel::clear_critMax() {
  critMax_ = 0;
  clear_has_critMax();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::critMax() const {
  return critMax_;
}
inline void EquipmentRandomLevel::set_critMax(::google::protobuf::int32 value) {
  set_has_critMax();
  critMax_ = value;
}

// optional int32 accuracyMin = 10;
inline bool EquipmentRandomLevel::has_accuracyMin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipmentRandomLevel::set_has_accuracyMin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipmentRandomLevel::clear_has_accuracyMin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipmentRandomLevel::clear_accuracyMin() {
  accuracyMin_ = 0;
  clear_has_accuracyMin();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::accuracyMin() const {
  return accuracyMin_;
}
inline void EquipmentRandomLevel::set_accuracyMin(::google::protobuf::int32 value) {
  set_has_accuracyMin();
  accuracyMin_ = value;
}

// optional int32 accuracyMax = 11;
inline bool EquipmentRandomLevel::has_accuracyMax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipmentRandomLevel::set_has_accuracyMax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipmentRandomLevel::clear_has_accuracyMax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipmentRandomLevel::clear_accuracyMax() {
  accuracyMax_ = 0;
  clear_has_accuracyMax();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::accuracyMax() const {
  return accuracyMax_;
}
inline void EquipmentRandomLevel::set_accuracyMax(::google::protobuf::int32 value) {
  set_has_accuracyMax();
  accuracyMax_ = value;
}

// optional int32 dodgeMin = 12;
inline bool EquipmentRandomLevel::has_dodgeMin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipmentRandomLevel::set_has_dodgeMin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipmentRandomLevel::clear_has_dodgeMin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipmentRandomLevel::clear_dodgeMin() {
  dodgeMin_ = 0;
  clear_has_dodgeMin();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::dodgeMin() const {
  return dodgeMin_;
}
inline void EquipmentRandomLevel::set_dodgeMin(::google::protobuf::int32 value) {
  set_has_dodgeMin();
  dodgeMin_ = value;
}

// optional int32 dodgeMax = 13;
inline bool EquipmentRandomLevel::has_dodgeMax() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EquipmentRandomLevel::set_has_dodgeMax() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EquipmentRandomLevel::clear_has_dodgeMax() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EquipmentRandomLevel::clear_dodgeMax() {
  dodgeMax_ = 0;
  clear_has_dodgeMax();
}
inline ::google::protobuf::int32 EquipmentRandomLevel::dodgeMax() const {
  return dodgeMax_;
}
inline void EquipmentRandomLevel::set_dodgeMax(::google::protobuf::int32 value) {
  set_has_dodgeMax();
  dodgeMax_ = value;
}

// -------------------------------------------------------------------

// AllEquipmentRandomLevel

// repeated .EquipmentRandomLevel equipmentRandomLevel = 1;
inline int AllEquipmentRandomLevel::equipmentRandomLevel_size() const {
  return equipmentRandomLevel_.size();
}
inline void AllEquipmentRandomLevel::clear_equipmentRandomLevel() {
  equipmentRandomLevel_.Clear();
}
inline const ::EquipmentRandomLevel& AllEquipmentRandomLevel::equipmentRandomLevel(int index) const {
  return equipmentRandomLevel_.Get(index);
}
inline ::EquipmentRandomLevel* AllEquipmentRandomLevel::mutable_equipmentRandomLevel(int index) {
  return equipmentRandomLevel_.Mutable(index);
}
inline ::EquipmentRandomLevel* AllEquipmentRandomLevel::add_equipmentRandomLevel() {
  return equipmentRandomLevel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentRandomLevel >&
AllEquipmentRandomLevel::equipmentRandomLevel() const {
  return equipmentRandomLevel_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentRandomLevel >*
AllEquipmentRandomLevel::mutable_equipmentRandomLevel() {
  return &equipmentRandomLevel_;
}

// -------------------------------------------------------------------

// EquipmentRandomEffect

// optional int32 id = 1;
inline bool EquipmentRandomEffect::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentRandomEffect::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentRandomEffect::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentRandomEffect::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EquipmentRandomEffect::id() const {
  return id_;
}
inline void EquipmentRandomEffect::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 effectId = 2;
inline bool EquipmentRandomEffect::has_effectId() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentRandomEffect::set_has_effectId() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentRandomEffect::clear_has_effectId() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentRandomEffect::clear_effectId() {
  effectId_ = 0;
  clear_has_effectId();
}
inline ::google::protobuf::int32 EquipmentRandomEffect::effectId() const {
  return effectId_;
}
inline void EquipmentRandomEffect::set_effectId(::google::protobuf::int32 value) {
  set_has_effectId();
  effectId_ = value;
}

// optional int32 chance = 3;
inline bool EquipmentRandomEffect::has_chance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentRandomEffect::set_has_chance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentRandomEffect::clear_has_chance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentRandomEffect::clear_chance() {
  chance_ = 0;
  clear_has_chance();
}
inline ::google::protobuf::int32 EquipmentRandomEffect::chance() const {
  return chance_;
}
inline void EquipmentRandomEffect::set_chance(::google::protobuf::int32 value) {
  set_has_chance();
  chance_ = value;
}

// -------------------------------------------------------------------

// AllEquipmentRandomEffect

// repeated .EquipmentRandomEffect equipmentRandomEffect = 1;
inline int AllEquipmentRandomEffect::equipmentRandomEffect_size() const {
  return equipmentRandomEffect_.size();
}
inline void AllEquipmentRandomEffect::clear_equipmentRandomEffect() {
  equipmentRandomEffect_.Clear();
}
inline const ::EquipmentRandomEffect& AllEquipmentRandomEffect::equipmentRandomEffect(int index) const {
  return equipmentRandomEffect_.Get(index);
}
inline ::EquipmentRandomEffect* AllEquipmentRandomEffect::mutable_equipmentRandomEffect(int index) {
  return equipmentRandomEffect_.Mutable(index);
}
inline ::EquipmentRandomEffect* AllEquipmentRandomEffect::add_equipmentRandomEffect() {
  return equipmentRandomEffect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentRandomEffect >&
AllEquipmentRandomEffect::equipmentRandomEffect() const {
  return equipmentRandomEffect_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentRandomEffect >*
AllEquipmentRandomEffect::mutable_equipmentRandomEffect() {
  return &equipmentRandomEffect_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EquipmentRandom_2eproto__INCLUDED

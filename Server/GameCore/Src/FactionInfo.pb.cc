// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FactionInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FactionBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SociatySkillBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SociatySkillBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SociatySkillBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SociatySkillBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_ReservationToString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_ReservationToString_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FactionInfo_2eproto() {
  protobuf_AddDesc_FactionInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FactionInfo.proto");
  GOOGLE_CHECK(file != NULL);
  FactionBase_descriptor_ = file->message_type(0);
  static const int FactionBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBase, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBase, upperLimit_),
  };
  FactionBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionBase_descriptor_,
      FactionBase::default_instance_,
      FactionBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionBase));
  FactionBaseInfo_descriptor_ = file->message_type(1);
  static const int FactionBaseInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBaseInfo, faction_),
  };
  FactionBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionBaseInfo_descriptor_,
      FactionBaseInfo::default_instance_,
      FactionBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionBaseInfo));
  SociatySkillBase_descriptor_ = file->message_type(2);
  static const int SociatySkillBase_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, effectType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, requiredSociatyLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, effectPercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, effectValue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, needBless_),
  };
  SociatySkillBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SociatySkillBase_descriptor_,
      SociatySkillBase::default_instance_,
      SociatySkillBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SociatySkillBase));
  SociatySkillBaseInfo_descriptor_ = file->message_type(3);
  static const int SociatySkillBaseInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBaseInfo, info_),
  };
  SociatySkillBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SociatySkillBaseInfo_descriptor_,
      SociatySkillBaseInfo::default_instance_,
      SociatySkillBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SociatySkillBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SociatySkillBaseInfo));
  PB_ReservationToString_descriptor_ = file->message_type(4);
  static const int PB_ReservationToString_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, roleID1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, roleID2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, name1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, powerType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, type1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, type2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, setRole1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, setRole2_),
  };
  PB_ReservationToString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_ReservationToString_descriptor_,
      PB_ReservationToString::default_instance_,
      PB_ReservationToString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationToString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_ReservationToString));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FactionInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionBase_descriptor_, &FactionBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionBaseInfo_descriptor_, &FactionBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SociatySkillBase_descriptor_, &SociatySkillBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SociatySkillBaseInfo_descriptor_, &SociatySkillBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_ReservationToString_descriptor_, &PB_ReservationToString::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FactionInfo_2eproto() {
  delete FactionBase::default_instance_;
  delete FactionBase_reflection_;
  delete FactionBaseInfo::default_instance_;
  delete FactionBaseInfo_reflection_;
  delete SociatySkillBase::default_instance_;
  delete SociatySkillBase_reflection_;
  delete SociatySkillBaseInfo::default_instance_;
  delete SociatySkillBaseInfo_reflection_;
  delete PB_ReservationToString::default_instance_;
  delete PB_ReservationToString_reflection_;
}

void protobuf_AddDesc_FactionInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ProfessionInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021FactionInfo.proto\032\024ProfessionInfo.prot"
    "o\"=\n\013FactionBase\022\r\n\005level\030\001 \001(\005\022\013\n\003exp\030\002"
    " \001(\003\022\022\n\nupperLimit\030\003 \001(\005\"0\n\017FactionBaseI"
    "nfo\022\035\n\007faction\030\001 \003(\0132\014.FactionBase\"\253\001\n\020S"
    "ociatySkillBase\022\n\n\002id\030\001 \001(\005\022\022\n\neffectTyp"
    "e\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\013\n\003pic\030\004 \001(\005\022\034\n\024r"
    "equiredSociatyLevel\030\005 \001(\005\022\025\n\reffectPerce"
    "nt\030\006 \001(\002\022\023\n\013effectValue\030\007 \001(\005\022\021\n\tneedBle"
    "ss\030\010 \001(\005\"7\n\024SociatySkillBaseInfo\022\037\n\004info"
    "\030\001 \003(\0132\021.SociatySkillBase\"\354\001\n\026PB_Reserva"
    "tionToString\022\017\n\007roleID1\030\001 \001(\003\022\017\n\007roleID2"
    "\030\002 \001(\003\022\r\n\005name1\030\003 \001(\t\022\r\n\005name2\030\004 \001(\t\022\013\n\003"
    "rmb\030\005 \001(\005\022\021\n\tpowerType\030\006 \001(\005\022&\n\005type1\030\007 "
    "\001(\0162\027.PB_ProfessionInfo.Type\022&\n\005type2\030\010 "
    "\001(\0162\027.PB_ProfessionInfo.Type\022\020\n\010setRole1"
    "\030\t \003(\003\022\020\n\010setRole2\030\n \003(\003", 624);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FactionInfo.proto", &protobuf_RegisterTypes);
  FactionBase::default_instance_ = new FactionBase();
  FactionBaseInfo::default_instance_ = new FactionBaseInfo();
  SociatySkillBase::default_instance_ = new SociatySkillBase();
  SociatySkillBaseInfo::default_instance_ = new SociatySkillBaseInfo();
  PB_ReservationToString::default_instance_ = new PB_ReservationToString();
  FactionBase::default_instance_->InitAsDefaultInstance();
  FactionBaseInfo::default_instance_->InitAsDefaultInstance();
  SociatySkillBase::default_instance_->InitAsDefaultInstance();
  SociatySkillBaseInfo::default_instance_->InitAsDefaultInstance();
  PB_ReservationToString::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FactionInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FactionInfo_2eproto {
  StaticDescriptorInitializer_FactionInfo_2eproto() {
    protobuf_AddDesc_FactionInfo_2eproto();
  }
} static_descriptor_initializer_FactionInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FactionBase::kLevelFieldNumber;
const int FactionBase::kExpFieldNumber;
const int FactionBase::kUpperLimitFieldNumber;
#endif  // !_MSC_VER

FactionBase::FactionBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionBase::InitAsDefaultInstance() {
}

FactionBase::FactionBase(const FactionBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionBase::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  upperLimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionBase::~FactionBase() {
  SharedDtor();
}

void FactionBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionBase_descriptor_;
}

const FactionBase& FactionBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionInfo_2eproto();  return *default_instance_;
}

FactionBase* FactionBase::default_instance_ = NULL;

FactionBase* FactionBase::New() const {
  return new FactionBase;
}

void FactionBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    upperLimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional int64 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_upperLimit;
        break;
      }
      
      // optional int32 upperLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upperLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upperLimit_)));
          set_has_upperLimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exp(), output);
  }
  
  // optional int32 upperLimit = 3;
  if (has_upperLimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->upperLimit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exp(), target);
  }
  
  // optional int32 upperLimit = 3;
  if (has_upperLimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->upperLimit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
    // optional int32 upperLimit = 3;
    if (has_upperLimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upperLimit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionBase::MergeFrom(const FactionBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_upperLimit()) {
      set_upperLimit(from.upperLimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionBase::CopyFrom(const FactionBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionBase::IsInitialized() const {
  
  return true;
}

void FactionBase::Swap(FactionBase* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(upperLimit_, other->upperLimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionBase_descriptor_;
  metadata.reflection = FactionBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionBaseInfo::kFactionFieldNumber;
#endif  // !_MSC_VER

FactionBaseInfo::FactionBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionBaseInfo::InitAsDefaultInstance() {
}

FactionBaseInfo::FactionBaseInfo(const FactionBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionBaseInfo::~FactionBaseInfo() {
  SharedDtor();
}

void FactionBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionBaseInfo_descriptor_;
}

const FactionBaseInfo& FactionBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionInfo_2eproto();  return *default_instance_;
}

FactionBaseInfo* FactionBaseInfo::default_instance_ = NULL;

FactionBaseInfo* FactionBaseInfo::New() const {
  return new FactionBaseInfo;
}

void FactionBaseInfo::Clear() {
  faction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FactionBase faction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_faction;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FactionBase faction = 1;
  for (int i = 0; i < this->faction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faction(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FactionBase faction = 1;
  for (int i = 0; i < this->faction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faction(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionBaseInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .FactionBase faction = 1;
  total_size += 1 * this->faction_size();
  for (int i = 0; i < this->faction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faction(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionBaseInfo::MergeFrom(const FactionBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  faction_.MergeFrom(from.faction_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionBaseInfo::CopyFrom(const FactionBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionBaseInfo::IsInitialized() const {
  
  return true;
}

void FactionBaseInfo::Swap(FactionBaseInfo* other) {
  if (other != this) {
    faction_.Swap(&other->faction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionBaseInfo_descriptor_;
  metadata.reflection = FactionBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SociatySkillBase::kIdFieldNumber;
const int SociatySkillBase::kEffectTypeFieldNumber;
const int SociatySkillBase::kLevelFieldNumber;
const int SociatySkillBase::kPicFieldNumber;
const int SociatySkillBase::kRequiredSociatyLevelFieldNumber;
const int SociatySkillBase::kEffectPercentFieldNumber;
const int SociatySkillBase::kEffectValueFieldNumber;
const int SociatySkillBase::kNeedBlessFieldNumber;
#endif  // !_MSC_VER

SociatySkillBase::SociatySkillBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SociatySkillBase::InitAsDefaultInstance() {
}

SociatySkillBase::SociatySkillBase(const SociatySkillBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SociatySkillBase::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  effectType_ = 0;
  level_ = 0;
  pic_ = 0;
  requiredSociatyLevel_ = 0;
  effectPercent_ = 0;
  effectValue_ = 0;
  needBless_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SociatySkillBase::~SociatySkillBase() {
  SharedDtor();
}

void SociatySkillBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SociatySkillBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SociatySkillBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SociatySkillBase_descriptor_;
}

const SociatySkillBase& SociatySkillBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionInfo_2eproto();  return *default_instance_;
}

SociatySkillBase* SociatySkillBase::default_instance_ = NULL;

SociatySkillBase* SociatySkillBase::New() const {
  return new SociatySkillBase;
}

void SociatySkillBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    effectType_ = 0;
    level_ = 0;
    pic_ = 0;
    requiredSociatyLevel_ = 0;
    effectPercent_ = 0;
    effectValue_ = 0;
    needBless_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SociatySkillBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effectType;
        break;
      }
      
      // optional int32 effectType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectType_)));
          set_has_effectType();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pic;
        break;
      }
      
      // optional int32 pic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_requiredSociatyLevel;
        break;
      }
      
      // optional int32 requiredSociatyLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredSociatyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredSociatyLevel_)));
          set_has_requiredSociatyLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_effectPercent;
        break;
      }
      
      // optional float effectPercent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effectPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effectPercent_)));
          set_has_effectPercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_effectValue;
        break;
      }
      
      // optional int32 effectValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectValue_)));
          set_has_effectValue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_needBless;
        break;
      }
      
      // optional int32 needBless = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needBless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needBless_)));
          set_has_needBless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SociatySkillBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 effectType = 2;
  if (has_effectType()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effectType(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pic(), output);
  }
  
  // optional int32 requiredSociatyLevel = 5;
  if (has_requiredSociatyLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->requiredSociatyLevel(), output);
  }
  
  // optional float effectPercent = 6;
  if (has_effectPercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->effectPercent(), output);
  }
  
  // optional int32 effectValue = 7;
  if (has_effectValue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->effectValue(), output);
  }
  
  // optional int32 needBless = 8;
  if (has_needBless()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->needBless(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SociatySkillBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 effectType = 2;
  if (has_effectType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effectType(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 pic = 4;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pic(), target);
  }
  
  // optional int32 requiredSociatyLevel = 5;
  if (has_requiredSociatyLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->requiredSociatyLevel(), target);
  }
  
  // optional float effectPercent = 6;
  if (has_effectPercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->effectPercent(), target);
  }
  
  // optional int32 effectValue = 7;
  if (has_effectValue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->effectValue(), target);
  }
  
  // optional int32 needBless = 8;
  if (has_needBless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->needBless(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SociatySkillBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 effectType = 2;
    if (has_effectType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectType());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 pic = 4;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }
    
    // optional int32 requiredSociatyLevel = 5;
    if (has_requiredSociatyLevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredSociatyLevel());
    }
    
    // optional float effectPercent = 6;
    if (has_effectPercent()) {
      total_size += 1 + 4;
    }
    
    // optional int32 effectValue = 7;
    if (has_effectValue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectValue());
    }
    
    // optional int32 needBless = 8;
    if (has_needBless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needBless());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SociatySkillBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SociatySkillBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SociatySkillBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SociatySkillBase::MergeFrom(const SociatySkillBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_effectType()) {
      set_effectType(from.effectType());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_requiredSociatyLevel()) {
      set_requiredSociatyLevel(from.requiredSociatyLevel());
    }
    if (from.has_effectPercent()) {
      set_effectPercent(from.effectPercent());
    }
    if (from.has_effectValue()) {
      set_effectValue(from.effectValue());
    }
    if (from.has_needBless()) {
      set_needBless(from.needBless());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SociatySkillBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SociatySkillBase::CopyFrom(const SociatySkillBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SociatySkillBase::IsInitialized() const {
  
  return true;
}

void SociatySkillBase::Swap(SociatySkillBase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(effectType_, other->effectType_);
    std::swap(level_, other->level_);
    std::swap(pic_, other->pic_);
    std::swap(requiredSociatyLevel_, other->requiredSociatyLevel_);
    std::swap(effectPercent_, other->effectPercent_);
    std::swap(effectValue_, other->effectValue_);
    std::swap(needBless_, other->needBless_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SociatySkillBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SociatySkillBase_descriptor_;
  metadata.reflection = SociatySkillBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SociatySkillBaseInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

SociatySkillBaseInfo::SociatySkillBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SociatySkillBaseInfo::InitAsDefaultInstance() {
}

SociatySkillBaseInfo::SociatySkillBaseInfo(const SociatySkillBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SociatySkillBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SociatySkillBaseInfo::~SociatySkillBaseInfo() {
  SharedDtor();
}

void SociatySkillBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SociatySkillBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SociatySkillBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SociatySkillBaseInfo_descriptor_;
}

const SociatySkillBaseInfo& SociatySkillBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionInfo_2eproto();  return *default_instance_;
}

SociatySkillBaseInfo* SociatySkillBaseInfo::default_instance_ = NULL;

SociatySkillBaseInfo* SociatySkillBaseInfo::New() const {
  return new SociatySkillBaseInfo;
}

void SociatySkillBaseInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SociatySkillBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SociatySkillBase info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SociatySkillBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SociatySkillBase info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SociatySkillBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SociatySkillBase info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SociatySkillBaseInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .SociatySkillBase info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SociatySkillBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SociatySkillBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SociatySkillBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SociatySkillBaseInfo::MergeFrom(const SociatySkillBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SociatySkillBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SociatySkillBaseInfo::CopyFrom(const SociatySkillBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SociatySkillBaseInfo::IsInitialized() const {
  
  return true;
}

void SociatySkillBaseInfo::Swap(SociatySkillBaseInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SociatySkillBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SociatySkillBaseInfo_descriptor_;
  metadata.reflection = SociatySkillBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_ReservationToString::kRoleID1FieldNumber;
const int PB_ReservationToString::kRoleID2FieldNumber;
const int PB_ReservationToString::kName1FieldNumber;
const int PB_ReservationToString::kName2FieldNumber;
const int PB_ReservationToString::kRmbFieldNumber;
const int PB_ReservationToString::kPowerTypeFieldNumber;
const int PB_ReservationToString::kType1FieldNumber;
const int PB_ReservationToString::kType2FieldNumber;
const int PB_ReservationToString::kSetRole1FieldNumber;
const int PB_ReservationToString::kSetRole2FieldNumber;
#endif  // !_MSC_VER

PB_ReservationToString::PB_ReservationToString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_ReservationToString::InitAsDefaultInstance() {
}

PB_ReservationToString::PB_ReservationToString(const PB_ReservationToString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_ReservationToString::SharedCtor() {
  _cached_size_ = 0;
  roleID1_ = GOOGLE_LONGLONG(0);
  roleID2_ = GOOGLE_LONGLONG(0);
  name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rmb_ = 0;
  powerType_ = 0;
  type1_ = 0;
  type2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_ReservationToString::~PB_ReservationToString() {
  SharedDtor();
}

void PB_ReservationToString::SharedDtor() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (this != default_instance_) {
  }
}

void PB_ReservationToString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_ReservationToString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ReservationToString_descriptor_;
}

const PB_ReservationToString& PB_ReservationToString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionInfo_2eproto();  return *default_instance_;
}

PB_ReservationToString* PB_ReservationToString::default_instance_ = NULL;

PB_ReservationToString* PB_ReservationToString::New() const {
  return new PB_ReservationToString;
}

void PB_ReservationToString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleID1_ = GOOGLE_LONGLONG(0);
    roleID2_ = GOOGLE_LONGLONG(0);
    if (has_name1()) {
      if (name1_ != &::google::protobuf::internal::kEmptyString) {
        name1_->clear();
      }
    }
    if (has_name2()) {
      if (name2_ != &::google::protobuf::internal::kEmptyString) {
        name2_->clear();
      }
    }
    rmb_ = 0;
    powerType_ = 0;
    type1_ = 0;
    type2_ = 0;
  }
  setRole1_.Clear();
  setRole2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_ReservationToString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 roleID1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID1_)));
          set_has_roleID1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleID2;
        break;
      }
      
      // optional int64 roleID2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleID2_)));
          set_has_roleID2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name1;
        break;
      }
      
      // optional string name1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name1().data(), this->name1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name2;
        break;
      }
      
      // optional string name2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_powerType;
        break;
      }
      
      // optional int32 powerType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powerType_)));
          set_has_powerType();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type1;
        break;
      }
      
      // optional .PB_ProfessionInfo.Type type1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_type1(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type2;
        break;
      }
      
      // optional .PB_ProfessionInfo.Type type2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ProfessionInfo_Type_IsValid(value)) {
            set_type2(static_cast< ::PB_ProfessionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_setRole1;
        break;
      }
      
      // repeated int64 setRole1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setRole1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 72, input, this->mutable_setRole1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_setRole1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_setRole1;
        if (input->ExpectTag(80)) goto parse_setRole2;
        break;
      }
      
      // repeated int64 setRole2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setRole2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80, input, this->mutable_setRole2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_setRole2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_setRole2;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_ReservationToString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 roleID1 = 1;
  if (has_roleID1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleID1(), output);
  }
  
  // optional int64 roleID2 = 2;
  if (has_roleID2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roleID2(), output);
  }
  
  // optional string name1 = 3;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name1(), output);
  }
  
  // optional string name2 = 4;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name2(), output);
  }
  
  // optional int32 rmb = 5;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rmb(), output);
  }
  
  // optional int32 powerType = 6;
  if (has_powerType()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->powerType(), output);
  }
  
  // optional .PB_ProfessionInfo.Type type1 = 7;
  if (has_type1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type1(), output);
  }
  
  // optional .PB_ProfessionInfo.Type type2 = 8;
  if (has_type2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type2(), output);
  }
  
  // repeated int64 setRole1 = 9;
  for (int i = 0; i < this->setRole1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      9, this->setRole1(i), output);
  }
  
  // repeated int64 setRole2 = 10;
  for (int i = 0; i < this->setRole2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->setRole2(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_ReservationToString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 roleID1 = 1;
  if (has_roleID1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleID1(), target);
  }
  
  // optional int64 roleID2 = 2;
  if (has_roleID2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roleID2(), target);
  }
  
  // optional string name1 = 3;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name1(), target);
  }
  
  // optional string name2 = 4;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name2(), target);
  }
  
  // optional int32 rmb = 5;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rmb(), target);
  }
  
  // optional int32 powerType = 6;
  if (has_powerType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->powerType(), target);
  }
  
  // optional .PB_ProfessionInfo.Type type1 = 7;
  if (has_type1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type1(), target);
  }
  
  // optional .PB_ProfessionInfo.Type type2 = 8;
  if (has_type2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type2(), target);
  }
  
  // repeated int64 setRole1 = 9;
  for (int i = 0; i < this->setRole1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(9, this->setRole1(i), target);
  }
  
  // repeated int64 setRole2 = 10;
  for (int i = 0; i < this->setRole2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(10, this->setRole2(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_ReservationToString::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 roleID1 = 1;
    if (has_roleID1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID1());
    }
    
    // optional int64 roleID2 = 2;
    if (has_roleID2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleID2());
    }
    
    // optional string name1 = 3;
    if (has_name1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name1());
    }
    
    // optional string name2 = 4;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }
    
    // optional int32 rmb = 5;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional int32 powerType = 6;
    if (has_powerType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powerType());
    }
    
    // optional .PB_ProfessionInfo.Type type1 = 7;
    if (has_type1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type1());
    }
    
    // optional .PB_ProfessionInfo.Type type2 = 8;
    if (has_type2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type2());
    }
    
  }
  // repeated int64 setRole1 = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->setRole1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->setRole1(i));
    }
    total_size += 1 * this->setRole1_size() + data_size;
  }
  
  // repeated int64 setRole2 = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->setRole2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->setRole2(i));
    }
    total_size += 1 * this->setRole2_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_ReservationToString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_ReservationToString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_ReservationToString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_ReservationToString::MergeFrom(const PB_ReservationToString& from) {
  GOOGLE_CHECK_NE(&from, this);
  setRole1_.MergeFrom(from.setRole1_);
  setRole2_.MergeFrom(from.setRole2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleID1()) {
      set_roleID1(from.roleID1());
    }
    if (from.has_roleID2()) {
      set_roleID2(from.roleID2());
    }
    if (from.has_name1()) {
      set_name1(from.name1());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_powerType()) {
      set_powerType(from.powerType());
    }
    if (from.has_type1()) {
      set_type1(from.type1());
    }
    if (from.has_type2()) {
      set_type2(from.type2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_ReservationToString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_ReservationToString::CopyFrom(const PB_ReservationToString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_ReservationToString::IsInitialized() const {
  
  return true;
}

void PB_ReservationToString::Swap(PB_ReservationToString* other) {
  if (other != this) {
    std::swap(roleID1_, other->roleID1_);
    std::swap(roleID2_, other->roleID2_);
    std::swap(name1_, other->name1_);
    std::swap(name2_, other->name2_);
    std::swap(rmb_, other->rmb_);
    std::swap(powerType_, other->powerType_);
    std::swap(type1_, other->type1_);
    std::swap(type2_, other->type2_);
    setRole1_.Swap(&other->setRole1_);
    setRole2_.Swap(&other->setRole2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_ReservationToString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_ReservationToString_descriptor_;
  metadata.reflection = PB_ReservationToString_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

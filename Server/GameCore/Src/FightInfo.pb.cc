// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FightInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_Skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_Skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_FightPropertyDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_FightPropertyDelta_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RoomHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoomHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_BloodDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_BloodDelta_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_FightAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_FightAtt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_FightAtt_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_FightAtt_PropertyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_FightInfo_2eproto() {
  protobuf_AddDesc_FightInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FightInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PB_Skill_descriptor_ = file->message_type(0);
  static const int PB_Skill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_Skill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_Skill, level_),
  };
  PB_Skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_Skill_descriptor_,
      PB_Skill::default_instance_,
      PB_Skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_Skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_Skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_Skill));
  PB_FightPropertyDelta_descriptor_ = file->message_type(1);
  static const int PB_FightPropertyDelta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightPropertyDelta, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightPropertyDelta, percent_),
  };
  PB_FightPropertyDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_FightPropertyDelta_descriptor_,
      PB_FightPropertyDelta::default_instance_,
      PB_FightPropertyDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightPropertyDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightPropertyDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_FightPropertyDelta));
  PB_RoomHistory_descriptor_ = file->message_type(2);
  static const int PB_RoomHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomHistory, count_),
  };
  PB_RoomHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoomHistory_descriptor_,
      PB_RoomHistory::default_instance_,
      PB_RoomHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoomHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoomHistory));
  PB_BloodDelta_descriptor_ = file->message_type(3);
  static const int PB_BloodDelta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BloodDelta, toAtk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BloodDelta, toDef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BloodDelta, toDodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BloodDelta, toAccuracy_),
  };
  PB_BloodDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_BloodDelta_descriptor_,
      PB_BloodDelta::default_instance_,
      PB_BloodDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BloodDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_BloodDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_BloodDelta));
  PB_FightAtt_descriptor_ = file->message_type(4);
  static const int PB_FightAtt_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, selfFaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, friendlyFaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, reviveTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, mana_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, propertiesDelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, bloodLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, bloodNode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, bloodDelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, curTower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, maxTower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, maxSurvive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, winPVP_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, losePVP_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, baseWingLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, baseWingDegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, worldBossHurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, worldBossNum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, fightingPet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, transformID_),
  };
  PB_FightAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_FightAtt_descriptor_,
      PB_FightAtt::default_instance_,
      PB_FightAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FightAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_FightAtt));
  PB_FightAtt_Status_descriptor_ = PB_FightAtt_descriptor_->enum_type(0);
  PB_FightAtt_PropertyType_descriptor_ = PB_FightAtt_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FightInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_Skill_descriptor_, &PB_Skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_FightPropertyDelta_descriptor_, &PB_FightPropertyDelta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoomHistory_descriptor_, &PB_RoomHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_BloodDelta_descriptor_, &PB_BloodDelta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_FightAtt_descriptor_, &PB_FightAtt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FightInfo_2eproto() {
  delete PB_Skill::default_instance_;
  delete PB_Skill_reflection_;
  delete PB_FightPropertyDelta::default_instance_;
  delete PB_FightPropertyDelta_reflection_;
  delete PB_RoomHistory::default_instance_;
  delete PB_RoomHistory_reflection_;
  delete PB_BloodDelta::default_instance_;
  delete PB_BloodDelta_reflection_;
  delete PB_FightAtt::default_instance_;
  delete PB_FightAtt_reflection_;
}

void protobuf_AddDesc_FightInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017FightInfo.proto\")\n\010PB_Skill\022\016\n\002id\030\001 \001("
    "\005:\002-1\022\r\n\005level\030\002 \001(\005\"7\n\025PB_FightProperty"
    "Delta\022\r\n\005delta\030\001 \001(\005\022\017\n\007percent\030\002 \001(\002\"\037\n"
    "\016PB_RoomHistory\022\r\n\005count\030\001 \001(\005\"R\n\rPB_Blo"
    "odDelta\022\r\n\005toAtk\030\001 \001(\005\022\r\n\005toDef\030\002 \001(\005\022\017\n"
    "\007toDodge\030\003 \001(\005\022\022\n\ntoAccuracy\030\004 \001(\005\"\317\005\n\013P"
    "B_FightAtt\022#\n\006status\030\001 \001(\0162\023.PB_FightAtt"
    ".Status\022\031\n\006skills\030\002 \003(\0132\t.PB_Skill\022\023\n\013se"
    "lfFaction\030\003 \001(\005\022\027\n\017friendlyFaction\030\004 \001(\005"
    "\022\022\n\nreviveTime\030\005 \001(\005\022\n\n\002hp\030\n \001(\005\022\014\n\004mana"
    "\030\013 \001(\005\022\022\n\nproperties\030\014 \003(\005\022/\n\017properties"
    "Delta\030\r \003(\0132\026.PB_FightPropertyDelta\022\r\n\005l"
    "evel\030\016 \001(\005\022\013\n\003exp\030\017 \001(\003\022\016\n\006energy\030\020 \001(\005\022"
    "\022\n\nbloodLevel\030\021 \001(\005\022\021\n\tbloodNode\030\022 \001(\005\022\""
    "\n\nbloodDelta\030\023 \003(\0132\016.PB_BloodDelta\022\023\n\010cu"
    "rTower\030\024 \001(\005:\0011\022\020\n\010maxTower\030\025 \001(\005\022\022\n\nmax"
    "Survive\030\026 \001(\005\022\016\n\006winPVP\030\027 \001(\005\022\017\n\007losePVP"
    "\030\030 \001(\005\022\025\n\rbaseWingLevel\030\032 \001(\005\022\026\n\016baseWin"
    "gDegree\030\033 \001(\005\022\025\n\rworldBossHurt\030\034 \001(\005\022\024\n\014"
    "worldBossNum\030\035 \001(\005\022\027\n\013fightingPet\030\036 \001(\005:"
    "\002-1\022\023\n\013transformID\030  \001(\005\"2\n\006Status\022\010\n\004ID"
    "LE\020\000\022\010\n\004MOVE\020\001\022\n\n\006ATTACK\020\002\022\010\n\004DEAD\020\003\"N\n\014"
    "PropertyType\022\007\n\003ATK\020\000\022\007\n\003DEF\020\001\022\t\n\005MAXHP\020"
    "\002\022\010\n\004CRIT\020\003\022\014\n\010ACCURACY\020\004\022\t\n\005DODGE\020\005", 956);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FightInfo.proto", &protobuf_RegisterTypes);
  PB_Skill::default_instance_ = new PB_Skill();
  PB_FightPropertyDelta::default_instance_ = new PB_FightPropertyDelta();
  PB_RoomHistory::default_instance_ = new PB_RoomHistory();
  PB_BloodDelta::default_instance_ = new PB_BloodDelta();
  PB_FightAtt::default_instance_ = new PB_FightAtt();
  PB_Skill::default_instance_->InitAsDefaultInstance();
  PB_FightPropertyDelta::default_instance_->InitAsDefaultInstance();
  PB_RoomHistory::default_instance_->InitAsDefaultInstance();
  PB_BloodDelta::default_instance_->InitAsDefaultInstance();
  PB_FightAtt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FightInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FightInfo_2eproto {
  StaticDescriptorInitializer_FightInfo_2eproto() {
    protobuf_AddDesc_FightInfo_2eproto();
  }
} static_descriptor_initializer_FightInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PB_Skill::kIdFieldNumber;
const int PB_Skill::kLevelFieldNumber;
#endif  // !_MSC_VER

PB_Skill::PB_Skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_Skill::InitAsDefaultInstance() {
}

PB_Skill::PB_Skill(const PB_Skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_Skill::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_Skill::~PB_Skill() {
  SharedDtor();
}

void PB_Skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_Skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_Skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_Skill_descriptor_;
}

const PB_Skill& PB_Skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightInfo_2eproto();  return *default_instance_;
}

PB_Skill* PB_Skill::default_instance_ = NULL;

PB_Skill* PB_Skill::New() const {
  return new PB_Skill;
}

void PB_Skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_Skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_Skill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_Skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_Skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_Skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_Skill::MergeFrom(const PB_Skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_Skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_Skill::CopyFrom(const PB_Skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_Skill::IsInitialized() const {
  
  return true;
}

void PB_Skill::Swap(PB_Skill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_Skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_Skill_descriptor_;
  metadata.reflection = PB_Skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_FightPropertyDelta::kDeltaFieldNumber;
const int PB_FightPropertyDelta::kPercentFieldNumber;
#endif  // !_MSC_VER

PB_FightPropertyDelta::PB_FightPropertyDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_FightPropertyDelta::InitAsDefaultInstance() {
}

PB_FightPropertyDelta::PB_FightPropertyDelta(const PB_FightPropertyDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_FightPropertyDelta::SharedCtor() {
  _cached_size_ = 0;
  delta_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_FightPropertyDelta::~PB_FightPropertyDelta() {
  SharedDtor();
}

void PB_FightPropertyDelta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_FightPropertyDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_FightPropertyDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_FightPropertyDelta_descriptor_;
}

const PB_FightPropertyDelta& PB_FightPropertyDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightInfo_2eproto();  return *default_instance_;
}

PB_FightPropertyDelta* PB_FightPropertyDelta::default_instance_ = NULL;

PB_FightPropertyDelta* PB_FightPropertyDelta::New() const {
  return new PB_FightPropertyDelta;
}

void PB_FightPropertyDelta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delta_ = 0;
    percent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_FightPropertyDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_percent;
        break;
      }
      
      // optional float percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_FightPropertyDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 delta = 1;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delta(), output);
  }
  
  // optional float percent = 2;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->percent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_FightPropertyDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 delta = 1;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delta(), target);
  }
  
  // optional float percent = 2;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->percent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_FightPropertyDelta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 delta = 1;
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }
    
    // optional float percent = 2;
    if (has_percent()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_FightPropertyDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_FightPropertyDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_FightPropertyDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_FightPropertyDelta::MergeFrom(const PB_FightPropertyDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_FightPropertyDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_FightPropertyDelta::CopyFrom(const PB_FightPropertyDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_FightPropertyDelta::IsInitialized() const {
  
  return true;
}

void PB_FightPropertyDelta::Swap(PB_FightPropertyDelta* other) {
  if (other != this) {
    std::swap(delta_, other->delta_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_FightPropertyDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_FightPropertyDelta_descriptor_;
  metadata.reflection = PB_FightPropertyDelta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_RoomHistory::kCountFieldNumber;
#endif  // !_MSC_VER

PB_RoomHistory::PB_RoomHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_RoomHistory::InitAsDefaultInstance() {
}

PB_RoomHistory::PB_RoomHistory(const PB_RoomHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_RoomHistory::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoomHistory::~PB_RoomHistory() {
  SharedDtor();
}

void PB_RoomHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RoomHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoomHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoomHistory_descriptor_;
}

const PB_RoomHistory& PB_RoomHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightInfo_2eproto();  return *default_instance_;
}

PB_RoomHistory* PB_RoomHistory::default_instance_ = NULL;

PB_RoomHistory* PB_RoomHistory::New() const {
  return new PB_RoomHistory;
}

void PB_RoomHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoomHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_RoomHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_RoomHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_RoomHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoomHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoomHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoomHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoomHistory::MergeFrom(const PB_RoomHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoomHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoomHistory::CopyFrom(const PB_RoomHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoomHistory::IsInitialized() const {
  
  return true;
}

void PB_RoomHistory::Swap(PB_RoomHistory* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoomHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoomHistory_descriptor_;
  metadata.reflection = PB_RoomHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_BloodDelta::kToAtkFieldNumber;
const int PB_BloodDelta::kToDefFieldNumber;
const int PB_BloodDelta::kToDodgeFieldNumber;
const int PB_BloodDelta::kToAccuracyFieldNumber;
#endif  // !_MSC_VER

PB_BloodDelta::PB_BloodDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_BloodDelta::InitAsDefaultInstance() {
}

PB_BloodDelta::PB_BloodDelta(const PB_BloodDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_BloodDelta::SharedCtor() {
  _cached_size_ = 0;
  toAtk_ = 0;
  toDef_ = 0;
  toDodge_ = 0;
  toAccuracy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_BloodDelta::~PB_BloodDelta() {
  SharedDtor();
}

void PB_BloodDelta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_BloodDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_BloodDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_BloodDelta_descriptor_;
}

const PB_BloodDelta& PB_BloodDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightInfo_2eproto();  return *default_instance_;
}

PB_BloodDelta* PB_BloodDelta::default_instance_ = NULL;

PB_BloodDelta* PB_BloodDelta::New() const {
  return new PB_BloodDelta;
}

void PB_BloodDelta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    toAtk_ = 0;
    toDef_ = 0;
    toDodge_ = 0;
    toAccuracy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_BloodDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 toAtk = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toAtk_)));
          set_has_toAtk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toDef;
        break;
      }
      
      // optional int32 toDef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toDef_)));
          set_has_toDef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toDodge;
        break;
      }
      
      // optional int32 toDodge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toDodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toDodge_)));
          set_has_toDodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_toAccuracy;
        break;
      }
      
      // optional int32 toAccuracy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toAccuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toAccuracy_)));
          set_has_toAccuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_BloodDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 toAtk = 1;
  if (has_toAtk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->toAtk(), output);
  }
  
  // optional int32 toDef = 2;
  if (has_toDef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->toDef(), output);
  }
  
  // optional int32 toDodge = 3;
  if (has_toDodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toDodge(), output);
  }
  
  // optional int32 toAccuracy = 4;
  if (has_toAccuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->toAccuracy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_BloodDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 toAtk = 1;
  if (has_toAtk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->toAtk(), target);
  }
  
  // optional int32 toDef = 2;
  if (has_toDef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->toDef(), target);
  }
  
  // optional int32 toDodge = 3;
  if (has_toDodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->toDodge(), target);
  }
  
  // optional int32 toAccuracy = 4;
  if (has_toAccuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->toAccuracy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_BloodDelta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 toAtk = 1;
    if (has_toAtk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toAtk());
    }
    
    // optional int32 toDef = 2;
    if (has_toDef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toDef());
    }
    
    // optional int32 toDodge = 3;
    if (has_toDodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toDodge());
    }
    
    // optional int32 toAccuracy = 4;
    if (has_toAccuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toAccuracy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_BloodDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_BloodDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_BloodDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_BloodDelta::MergeFrom(const PB_BloodDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toAtk()) {
      set_toAtk(from.toAtk());
    }
    if (from.has_toDef()) {
      set_toDef(from.toDef());
    }
    if (from.has_toDodge()) {
      set_toDodge(from.toDodge());
    }
    if (from.has_toAccuracy()) {
      set_toAccuracy(from.toAccuracy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_BloodDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_BloodDelta::CopyFrom(const PB_BloodDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_BloodDelta::IsInitialized() const {
  
  return true;
}

void PB_BloodDelta::Swap(PB_BloodDelta* other) {
  if (other != this) {
    std::swap(toAtk_, other->toAtk_);
    std::swap(toDef_, other->toDef_);
    std::swap(toDodge_, other->toDodge_);
    std::swap(toAccuracy_, other->toAccuracy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_BloodDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_BloodDelta_descriptor_;
  metadata.reflection = PB_BloodDelta_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PB_FightAtt_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_FightAtt_Status_descriptor_;
}
bool PB_FightAtt_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_FightAtt_Status PB_FightAtt::IDLE;
const PB_FightAtt_Status PB_FightAtt::MOVE;
const PB_FightAtt_Status PB_FightAtt::ATTACK;
const PB_FightAtt_Status PB_FightAtt::DEAD;
const PB_FightAtt_Status PB_FightAtt::Status_MIN;
const PB_FightAtt_Status PB_FightAtt::Status_MAX;
const int PB_FightAtt::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PB_FightAtt_PropertyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_FightAtt_PropertyType_descriptor_;
}
bool PB_FightAtt_PropertyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_FightAtt_PropertyType PB_FightAtt::ATK;
const PB_FightAtt_PropertyType PB_FightAtt::DEF;
const PB_FightAtt_PropertyType PB_FightAtt::MAXHP;
const PB_FightAtt_PropertyType PB_FightAtt::CRIT;
const PB_FightAtt_PropertyType PB_FightAtt::ACCURACY;
const PB_FightAtt_PropertyType PB_FightAtt::DODGE;
const PB_FightAtt_PropertyType PB_FightAtt::PropertyType_MIN;
const PB_FightAtt_PropertyType PB_FightAtt::PropertyType_MAX;
const int PB_FightAtt::PropertyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PB_FightAtt::kStatusFieldNumber;
const int PB_FightAtt::kSkillsFieldNumber;
const int PB_FightAtt::kSelfFactionFieldNumber;
const int PB_FightAtt::kFriendlyFactionFieldNumber;
const int PB_FightAtt::kReviveTimeFieldNumber;
const int PB_FightAtt::kHpFieldNumber;
const int PB_FightAtt::kManaFieldNumber;
const int PB_FightAtt::kPropertiesFieldNumber;
const int PB_FightAtt::kPropertiesDeltaFieldNumber;
const int PB_FightAtt::kLevelFieldNumber;
const int PB_FightAtt::kExpFieldNumber;
const int PB_FightAtt::kEnergyFieldNumber;
const int PB_FightAtt::kBloodLevelFieldNumber;
const int PB_FightAtt::kBloodNodeFieldNumber;
const int PB_FightAtt::kBloodDeltaFieldNumber;
const int PB_FightAtt::kCurTowerFieldNumber;
const int PB_FightAtt::kMaxTowerFieldNumber;
const int PB_FightAtt::kMaxSurviveFieldNumber;
const int PB_FightAtt::kWinPVPFieldNumber;
const int PB_FightAtt::kLosePVPFieldNumber;
const int PB_FightAtt::kBaseWingLevelFieldNumber;
const int PB_FightAtt::kBaseWingDegreeFieldNumber;
const int PB_FightAtt::kWorldBossHurtFieldNumber;
const int PB_FightAtt::kWorldBossNumFieldNumber;
const int PB_FightAtt::kFightingPetFieldNumber;
const int PB_FightAtt::kTransformIDFieldNumber;
#endif  // !_MSC_VER

PB_FightAtt::PB_FightAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_FightAtt::InitAsDefaultInstance() {
}

PB_FightAtt::PB_FightAtt(const PB_FightAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_FightAtt::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  selfFaction_ = 0;
  friendlyFaction_ = 0;
  reviveTime_ = 0;
  hp_ = 0;
  mana_ = 0;
  level_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  energy_ = 0;
  bloodLevel_ = 0;
  bloodNode_ = 0;
  curTower_ = 1;
  maxTower_ = 0;
  maxSurvive_ = 0;
  winPVP_ = 0;
  losePVP_ = 0;
  baseWingLevel_ = 0;
  baseWingDegree_ = 0;
  worldBossHurt_ = 0;
  worldBossNum_ = 0;
  fightingPet_ = -1;
  transformID_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_FightAtt::~PB_FightAtt() {
  SharedDtor();
}

void PB_FightAtt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_FightAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_FightAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_FightAtt_descriptor_;
}

const PB_FightAtt& PB_FightAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FightInfo_2eproto();  return *default_instance_;
}

PB_FightAtt* PB_FightAtt::default_instance_ = NULL;

PB_FightAtt* PB_FightAtt::New() const {
  return new PB_FightAtt;
}

void PB_FightAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    selfFaction_ = 0;
    friendlyFaction_ = 0;
    reviveTime_ = 0;
    hp_ = 0;
    mana_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    level_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    energy_ = 0;
    bloodLevel_ = 0;
    bloodNode_ = 0;
    curTower_ = 1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    maxTower_ = 0;
    maxSurvive_ = 0;
    winPVP_ = 0;
    losePVP_ = 0;
    baseWingLevel_ = 0;
    baseWingDegree_ = 0;
    worldBossHurt_ = 0;
    worldBossNum_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    fightingPet_ = -1;
    transformID_ = 0;
  }
  skills_.Clear();
  properties_.Clear();
  propertiesDelta_.Clear();
  bloodDelta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_FightAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_FightAtt.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_FightAtt_Status_IsValid(value)) {
            set_status(static_cast< ::PB_FightAtt_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skills;
        break;
      }
      
      // repeated .PB_Skill skills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skills;
        if (input->ExpectTag(24)) goto parse_selfFaction;
        break;
      }
      
      // optional int32 selfFaction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfFaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfFaction_)));
          set_has_selfFaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendlyFaction;
        break;
      }
      
      // optional int32 friendlyFaction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendlyFaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendlyFaction_)));
          set_has_friendlyFaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reviveTime;
        break;
      }
      
      // optional int32 reviveTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reviveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reviveTime_)));
          set_has_reviveTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mana;
        break;
      }
      
      // optional int32 mana = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mana:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mana_)));
          set_has_mana();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_properties;
        break;
      }
      
      // repeated int32 properties = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_properties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_properties())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_properties())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_properties;
        if (input->ExpectTag(106)) goto parse_propertiesDelta;
        break;
      }
      
      // repeated .PB_FightPropertyDelta propertiesDelta = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propertiesDelta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propertiesDelta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_propertiesDelta;
        if (input->ExpectTag(112)) goto parse_level;
        break;
      }
      
      // optional int32 level = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_exp;
        break;
      }
      
      // optional int64 exp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_energy;
        break;
      }
      
      // optional int32 energy = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bloodLevel;
        break;
      }
      
      // optional int32 bloodLevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bloodLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bloodLevel_)));
          set_has_bloodLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bloodNode;
        break;
      }
      
      // optional int32 bloodNode = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bloodNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bloodNode_)));
          set_has_bloodNode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_bloodDelta;
        break;
      }
      
      // repeated .PB_BloodDelta bloodDelta = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bloodDelta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bloodDelta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_bloodDelta;
        if (input->ExpectTag(160)) goto parse_curTower;
        break;
      }
      
      // optional int32 curTower = 20 [default = 1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curTower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curTower_)));
          set_has_curTower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_maxTower;
        break;
      }
      
      // optional int32 maxTower = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxTower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxTower_)));
          set_has_maxTower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_maxSurvive;
        break;
      }
      
      // optional int32 maxSurvive = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxSurvive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxSurvive_)));
          set_has_maxSurvive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_winPVP;
        break;
      }
      
      // optional int32 winPVP = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winPVP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winPVP_)));
          set_has_winPVP();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_losePVP;
        break;
      }
      
      // optional int32 losePVP = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losePVP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losePVP_)));
          set_has_losePVP();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_baseWingLevel;
        break;
      }
      
      // optional int32 baseWingLevel = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseWingLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseWingLevel_)));
          set_has_baseWingLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_baseWingDegree;
        break;
      }
      
      // optional int32 baseWingDegree = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseWingDegree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseWingDegree_)));
          set_has_baseWingDegree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_worldBossHurt;
        break;
      }
      
      // optional int32 worldBossHurt = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldBossHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worldBossHurt_)));
          set_has_worldBossHurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_worldBossNum;
        break;
      }
      
      // optional int32 worldBossNum = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldBossNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worldBossNum_)));
          set_has_worldBossNum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fightingPet;
        break;
      }
      
      // optional int32 fightingPet = 30 [default = -1];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightingPet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightingPet_)));
          set_has_fightingPet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transformID;
        break;
      }
      
      // optional int32 transformID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transformID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transformID_)));
          set_has_transformID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_FightAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_FightAtt.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // repeated .PB_Skill skills = 2;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skills(i), output);
  }
  
  // optional int32 selfFaction = 3;
  if (has_selfFaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfFaction(), output);
  }
  
  // optional int32 friendlyFaction = 4;
  if (has_friendlyFaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->friendlyFaction(), output);
  }
  
  // optional int32 reviveTime = 5;
  if (has_reviveTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reviveTime(), output);
  }
  
  // optional int32 hp = 10;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hp(), output);
  }
  
  // optional int32 mana = 11;
  if (has_mana()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mana(), output);
  }
  
  // repeated int32 properties = 12;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->properties(i), output);
  }
  
  // repeated .PB_FightPropertyDelta propertiesDelta = 13;
  for (int i = 0; i < this->propertiesDelta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->propertiesDelta(i), output);
  }
  
  // optional int32 level = 14;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->level(), output);
  }
  
  // optional int64 exp = 15;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->exp(), output);
  }
  
  // optional int32 energy = 16;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->energy(), output);
  }
  
  // optional int32 bloodLevel = 17;
  if (has_bloodLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bloodLevel(), output);
  }
  
  // optional int32 bloodNode = 18;
  if (has_bloodNode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bloodNode(), output);
  }
  
  // repeated .PB_BloodDelta bloodDelta = 19;
  for (int i = 0; i < this->bloodDelta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->bloodDelta(i), output);
  }
  
  // optional int32 curTower = 20 [default = 1];
  if (has_curTower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->curTower(), output);
  }
  
  // optional int32 maxTower = 21;
  if (has_maxTower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->maxTower(), output);
  }
  
  // optional int32 maxSurvive = 22;
  if (has_maxSurvive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->maxSurvive(), output);
  }
  
  // optional int32 winPVP = 23;
  if (has_winPVP()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->winPVP(), output);
  }
  
  // optional int32 losePVP = 24;
  if (has_losePVP()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->losePVP(), output);
  }
  
  // optional int32 baseWingLevel = 26;
  if (has_baseWingLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->baseWingLevel(), output);
  }
  
  // optional int32 baseWingDegree = 27;
  if (has_baseWingDegree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->baseWingDegree(), output);
  }
  
  // optional int32 worldBossHurt = 28;
  if (has_worldBossHurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->worldBossHurt(), output);
  }
  
  // optional int32 worldBossNum = 29;
  if (has_worldBossNum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->worldBossNum(), output);
  }
  
  // optional int32 fightingPet = 30 [default = -1];
  if (has_fightingPet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->fightingPet(), output);
  }
  
  // optional int32 transformID = 32;
  if (has_transformID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transformID(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_FightAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_FightAtt.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // repeated .PB_Skill skills = 2;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skills(i), target);
  }
  
  // optional int32 selfFaction = 3;
  if (has_selfFaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfFaction(), target);
  }
  
  // optional int32 friendlyFaction = 4;
  if (has_friendlyFaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->friendlyFaction(), target);
  }
  
  // optional int32 reviveTime = 5;
  if (has_reviveTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reviveTime(), target);
  }
  
  // optional int32 hp = 10;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hp(), target);
  }
  
  // optional int32 mana = 11;
  if (has_mana()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mana(), target);
  }
  
  // repeated int32 properties = 12;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->properties(i), target);
  }
  
  // repeated .PB_FightPropertyDelta propertiesDelta = 13;
  for (int i = 0; i < this->propertiesDelta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->propertiesDelta(i), target);
  }
  
  // optional int32 level = 14;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->level(), target);
  }
  
  // optional int64 exp = 15;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->exp(), target);
  }
  
  // optional int32 energy = 16;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->energy(), target);
  }
  
  // optional int32 bloodLevel = 17;
  if (has_bloodLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bloodLevel(), target);
  }
  
  // optional int32 bloodNode = 18;
  if (has_bloodNode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bloodNode(), target);
  }
  
  // repeated .PB_BloodDelta bloodDelta = 19;
  for (int i = 0; i < this->bloodDelta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->bloodDelta(i), target);
  }
  
  // optional int32 curTower = 20 [default = 1];
  if (has_curTower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->curTower(), target);
  }
  
  // optional int32 maxTower = 21;
  if (has_maxTower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->maxTower(), target);
  }
  
  // optional int32 maxSurvive = 22;
  if (has_maxSurvive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->maxSurvive(), target);
  }
  
  // optional int32 winPVP = 23;
  if (has_winPVP()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->winPVP(), target);
  }
  
  // optional int32 losePVP = 24;
  if (has_losePVP()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->losePVP(), target);
  }
  
  // optional int32 baseWingLevel = 26;
  if (has_baseWingLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->baseWingLevel(), target);
  }
  
  // optional int32 baseWingDegree = 27;
  if (has_baseWingDegree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->baseWingDegree(), target);
  }
  
  // optional int32 worldBossHurt = 28;
  if (has_worldBossHurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->worldBossHurt(), target);
  }
  
  // optional int32 worldBossNum = 29;
  if (has_worldBossNum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->worldBossNum(), target);
  }
  
  // optional int32 fightingPet = 30 [default = -1];
  if (has_fightingPet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->fightingPet(), target);
  }
  
  // optional int32 transformID = 32;
  if (has_transformID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transformID(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_FightAtt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_FightAtt.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional int32 selfFaction = 3;
    if (has_selfFaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfFaction());
    }
    
    // optional int32 friendlyFaction = 4;
    if (has_friendlyFaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendlyFaction());
    }
    
    // optional int32 reviveTime = 5;
    if (has_reviveTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reviveTime());
    }
    
    // optional int32 hp = 10;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 mana = 11;
    if (has_mana()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mana());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 level = 14;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int64 exp = 15;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
    // optional int32 energy = 16;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int32 bloodLevel = 17;
    if (has_bloodLevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bloodLevel());
    }
    
    // optional int32 bloodNode = 18;
    if (has_bloodNode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bloodNode());
    }
    
    // optional int32 curTower = 20 [default = 1];
    if (has_curTower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curTower());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 maxTower = 21;
    if (has_maxTower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxTower());
    }
    
    // optional int32 maxSurvive = 22;
    if (has_maxSurvive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxSurvive());
    }
    
    // optional int32 winPVP = 23;
    if (has_winPVP()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winPVP());
    }
    
    // optional int32 losePVP = 24;
    if (has_losePVP()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losePVP());
    }
    
    // optional int32 baseWingLevel = 26;
    if (has_baseWingLevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseWingLevel());
    }
    
    // optional int32 baseWingDegree = 27;
    if (has_baseWingDegree()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseWingDegree());
    }
    
    // optional int32 worldBossHurt = 28;
    if (has_worldBossHurt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldBossHurt());
    }
    
    // optional int32 worldBossNum = 29;
    if (has_worldBossNum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldBossNum());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 fightingPet = 30 [default = -1];
    if (has_fightingPet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightingPet());
    }
    
    // optional int32 transformID = 32;
    if (has_transformID()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transformID());
    }
    
  }
  // repeated .PB_Skill skills = 2;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }
  
  // repeated int32 properties = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->properties_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->properties(i));
    }
    total_size += 1 * this->properties_size() + data_size;
  }
  
  // repeated .PB_FightPropertyDelta propertiesDelta = 13;
  total_size += 1 * this->propertiesDelta_size();
  for (int i = 0; i < this->propertiesDelta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propertiesDelta(i));
  }
  
  // repeated .PB_BloodDelta bloodDelta = 19;
  total_size += 2 * this->bloodDelta_size();
  for (int i = 0; i < this->bloodDelta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bloodDelta(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_FightAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_FightAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_FightAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_FightAtt::MergeFrom(const PB_FightAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  properties_.MergeFrom(from.properties_);
  propertiesDelta_.MergeFrom(from.propertiesDelta_);
  bloodDelta_.MergeFrom(from.bloodDelta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_selfFaction()) {
      set_selfFaction(from.selfFaction());
    }
    if (from.has_friendlyFaction()) {
      set_friendlyFaction(from.friendlyFaction());
    }
    if (from.has_reviveTime()) {
      set_reviveTime(from.reviveTime());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mana()) {
      set_mana(from.mana());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_bloodLevel()) {
      set_bloodLevel(from.bloodLevel());
    }
    if (from.has_bloodNode()) {
      set_bloodNode(from.bloodNode());
    }
    if (from.has_curTower()) {
      set_curTower(from.curTower());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_maxTower()) {
      set_maxTower(from.maxTower());
    }
    if (from.has_maxSurvive()) {
      set_maxSurvive(from.maxSurvive());
    }
    if (from.has_winPVP()) {
      set_winPVP(from.winPVP());
    }
    if (from.has_losePVP()) {
      set_losePVP(from.losePVP());
    }
    if (from.has_baseWingLevel()) {
      set_baseWingLevel(from.baseWingLevel());
    }
    if (from.has_baseWingDegree()) {
      set_baseWingDegree(from.baseWingDegree());
    }
    if (from.has_worldBossHurt()) {
      set_worldBossHurt(from.worldBossHurt());
    }
    if (from.has_worldBossNum()) {
      set_worldBossNum(from.worldBossNum());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fightingPet()) {
      set_fightingPet(from.fightingPet());
    }
    if (from.has_transformID()) {
      set_transformID(from.transformID());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_FightAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_FightAtt::CopyFrom(const PB_FightAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_FightAtt::IsInitialized() const {
  
  return true;
}

void PB_FightAtt::Swap(PB_FightAtt* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    skills_.Swap(&other->skills_);
    std::swap(selfFaction_, other->selfFaction_);
    std::swap(friendlyFaction_, other->friendlyFaction_);
    std::swap(reviveTime_, other->reviveTime_);
    std::swap(hp_, other->hp_);
    std::swap(mana_, other->mana_);
    properties_.Swap(&other->properties_);
    propertiesDelta_.Swap(&other->propertiesDelta_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(energy_, other->energy_);
    std::swap(bloodLevel_, other->bloodLevel_);
    std::swap(bloodNode_, other->bloodNode_);
    bloodDelta_.Swap(&other->bloodDelta_);
    std::swap(curTower_, other->curTower_);
    std::swap(maxTower_, other->maxTower_);
    std::swap(maxSurvive_, other->maxSurvive_);
    std::swap(winPVP_, other->winPVP_);
    std::swap(losePVP_, other->losePVP_);
    std::swap(baseWingLevel_, other->baseWingLevel_);
    std::swap(baseWingDegree_, other->baseWingDegree_);
    std::swap(worldBossHurt_, other->worldBossHurt_);
    std::swap(worldBossNum_, other->worldBossNum_);
    std::swap(fightingPet_, other->fightingPet_);
    std::swap(transformID_, other->transformID_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_FightAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_FightAtt_descriptor_;
  metadata.reflection = PB_FightAtt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

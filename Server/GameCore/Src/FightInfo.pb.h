// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightInfo.proto

#ifndef PROTOBUF_FightInfo_2eproto__INCLUDED
#define PROTOBUF_FightInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FightInfo_2eproto();
void protobuf_AssignDesc_FightInfo_2eproto();
void protobuf_ShutdownFile_FightInfo_2eproto();

class PB_Skill;
class PB_FightPropertyDelta;
class PB_RoomHistory;
class PB_BloodDelta;
class PB_FightAtt;

enum PB_FightAtt_Status {
  PB_FightAtt_Status_IDLE = 0,
  PB_FightAtt_Status_MOVE = 1,
  PB_FightAtt_Status_ATTACK = 2,
  PB_FightAtt_Status_DEAD = 3
};
bool PB_FightAtt_Status_IsValid(int value);
const PB_FightAtt_Status PB_FightAtt_Status_Status_MIN = PB_FightAtt_Status_IDLE;
const PB_FightAtt_Status PB_FightAtt_Status_Status_MAX = PB_FightAtt_Status_DEAD;
const int PB_FightAtt_Status_Status_ARRAYSIZE = PB_FightAtt_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_FightAtt_Status_descriptor();
inline const ::std::string& PB_FightAtt_Status_Name(PB_FightAtt_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_FightAtt_Status_descriptor(), value);
}
inline bool PB_FightAtt_Status_Parse(
    const ::std::string& name, PB_FightAtt_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_FightAtt_Status>(
    PB_FightAtt_Status_descriptor(), name, value);
}
enum PB_FightAtt_PropertyType {
  PB_FightAtt_PropertyType_ATK = 0,
  PB_FightAtt_PropertyType_DEF = 1,
  PB_FightAtt_PropertyType_MAXHP = 2,
  PB_FightAtt_PropertyType_CRIT = 3,
  PB_FightAtt_PropertyType_ACCURACY = 4,
  PB_FightAtt_PropertyType_DODGE = 5
};
bool PB_FightAtt_PropertyType_IsValid(int value);
const PB_FightAtt_PropertyType PB_FightAtt_PropertyType_PropertyType_MIN = PB_FightAtt_PropertyType_ATK;
const PB_FightAtt_PropertyType PB_FightAtt_PropertyType_PropertyType_MAX = PB_FightAtt_PropertyType_DODGE;
const int PB_FightAtt_PropertyType_PropertyType_ARRAYSIZE = PB_FightAtt_PropertyType_PropertyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_FightAtt_PropertyType_descriptor();
inline const ::std::string& PB_FightAtt_PropertyType_Name(PB_FightAtt_PropertyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_FightAtt_PropertyType_descriptor(), value);
}
inline bool PB_FightAtt_PropertyType_Parse(
    const ::std::string& name, PB_FightAtt_PropertyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_FightAtt_PropertyType>(
    PB_FightAtt_PropertyType_descriptor(), name, value);
}
// ===================================================================

class PB_Skill : public ::google::protobuf::Message {
 public:
  PB_Skill();
  virtual ~PB_Skill();
  
  PB_Skill(const PB_Skill& from);
  
  inline PB_Skill& operator=(const PB_Skill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_Skill& default_instance();
  
  void Swap(PB_Skill* other);
  
  // implements Message ----------------------------------------------
  
  PB_Skill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_Skill& from);
  void MergeFrom(const PB_Skill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1 [default = -1];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PB_Skill)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_FightInfo_2eproto();
  friend void protobuf_AssignDesc_FightInfo_2eproto();
  friend void protobuf_ShutdownFile_FightInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_Skill* default_instance_;
};
// -------------------------------------------------------------------

class PB_FightPropertyDelta : public ::google::protobuf::Message {
 public:
  PB_FightPropertyDelta();
  virtual ~PB_FightPropertyDelta();
  
  PB_FightPropertyDelta(const PB_FightPropertyDelta& from);
  
  inline PB_FightPropertyDelta& operator=(const PB_FightPropertyDelta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_FightPropertyDelta& default_instance();
  
  void Swap(PB_FightPropertyDelta* other);
  
  // implements Message ----------------------------------------------
  
  PB_FightPropertyDelta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_FightPropertyDelta& from);
  void MergeFrom(const PB_FightPropertyDelta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 delta = 1;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 1;
  inline ::google::protobuf::int32 delta() const;
  inline void set_delta(::google::protobuf::int32 value);
  
  // optional float percent = 2;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 2;
  inline float percent() const;
  inline void set_percent(float value);
  
  // @@protoc_insertion_point(class_scope:PB_FightPropertyDelta)
 private:
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_percent();
  inline void clear_has_percent();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 delta_;
  float percent_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_FightInfo_2eproto();
  friend void protobuf_AssignDesc_FightInfo_2eproto();
  friend void protobuf_ShutdownFile_FightInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_FightPropertyDelta* default_instance_;
};
// -------------------------------------------------------------------

class PB_RoomHistory : public ::google::protobuf::Message {
 public:
  PB_RoomHistory();
  virtual ~PB_RoomHistory();
  
  PB_RoomHistory(const PB_RoomHistory& from);
  
  inline PB_RoomHistory& operator=(const PB_RoomHistory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_RoomHistory& default_instance();
  
  void Swap(PB_RoomHistory* other);
  
  // implements Message ----------------------------------------------
  
  PB_RoomHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_RoomHistory& from);
  void MergeFrom(const PB_RoomHistory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PB_RoomHistory)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_FightInfo_2eproto();
  friend void protobuf_AssignDesc_FightInfo_2eproto();
  friend void protobuf_ShutdownFile_FightInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_RoomHistory* default_instance_;
};
// -------------------------------------------------------------------

class PB_BloodDelta : public ::google::protobuf::Message {
 public:
  PB_BloodDelta();
  virtual ~PB_BloodDelta();
  
  PB_BloodDelta(const PB_BloodDelta& from);
  
  inline PB_BloodDelta& operator=(const PB_BloodDelta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_BloodDelta& default_instance();
  
  void Swap(PB_BloodDelta* other);
  
  // implements Message ----------------------------------------------
  
  PB_BloodDelta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_BloodDelta& from);
  void MergeFrom(const PB_BloodDelta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 toAtk = 1;
  inline bool has_toAtk() const;
  inline void clear_toAtk();
  static const int kToAtkFieldNumber = 1;
  inline ::google::protobuf::int32 toAtk() const;
  inline void set_toAtk(::google::protobuf::int32 value);
  
  // optional int32 toDef = 2;
  inline bool has_toDef() const;
  inline void clear_toDef();
  static const int kToDefFieldNumber = 2;
  inline ::google::protobuf::int32 toDef() const;
  inline void set_toDef(::google::protobuf::int32 value);
  
  // optional int32 toDodge = 3;
  inline bool has_toDodge() const;
  inline void clear_toDodge();
  static const int kToDodgeFieldNumber = 3;
  inline ::google::protobuf::int32 toDodge() const;
  inline void set_toDodge(::google::protobuf::int32 value);
  
  // optional int32 toAccuracy = 4;
  inline bool has_toAccuracy() const;
  inline void clear_toAccuracy();
  static const int kToAccuracyFieldNumber = 4;
  inline ::google::protobuf::int32 toAccuracy() const;
  inline void set_toAccuracy(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PB_BloodDelta)
 private:
  inline void set_has_toAtk();
  inline void clear_has_toAtk();
  inline void set_has_toDef();
  inline void clear_has_toDef();
  inline void set_has_toDodge();
  inline void clear_has_toDodge();
  inline void set_has_toAccuracy();
  inline void clear_has_toAccuracy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 toAtk_;
  ::google::protobuf::int32 toDef_;
  ::google::protobuf::int32 toDodge_;
  ::google::protobuf::int32 toAccuracy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_FightInfo_2eproto();
  friend void protobuf_AssignDesc_FightInfo_2eproto();
  friend void protobuf_ShutdownFile_FightInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_BloodDelta* default_instance_;
};
// -------------------------------------------------------------------

class PB_FightAtt : public ::google::protobuf::Message {
 public:
  PB_FightAtt();
  virtual ~PB_FightAtt();
  
  PB_FightAtt(const PB_FightAtt& from);
  
  inline PB_FightAtt& operator=(const PB_FightAtt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_FightAtt& default_instance();
  
  void Swap(PB_FightAtt* other);
  
  // implements Message ----------------------------------------------
  
  PB_FightAtt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_FightAtt& from);
  void MergeFrom(const PB_FightAtt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PB_FightAtt_Status Status;
  static const Status IDLE = PB_FightAtt_Status_IDLE;
  static const Status MOVE = PB_FightAtt_Status_MOVE;
  static const Status ATTACK = PB_FightAtt_Status_ATTACK;
  static const Status DEAD = PB_FightAtt_Status_DEAD;
  static inline bool Status_IsValid(int value) {
    return PB_FightAtt_Status_IsValid(value);
  }
  static const Status Status_MIN =
    PB_FightAtt_Status_Status_MIN;
  static const Status Status_MAX =
    PB_FightAtt_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    PB_FightAtt_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return PB_FightAtt_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return PB_FightAtt_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return PB_FightAtt_Status_Parse(name, value);
  }
  
  typedef PB_FightAtt_PropertyType PropertyType;
  static const PropertyType ATK = PB_FightAtt_PropertyType_ATK;
  static const PropertyType DEF = PB_FightAtt_PropertyType_DEF;
  static const PropertyType MAXHP = PB_FightAtt_PropertyType_MAXHP;
  static const PropertyType CRIT = PB_FightAtt_PropertyType_CRIT;
  static const PropertyType ACCURACY = PB_FightAtt_PropertyType_ACCURACY;
  static const PropertyType DODGE = PB_FightAtt_PropertyType_DODGE;
  static inline bool PropertyType_IsValid(int value) {
    return PB_FightAtt_PropertyType_IsValid(value);
  }
  static const PropertyType PropertyType_MIN =
    PB_FightAtt_PropertyType_PropertyType_MIN;
  static const PropertyType PropertyType_MAX =
    PB_FightAtt_PropertyType_PropertyType_MAX;
  static const int PropertyType_ARRAYSIZE =
    PB_FightAtt_PropertyType_PropertyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PropertyType_descriptor() {
    return PB_FightAtt_PropertyType_descriptor();
  }
  static inline const ::std::string& PropertyType_Name(PropertyType value) {
    return PB_FightAtt_PropertyType_Name(value);
  }
  static inline bool PropertyType_Parse(const ::std::string& name,
      PropertyType* value) {
    return PB_FightAtt_PropertyType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_FightAtt.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::PB_FightAtt_Status status() const;
  inline void set_status(::PB_FightAtt_Status value);
  
  // repeated .PB_Skill skills = 2;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 2;
  inline const ::PB_Skill& skills(int index) const;
  inline ::PB_Skill* mutable_skills(int index);
  inline ::PB_Skill* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_Skill >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_Skill >*
      mutable_skills();
  
  // optional int32 selfFaction = 3;
  inline bool has_selfFaction() const;
  inline void clear_selfFaction();
  static const int kSelfFactionFieldNumber = 3;
  inline ::google::protobuf::int32 selfFaction() const;
  inline void set_selfFaction(::google::protobuf::int32 value);
  
  // optional int32 friendlyFaction = 4;
  inline bool has_friendlyFaction() const;
  inline void clear_friendlyFaction();
  static const int kFriendlyFactionFieldNumber = 4;
  inline ::google::protobuf::int32 friendlyFaction() const;
  inline void set_friendlyFaction(::google::protobuf::int32 value);
  
  // optional int32 reviveTime = 5;
  inline bool has_reviveTime() const;
  inline void clear_reviveTime();
  static const int kReviveTimeFieldNumber = 5;
  inline ::google::protobuf::int32 reviveTime() const;
  inline void set_reviveTime(::google::protobuf::int32 value);
  
  // optional int32 hp = 10;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 10;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional int32 mana = 11;
  inline bool has_mana() const;
  inline void clear_mana();
  static const int kManaFieldNumber = 11;
  inline ::google::protobuf::int32 mana() const;
  inline void set_mana(::google::protobuf::int32 value);
  
  // repeated int32 properties = 12;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 12;
  inline ::google::protobuf::int32 properties(int index) const;
  inline void set_properties(int index, ::google::protobuf::int32 value);
  inline void add_properties(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      properties() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_properties();
  
  // repeated .PB_FightPropertyDelta propertiesDelta = 13;
  inline int propertiesDelta_size() const;
  inline void clear_propertiesDelta();
  static const int kPropertiesDeltaFieldNumber = 13;
  inline const ::PB_FightPropertyDelta& propertiesDelta(int index) const;
  inline ::PB_FightPropertyDelta* mutable_propertiesDelta(int index);
  inline ::PB_FightPropertyDelta* add_propertiesDelta();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta >&
      propertiesDelta() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta >*
      mutable_propertiesDelta();
  
  // optional int32 level = 14;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 14;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int64 exp = 15;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 15;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);
  
  // optional int32 energy = 16;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 16;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);
  
  // optional int32 bloodLevel = 17;
  inline bool has_bloodLevel() const;
  inline void clear_bloodLevel();
  static const int kBloodLevelFieldNumber = 17;
  inline ::google::protobuf::int32 bloodLevel() const;
  inline void set_bloodLevel(::google::protobuf::int32 value);
  
  // optional int32 bloodNode = 18;
  inline bool has_bloodNode() const;
  inline void clear_bloodNode();
  static const int kBloodNodeFieldNumber = 18;
  inline ::google::protobuf::int32 bloodNode() const;
  inline void set_bloodNode(::google::protobuf::int32 value);
  
  // repeated .PB_BloodDelta bloodDelta = 19;
  inline int bloodDelta_size() const;
  inline void clear_bloodDelta();
  static const int kBloodDeltaFieldNumber = 19;
  inline const ::PB_BloodDelta& bloodDelta(int index) const;
  inline ::PB_BloodDelta* mutable_bloodDelta(int index);
  inline ::PB_BloodDelta* add_bloodDelta();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_BloodDelta >&
      bloodDelta() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_BloodDelta >*
      mutable_bloodDelta();
  
  // optional int32 curTower = 20 [default = 1];
  inline bool has_curTower() const;
  inline void clear_curTower();
  static const int kCurTowerFieldNumber = 20;
  inline ::google::protobuf::int32 curTower() const;
  inline void set_curTower(::google::protobuf::int32 value);
  
  // optional int32 maxTower = 21;
  inline bool has_maxTower() const;
  inline void clear_maxTower();
  static const int kMaxTowerFieldNumber = 21;
  inline ::google::protobuf::int32 maxTower() const;
  inline void set_maxTower(::google::protobuf::int32 value);
  
  // optional int32 maxSurvive = 22;
  inline bool has_maxSurvive() const;
  inline void clear_maxSurvive();
  static const int kMaxSurviveFieldNumber = 22;
  inline ::google::protobuf::int32 maxSurvive() const;
  inline void set_maxSurvive(::google::protobuf::int32 value);
  
  // optional int32 winPVP = 23;
  inline bool has_winPVP() const;
  inline void clear_winPVP();
  static const int kWinPVPFieldNumber = 23;
  inline ::google::protobuf::int32 winPVP() const;
  inline void set_winPVP(::google::protobuf::int32 value);
  
  // optional int32 losePVP = 24;
  inline bool has_losePVP() const;
  inline void clear_losePVP();
  static const int kLosePVPFieldNumber = 24;
  inline ::google::protobuf::int32 losePVP() const;
  inline void set_losePVP(::google::protobuf::int32 value);
  
  // optional int32 baseWingLevel = 26;
  inline bool has_baseWingLevel() const;
  inline void clear_baseWingLevel();
  static const int kBaseWingLevelFieldNumber = 26;
  inline ::google::protobuf::int32 baseWingLevel() const;
  inline void set_baseWingLevel(::google::protobuf::int32 value);
  
  // optional int32 baseWingDegree = 27;
  inline bool has_baseWingDegree() const;
  inline void clear_baseWingDegree();
  static const int kBaseWingDegreeFieldNumber = 27;
  inline ::google::protobuf::int32 baseWingDegree() const;
  inline void set_baseWingDegree(::google::protobuf::int32 value);
  
  // optional int32 worldBossHurt = 28;
  inline bool has_worldBossHurt() const;
  inline void clear_worldBossHurt();
  static const int kWorldBossHurtFieldNumber = 28;
  inline ::google::protobuf::int32 worldBossHurt() const;
  inline void set_worldBossHurt(::google::protobuf::int32 value);
  
  // optional int32 worldBossNum = 29;
  inline bool has_worldBossNum() const;
  inline void clear_worldBossNum();
  static const int kWorldBossNumFieldNumber = 29;
  inline ::google::protobuf::int32 worldBossNum() const;
  inline void set_worldBossNum(::google::protobuf::int32 value);
  
  // optional int32 fightingPet = 30 [default = -1];
  inline bool has_fightingPet() const;
  inline void clear_fightingPet();
  static const int kFightingPetFieldNumber = 30;
  inline ::google::protobuf::int32 fightingPet() const;
  inline void set_fightingPet(::google::protobuf::int32 value);
  
  // optional int32 transformID = 32;
  inline bool has_transformID() const;
  inline void clear_transformID();
  static const int kTransformIDFieldNumber = 32;
  inline ::google::protobuf::int32 transformID() const;
  inline void set_transformID(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PB_FightAtt)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_selfFaction();
  inline void clear_has_selfFaction();
  inline void set_has_friendlyFaction();
  inline void clear_has_friendlyFaction();
  inline void set_has_reviveTime();
  inline void clear_has_reviveTime();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_mana();
  inline void clear_has_mana();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_bloodLevel();
  inline void clear_has_bloodLevel();
  inline void set_has_bloodNode();
  inline void clear_has_bloodNode();
  inline void set_has_curTower();
  inline void clear_has_curTower();
  inline void set_has_maxTower();
  inline void clear_has_maxTower();
  inline void set_has_maxSurvive();
  inline void clear_has_maxSurvive();
  inline void set_has_winPVP();
  inline void clear_has_winPVP();
  inline void set_has_losePVP();
  inline void clear_has_losePVP();
  inline void set_has_baseWingLevel();
  inline void clear_has_baseWingLevel();
  inline void set_has_baseWingDegree();
  inline void clear_has_baseWingDegree();
  inline void set_has_worldBossHurt();
  inline void clear_has_worldBossHurt();
  inline void set_has_worldBossNum();
  inline void clear_has_worldBossNum();
  inline void set_has_fightingPet();
  inline void clear_has_fightingPet();
  inline void set_has_transformID();
  inline void clear_has_transformID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_Skill > skills_;
  int status_;
  ::google::protobuf::int32 selfFaction_;
  ::google::protobuf::int32 friendlyFaction_;
  ::google::protobuf::int32 reviveTime_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 mana_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > properties_;
  ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta > propertiesDelta_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 bloodLevel_;
  ::google::protobuf::int32 bloodNode_;
  ::google::protobuf::RepeatedPtrField< ::PB_BloodDelta > bloodDelta_;
  ::google::protobuf::int32 curTower_;
  ::google::protobuf::int32 maxTower_;
  ::google::protobuf::int32 maxSurvive_;
  ::google::protobuf::int32 winPVP_;
  ::google::protobuf::int32 losePVP_;
  ::google::protobuf::int32 baseWingLevel_;
  ::google::protobuf::int32 baseWingDegree_;
  ::google::protobuf::int32 worldBossHurt_;
  ::google::protobuf::int32 worldBossNum_;
  ::google::protobuf::int32 fightingPet_;
  ::google::protobuf::int32 transformID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];
  
  friend void  protobuf_AddDesc_FightInfo_2eproto();
  friend void protobuf_AssignDesc_FightInfo_2eproto();
  friend void protobuf_ShutdownFile_FightInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_FightAtt* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_Skill

// optional int32 id = 1 [default = -1];
inline bool PB_Skill::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_Skill::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_Skill::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_Skill::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 PB_Skill::id() const {
  return id_;
}
inline void PB_Skill::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2;
inline bool PB_Skill::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_Skill::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_Skill::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_Skill::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PB_Skill::level() const {
  return level_;
}
inline void PB_Skill::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// PB_FightPropertyDelta

// optional int32 delta = 1;
inline bool PB_FightPropertyDelta::has_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_FightPropertyDelta::set_has_delta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_FightPropertyDelta::clear_has_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_FightPropertyDelta::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline ::google::protobuf::int32 PB_FightPropertyDelta::delta() const {
  return delta_;
}
inline void PB_FightPropertyDelta::set_delta(::google::protobuf::int32 value) {
  set_has_delta();
  delta_ = value;
}

// optional float percent = 2;
inline bool PB_FightPropertyDelta::has_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_FightPropertyDelta::set_has_percent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_FightPropertyDelta::clear_has_percent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_FightPropertyDelta::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline float PB_FightPropertyDelta::percent() const {
  return percent_;
}
inline void PB_FightPropertyDelta::set_percent(float value) {
  set_has_percent();
  percent_ = value;
}

// -------------------------------------------------------------------

// PB_RoomHistory

// optional int32 count = 1;
inline bool PB_RoomHistory::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_RoomHistory::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_RoomHistory::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_RoomHistory::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PB_RoomHistory::count() const {
  return count_;
}
inline void PB_RoomHistory::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// PB_BloodDelta

// optional int32 toAtk = 1;
inline bool PB_BloodDelta::has_toAtk() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_BloodDelta::set_has_toAtk() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_BloodDelta::clear_has_toAtk() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_BloodDelta::clear_toAtk() {
  toAtk_ = 0;
  clear_has_toAtk();
}
inline ::google::protobuf::int32 PB_BloodDelta::toAtk() const {
  return toAtk_;
}
inline void PB_BloodDelta::set_toAtk(::google::protobuf::int32 value) {
  set_has_toAtk();
  toAtk_ = value;
}

// optional int32 toDef = 2;
inline bool PB_BloodDelta::has_toDef() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_BloodDelta::set_has_toDef() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_BloodDelta::clear_has_toDef() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_BloodDelta::clear_toDef() {
  toDef_ = 0;
  clear_has_toDef();
}
inline ::google::protobuf::int32 PB_BloodDelta::toDef() const {
  return toDef_;
}
inline void PB_BloodDelta::set_toDef(::google::protobuf::int32 value) {
  set_has_toDef();
  toDef_ = value;
}

// optional int32 toDodge = 3;
inline bool PB_BloodDelta::has_toDodge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_BloodDelta::set_has_toDodge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_BloodDelta::clear_has_toDodge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_BloodDelta::clear_toDodge() {
  toDodge_ = 0;
  clear_has_toDodge();
}
inline ::google::protobuf::int32 PB_BloodDelta::toDodge() const {
  return toDodge_;
}
inline void PB_BloodDelta::set_toDodge(::google::protobuf::int32 value) {
  set_has_toDodge();
  toDodge_ = value;
}

// optional int32 toAccuracy = 4;
inline bool PB_BloodDelta::has_toAccuracy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_BloodDelta::set_has_toAccuracy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_BloodDelta::clear_has_toAccuracy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_BloodDelta::clear_toAccuracy() {
  toAccuracy_ = 0;
  clear_has_toAccuracy();
}
inline ::google::protobuf::int32 PB_BloodDelta::toAccuracy() const {
  return toAccuracy_;
}
inline void PB_BloodDelta::set_toAccuracy(::google::protobuf::int32 value) {
  set_has_toAccuracy();
  toAccuracy_ = value;
}

// -------------------------------------------------------------------

// PB_FightAtt

// optional .PB_FightAtt.Status status = 1;
inline bool PB_FightAtt::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_FightAtt::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_FightAtt::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_FightAtt::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::PB_FightAtt_Status PB_FightAtt::status() const {
  return static_cast< ::PB_FightAtt_Status >(status_);
}
inline void PB_FightAtt::set_status(::PB_FightAtt_Status value) {
  GOOGLE_DCHECK(::PB_FightAtt_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// repeated .PB_Skill skills = 2;
inline int PB_FightAtt::skills_size() const {
  return skills_.size();
}
inline void PB_FightAtt::clear_skills() {
  skills_.Clear();
}
inline const ::PB_Skill& PB_FightAtt::skills(int index) const {
  return skills_.Get(index);
}
inline ::PB_Skill* PB_FightAtt::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::PB_Skill* PB_FightAtt::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_Skill >&
PB_FightAtt::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_Skill >*
PB_FightAtt::mutable_skills() {
  return &skills_;
}

// optional int32 selfFaction = 3;
inline bool PB_FightAtt::has_selfFaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_FightAtt::set_has_selfFaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_FightAtt::clear_has_selfFaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_FightAtt::clear_selfFaction() {
  selfFaction_ = 0;
  clear_has_selfFaction();
}
inline ::google::protobuf::int32 PB_FightAtt::selfFaction() const {
  return selfFaction_;
}
inline void PB_FightAtt::set_selfFaction(::google::protobuf::int32 value) {
  set_has_selfFaction();
  selfFaction_ = value;
}

// optional int32 friendlyFaction = 4;
inline bool PB_FightAtt::has_friendlyFaction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_FightAtt::set_has_friendlyFaction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_FightAtt::clear_has_friendlyFaction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_FightAtt::clear_friendlyFaction() {
  friendlyFaction_ = 0;
  clear_has_friendlyFaction();
}
inline ::google::protobuf::int32 PB_FightAtt::friendlyFaction() const {
  return friendlyFaction_;
}
inline void PB_FightAtt::set_friendlyFaction(::google::protobuf::int32 value) {
  set_has_friendlyFaction();
  friendlyFaction_ = value;
}

// optional int32 reviveTime = 5;
inline bool PB_FightAtt::has_reviveTime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_FightAtt::set_has_reviveTime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_FightAtt::clear_has_reviveTime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_FightAtt::clear_reviveTime() {
  reviveTime_ = 0;
  clear_has_reviveTime();
}
inline ::google::protobuf::int32 PB_FightAtt::reviveTime() const {
  return reviveTime_;
}
inline void PB_FightAtt::set_reviveTime(::google::protobuf::int32 value) {
  set_has_reviveTime();
  reviveTime_ = value;
}

// optional int32 hp = 10;
inline bool PB_FightAtt::has_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_FightAtt::set_has_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_FightAtt::clear_has_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_FightAtt::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PB_FightAtt::hp() const {
  return hp_;
}
inline void PB_FightAtt::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 mana = 11;
inline bool PB_FightAtt::has_mana() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_FightAtt::set_has_mana() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_FightAtt::clear_has_mana() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_FightAtt::clear_mana() {
  mana_ = 0;
  clear_has_mana();
}
inline ::google::protobuf::int32 PB_FightAtt::mana() const {
  return mana_;
}
inline void PB_FightAtt::set_mana(::google::protobuf::int32 value) {
  set_has_mana();
  mana_ = value;
}

// repeated int32 properties = 12;
inline int PB_FightAtt::properties_size() const {
  return properties_.size();
}
inline void PB_FightAtt::clear_properties() {
  properties_.Clear();
}
inline ::google::protobuf::int32 PB_FightAtt::properties(int index) const {
  return properties_.Get(index);
}
inline void PB_FightAtt::set_properties(int index, ::google::protobuf::int32 value) {
  properties_.Set(index, value);
}
inline void PB_FightAtt::add_properties(::google::protobuf::int32 value) {
  properties_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_FightAtt::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_FightAtt::mutable_properties() {
  return &properties_;
}

// repeated .PB_FightPropertyDelta propertiesDelta = 13;
inline int PB_FightAtt::propertiesDelta_size() const {
  return propertiesDelta_.size();
}
inline void PB_FightAtt::clear_propertiesDelta() {
  propertiesDelta_.Clear();
}
inline const ::PB_FightPropertyDelta& PB_FightAtt::propertiesDelta(int index) const {
  return propertiesDelta_.Get(index);
}
inline ::PB_FightPropertyDelta* PB_FightAtt::mutable_propertiesDelta(int index) {
  return propertiesDelta_.Mutable(index);
}
inline ::PB_FightPropertyDelta* PB_FightAtt::add_propertiesDelta() {
  return propertiesDelta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta >&
PB_FightAtt::propertiesDelta() const {
  return propertiesDelta_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_FightPropertyDelta >*
PB_FightAtt::mutable_propertiesDelta() {
  return &propertiesDelta_;
}

// optional int32 level = 14;
inline bool PB_FightAtt::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_FightAtt::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PB_FightAtt::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PB_FightAtt::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PB_FightAtt::level() const {
  return level_;
}
inline void PB_FightAtt::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 exp = 15;
inline bool PB_FightAtt::has_exp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PB_FightAtt::set_has_exp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PB_FightAtt::clear_has_exp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PB_FightAtt::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 PB_FightAtt::exp() const {
  return exp_;
}
inline void PB_FightAtt::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 energy = 16;
inline bool PB_FightAtt::has_energy() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PB_FightAtt::set_has_energy() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PB_FightAtt::clear_has_energy() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PB_FightAtt::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 PB_FightAtt::energy() const {
  return energy_;
}
inline void PB_FightAtt::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// optional int32 bloodLevel = 17;
inline bool PB_FightAtt::has_bloodLevel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PB_FightAtt::set_has_bloodLevel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PB_FightAtt::clear_has_bloodLevel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PB_FightAtt::clear_bloodLevel() {
  bloodLevel_ = 0;
  clear_has_bloodLevel();
}
inline ::google::protobuf::int32 PB_FightAtt::bloodLevel() const {
  return bloodLevel_;
}
inline void PB_FightAtt::set_bloodLevel(::google::protobuf::int32 value) {
  set_has_bloodLevel();
  bloodLevel_ = value;
}

// optional int32 bloodNode = 18;
inline bool PB_FightAtt::has_bloodNode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PB_FightAtt::set_has_bloodNode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PB_FightAtt::clear_has_bloodNode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PB_FightAtt::clear_bloodNode() {
  bloodNode_ = 0;
  clear_has_bloodNode();
}
inline ::google::protobuf::int32 PB_FightAtt::bloodNode() const {
  return bloodNode_;
}
inline void PB_FightAtt::set_bloodNode(::google::protobuf::int32 value) {
  set_has_bloodNode();
  bloodNode_ = value;
}

// repeated .PB_BloodDelta bloodDelta = 19;
inline int PB_FightAtt::bloodDelta_size() const {
  return bloodDelta_.size();
}
inline void PB_FightAtt::clear_bloodDelta() {
  bloodDelta_.Clear();
}
inline const ::PB_BloodDelta& PB_FightAtt::bloodDelta(int index) const {
  return bloodDelta_.Get(index);
}
inline ::PB_BloodDelta* PB_FightAtt::mutable_bloodDelta(int index) {
  return bloodDelta_.Mutable(index);
}
inline ::PB_BloodDelta* PB_FightAtt::add_bloodDelta() {
  return bloodDelta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_BloodDelta >&
PB_FightAtt::bloodDelta() const {
  return bloodDelta_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_BloodDelta >*
PB_FightAtt::mutable_bloodDelta() {
  return &bloodDelta_;
}

// optional int32 curTower = 20 [default = 1];
inline bool PB_FightAtt::has_curTower() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PB_FightAtt::set_has_curTower() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PB_FightAtt::clear_has_curTower() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PB_FightAtt::clear_curTower() {
  curTower_ = 1;
  clear_has_curTower();
}
inline ::google::protobuf::int32 PB_FightAtt::curTower() const {
  return curTower_;
}
inline void PB_FightAtt::set_curTower(::google::protobuf::int32 value) {
  set_has_curTower();
  curTower_ = value;
}

// optional int32 maxTower = 21;
inline bool PB_FightAtt::has_maxTower() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PB_FightAtt::set_has_maxTower() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PB_FightAtt::clear_has_maxTower() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PB_FightAtt::clear_maxTower() {
  maxTower_ = 0;
  clear_has_maxTower();
}
inline ::google::protobuf::int32 PB_FightAtt::maxTower() const {
  return maxTower_;
}
inline void PB_FightAtt::set_maxTower(::google::protobuf::int32 value) {
  set_has_maxTower();
  maxTower_ = value;
}

// optional int32 maxSurvive = 22;
inline bool PB_FightAtt::has_maxSurvive() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PB_FightAtt::set_has_maxSurvive() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PB_FightAtt::clear_has_maxSurvive() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PB_FightAtt::clear_maxSurvive() {
  maxSurvive_ = 0;
  clear_has_maxSurvive();
}
inline ::google::protobuf::int32 PB_FightAtt::maxSurvive() const {
  return maxSurvive_;
}
inline void PB_FightAtt::set_maxSurvive(::google::protobuf::int32 value) {
  set_has_maxSurvive();
  maxSurvive_ = value;
}

// optional int32 winPVP = 23;
inline bool PB_FightAtt::has_winPVP() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PB_FightAtt::set_has_winPVP() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PB_FightAtt::clear_has_winPVP() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PB_FightAtt::clear_winPVP() {
  winPVP_ = 0;
  clear_has_winPVP();
}
inline ::google::protobuf::int32 PB_FightAtt::winPVP() const {
  return winPVP_;
}
inline void PB_FightAtt::set_winPVP(::google::protobuf::int32 value) {
  set_has_winPVP();
  winPVP_ = value;
}

// optional int32 losePVP = 24;
inline bool PB_FightAtt::has_losePVP() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PB_FightAtt::set_has_losePVP() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PB_FightAtt::clear_has_losePVP() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PB_FightAtt::clear_losePVP() {
  losePVP_ = 0;
  clear_has_losePVP();
}
inline ::google::protobuf::int32 PB_FightAtt::losePVP() const {
  return losePVP_;
}
inline void PB_FightAtt::set_losePVP(::google::protobuf::int32 value) {
  set_has_losePVP();
  losePVP_ = value;
}

// optional int32 baseWingLevel = 26;
inline bool PB_FightAtt::has_baseWingLevel() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PB_FightAtt::set_has_baseWingLevel() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PB_FightAtt::clear_has_baseWingLevel() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PB_FightAtt::clear_baseWingLevel() {
  baseWingLevel_ = 0;
  clear_has_baseWingLevel();
}
inline ::google::protobuf::int32 PB_FightAtt::baseWingLevel() const {
  return baseWingLevel_;
}
inline void PB_FightAtt::set_baseWingLevel(::google::protobuf::int32 value) {
  set_has_baseWingLevel();
  baseWingLevel_ = value;
}

// optional int32 baseWingDegree = 27;
inline bool PB_FightAtt::has_baseWingDegree() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PB_FightAtt::set_has_baseWingDegree() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PB_FightAtt::clear_has_baseWingDegree() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PB_FightAtt::clear_baseWingDegree() {
  baseWingDegree_ = 0;
  clear_has_baseWingDegree();
}
inline ::google::protobuf::int32 PB_FightAtt::baseWingDegree() const {
  return baseWingDegree_;
}
inline void PB_FightAtt::set_baseWingDegree(::google::protobuf::int32 value) {
  set_has_baseWingDegree();
  baseWingDegree_ = value;
}

// optional int32 worldBossHurt = 28;
inline bool PB_FightAtt::has_worldBossHurt() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PB_FightAtt::set_has_worldBossHurt() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PB_FightAtt::clear_has_worldBossHurt() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PB_FightAtt::clear_worldBossHurt() {
  worldBossHurt_ = 0;
  clear_has_worldBossHurt();
}
inline ::google::protobuf::int32 PB_FightAtt::worldBossHurt() const {
  return worldBossHurt_;
}
inline void PB_FightAtt::set_worldBossHurt(::google::protobuf::int32 value) {
  set_has_worldBossHurt();
  worldBossHurt_ = value;
}

// optional int32 worldBossNum = 29;
inline bool PB_FightAtt::has_worldBossNum() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PB_FightAtt::set_has_worldBossNum() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PB_FightAtt::clear_has_worldBossNum() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PB_FightAtt::clear_worldBossNum() {
  worldBossNum_ = 0;
  clear_has_worldBossNum();
}
inline ::google::protobuf::int32 PB_FightAtt::worldBossNum() const {
  return worldBossNum_;
}
inline void PB_FightAtt::set_worldBossNum(::google::protobuf::int32 value) {
  set_has_worldBossNum();
  worldBossNum_ = value;
}

// optional int32 fightingPet = 30 [default = -1];
inline bool PB_FightAtt::has_fightingPet() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PB_FightAtt::set_has_fightingPet() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PB_FightAtt::clear_has_fightingPet() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PB_FightAtt::clear_fightingPet() {
  fightingPet_ = -1;
  clear_has_fightingPet();
}
inline ::google::protobuf::int32 PB_FightAtt::fightingPet() const {
  return fightingPet_;
}
inline void PB_FightAtt::set_fightingPet(::google::protobuf::int32 value) {
  set_has_fightingPet();
  fightingPet_ = value;
}

// optional int32 transformID = 32;
inline bool PB_FightAtt::has_transformID() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PB_FightAtt::set_has_transformID() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PB_FightAtt::clear_has_transformID() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PB_FightAtt::clear_transformID() {
  transformID_ = 0;
  clear_has_transformID();
}
inline ::google::protobuf::int32 PB_FightAtt::transformID() const {
  return transformID_;
}
inline void PB_FightAtt::set_transformID(::google::protobuf::int32 value) {
  set_has_transformID();
  transformID_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_FightAtt_Status>() {
  return ::PB_FightAtt_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_FightAtt_PropertyType>() {
  return ::PB_FightAtt_PropertyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FightInfo_2eproto__INCLUDED

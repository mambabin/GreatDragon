// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuideInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GuideNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuideNode_EndCondition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuideNode_DoEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuideNode_MaskType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllGuideNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllGuideNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuidePass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuidePass_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuidePass_TriggerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllGuidePass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllGuidePass_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GuideInfo_2eproto() {
  protobuf_AddDesc_GuideInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GuideInfo.proto");
  GOOGLE_CHECK(file != NULL);
  GuideNode_descriptor_ = file->message_type(0);
  static const int GuideNode_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, effectID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, ui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, endCondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, doEvent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, scaleX_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, scaleY_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, maskType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, maskSX_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, maskSY_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, maskPX_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, maskPY_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, tipsX_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, tipsY_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, pauseTime_),
  };
  GuideNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideNode_descriptor_,
      GuideNode::default_instance_,
      GuideNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideNode));
  GuideNode_EndCondition_descriptor_ = GuideNode_descriptor_->enum_type(0);
  GuideNode_DoEvent_descriptor_ = GuideNode_descriptor_->enum_type(1);
  GuideNode_MaskType_descriptor_ = GuideNode_descriptor_->enum_type(2);
  AllGuideNode_descriptor_ = file->message_type(1);
  static const int AllGuideNode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGuideNode, guideNodes_),
  };
  AllGuideNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllGuideNode_descriptor_,
      AllGuideNode::default_instance_,
      AllGuideNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGuideNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGuideNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllGuideNode));
  GuidePass_descriptor_ = file->message_type(2);
  static const int GuidePass_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuidePass, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuidePass, triggerType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuidePass, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuidePass, firstNode_),
  };
  GuidePass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuidePass_descriptor_,
      GuidePass::default_instance_,
      GuidePass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuidePass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuidePass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuidePass));
  GuidePass_TriggerType_descriptor_ = GuidePass_descriptor_->enum_type(0);
  AllGuidePass_descriptor_ = file->message_type(3);
  static const int AllGuidePass_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGuidePass, guidePasses_),
  };
  AllGuidePass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllGuidePass_descriptor_,
      AllGuidePass::default_instance_,
      AllGuidePass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGuidePass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGuidePass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllGuidePass));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GuideInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideNode_descriptor_, &GuideNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllGuideNode_descriptor_, &AllGuideNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuidePass_descriptor_, &GuidePass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllGuidePass_descriptor_, &AllGuidePass::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GuideInfo_2eproto() {
  delete GuideNode::default_instance_;
  delete GuideNode_reflection_;
  delete AllGuideNode::default_instance_;
  delete AllGuideNode_reflection_;
  delete GuidePass::default_instance_;
  delete GuidePass_reflection_;
  delete AllGuidePass::default_instance_;
  delete AllGuidePass_reflection_;
}

void protobuf_AddDesc_GuideInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017GuideInfo.proto\"\275\005\n\tGuideNode\022\n\n\002id\030\001 "
    "\001(\005\022\014\n\004next\030\002 \001(\005\022\020\n\010effectID\030\003 \001(\005\022\n\n\002u"
    "i\030\004 \001(\005\022\r\n\005param\030\005 \001(\005\022\t\n\001x\030\006 \001(\002\022\t\n\001y\030\007"
    " \001(\002\022\r\n\005index\030\010 \001(\005\022-\n\014endCondition\030\t \001("
    "\0162\027.GuideNode.EndCondition\022#\n\007doEvent\030\n "
    "\001(\0162\022.GuideNode.DoEvent\022\016\n\006scaleX\030\013 \001(\002\022"
    "\016\n\006scaleY\030\014 \001(\002\022%\n\010maskType\030\r \001(\0162\023.Guid"
    "eNode.MaskType\022\016\n\006maskSX\030\016 \001(\002\022\016\n\006maskSY"
    "\030\017 \001(\002\022\016\n\006maskPX\030\020 \001(\002\022\016\n\006maskPY\030\021 \001(\002\022\r"
    "\n\005tipsX\030\022 \001(\002\022\r\n\005tipsY\030\023 \001(\002\022\t\n\001z\030\024 \001(\002\022"
    "\021\n\tpauseTime\030\025 \001(\002\"\202\001\n\014EndCondition\022\010\n\004N"
    "ONE\020\000\022\t\n\005CLICK\020\001\022\013\n\007OPEN_UI\020\002\022\021\n\rEND_OPE"
    "N_FUNC\020\003\022\t\n\005PRESS\020\004\022\r\n\tOVER_TALK\020\005\022\017\n\013IM"
    "MEDIATELY\020\006\022\022\n\016IN_PEACE_SCENE\020d\"u\n\007DoEve"
    "nt\022\016\n\nNONE_EVENT\020\000\022\r\n\tOPEN_FUNC\020\001\022\017\n\013FUL"
    "L_ENERGY\020\002\022\t\n\005PAUSE\020\003\022\r\n\tADD_SKILL\020\004\022\010\n\004"
    "TALK\020\005\022\n\n\006OPENUI\020\006\022\n\n\006TIMEDO\020\007\"1\n\010MaskTy"
    "pe\022\n\n\006CIRCLE\020\000\022\n\n\006SQUARE\020\001\022\r\n\tNONE_MASK\020"
    "\002\".\n\014AllGuideNode\022\036\n\nguideNodes\030\001 \003(\0132\n."
    "GuideNode\"\376\002\n\tGuidePass\022\n\n\002id\030\001 \001(\005\022+\n\013t"
    "riggerType\030\002 \003(\0162\026.GuidePass.TriggerType"
    "\022\r\n\005param\030\003 \003(\005\022\021\n\tfirstNode\030\004 \001(\005\"\225\002\n\013T"
    "riggerType\022\010\n\004NONE\020\000\022\016\n\nLOAD_SCENE\020\001\022\016\n\n"
    "OVER_GUIDE\020\002\022\r\n\tOPEN_FUNC\020\003\022\016\n\nGAIN_GOOD"
    "S\020\004\022\022\n\016GAIN_EQUIPMENT\020\005\022\017\n\013LEARN_SKILL\020\006"
    "\022\021\n\rAPPLY_MISSION\020\007\022\024\n\020COMPLETE_MISSION\020"
    "\010\022\016\n\nPROFESSION\020\t\022\022\n\016OPEN_NPC_GROUP\020\n\022\014\n"
    "\010IN_SCENE\020\013\022\014\n\010LEVEL_UP\020\014\022\020\n\014MISSION_OVE"
    "R\020\r\022\016\n\nATTACK_NPC\020\016\022\r\n\tBOSS_DEAD\020\017\"/\n\014Al"
    "lGuidePass\022\037\n\013guidePasses\030\001 \003(\0132\n.GuideP"
    "ass", 1203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GuideInfo.proto", &protobuf_RegisterTypes);
  GuideNode::default_instance_ = new GuideNode();
  AllGuideNode::default_instance_ = new AllGuideNode();
  GuidePass::default_instance_ = new GuidePass();
  AllGuidePass::default_instance_ = new AllGuidePass();
  GuideNode::default_instance_->InitAsDefaultInstance();
  AllGuideNode::default_instance_->InitAsDefaultInstance();
  GuidePass::default_instance_->InitAsDefaultInstance();
  AllGuidePass::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuideInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuideInfo_2eproto {
  StaticDescriptorInitializer_GuideInfo_2eproto() {
    protobuf_AddDesc_GuideInfo_2eproto();
  }
} static_descriptor_initializer_GuideInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* GuideNode_EndCondition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideNode_EndCondition_descriptor_;
}
bool GuideNode_EndCondition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuideNode_EndCondition GuideNode::NONE;
const GuideNode_EndCondition GuideNode::CLICK;
const GuideNode_EndCondition GuideNode::OPEN_UI;
const GuideNode_EndCondition GuideNode::END_OPEN_FUNC;
const GuideNode_EndCondition GuideNode::PRESS;
const GuideNode_EndCondition GuideNode::OVER_TALK;
const GuideNode_EndCondition GuideNode::IMMEDIATELY;
const GuideNode_EndCondition GuideNode::IN_PEACE_SCENE;
const GuideNode_EndCondition GuideNode::EndCondition_MIN;
const GuideNode_EndCondition GuideNode::EndCondition_MAX;
const int GuideNode::EndCondition_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GuideNode_DoEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideNode_DoEvent_descriptor_;
}
bool GuideNode_DoEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuideNode_DoEvent GuideNode::NONE_EVENT;
const GuideNode_DoEvent GuideNode::OPEN_FUNC;
const GuideNode_DoEvent GuideNode::FULL_ENERGY;
const GuideNode_DoEvent GuideNode::PAUSE;
const GuideNode_DoEvent GuideNode::ADD_SKILL;
const GuideNode_DoEvent GuideNode::TALK;
const GuideNode_DoEvent GuideNode::OPENUI;
const GuideNode_DoEvent GuideNode::TIMEDO;
const GuideNode_DoEvent GuideNode::DoEvent_MIN;
const GuideNode_DoEvent GuideNode::DoEvent_MAX;
const int GuideNode::DoEvent_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GuideNode_MaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideNode_MaskType_descriptor_;
}
bool GuideNode_MaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuideNode_MaskType GuideNode::CIRCLE;
const GuideNode_MaskType GuideNode::SQUARE;
const GuideNode_MaskType GuideNode::NONE_MASK;
const GuideNode_MaskType GuideNode::MaskType_MIN;
const GuideNode_MaskType GuideNode::MaskType_MAX;
const int GuideNode::MaskType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GuideNode::kIdFieldNumber;
const int GuideNode::kNextFieldNumber;
const int GuideNode::kEffectIDFieldNumber;
const int GuideNode::kUiFieldNumber;
const int GuideNode::kParamFieldNumber;
const int GuideNode::kXFieldNumber;
const int GuideNode::kYFieldNumber;
const int GuideNode::kIndexFieldNumber;
const int GuideNode::kEndConditionFieldNumber;
const int GuideNode::kDoEventFieldNumber;
const int GuideNode::kScaleXFieldNumber;
const int GuideNode::kScaleYFieldNumber;
const int GuideNode::kMaskTypeFieldNumber;
const int GuideNode::kMaskSXFieldNumber;
const int GuideNode::kMaskSYFieldNumber;
const int GuideNode::kMaskPXFieldNumber;
const int GuideNode::kMaskPYFieldNumber;
const int GuideNode::kTipsXFieldNumber;
const int GuideNode::kTipsYFieldNumber;
const int GuideNode::kZFieldNumber;
const int GuideNode::kPauseTimeFieldNumber;
#endif  // !_MSC_VER

GuideNode::GuideNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideNode::InitAsDefaultInstance() {
}

GuideNode::GuideNode(const GuideNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  next_ = 0;
  effectID_ = 0;
  ui_ = 0;
  param_ = 0;
  x_ = 0;
  y_ = 0;
  index_ = 0;
  endCondition_ = 0;
  doEvent_ = 0;
  scaleX_ = 0;
  scaleY_ = 0;
  maskType_ = 0;
  maskSX_ = 0;
  maskSY_ = 0;
  maskPX_ = 0;
  maskPY_ = 0;
  tipsX_ = 0;
  tipsY_ = 0;
  z_ = 0;
  pauseTime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideNode::~GuideNode() {
  SharedDtor();
}

void GuideNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideNode_descriptor_;
}

const GuideNode& GuideNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideInfo_2eproto();  return *default_instance_;
}

GuideNode* GuideNode::default_instance_ = NULL;

GuideNode* GuideNode::New() const {
  return new GuideNode;
}

void GuideNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    next_ = 0;
    effectID_ = 0;
    ui_ = 0;
    param_ = 0;
    x_ = 0;
    y_ = 0;
    index_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    endCondition_ = 0;
    doEvent_ = 0;
    scaleX_ = 0;
    scaleY_ = 0;
    maskType_ = 0;
    maskSX_ = 0;
    maskSY_ = 0;
    maskPX_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    maskPY_ = 0;
    tipsX_ = 0;
    tipsY_ = 0;
    z_ = 0;
    pauseTime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next;
        break;
      }
      
      // optional int32 next = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_)));
          set_has_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_effectID;
        break;
      }
      
      // optional int32 effectID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectID_)));
          set_has_effectID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ui;
        break;
      }
      
      // optional int32 ui = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ui_)));
          set_has_ui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }
      
      // optional int32 param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_x;
        break;
      }
      
      // optional float x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_y;
        break;
      }
      
      // optional float y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_index;
        break;
      }
      
      // optional int32 index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_endCondition;
        break;
      }
      
      // optional .GuideNode.EndCondition endCondition = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endCondition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuideNode_EndCondition_IsValid(value)) {
            set_endCondition(static_cast< ::GuideNode_EndCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_doEvent;
        break;
      }
      
      // optional .GuideNode.DoEvent doEvent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doEvent:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuideNode_DoEvent_IsValid(value)) {
            set_doEvent(static_cast< ::GuideNode_DoEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_scaleX;
        break;
      }
      
      // optional float scaleX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaleX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaleX_)));
          set_has_scaleX();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_scaleY;
        break;
      }
      
      // optional float scaleY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaleY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaleY_)));
          set_has_scaleY();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maskType;
        break;
      }
      
      // optional .GuideNode.MaskType maskType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maskType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuideNode_MaskType_IsValid(value)) {
            set_maskType(static_cast< ::GuideNode_MaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_maskSX;
        break;
      }
      
      // optional float maskSX = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maskSX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maskSX_)));
          set_has_maskSX();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_maskSY;
        break;
      }
      
      // optional float maskSY = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maskSY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maskSY_)));
          set_has_maskSY();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_maskPX;
        break;
      }
      
      // optional float maskPX = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maskPX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maskPX_)));
          set_has_maskPX();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_maskPY;
        break;
      }
      
      // optional float maskPY = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maskPY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maskPY_)));
          set_has_maskPY();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_tipsX;
        break;
      }
      
      // optional float tipsX = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tipsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tipsX_)));
          set_has_tipsX();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_tipsY;
        break;
      }
      
      // optional float tipsY = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tipsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tipsY_)));
          set_has_tipsY();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_z;
        break;
      }
      
      // optional float z = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_pauseTime;
        break;
      }
      
      // optional float pauseTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pauseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pauseTime_)));
          set_has_pauseTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 next = 2;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->next(), output);
  }
  
  // optional int32 effectID = 3;
  if (has_effectID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->effectID(), output);
  }
  
  // optional int32 ui = 4;
  if (has_ui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ui(), output);
  }
  
  // optional int32 param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param(), output);
  }
  
  // optional float x = 6;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x(), output);
  }
  
  // optional float y = 7;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->y(), output);
  }
  
  // optional int32 index = 8;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->index(), output);
  }
  
  // optional .GuideNode.EndCondition endCondition = 9;
  if (has_endCondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->endCondition(), output);
  }
  
  // optional .GuideNode.DoEvent doEvent = 10;
  if (has_doEvent()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->doEvent(), output);
  }
  
  // optional float scaleX = 11;
  if (has_scaleX()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->scaleX(), output);
  }
  
  // optional float scaleY = 12;
  if (has_scaleY()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->scaleY(), output);
  }
  
  // optional .GuideNode.MaskType maskType = 13;
  if (has_maskType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->maskType(), output);
  }
  
  // optional float maskSX = 14;
  if (has_maskSX()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->maskSX(), output);
  }
  
  // optional float maskSY = 15;
  if (has_maskSY()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->maskSY(), output);
  }
  
  // optional float maskPX = 16;
  if (has_maskPX()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->maskPX(), output);
  }
  
  // optional float maskPY = 17;
  if (has_maskPY()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->maskPY(), output);
  }
  
  // optional float tipsX = 18;
  if (has_tipsX()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->tipsX(), output);
  }
  
  // optional float tipsY = 19;
  if (has_tipsY()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->tipsY(), output);
  }
  
  // optional float z = 20;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->z(), output);
  }
  
  // optional float pauseTime = 21;
  if (has_pauseTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->pauseTime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 next = 2;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->next(), target);
  }
  
  // optional int32 effectID = 3;
  if (has_effectID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->effectID(), target);
  }
  
  // optional int32 ui = 4;
  if (has_ui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ui(), target);
  }
  
  // optional int32 param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param(), target);
  }
  
  // optional float x = 6;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x(), target);
  }
  
  // optional float y = 7;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->y(), target);
  }
  
  // optional int32 index = 8;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->index(), target);
  }
  
  // optional .GuideNode.EndCondition endCondition = 9;
  if (has_endCondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->endCondition(), target);
  }
  
  // optional .GuideNode.DoEvent doEvent = 10;
  if (has_doEvent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->doEvent(), target);
  }
  
  // optional float scaleX = 11;
  if (has_scaleX()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->scaleX(), target);
  }
  
  // optional float scaleY = 12;
  if (has_scaleY()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->scaleY(), target);
  }
  
  // optional .GuideNode.MaskType maskType = 13;
  if (has_maskType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->maskType(), target);
  }
  
  // optional float maskSX = 14;
  if (has_maskSX()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->maskSX(), target);
  }
  
  // optional float maskSY = 15;
  if (has_maskSY()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->maskSY(), target);
  }
  
  // optional float maskPX = 16;
  if (has_maskPX()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->maskPX(), target);
  }
  
  // optional float maskPY = 17;
  if (has_maskPY()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->maskPY(), target);
  }
  
  // optional float tipsX = 18;
  if (has_tipsX()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->tipsX(), target);
  }
  
  // optional float tipsY = 19;
  if (has_tipsY()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->tipsY(), target);
  }
  
  // optional float z = 20;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->z(), target);
  }
  
  // optional float pauseTime = 21;
  if (has_pauseTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->pauseTime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 next = 2;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next());
    }
    
    // optional int32 effectID = 3;
    if (has_effectID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectID());
    }
    
    // optional int32 ui = 4;
    if (has_ui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ui());
    }
    
    // optional int32 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }
    
    // optional float x = 6;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 7;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional int32 index = 8;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .GuideNode.EndCondition endCondition = 9;
    if (has_endCondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->endCondition());
    }
    
    // optional .GuideNode.DoEvent doEvent = 10;
    if (has_doEvent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->doEvent());
    }
    
    // optional float scaleX = 11;
    if (has_scaleX()) {
      total_size += 1 + 4;
    }
    
    // optional float scaleY = 12;
    if (has_scaleY()) {
      total_size += 1 + 4;
    }
    
    // optional .GuideNode.MaskType maskType = 13;
    if (has_maskType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->maskType());
    }
    
    // optional float maskSX = 14;
    if (has_maskSX()) {
      total_size += 1 + 4;
    }
    
    // optional float maskSY = 15;
    if (has_maskSY()) {
      total_size += 1 + 4;
    }
    
    // optional float maskPX = 16;
    if (has_maskPX()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float maskPY = 17;
    if (has_maskPY()) {
      total_size += 2 + 4;
    }
    
    // optional float tipsX = 18;
    if (has_tipsX()) {
      total_size += 2 + 4;
    }
    
    // optional float tipsY = 19;
    if (has_tipsY()) {
      total_size += 2 + 4;
    }
    
    // optional float z = 20;
    if (has_z()) {
      total_size += 2 + 4;
    }
    
    // optional float pauseTime = 21;
    if (has_pauseTime()) {
      total_size += 2 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideNode::MergeFrom(const GuideNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
    if (from.has_effectID()) {
      set_effectID(from.effectID());
    }
    if (from.has_ui()) {
      set_ui(from.ui());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endCondition()) {
      set_endCondition(from.endCondition());
    }
    if (from.has_doEvent()) {
      set_doEvent(from.doEvent());
    }
    if (from.has_scaleX()) {
      set_scaleX(from.scaleX());
    }
    if (from.has_scaleY()) {
      set_scaleY(from.scaleY());
    }
    if (from.has_maskType()) {
      set_maskType(from.maskType());
    }
    if (from.has_maskSX()) {
      set_maskSX(from.maskSX());
    }
    if (from.has_maskSY()) {
      set_maskSY(from.maskSY());
    }
    if (from.has_maskPX()) {
      set_maskPX(from.maskPX());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_maskPY()) {
      set_maskPY(from.maskPY());
    }
    if (from.has_tipsX()) {
      set_tipsX(from.tipsX());
    }
    if (from.has_tipsY()) {
      set_tipsY(from.tipsY());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_pauseTime()) {
      set_pauseTime(from.pauseTime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideNode::CopyFrom(const GuideNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideNode::IsInitialized() const {
  
  return true;
}

void GuideNode::Swap(GuideNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(next_, other->next_);
    std::swap(effectID_, other->effectID_);
    std::swap(ui_, other->ui_);
    std::swap(param_, other->param_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(index_, other->index_);
    std::swap(endCondition_, other->endCondition_);
    std::swap(doEvent_, other->doEvent_);
    std::swap(scaleX_, other->scaleX_);
    std::swap(scaleY_, other->scaleY_);
    std::swap(maskType_, other->maskType_);
    std::swap(maskSX_, other->maskSX_);
    std::swap(maskSY_, other->maskSY_);
    std::swap(maskPX_, other->maskPX_);
    std::swap(maskPY_, other->maskPY_);
    std::swap(tipsX_, other->tipsX_);
    std::swap(tipsY_, other->tipsY_);
    std::swap(z_, other->z_);
    std::swap(pauseTime_, other->pauseTime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideNode_descriptor_;
  metadata.reflection = GuideNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllGuideNode::kGuideNodesFieldNumber;
#endif  // !_MSC_VER

AllGuideNode::AllGuideNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllGuideNode::InitAsDefaultInstance() {
}

AllGuideNode::AllGuideNode(const AllGuideNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllGuideNode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllGuideNode::~AllGuideNode() {
  SharedDtor();
}

void AllGuideNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllGuideNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllGuideNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllGuideNode_descriptor_;
}

const AllGuideNode& AllGuideNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideInfo_2eproto();  return *default_instance_;
}

AllGuideNode* AllGuideNode::default_instance_ = NULL;

AllGuideNode* AllGuideNode::New() const {
  return new AllGuideNode;
}

void AllGuideNode::Clear() {
  guideNodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllGuideNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuideNode guideNodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guideNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guideNodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guideNodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllGuideNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuideNode guideNodes = 1;
  for (int i = 0; i < this->guideNodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guideNodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllGuideNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuideNode guideNodes = 1;
  for (int i = 0; i < this->guideNodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guideNodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllGuideNode::ByteSize() const {
  int total_size = 0;
  
  // repeated .GuideNode guideNodes = 1;
  total_size += 1 * this->guideNodes_size();
  for (int i = 0; i < this->guideNodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guideNodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllGuideNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllGuideNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllGuideNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllGuideNode::MergeFrom(const AllGuideNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  guideNodes_.MergeFrom(from.guideNodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllGuideNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllGuideNode::CopyFrom(const AllGuideNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllGuideNode::IsInitialized() const {
  
  return true;
}

void AllGuideNode::Swap(AllGuideNode* other) {
  if (other != this) {
    guideNodes_.Swap(&other->guideNodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllGuideNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllGuideNode_descriptor_;
  metadata.reflection = AllGuideNode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GuidePass_TriggerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuidePass_TriggerType_descriptor_;
}
bool GuidePass_TriggerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuidePass_TriggerType GuidePass::NONE;
const GuidePass_TriggerType GuidePass::LOAD_SCENE;
const GuidePass_TriggerType GuidePass::OVER_GUIDE;
const GuidePass_TriggerType GuidePass::OPEN_FUNC;
const GuidePass_TriggerType GuidePass::GAIN_GOODS;
const GuidePass_TriggerType GuidePass::GAIN_EQUIPMENT;
const GuidePass_TriggerType GuidePass::LEARN_SKILL;
const GuidePass_TriggerType GuidePass::APPLY_MISSION;
const GuidePass_TriggerType GuidePass::COMPLETE_MISSION;
const GuidePass_TriggerType GuidePass::PROFESSION;
const GuidePass_TriggerType GuidePass::OPEN_NPC_GROUP;
const GuidePass_TriggerType GuidePass::IN_SCENE;
const GuidePass_TriggerType GuidePass::LEVEL_UP;
const GuidePass_TriggerType GuidePass::MISSION_OVER;
const GuidePass_TriggerType GuidePass::ATTACK_NPC;
const GuidePass_TriggerType GuidePass::BOSS_DEAD;
const GuidePass_TriggerType GuidePass::TriggerType_MIN;
const GuidePass_TriggerType GuidePass::TriggerType_MAX;
const int GuidePass::TriggerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GuidePass::kIdFieldNumber;
const int GuidePass::kTriggerTypeFieldNumber;
const int GuidePass::kParamFieldNumber;
const int GuidePass::kFirstNodeFieldNumber;
#endif  // !_MSC_VER

GuidePass::GuidePass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuidePass::InitAsDefaultInstance() {
}

GuidePass::GuidePass(const GuidePass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuidePass::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  firstNode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuidePass::~GuidePass() {
  SharedDtor();
}

void GuidePass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuidePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuidePass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuidePass_descriptor_;
}

const GuidePass& GuidePass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideInfo_2eproto();  return *default_instance_;
}

GuidePass* GuidePass::default_instance_ = NULL;

GuidePass* GuidePass::New() const {
  return new GuidePass;
}

void GuidePass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    firstNode_ = 0;
  }
  triggerType_.Clear();
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuidePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_triggerType;
        break;
      }
      
      // repeated .GuidePass.TriggerType triggerType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triggerType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuidePass_TriggerType_IsValid(value)) {
            add_triggerType(static_cast< ::GuidePass_TriggerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::GuidePass_TriggerType_IsValid,
                 this->mutable_triggerType())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_triggerType;
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }
      
      // repeated int32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        if (input->ExpectTag(32)) goto parse_firstNode;
        break;
      }
      
      // optional int32 firstNode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstNode_)));
          set_has_firstNode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuidePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .GuidePass.TriggerType triggerType = 2;
  for (int i = 0; i < this->triggerType_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->triggerType(i), output);
  }
  
  // repeated int32 param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->param(i), output);
  }
  
  // optional int32 firstNode = 4;
  if (has_firstNode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->firstNode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuidePass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .GuidePass.TriggerType triggerType = 2;
  for (int i = 0; i < this->triggerType_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->triggerType(i), target);
  }
  
  // repeated int32 param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->param(i), target);
  }
  
  // optional int32 firstNode = 4;
  if (has_firstNode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->firstNode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuidePass::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 firstNode = 4;
    if (has_firstNode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstNode());
    }
    
  }
  // repeated .GuidePass.TriggerType triggerType = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->triggerType_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->triggerType(i));
    }
    total_size += 1 * this->triggerType_size() + data_size;
  }
  
  // repeated int32 param = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param(i));
    }
    total_size += 1 * this->param_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuidePass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuidePass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuidePass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuidePass::MergeFrom(const GuidePass& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggerType_.MergeFrom(from.triggerType_);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_firstNode()) {
      set_firstNode(from.firstNode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuidePass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuidePass::CopyFrom(const GuidePass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuidePass::IsInitialized() const {
  
  return true;
}

void GuidePass::Swap(GuidePass* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    triggerType_.Swap(&other->triggerType_);
    param_.Swap(&other->param_);
    std::swap(firstNode_, other->firstNode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuidePass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuidePass_descriptor_;
  metadata.reflection = GuidePass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllGuidePass::kGuidePassesFieldNumber;
#endif  // !_MSC_VER

AllGuidePass::AllGuidePass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllGuidePass::InitAsDefaultInstance() {
}

AllGuidePass::AllGuidePass(const AllGuidePass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllGuidePass::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllGuidePass::~AllGuidePass() {
  SharedDtor();
}

void AllGuidePass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllGuidePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllGuidePass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllGuidePass_descriptor_;
}

const AllGuidePass& AllGuidePass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuideInfo_2eproto();  return *default_instance_;
}

AllGuidePass* AllGuidePass::default_instance_ = NULL;

AllGuidePass* AllGuidePass::New() const {
  return new AllGuidePass;
}

void AllGuidePass::Clear() {
  guidePasses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllGuidePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuidePass guidePasses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guidePasses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guidePasses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guidePasses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllGuidePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuidePass guidePasses = 1;
  for (int i = 0; i < this->guidePasses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guidePasses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllGuidePass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuidePass guidePasses = 1;
  for (int i = 0; i < this->guidePasses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guidePasses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllGuidePass::ByteSize() const {
  int total_size = 0;
  
  // repeated .GuidePass guidePasses = 1;
  total_size += 1 * this->guidePasses_size();
  for (int i = 0; i < this->guidePasses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guidePasses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllGuidePass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllGuidePass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllGuidePass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllGuidePass::MergeFrom(const AllGuidePass& from) {
  GOOGLE_CHECK_NE(&from, this);
  guidePasses_.MergeFrom(from.guidePasses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllGuidePass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllGuidePass::CopyFrom(const AllGuidePass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllGuidePass::IsInitialized() const {
  
  return true;
}

void AllGuidePass::Swap(AllGuidePass* other) {
  if (other != this) {
    guidePasses_.Swap(&other->guidePasses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllGuidePass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllGuidePass_descriptor_;
  metadata.reflection = AllGuidePass_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RidesInfo.proto

#ifndef PROTOBUF_RidesInfo_2eproto__INCLUDED
#define PROTOBUF_RidesInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RidesInfo_2eproto();
void protobuf_AssignDesc_RidesInfo_2eproto();
void protobuf_ShutdownFile_RidesInfo_2eproto();

class RidesInfo;
class RidesGroup;
class AllRideses;
class PB_RidesAsset;

enum RidesInfo_Quality {
  RidesInfo_Quality_WHITE = 0,
  RidesInfo_Quality_GREEN = 1,
  RidesInfo_Quality_BLUE = 2,
  RidesInfo_Quality_YELLOW = 3,
  RidesInfo_Quality_RED = 4
};
bool RidesInfo_Quality_IsValid(int value);
const RidesInfo_Quality RidesInfo_Quality_Quality_MIN = RidesInfo_Quality_WHITE;
const RidesInfo_Quality RidesInfo_Quality_Quality_MAX = RidesInfo_Quality_RED;
const int RidesInfo_Quality_Quality_ARRAYSIZE = RidesInfo_Quality_Quality_MAX + 1;

const ::google::protobuf::EnumDescriptor* RidesInfo_Quality_descriptor();
inline const ::std::string& RidesInfo_Quality_Name(RidesInfo_Quality value) {
  return ::google::protobuf::internal::NameOfEnum(
    RidesInfo_Quality_descriptor(), value);
}
inline bool RidesInfo_Quality_Parse(
    const ::std::string& name, RidesInfo_Quality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RidesInfo_Quality>(
    RidesInfo_Quality_descriptor(), name, value);
}
// ===================================================================

class RidesInfo : public ::google::protobuf::Message {
 public:
  RidesInfo();
  virtual ~RidesInfo();
  
  RidesInfo(const RidesInfo& from);
  
  inline RidesInfo& operator=(const RidesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RidesInfo& default_instance();
  
  void Swap(RidesInfo* other);
  
  // implements Message ----------------------------------------------
  
  RidesInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RidesInfo& from);
  void MergeFrom(const RidesInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RidesInfo_Quality Quality;
  static const Quality WHITE = RidesInfo_Quality_WHITE;
  static const Quality GREEN = RidesInfo_Quality_GREEN;
  static const Quality BLUE = RidesInfo_Quality_BLUE;
  static const Quality YELLOW = RidesInfo_Quality_YELLOW;
  static const Quality RED = RidesInfo_Quality_RED;
  static inline bool Quality_IsValid(int value) {
    return RidesInfo_Quality_IsValid(value);
  }
  static const Quality Quality_MIN =
    RidesInfo_Quality_Quality_MIN;
  static const Quality Quality_MAX =
    RidesInfo_Quality_Quality_MAX;
  static const int Quality_ARRAYSIZE =
    RidesInfo_Quality_Quality_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Quality_descriptor() {
    return RidesInfo_Quality_descriptor();
  }
  static inline const ::std::string& Quality_Name(Quality value) {
    return RidesInfo_Quality_Name(value);
  }
  static inline bool Quality_Parse(const ::std::string& name,
      Quality* value) {
    return RidesInfo_Quality_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 pic = 2;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 2;
  inline ::google::protobuf::int32 pic() const;
  inline void set_pic(::google::protobuf::int32 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 model = 4;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 4;
  inline ::google::protobuf::int32 model() const;
  inline void set_model(::google::protobuf::int32 value);
  
  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // repeated int32 att = 6;
  inline int att_size() const;
  inline void clear_att();
  static const int kAttFieldNumber = 6;
  inline ::google::protobuf::int32 att(int index) const;
  inline void set_att(int index, ::google::protobuf::int32 value);
  inline void add_att(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      att() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_att();
  
  // optional .RidesInfo.Quality quality = 7;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 7;
  inline ::RidesInfo_Quality quality() const;
  inline void set_quality(::RidesInfo_Quality value);
  
  // optional int32 tpGoods = 8;
  inline bool has_tpGoods() const;
  inline void clear_tpGoods();
  static const int kTpGoodsFieldNumber = 8;
  inline ::google::protobuf::int32 tpGoods() const;
  inline void set_tpGoods(::google::protobuf::int32 value);
  
  // optional int32 tpCount = 9;
  inline bool has_tpCount() const;
  inline void clear_tpCount();
  static const int kTpCountFieldNumber = 9;
  inline ::google::protobuf::int32 tpCount() const;
  inline void set_tpCount(::google::protobuf::int32 value);
  
  // optional float tpSuccessRate = 10;
  inline bool has_tpSuccessRate() const;
  inline void clear_tpSuccessRate();
  static const int kTpSuccessRateFieldNumber = 10;
  inline float tpSuccessRate() const;
  inline void set_tpSuccessRate(float value);
  
  // optional int32 baseEXP = 11;
  inline bool has_baseEXP() const;
  inline void clear_baseEXP();
  static const int kBaseEXPFieldNumber = 11;
  inline ::google::protobuf::int32 baseEXP() const;
  inline void set_baseEXP(::google::protobuf::int32 value);
  
  // optional string ride_stand = 12;
  inline bool has_ride_stand() const;
  inline void clear_ride_stand();
  static const int kRideStandFieldNumber = 12;
  inline const ::std::string& ride_stand() const;
  inline void set_ride_stand(const ::std::string& value);
  inline void set_ride_stand(const char* value);
  inline void set_ride_stand(const char* value, size_t size);
  inline ::std::string* mutable_ride_stand();
  inline ::std::string* release_ride_stand();
  
  // optional string ride_run = 13;
  inline bool has_ride_run() const;
  inline void clear_ride_run();
  static const int kRideRunFieldNumber = 13;
  inline const ::std::string& ride_run() const;
  inline void set_ride_run(const ::std::string& value);
  inline void set_ride_run(const char* value);
  inline void set_ride_run(const char* value, size_t size);
  inline ::std::string* mutable_ride_run();
  inline ::std::string* release_ride_run();
  
  // optional int32 fragmentCount = 14;
  inline bool has_fragmentCount() const;
  inline void clear_fragmentCount();
  static const int kFragmentCountFieldNumber = 14;
  inline ::google::protobuf::int32 fragmentCount() const;
  inline void set_fragmentCount(::google::protobuf::int32 value);
  
  // optional int32 tpLevel = 15;
  inline bool has_tpLevel() const;
  inline void clear_tpLevel();
  static const int kTpLevelFieldNumber = 15;
  inline ::google::protobuf::int32 tpLevel() const;
  inline void set_tpLevel(::google::protobuf::int32 value);
  
  // optional int32 tpStar = 16;
  inline bool has_tpStar() const;
  inline void clear_tpStar();
  static const int kTpStarFieldNumber = 16;
  inline ::google::protobuf::int32 tpStar() const;
  inline void set_tpStar(::google::protobuf::int32 value);
  
  // optional float knightHeight = 17;
  inline bool has_knightHeight() const;
  inline void clear_knightHeight();
  static const int kKnightHeightFieldNumber = 17;
  inline float knightHeight() const;
  inline void set_knightHeight(float value);
  
  // optional float rangerHeight = 18;
  inline bool has_rangerHeight() const;
  inline void clear_rangerHeight();
  static const int kRangerHeightFieldNumber = 18;
  inline float rangerHeight() const;
  inline void set_rangerHeight(float value);
  
  // optional float magicianHeight = 19;
  inline bool has_magicianHeight() const;
  inline void clear_magicianHeight();
  static const int kMagicianHeightFieldNumber = 19;
  inline float magicianHeight() const;
  inline void set_magicianHeight(float value);
  
  // optional int32 effect = 20;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 20;
  inline ::google::protobuf::int32 effect() const;
  inline void set_effect(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RidesInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_tpGoods();
  inline void clear_has_tpGoods();
  inline void set_has_tpCount();
  inline void clear_has_tpCount();
  inline void set_has_tpSuccessRate();
  inline void clear_has_tpSuccessRate();
  inline void set_has_baseEXP();
  inline void clear_has_baseEXP();
  inline void set_has_ride_stand();
  inline void clear_has_ride_stand();
  inline void set_has_ride_run();
  inline void clear_has_ride_run();
  inline void set_has_fragmentCount();
  inline void clear_has_fragmentCount();
  inline void set_has_tpLevel();
  inline void clear_has_tpLevel();
  inline void set_has_tpStar();
  inline void clear_has_tpStar();
  inline void set_has_knightHeight();
  inline void clear_has_knightHeight();
  inline void set_has_rangerHeight();
  inline void clear_has_rangerHeight();
  inline void set_has_magicianHeight();
  inline void clear_has_magicianHeight();
  inline void set_has_effect();
  inline void clear_has_effect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pic_;
  ::std::string* name_;
  ::google::protobuf::int32 model_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > att_;
  int quality_;
  ::google::protobuf::int32 tpGoods_;
  ::google::protobuf::int32 tpCount_;
  float tpSuccessRate_;
  ::std::string* ride_stand_;
  ::google::protobuf::int32 baseEXP_;
  ::google::protobuf::int32 fragmentCount_;
  ::std::string* ride_run_;
  ::google::protobuf::int32 tpLevel_;
  ::google::protobuf::int32 tpStar_;
  float knightHeight_;
  float rangerHeight_;
  float magicianHeight_;
  ::google::protobuf::int32 effect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_RidesInfo_2eproto();
  friend void protobuf_AssignDesc_RidesInfo_2eproto();
  friend void protobuf_ShutdownFile_RidesInfo_2eproto();
  
  void InitAsDefaultInstance();
  static RidesInfo* default_instance_;
};
// -------------------------------------------------------------------

class RidesGroup : public ::google::protobuf::Message {
 public:
  RidesGroup();
  virtual ~RidesGroup();
  
  RidesGroup(const RidesGroup& from);
  
  inline RidesGroup& operator=(const RidesGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RidesGroup& default_instance();
  
  void Swap(RidesGroup* other);
  
  // implements Message ----------------------------------------------
  
  RidesGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RidesGroup& from);
  void MergeFrom(const RidesGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .RidesInfo rides = 1;
  inline int rides_size() const;
  inline void clear_rides();
  static const int kRidesFieldNumber = 1;
  inline const ::RidesInfo& rides(int index) const;
  inline ::RidesInfo* mutable_rides(int index);
  inline ::RidesInfo* add_rides();
  inline const ::google::protobuf::RepeatedPtrField< ::RidesInfo >&
      rides() const;
  inline ::google::protobuf::RepeatedPtrField< ::RidesInfo >*
      mutable_rides();
  
  // @@protoc_insertion_point(class_scope:RidesGroup)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RidesInfo > rides_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_RidesInfo_2eproto();
  friend void protobuf_AssignDesc_RidesInfo_2eproto();
  friend void protobuf_ShutdownFile_RidesInfo_2eproto();
  
  void InitAsDefaultInstance();
  static RidesGroup* default_instance_;
};
// -------------------------------------------------------------------

class AllRideses : public ::google::protobuf::Message {
 public:
  AllRideses();
  virtual ~AllRideses();
  
  AllRideses(const AllRideses& from);
  
  inline AllRideses& operator=(const AllRideses& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllRideses& default_instance();
  
  void Swap(AllRideses* other);
  
  // implements Message ----------------------------------------------
  
  AllRideses* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllRideses& from);
  void MergeFrom(const AllRideses& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .RidesGroup rides = 1;
  inline int rides_size() const;
  inline void clear_rides();
  static const int kRidesFieldNumber = 1;
  inline const ::RidesGroup& rides(int index) const;
  inline ::RidesGroup* mutable_rides(int index);
  inline ::RidesGroup* add_rides();
  inline const ::google::protobuf::RepeatedPtrField< ::RidesGroup >&
      rides() const;
  inline ::google::protobuf::RepeatedPtrField< ::RidesGroup >*
      mutable_rides();
  
  // @@protoc_insertion_point(class_scope:AllRideses)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RidesGroup > rides_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_RidesInfo_2eproto();
  friend void protobuf_AssignDesc_RidesInfo_2eproto();
  friend void protobuf_ShutdownFile_RidesInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllRideses* default_instance_;
};
// -------------------------------------------------------------------

class PB_RidesAsset : public ::google::protobuf::Message {
 public:
  PB_RidesAsset();
  virtual ~PB_RidesAsset();
  
  PB_RidesAsset(const PB_RidesAsset& from);
  
  inline PB_RidesAsset& operator=(const PB_RidesAsset& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_RidesAsset& default_instance();
  
  void Swap(PB_RidesAsset* other);
  
  // implements Message ----------------------------------------------
  
  PB_RidesAsset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_RidesAsset& from);
  void MergeFrom(const PB_RidesAsset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 model = 1 [default = -1];
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 1;
  inline ::google::protobuf::int32 model() const;
  inline void set_model(::google::protobuf::int32 value);
  
  // optional int32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);
  
  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int64 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);
  
  // optional int32 potential = 5;
  inline bool has_potential() const;
  inline void clear_potential();
  static const int kPotentialFieldNumber = 5;
  inline ::google::protobuf::int32 potential() const;
  inline void set_potential(::google::protobuf::int32 value);
  
  // repeated int32 att = 6;
  inline int att_size() const;
  inline void clear_att();
  static const int kAttFieldNumber = 6;
  inline ::google::protobuf::int32 att(int index) const;
  inline void set_att(int index, ::google::protobuf::int32 value);
  inline void add_att(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      att() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_att();
  
  // repeated bool lockAtt = 7;
  inline int lockAtt_size() const;
  inline void clear_lockAtt();
  static const int kLockAttFieldNumber = 7;
  inline bool lockAtt(int index) const;
  inline void set_lockAtt(int index, bool value);
  inline void add_lockAtt(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      lockAtt() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_lockAtt();
  
  // @@protoc_insertion_point(class_scope:PB_RidesAsset)
 private:
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_potential();
  inline void clear_has_potential();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 model_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 potential_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > att_;
  ::google::protobuf::RepeatedField< bool > lockAtt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_RidesInfo_2eproto();
  friend void protobuf_AssignDesc_RidesInfo_2eproto();
  friend void protobuf_ShutdownFile_RidesInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_RidesAsset* default_instance_;
};
// ===================================================================


// ===================================================================

// RidesInfo

// optional int32 id = 1;
inline bool RidesInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RidesInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RidesInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RidesInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RidesInfo::id() const {
  return id_;
}
inline void RidesInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 pic = 2;
inline bool RidesInfo::has_pic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RidesInfo::set_has_pic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RidesInfo::clear_has_pic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RidesInfo::clear_pic() {
  pic_ = 0;
  clear_has_pic();
}
inline ::google::protobuf::int32 RidesInfo::pic() const {
  return pic_;
}
inline void RidesInfo::set_pic(::google::protobuf::int32 value) {
  set_has_pic();
  pic_ = value;
}

// optional string name = 3;
inline bool RidesInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RidesInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RidesInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RidesInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RidesInfo::name() const {
  return *name_;
}
inline void RidesInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RidesInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RidesInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RidesInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RidesInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 model = 4;
inline bool RidesInfo::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RidesInfo::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RidesInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RidesInfo::clear_model() {
  model_ = 0;
  clear_has_model();
}
inline ::google::protobuf::int32 RidesInfo::model() const {
  return model_;
}
inline void RidesInfo::set_model(::google::protobuf::int32 value) {
  set_has_model();
  model_ = value;
}

// optional int32 level = 5;
inline bool RidesInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RidesInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RidesInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RidesInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RidesInfo::level() const {
  return level_;
}
inline void RidesInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated int32 att = 6;
inline int RidesInfo::att_size() const {
  return att_.size();
}
inline void RidesInfo::clear_att() {
  att_.Clear();
}
inline ::google::protobuf::int32 RidesInfo::att(int index) const {
  return att_.Get(index);
}
inline void RidesInfo::set_att(int index, ::google::protobuf::int32 value) {
  att_.Set(index, value);
}
inline void RidesInfo::add_att(::google::protobuf::int32 value) {
  att_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RidesInfo::att() const {
  return att_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RidesInfo::mutable_att() {
  return &att_;
}

// optional .RidesInfo.Quality quality = 7;
inline bool RidesInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RidesInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RidesInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RidesInfo::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::RidesInfo_Quality RidesInfo::quality() const {
  return static_cast< ::RidesInfo_Quality >(quality_);
}
inline void RidesInfo::set_quality(::RidesInfo_Quality value) {
  GOOGLE_DCHECK(::RidesInfo_Quality_IsValid(value));
  set_has_quality();
  quality_ = value;
}

// optional int32 tpGoods = 8;
inline bool RidesInfo::has_tpGoods() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RidesInfo::set_has_tpGoods() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RidesInfo::clear_has_tpGoods() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RidesInfo::clear_tpGoods() {
  tpGoods_ = 0;
  clear_has_tpGoods();
}
inline ::google::protobuf::int32 RidesInfo::tpGoods() const {
  return tpGoods_;
}
inline void RidesInfo::set_tpGoods(::google::protobuf::int32 value) {
  set_has_tpGoods();
  tpGoods_ = value;
}

// optional int32 tpCount = 9;
inline bool RidesInfo::has_tpCount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RidesInfo::set_has_tpCount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RidesInfo::clear_has_tpCount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RidesInfo::clear_tpCount() {
  tpCount_ = 0;
  clear_has_tpCount();
}
inline ::google::protobuf::int32 RidesInfo::tpCount() const {
  return tpCount_;
}
inline void RidesInfo::set_tpCount(::google::protobuf::int32 value) {
  set_has_tpCount();
  tpCount_ = value;
}

// optional float tpSuccessRate = 10;
inline bool RidesInfo::has_tpSuccessRate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RidesInfo::set_has_tpSuccessRate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RidesInfo::clear_has_tpSuccessRate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RidesInfo::clear_tpSuccessRate() {
  tpSuccessRate_ = 0;
  clear_has_tpSuccessRate();
}
inline float RidesInfo::tpSuccessRate() const {
  return tpSuccessRate_;
}
inline void RidesInfo::set_tpSuccessRate(float value) {
  set_has_tpSuccessRate();
  tpSuccessRate_ = value;
}

// optional int32 baseEXP = 11;
inline bool RidesInfo::has_baseEXP() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RidesInfo::set_has_baseEXP() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RidesInfo::clear_has_baseEXP() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RidesInfo::clear_baseEXP() {
  baseEXP_ = 0;
  clear_has_baseEXP();
}
inline ::google::protobuf::int32 RidesInfo::baseEXP() const {
  return baseEXP_;
}
inline void RidesInfo::set_baseEXP(::google::protobuf::int32 value) {
  set_has_baseEXP();
  baseEXP_ = value;
}

// optional string ride_stand = 12;
inline bool RidesInfo::has_ride_stand() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RidesInfo::set_has_ride_stand() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RidesInfo::clear_has_ride_stand() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RidesInfo::clear_ride_stand() {
  if (ride_stand_ != &::google::protobuf::internal::kEmptyString) {
    ride_stand_->clear();
  }
  clear_has_ride_stand();
}
inline const ::std::string& RidesInfo::ride_stand() const {
  return *ride_stand_;
}
inline void RidesInfo::set_ride_stand(const ::std::string& value) {
  set_has_ride_stand();
  if (ride_stand_ == &::google::protobuf::internal::kEmptyString) {
    ride_stand_ = new ::std::string;
  }
  ride_stand_->assign(value);
}
inline void RidesInfo::set_ride_stand(const char* value) {
  set_has_ride_stand();
  if (ride_stand_ == &::google::protobuf::internal::kEmptyString) {
    ride_stand_ = new ::std::string;
  }
  ride_stand_->assign(value);
}
inline void RidesInfo::set_ride_stand(const char* value, size_t size) {
  set_has_ride_stand();
  if (ride_stand_ == &::google::protobuf::internal::kEmptyString) {
    ride_stand_ = new ::std::string;
  }
  ride_stand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RidesInfo::mutable_ride_stand() {
  set_has_ride_stand();
  if (ride_stand_ == &::google::protobuf::internal::kEmptyString) {
    ride_stand_ = new ::std::string;
  }
  return ride_stand_;
}
inline ::std::string* RidesInfo::release_ride_stand() {
  clear_has_ride_stand();
  if (ride_stand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ride_stand_;
    ride_stand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ride_run = 13;
inline bool RidesInfo::has_ride_run() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RidesInfo::set_has_ride_run() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RidesInfo::clear_has_ride_run() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RidesInfo::clear_ride_run() {
  if (ride_run_ != &::google::protobuf::internal::kEmptyString) {
    ride_run_->clear();
  }
  clear_has_ride_run();
}
inline const ::std::string& RidesInfo::ride_run() const {
  return *ride_run_;
}
inline void RidesInfo::set_ride_run(const ::std::string& value) {
  set_has_ride_run();
  if (ride_run_ == &::google::protobuf::internal::kEmptyString) {
    ride_run_ = new ::std::string;
  }
  ride_run_->assign(value);
}
inline void RidesInfo::set_ride_run(const char* value) {
  set_has_ride_run();
  if (ride_run_ == &::google::protobuf::internal::kEmptyString) {
    ride_run_ = new ::std::string;
  }
  ride_run_->assign(value);
}
inline void RidesInfo::set_ride_run(const char* value, size_t size) {
  set_has_ride_run();
  if (ride_run_ == &::google::protobuf::internal::kEmptyString) {
    ride_run_ = new ::std::string;
  }
  ride_run_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RidesInfo::mutable_ride_run() {
  set_has_ride_run();
  if (ride_run_ == &::google::protobuf::internal::kEmptyString) {
    ride_run_ = new ::std::string;
  }
  return ride_run_;
}
inline ::std::string* RidesInfo::release_ride_run() {
  clear_has_ride_run();
  if (ride_run_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ride_run_;
    ride_run_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 fragmentCount = 14;
inline bool RidesInfo::has_fragmentCount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RidesInfo::set_has_fragmentCount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RidesInfo::clear_has_fragmentCount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RidesInfo::clear_fragmentCount() {
  fragmentCount_ = 0;
  clear_has_fragmentCount();
}
inline ::google::protobuf::int32 RidesInfo::fragmentCount() const {
  return fragmentCount_;
}
inline void RidesInfo::set_fragmentCount(::google::protobuf::int32 value) {
  set_has_fragmentCount();
  fragmentCount_ = value;
}

// optional int32 tpLevel = 15;
inline bool RidesInfo::has_tpLevel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RidesInfo::set_has_tpLevel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RidesInfo::clear_has_tpLevel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RidesInfo::clear_tpLevel() {
  tpLevel_ = 0;
  clear_has_tpLevel();
}
inline ::google::protobuf::int32 RidesInfo::tpLevel() const {
  return tpLevel_;
}
inline void RidesInfo::set_tpLevel(::google::protobuf::int32 value) {
  set_has_tpLevel();
  tpLevel_ = value;
}

// optional int32 tpStar = 16;
inline bool RidesInfo::has_tpStar() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RidesInfo::set_has_tpStar() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RidesInfo::clear_has_tpStar() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RidesInfo::clear_tpStar() {
  tpStar_ = 0;
  clear_has_tpStar();
}
inline ::google::protobuf::int32 RidesInfo::tpStar() const {
  return tpStar_;
}
inline void RidesInfo::set_tpStar(::google::protobuf::int32 value) {
  set_has_tpStar();
  tpStar_ = value;
}

// optional float knightHeight = 17;
inline bool RidesInfo::has_knightHeight() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RidesInfo::set_has_knightHeight() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RidesInfo::clear_has_knightHeight() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RidesInfo::clear_knightHeight() {
  knightHeight_ = 0;
  clear_has_knightHeight();
}
inline float RidesInfo::knightHeight() const {
  return knightHeight_;
}
inline void RidesInfo::set_knightHeight(float value) {
  set_has_knightHeight();
  knightHeight_ = value;
}

// optional float rangerHeight = 18;
inline bool RidesInfo::has_rangerHeight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RidesInfo::set_has_rangerHeight() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RidesInfo::clear_has_rangerHeight() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RidesInfo::clear_rangerHeight() {
  rangerHeight_ = 0;
  clear_has_rangerHeight();
}
inline float RidesInfo::rangerHeight() const {
  return rangerHeight_;
}
inline void RidesInfo::set_rangerHeight(float value) {
  set_has_rangerHeight();
  rangerHeight_ = value;
}

// optional float magicianHeight = 19;
inline bool RidesInfo::has_magicianHeight() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RidesInfo::set_has_magicianHeight() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RidesInfo::clear_has_magicianHeight() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RidesInfo::clear_magicianHeight() {
  magicianHeight_ = 0;
  clear_has_magicianHeight();
}
inline float RidesInfo::magicianHeight() const {
  return magicianHeight_;
}
inline void RidesInfo::set_magicianHeight(float value) {
  set_has_magicianHeight();
  magicianHeight_ = value;
}

// optional int32 effect = 20;
inline bool RidesInfo::has_effect() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RidesInfo::set_has_effect() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RidesInfo::clear_has_effect() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RidesInfo::clear_effect() {
  effect_ = 0;
  clear_has_effect();
}
inline ::google::protobuf::int32 RidesInfo::effect() const {
  return effect_;
}
inline void RidesInfo::set_effect(::google::protobuf::int32 value) {
  set_has_effect();
  effect_ = value;
}

// -------------------------------------------------------------------

// RidesGroup

// repeated .RidesInfo rides = 1;
inline int RidesGroup::rides_size() const {
  return rides_.size();
}
inline void RidesGroup::clear_rides() {
  rides_.Clear();
}
inline const ::RidesInfo& RidesGroup::rides(int index) const {
  return rides_.Get(index);
}
inline ::RidesInfo* RidesGroup::mutable_rides(int index) {
  return rides_.Mutable(index);
}
inline ::RidesInfo* RidesGroup::add_rides() {
  return rides_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RidesInfo >&
RidesGroup::rides() const {
  return rides_;
}
inline ::google::protobuf::RepeatedPtrField< ::RidesInfo >*
RidesGroup::mutable_rides() {
  return &rides_;
}

// -------------------------------------------------------------------

// AllRideses

// repeated .RidesGroup rides = 1;
inline int AllRideses::rides_size() const {
  return rides_.size();
}
inline void AllRideses::clear_rides() {
  rides_.Clear();
}
inline const ::RidesGroup& AllRideses::rides(int index) const {
  return rides_.Get(index);
}
inline ::RidesGroup* AllRideses::mutable_rides(int index) {
  return rides_.Mutable(index);
}
inline ::RidesGroup* AllRideses::add_rides() {
  return rides_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RidesGroup >&
AllRideses::rides() const {
  return rides_;
}
inline ::google::protobuf::RepeatedPtrField< ::RidesGroup >*
AllRideses::mutable_rides() {
  return &rides_;
}

// -------------------------------------------------------------------

// PB_RidesAsset

// optional int32 model = 1 [default = -1];
inline bool PB_RidesAsset::has_model() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_RidesAsset::set_has_model() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_RidesAsset::clear_has_model() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_RidesAsset::clear_model() {
  model_ = -1;
  clear_has_model();
}
inline ::google::protobuf::int32 PB_RidesAsset::model() const {
  return model_;
}
inline void PB_RidesAsset::set_model(::google::protobuf::int32 value) {
  set_has_model();
  model_ = value;
}

// optional int32 star = 2;
inline bool PB_RidesAsset::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_RidesAsset::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_RidesAsset::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_RidesAsset::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 PB_RidesAsset::star() const {
  return star_;
}
inline void PB_RidesAsset::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 level = 3;
inline bool PB_RidesAsset::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_RidesAsset::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_RidesAsset::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_RidesAsset::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PB_RidesAsset::level() const {
  return level_;
}
inline void PB_RidesAsset::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 exp = 4;
inline bool PB_RidesAsset::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_RidesAsset::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_RidesAsset::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_RidesAsset::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 PB_RidesAsset::exp() const {
  return exp_;
}
inline void PB_RidesAsset::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 potential = 5;
inline bool PB_RidesAsset::has_potential() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_RidesAsset::set_has_potential() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_RidesAsset::clear_has_potential() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_RidesAsset::clear_potential() {
  potential_ = 0;
  clear_has_potential();
}
inline ::google::protobuf::int32 PB_RidesAsset::potential() const {
  return potential_;
}
inline void PB_RidesAsset::set_potential(::google::protobuf::int32 value) {
  set_has_potential();
  potential_ = value;
}

// repeated int32 att = 6;
inline int PB_RidesAsset::att_size() const {
  return att_.size();
}
inline void PB_RidesAsset::clear_att() {
  att_.Clear();
}
inline ::google::protobuf::int32 PB_RidesAsset::att(int index) const {
  return att_.Get(index);
}
inline void PB_RidesAsset::set_att(int index, ::google::protobuf::int32 value) {
  att_.Set(index, value);
}
inline void PB_RidesAsset::add_att(::google::protobuf::int32 value) {
  att_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_RidesAsset::att() const {
  return att_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_RidesAsset::mutable_att() {
  return &att_;
}

// repeated bool lockAtt = 7;
inline int PB_RidesAsset::lockAtt_size() const {
  return lockAtt_.size();
}
inline void PB_RidesAsset::clear_lockAtt() {
  lockAtt_.Clear();
}
inline bool PB_RidesAsset::lockAtt(int index) const {
  return lockAtt_.Get(index);
}
inline void PB_RidesAsset::set_lockAtt(int index, bool value) {
  lockAtt_.Set(index, value);
}
inline void PB_RidesAsset::add_lockAtt(bool value) {
  lockAtt_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
PB_RidesAsset::lockAtt() const {
  return lockAtt_;
}
inline ::google::protobuf::RepeatedField< bool >*
PB_RidesAsset::mutable_lockAtt() {
  return &lockAtt_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RidesInfo_Quality>() {
  return ::RidesInfo_Quality_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RidesInfo_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Reservation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_ReservationTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_ReservationTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_AllReservationTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_AllReservationTimes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Reservation_2eproto() {
  protobuf_AddDesc_Reservation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Reservation.proto");
  GOOGLE_CHECK(file != NULL);
  PB_ReservationTime_descriptor_ = file->message_type(0);
  static const int PB_ReservationTime_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, appointmentBeginHour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, appointmentBeginMinute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, appointmentEndHour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, appointmentEndMinute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, challengeEndHour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, challengeEndMinute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, enterBeginHour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, enterBeginMinute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, fightBeginHour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, fightBeginMinute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, fightEndHour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, fightEndMinute_),
  };
  PB_ReservationTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_ReservationTime_descriptor_,
      PB_ReservationTime::default_instance_,
      PB_ReservationTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ReservationTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_ReservationTime));
  PB_AllReservationTimes_descriptor_ = file->message_type(1);
  static const int PB_AllReservationTimes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllReservationTimes, times_),
  };
  PB_AllReservationTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_AllReservationTimes_descriptor_,
      PB_AllReservationTimes::default_instance_,
      PB_AllReservationTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllReservationTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllReservationTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_AllReservationTimes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Reservation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_ReservationTime_descriptor_, &PB_ReservationTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_AllReservationTimes_descriptor_, &PB_AllReservationTimes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Reservation_2eproto() {
  delete PB_ReservationTime::default_instance_;
  delete PB_ReservationTime_reflection_;
  delete PB_AllReservationTimes::default_instance_;
  delete PB_AllReservationTimes_reflection_;
}

void protobuf_AddDesc_Reservation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021Reservation.proto\"\340\002\n\022PB_ReservationTi"
    "me\022\n\n\002id\030\001 \001(\005\022\034\n\024appointmentBeginHour\030\002"
    " \001(\005\022\036\n\026appointmentBeginMinute\030\003 \001(\005\022\032\n\022"
    "appointmentEndHour\030\004 \001(\005\022\034\n\024appointmentE"
    "ndMinute\030\005 \001(\005\022\030\n\020challengeEndHour\030\006 \001(\005"
    "\022\032\n\022challengeEndMinute\030\007 \001(\005\022\026\n\016enterBeg"
    "inHour\030\010 \001(\005\022\030\n\020enterBeginMinute\030\t \001(\005\022\026"
    "\n\016fightBeginHour\030\n \001(\005\022\030\n\020fightBeginMinu"
    "te\030\013 \001(\005\022\024\n\014fightEndHour\030\014 \001(\005\022\026\n\016fightE"
    "ndMinute\030\r \001(\005\"<\n\026PB_AllReservationTimes"
    "\022\"\n\005times\030\001 \003(\0132\023.PB_ReservationTime", 436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Reservation.proto", &protobuf_RegisterTypes);
  PB_ReservationTime::default_instance_ = new PB_ReservationTime();
  PB_AllReservationTimes::default_instance_ = new PB_AllReservationTimes();
  PB_ReservationTime::default_instance_->InitAsDefaultInstance();
  PB_AllReservationTimes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Reservation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Reservation_2eproto {
  StaticDescriptorInitializer_Reservation_2eproto() {
    protobuf_AddDesc_Reservation_2eproto();
  }
} static_descriptor_initializer_Reservation_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PB_ReservationTime::kIdFieldNumber;
const int PB_ReservationTime::kAppointmentBeginHourFieldNumber;
const int PB_ReservationTime::kAppointmentBeginMinuteFieldNumber;
const int PB_ReservationTime::kAppointmentEndHourFieldNumber;
const int PB_ReservationTime::kAppointmentEndMinuteFieldNumber;
const int PB_ReservationTime::kChallengeEndHourFieldNumber;
const int PB_ReservationTime::kChallengeEndMinuteFieldNumber;
const int PB_ReservationTime::kEnterBeginHourFieldNumber;
const int PB_ReservationTime::kEnterBeginMinuteFieldNumber;
const int PB_ReservationTime::kFightBeginHourFieldNumber;
const int PB_ReservationTime::kFightBeginMinuteFieldNumber;
const int PB_ReservationTime::kFightEndHourFieldNumber;
const int PB_ReservationTime::kFightEndMinuteFieldNumber;
#endif  // !_MSC_VER

PB_ReservationTime::PB_ReservationTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_ReservationTime::InitAsDefaultInstance() {
}

PB_ReservationTime::PB_ReservationTime(const PB_ReservationTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_ReservationTime::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  appointmentBeginHour_ = 0;
  appointmentBeginMinute_ = 0;
  appointmentEndHour_ = 0;
  appointmentEndMinute_ = 0;
  challengeEndHour_ = 0;
  challengeEndMinute_ = 0;
  enterBeginHour_ = 0;
  enterBeginMinute_ = 0;
  fightBeginHour_ = 0;
  fightBeginMinute_ = 0;
  fightEndHour_ = 0;
  fightEndMinute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_ReservationTime::~PB_ReservationTime() {
  SharedDtor();
}

void PB_ReservationTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_ReservationTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_ReservationTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ReservationTime_descriptor_;
}

const PB_ReservationTime& PB_ReservationTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Reservation_2eproto();  return *default_instance_;
}

PB_ReservationTime* PB_ReservationTime::default_instance_ = NULL;

PB_ReservationTime* PB_ReservationTime::New() const {
  return new PB_ReservationTime;
}

void PB_ReservationTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    appointmentBeginHour_ = 0;
    appointmentBeginMinute_ = 0;
    appointmentEndHour_ = 0;
    appointmentEndMinute_ = 0;
    challengeEndHour_ = 0;
    challengeEndMinute_ = 0;
    enterBeginHour_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    enterBeginMinute_ = 0;
    fightBeginHour_ = 0;
    fightBeginMinute_ = 0;
    fightEndHour_ = 0;
    fightEndMinute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_ReservationTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appointmentBeginHour;
        break;
      }
      
      // optional int32 appointmentBeginHour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appointmentBeginHour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appointmentBeginHour_)));
          set_has_appointmentBeginHour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appointmentBeginMinute;
        break;
      }
      
      // optional int32 appointmentBeginMinute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appointmentBeginMinute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appointmentBeginMinute_)));
          set_has_appointmentBeginMinute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_appointmentEndHour;
        break;
      }
      
      // optional int32 appointmentEndHour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appointmentEndHour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appointmentEndHour_)));
          set_has_appointmentEndHour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_appointmentEndMinute;
        break;
      }
      
      // optional int32 appointmentEndMinute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appointmentEndMinute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appointmentEndMinute_)));
          set_has_appointmentEndMinute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_challengeEndHour;
        break;
      }
      
      // optional int32 challengeEndHour = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeEndHour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeEndHour_)));
          set_has_challengeEndHour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_challengeEndMinute;
        break;
      }
      
      // optional int32 challengeEndMinute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeEndMinute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeEndMinute_)));
          set_has_challengeEndMinute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_enterBeginHour;
        break;
      }
      
      // optional int32 enterBeginHour = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterBeginHour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enterBeginHour_)));
          set_has_enterBeginHour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_enterBeginMinute;
        break;
      }
      
      // optional int32 enterBeginMinute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterBeginMinute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enterBeginMinute_)));
          set_has_enterBeginMinute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fightBeginHour;
        break;
      }
      
      // optional int32 fightBeginHour = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightBeginHour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightBeginHour_)));
          set_has_fightBeginHour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fightBeginMinute;
        break;
      }
      
      // optional int32 fightBeginMinute = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightBeginMinute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightBeginMinute_)));
          set_has_fightBeginMinute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fightEndHour;
        break;
      }
      
      // optional int32 fightEndHour = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightEndHour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightEndHour_)));
          set_has_fightEndHour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fightEndMinute;
        break;
      }
      
      // optional int32 fightEndMinute = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightEndMinute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightEndMinute_)));
          set_has_fightEndMinute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_ReservationTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 appointmentBeginHour = 2;
  if (has_appointmentBeginHour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appointmentBeginHour(), output);
  }
  
  // optional int32 appointmentBeginMinute = 3;
  if (has_appointmentBeginMinute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appointmentBeginMinute(), output);
  }
  
  // optional int32 appointmentEndHour = 4;
  if (has_appointmentEndHour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->appointmentEndHour(), output);
  }
  
  // optional int32 appointmentEndMinute = 5;
  if (has_appointmentEndMinute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->appointmentEndMinute(), output);
  }
  
  // optional int32 challengeEndHour = 6;
  if (has_challengeEndHour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->challengeEndHour(), output);
  }
  
  // optional int32 challengeEndMinute = 7;
  if (has_challengeEndMinute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->challengeEndMinute(), output);
  }
  
  // optional int32 enterBeginHour = 8;
  if (has_enterBeginHour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->enterBeginHour(), output);
  }
  
  // optional int32 enterBeginMinute = 9;
  if (has_enterBeginMinute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->enterBeginMinute(), output);
  }
  
  // optional int32 fightBeginHour = 10;
  if (has_fightBeginHour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fightBeginHour(), output);
  }
  
  // optional int32 fightBeginMinute = 11;
  if (has_fightBeginMinute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fightBeginMinute(), output);
  }
  
  // optional int32 fightEndHour = 12;
  if (has_fightEndHour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->fightEndHour(), output);
  }
  
  // optional int32 fightEndMinute = 13;
  if (has_fightEndMinute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fightEndMinute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_ReservationTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 appointmentBeginHour = 2;
  if (has_appointmentBeginHour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appointmentBeginHour(), target);
  }
  
  // optional int32 appointmentBeginMinute = 3;
  if (has_appointmentBeginMinute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appointmentBeginMinute(), target);
  }
  
  // optional int32 appointmentEndHour = 4;
  if (has_appointmentEndHour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->appointmentEndHour(), target);
  }
  
  // optional int32 appointmentEndMinute = 5;
  if (has_appointmentEndMinute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->appointmentEndMinute(), target);
  }
  
  // optional int32 challengeEndHour = 6;
  if (has_challengeEndHour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->challengeEndHour(), target);
  }
  
  // optional int32 challengeEndMinute = 7;
  if (has_challengeEndMinute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->challengeEndMinute(), target);
  }
  
  // optional int32 enterBeginHour = 8;
  if (has_enterBeginHour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->enterBeginHour(), target);
  }
  
  // optional int32 enterBeginMinute = 9;
  if (has_enterBeginMinute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->enterBeginMinute(), target);
  }
  
  // optional int32 fightBeginHour = 10;
  if (has_fightBeginHour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fightBeginHour(), target);
  }
  
  // optional int32 fightBeginMinute = 11;
  if (has_fightBeginMinute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->fightBeginMinute(), target);
  }
  
  // optional int32 fightEndHour = 12;
  if (has_fightEndHour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->fightEndHour(), target);
  }
  
  // optional int32 fightEndMinute = 13;
  if (has_fightEndMinute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fightEndMinute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_ReservationTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 appointmentBeginHour = 2;
    if (has_appointmentBeginHour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appointmentBeginHour());
    }
    
    // optional int32 appointmentBeginMinute = 3;
    if (has_appointmentBeginMinute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appointmentBeginMinute());
    }
    
    // optional int32 appointmentEndHour = 4;
    if (has_appointmentEndHour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appointmentEndHour());
    }
    
    // optional int32 appointmentEndMinute = 5;
    if (has_appointmentEndMinute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appointmentEndMinute());
    }
    
    // optional int32 challengeEndHour = 6;
    if (has_challengeEndHour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeEndHour());
    }
    
    // optional int32 challengeEndMinute = 7;
    if (has_challengeEndMinute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeEndMinute());
    }
    
    // optional int32 enterBeginHour = 8;
    if (has_enterBeginHour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enterBeginHour());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 enterBeginMinute = 9;
    if (has_enterBeginMinute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enterBeginMinute());
    }
    
    // optional int32 fightBeginHour = 10;
    if (has_fightBeginHour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightBeginHour());
    }
    
    // optional int32 fightBeginMinute = 11;
    if (has_fightBeginMinute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightBeginMinute());
    }
    
    // optional int32 fightEndHour = 12;
    if (has_fightEndHour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightEndHour());
    }
    
    // optional int32 fightEndMinute = 13;
    if (has_fightEndMinute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightEndMinute());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_ReservationTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_ReservationTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_ReservationTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_ReservationTime::MergeFrom(const PB_ReservationTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_appointmentBeginHour()) {
      set_appointmentBeginHour(from.appointmentBeginHour());
    }
    if (from.has_appointmentBeginMinute()) {
      set_appointmentBeginMinute(from.appointmentBeginMinute());
    }
    if (from.has_appointmentEndHour()) {
      set_appointmentEndHour(from.appointmentEndHour());
    }
    if (from.has_appointmentEndMinute()) {
      set_appointmentEndMinute(from.appointmentEndMinute());
    }
    if (from.has_challengeEndHour()) {
      set_challengeEndHour(from.challengeEndHour());
    }
    if (from.has_challengeEndMinute()) {
      set_challengeEndMinute(from.challengeEndMinute());
    }
    if (from.has_enterBeginHour()) {
      set_enterBeginHour(from.enterBeginHour());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enterBeginMinute()) {
      set_enterBeginMinute(from.enterBeginMinute());
    }
    if (from.has_fightBeginHour()) {
      set_fightBeginHour(from.fightBeginHour());
    }
    if (from.has_fightBeginMinute()) {
      set_fightBeginMinute(from.fightBeginMinute());
    }
    if (from.has_fightEndHour()) {
      set_fightEndHour(from.fightEndHour());
    }
    if (from.has_fightEndMinute()) {
      set_fightEndMinute(from.fightEndMinute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_ReservationTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_ReservationTime::CopyFrom(const PB_ReservationTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_ReservationTime::IsInitialized() const {
  
  return true;
}

void PB_ReservationTime::Swap(PB_ReservationTime* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(appointmentBeginHour_, other->appointmentBeginHour_);
    std::swap(appointmentBeginMinute_, other->appointmentBeginMinute_);
    std::swap(appointmentEndHour_, other->appointmentEndHour_);
    std::swap(appointmentEndMinute_, other->appointmentEndMinute_);
    std::swap(challengeEndHour_, other->challengeEndHour_);
    std::swap(challengeEndMinute_, other->challengeEndMinute_);
    std::swap(enterBeginHour_, other->enterBeginHour_);
    std::swap(enterBeginMinute_, other->enterBeginMinute_);
    std::swap(fightBeginHour_, other->fightBeginHour_);
    std::swap(fightBeginMinute_, other->fightBeginMinute_);
    std::swap(fightEndHour_, other->fightEndHour_);
    std::swap(fightEndMinute_, other->fightEndMinute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_ReservationTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_ReservationTime_descriptor_;
  metadata.reflection = PB_ReservationTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_AllReservationTimes::kTimesFieldNumber;
#endif  // !_MSC_VER

PB_AllReservationTimes::PB_AllReservationTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_AllReservationTimes::InitAsDefaultInstance() {
}

PB_AllReservationTimes::PB_AllReservationTimes(const PB_AllReservationTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_AllReservationTimes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_AllReservationTimes::~PB_AllReservationTimes() {
  SharedDtor();
}

void PB_AllReservationTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_AllReservationTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_AllReservationTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AllReservationTimes_descriptor_;
}

const PB_AllReservationTimes& PB_AllReservationTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Reservation_2eproto();  return *default_instance_;
}

PB_AllReservationTimes* PB_AllReservationTimes::default_instance_ = NULL;

PB_AllReservationTimes* PB_AllReservationTimes::New() const {
  return new PB_AllReservationTimes;
}

void PB_AllReservationTimes::Clear() {
  times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_AllReservationTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_ReservationTime times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_times()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_times;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_AllReservationTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_ReservationTime times = 1;
  for (int i = 0; i < this->times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->times(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_AllReservationTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_ReservationTime times = 1;
  for (int i = 0; i < this->times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->times(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_AllReservationTimes::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_ReservationTime times = 1;
  total_size += 1 * this->times_size();
  for (int i = 0; i < this->times_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->times(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_AllReservationTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_AllReservationTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_AllReservationTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_AllReservationTimes::MergeFrom(const PB_AllReservationTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  times_.MergeFrom(from.times_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_AllReservationTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_AllReservationTimes::CopyFrom(const PB_AllReservationTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_AllReservationTimes::IsInitialized() const {
  
  return true;
}

void PB_AllReservationTimes::Swap(PB_AllReservationTimes* other) {
  if (other != this) {
    times_.Swap(&other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_AllReservationTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_AllReservationTimes_descriptor_;
  metadata.reflection = PB_AllReservationTimes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

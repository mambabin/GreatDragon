// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GodShip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GodShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodShip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GodShip_Quali_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PB_GodShipAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_GodShipAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllGodShips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllGodShips_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GodShip_2eproto() {
  protobuf_AddDesc_GodShip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GodShip.proto");
  GOOGLE_CHECK(file != NULL);
  GodShip_descriptor_ = file->message_type(0);
  static const int GodShip_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, Pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, Type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, Quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, Level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, ATK_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, DEF_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, MAXHP_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, CRIT_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, ACCURACY_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, DODGE_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, CRITDEF_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, CRITDamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, EXP_),
  };
  GodShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodShip_descriptor_,
      GodShip::default_instance_,
      GodShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodShip));
  GodShip_Quali_descriptor_ = GodShip_descriptor_->enum_type(0);
  PB_GodShipAsset_descriptor_ = file->message_type(1);
  static const int PB_GodShipAsset_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GodShipAsset, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GodShipAsset, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GodShipAsset, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GodShipAsset, level_),
  };
  PB_GodShipAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_GodShipAsset_descriptor_,
      PB_GodShipAsset::default_instance_,
      PB_GodShipAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GodShipAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_GodShipAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_GodShipAsset));
  AllGodShips_descriptor_ = file->message_type(2);
  static const int AllGodShips_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGodShips, godShips_),
  };
  AllGodShips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllGodShips_descriptor_,
      AllGodShips::default_instance_,
      AllGodShips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGodShips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGodShips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllGodShips));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GodShip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodShip_descriptor_, &GodShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_GodShipAsset_descriptor_, &PB_GodShipAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllGodShips_descriptor_, &AllGodShips::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GodShip_2eproto() {
  delete GodShip::default_instance_;
  delete GodShip_reflection_;
  delete PB_GodShipAsset::default_instance_;
  delete PB_GodShipAsset_reflection_;
  delete AllGodShips::default_instance_;
  delete AllGodShips_reflection_;
}

void protobuf_AddDesc_GodShip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rGodShip.proto\"\265\002\n\007GodShip\022\n\n\002id\030\001 \001(\005\022"
    "\014\n\004name\030\002 \001(\t\022\013\n\003Pic\030\003 \001(\005\022\014\n\004Type\030\004 \001(\005"
    "\022\037\n\007Quality\030\005 \001(\0162\016.GodShip.Quali\022\r\n\005Lev"
    "el\030\006 \001(\005\022\013\n\003ATK\030\007 \001(\005\022\013\n\003DEF\030\010 \001(\005\022\r\n\005MA"
    "XHP\030\t \001(\005\022\014\n\004CRIT\030\n \001(\005\022\020\n\010ACCURACY\030\013 \001("
    "\005\022\r\n\005DODGE\030\014 \001(\005\022\017\n\007CRITDEF\030\r \001(\005\022\022\n\nCRI"
    "TDamage\030\016 \001(\005\022\013\n\003EXP\030\017 \001(\005\";\n\005Quali\022\t\n\005G"
    "REEN\020\000\022\010\n\004BLUE\020\001\022\n\n\006PURPLE\020\002\022\010\n\004GOLD\020\003\022\007"
    "\n\003RED\020\004\"N\n\017PB_GodShipAsset\022\016\n\002id\030\001 \001(\005:\002"
    "-1\022\013\n\003exp\030\002 \001(\005\022\017\n\007quality\030\003 \001(\005\022\r\n\005leve"
    "l\030\004 \001(\005\")\n\013AllGodShips\022\032\n\010godShips\030\001 \003(\013"
    "2\010.GodShip", 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GodShip.proto", &protobuf_RegisterTypes);
  GodShip::default_instance_ = new GodShip();
  PB_GodShipAsset::default_instance_ = new PB_GodShipAsset();
  AllGodShips::default_instance_ = new AllGodShips();
  GodShip::default_instance_->InitAsDefaultInstance();
  PB_GodShipAsset::default_instance_->InitAsDefaultInstance();
  AllGodShips::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GodShip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GodShip_2eproto {
  StaticDescriptorInitializer_GodShip_2eproto() {
    protobuf_AddDesc_GodShip_2eproto();
  }
} static_descriptor_initializer_GodShip_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* GodShip_Quali_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodShip_Quali_descriptor_;
}
bool GodShip_Quali_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GodShip_Quali GodShip::GREEN;
const GodShip_Quali GodShip::BLUE;
const GodShip_Quali GodShip::PURPLE;
const GodShip_Quali GodShip::GOLD;
const GodShip_Quali GodShip::RED;
const GodShip_Quali GodShip::Quali_MIN;
const GodShip_Quali GodShip::Quali_MAX;
const int GodShip::Quali_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GodShip::kIdFieldNumber;
const int GodShip::kNameFieldNumber;
const int GodShip::kPicFieldNumber;
const int GodShip::kTypeFieldNumber;
const int GodShip::kQualityFieldNumber;
const int GodShip::kLevelFieldNumber;
const int GodShip::kATKFieldNumber;
const int GodShip::kDEFFieldNumber;
const int GodShip::kMAXHPFieldNumber;
const int GodShip::kCRITFieldNumber;
const int GodShip::kACCURACYFieldNumber;
const int GodShip::kDODGEFieldNumber;
const int GodShip::kCRITDEFFieldNumber;
const int GodShip::kCRITDamageFieldNumber;
const int GodShip::kEXPFieldNumber;
#endif  // !_MSC_VER

GodShip::GodShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodShip::InitAsDefaultInstance() {
}

GodShip::GodShip(const GodShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodShip::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  Pic_ = 0;
  Type_ = 0;
  Quality_ = 0;
  Level_ = 0;
  ATK_ = 0;
  DEF_ = 0;
  MAXHP_ = 0;
  CRIT_ = 0;
  ACCURACY_ = 0;
  DODGE_ = 0;
  CRITDEF_ = 0;
  CRITDamage_ = 0;
  EXP_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodShip::~GodShip() {
  SharedDtor();
}

void GodShip::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GodShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodShip_descriptor_;
}

const GodShip& GodShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodShip_2eproto();  return *default_instance_;
}

GodShip* GodShip::default_instance_ = NULL;

GodShip* GodShip::New() const {
  return new GodShip;
}

void GodShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    Pic_ = 0;
    Type_ = 0;
    Quality_ = 0;
    Level_ = 0;
    ATK_ = 0;
    DEF_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    MAXHP_ = 0;
    CRIT_ = 0;
    ACCURACY_ = 0;
    DODGE_ = 0;
    CRITDEF_ = 0;
    CRITDamage_ = 0;
    EXP_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Pic;
        break;
      }
      
      // optional int32 Pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Pic_)));
          set_has_Pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }
      
      // optional int32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Type_)));
          set_has_Type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Quality;
        break;
      }
      
      // optional .GodShip.Quali Quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GodShip_Quali_IsValid(value)) {
            set_Quality(static_cast< ::GodShip_Quali >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }
      
      // optional int32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Level_)));
          set_has_Level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ATK;
        break;
      }
      
      // optional int32 ATK = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ATK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ATK_)));
          set_has_ATK();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DEF;
        break;
      }
      
      // optional int32 DEF = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DEF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &DEF_)));
          set_has_DEF();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_MAXHP;
        break;
      }
      
      // optional int32 MAXHP = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MAXHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &MAXHP_)));
          set_has_MAXHP();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CRIT;
        break;
      }
      
      // optional int32 CRIT = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CRIT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &CRIT_)));
          set_has_CRIT();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ACCURACY;
        break;
      }
      
      // optional int32 ACCURACY = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ACCURACY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ACCURACY_)));
          set_has_ACCURACY();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_DODGE;
        break;
      }
      
      // optional int32 DODGE = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DODGE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &DODGE_)));
          set_has_DODGE();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CRITDEF;
        break;
      }
      
      // optional int32 CRITDEF = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CRITDEF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &CRITDEF_)));
          set_has_CRITDEF();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CRITDamage;
        break;
      }
      
      // optional int32 CRITDamage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CRITDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &CRITDamage_)));
          set_has_CRITDamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_EXP;
        break;
      }
      
      // optional int32 EXP = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &EXP_)));
          set_has_EXP();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 Pic = 3;
  if (has_Pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->Pic(), output);
  }
  
  // optional int32 Type = 4;
  if (has_Type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->Type(), output);
  }
  
  // optional .GodShip.Quali Quality = 5;
  if (has_Quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->Quality(), output);
  }
  
  // optional int32 Level = 6;
  if (has_Level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->Level(), output);
  }
  
  // optional int32 ATK = 7;
  if (has_ATK()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ATK(), output);
  }
  
  // optional int32 DEF = 8;
  if (has_DEF()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->DEF(), output);
  }
  
  // optional int32 MAXHP = 9;
  if (has_MAXHP()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->MAXHP(), output);
  }
  
  // optional int32 CRIT = 10;
  if (has_CRIT()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->CRIT(), output);
  }
  
  // optional int32 ACCURACY = 11;
  if (has_ACCURACY()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ACCURACY(), output);
  }
  
  // optional int32 DODGE = 12;
  if (has_DODGE()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->DODGE(), output);
  }
  
  // optional int32 CRITDEF = 13;
  if (has_CRITDEF()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->CRITDEF(), output);
  }
  
  // optional int32 CRITDamage = 14;
  if (has_CRITDamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->CRITDamage(), output);
  }
  
  // optional int32 EXP = 15;
  if (has_EXP()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->EXP(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 Pic = 3;
  if (has_Pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->Pic(), target);
  }
  
  // optional int32 Type = 4;
  if (has_Type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->Type(), target);
  }
  
  // optional .GodShip.Quali Quality = 5;
  if (has_Quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->Quality(), target);
  }
  
  // optional int32 Level = 6;
  if (has_Level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->Level(), target);
  }
  
  // optional int32 ATK = 7;
  if (has_ATK()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ATK(), target);
  }
  
  // optional int32 DEF = 8;
  if (has_DEF()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->DEF(), target);
  }
  
  // optional int32 MAXHP = 9;
  if (has_MAXHP()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->MAXHP(), target);
  }
  
  // optional int32 CRIT = 10;
  if (has_CRIT()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->CRIT(), target);
  }
  
  // optional int32 ACCURACY = 11;
  if (has_ACCURACY()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ACCURACY(), target);
  }
  
  // optional int32 DODGE = 12;
  if (has_DODGE()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->DODGE(), target);
  }
  
  // optional int32 CRITDEF = 13;
  if (has_CRITDEF()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->CRITDEF(), target);
  }
  
  // optional int32 CRITDamage = 14;
  if (has_CRITDamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->CRITDamage(), target);
  }
  
  // optional int32 EXP = 15;
  if (has_EXP()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->EXP(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodShip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 Pic = 3;
    if (has_Pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->Pic());
    }
    
    // optional int32 Type = 4;
    if (has_Type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->Type());
    }
    
    // optional .GodShip.Quali Quality = 5;
    if (has_Quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->Quality());
    }
    
    // optional int32 Level = 6;
    if (has_Level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->Level());
    }
    
    // optional int32 ATK = 7;
    if (has_ATK()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ATK());
    }
    
    // optional int32 DEF = 8;
    if (has_DEF()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->DEF());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 MAXHP = 9;
    if (has_MAXHP()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->MAXHP());
    }
    
    // optional int32 CRIT = 10;
    if (has_CRIT()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->CRIT());
    }
    
    // optional int32 ACCURACY = 11;
    if (has_ACCURACY()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ACCURACY());
    }
    
    // optional int32 DODGE = 12;
    if (has_DODGE()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->DODGE());
    }
    
    // optional int32 CRITDEF = 13;
    if (has_CRITDEF()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->CRITDEF());
    }
    
    // optional int32 CRITDamage = 14;
    if (has_CRITDamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->CRITDamage());
    }
    
    // optional int32 EXP = 15;
    if (has_EXP()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->EXP());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodShip::MergeFrom(const GodShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_Pic()) {
      set_Pic(from.Pic());
    }
    if (from.has_Type()) {
      set_Type(from.Type());
    }
    if (from.has_Quality()) {
      set_Quality(from.Quality());
    }
    if (from.has_Level()) {
      set_Level(from.Level());
    }
    if (from.has_ATK()) {
      set_ATK(from.ATK());
    }
    if (from.has_DEF()) {
      set_DEF(from.DEF());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_MAXHP()) {
      set_MAXHP(from.MAXHP());
    }
    if (from.has_CRIT()) {
      set_CRIT(from.CRIT());
    }
    if (from.has_ACCURACY()) {
      set_ACCURACY(from.ACCURACY());
    }
    if (from.has_DODGE()) {
      set_DODGE(from.DODGE());
    }
    if (from.has_CRITDEF()) {
      set_CRITDEF(from.CRITDEF());
    }
    if (from.has_CRITDamage()) {
      set_CRITDamage(from.CRITDamage());
    }
    if (from.has_EXP()) {
      set_EXP(from.EXP());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodShip::CopyFrom(const GodShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodShip::IsInitialized() const {
  
  return true;
}

void GodShip::Swap(GodShip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(Pic_, other->Pic_);
    std::swap(Type_, other->Type_);
    std::swap(Quality_, other->Quality_);
    std::swap(Level_, other->Level_);
    std::swap(ATK_, other->ATK_);
    std::swap(DEF_, other->DEF_);
    std::swap(MAXHP_, other->MAXHP_);
    std::swap(CRIT_, other->CRIT_);
    std::swap(ACCURACY_, other->ACCURACY_);
    std::swap(DODGE_, other->DODGE_);
    std::swap(CRITDEF_, other->CRITDEF_);
    std::swap(CRITDamage_, other->CRITDamage_);
    std::swap(EXP_, other->EXP_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodShip_descriptor_;
  metadata.reflection = GodShip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_GodShipAsset::kIdFieldNumber;
const int PB_GodShipAsset::kExpFieldNumber;
const int PB_GodShipAsset::kQualityFieldNumber;
const int PB_GodShipAsset::kLevelFieldNumber;
#endif  // !_MSC_VER

PB_GodShipAsset::PB_GodShipAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_GodShipAsset::InitAsDefaultInstance() {
}

PB_GodShipAsset::PB_GodShipAsset(const PB_GodShipAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_GodShipAsset::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  exp_ = 0;
  quality_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_GodShipAsset::~PB_GodShipAsset() {
  SharedDtor();
}

void PB_GodShipAsset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_GodShipAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_GodShipAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_GodShipAsset_descriptor_;
}

const PB_GodShipAsset& PB_GodShipAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodShip_2eproto();  return *default_instance_;
}

PB_GodShipAsset* PB_GodShipAsset::default_instance_ = NULL;

PB_GodShipAsset* PB_GodShipAsset::New() const {
  return new PB_GodShipAsset;
}

void PB_GodShipAsset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    exp_ = 0;
    quality_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_GodShipAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_GodShipAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_GodShipAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_GodShipAsset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_GodShipAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_GodShipAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_GodShipAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_GodShipAsset::MergeFrom(const PB_GodShipAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_GodShipAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_GodShipAsset::CopyFrom(const PB_GodShipAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_GodShipAsset::IsInitialized() const {
  
  return true;
}

void PB_GodShipAsset::Swap(PB_GodShipAsset* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(quality_, other->quality_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_GodShipAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_GodShipAsset_descriptor_;
  metadata.reflection = PB_GodShipAsset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllGodShips::kGodShipsFieldNumber;
#endif  // !_MSC_VER

AllGodShips::AllGodShips()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllGodShips::InitAsDefaultInstance() {
}

AllGodShips::AllGodShips(const AllGodShips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllGodShips::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllGodShips::~AllGodShips() {
  SharedDtor();
}

void AllGodShips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllGodShips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllGodShips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllGodShips_descriptor_;
}

const AllGodShips& AllGodShips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodShip_2eproto();  return *default_instance_;
}

AllGodShips* AllGodShips::default_instance_ = NULL;

AllGodShips* AllGodShips::New() const {
  return new AllGodShips;
}

void AllGodShips::Clear() {
  godShips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllGodShips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GodShip godShips = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godShips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godShips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_godShips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllGodShips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GodShip godShips = 1;
  for (int i = 0; i < this->godShips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->godShips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllGodShips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GodShip godShips = 1;
  for (int i = 0; i < this->godShips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->godShips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllGodShips::ByteSize() const {
  int total_size = 0;
  
  // repeated .GodShip godShips = 1;
  total_size += 1 * this->godShips_size();
  for (int i = 0; i < this->godShips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godShips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllGodShips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllGodShips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllGodShips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllGodShips::MergeFrom(const AllGodShips& from) {
  GOOGLE_CHECK_NE(&from, this);
  godShips_.MergeFrom(from.godShips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllGodShips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllGodShips::CopyFrom(const AllGodShips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllGodShips::IsInitialized() const {
  
  return true;
}

void AllGodShips::Swap(AllGodShips* other) {
  if (other != this) {
    godShips_.Swap(&other->godShips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllGodShips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllGodShips_descriptor_;
  metadata.reflection = AllGodShips_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentInfo.proto

#ifndef PROTOBUF_EquipmentInfo_2eproto__INCLUDED
#define PROTOBUF_EquipmentInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "FightInfo.pb.h"
#include "ItemBaseInfo.pb.h"
#include "GodShip.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EquipmentInfo_2eproto();
void protobuf_AssignDesc_EquipmentInfo_2eproto();
void protobuf_ShutdownFile_EquipmentInfo_2eproto();

class EquipmentInfo;
class AllEquipments;
class PB_EquipAsset;
class EquipRecipe;
class AllEquipRecipes;
class BaseWing;
class AllBaseWings;
class Wing;
class AllWings;
class PB_EquipmentAtt;

enum EquipmentInfo_Type {
  EquipmentInfo_Type_HEAD = 0,
  EquipmentInfo_Type_CHEST = 1,
  EquipmentInfo_Type_SHOULDER = 2,
  EquipmentInfo_Type_BOOTS = 3,
  EquipmentInfo_Type_HAND = 4,
  EquipmentInfo_Type_WEAPON = 5,
  EquipmentInfo_Type_NECKLACE = 6,
  EquipmentInfo_Type_RING = 7,
  EquipmentInfo_Type_BELT = 8,
  EquipmentInfo_Type_TROUSERS = 9,
  EquipmentInfo_Type_JEWELRY = 10,
  EquipmentInfo_Type_BRACELET = 11
};
bool EquipmentInfo_Type_IsValid(int value);
const EquipmentInfo_Type EquipmentInfo_Type_Type_MIN = EquipmentInfo_Type_HEAD;
const EquipmentInfo_Type EquipmentInfo_Type_Type_MAX = EquipmentInfo_Type_BRACELET;
const int EquipmentInfo_Type_Type_ARRAYSIZE = EquipmentInfo_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipmentInfo_Type_descriptor();
inline const ::std::string& EquipmentInfo_Type_Name(EquipmentInfo_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipmentInfo_Type_descriptor(), value);
}
inline bool EquipmentInfo_Type_Parse(
    const ::std::string& name, EquipmentInfo_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipmentInfo_Type>(
    EquipmentInfo_Type_descriptor(), name, value);
}
enum EquipmentInfo_ColorType {
  EquipmentInfo_ColorType_WHITE = 0,
  EquipmentInfo_ColorType_GREEN = 1,
  EquipmentInfo_ColorType_BLUE = 2,
  EquipmentInfo_ColorType_YELLOW = 3,
  EquipmentInfo_ColorType_RED = 4
};
bool EquipmentInfo_ColorType_IsValid(int value);
const EquipmentInfo_ColorType EquipmentInfo_ColorType_ColorType_MIN = EquipmentInfo_ColorType_WHITE;
const EquipmentInfo_ColorType EquipmentInfo_ColorType_ColorType_MAX = EquipmentInfo_ColorType_RED;
const int EquipmentInfo_ColorType_ColorType_ARRAYSIZE = EquipmentInfo_ColorType_ColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipmentInfo_ColorType_descriptor();
inline const ::std::string& EquipmentInfo_ColorType_Name(EquipmentInfo_ColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipmentInfo_ColorType_descriptor(), value);
}
inline bool EquipmentInfo_ColorType_Parse(
    const ::std::string& name, EquipmentInfo_ColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipmentInfo_ColorType>(
    EquipmentInfo_ColorType_descriptor(), name, value);
}
enum BaseWing_ColorType {
  BaseWing_ColorType_WHITE = 0,
  BaseWing_ColorType_GREEN = 1,
  BaseWing_ColorType_BLUE = 2,
  BaseWing_ColorType_YELLOW = 3,
  BaseWing_ColorType_RED = 4
};
bool BaseWing_ColorType_IsValid(int value);
const BaseWing_ColorType BaseWing_ColorType_ColorType_MIN = BaseWing_ColorType_WHITE;
const BaseWing_ColorType BaseWing_ColorType_ColorType_MAX = BaseWing_ColorType_RED;
const int BaseWing_ColorType_ColorType_ARRAYSIZE = BaseWing_ColorType_ColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BaseWing_ColorType_descriptor();
inline const ::std::string& BaseWing_ColorType_Name(BaseWing_ColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BaseWing_ColorType_descriptor(), value);
}
inline bool BaseWing_ColorType_Parse(
    const ::std::string& name, BaseWing_ColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BaseWing_ColorType>(
    BaseWing_ColorType_descriptor(), name, value);
}
enum Wing_ColorType {
  Wing_ColorType_WHITE = 0,
  Wing_ColorType_GREEN = 1,
  Wing_ColorType_BLUE = 2,
  Wing_ColorType_YELLOW = 3,
  Wing_ColorType_RED = 4
};
bool Wing_ColorType_IsValid(int value);
const Wing_ColorType Wing_ColorType_ColorType_MIN = Wing_ColorType_WHITE;
const Wing_ColorType Wing_ColorType_ColorType_MAX = Wing_ColorType_RED;
const int Wing_ColorType_ColorType_ARRAYSIZE = Wing_ColorType_ColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Wing_ColorType_descriptor();
inline const ::std::string& Wing_ColorType_Name(Wing_ColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Wing_ColorType_descriptor(), value);
}
inline bool Wing_ColorType_Parse(
    const ::std::string& name, Wing_ColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Wing_ColorType>(
    Wing_ColorType_descriptor(), name, value);
}
// ===================================================================

class EquipmentInfo : public ::google::protobuf::Message {
 public:
  EquipmentInfo();
  virtual ~EquipmentInfo();
  
  EquipmentInfo(const EquipmentInfo& from);
  
  inline EquipmentInfo& operator=(const EquipmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentInfo& default_instance();
  
  void Swap(EquipmentInfo* other);
  
  // implements Message ----------------------------------------------
  
  EquipmentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentInfo& from);
  void MergeFrom(const EquipmentInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef EquipmentInfo_Type Type;
  static const Type HEAD = EquipmentInfo_Type_HEAD;
  static const Type CHEST = EquipmentInfo_Type_CHEST;
  static const Type SHOULDER = EquipmentInfo_Type_SHOULDER;
  static const Type BOOTS = EquipmentInfo_Type_BOOTS;
  static const Type HAND = EquipmentInfo_Type_HAND;
  static const Type WEAPON = EquipmentInfo_Type_WEAPON;
  static const Type NECKLACE = EquipmentInfo_Type_NECKLACE;
  static const Type RING = EquipmentInfo_Type_RING;
  static const Type BELT = EquipmentInfo_Type_BELT;
  static const Type TROUSERS = EquipmentInfo_Type_TROUSERS;
  static const Type JEWELRY = EquipmentInfo_Type_JEWELRY;
  static const Type BRACELET = EquipmentInfo_Type_BRACELET;
  static inline bool Type_IsValid(int value) {
    return EquipmentInfo_Type_IsValid(value);
  }
  static const Type Type_MIN =
    EquipmentInfo_Type_Type_MIN;
  static const Type Type_MAX =
    EquipmentInfo_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    EquipmentInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return EquipmentInfo_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return EquipmentInfo_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return EquipmentInfo_Type_Parse(name, value);
  }
  
  typedef EquipmentInfo_ColorType ColorType;
  static const ColorType WHITE = EquipmentInfo_ColorType_WHITE;
  static const ColorType GREEN = EquipmentInfo_ColorType_GREEN;
  static const ColorType BLUE = EquipmentInfo_ColorType_BLUE;
  static const ColorType YELLOW = EquipmentInfo_ColorType_YELLOW;
  static const ColorType RED = EquipmentInfo_ColorType_RED;
  static inline bool ColorType_IsValid(int value) {
    return EquipmentInfo_ColorType_IsValid(value);
  }
  static const ColorType ColorType_MIN =
    EquipmentInfo_ColorType_ColorType_MIN;
  static const ColorType ColorType_MAX =
    EquipmentInfo_ColorType_ColorType_MAX;
  static const int ColorType_ARRAYSIZE =
    EquipmentInfo_ColorType_ColorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColorType_descriptor() {
    return EquipmentInfo_ColorType_descriptor();
  }
  static inline const ::std::string& ColorType_Name(ColorType value) {
    return EquipmentInfo_ColorType_Name(value);
  }
  static inline bool ColorType_Parse(const ::std::string& name,
      ColorType* value) {
    return EquipmentInfo_ColorType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // optional .EquipmentInfo.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::EquipmentInfo_Type type() const;
  inline void set_type(::EquipmentInfo_Type value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 model = 4;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 4;
  inline ::google::protobuf::int32 model() const;
  inline void set_model(::google::protobuf::int32 value);
  
  // optional int32 picture = 5;
  inline bool has_picture() const;
  inline void clear_picture();
  static const int kPictureFieldNumber = 5;
  inline ::google::protobuf::int32 picture() const;
  inline void set_picture(::google::protobuf::int32 value);
  
  // optional string desc = 6;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 6;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // optional int32 professionType = 7;
  inline bool has_professionType() const;
  inline void clear_professionType();
  static const int kProfessionTypeFieldNumber = 7;
  inline ::google::protobuf::int32 professionType() const;
  inline void set_professionType(::google::protobuf::int32 value);
  
  // optional int32 requiredLevel = 8;
  inline bool has_requiredLevel() const;
  inline void clear_requiredLevel();
  static const int kRequiredLevelFieldNumber = 8;
  inline ::google::protobuf::int32 requiredLevel() const;
  inline void set_requiredLevel(::google::protobuf::int32 value);
  
  // optional int32 equipmentLevel = 9;
  inline bool has_equipmentLevel() const;
  inline void clear_equipmentLevel();
  static const int kEquipmentLevelFieldNumber = 9;
  inline ::google::protobuf::int32 equipmentLevel() const;
  inline void set_equipmentLevel(::google::protobuf::int32 value);
  
  // optional bool isSell = 10;
  inline bool has_isSell() const;
  inline void clear_isSell();
  static const int kIsSellFieldNumber = 10;
  inline bool isSell() const;
  inline void set_isSell(bool value);
  
  // optional int64 price = 11;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 11;
  inline ::google::protobuf::int64 price() const;
  inline void set_price(::google::protobuf::int64 value);
  
  // optional .EquipmentInfo.ColorType colorType = 12;
  inline bool has_colorType() const;
  inline void clear_colorType();
  static const int kColorTypeFieldNumber = 12;
  inline ::EquipmentInfo_ColorType colorType() const;
  inline void set_colorType(::EquipmentInfo_ColorType value);
  
  // repeated .PB_FightAtt.PropertyType baseType = 13;
  inline int baseType_size() const;
  inline void clear_baseType();
  static const int kBaseTypeFieldNumber = 13;
  inline ::PB_FightAtt_PropertyType baseType(int index) const;
  inline void set_baseType(int index, ::PB_FightAtt_PropertyType value);
  inline void add_baseType(::PB_FightAtt_PropertyType value);
  inline const ::google::protobuf::RepeatedField<int>& baseType() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_baseType();
  
  // repeated int32 baseDelta = 14;
  inline int baseDelta_size() const;
  inline void clear_baseDelta();
  static const int kBaseDeltaFieldNumber = 14;
  inline ::google::protobuf::int32 baseDelta(int index) const;
  inline void set_baseDelta(int index, ::google::protobuf::int32 value);
  inline void add_baseDelta(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      baseDelta() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_baseDelta();
  
  // optional int64 rmb = 21;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 21;
  inline ::google::protobuf::int64 rmb() const;
  inline void set_rmb(::google::protobuf::int64 value);
  
  // optional int32 effect1 = 22;
  inline bool has_effect1() const;
  inline void clear_effect1();
  static const int kEffect1FieldNumber = 22;
  inline ::google::protobuf::int32 effect1() const;
  inline void set_effect1(::google::protobuf::int32 value);
  
  // optional int32 effect2 = 23;
  inline bool has_effect2() const;
  inline void clear_effect2();
  static const int kEffect2FieldNumber = 23;
  inline ::google::protobuf::int32 effect2() const;
  inline void set_effect2(::google::protobuf::int32 value);
  
  // optional int32 stampCount = 24;
  inline bool has_stampCount() const;
  inline void clear_stampCount();
  static const int kStampCountFieldNumber = 24;
  inline ::google::protobuf::int32 stampCount() const;
  inline void set_stampCount(::google::protobuf::int32 value);
  
  // repeated .PB_FightAtt.PropertyType enhanceType = 25;
  inline int enhanceType_size() const;
  inline void clear_enhanceType();
  static const int kEnhanceTypeFieldNumber = 25;
  inline ::PB_FightAtt_PropertyType enhanceType(int index) const;
  inline void set_enhanceType(int index, ::PB_FightAtt_PropertyType value);
  inline void add_enhanceType(::PB_FightAtt_PropertyType value);
  inline const ::google::protobuf::RepeatedField<int>& enhanceType() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_enhanceType();
  
  // repeated int32 enhanceLimit = 27;
  inline int enhanceLimit_size() const;
  inline void clear_enhanceLimit();
  static const int kEnhanceLimitFieldNumber = 27;
  inline ::google::protobuf::int32 enhanceLimit(int index) const;
  inline void set_enhanceLimit(int index, ::google::protobuf::int32 value);
  inline void add_enhanceLimit(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enhanceLimit() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enhanceLimit();
  
  // optional int32 lovePoint = 28;
  inline bool has_lovePoint() const;
  inline void clear_lovePoint();
  static const int kLovePointFieldNumber = 28;
  inline ::google::protobuf::int32 lovePoint() const;
  inline void set_lovePoint(::google::protobuf::int32 value);
  
  // optional int32 pvpScore = 29;
  inline bool has_pvpScore() const;
  inline void clear_pvpScore();
  static const int kPvpScoreFieldNumber = 29;
  inline ::google::protobuf::int32 pvpScore() const;
  inline void set_pvpScore(::google::protobuf::int32 value);
  
  // optional int32 godScore = 30;
  inline bool has_godScore() const;
  inline void clear_godScore();
  static const int kGodScoreFieldNumber = 30;
  inline ::google::protobuf::int32 godScore() const;
  inline void set_godScore(::google::protobuf::int32 value);
  
  // optional int32 factionContribute = 31;
  inline bool has_factionContribute() const;
  inline void clear_factionContribute();
  static const int kFactionContributeFieldNumber = 31;
  inline ::google::protobuf::int32 factionContribute() const;
  inline void set_factionContribute(::google::protobuf::int32 value);
  
  // repeated .PB_ItemInfo decomposeItems = 32;
  inline int decomposeItems_size() const;
  inline void clear_decomposeItems();
  static const int kDecomposeItemsFieldNumber = 32;
  inline const ::PB_ItemInfo& decomposeItems(int index) const;
  inline ::PB_ItemInfo* mutable_decomposeItems(int index);
  inline ::PB_ItemInfo* add_decomposeItems();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
      decomposeItems() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
      mutable_decomposeItems();
  
  // optional int32 helpNode = 33;
  inline bool has_helpNode() const;
  inline void clear_helpNode();
  static const int kHelpNodeFieldNumber = 33;
  inline ::google::protobuf::int32 helpNode() const;
  inline void set_helpNode(::google::protobuf::int32 value);
  
  // optional int32 randomEffect = 34;
  inline bool has_randomEffect() const;
  inline void clear_randomEffect();
  static const int kRandomEffectFieldNumber = 34;
  inline ::google::protobuf::int32 randomEffect() const;
  inline void set_randomEffect(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:EquipmentInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_picture();
  inline void clear_has_picture();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_professionType();
  inline void clear_has_professionType();
  inline void set_has_requiredLevel();
  inline void clear_has_requiredLevel();
  inline void set_has_equipmentLevel();
  inline void clear_has_equipmentLevel();
  inline void set_has_isSell();
  inline void clear_has_isSell();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_colorType();
  inline void clear_has_colorType();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_effect1();
  inline void clear_has_effect1();
  inline void set_has_effect2();
  inline void clear_has_effect2();
  inline void set_has_stampCount();
  inline void clear_has_stampCount();
  inline void set_has_lovePoint();
  inline void clear_has_lovePoint();
  inline void set_has_pvpScore();
  inline void clear_has_pvpScore();
  inline void set_has_godScore();
  inline void clear_has_godScore();
  inline void set_has_factionContribute();
  inline void clear_has_factionContribute();
  inline void set_has_helpNode();
  inline void clear_has_helpNode();
  inline void set_has_randomEffect();
  inline void clear_has_randomEffect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 model_;
  ::std::string* desc_;
  ::google::protobuf::int32 picture_;
  ::google::protobuf::int32 professionType_;
  ::google::protobuf::int32 requiredLevel_;
  ::google::protobuf::int32 equipmentLevel_;
  ::google::protobuf::int64 price_;
  bool isSell_;
  int colorType_;
  ::google::protobuf::RepeatedField<int> baseType_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > baseDelta_;
  ::google::protobuf::int64 rmb_;
  ::google::protobuf::int32 effect1_;
  ::google::protobuf::int32 effect2_;
  ::google::protobuf::RepeatedField<int> enhanceType_;
  ::google::protobuf::int32 stampCount_;
  ::google::protobuf::int32 lovePoint_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enhanceLimit_;
  ::google::protobuf::int32 pvpScore_;
  ::google::protobuf::int32 godScore_;
  ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo > decomposeItems_;
  ::google::protobuf::int32 factionContribute_;
  ::google::protobuf::int32 helpNode_;
  ::google::protobuf::int32 randomEffect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static EquipmentInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllEquipments : public ::google::protobuf::Message {
 public:
  AllEquipments();
  virtual ~AllEquipments();
  
  AllEquipments(const AllEquipments& from);
  
  inline AllEquipments& operator=(const AllEquipments& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllEquipments& default_instance();
  
  void Swap(AllEquipments* other);
  
  // implements Message ----------------------------------------------
  
  AllEquipments* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllEquipments& from);
  void MergeFrom(const AllEquipments& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .EquipmentInfo equipments = 1;
  inline int equipments_size() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 1;
  inline const ::EquipmentInfo& equipments(int index) const;
  inline ::EquipmentInfo* mutable_equipments(int index);
  inline ::EquipmentInfo* add_equipments();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >&
      equipments() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >*
      mutable_equipments();
  
  // @@protoc_insertion_point(class_scope:AllEquipments)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::EquipmentInfo > equipments_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllEquipments* default_instance_;
};
// -------------------------------------------------------------------

class PB_EquipAsset : public ::google::protobuf::Message {
 public:
  PB_EquipAsset();
  virtual ~PB_EquipAsset();
  
  PB_EquipAsset(const PB_EquipAsset& from);
  
  inline PB_EquipAsset& operator=(const PB_EquipAsset& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_EquipAsset& default_instance();
  
  void Swap(PB_EquipAsset* other);
  
  // implements Message ----------------------------------------------
  
  PB_EquipAsset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_EquipAsset& from);
  void MergeFrom(const PB_EquipAsset& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 mode = 1 [default = -1];
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);
  
  // optional int32 strongLevel = 2;
  inline bool has_strongLevel() const;
  inline void clear_strongLevel();
  static const int kStrongLevelFieldNumber = 2;
  inline ::google::protobuf::int32 strongLevel() const;
  inline void set_strongLevel(::google::protobuf::int32 value);
  
  // repeated int32 gemModel = 3;
  inline int gemModel_size() const;
  inline void clear_gemModel();
  static const int kGemModelFieldNumber = 3;
  inline ::google::protobuf::int32 gemModel(int index) const;
  inline void set_gemModel(int index, ::google::protobuf::int32 value);
  inline void add_gemModel(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gemModel() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gemModel();
  
  // repeated int32 gemType = 4;
  inline int gemType_size() const;
  inline void clear_gemType();
  static const int kGemTypeFieldNumber = 4;
  inline ::google::protobuf::int32 gemType(int index) const;
  inline void set_gemType(int index, ::google::protobuf::int32 value);
  inline void add_gemType(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gemType() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gemType();
  
  // repeated int32 enhanceDelta = 5;
  inline int enhanceDelta_size() const;
  inline void clear_enhanceDelta();
  static const int kEnhanceDeltaFieldNumber = 5;
  inline ::google::protobuf::int32 enhanceDelta(int index) const;
  inline void set_enhanceDelta(int index, ::google::protobuf::int32 value);
  inline void add_enhanceDelta(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enhanceDelta() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enhanceDelta();
  
  // repeated int32 randomType = 6;
  inline int randomType_size() const;
  inline void clear_randomType();
  static const int kRandomTypeFieldNumber = 6;
  inline ::google::protobuf::int32 randomType(int index) const;
  inline void set_randomType(int index, ::google::protobuf::int32 value);
  inline void add_randomType(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      randomType() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_randomType();
  
  // repeated int32 randomDelta = 7;
  inline int randomDelta_size() const;
  inline void clear_randomDelta();
  static const int kRandomDeltaFieldNumber = 7;
  inline ::google::protobuf::int32 randomDelta(int index) const;
  inline void set_randomDelta(int index, ::google::protobuf::int32 value);
  inline void add_randomDelta(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      randomDelta() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_randomDelta();
  
  // optional int32 effectId = 8;
  inline bool has_effectId() const;
  inline void clear_effectId();
  static const int kEffectIdFieldNumber = 8;
  inline ::google::protobuf::int32 effectId() const;
  inline void set_effectId(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PB_EquipAsset)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_strongLevel();
  inline void clear_has_strongLevel();
  inline void set_has_effectId();
  inline void clear_has_effectId();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 strongLevel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gemModel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gemType_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enhanceDelta_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > randomType_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > randomDelta_;
  ::google::protobuf::int32 effectId_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_EquipAsset* default_instance_;
};
// -------------------------------------------------------------------

class EquipRecipe : public ::google::protobuf::Message {
 public:
  EquipRecipe();
  virtual ~EquipRecipe();
  
  EquipRecipe(const EquipRecipe& from);
  
  inline EquipRecipe& operator=(const EquipRecipe& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipRecipe& default_instance();
  
  void Swap(EquipRecipe* other);
  
  // implements Message ----------------------------------------------
  
  EquipRecipe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipRecipe& from);
  void MergeFrom(const EquipRecipe& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .EquipmentInfo.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::EquipmentInfo_Type type() const;
  inline void set_type(::EquipmentInfo_Type value);
  
  // repeated int32 materials = 3;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 3;
  inline ::google::protobuf::int32 materials(int index) const;
  inline void set_materials(int index, ::google::protobuf::int32 value);
  inline void add_materials(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      materials() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_materials();
  
  // repeated int32 nums = 4;
  inline int nums_size() const;
  inline void clear_nums();
  static const int kNumsFieldNumber = 4;
  inline ::google::protobuf::int32 nums(int index) const;
  inline void set_nums(int index, ::google::protobuf::int32 value);
  inline void add_nums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nums();
  
  // repeated int32 equipments = 5;
  inline int equipments_size() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 5;
  inline ::google::protobuf::int32 equipments(int index) const;
  inline void set_equipments(int index, ::google::protobuf::int32 value);
  inline void add_equipments(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      equipments() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_equipments();
  
  // @@protoc_insertion_point(class_scope:EquipRecipe)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  int type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > materials_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nums_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > equipments_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static EquipRecipe* default_instance_;
};
// -------------------------------------------------------------------

class AllEquipRecipes : public ::google::protobuf::Message {
 public:
  AllEquipRecipes();
  virtual ~AllEquipRecipes();
  
  AllEquipRecipes(const AllEquipRecipes& from);
  
  inline AllEquipRecipes& operator=(const AllEquipRecipes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllEquipRecipes& default_instance();
  
  void Swap(AllEquipRecipes* other);
  
  // implements Message ----------------------------------------------
  
  AllEquipRecipes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllEquipRecipes& from);
  void MergeFrom(const AllEquipRecipes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .EquipRecipe recipes = 1;
  inline int recipes_size() const;
  inline void clear_recipes();
  static const int kRecipesFieldNumber = 1;
  inline const ::EquipRecipe& recipes(int index) const;
  inline ::EquipRecipe* mutable_recipes(int index);
  inline ::EquipRecipe* add_recipes();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipRecipe >&
      recipes() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipRecipe >*
      mutable_recipes();
  
  // @@protoc_insertion_point(class_scope:AllEquipRecipes)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::EquipRecipe > recipes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllEquipRecipes* default_instance_;
};
// -------------------------------------------------------------------

class BaseWing : public ::google::protobuf::Message {
 public:
  BaseWing();
  virtual ~BaseWing();
  
  BaseWing(const BaseWing& from);
  
  inline BaseWing& operator=(const BaseWing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseWing& default_instance();
  
  void Swap(BaseWing* other);
  
  // implements Message ----------------------------------------------
  
  BaseWing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseWing& from);
  void MergeFrom(const BaseWing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BaseWing_ColorType ColorType;
  static const ColorType WHITE = BaseWing_ColorType_WHITE;
  static const ColorType GREEN = BaseWing_ColorType_GREEN;
  static const ColorType BLUE = BaseWing_ColorType_BLUE;
  static const ColorType YELLOW = BaseWing_ColorType_YELLOW;
  static const ColorType RED = BaseWing_ColorType_RED;
  static inline bool ColorType_IsValid(int value) {
    return BaseWing_ColorType_IsValid(value);
  }
  static const ColorType ColorType_MIN =
    BaseWing_ColorType_ColorType_MIN;
  static const ColorType ColorType_MAX =
    BaseWing_ColorType_ColorType_MAX;
  static const int ColorType_ARRAYSIZE =
    BaseWing_ColorType_ColorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColorType_descriptor() {
    return BaseWing_ColorType_descriptor();
  }
  static inline const ::std::string& ColorType_Name(ColorType value) {
    return BaseWing_ColorType_Name(value);
  }
  static inline bool ColorType_Parse(const ::std::string& name,
      ColorType* value) {
    return BaseWing_ColorType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated int32 model = 3;
  inline int model_size() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline ::google::protobuf::int32 model(int index) const;
  inline void set_model(int index, ::google::protobuf::int32 value);
  inline void add_model(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      model() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_model();
  
  // repeated int32 effect = 4;
  inline int effect_size() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 4;
  inline ::google::protobuf::int32 effect(int index) const;
  inline void set_effect(int index, ::google::protobuf::int32 value);
  inline void add_effect(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect();
  
  // optional string desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // optional int32 degree = 6;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 6;
  inline ::google::protobuf::int32 degree() const;
  inline void set_degree(::google::protobuf::int32 value);
  
  // repeated int32 att = 7;
  inline int att_size() const;
  inline void clear_att();
  static const int kAttFieldNumber = 7;
  inline ::google::protobuf::int32 att(int index) const;
  inline void set_att(int index, ::google::protobuf::int32 value);
  inline void add_att(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      att() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_att();
  
  // repeated int32 goods = 8;
  inline int goods_size() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 8;
  inline ::google::protobuf::int32 goods(int index) const;
  inline void set_goods(int index, ::google::protobuf::int32 value);
  inline void add_goods(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      goods() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_goods();
  
  // repeated int32 count = 9;
  inline int count_size() const;
  inline void clear_count();
  static const int kCountFieldNumber = 9;
  inline ::google::protobuf::int32 count(int index) const;
  inline void set_count(int index, ::google::protobuf::int32 value);
  inline void add_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_count();
  
  // optional int32 pic = 10;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 10;
  inline ::google::protobuf::int32 pic() const;
  inline void set_pic(::google::protobuf::int32 value);
  
  // optional .BaseWing.ColorType colorType = 11;
  inline bool has_colorType() const;
  inline void clear_colorType();
  static const int kColorTypeFieldNumber = 11;
  inline ::BaseWing_ColorType colorType() const;
  inline void set_colorType(::BaseWing_ColorType value);
  
  // optional float success = 12;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 12;
  inline float success() const;
  inline void set_success(float value);
  
  // @@protoc_insertion_point(class_scope:BaseWing)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_colorType();
  inline void clear_has_colorType();
  inline void set_has_success();
  inline void clear_has_success();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > model_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 degree_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_;
  ::std::string* desc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > att_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > goods_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > count_;
  ::google::protobuf::int32 pic_;
  int colorType_;
  float success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static BaseWing* default_instance_;
};
// -------------------------------------------------------------------

class AllBaseWings : public ::google::protobuf::Message {
 public:
  AllBaseWings();
  virtual ~AllBaseWings();
  
  AllBaseWings(const AllBaseWings& from);
  
  inline AllBaseWings& operator=(const AllBaseWings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllBaseWings& default_instance();
  
  void Swap(AllBaseWings* other);
  
  // implements Message ----------------------------------------------
  
  AllBaseWings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllBaseWings& from);
  void MergeFrom(const AllBaseWings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .BaseWing wings = 1;
  inline int wings_size() const;
  inline void clear_wings();
  static const int kWingsFieldNumber = 1;
  inline const ::BaseWing& wings(int index) const;
  inline ::BaseWing* mutable_wings(int index);
  inline ::BaseWing* add_wings();
  inline const ::google::protobuf::RepeatedPtrField< ::BaseWing >&
      wings() const;
  inline ::google::protobuf::RepeatedPtrField< ::BaseWing >*
      mutable_wings();
  
  // @@protoc_insertion_point(class_scope:AllBaseWings)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::BaseWing > wings_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllBaseWings* default_instance_;
};
// -------------------------------------------------------------------

class Wing : public ::google::protobuf::Message {
 public:
  Wing();
  virtual ~Wing();
  
  Wing(const Wing& from);
  
  inline Wing& operator=(const Wing& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Wing& default_instance();
  
  void Swap(Wing* other);
  
  // implements Message ----------------------------------------------
  
  Wing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wing& from);
  void MergeFrom(const Wing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Wing_ColorType ColorType;
  static const ColorType WHITE = Wing_ColorType_WHITE;
  static const ColorType GREEN = Wing_ColorType_GREEN;
  static const ColorType BLUE = Wing_ColorType_BLUE;
  static const ColorType YELLOW = Wing_ColorType_YELLOW;
  static const ColorType RED = Wing_ColorType_RED;
  static inline bool ColorType_IsValid(int value) {
    return Wing_ColorType_IsValid(value);
  }
  static const ColorType ColorType_MIN =
    Wing_ColorType_ColorType_MIN;
  static const ColorType ColorType_MAX =
    Wing_ColorType_ColorType_MAX;
  static const int ColorType_ARRAYSIZE =
    Wing_ColorType_ColorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColorType_descriptor() {
    return Wing_ColorType_descriptor();
  }
  static inline const ::std::string& ColorType_Name(ColorType value) {
    return Wing_ColorType_Name(value);
  }
  static inline bool ColorType_Parse(const ::std::string& name,
      ColorType* value) {
    return Wing_ColorType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated int32 model = 2;
  inline int model_size() const;
  inline void clear_model();
  static const int kModelFieldNumber = 2;
  inline ::google::protobuf::int32 model(int index) const;
  inline void set_model(int index, ::google::protobuf::int32 value);
  inline void add_model(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      model() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_model();
  
  // repeated int32 effect = 3;
  inline int effect_size() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 3;
  inline ::google::protobuf::int32 effect(int index) const;
  inline void set_effect(int index, ::google::protobuf::int32 value);
  inline void add_effect(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect();
  
  // repeated int32 att = 4;
  inline int att_size() const;
  inline void clear_att();
  static const int kAttFieldNumber = 4;
  inline ::google::protobuf::int32 att(int index) const;
  inline void set_att(int index, ::google::protobuf::int32 value);
  inline void add_att(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      att() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_att();
  
  // optional string desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // optional int32 pic = 6;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 6;
  inline ::google::protobuf::int32 pic() const;
  inline void set_pic(::google::protobuf::int32 value);
  
  // optional int32 rmb = 7;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 7;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);
  
  // optional .Wing.ColorType colorType = 8;
  inline bool has_colorType() const;
  inline void clear_colorType();
  static const int kColorTypeFieldNumber = 8;
  inline ::Wing_ColorType colorType() const;
  inline void set_colorType(::Wing_ColorType value);
  
  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 pvpScore = 10;
  inline bool has_pvpScore() const;
  inline void clear_pvpScore();
  static const int kPvpScoreFieldNumber = 10;
  inline ::google::protobuf::int32 pvpScore() const;
  inline void set_pvpScore(::google::protobuf::int32 value);
  
  // optional int32 lovePoint = 11;
  inline bool has_lovePoint() const;
  inline void clear_lovePoint();
  static const int kLovePointFieldNumber = 11;
  inline ::google::protobuf::int32 lovePoint() const;
  inline void set_lovePoint(::google::protobuf::int32 value);
  
  // optional int32 godScore = 12;
  inline bool has_godScore() const;
  inline void clear_godScore();
  static const int kGodScoreFieldNumber = 12;
  inline ::google::protobuf::int32 godScore() const;
  inline void set_godScore(::google::protobuf::int32 value);
  
  // optional int32 factionContribute = 13;
  inline bool has_factionContribute() const;
  inline void clear_factionContribute();
  static const int kFactionContributeFieldNumber = 13;
  inline ::google::protobuf::int32 factionContribute() const;
  inline void set_factionContribute(::google::protobuf::int32 value);
  
  // optional int32 helpNode = 14;
  inline bool has_helpNode() const;
  inline void clear_helpNode();
  static const int kHelpNodeFieldNumber = 14;
  inline ::google::protobuf::int32 helpNode() const;
  inline void set_helpNode(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Wing)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_colorType();
  inline void clear_has_colorType();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pvpScore();
  inline void clear_has_pvpScore();
  inline void set_has_lovePoint();
  inline void clear_has_lovePoint();
  inline void set_has_godScore();
  inline void clear_has_godScore();
  inline void set_has_factionContribute();
  inline void clear_has_factionContribute();
  inline void set_has_helpNode();
  inline void clear_has_helpNode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > model_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pic_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > att_;
  ::std::string* desc_;
  ::google::protobuf::int32 rmb_;
  int colorType_;
  ::std::string* name_;
  ::google::protobuf::int32 pvpScore_;
  ::google::protobuf::int32 lovePoint_;
  ::google::protobuf::int32 godScore_;
  ::google::protobuf::int32 factionContribute_;
  ::google::protobuf::int32 helpNode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static Wing* default_instance_;
};
// -------------------------------------------------------------------

class AllWings : public ::google::protobuf::Message {
 public:
  AllWings();
  virtual ~AllWings();
  
  AllWings(const AllWings& from);
  
  inline AllWings& operator=(const AllWings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllWings& default_instance();
  
  void Swap(AllWings* other);
  
  // implements Message ----------------------------------------------
  
  AllWings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllWings& from);
  void MergeFrom(const AllWings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Wing wings = 1;
  inline int wings_size() const;
  inline void clear_wings();
  static const int kWingsFieldNumber = 1;
  inline const ::Wing& wings(int index) const;
  inline ::Wing* mutable_wings(int index);
  inline ::Wing* add_wings();
  inline const ::google::protobuf::RepeatedPtrField< ::Wing >&
      wings() const;
  inline ::google::protobuf::RepeatedPtrField< ::Wing >*
      mutable_wings();
  
  // @@protoc_insertion_point(class_scope:AllWings)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Wing > wings_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllWings* default_instance_;
};
// -------------------------------------------------------------------

class PB_EquipmentAtt : public ::google::protobuf::Message {
 public:
  PB_EquipmentAtt();
  virtual ~PB_EquipmentAtt();
  
  PB_EquipmentAtt(const PB_EquipmentAtt& from);
  
  inline PB_EquipmentAtt& operator=(const PB_EquipmentAtt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_EquipmentAtt& default_instance();
  
  void Swap(PB_EquipmentAtt* other);
  
  // implements Message ----------------------------------------------
  
  PB_EquipmentAtt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_EquipmentAtt& from);
  void MergeFrom(const PB_EquipmentAtt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int64 equipments = 1;
  inline int equipments_size() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 1;
  inline ::google::protobuf::int64 equipments(int index) const;
  inline void set_equipments(int index, ::google::protobuf::int64 value);
  inline void add_equipments(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      equipments() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_equipments();
  
  // optional int32 wing = 3 [default = -1];
  inline bool has_wing() const;
  inline void clear_wing();
  static const int kWingFieldNumber = 3;
  inline ::google::protobuf::int32 wing() const;
  inline void set_wing(::google::protobuf::int32 value);
  
  // optional int32 fashion = 4 [default = -1];
  inline bool has_fashion() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 4;
  inline ::google::protobuf::int32 fashion() const;
  inline void set_fashion(::google::protobuf::int32 value);
  
  // optional bool baseWing = 5;
  inline bool has_baseWing() const;
  inline void clear_baseWing();
  static const int kBaseWingFieldNumber = 5;
  inline bool baseWing() const;
  inline void set_baseWing(bool value);
  
  // optional int32 rides = 6 [default = -1];
  inline bool has_rides() const;
  inline void clear_rides();
  static const int kRidesFieldNumber = 6;
  inline ::google::protobuf::int32 rides() const;
  inline void set_rides(::google::protobuf::int32 value);
  
  // repeated int32 godShips = 7;
  inline int godShips_size() const;
  inline void clear_godShips();
  static const int kGodShipsFieldNumber = 7;
  inline ::google::protobuf::int32 godShips(int index) const;
  inline void set_godShips(int index, ::google::protobuf::int32 value);
  inline void add_godShips(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      godShips() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_godShips();
  
  // @@protoc_insertion_point(class_scope:PB_EquipmentAtt)
 private:
  inline void set_has_wing();
  inline void clear_has_wing();
  inline void set_has_fashion();
  inline void clear_has_fashion();
  inline void set_has_baseWing();
  inline void clear_has_baseWing();
  inline void set_has_rides();
  inline void clear_has_rides();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > equipments_;
  ::google::protobuf::int32 wing_;
  ::google::protobuf::int32 fashion_;
  bool baseWing_;
  ::google::protobuf::int32 rides_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > godShips_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_EquipmentInfo_2eproto();
  friend void protobuf_AssignDesc_EquipmentInfo_2eproto();
  friend void protobuf_ShutdownFile_EquipmentInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_EquipmentAtt* default_instance_;
};
// ===================================================================


// ===================================================================

// EquipmentInfo

// optional int64 id = 1;
inline bool EquipmentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 EquipmentInfo::id() const {
  return id_;
}
inline void EquipmentInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional .EquipmentInfo.Type type = 2;
inline bool EquipmentInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::EquipmentInfo_Type EquipmentInfo::type() const {
  return static_cast< ::EquipmentInfo_Type >(type_);
}
inline void EquipmentInfo::set_type(::EquipmentInfo_Type value) {
  GOOGLE_DCHECK(::EquipmentInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string name = 3;
inline bool EquipmentInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EquipmentInfo::name() const {
  return *name_;
}
inline void EquipmentInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EquipmentInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EquipmentInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* EquipmentInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 model = 4;
inline bool EquipmentInfo::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentInfo::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentInfo::clear_model() {
  model_ = 0;
  clear_has_model();
}
inline ::google::protobuf::int32 EquipmentInfo::model() const {
  return model_;
}
inline void EquipmentInfo::set_model(::google::protobuf::int32 value) {
  set_has_model();
  model_ = value;
}

// optional int32 picture = 5;
inline bool EquipmentInfo::has_picture() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipmentInfo::set_has_picture() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipmentInfo::clear_has_picture() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipmentInfo::clear_picture() {
  picture_ = 0;
  clear_has_picture();
}
inline ::google::protobuf::int32 EquipmentInfo::picture() const {
  return picture_;
}
inline void EquipmentInfo::set_picture(::google::protobuf::int32 value) {
  set_has_picture();
  picture_ = value;
}

// optional string desc = 6;
inline bool EquipmentInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipmentInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipmentInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipmentInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& EquipmentInfo::desc() const {
  return *desc_;
}
inline void EquipmentInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void EquipmentInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void EquipmentInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* EquipmentInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 professionType = 7;
inline bool EquipmentInfo::has_professionType() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipmentInfo::set_has_professionType() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipmentInfo::clear_has_professionType() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipmentInfo::clear_professionType() {
  professionType_ = 0;
  clear_has_professionType();
}
inline ::google::protobuf::int32 EquipmentInfo::professionType() const {
  return professionType_;
}
inline void EquipmentInfo::set_professionType(::google::protobuf::int32 value) {
  set_has_professionType();
  professionType_ = value;
}

// optional int32 requiredLevel = 8;
inline bool EquipmentInfo::has_requiredLevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipmentInfo::set_has_requiredLevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipmentInfo::clear_has_requiredLevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipmentInfo::clear_requiredLevel() {
  requiredLevel_ = 0;
  clear_has_requiredLevel();
}
inline ::google::protobuf::int32 EquipmentInfo::requiredLevel() const {
  return requiredLevel_;
}
inline void EquipmentInfo::set_requiredLevel(::google::protobuf::int32 value) {
  set_has_requiredLevel();
  requiredLevel_ = value;
}

// optional int32 equipmentLevel = 9;
inline bool EquipmentInfo::has_equipmentLevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipmentInfo::set_has_equipmentLevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipmentInfo::clear_has_equipmentLevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipmentInfo::clear_equipmentLevel() {
  equipmentLevel_ = 0;
  clear_has_equipmentLevel();
}
inline ::google::protobuf::int32 EquipmentInfo::equipmentLevel() const {
  return equipmentLevel_;
}
inline void EquipmentInfo::set_equipmentLevel(::google::protobuf::int32 value) {
  set_has_equipmentLevel();
  equipmentLevel_ = value;
}

// optional bool isSell = 10;
inline bool EquipmentInfo::has_isSell() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipmentInfo::set_has_isSell() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipmentInfo::clear_has_isSell() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipmentInfo::clear_isSell() {
  isSell_ = false;
  clear_has_isSell();
}
inline bool EquipmentInfo::isSell() const {
  return isSell_;
}
inline void EquipmentInfo::set_isSell(bool value) {
  set_has_isSell();
  isSell_ = value;
}

// optional int64 price = 11;
inline bool EquipmentInfo::has_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipmentInfo::set_has_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipmentInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipmentInfo::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 EquipmentInfo::price() const {
  return price_;
}
inline void EquipmentInfo::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
}

// optional .EquipmentInfo.ColorType colorType = 12;
inline bool EquipmentInfo::has_colorType() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipmentInfo::set_has_colorType() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipmentInfo::clear_has_colorType() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipmentInfo::clear_colorType() {
  colorType_ = 0;
  clear_has_colorType();
}
inline ::EquipmentInfo_ColorType EquipmentInfo::colorType() const {
  return static_cast< ::EquipmentInfo_ColorType >(colorType_);
}
inline void EquipmentInfo::set_colorType(::EquipmentInfo_ColorType value) {
  GOOGLE_DCHECK(::EquipmentInfo_ColorType_IsValid(value));
  set_has_colorType();
  colorType_ = value;
}

// repeated .PB_FightAtt.PropertyType baseType = 13;
inline int EquipmentInfo::baseType_size() const {
  return baseType_.size();
}
inline void EquipmentInfo::clear_baseType() {
  baseType_.Clear();
}
inline ::PB_FightAtt_PropertyType EquipmentInfo::baseType(int index) const {
  return static_cast< ::PB_FightAtt_PropertyType >(baseType_.Get(index));
}
inline void EquipmentInfo::set_baseType(int index, ::PB_FightAtt_PropertyType value) {
  GOOGLE_DCHECK(::PB_FightAtt_PropertyType_IsValid(value));
  baseType_.Set(index, value);
}
inline void EquipmentInfo::add_baseType(::PB_FightAtt_PropertyType value) {
  GOOGLE_DCHECK(::PB_FightAtt_PropertyType_IsValid(value));
  baseType_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
EquipmentInfo::baseType() const {
  return baseType_;
}
inline ::google::protobuf::RepeatedField<int>*
EquipmentInfo::mutable_baseType() {
  return &baseType_;
}

// repeated int32 baseDelta = 14;
inline int EquipmentInfo::baseDelta_size() const {
  return baseDelta_.size();
}
inline void EquipmentInfo::clear_baseDelta() {
  baseDelta_.Clear();
}
inline ::google::protobuf::int32 EquipmentInfo::baseDelta(int index) const {
  return baseDelta_.Get(index);
}
inline void EquipmentInfo::set_baseDelta(int index, ::google::protobuf::int32 value) {
  baseDelta_.Set(index, value);
}
inline void EquipmentInfo::add_baseDelta(::google::protobuf::int32 value) {
  baseDelta_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipmentInfo::baseDelta() const {
  return baseDelta_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipmentInfo::mutable_baseDelta() {
  return &baseDelta_;
}

// optional int64 rmb = 21;
inline bool EquipmentInfo::has_rmb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EquipmentInfo::set_has_rmb() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EquipmentInfo::clear_has_rmb() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EquipmentInfo::clear_rmb() {
  rmb_ = GOOGLE_LONGLONG(0);
  clear_has_rmb();
}
inline ::google::protobuf::int64 EquipmentInfo::rmb() const {
  return rmb_;
}
inline void EquipmentInfo::set_rmb(::google::protobuf::int64 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional int32 effect1 = 22;
inline bool EquipmentInfo::has_effect1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EquipmentInfo::set_has_effect1() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EquipmentInfo::clear_has_effect1() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EquipmentInfo::clear_effect1() {
  effect1_ = 0;
  clear_has_effect1();
}
inline ::google::protobuf::int32 EquipmentInfo::effect1() const {
  return effect1_;
}
inline void EquipmentInfo::set_effect1(::google::protobuf::int32 value) {
  set_has_effect1();
  effect1_ = value;
}

// optional int32 effect2 = 23;
inline bool EquipmentInfo::has_effect2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EquipmentInfo::set_has_effect2() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EquipmentInfo::clear_has_effect2() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EquipmentInfo::clear_effect2() {
  effect2_ = 0;
  clear_has_effect2();
}
inline ::google::protobuf::int32 EquipmentInfo::effect2() const {
  return effect2_;
}
inline void EquipmentInfo::set_effect2(::google::protobuf::int32 value) {
  set_has_effect2();
  effect2_ = value;
}

// optional int32 stampCount = 24;
inline bool EquipmentInfo::has_stampCount() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EquipmentInfo::set_has_stampCount() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EquipmentInfo::clear_has_stampCount() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EquipmentInfo::clear_stampCount() {
  stampCount_ = 0;
  clear_has_stampCount();
}
inline ::google::protobuf::int32 EquipmentInfo::stampCount() const {
  return stampCount_;
}
inline void EquipmentInfo::set_stampCount(::google::protobuf::int32 value) {
  set_has_stampCount();
  stampCount_ = value;
}

// repeated .PB_FightAtt.PropertyType enhanceType = 25;
inline int EquipmentInfo::enhanceType_size() const {
  return enhanceType_.size();
}
inline void EquipmentInfo::clear_enhanceType() {
  enhanceType_.Clear();
}
inline ::PB_FightAtt_PropertyType EquipmentInfo::enhanceType(int index) const {
  return static_cast< ::PB_FightAtt_PropertyType >(enhanceType_.Get(index));
}
inline void EquipmentInfo::set_enhanceType(int index, ::PB_FightAtt_PropertyType value) {
  GOOGLE_DCHECK(::PB_FightAtt_PropertyType_IsValid(value));
  enhanceType_.Set(index, value);
}
inline void EquipmentInfo::add_enhanceType(::PB_FightAtt_PropertyType value) {
  GOOGLE_DCHECK(::PB_FightAtt_PropertyType_IsValid(value));
  enhanceType_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
EquipmentInfo::enhanceType() const {
  return enhanceType_;
}
inline ::google::protobuf::RepeatedField<int>*
EquipmentInfo::mutable_enhanceType() {
  return &enhanceType_;
}

// repeated int32 enhanceLimit = 27;
inline int EquipmentInfo::enhanceLimit_size() const {
  return enhanceLimit_.size();
}
inline void EquipmentInfo::clear_enhanceLimit() {
  enhanceLimit_.Clear();
}
inline ::google::protobuf::int32 EquipmentInfo::enhanceLimit(int index) const {
  return enhanceLimit_.Get(index);
}
inline void EquipmentInfo::set_enhanceLimit(int index, ::google::protobuf::int32 value) {
  enhanceLimit_.Set(index, value);
}
inline void EquipmentInfo::add_enhanceLimit(::google::protobuf::int32 value) {
  enhanceLimit_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipmentInfo::enhanceLimit() const {
  return enhanceLimit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipmentInfo::mutable_enhanceLimit() {
  return &enhanceLimit_;
}

// optional int32 lovePoint = 28;
inline bool EquipmentInfo::has_lovePoint() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EquipmentInfo::set_has_lovePoint() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EquipmentInfo::clear_has_lovePoint() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EquipmentInfo::clear_lovePoint() {
  lovePoint_ = 0;
  clear_has_lovePoint();
}
inline ::google::protobuf::int32 EquipmentInfo::lovePoint() const {
  return lovePoint_;
}
inline void EquipmentInfo::set_lovePoint(::google::protobuf::int32 value) {
  set_has_lovePoint();
  lovePoint_ = value;
}

// optional int32 pvpScore = 29;
inline bool EquipmentInfo::has_pvpScore() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void EquipmentInfo::set_has_pvpScore() {
  _has_bits_[0] |= 0x00200000u;
}
inline void EquipmentInfo::clear_has_pvpScore() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void EquipmentInfo::clear_pvpScore() {
  pvpScore_ = 0;
  clear_has_pvpScore();
}
inline ::google::protobuf::int32 EquipmentInfo::pvpScore() const {
  return pvpScore_;
}
inline void EquipmentInfo::set_pvpScore(::google::protobuf::int32 value) {
  set_has_pvpScore();
  pvpScore_ = value;
}

// optional int32 godScore = 30;
inline bool EquipmentInfo::has_godScore() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void EquipmentInfo::set_has_godScore() {
  _has_bits_[0] |= 0x00400000u;
}
inline void EquipmentInfo::clear_has_godScore() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void EquipmentInfo::clear_godScore() {
  godScore_ = 0;
  clear_has_godScore();
}
inline ::google::protobuf::int32 EquipmentInfo::godScore() const {
  return godScore_;
}
inline void EquipmentInfo::set_godScore(::google::protobuf::int32 value) {
  set_has_godScore();
  godScore_ = value;
}

// optional int32 factionContribute = 31;
inline bool EquipmentInfo::has_factionContribute() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void EquipmentInfo::set_has_factionContribute() {
  _has_bits_[0] |= 0x00800000u;
}
inline void EquipmentInfo::clear_has_factionContribute() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void EquipmentInfo::clear_factionContribute() {
  factionContribute_ = 0;
  clear_has_factionContribute();
}
inline ::google::protobuf::int32 EquipmentInfo::factionContribute() const {
  return factionContribute_;
}
inline void EquipmentInfo::set_factionContribute(::google::protobuf::int32 value) {
  set_has_factionContribute();
  factionContribute_ = value;
}

// repeated .PB_ItemInfo decomposeItems = 32;
inline int EquipmentInfo::decomposeItems_size() const {
  return decomposeItems_.size();
}
inline void EquipmentInfo::clear_decomposeItems() {
  decomposeItems_.Clear();
}
inline const ::PB_ItemInfo& EquipmentInfo::decomposeItems(int index) const {
  return decomposeItems_.Get(index);
}
inline ::PB_ItemInfo* EquipmentInfo::mutable_decomposeItems(int index) {
  return decomposeItems_.Mutable(index);
}
inline ::PB_ItemInfo* EquipmentInfo::add_decomposeItems() {
  return decomposeItems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >&
EquipmentInfo::decomposeItems() const {
  return decomposeItems_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_ItemInfo >*
EquipmentInfo::mutable_decomposeItems() {
  return &decomposeItems_;
}

// optional int32 helpNode = 33;
inline bool EquipmentInfo::has_helpNode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void EquipmentInfo::set_has_helpNode() {
  _has_bits_[0] |= 0x02000000u;
}
inline void EquipmentInfo::clear_has_helpNode() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void EquipmentInfo::clear_helpNode() {
  helpNode_ = 0;
  clear_has_helpNode();
}
inline ::google::protobuf::int32 EquipmentInfo::helpNode() const {
  return helpNode_;
}
inline void EquipmentInfo::set_helpNode(::google::protobuf::int32 value) {
  set_has_helpNode();
  helpNode_ = value;
}

// optional int32 randomEffect = 34;
inline bool EquipmentInfo::has_randomEffect() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void EquipmentInfo::set_has_randomEffect() {
  _has_bits_[0] |= 0x04000000u;
}
inline void EquipmentInfo::clear_has_randomEffect() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void EquipmentInfo::clear_randomEffect() {
  randomEffect_ = 0;
  clear_has_randomEffect();
}
inline ::google::protobuf::int32 EquipmentInfo::randomEffect() const {
  return randomEffect_;
}
inline void EquipmentInfo::set_randomEffect(::google::protobuf::int32 value) {
  set_has_randomEffect();
  randomEffect_ = value;
}

// -------------------------------------------------------------------

// AllEquipments

// repeated .EquipmentInfo equipments = 1;
inline int AllEquipments::equipments_size() const {
  return equipments_.size();
}
inline void AllEquipments::clear_equipments() {
  equipments_.Clear();
}
inline const ::EquipmentInfo& AllEquipments::equipments(int index) const {
  return equipments_.Get(index);
}
inline ::EquipmentInfo* AllEquipments::mutable_equipments(int index) {
  return equipments_.Mutable(index);
}
inline ::EquipmentInfo* AllEquipments::add_equipments() {
  return equipments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >&
AllEquipments::equipments() const {
  return equipments_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >*
AllEquipments::mutable_equipments() {
  return &equipments_;
}

// -------------------------------------------------------------------

// PB_EquipAsset

// optional int32 mode = 1 [default = -1];
inline bool PB_EquipAsset::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_EquipAsset::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_EquipAsset::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_EquipAsset::clear_mode() {
  mode_ = -1;
  clear_has_mode();
}
inline ::google::protobuf::int32 PB_EquipAsset::mode() const {
  return mode_;
}
inline void PB_EquipAsset::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional int32 strongLevel = 2;
inline bool PB_EquipAsset::has_strongLevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_EquipAsset::set_has_strongLevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_EquipAsset::clear_has_strongLevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_EquipAsset::clear_strongLevel() {
  strongLevel_ = 0;
  clear_has_strongLevel();
}
inline ::google::protobuf::int32 PB_EquipAsset::strongLevel() const {
  return strongLevel_;
}
inline void PB_EquipAsset::set_strongLevel(::google::protobuf::int32 value) {
  set_has_strongLevel();
  strongLevel_ = value;
}

// repeated int32 gemModel = 3;
inline int PB_EquipAsset::gemModel_size() const {
  return gemModel_.size();
}
inline void PB_EquipAsset::clear_gemModel() {
  gemModel_.Clear();
}
inline ::google::protobuf::int32 PB_EquipAsset::gemModel(int index) const {
  return gemModel_.Get(index);
}
inline void PB_EquipAsset::set_gemModel(int index, ::google::protobuf::int32 value) {
  gemModel_.Set(index, value);
}
inline void PB_EquipAsset::add_gemModel(::google::protobuf::int32 value) {
  gemModel_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_EquipAsset::gemModel() const {
  return gemModel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_EquipAsset::mutable_gemModel() {
  return &gemModel_;
}

// repeated int32 gemType = 4;
inline int PB_EquipAsset::gemType_size() const {
  return gemType_.size();
}
inline void PB_EquipAsset::clear_gemType() {
  gemType_.Clear();
}
inline ::google::protobuf::int32 PB_EquipAsset::gemType(int index) const {
  return gemType_.Get(index);
}
inline void PB_EquipAsset::set_gemType(int index, ::google::protobuf::int32 value) {
  gemType_.Set(index, value);
}
inline void PB_EquipAsset::add_gemType(::google::protobuf::int32 value) {
  gemType_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_EquipAsset::gemType() const {
  return gemType_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_EquipAsset::mutable_gemType() {
  return &gemType_;
}

// repeated int32 enhanceDelta = 5;
inline int PB_EquipAsset::enhanceDelta_size() const {
  return enhanceDelta_.size();
}
inline void PB_EquipAsset::clear_enhanceDelta() {
  enhanceDelta_.Clear();
}
inline ::google::protobuf::int32 PB_EquipAsset::enhanceDelta(int index) const {
  return enhanceDelta_.Get(index);
}
inline void PB_EquipAsset::set_enhanceDelta(int index, ::google::protobuf::int32 value) {
  enhanceDelta_.Set(index, value);
}
inline void PB_EquipAsset::add_enhanceDelta(::google::protobuf::int32 value) {
  enhanceDelta_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_EquipAsset::enhanceDelta() const {
  return enhanceDelta_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_EquipAsset::mutable_enhanceDelta() {
  return &enhanceDelta_;
}

// repeated int32 randomType = 6;
inline int PB_EquipAsset::randomType_size() const {
  return randomType_.size();
}
inline void PB_EquipAsset::clear_randomType() {
  randomType_.Clear();
}
inline ::google::protobuf::int32 PB_EquipAsset::randomType(int index) const {
  return randomType_.Get(index);
}
inline void PB_EquipAsset::set_randomType(int index, ::google::protobuf::int32 value) {
  randomType_.Set(index, value);
}
inline void PB_EquipAsset::add_randomType(::google::protobuf::int32 value) {
  randomType_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_EquipAsset::randomType() const {
  return randomType_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_EquipAsset::mutable_randomType() {
  return &randomType_;
}

// repeated int32 randomDelta = 7;
inline int PB_EquipAsset::randomDelta_size() const {
  return randomDelta_.size();
}
inline void PB_EquipAsset::clear_randomDelta() {
  randomDelta_.Clear();
}
inline ::google::protobuf::int32 PB_EquipAsset::randomDelta(int index) const {
  return randomDelta_.Get(index);
}
inline void PB_EquipAsset::set_randomDelta(int index, ::google::protobuf::int32 value) {
  randomDelta_.Set(index, value);
}
inline void PB_EquipAsset::add_randomDelta(::google::protobuf::int32 value) {
  randomDelta_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_EquipAsset::randomDelta() const {
  return randomDelta_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_EquipAsset::mutable_randomDelta() {
  return &randomDelta_;
}

// optional int32 effectId = 8;
inline bool PB_EquipAsset::has_effectId() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_EquipAsset::set_has_effectId() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_EquipAsset::clear_has_effectId() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_EquipAsset::clear_effectId() {
  effectId_ = 0;
  clear_has_effectId();
}
inline ::google::protobuf::int32 PB_EquipAsset::effectId() const {
  return effectId_;
}
inline void PB_EquipAsset::set_effectId(::google::protobuf::int32 value) {
  set_has_effectId();
  effectId_ = value;
}

// -------------------------------------------------------------------

// EquipRecipe

// optional int32 id = 1;
inline bool EquipRecipe::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipRecipe::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipRecipe::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipRecipe::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EquipRecipe::id() const {
  return id_;
}
inline void EquipRecipe::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .EquipmentInfo.Type type = 2;
inline bool EquipRecipe::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipRecipe::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipRecipe::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipRecipe::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::EquipmentInfo_Type EquipRecipe::type() const {
  return static_cast< ::EquipmentInfo_Type >(type_);
}
inline void EquipRecipe::set_type(::EquipmentInfo_Type value) {
  GOOGLE_DCHECK(::EquipmentInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated int32 materials = 3;
inline int EquipRecipe::materials_size() const {
  return materials_.size();
}
inline void EquipRecipe::clear_materials() {
  materials_.Clear();
}
inline ::google::protobuf::int32 EquipRecipe::materials(int index) const {
  return materials_.Get(index);
}
inline void EquipRecipe::set_materials(int index, ::google::protobuf::int32 value) {
  materials_.Set(index, value);
}
inline void EquipRecipe::add_materials(::google::protobuf::int32 value) {
  materials_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipRecipe::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipRecipe::mutable_materials() {
  return &materials_;
}

// repeated int32 nums = 4;
inline int EquipRecipe::nums_size() const {
  return nums_.size();
}
inline void EquipRecipe::clear_nums() {
  nums_.Clear();
}
inline ::google::protobuf::int32 EquipRecipe::nums(int index) const {
  return nums_.Get(index);
}
inline void EquipRecipe::set_nums(int index, ::google::protobuf::int32 value) {
  nums_.Set(index, value);
}
inline void EquipRecipe::add_nums(::google::protobuf::int32 value) {
  nums_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipRecipe::nums() const {
  return nums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipRecipe::mutable_nums() {
  return &nums_;
}

// repeated int32 equipments = 5;
inline int EquipRecipe::equipments_size() const {
  return equipments_.size();
}
inline void EquipRecipe::clear_equipments() {
  equipments_.Clear();
}
inline ::google::protobuf::int32 EquipRecipe::equipments(int index) const {
  return equipments_.Get(index);
}
inline void EquipRecipe::set_equipments(int index, ::google::protobuf::int32 value) {
  equipments_.Set(index, value);
}
inline void EquipRecipe::add_equipments(::google::protobuf::int32 value) {
  equipments_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipRecipe::equipments() const {
  return equipments_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipRecipe::mutable_equipments() {
  return &equipments_;
}

// -------------------------------------------------------------------

// AllEquipRecipes

// repeated .EquipRecipe recipes = 1;
inline int AllEquipRecipes::recipes_size() const {
  return recipes_.size();
}
inline void AllEquipRecipes::clear_recipes() {
  recipes_.Clear();
}
inline const ::EquipRecipe& AllEquipRecipes::recipes(int index) const {
  return recipes_.Get(index);
}
inline ::EquipRecipe* AllEquipRecipes::mutable_recipes(int index) {
  return recipes_.Mutable(index);
}
inline ::EquipRecipe* AllEquipRecipes::add_recipes() {
  return recipes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipRecipe >&
AllEquipRecipes::recipes() const {
  return recipes_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipRecipe >*
AllEquipRecipes::mutable_recipes() {
  return &recipes_;
}

// -------------------------------------------------------------------

// BaseWing

// optional int32 level = 1;
inline bool BaseWing::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseWing::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseWing::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseWing::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BaseWing::level() const {
  return level_;
}
inline void BaseWing::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string name = 2;
inline bool BaseWing::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseWing::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseWing::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseWing::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BaseWing::name() const {
  return *name_;
}
inline void BaseWing::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BaseWing::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BaseWing::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseWing::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BaseWing::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 model = 3;
inline int BaseWing::model_size() const {
  return model_.size();
}
inline void BaseWing::clear_model() {
  model_.Clear();
}
inline ::google::protobuf::int32 BaseWing::model(int index) const {
  return model_.Get(index);
}
inline void BaseWing::set_model(int index, ::google::protobuf::int32 value) {
  model_.Set(index, value);
}
inline void BaseWing::add_model(::google::protobuf::int32 value) {
  model_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BaseWing::model() const {
  return model_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BaseWing::mutable_model() {
  return &model_;
}

// repeated int32 effect = 4;
inline int BaseWing::effect_size() const {
  return effect_.size();
}
inline void BaseWing::clear_effect() {
  effect_.Clear();
}
inline ::google::protobuf::int32 BaseWing::effect(int index) const {
  return effect_.Get(index);
}
inline void BaseWing::set_effect(int index, ::google::protobuf::int32 value) {
  effect_.Set(index, value);
}
inline void BaseWing::add_effect(::google::protobuf::int32 value) {
  effect_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BaseWing::effect() const {
  return effect_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BaseWing::mutable_effect() {
  return &effect_;
}

// optional string desc = 5;
inline bool BaseWing::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseWing::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseWing::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseWing::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& BaseWing::desc() const {
  return *desc_;
}
inline void BaseWing::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void BaseWing::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void BaseWing::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseWing::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* BaseWing::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 degree = 6;
inline bool BaseWing::has_degree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseWing::set_has_degree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseWing::clear_has_degree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseWing::clear_degree() {
  degree_ = 0;
  clear_has_degree();
}
inline ::google::protobuf::int32 BaseWing::degree() const {
  return degree_;
}
inline void BaseWing::set_degree(::google::protobuf::int32 value) {
  set_has_degree();
  degree_ = value;
}

// repeated int32 att = 7;
inline int BaseWing::att_size() const {
  return att_.size();
}
inline void BaseWing::clear_att() {
  att_.Clear();
}
inline ::google::protobuf::int32 BaseWing::att(int index) const {
  return att_.Get(index);
}
inline void BaseWing::set_att(int index, ::google::protobuf::int32 value) {
  att_.Set(index, value);
}
inline void BaseWing::add_att(::google::protobuf::int32 value) {
  att_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BaseWing::att() const {
  return att_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BaseWing::mutable_att() {
  return &att_;
}

// repeated int32 goods = 8;
inline int BaseWing::goods_size() const {
  return goods_.size();
}
inline void BaseWing::clear_goods() {
  goods_.Clear();
}
inline ::google::protobuf::int32 BaseWing::goods(int index) const {
  return goods_.Get(index);
}
inline void BaseWing::set_goods(int index, ::google::protobuf::int32 value) {
  goods_.Set(index, value);
}
inline void BaseWing::add_goods(::google::protobuf::int32 value) {
  goods_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BaseWing::goods() const {
  return goods_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BaseWing::mutable_goods() {
  return &goods_;
}

// repeated int32 count = 9;
inline int BaseWing::count_size() const {
  return count_.size();
}
inline void BaseWing::clear_count() {
  count_.Clear();
}
inline ::google::protobuf::int32 BaseWing::count(int index) const {
  return count_.Get(index);
}
inline void BaseWing::set_count(int index, ::google::protobuf::int32 value) {
  count_.Set(index, value);
}
inline void BaseWing::add_count(::google::protobuf::int32 value) {
  count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BaseWing::count() const {
  return count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BaseWing::mutable_count() {
  return &count_;
}

// optional int32 pic = 10;
inline bool BaseWing::has_pic() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BaseWing::set_has_pic() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BaseWing::clear_has_pic() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BaseWing::clear_pic() {
  pic_ = 0;
  clear_has_pic();
}
inline ::google::protobuf::int32 BaseWing::pic() const {
  return pic_;
}
inline void BaseWing::set_pic(::google::protobuf::int32 value) {
  set_has_pic();
  pic_ = value;
}

// optional .BaseWing.ColorType colorType = 11;
inline bool BaseWing::has_colorType() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BaseWing::set_has_colorType() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BaseWing::clear_has_colorType() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BaseWing::clear_colorType() {
  colorType_ = 0;
  clear_has_colorType();
}
inline ::BaseWing_ColorType BaseWing::colorType() const {
  return static_cast< ::BaseWing_ColorType >(colorType_);
}
inline void BaseWing::set_colorType(::BaseWing_ColorType value) {
  GOOGLE_DCHECK(::BaseWing_ColorType_IsValid(value));
  set_has_colorType();
  colorType_ = value;
}

// optional float success = 12;
inline bool BaseWing::has_success() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BaseWing::set_has_success() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BaseWing::clear_has_success() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BaseWing::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline float BaseWing::success() const {
  return success_;
}
inline void BaseWing::set_success(float value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// AllBaseWings

// repeated .BaseWing wings = 1;
inline int AllBaseWings::wings_size() const {
  return wings_.size();
}
inline void AllBaseWings::clear_wings() {
  wings_.Clear();
}
inline const ::BaseWing& AllBaseWings::wings(int index) const {
  return wings_.Get(index);
}
inline ::BaseWing* AllBaseWings::mutable_wings(int index) {
  return wings_.Mutable(index);
}
inline ::BaseWing* AllBaseWings::add_wings() {
  return wings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BaseWing >&
AllBaseWings::wings() const {
  return wings_;
}
inline ::google::protobuf::RepeatedPtrField< ::BaseWing >*
AllBaseWings::mutable_wings() {
  return &wings_;
}

// -------------------------------------------------------------------

// Wing

// optional int32 id = 1;
inline bool Wing::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wing::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wing::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wing::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Wing::id() const {
  return id_;
}
inline void Wing::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 model = 2;
inline int Wing::model_size() const {
  return model_.size();
}
inline void Wing::clear_model() {
  model_.Clear();
}
inline ::google::protobuf::int32 Wing::model(int index) const {
  return model_.Get(index);
}
inline void Wing::set_model(int index, ::google::protobuf::int32 value) {
  model_.Set(index, value);
}
inline void Wing::add_model(::google::protobuf::int32 value) {
  model_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Wing::model() const {
  return model_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Wing::mutable_model() {
  return &model_;
}

// repeated int32 effect = 3;
inline int Wing::effect_size() const {
  return effect_.size();
}
inline void Wing::clear_effect() {
  effect_.Clear();
}
inline ::google::protobuf::int32 Wing::effect(int index) const {
  return effect_.Get(index);
}
inline void Wing::set_effect(int index, ::google::protobuf::int32 value) {
  effect_.Set(index, value);
}
inline void Wing::add_effect(::google::protobuf::int32 value) {
  effect_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Wing::effect() const {
  return effect_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Wing::mutable_effect() {
  return &effect_;
}

// repeated int32 att = 4;
inline int Wing::att_size() const {
  return att_.size();
}
inline void Wing::clear_att() {
  att_.Clear();
}
inline ::google::protobuf::int32 Wing::att(int index) const {
  return att_.Get(index);
}
inline void Wing::set_att(int index, ::google::protobuf::int32 value) {
  att_.Set(index, value);
}
inline void Wing::add_att(::google::protobuf::int32 value) {
  att_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Wing::att() const {
  return att_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Wing::mutable_att() {
  return &att_;
}

// optional string desc = 5;
inline bool Wing::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Wing::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Wing::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Wing::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& Wing::desc() const {
  return *desc_;
}
inline void Wing::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Wing::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Wing::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Wing::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* Wing::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pic = 6;
inline bool Wing::has_pic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Wing::set_has_pic() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Wing::clear_has_pic() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Wing::clear_pic() {
  pic_ = 0;
  clear_has_pic();
}
inline ::google::protobuf::int32 Wing::pic() const {
  return pic_;
}
inline void Wing::set_pic(::google::protobuf::int32 value) {
  set_has_pic();
  pic_ = value;
}

// optional int32 rmb = 7;
inline bool Wing::has_rmb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Wing::set_has_rmb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Wing::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Wing::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 Wing::rmb() const {
  return rmb_;
}
inline void Wing::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional .Wing.ColorType colorType = 8;
inline bool Wing::has_colorType() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Wing::set_has_colorType() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Wing::clear_has_colorType() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Wing::clear_colorType() {
  colorType_ = 0;
  clear_has_colorType();
}
inline ::Wing_ColorType Wing::colorType() const {
  return static_cast< ::Wing_ColorType >(colorType_);
}
inline void Wing::set_colorType(::Wing_ColorType value) {
  GOOGLE_DCHECK(::Wing_ColorType_IsValid(value));
  set_has_colorType();
  colorType_ = value;
}

// optional string name = 9;
inline bool Wing::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Wing::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Wing::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Wing::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Wing::name() const {
  return *name_;
}
inline void Wing::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Wing::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Wing::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Wing::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Wing::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pvpScore = 10;
inline bool Wing::has_pvpScore() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Wing::set_has_pvpScore() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Wing::clear_has_pvpScore() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Wing::clear_pvpScore() {
  pvpScore_ = 0;
  clear_has_pvpScore();
}
inline ::google::protobuf::int32 Wing::pvpScore() const {
  return pvpScore_;
}
inline void Wing::set_pvpScore(::google::protobuf::int32 value) {
  set_has_pvpScore();
  pvpScore_ = value;
}

// optional int32 lovePoint = 11;
inline bool Wing::has_lovePoint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Wing::set_has_lovePoint() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Wing::clear_has_lovePoint() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Wing::clear_lovePoint() {
  lovePoint_ = 0;
  clear_has_lovePoint();
}
inline ::google::protobuf::int32 Wing::lovePoint() const {
  return lovePoint_;
}
inline void Wing::set_lovePoint(::google::protobuf::int32 value) {
  set_has_lovePoint();
  lovePoint_ = value;
}

// optional int32 godScore = 12;
inline bool Wing::has_godScore() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Wing::set_has_godScore() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Wing::clear_has_godScore() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Wing::clear_godScore() {
  godScore_ = 0;
  clear_has_godScore();
}
inline ::google::protobuf::int32 Wing::godScore() const {
  return godScore_;
}
inline void Wing::set_godScore(::google::protobuf::int32 value) {
  set_has_godScore();
  godScore_ = value;
}

// optional int32 factionContribute = 13;
inline bool Wing::has_factionContribute() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Wing::set_has_factionContribute() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Wing::clear_has_factionContribute() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Wing::clear_factionContribute() {
  factionContribute_ = 0;
  clear_has_factionContribute();
}
inline ::google::protobuf::int32 Wing::factionContribute() const {
  return factionContribute_;
}
inline void Wing::set_factionContribute(::google::protobuf::int32 value) {
  set_has_factionContribute();
  factionContribute_ = value;
}

// optional int32 helpNode = 14;
inline bool Wing::has_helpNode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Wing::set_has_helpNode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Wing::clear_has_helpNode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Wing::clear_helpNode() {
  helpNode_ = 0;
  clear_has_helpNode();
}
inline ::google::protobuf::int32 Wing::helpNode() const {
  return helpNode_;
}
inline void Wing::set_helpNode(::google::protobuf::int32 value) {
  set_has_helpNode();
  helpNode_ = value;
}

// -------------------------------------------------------------------

// AllWings

// repeated .Wing wings = 1;
inline int AllWings::wings_size() const {
  return wings_.size();
}
inline void AllWings::clear_wings() {
  wings_.Clear();
}
inline const ::Wing& AllWings::wings(int index) const {
  return wings_.Get(index);
}
inline ::Wing* AllWings::mutable_wings(int index) {
  return wings_.Mutable(index);
}
inline ::Wing* AllWings::add_wings() {
  return wings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Wing >&
AllWings::wings() const {
  return wings_;
}
inline ::google::protobuf::RepeatedPtrField< ::Wing >*
AllWings::mutable_wings() {
  return &wings_;
}

// -------------------------------------------------------------------

// PB_EquipmentAtt

// repeated int64 equipments = 1;
inline int PB_EquipmentAtt::equipments_size() const {
  return equipments_.size();
}
inline void PB_EquipmentAtt::clear_equipments() {
  equipments_.Clear();
}
inline ::google::protobuf::int64 PB_EquipmentAtt::equipments(int index) const {
  return equipments_.Get(index);
}
inline void PB_EquipmentAtt::set_equipments(int index, ::google::protobuf::int64 value) {
  equipments_.Set(index, value);
}
inline void PB_EquipmentAtt::add_equipments(::google::protobuf::int64 value) {
  equipments_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PB_EquipmentAtt::equipments() const {
  return equipments_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PB_EquipmentAtt::mutable_equipments() {
  return &equipments_;
}

// optional int32 wing = 3 [default = -1];
inline bool PB_EquipmentAtt::has_wing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_EquipmentAtt::set_has_wing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_EquipmentAtt::clear_has_wing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_EquipmentAtt::clear_wing() {
  wing_ = -1;
  clear_has_wing();
}
inline ::google::protobuf::int32 PB_EquipmentAtt::wing() const {
  return wing_;
}
inline void PB_EquipmentAtt::set_wing(::google::protobuf::int32 value) {
  set_has_wing();
  wing_ = value;
}

// optional int32 fashion = 4 [default = -1];
inline bool PB_EquipmentAtt::has_fashion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_EquipmentAtt::set_has_fashion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_EquipmentAtt::clear_has_fashion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_EquipmentAtt::clear_fashion() {
  fashion_ = -1;
  clear_has_fashion();
}
inline ::google::protobuf::int32 PB_EquipmentAtt::fashion() const {
  return fashion_;
}
inline void PB_EquipmentAtt::set_fashion(::google::protobuf::int32 value) {
  set_has_fashion();
  fashion_ = value;
}

// optional bool baseWing = 5;
inline bool PB_EquipmentAtt::has_baseWing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_EquipmentAtt::set_has_baseWing() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_EquipmentAtt::clear_has_baseWing() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_EquipmentAtt::clear_baseWing() {
  baseWing_ = false;
  clear_has_baseWing();
}
inline bool PB_EquipmentAtt::baseWing() const {
  return baseWing_;
}
inline void PB_EquipmentAtt::set_baseWing(bool value) {
  set_has_baseWing();
  baseWing_ = value;
}

// optional int32 rides = 6 [default = -1];
inline bool PB_EquipmentAtt::has_rides() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_EquipmentAtt::set_has_rides() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_EquipmentAtt::clear_has_rides() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_EquipmentAtt::clear_rides() {
  rides_ = -1;
  clear_has_rides();
}
inline ::google::protobuf::int32 PB_EquipmentAtt::rides() const {
  return rides_;
}
inline void PB_EquipmentAtt::set_rides(::google::protobuf::int32 value) {
  set_has_rides();
  rides_ = value;
}

// repeated int32 godShips = 7;
inline int PB_EquipmentAtt::godShips_size() const {
  return godShips_.size();
}
inline void PB_EquipmentAtt::clear_godShips() {
  godShips_.Clear();
}
inline ::google::protobuf::int32 PB_EquipmentAtt::godShips(int index) const {
  return godShips_.Get(index);
}
inline void PB_EquipmentAtt::set_godShips(int index, ::google::protobuf::int32 value) {
  godShips_.Set(index, value);
}
inline void PB_EquipmentAtt::add_godShips(::google::protobuf::int32 value) {
  godShips_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_EquipmentAtt::godShips() const {
  return godShips_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_EquipmentAtt::mutable_godShips() {
  return &godShips_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EquipmentInfo_Type>() {
  return ::EquipmentInfo_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EquipmentInfo_ColorType>() {
  return ::EquipmentInfo_ColorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BaseWing_ColorType>() {
  return ::BaseWing_ColorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Wing_ColorType>() {
  return ::Wing_ColorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EquipmentInfo_2eproto__INCLUDED

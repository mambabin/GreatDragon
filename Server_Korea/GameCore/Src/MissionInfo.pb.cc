// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MissionInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MissionContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionOpen_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionOpen_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MissionTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionTarget_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionTarget_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MissionAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionAward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionAward_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MissionPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionPort_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionPort_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MissionTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionTrack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionTrack_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllMissions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllMissions_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_MissionTargetRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_MissionTargetRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_MissionRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_MissionRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_MissionAllRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_MissionAllRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MissionInfo_2eproto() {
  protobuf_AddDesc_MissionInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MissionInfo.proto");
  GOOGLE_CHECK(file != NULL);
  MissionContent_descriptor_ = file->message_type(0);
  static const int MissionContent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionContent, mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionContent, accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionContent, reject_),
  };
  MissionContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionContent_descriptor_,
      MissionContent::default_instance_,
      MissionContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionContent));
  MissionArg_descriptor_ = file->message_type(1);
  static const int MissionArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionArg, arg_),
  };
  MissionArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionArg_descriptor_,
      MissionArg::default_instance_,
      MissionArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionArg));
  MissionOpen_descriptor_ = file->message_type(2);
  static const int MissionOpen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionOpen, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionOpen, arg_),
  };
  MissionOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionOpen_descriptor_,
      MissionOpen::default_instance_,
      MissionOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionOpen));
  MissionOpen_Type_descriptor_ = MissionOpen_descriptor_->enum_type(0);
  MissionTarget_descriptor_ = file->message_type(3);
  static const int MissionTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionTarget, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionTarget, arg_),
  };
  MissionTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionTarget_descriptor_,
      MissionTarget::default_instance_,
      MissionTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionTarget));
  MissionTarget_Type_descriptor_ = MissionTarget_descriptor_->enum_type(0);
  MissionAward_descriptor_ = file->message_type(4);
  static const int MissionAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAward, arg_),
  };
  MissionAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionAward_descriptor_,
      MissionAward::default_instance_,
      MissionAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionAward));
  MissionAward_Type_descriptor_ = MissionAward_descriptor_->enum_type(0);
  MissionPort_descriptor_ = file->message_type(5);
  static const int MissionPort_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionPort, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionPort, arg_),
  };
  MissionPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionPort_descriptor_,
      MissionPort::default_instance_,
      MissionPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionPort));
  MissionPort_Type_descriptor_ = MissionPort_descriptor_->enum_type(0);
  MissionTrack_descriptor_ = file->message_type(6);
  static const int MissionTrack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionTrack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionTrack, arg_),
  };
  MissionTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionTrack_descriptor_,
      MissionTrack::default_instance_,
      MissionTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionTrack));
  MissionTrack_Type_descriptor_ = MissionTrack_descriptor_->enum_type(0);
  MissionInfo_descriptor_ = file->message_type(7);
  static const int MissionInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, inContent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, maxCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, groupID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, completeDesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, outContent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, targetTrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, outTrack_),
  };
  MissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionInfo_descriptor_,
      MissionInfo::default_instance_,
      MissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionInfo));
  MissionInfo_Type_descriptor_ = MissionInfo_descriptor_->enum_type(0);
  AllMissions_descriptor_ = file->message_type(8);
  static const int AllMissions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMissions, missions_),
  };
  AllMissions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllMissions_descriptor_,
      AllMissions::default_instance_,
      AllMissions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMissions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMissions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllMissions));
  PB_MissionTargetRecord_descriptor_ = file->message_type(9);
  static const int PB_MissionTargetRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionTargetRecord, arg_),
  };
  PB_MissionTargetRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_MissionTargetRecord_descriptor_,
      PB_MissionTargetRecord::default_instance_,
      PB_MissionTargetRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionTargetRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionTargetRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_MissionTargetRecord));
  PB_MissionRecord_descriptor_ = file->message_type(10);
  static const int PB_MissionRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionRecord, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionRecord, target_),
  };
  PB_MissionRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_MissionRecord_descriptor_,
      PB_MissionRecord::default_instance_,
      PB_MissionRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_MissionRecord));
  PB_MissionAllRecord_descriptor_ = file->message_type(11);
  static const int PB_MissionAllRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionAllRecord, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionAllRecord, cur_),
  };
  PB_MissionAllRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_MissionAllRecord_descriptor_,
      PB_MissionAllRecord::default_instance_,
      PB_MissionAllRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionAllRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_MissionAllRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_MissionAllRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MissionInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionContent_descriptor_, &MissionContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionArg_descriptor_, &MissionArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionOpen_descriptor_, &MissionOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionTarget_descriptor_, &MissionTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionAward_descriptor_, &MissionAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionPort_descriptor_, &MissionPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionTrack_descriptor_, &MissionTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionInfo_descriptor_, &MissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllMissions_descriptor_, &AllMissions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_MissionTargetRecord_descriptor_, &PB_MissionTargetRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_MissionRecord_descriptor_, &PB_MissionRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_MissionAllRecord_descriptor_, &PB_MissionAllRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MissionInfo_2eproto() {
  delete MissionContent::default_instance_;
  delete MissionContent_reflection_;
  delete MissionArg::default_instance_;
  delete MissionArg_reflection_;
  delete MissionOpen::default_instance_;
  delete MissionOpen_reflection_;
  delete MissionTarget::default_instance_;
  delete MissionTarget_reflection_;
  delete MissionAward::default_instance_;
  delete MissionAward_reflection_;
  delete MissionPort::default_instance_;
  delete MissionPort_reflection_;
  delete MissionTrack::default_instance_;
  delete MissionTrack_reflection_;
  delete MissionInfo::default_instance_;
  delete MissionInfo_reflection_;
  delete AllMissions::default_instance_;
  delete AllMissions_reflection_;
  delete PB_MissionTargetRecord::default_instance_;
  delete PB_MissionTargetRecord_reflection_;
  delete PB_MissionRecord::default_instance_;
  delete PB_MissionRecord_reflection_;
  delete PB_MissionAllRecord::default_instance_;
  delete PB_MissionAllRecord_reflection_;
}

void protobuf_AddDesc_MissionInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MissionInfo.proto\"A\n\016MissionContent\022\017\n"
    "\007mission\030\001 \003(\t\022\016\n\006accept\030\002 \001(\t\022\016\n\006reject"
    "\030\003 \001(\t\"\031\n\nMissionArg\022\013\n\003arg\030\001 \003(\005\"\260\001\n\013Mi"
    "ssionOpen\022\037\n\004type\030\001 \003(\0162\021.MissionOpen.Ty"
    "pe\022\030\n\003arg\030\002 \003(\0132\013.MissionArg\"f\n\004Type\022\010\n\004"
    "NONE\020\000\022\t\n\005LEVEL\020\001\022\024\n\020COMPLETE_MISSION\020\002\022"
    "\014\n\010HASGOODS\020\003\022\021\n\rAPPLY_MISSION\020\004\022\022\n\016OPEN"
    "SERVERDATE\020\005\"\312\005\n\rMissionTarget\022!\n\004type\030\001"
    " \003(\0162\023.MissionTarget.Type\022\030\n\003arg\030\002 \003(\0132\013"
    ".MissionArg\"\373\004\n\004Type\022\010\n\004NONE\020\000\022\013\n\007KILLNP"
    "C\020\001\022\010\n\004TALK\020\002\022\014\n\010GETGOODS\020\003\022\016\n\nCLEAR_ROO"
    "M\020\004\022\022\n\016CLEAR_ONLYROOM\020\005\022\017\n\013CLEAR_TOWER\020\006"
    "\022\021\n\rCLEAR_SURVIVE\020\007\022\016\n\nCLEAR_HERO\020\010\022\n\n\006S"
    "TRONG\020\n\022\024\n\020UNLOCK_BLOODNODE\020\014\022\007\n\003PVP\020\016\022\014"
    "\n\010LEVEL_TO\020\017\022\t\n\005MOUNT\020\020\022\013\n\007ENHANCE\020\021\022\022\n\016"
    "STRONG_WING_TO\020\022\022\022\n\016SKILL_LEVEL_TO\020\023\022\r\n\t"
    "HELL_KILL\020\024\022\016\n\nADD_FRIEND\020\025\022\023\n\017BE_ADDED_"
    "FRIEND\020\026\022\r\n\tSTRONG_TO\020\027\022\027\n\023UNLOCK_BLOODN"
    "ODE_TO\020\030\022\022\n\016ENTER_ANY_ROOM\020\031\022\016\n\nSURVIVE_"
    "TO\020\032\022\021\n\rPETHALO_COUNT\020\033\022\021\n\rPETHALO_LEVEL"
    "\020\034\022\021\n\rRECHARGE_OPEN\020\035\022\022\n\016STRONGALL_OPEN\020"
    "\036\022\016\n\nTOWER_OPEN\020\037\022\020\n\014OBTRIDE_OPEN\020 \022\024\n\020L"
    "EVELUPRIDE_OPEN\020!\022\022\n\016TRAINRIDE_OPEN\020\"\022\025\n"
    "\021PETEVOLUTION_OPEN\020#\022\023\n\017OBTGODSHIP_OPEN\020"
    "$\022\027\n\023LEVELUPGODSHIP_OPEN\020%\022\025\n\021JINJIEAWAK"
    "EN_OPEN\020&\"\226\002\n\014MissionAward\022 \n\004type\030\001 \003(\016"
    "2\022.MissionAward.Type\022\030\n\003arg\030\002 \003(\0132\013.Miss"
    "ionArg\"\311\001\n\004Type\022\010\n\004NONE\020\000\022\007\n\003EXP\020\001\022\t\n\005MO"
    "NEY\020\002\022\t\n\005GOODS\020\003\022\r\n\tEQUIPMENT\020\004\022\017\n\013DESIG"
    "NATION\020\005\022\007\n\003RMB\020\006\022\014\n\010SOULJADE\020\007\022\010\n\004SOUL\020"
    "\010\022\r\n\tSOULSTONE\020\t\022\t\n\005HONOR\020\n\022\016\n\nDURABILIT"
    "Y\020\013\022\n\n\006SUBRMB\020\014\022\014\n\010ACTIVITY\020\r\022\023\n\017OPENSER"
    "VERSCORE\020\016\"s\n\013MissionPort\022\037\n\004type\030\001 \001(\0162"
    "\021.MissionPort.Type\022\013\n\003arg\030\002 \003(\005\"6\n\004Type\022"
    "\007\n\003NPC\020\000\022\010\n\004AUTO\020\001\022\020\n\014CHANGE_SCENE\020\002\022\t\n\005"
    "LOGIN\020\003\"n\n\014MissionTrack\022 \n\004type\030\001 \001(\0162\022."
    "MissionTrack.Type\022\013\n\003arg\030\002 \003(\005\"/\n\004Type\022\010"
    "\n\004NONE\020\000\022\010\n\004ROOM\020\001\022\007\n\003NPC\020\002\022\n\n\006OPENUI\020\003\""
    "\333\003\n\013MissionInfo\022\037\n\004type\030\001 \001(\0162\021.MissionI"
    "nfo.Type\022\n\n\002id\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004de"
    "sc\030\004 \001(\t\022\021\n\tinContent\030\005 \001(\t\022\032\n\004open\030\006 \001("
    "\0132\014.MissionOpen\022\036\n\006target\030\007 \001(\0132\016.Missio"
    "nTarget\022\034\n\005award\030\010 \001(\0132\r.MissionAward\022\014\n"
    "\004next\030\t \001(\005\022\020\n\010maxCount\030\n \001(\005\022\017\n\007groupID"
    "\030\013 \001(\005\022\030\n\002in\030\014 \001(\0132\014.MissionPort\022\031\n\003out\030"
    "\r \001(\0132\014.MissionPort\022\024\n\014completeDesc\030\016 \001("
    "\t\022\022\n\noutContent\030\017 \001(\t\022\"\n\013targetTrack\030\020 \001"
    "(\0132\r.MissionTrack\022\037\n\010outTrack\030\021 \001(\0132\r.Mi"
    "ssionTrack\"A\n\004Type\022\t\n\005MAJOR\020\000\022\t\n\005MINOR\020\001"
    "\022\t\n\005DAILY\020\002\022\010\n\004LINE\020\003\022\016\n\nOPENSERVER\020\004\"-\n"
    "\013AllMissions\022\036\n\010missions\030\001 \003(\0132\014.Mission"
    "Info\"%\n\026PB_MissionTargetRecord\022\013\n\003arg\030\001 "
    "\003(\005\"J\n\020PB_MissionRecord\022\r\n\005count\030\001 \001(\005\022\'"
    "\n\006target\030\002 \003(\0132\027.PB_MissionTargetRecord\""
    "F\n\023PB_MissionAllRecord\022\"\n\007records\030\001 \003(\0132"
    "\021.PB_MissionRecord\022\013\n\003cur\030\002 \003(\005", 2231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MissionInfo.proto", &protobuf_RegisterTypes);
  MissionContent::default_instance_ = new MissionContent();
  MissionArg::default_instance_ = new MissionArg();
  MissionOpen::default_instance_ = new MissionOpen();
  MissionTarget::default_instance_ = new MissionTarget();
  MissionAward::default_instance_ = new MissionAward();
  MissionPort::default_instance_ = new MissionPort();
  MissionTrack::default_instance_ = new MissionTrack();
  MissionInfo::default_instance_ = new MissionInfo();
  AllMissions::default_instance_ = new AllMissions();
  PB_MissionTargetRecord::default_instance_ = new PB_MissionTargetRecord();
  PB_MissionRecord::default_instance_ = new PB_MissionRecord();
  PB_MissionAllRecord::default_instance_ = new PB_MissionAllRecord();
  MissionContent::default_instance_->InitAsDefaultInstance();
  MissionArg::default_instance_->InitAsDefaultInstance();
  MissionOpen::default_instance_->InitAsDefaultInstance();
  MissionTarget::default_instance_->InitAsDefaultInstance();
  MissionAward::default_instance_->InitAsDefaultInstance();
  MissionPort::default_instance_->InitAsDefaultInstance();
  MissionTrack::default_instance_->InitAsDefaultInstance();
  MissionInfo::default_instance_->InitAsDefaultInstance();
  AllMissions::default_instance_->InitAsDefaultInstance();
  PB_MissionTargetRecord::default_instance_->InitAsDefaultInstance();
  PB_MissionRecord::default_instance_->InitAsDefaultInstance();
  PB_MissionAllRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MissionInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MissionInfo_2eproto {
  StaticDescriptorInitializer_MissionInfo_2eproto() {
    protobuf_AddDesc_MissionInfo_2eproto();
  }
} static_descriptor_initializer_MissionInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MissionContent::kMissionFieldNumber;
const int MissionContent::kAcceptFieldNumber;
const int MissionContent::kRejectFieldNumber;
#endif  // !_MSC_VER

MissionContent::MissionContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionContent::InitAsDefaultInstance() {
}

MissionContent::MissionContent(const MissionContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionContent::SharedCtor() {
  _cached_size_ = 0;
  accept_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionContent::~MissionContent() {
  SharedDtor();
}

void MissionContent::SharedDtor() {
  if (accept_ != &::google::protobuf::internal::kEmptyString) {
    delete accept_;
  }
  if (reject_ != &::google::protobuf::internal::kEmptyString) {
    delete reject_;
  }
  if (this != default_instance_) {
  }
}

void MissionContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionContent_descriptor_;
}

const MissionContent& MissionContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

MissionContent* MissionContent::default_instance_ = NULL;

MissionContent* MissionContent::New() const {
  return new MissionContent;
}

void MissionContent::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_accept()) {
      if (accept_ != &::google::protobuf::internal::kEmptyString) {
        accept_->clear();
      }
    }
    if (has_reject()) {
      if (reject_ != &::google::protobuf::internal::kEmptyString) {
        reject_->clear();
      }
    }
  }
  mission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mission = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mission()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mission(0).data(), this->mission(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mission;
        if (input->ExpectTag(18)) goto parse_accept;
        break;
      }
      
      // optional string accept = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accept:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accept()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accept().data(), this->accept().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reject;
        break;
      }
      
      // optional string reject = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reject().data(), this->reject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string mission = 1;
  for (int i = 0; i < this->mission_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mission(i).data(), this->mission(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mission(i), output);
  }
  
  // optional string accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accept().data(), this->accept().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accept(), output);
  }
  
  // optional string reject = 3;
  if (has_reject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reject().data(), this->reject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reject(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string mission = 1;
  for (int i = 0; i < this->mission_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mission(i).data(), this->mission(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->mission(i), target);
  }
  
  // optional string accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accept().data(), this->accept().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accept(), target);
  }
  
  // optional string reject = 3;
  if (has_reject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reject().data(), this->reject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reject(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionContent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string accept = 2;
    if (has_accept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accept());
    }
    
    // optional string reject = 3;
    if (has_reject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reject());
    }
    
  }
  // repeated string mission = 1;
  total_size += 1 * this->mission_size();
  for (int i = 0; i < this->mission_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mission(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionContent::MergeFrom(const MissionContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_.MergeFrom(from.mission_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_accept()) {
      set_accept(from.accept());
    }
    if (from.has_reject()) {
      set_reject(from.reject());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionContent::CopyFrom(const MissionContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionContent::IsInitialized() const {
  
  return true;
}

void MissionContent::Swap(MissionContent* other) {
  if (other != this) {
    mission_.Swap(&other->mission_);
    std::swap(accept_, other->accept_);
    std::swap(reject_, other->reject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionContent_descriptor_;
  metadata.reflection = MissionContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionArg::kArgFieldNumber;
#endif  // !_MSC_VER

MissionArg::MissionArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionArg::InitAsDefaultInstance() {
}

MissionArg::MissionArg(const MissionArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionArg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionArg::~MissionArg() {
  SharedDtor();
}

void MissionArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionArg_descriptor_;
}

const MissionArg& MissionArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

MissionArg* MissionArg::default_instance_ = NULL;

MissionArg* MissionArg::New() const {
  return new MissionArg;
}

void MissionArg::Clear() {
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 arg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 arg = 1;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 arg = 1;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionArg::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 arg = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg(i));
    }
    total_size += 1 * this->arg_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionArg::MergeFrom(const MissionArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionArg::CopyFrom(const MissionArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionArg::IsInitialized() const {
  
  return true;
}

void MissionArg::Swap(MissionArg* other) {
  if (other != this) {
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionArg_descriptor_;
  metadata.reflection = MissionArg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MissionOpen_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionOpen_Type_descriptor_;
}
bool MissionOpen_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionOpen_Type MissionOpen::NONE;
const MissionOpen_Type MissionOpen::LEVEL;
const MissionOpen_Type MissionOpen::COMPLETE_MISSION;
const MissionOpen_Type MissionOpen::HASGOODS;
const MissionOpen_Type MissionOpen::APPLY_MISSION;
const MissionOpen_Type MissionOpen::OPENSERVERDATE;
const MissionOpen_Type MissionOpen::Type_MIN;
const MissionOpen_Type MissionOpen::Type_MAX;
const int MissionOpen::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionOpen::kTypeFieldNumber;
const int MissionOpen::kArgFieldNumber;
#endif  // !_MSC_VER

MissionOpen::MissionOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionOpen::InitAsDefaultInstance() {
}

MissionOpen::MissionOpen(const MissionOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionOpen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionOpen::~MissionOpen() {
  SharedDtor();
}

void MissionOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionOpen_descriptor_;
}

const MissionOpen& MissionOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

MissionOpen* MissionOpen::default_instance_ = NULL;

MissionOpen* MissionOpen::New() const {
  return new MissionOpen;
}

void MissionOpen::Clear() {
  type_.Clear();
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MissionOpen.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MissionOpen_Type_IsValid(value)) {
            add_type(static_cast< ::MissionOpen_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::MissionOpen_Type_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_arg;
        break;
      }
      
      // repeated .MissionArg arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MissionOpen.Type type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(i), output);
  }
  
  // repeated .MissionArg arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MissionOpen.Type type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(i), target);
  }
  
  // repeated .MissionArg arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionOpen::ByteSize() const {
  int total_size = 0;
  
  // repeated .MissionOpen.Type type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  // repeated .MissionArg arg = 2;
  total_size += 1 * this->arg_size();
  for (int i = 0; i < this->arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionOpen::MergeFrom(const MissionOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  arg_.MergeFrom(from.arg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionOpen::CopyFrom(const MissionOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionOpen::IsInitialized() const {
  
  return true;
}

void MissionOpen::Swap(MissionOpen* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionOpen_descriptor_;
  metadata.reflection = MissionOpen_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MissionTarget_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionTarget_Type_descriptor_;
}
bool MissionTarget_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionTarget_Type MissionTarget::NONE;
const MissionTarget_Type MissionTarget::KILLNPC;
const MissionTarget_Type MissionTarget::TALK;
const MissionTarget_Type MissionTarget::GETGOODS;
const MissionTarget_Type MissionTarget::CLEAR_ROOM;
const MissionTarget_Type MissionTarget::CLEAR_ONLYROOM;
const MissionTarget_Type MissionTarget::CLEAR_TOWER;
const MissionTarget_Type MissionTarget::CLEAR_SURVIVE;
const MissionTarget_Type MissionTarget::CLEAR_HERO;
const MissionTarget_Type MissionTarget::STRONG;
const MissionTarget_Type MissionTarget::UNLOCK_BLOODNODE;
const MissionTarget_Type MissionTarget::PVP;
const MissionTarget_Type MissionTarget::LEVEL_TO;
const MissionTarget_Type MissionTarget::MOUNT;
const MissionTarget_Type MissionTarget::ENHANCE;
const MissionTarget_Type MissionTarget::STRONG_WING_TO;
const MissionTarget_Type MissionTarget::SKILL_LEVEL_TO;
const MissionTarget_Type MissionTarget::HELL_KILL;
const MissionTarget_Type MissionTarget::ADD_FRIEND;
const MissionTarget_Type MissionTarget::BE_ADDED_FRIEND;
const MissionTarget_Type MissionTarget::STRONG_TO;
const MissionTarget_Type MissionTarget::UNLOCK_BLOODNODE_TO;
const MissionTarget_Type MissionTarget::ENTER_ANY_ROOM;
const MissionTarget_Type MissionTarget::SURVIVE_TO;
const MissionTarget_Type MissionTarget::PETHALO_COUNT;
const MissionTarget_Type MissionTarget::PETHALO_LEVEL;
const MissionTarget_Type MissionTarget::RECHARGE_OPEN;
const MissionTarget_Type MissionTarget::STRONGALL_OPEN;
const MissionTarget_Type MissionTarget::TOWER_OPEN;
const MissionTarget_Type MissionTarget::OBTRIDE_OPEN;
const MissionTarget_Type MissionTarget::LEVELUPRIDE_OPEN;
const MissionTarget_Type MissionTarget::TRAINRIDE_OPEN;
const MissionTarget_Type MissionTarget::PETEVOLUTION_OPEN;
const MissionTarget_Type MissionTarget::OBTGODSHIP_OPEN;
const MissionTarget_Type MissionTarget::LEVELUPGODSHIP_OPEN;
const MissionTarget_Type MissionTarget::JINJIEAWAKEN_OPEN;
const MissionTarget_Type MissionTarget::Type_MIN;
const MissionTarget_Type MissionTarget::Type_MAX;
const int MissionTarget::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionTarget::kTypeFieldNumber;
const int MissionTarget::kArgFieldNumber;
#endif  // !_MSC_VER

MissionTarget::MissionTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionTarget::InitAsDefaultInstance() {
}

MissionTarget::MissionTarget(const MissionTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionTarget::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionTarget::~MissionTarget() {
  SharedDtor();
}

void MissionTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionTarget_descriptor_;
}

const MissionTarget& MissionTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

MissionTarget* MissionTarget::default_instance_ = NULL;

MissionTarget* MissionTarget::New() const {
  return new MissionTarget;
}

void MissionTarget::Clear() {
  type_.Clear();
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MissionTarget.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MissionTarget_Type_IsValid(value)) {
            add_type(static_cast< ::MissionTarget_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::MissionTarget_Type_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_arg;
        break;
      }
      
      // repeated .MissionArg arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MissionTarget.Type type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(i), output);
  }
  
  // repeated .MissionArg arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MissionTarget.Type type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(i), target);
  }
  
  // repeated .MissionArg arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionTarget::ByteSize() const {
  int total_size = 0;
  
  // repeated .MissionTarget.Type type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  // repeated .MissionArg arg = 2;
  total_size += 1 * this->arg_size();
  for (int i = 0; i < this->arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionTarget::MergeFrom(const MissionTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  arg_.MergeFrom(from.arg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionTarget::CopyFrom(const MissionTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionTarget::IsInitialized() const {
  
  return true;
}

void MissionTarget::Swap(MissionTarget* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionTarget_descriptor_;
  metadata.reflection = MissionTarget_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MissionAward_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionAward_Type_descriptor_;
}
bool MissionAward_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionAward_Type MissionAward::NONE;
const MissionAward_Type MissionAward::EXP;
const MissionAward_Type MissionAward::MONEY;
const MissionAward_Type MissionAward::GOODS;
const MissionAward_Type MissionAward::EQUIPMENT;
const MissionAward_Type MissionAward::DESIGNATION;
const MissionAward_Type MissionAward::RMB;
const MissionAward_Type MissionAward::SOULJADE;
const MissionAward_Type MissionAward::SOUL;
const MissionAward_Type MissionAward::SOULSTONE;
const MissionAward_Type MissionAward::HONOR;
const MissionAward_Type MissionAward::DURABILITY;
const MissionAward_Type MissionAward::SUBRMB;
const MissionAward_Type MissionAward::ACTIVITY;
const MissionAward_Type MissionAward::OPENSERVERSCORE;
const MissionAward_Type MissionAward::Type_MIN;
const MissionAward_Type MissionAward::Type_MAX;
const int MissionAward::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionAward::kTypeFieldNumber;
const int MissionAward::kArgFieldNumber;
#endif  // !_MSC_VER

MissionAward::MissionAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionAward::InitAsDefaultInstance() {
}

MissionAward::MissionAward(const MissionAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionAward::~MissionAward() {
  SharedDtor();
}

void MissionAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionAward_descriptor_;
}

const MissionAward& MissionAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

MissionAward* MissionAward::default_instance_ = NULL;

MissionAward* MissionAward::New() const {
  return new MissionAward;
}

void MissionAward::Clear() {
  type_.Clear();
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MissionAward.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MissionAward_Type_IsValid(value)) {
            add_type(static_cast< ::MissionAward_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::MissionAward_Type_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_arg;
        break;
      }
      
      // repeated .MissionArg arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MissionAward.Type type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(i), output);
  }
  
  // repeated .MissionArg arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MissionAward.Type type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(i), target);
  }
  
  // repeated .MissionArg arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionAward::ByteSize() const {
  int total_size = 0;
  
  // repeated .MissionAward.Type type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  // repeated .MissionArg arg = 2;
  total_size += 1 * this->arg_size();
  for (int i = 0; i < this->arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionAward::MergeFrom(const MissionAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  arg_.MergeFrom(from.arg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionAward::CopyFrom(const MissionAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionAward::IsInitialized() const {
  
  return true;
}

void MissionAward::Swap(MissionAward* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionAward_descriptor_;
  metadata.reflection = MissionAward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MissionPort_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionPort_Type_descriptor_;
}
bool MissionPort_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionPort_Type MissionPort::NPC;
const MissionPort_Type MissionPort::AUTO;
const MissionPort_Type MissionPort::CHANGE_SCENE;
const MissionPort_Type MissionPort::LOGIN;
const MissionPort_Type MissionPort::Type_MIN;
const MissionPort_Type MissionPort::Type_MAX;
const int MissionPort::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionPort::kTypeFieldNumber;
const int MissionPort::kArgFieldNumber;
#endif  // !_MSC_VER

MissionPort::MissionPort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionPort::InitAsDefaultInstance() {
}

MissionPort::MissionPort(const MissionPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionPort::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionPort::~MissionPort() {
  SharedDtor();
}

void MissionPort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionPort_descriptor_;
}

const MissionPort& MissionPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

MissionPort* MissionPort::default_instance_ = NULL;

MissionPort* MissionPort::New() const {
  return new MissionPort;
}

void MissionPort::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MissionPort.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MissionPort_Type_IsValid(value)) {
            set_type(static_cast< ::MissionPort_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arg;
        break;
      }
      
      // repeated int32 arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MissionPort.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // repeated int32 arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionPort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MissionPort.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // repeated int32 arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionPort::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MissionPort.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated int32 arg = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg(i));
    }
    total_size += 1 * this->arg_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionPort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionPort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionPort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionPort::MergeFrom(const MissionPort& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionPort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionPort::CopyFrom(const MissionPort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionPort::IsInitialized() const {
  
  return true;
}

void MissionPort::Swap(MissionPort* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionPort_descriptor_;
  metadata.reflection = MissionPort_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MissionTrack_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionTrack_Type_descriptor_;
}
bool MissionTrack_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionTrack_Type MissionTrack::NONE;
const MissionTrack_Type MissionTrack::ROOM;
const MissionTrack_Type MissionTrack::NPC;
const MissionTrack_Type MissionTrack::OPENUI;
const MissionTrack_Type MissionTrack::Type_MIN;
const MissionTrack_Type MissionTrack::Type_MAX;
const int MissionTrack::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionTrack::kTypeFieldNumber;
const int MissionTrack::kArgFieldNumber;
#endif  // !_MSC_VER

MissionTrack::MissionTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionTrack::InitAsDefaultInstance() {
}

MissionTrack::MissionTrack(const MissionTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionTrack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionTrack::~MissionTrack() {
  SharedDtor();
}

void MissionTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionTrack_descriptor_;
}

const MissionTrack& MissionTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

MissionTrack* MissionTrack::default_instance_ = NULL;

MissionTrack* MissionTrack::New() const {
  return new MissionTrack;
}

void MissionTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MissionTrack.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MissionTrack_Type_IsValid(value)) {
            set_type(static_cast< ::MissionTrack_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arg;
        break;
      }
      
      // repeated int32 arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MissionTrack.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // repeated int32 arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MissionTrack.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // repeated int32 arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionTrack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MissionTrack.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated int32 arg = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg(i));
    }
    total_size += 1 * this->arg_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionTrack::MergeFrom(const MissionTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionTrack::CopyFrom(const MissionTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionTrack::IsInitialized() const {
  
  return true;
}

void MissionTrack::Swap(MissionTrack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionTrack_descriptor_;
  metadata.reflection = MissionTrack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MissionInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionInfo_Type_descriptor_;
}
bool MissionInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionInfo_Type MissionInfo::MAJOR;
const MissionInfo_Type MissionInfo::MINOR;
const MissionInfo_Type MissionInfo::DAILY;
const MissionInfo_Type MissionInfo::LINE;
const MissionInfo_Type MissionInfo::OPENSERVER;
const MissionInfo_Type MissionInfo::Type_MIN;
const MissionInfo_Type MissionInfo::Type_MAX;
const int MissionInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionInfo::kTypeFieldNumber;
const int MissionInfo::kIdFieldNumber;
const int MissionInfo::kNameFieldNumber;
const int MissionInfo::kDescFieldNumber;
const int MissionInfo::kInContentFieldNumber;
const int MissionInfo::kOpenFieldNumber;
const int MissionInfo::kTargetFieldNumber;
const int MissionInfo::kAwardFieldNumber;
const int MissionInfo::kNextFieldNumber;
const int MissionInfo::kMaxCountFieldNumber;
const int MissionInfo::kGroupIDFieldNumber;
const int MissionInfo::kInFieldNumber;
const int MissionInfo::kOutFieldNumber;
const int MissionInfo::kCompleteDescFieldNumber;
const int MissionInfo::kOutContentFieldNumber;
const int MissionInfo::kTargetTrackFieldNumber;
const int MissionInfo::kOutTrackFieldNumber;
#endif  // !_MSC_VER

MissionInfo::MissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionInfo::InitAsDefaultInstance() {
  open_ = const_cast< ::MissionOpen*>(&::MissionOpen::default_instance());
  target_ = const_cast< ::MissionTarget*>(&::MissionTarget::default_instance());
  award_ = const_cast< ::MissionAward*>(&::MissionAward::default_instance());
  in_ = const_cast< ::MissionPort*>(&::MissionPort::default_instance());
  out_ = const_cast< ::MissionPort*>(&::MissionPort::default_instance());
  targetTrack_ = const_cast< ::MissionTrack*>(&::MissionTrack::default_instance());
  outTrack_ = const_cast< ::MissionTrack*>(&::MissionTrack::default_instance());
}

MissionInfo::MissionInfo(const MissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inContent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_ = NULL;
  target_ = NULL;
  award_ = NULL;
  next_ = 0;
  maxCount_ = 0;
  groupID_ = 0;
  in_ = NULL;
  out_ = NULL;
  completeDesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outContent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetTrack_ = NULL;
  outTrack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionInfo::~MissionInfo() {
  SharedDtor();
}

void MissionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (inContent_ != &::google::protobuf::internal::kEmptyString) {
    delete inContent_;
  }
  if (completeDesc_ != &::google::protobuf::internal::kEmptyString) {
    delete completeDesc_;
  }
  if (outContent_ != &::google::protobuf::internal::kEmptyString) {
    delete outContent_;
  }
  if (this != default_instance_) {
    delete open_;
    delete target_;
    delete award_;
    delete in_;
    delete out_;
    delete targetTrack_;
    delete outTrack_;
  }
}

void MissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionInfo_descriptor_;
}

const MissionInfo& MissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

MissionInfo* MissionInfo::default_instance_ = NULL;

MissionInfo* MissionInfo::New() const {
  return new MissionInfo;
}

void MissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_inContent()) {
      if (inContent_ != &::google::protobuf::internal::kEmptyString) {
        inContent_->clear();
      }
    }
    if (has_open()) {
      if (open_ != NULL) open_->::MissionOpen::Clear();
    }
    if (has_target()) {
      if (target_ != NULL) target_->::MissionTarget::Clear();
    }
    if (has_award()) {
      if (award_ != NULL) award_->::MissionAward::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    next_ = 0;
    maxCount_ = 0;
    groupID_ = 0;
    if (has_in()) {
      if (in_ != NULL) in_->::MissionPort::Clear();
    }
    if (has_out()) {
      if (out_ != NULL) out_->::MissionPort::Clear();
    }
    if (has_completeDesc()) {
      if (completeDesc_ != &::google::protobuf::internal::kEmptyString) {
        completeDesc_->clear();
      }
    }
    if (has_outContent()) {
      if (outContent_ != &::google::protobuf::internal::kEmptyString) {
        outContent_->clear();
      }
    }
    if (has_targetTrack()) {
      if (targetTrack_ != NULL) targetTrack_->::MissionTrack::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_outTrack()) {
      if (outTrack_ != NULL) outTrack_->::MissionTrack::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MissionInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MissionInfo_Type_IsValid(value)) {
            set_type(static_cast< ::MissionInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }
      
      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inContent;
        break;
      }
      
      // optional string inContent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inContent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inContent().data(), this->inContent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_open;
        break;
      }
      
      // optional .MissionOpen open = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_target;
        break;
      }
      
      // optional .MissionTarget target = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_award;
        break;
      }
      
      // optional .MissionAward award = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_next;
        break;
      }
      
      // optional int32 next = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_)));
          set_has_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maxCount;
        break;
      }
      
      // optional int32 maxCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxCount_)));
          set_has_maxCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_groupID;
        break;
      }
      
      // optional int32 groupID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupID_)));
          set_has_groupID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_in;
        break;
      }
      
      // optional .MissionPort in = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_in:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_out;
        break;
      }
      
      // optional .MissionPort out = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_out()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_completeDesc;
        break;
      }
      
      // optional string completeDesc = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_completeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_completeDesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->completeDesc().data(), this->completeDesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_outContent;
        break;
      }
      
      // optional string outContent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outContent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outContent().data(), this->outContent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_targetTrack;
        break;
      }
      
      // optional .MissionTrack targetTrack = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetTrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetTrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_outTrack;
        break;
      }
      
      // optional .MissionTrack outTrack = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outTrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outTrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MissionInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }
  
  // optional string inContent = 5;
  if (has_inContent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inContent().data(), this->inContent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->inContent(), output);
  }
  
  // optional .MissionOpen open = 6;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->open(), output);
  }
  
  // optional .MissionTarget target = 7;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->target(), output);
  }
  
  // optional .MissionAward award = 8;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->award(), output);
  }
  
  // optional int32 next = 9;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->next(), output);
  }
  
  // optional int32 maxCount = 10;
  if (has_maxCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxCount(), output);
  }
  
  // optional int32 groupID = 11;
  if (has_groupID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->groupID(), output);
  }
  
  // optional .MissionPort in = 12;
  if (has_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->in(), output);
  }
  
  // optional .MissionPort out = 13;
  if (has_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->out(), output);
  }
  
  // optional string completeDesc = 14;
  if (has_completeDesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->completeDesc().data(), this->completeDesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->completeDesc(), output);
  }
  
  // optional string outContent = 15;
  if (has_outContent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outContent().data(), this->outContent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->outContent(), output);
  }
  
  // optional .MissionTrack targetTrack = 16;
  if (has_targetTrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->targetTrack(), output);
  }
  
  // optional .MissionTrack outTrack = 17;
  if (has_outTrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->outTrack(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MissionInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }
  
  // optional string inContent = 5;
  if (has_inContent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inContent().data(), this->inContent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inContent(), target);
  }
  
  // optional .MissionOpen open = 6;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->open(), target);
  }
  
  // optional .MissionTarget target = 7;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->target(), target);
  }
  
  // optional .MissionAward award = 8;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->award(), target);
  }
  
  // optional int32 next = 9;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->next(), target);
  }
  
  // optional int32 maxCount = 10;
  if (has_maxCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxCount(), target);
  }
  
  // optional int32 groupID = 11;
  if (has_groupID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->groupID(), target);
  }
  
  // optional .MissionPort in = 12;
  if (has_in()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->in(), target);
  }
  
  // optional .MissionPort out = 13;
  if (has_out()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->out(), target);
  }
  
  // optional string completeDesc = 14;
  if (has_completeDesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->completeDesc().data(), this->completeDesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->completeDesc(), target);
  }
  
  // optional string outContent = 15;
  if (has_outContent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outContent().data(), this->outContent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->outContent(), target);
  }
  
  // optional .MissionTrack targetTrack = 16;
  if (has_targetTrack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->targetTrack(), target);
  }
  
  // optional .MissionTrack outTrack = 17;
  if (has_outTrack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->outTrack(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MissionInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional string inContent = 5;
    if (has_inContent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inContent());
    }
    
    // optional .MissionOpen open = 6;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open());
    }
    
    // optional .MissionTarget target = 7;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // optional .MissionAward award = 8;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 next = 9;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next());
    }
    
    // optional int32 maxCount = 10;
    if (has_maxCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxCount());
    }
    
    // optional int32 groupID = 11;
    if (has_groupID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupID());
    }
    
    // optional .MissionPort in = 12;
    if (has_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->in());
    }
    
    // optional .MissionPort out = 13;
    if (has_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->out());
    }
    
    // optional string completeDesc = 14;
    if (has_completeDesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->completeDesc());
    }
    
    // optional string outContent = 15;
    if (has_outContent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outContent());
    }
    
    // optional .MissionTrack targetTrack = 16;
    if (has_targetTrack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetTrack());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .MissionTrack outTrack = 17;
    if (has_outTrack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outTrack());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionInfo::MergeFrom(const MissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_inContent()) {
      set_inContent(from.inContent());
    }
    if (from.has_open()) {
      mutable_open()->::MissionOpen::MergeFrom(from.open());
    }
    if (from.has_target()) {
      mutable_target()->::MissionTarget::MergeFrom(from.target());
    }
    if (from.has_award()) {
      mutable_award()->::MissionAward::MergeFrom(from.award());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_next()) {
      set_next(from.next());
    }
    if (from.has_maxCount()) {
      set_maxCount(from.maxCount());
    }
    if (from.has_groupID()) {
      set_groupID(from.groupID());
    }
    if (from.has_in()) {
      mutable_in()->::MissionPort::MergeFrom(from.in());
    }
    if (from.has_out()) {
      mutable_out()->::MissionPort::MergeFrom(from.out());
    }
    if (from.has_completeDesc()) {
      set_completeDesc(from.completeDesc());
    }
    if (from.has_outContent()) {
      set_outContent(from.outContent());
    }
    if (from.has_targetTrack()) {
      mutable_targetTrack()->::MissionTrack::MergeFrom(from.targetTrack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_outTrack()) {
      mutable_outTrack()->::MissionTrack::MergeFrom(from.outTrack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionInfo::CopyFrom(const MissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfo::IsInitialized() const {
  
  return true;
}

void MissionInfo::Swap(MissionInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(inContent_, other->inContent_);
    std::swap(open_, other->open_);
    std::swap(target_, other->target_);
    std::swap(award_, other->award_);
    std::swap(next_, other->next_);
    std::swap(maxCount_, other->maxCount_);
    std::swap(groupID_, other->groupID_);
    std::swap(in_, other->in_);
    std::swap(out_, other->out_);
    std::swap(completeDesc_, other->completeDesc_);
    std::swap(outContent_, other->outContent_);
    std::swap(targetTrack_, other->targetTrack_);
    std::swap(outTrack_, other->outTrack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionInfo_descriptor_;
  metadata.reflection = MissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllMissions::kMissionsFieldNumber;
#endif  // !_MSC_VER

AllMissions::AllMissions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllMissions::InitAsDefaultInstance() {
}

AllMissions::AllMissions(const AllMissions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllMissions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllMissions::~AllMissions() {
  SharedDtor();
}

void AllMissions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllMissions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllMissions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllMissions_descriptor_;
}

const AllMissions& AllMissions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

AllMissions* AllMissions::default_instance_ = NULL;

AllMissions* AllMissions::New() const {
  return new AllMissions;
}

void AllMissions::Clear() {
  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllMissions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MissionInfo missions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_missions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllMissions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MissionInfo missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllMissions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MissionInfo missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllMissions::ByteSize() const {
  int total_size = 0;
  
  // repeated .MissionInfo missions = 1;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllMissions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllMissions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllMissions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllMissions::MergeFrom(const AllMissions& from) {
  GOOGLE_CHECK_NE(&from, this);
  missions_.MergeFrom(from.missions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllMissions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllMissions::CopyFrom(const AllMissions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllMissions::IsInitialized() const {
  
  return true;
}

void AllMissions::Swap(AllMissions* other) {
  if (other != this) {
    missions_.Swap(&other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllMissions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllMissions_descriptor_;
  metadata.reflection = AllMissions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_MissionTargetRecord::kArgFieldNumber;
#endif  // !_MSC_VER

PB_MissionTargetRecord::PB_MissionTargetRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_MissionTargetRecord::InitAsDefaultInstance() {
}

PB_MissionTargetRecord::PB_MissionTargetRecord(const PB_MissionTargetRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_MissionTargetRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_MissionTargetRecord::~PB_MissionTargetRecord() {
  SharedDtor();
}

void PB_MissionTargetRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_MissionTargetRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_MissionTargetRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_MissionTargetRecord_descriptor_;
}

const PB_MissionTargetRecord& PB_MissionTargetRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

PB_MissionTargetRecord* PB_MissionTargetRecord::default_instance_ = NULL;

PB_MissionTargetRecord* PB_MissionTargetRecord::New() const {
  return new PB_MissionTargetRecord;
}

void PB_MissionTargetRecord::Clear() {
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_MissionTargetRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 arg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_MissionTargetRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 arg = 1;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_MissionTargetRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 arg = 1;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_MissionTargetRecord::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 arg = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg(i));
    }
    total_size += 1 * this->arg_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_MissionTargetRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_MissionTargetRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_MissionTargetRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_MissionTargetRecord::MergeFrom(const PB_MissionTargetRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_MissionTargetRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_MissionTargetRecord::CopyFrom(const PB_MissionTargetRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MissionTargetRecord::IsInitialized() const {
  
  return true;
}

void PB_MissionTargetRecord::Swap(PB_MissionTargetRecord* other) {
  if (other != this) {
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_MissionTargetRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_MissionTargetRecord_descriptor_;
  metadata.reflection = PB_MissionTargetRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_MissionRecord::kCountFieldNumber;
const int PB_MissionRecord::kTargetFieldNumber;
#endif  // !_MSC_VER

PB_MissionRecord::PB_MissionRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_MissionRecord::InitAsDefaultInstance() {
}

PB_MissionRecord::PB_MissionRecord(const PB_MissionRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_MissionRecord::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_MissionRecord::~PB_MissionRecord() {
  SharedDtor();
}

void PB_MissionRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_MissionRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_MissionRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_MissionRecord_descriptor_;
}

const PB_MissionRecord& PB_MissionRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

PB_MissionRecord* PB_MissionRecord::default_instance_ = NULL;

PB_MissionRecord* PB_MissionRecord::New() const {
  return new PB_MissionRecord;
}

void PB_MissionRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  target_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_MissionRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }
      
      // repeated .PB_MissionTargetRecord target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_MissionRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  // repeated .PB_MissionTargetRecord target = 2;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_MissionRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  // repeated .PB_MissionTargetRecord target = 2;
  for (int i = 0; i < this->target_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_MissionRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  // repeated .PB_MissionTargetRecord target = 2;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_MissionRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_MissionRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_MissionRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_MissionRecord::MergeFrom(const PB_MissionRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_.MergeFrom(from.target_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_MissionRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_MissionRecord::CopyFrom(const PB_MissionRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MissionRecord::IsInitialized() const {
  
  return true;
}

void PB_MissionRecord::Swap(PB_MissionRecord* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    target_.Swap(&other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_MissionRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_MissionRecord_descriptor_;
  metadata.reflection = PB_MissionRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_MissionAllRecord::kRecordsFieldNumber;
const int PB_MissionAllRecord::kCurFieldNumber;
#endif  // !_MSC_VER

PB_MissionAllRecord::PB_MissionAllRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_MissionAllRecord::InitAsDefaultInstance() {
}

PB_MissionAllRecord::PB_MissionAllRecord(const PB_MissionAllRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_MissionAllRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_MissionAllRecord::~PB_MissionAllRecord() {
  SharedDtor();
}

void PB_MissionAllRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_MissionAllRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_MissionAllRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_MissionAllRecord_descriptor_;
}

const PB_MissionAllRecord& PB_MissionAllRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionInfo_2eproto();  return *default_instance_;
}

PB_MissionAllRecord* PB_MissionAllRecord::default_instance_ = NULL;

PB_MissionAllRecord* PB_MissionAllRecord::New() const {
  return new PB_MissionAllRecord;
}

void PB_MissionAllRecord::Clear() {
  records_.Clear();
  cur_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_MissionAllRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_MissionRecord records = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectTag(16)) goto parse_cur;
        break;
      }
      
      // repeated int32 cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cur())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cur())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_MissionAllRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_MissionRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }
  
  // repeated int32 cur = 2;
  for (int i = 0; i < this->cur_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cur(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_MissionAllRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_MissionRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }
  
  // repeated int32 cur = 2;
  for (int i = 0; i < this->cur_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cur(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_MissionAllRecord::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_MissionRecord records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }
  
  // repeated int32 cur = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cur(i));
    }
    total_size += 1 * this->cur_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_MissionAllRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_MissionAllRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_MissionAllRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_MissionAllRecord::MergeFrom(const PB_MissionAllRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  cur_.MergeFrom(from.cur_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_MissionAllRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_MissionAllRecord::CopyFrom(const PB_MissionAllRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_MissionAllRecord::IsInitialized() const {
  
  return true;
}

void PB_MissionAllRecord::Swap(PB_MissionAllRecord* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    cur_.Swap(&other->cur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_MissionAllRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_MissionAllRecord_descriptor_;
  metadata.reflection = PB_MissionAllRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

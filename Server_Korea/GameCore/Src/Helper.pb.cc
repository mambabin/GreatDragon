// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Helper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HelperNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelperNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HelperNode_BtnFunc_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllHelperNodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllHelperNodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelperItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelperItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelperGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelperGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllHelper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllHelper_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Helper_2eproto() {
  protobuf_AddDesc_Helper_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Helper.proto");
  GOOGLE_CHECK(file != NULL);
  HelperNode_descriptor_ = file->message_type(0);
  static const int HelperNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperNode, btnFunc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperNode, param_),
  };
  HelperNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelperNode_descriptor_,
      HelperNode::default_instance_,
      HelperNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelperNode));
  HelperNode_BtnFunc_descriptor_ = HelperNode_descriptor_->enum_type(0);
  AllHelperNodes_descriptor_ = file->message_type(1);
  static const int AllHelperNodes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllHelperNodes, nodes_),
  };
  AllHelperNodes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllHelperNodes_descriptor_,
      AllHelperNodes::default_instance_,
      AllHelperNodes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllHelperNodes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllHelperNodes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllHelperNodes));
  HelperItem_descriptor_ = file->message_type(2);
  static const int HelperItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperItem, nodeNames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperItem, nodeDesc_),
  };
  HelperItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelperItem_descriptor_,
      HelperItem::default_instance_,
      HelperItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelperItem));
  HelperGroup_descriptor_ = file->message_type(3);
  static const int HelperGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperGroup, items_),
  };
  HelperGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelperGroup_descriptor_,
      HelperGroup::default_instance_,
      HelperGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelperGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelperGroup));
  AllHelper_descriptor_ = file->message_type(4);
  static const int AllHelper_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllHelper, helpers_),
  };
  AllHelper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllHelper_descriptor_,
      AllHelper::default_instance_,
      AllHelper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllHelper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllHelper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllHelper));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Helper_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelperNode_descriptor_, &HelperNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllHelperNodes_descriptor_, &AllHelperNodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelperItem_descriptor_, &HelperItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelperGroup_descriptor_, &HelperGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllHelper_descriptor_, &AllHelper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Helper_2eproto() {
  delete HelperNode::default_instance_;
  delete HelperNode_reflection_;
  delete AllHelperNodes::default_instance_;
  delete AllHelperNodes_reflection_;
  delete HelperItem::default_instance_;
  delete HelperItem_reflection_;
  delete HelperGroup::default_instance_;
  delete HelperGroup_reflection_;
  delete AllHelper::default_instance_;
  delete AllHelper_reflection_;
}

void protobuf_AddDesc_Helper_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Helper.proto\"\215\001\n\nHelperNode\022\n\n\002id\030\001 \001("
    "\005\022$\n\007btnFunc\030\002 \001(\0162\023.HelperNode.BtnFunc\022"
    "\r\n\005param\030\003 \001(\005\">\n\007BtnFunc\022\010\n\004NONE\020\000\022\020\n\014U"
    "I_SINGLEMAP\020\001\022\017\n\013UI_ELITEMAP\020\002\022\006\n\002UI\020\003\","
    "\n\016AllHelperNodes\022\032\n\005nodes\030\001 \003(\0132\013.Helper"
    "Node\"=\n\nHelperItem\022\n\n\002id\030\001 \001(\005\022\021\n\tnodeNa"
    "mes\030\002 \001(\t\022\020\n\010nodeDesc\030\003 \001(\t\"7\n\013HelperGro"
    "up\022\014\n\004name\030\001 \001(\t\022\032\n\005items\030\002 \003(\0132\013.Helper"
    "Item\"*\n\tAllHelper\022\035\n\007helpers\030\001 \003(\0132\014.Hel"
    "perGroup", 368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Helper.proto", &protobuf_RegisterTypes);
  HelperNode::default_instance_ = new HelperNode();
  AllHelperNodes::default_instance_ = new AllHelperNodes();
  HelperItem::default_instance_ = new HelperItem();
  HelperGroup::default_instance_ = new HelperGroup();
  AllHelper::default_instance_ = new AllHelper();
  HelperNode::default_instance_->InitAsDefaultInstance();
  AllHelperNodes::default_instance_->InitAsDefaultInstance();
  HelperItem::default_instance_->InitAsDefaultInstance();
  HelperGroup::default_instance_->InitAsDefaultInstance();
  AllHelper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Helper_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Helper_2eproto {
  StaticDescriptorInitializer_Helper_2eproto() {
    protobuf_AddDesc_Helper_2eproto();
  }
} static_descriptor_initializer_Helper_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* HelperNode_BtnFunc_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelperNode_BtnFunc_descriptor_;
}
bool HelperNode_BtnFunc_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HelperNode_BtnFunc HelperNode::NONE;
const HelperNode_BtnFunc HelperNode::UI_SINGLEMAP;
const HelperNode_BtnFunc HelperNode::UI_ELITEMAP;
const HelperNode_BtnFunc HelperNode::UI;
const HelperNode_BtnFunc HelperNode::BtnFunc_MIN;
const HelperNode_BtnFunc HelperNode::BtnFunc_MAX;
const int HelperNode::BtnFunc_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HelperNode::kIdFieldNumber;
const int HelperNode::kBtnFuncFieldNumber;
const int HelperNode::kParamFieldNumber;
#endif  // !_MSC_VER

HelperNode::HelperNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelperNode::InitAsDefaultInstance() {
}

HelperNode::HelperNode(const HelperNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelperNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  btnFunc_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelperNode::~HelperNode() {
  SharedDtor();
}

void HelperNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HelperNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelperNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelperNode_descriptor_;
}

const HelperNode& HelperNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Helper_2eproto();  return *default_instance_;
}

HelperNode* HelperNode::default_instance_ = NULL;

HelperNode* HelperNode::New() const {
  return new HelperNode;
}

void HelperNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    btnFunc_ = 0;
    param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelperNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_btnFunc;
        break;
      }
      
      // optional .HelperNode.BtnFunc btnFunc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btnFunc:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HelperNode_BtnFunc_IsValid(value)) {
            set_btnFunc(static_cast< ::HelperNode_BtnFunc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }
      
      // optional int32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelperNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .HelperNode.BtnFunc btnFunc = 2;
  if (has_btnFunc()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->btnFunc(), output);
  }
  
  // optional int32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelperNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .HelperNode.BtnFunc btnFunc = 2;
  if (has_btnFunc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->btnFunc(), target);
  }
  
  // optional int32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelperNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .HelperNode.BtnFunc btnFunc = 2;
    if (has_btnFunc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->btnFunc());
    }
    
    // optional int32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelperNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelperNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelperNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelperNode::MergeFrom(const HelperNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_btnFunc()) {
      set_btnFunc(from.btnFunc());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelperNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelperNode::CopyFrom(const HelperNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelperNode::IsInitialized() const {
  
  return true;
}

void HelperNode::Swap(HelperNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(btnFunc_, other->btnFunc_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelperNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelperNode_descriptor_;
  metadata.reflection = HelperNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllHelperNodes::kNodesFieldNumber;
#endif  // !_MSC_VER

AllHelperNodes::AllHelperNodes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllHelperNodes::InitAsDefaultInstance() {
}

AllHelperNodes::AllHelperNodes(const AllHelperNodes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllHelperNodes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllHelperNodes::~AllHelperNodes() {
  SharedDtor();
}

void AllHelperNodes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllHelperNodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllHelperNodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllHelperNodes_descriptor_;
}

const AllHelperNodes& AllHelperNodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Helper_2eproto();  return *default_instance_;
}

AllHelperNodes* AllHelperNodes::default_instance_ = NULL;

AllHelperNodes* AllHelperNodes::New() const {
  return new AllHelperNodes;
}

void AllHelperNodes::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllHelperNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelperNode nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllHelperNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelperNode nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllHelperNodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelperNode nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllHelperNodes::ByteSize() const {
  int total_size = 0;
  
  // repeated .HelperNode nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllHelperNodes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllHelperNodes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllHelperNodes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllHelperNodes::MergeFrom(const AllHelperNodes& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllHelperNodes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllHelperNodes::CopyFrom(const AllHelperNodes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllHelperNodes::IsInitialized() const {
  
  return true;
}

void AllHelperNodes::Swap(AllHelperNodes* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllHelperNodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllHelperNodes_descriptor_;
  metadata.reflection = AllHelperNodes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelperItem::kIdFieldNumber;
const int HelperItem::kNodeNamesFieldNumber;
const int HelperItem::kNodeDescFieldNumber;
#endif  // !_MSC_VER

HelperItem::HelperItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelperItem::InitAsDefaultInstance() {
}

HelperItem::HelperItem(const HelperItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelperItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  nodeNames_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nodeDesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelperItem::~HelperItem() {
  SharedDtor();
}

void HelperItem::SharedDtor() {
  if (nodeNames_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeNames_;
  }
  if (nodeDesc_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeDesc_;
  }
  if (this != default_instance_) {
  }
}

void HelperItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelperItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelperItem_descriptor_;
}

const HelperItem& HelperItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Helper_2eproto();  return *default_instance_;
}

HelperItem* HelperItem::default_instance_ = NULL;

HelperItem* HelperItem::New() const {
  return new HelperItem;
}

void HelperItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_nodeNames()) {
      if (nodeNames_ != &::google::protobuf::internal::kEmptyString) {
        nodeNames_->clear();
      }
    }
    if (has_nodeDesc()) {
      if (nodeDesc_ != &::google::protobuf::internal::kEmptyString) {
        nodeDesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelperItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeNames;
        break;
      }
      
      // optional string nodeNames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeNames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeNames().data(), this->nodeNames().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nodeDesc;
        break;
      }
      
      // optional string nodeDesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeDesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeDesc().data(), this->nodeDesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelperItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string nodeNames = 2;
  if (has_nodeNames()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeNames().data(), this->nodeNames().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodeNames(), output);
  }
  
  // optional string nodeDesc = 3;
  if (has_nodeDesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeDesc().data(), this->nodeDesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nodeDesc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelperItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string nodeNames = 2;
  if (has_nodeNames()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeNames().data(), this->nodeNames().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nodeNames(), target);
  }
  
  // optional string nodeDesc = 3;
  if (has_nodeDesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeDesc().data(), this->nodeDesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nodeDesc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelperItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string nodeNames = 2;
    if (has_nodeNames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeNames());
    }
    
    // optional string nodeDesc = 3;
    if (has_nodeDesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeDesc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelperItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelperItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelperItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelperItem::MergeFrom(const HelperItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nodeNames()) {
      set_nodeNames(from.nodeNames());
    }
    if (from.has_nodeDesc()) {
      set_nodeDesc(from.nodeDesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelperItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelperItem::CopyFrom(const HelperItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelperItem::IsInitialized() const {
  
  return true;
}

void HelperItem::Swap(HelperItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nodeNames_, other->nodeNames_);
    std::swap(nodeDesc_, other->nodeDesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelperItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelperItem_descriptor_;
  metadata.reflection = HelperItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelperGroup::kNameFieldNumber;
const int HelperGroup::kItemsFieldNumber;
#endif  // !_MSC_VER

HelperGroup::HelperGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelperGroup::InitAsDefaultInstance() {
}

HelperGroup::HelperGroup(const HelperGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelperGroup::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelperGroup::~HelperGroup() {
  SharedDtor();
}

void HelperGroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HelperGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelperGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelperGroup_descriptor_;
}

const HelperGroup& HelperGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Helper_2eproto();  return *default_instance_;
}

HelperGroup* HelperGroup::default_instance_ = NULL;

HelperGroup* HelperGroup::New() const {
  return new HelperGroup;
}

void HelperGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelperGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .HelperItem items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelperGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .HelperItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelperGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .HelperItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelperGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .HelperItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelperGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelperGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelperGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelperGroup::MergeFrom(const HelperGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelperGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelperGroup::CopyFrom(const HelperGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelperGroup::IsInitialized() const {
  
  return true;
}

void HelperGroup::Swap(HelperGroup* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelperGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelperGroup_descriptor_;
  metadata.reflection = HelperGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllHelper::kHelpersFieldNumber;
#endif  // !_MSC_VER

AllHelper::AllHelper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllHelper::InitAsDefaultInstance() {
}

AllHelper::AllHelper(const AllHelper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllHelper::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllHelper::~AllHelper() {
  SharedDtor();
}

void AllHelper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllHelper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllHelper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllHelper_descriptor_;
}

const AllHelper& AllHelper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Helper_2eproto();  return *default_instance_;
}

AllHelper* AllHelper::default_instance_ = NULL;

AllHelper* AllHelper::New() const {
  return new AllHelper;
}

void AllHelper::Clear() {
  helpers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllHelper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HelperGroup helpers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helpers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_helpers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_helpers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllHelper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HelperGroup helpers = 1;
  for (int i = 0; i < this->helpers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->helpers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllHelper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HelperGroup helpers = 1;
  for (int i = 0; i < this->helpers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->helpers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllHelper::ByteSize() const {
  int total_size = 0;
  
  // repeated .HelperGroup helpers = 1;
  total_size += 1 * this->helpers_size();
  for (int i = 0; i < this->helpers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->helpers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllHelper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllHelper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllHelper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllHelper::MergeFrom(const AllHelper& from) {
  GOOGLE_CHECK_NE(&from, this);
  helpers_.MergeFrom(from.helpers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllHelper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllHelper::CopyFrom(const AllHelper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllHelper::IsInitialized() const {
  
  return true;
}

void AllHelper::Swap(AllHelper* other) {
  if (other != this) {
    helpers_.Swap(&other->helpers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllHelper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllHelper_descriptor_;
  metadata.reflection = AllHelper_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

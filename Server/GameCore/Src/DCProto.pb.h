// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DCProto.proto

#ifndef PROTOBUF_DCProto_2eproto__INCLUDED
#define PROTOBUF_DCProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "BaseInfo.pb.h"
#include "PlayerInfo.pb.h"
#include "PlayerAtt.pb.h"
#include "EquipmentInfo.pb.h"
#include "NetProto.pb.h"
#include "ProfessionInfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DCProto_2eproto();
void protobuf_AssignDesc_DCProto_2eproto();
void protobuf_ShutdownFile_DCProto_2eproto();

class DCProto_SaveRoleData;
class DCProto_DeleteRoleData;
class DCProto_LoadRoleData;
class DCProto_CollectRole;
class DCProto_AddAccount;
class DCProto_AddRole;
class DCProto_SaveSingleRecord;
class DCProto_HasName;
class DCProto_Login;
class DCProto_QueryRole;
class DCProto_SendMail;
class DCProto_GetKeyGift;
class DCProto_Recharge;
class DCProto_CostRecord;
class DCProto_PlayerStatus;
class DCProto_SaveChat;
class DCProto_GodTarget;
class DCProto_LoadPlayerAtt;
class DCProto_LoadFriendsFans;
class DCProto_ModifyFixedEventBit;
class DCProto_ModifyGodRank;
class DCProto_GodRankRecordInfo;
class DCProto_SaveGodRankInfoRecord;
class DCProto_QueryGodRole;
class DCProto_RandomRoles;
class DCProto_SendMailExceptRoles;
class DCProto_AddOutLineFriends;
class DCProto_LoadHireRoleDate;
class DCProto_QueryRoleFaction;
class DCProto_TencentBuyGoodsUrl;
class DCProto_Cost;
class DCProto_FilterRecharge;
class DCProto_SetVIP;
class DCProto_CollectEquipment;
class DCProto_SaveEquipmentData;
class DCProto_LoadEquipmentData;
class DCProto_DeleteEquipmentData;
class DCProto_QueryEquipment;
class DCProto_GMOrder;
class DCProto_GMData;
class DCProto_GMSaveData;
class DCProto_GMLoadData;
class DCProto_GMPlayerQuery;
class DCProto_GMChatRecords;
class DCProto_GMRegistrCount;
class DCProto_GMRoleCount;
class DCProto_GMLevelStatistics;
class DCProto_GMOpenGuide;
class DCProto_GMInfo;
class DCProto_LoadAllDataFromGMDataTable;
class DCProto_SaveGMDataTable;
class DCProto_GMAddExchange;
class DCProto_GMRekooRole;
class DCProto_GMAddRekooRMB;
class DCProto_LoadRekooRole;
class DCProto_AddCodeCount;
class InviteCode;
class DCProto_LoadInviteCode;
class DCProto_QueryGMAccount;
class DCProto_RegistDeviceServer;
class DCProto_FactionData;
class DCProto_FactionLoadData;
class DCProto_FactionSaveData;
class DCProto_FactionAddRecord;
class DCProto_FactionDelRecord;
class DCProto_FactionUpdateRecord;
class DCProto_SysFactionMemInfo;
class DCProto_InitRank;
class DCProto_PingPongAward;
class FactionPower;
class DCProto_FactionPower;
class DCProto_PingPongQiuBiTe;

enum DCProto_SaveRoleData_ID {
  DCProto_SaveRoleData_ID_GROUPID = 1,
  DCProto_SaveRoleData_ID_UNITID = 0
};
bool DCProto_SaveRoleData_ID_IsValid(int value);
const DCProto_SaveRoleData_ID DCProto_SaveRoleData_ID_ID_MIN = DCProto_SaveRoleData_ID_UNITID;
const DCProto_SaveRoleData_ID DCProto_SaveRoleData_ID_ID_MAX = DCProto_SaveRoleData_ID_GROUPID;
const int DCProto_SaveRoleData_ID_ID_ARRAYSIZE = DCProto_SaveRoleData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SaveRoleData_ID_descriptor();
inline const ::std::string& DCProto_SaveRoleData_ID_Name(DCProto_SaveRoleData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SaveRoleData_ID_descriptor(), value);
}
inline bool DCProto_SaveRoleData_ID_Parse(
    const ::std::string& name, DCProto_SaveRoleData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SaveRoleData_ID>(
    DCProto_SaveRoleData_ID_descriptor(), name, value);
}
enum DCProto_DeleteRoleData_ID {
  DCProto_DeleteRoleData_ID_GROUPID = 1,
  DCProto_DeleteRoleData_ID_UNITID = 1
};
bool DCProto_DeleteRoleData_ID_IsValid(int value);
const DCProto_DeleteRoleData_ID DCProto_DeleteRoleData_ID_ID_MIN = DCProto_DeleteRoleData_ID_GROUPID;
const DCProto_DeleteRoleData_ID DCProto_DeleteRoleData_ID_ID_MAX = DCProto_DeleteRoleData_ID_GROUPID;
const int DCProto_DeleteRoleData_ID_ID_ARRAYSIZE = DCProto_DeleteRoleData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_DeleteRoleData_ID_descriptor();
inline const ::std::string& DCProto_DeleteRoleData_ID_Name(DCProto_DeleteRoleData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_DeleteRoleData_ID_descriptor(), value);
}
inline bool DCProto_DeleteRoleData_ID_Parse(
    const ::std::string& name, DCProto_DeleteRoleData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_DeleteRoleData_ID>(
    DCProto_DeleteRoleData_ID_descriptor(), name, value);
}
enum DCProto_LoadRoleData_ID {
  DCProto_LoadRoleData_ID_GROUPID = 1,
  DCProto_LoadRoleData_ID_UNITID = 2
};
bool DCProto_LoadRoleData_ID_IsValid(int value);
const DCProto_LoadRoleData_ID DCProto_LoadRoleData_ID_ID_MIN = DCProto_LoadRoleData_ID_GROUPID;
const DCProto_LoadRoleData_ID DCProto_LoadRoleData_ID_ID_MAX = DCProto_LoadRoleData_ID_UNITID;
const int DCProto_LoadRoleData_ID_ID_ARRAYSIZE = DCProto_LoadRoleData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_LoadRoleData_ID_descriptor();
inline const ::std::string& DCProto_LoadRoleData_ID_Name(DCProto_LoadRoleData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_LoadRoleData_ID_descriptor(), value);
}
inline bool DCProto_LoadRoleData_ID_Parse(
    const ::std::string& name, DCProto_LoadRoleData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_LoadRoleData_ID>(
    DCProto_LoadRoleData_ID_descriptor(), name, value);
}
enum DCProto_CollectRole_ID {
  DCProto_CollectRole_ID_GROUPID = 1,
  DCProto_CollectRole_ID_UNITID = 3
};
bool DCProto_CollectRole_ID_IsValid(int value);
const DCProto_CollectRole_ID DCProto_CollectRole_ID_ID_MIN = DCProto_CollectRole_ID_GROUPID;
const DCProto_CollectRole_ID DCProto_CollectRole_ID_ID_MAX = DCProto_CollectRole_ID_UNITID;
const int DCProto_CollectRole_ID_ID_ARRAYSIZE = DCProto_CollectRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_CollectRole_ID_descriptor();
inline const ::std::string& DCProto_CollectRole_ID_Name(DCProto_CollectRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_CollectRole_ID_descriptor(), value);
}
inline bool DCProto_CollectRole_ID_Parse(
    const ::std::string& name, DCProto_CollectRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_CollectRole_ID>(
    DCProto_CollectRole_ID_descriptor(), name, value);
}
enum DCProto_AddAccount_ID {
  DCProto_AddAccount_ID_GROUPID = 1,
  DCProto_AddAccount_ID_UNITID = 4
};
bool DCProto_AddAccount_ID_IsValid(int value);
const DCProto_AddAccount_ID DCProto_AddAccount_ID_ID_MIN = DCProto_AddAccount_ID_GROUPID;
const DCProto_AddAccount_ID DCProto_AddAccount_ID_ID_MAX = DCProto_AddAccount_ID_UNITID;
const int DCProto_AddAccount_ID_ID_ARRAYSIZE = DCProto_AddAccount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_AddAccount_ID_descriptor();
inline const ::std::string& DCProto_AddAccount_ID_Name(DCProto_AddAccount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_AddAccount_ID_descriptor(), value);
}
inline bool DCProto_AddAccount_ID_Parse(
    const ::std::string& name, DCProto_AddAccount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_AddAccount_ID>(
    DCProto_AddAccount_ID_descriptor(), name, value);
}
enum DCProto_AddRole_ID {
  DCProto_AddRole_ID_GROUPID = 1,
  DCProto_AddRole_ID_UNITID = 5
};
bool DCProto_AddRole_ID_IsValid(int value);
const DCProto_AddRole_ID DCProto_AddRole_ID_ID_MIN = DCProto_AddRole_ID_GROUPID;
const DCProto_AddRole_ID DCProto_AddRole_ID_ID_MAX = DCProto_AddRole_ID_UNITID;
const int DCProto_AddRole_ID_ID_ARRAYSIZE = DCProto_AddRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_AddRole_ID_descriptor();
inline const ::std::string& DCProto_AddRole_ID_Name(DCProto_AddRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_AddRole_ID_descriptor(), value);
}
inline bool DCProto_AddRole_ID_Parse(
    const ::std::string& name, DCProto_AddRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_AddRole_ID>(
    DCProto_AddRole_ID_descriptor(), name, value);
}
enum DCProto_SaveSingleRecord_ID {
  DCProto_SaveSingleRecord_ID_GROUPID = 1,
  DCProto_SaveSingleRecord_ID_UNITID = 6
};
bool DCProto_SaveSingleRecord_ID_IsValid(int value);
const DCProto_SaveSingleRecord_ID DCProto_SaveSingleRecord_ID_ID_MIN = DCProto_SaveSingleRecord_ID_GROUPID;
const DCProto_SaveSingleRecord_ID DCProto_SaveSingleRecord_ID_ID_MAX = DCProto_SaveSingleRecord_ID_UNITID;
const int DCProto_SaveSingleRecord_ID_ID_ARRAYSIZE = DCProto_SaveSingleRecord_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SaveSingleRecord_ID_descriptor();
inline const ::std::string& DCProto_SaveSingleRecord_ID_Name(DCProto_SaveSingleRecord_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SaveSingleRecord_ID_descriptor(), value);
}
inline bool DCProto_SaveSingleRecord_ID_Parse(
    const ::std::string& name, DCProto_SaveSingleRecord_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SaveSingleRecord_ID>(
    DCProto_SaveSingleRecord_ID_descriptor(), name, value);
}
enum DCProto_HasName_ID {
  DCProto_HasName_ID_GROUPID = 1,
  DCProto_HasName_ID_UNITID = 7
};
bool DCProto_HasName_ID_IsValid(int value);
const DCProto_HasName_ID DCProto_HasName_ID_ID_MIN = DCProto_HasName_ID_GROUPID;
const DCProto_HasName_ID DCProto_HasName_ID_ID_MAX = DCProto_HasName_ID_UNITID;
const int DCProto_HasName_ID_ID_ARRAYSIZE = DCProto_HasName_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_HasName_ID_descriptor();
inline const ::std::string& DCProto_HasName_ID_Name(DCProto_HasName_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_HasName_ID_descriptor(), value);
}
inline bool DCProto_HasName_ID_Parse(
    const ::std::string& name, DCProto_HasName_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_HasName_ID>(
    DCProto_HasName_ID_descriptor(), name, value);
}
enum DCProto_Login_ID {
  DCProto_Login_ID_GROUPID = 1,
  DCProto_Login_ID_UNITID = 8
};
bool DCProto_Login_ID_IsValid(int value);
const DCProto_Login_ID DCProto_Login_ID_ID_MIN = DCProto_Login_ID_GROUPID;
const DCProto_Login_ID DCProto_Login_ID_ID_MAX = DCProto_Login_ID_UNITID;
const int DCProto_Login_ID_ID_ARRAYSIZE = DCProto_Login_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_Login_ID_descriptor();
inline const ::std::string& DCProto_Login_ID_Name(DCProto_Login_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_Login_ID_descriptor(), value);
}
inline bool DCProto_Login_ID_Parse(
    const ::std::string& name, DCProto_Login_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_Login_ID>(
    DCProto_Login_ID_descriptor(), name, value);
}
enum DCProto_QueryRole_ID {
  DCProto_QueryRole_ID_GROUPID = 1,
  DCProto_QueryRole_ID_UNITID = 9
};
bool DCProto_QueryRole_ID_IsValid(int value);
const DCProto_QueryRole_ID DCProto_QueryRole_ID_ID_MIN = DCProto_QueryRole_ID_GROUPID;
const DCProto_QueryRole_ID DCProto_QueryRole_ID_ID_MAX = DCProto_QueryRole_ID_UNITID;
const int DCProto_QueryRole_ID_ID_ARRAYSIZE = DCProto_QueryRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_QueryRole_ID_descriptor();
inline const ::std::string& DCProto_QueryRole_ID_Name(DCProto_QueryRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_QueryRole_ID_descriptor(), value);
}
inline bool DCProto_QueryRole_ID_Parse(
    const ::std::string& name, DCProto_QueryRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_QueryRole_ID>(
    DCProto_QueryRole_ID_descriptor(), name, value);
}
enum DCProto_SendMail_ID {
  DCProto_SendMail_ID_GROUPID = 1,
  DCProto_SendMail_ID_UNITID = 10
};
bool DCProto_SendMail_ID_IsValid(int value);
const DCProto_SendMail_ID DCProto_SendMail_ID_ID_MIN = DCProto_SendMail_ID_GROUPID;
const DCProto_SendMail_ID DCProto_SendMail_ID_ID_MAX = DCProto_SendMail_ID_UNITID;
const int DCProto_SendMail_ID_ID_ARRAYSIZE = DCProto_SendMail_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SendMail_ID_descriptor();
inline const ::std::string& DCProto_SendMail_ID_Name(DCProto_SendMail_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SendMail_ID_descriptor(), value);
}
inline bool DCProto_SendMail_ID_Parse(
    const ::std::string& name, DCProto_SendMail_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SendMail_ID>(
    DCProto_SendMail_ID_descriptor(), name, value);
}
enum DCProto_GetKeyGift_ID {
  DCProto_GetKeyGift_ID_GROUPID = 1,
  DCProto_GetKeyGift_ID_UNITID = 11
};
bool DCProto_GetKeyGift_ID_IsValid(int value);
const DCProto_GetKeyGift_ID DCProto_GetKeyGift_ID_ID_MIN = DCProto_GetKeyGift_ID_GROUPID;
const DCProto_GetKeyGift_ID DCProto_GetKeyGift_ID_ID_MAX = DCProto_GetKeyGift_ID_UNITID;
const int DCProto_GetKeyGift_ID_ID_ARRAYSIZE = DCProto_GetKeyGift_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GetKeyGift_ID_descriptor();
inline const ::std::string& DCProto_GetKeyGift_ID_Name(DCProto_GetKeyGift_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GetKeyGift_ID_descriptor(), value);
}
inline bool DCProto_GetKeyGift_ID_Parse(
    const ::std::string& name, DCProto_GetKeyGift_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GetKeyGift_ID>(
    DCProto_GetKeyGift_ID_descriptor(), name, value);
}
enum DCProto_Recharge_ID {
  DCProto_Recharge_ID_GROUPID = 1,
  DCProto_Recharge_ID_UNITID = 12
};
bool DCProto_Recharge_ID_IsValid(int value);
const DCProto_Recharge_ID DCProto_Recharge_ID_ID_MIN = DCProto_Recharge_ID_GROUPID;
const DCProto_Recharge_ID DCProto_Recharge_ID_ID_MAX = DCProto_Recharge_ID_UNITID;
const int DCProto_Recharge_ID_ID_ARRAYSIZE = DCProto_Recharge_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_Recharge_ID_descriptor();
inline const ::std::string& DCProto_Recharge_ID_Name(DCProto_Recharge_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_Recharge_ID_descriptor(), value);
}
inline bool DCProto_Recharge_ID_Parse(
    const ::std::string& name, DCProto_Recharge_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_Recharge_ID>(
    DCProto_Recharge_ID_descriptor(), name, value);
}
enum DCProto_CostRecord_ID {
  DCProto_CostRecord_ID_GROUPID = 1,
  DCProto_CostRecord_ID_UNITID = 13
};
bool DCProto_CostRecord_ID_IsValid(int value);
const DCProto_CostRecord_ID DCProto_CostRecord_ID_ID_MIN = DCProto_CostRecord_ID_GROUPID;
const DCProto_CostRecord_ID DCProto_CostRecord_ID_ID_MAX = DCProto_CostRecord_ID_UNITID;
const int DCProto_CostRecord_ID_ID_ARRAYSIZE = DCProto_CostRecord_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_CostRecord_ID_descriptor();
inline const ::std::string& DCProto_CostRecord_ID_Name(DCProto_CostRecord_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_CostRecord_ID_descriptor(), value);
}
inline bool DCProto_CostRecord_ID_Parse(
    const ::std::string& name, DCProto_CostRecord_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_CostRecord_ID>(
    DCProto_CostRecord_ID_descriptor(), name, value);
}
enum DCProto_PlayerStatus_ID {
  DCProto_PlayerStatus_ID_GROUPID = 1,
  DCProto_PlayerStatus_ID_UNITID = 14
};
bool DCProto_PlayerStatus_ID_IsValid(int value);
const DCProto_PlayerStatus_ID DCProto_PlayerStatus_ID_ID_MIN = DCProto_PlayerStatus_ID_GROUPID;
const DCProto_PlayerStatus_ID DCProto_PlayerStatus_ID_ID_MAX = DCProto_PlayerStatus_ID_UNITID;
const int DCProto_PlayerStatus_ID_ID_ARRAYSIZE = DCProto_PlayerStatus_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_PlayerStatus_ID_descriptor();
inline const ::std::string& DCProto_PlayerStatus_ID_Name(DCProto_PlayerStatus_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_PlayerStatus_ID_descriptor(), value);
}
inline bool DCProto_PlayerStatus_ID_Parse(
    const ::std::string& name, DCProto_PlayerStatus_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_PlayerStatus_ID>(
    DCProto_PlayerStatus_ID_descriptor(), name, value);
}
enum DCProto_SaveChat_ID {
  DCProto_SaveChat_ID_GROUPID = 1,
  DCProto_SaveChat_ID_UNITID = 15
};
bool DCProto_SaveChat_ID_IsValid(int value);
const DCProto_SaveChat_ID DCProto_SaveChat_ID_ID_MIN = DCProto_SaveChat_ID_GROUPID;
const DCProto_SaveChat_ID DCProto_SaveChat_ID_ID_MAX = DCProto_SaveChat_ID_UNITID;
const int DCProto_SaveChat_ID_ID_ARRAYSIZE = DCProto_SaveChat_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SaveChat_ID_descriptor();
inline const ::std::string& DCProto_SaveChat_ID_Name(DCProto_SaveChat_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SaveChat_ID_descriptor(), value);
}
inline bool DCProto_SaveChat_ID_Parse(
    const ::std::string& name, DCProto_SaveChat_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SaveChat_ID>(
    DCProto_SaveChat_ID_descriptor(), name, value);
}
enum DCProto_GodTarget_ID {
  DCProto_GodTarget_ID_GROUPID = 1,
  DCProto_GodTarget_ID_UNITID = 16
};
bool DCProto_GodTarget_ID_IsValid(int value);
const DCProto_GodTarget_ID DCProto_GodTarget_ID_ID_MIN = DCProto_GodTarget_ID_GROUPID;
const DCProto_GodTarget_ID DCProto_GodTarget_ID_ID_MAX = DCProto_GodTarget_ID_UNITID;
const int DCProto_GodTarget_ID_ID_ARRAYSIZE = DCProto_GodTarget_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GodTarget_ID_descriptor();
inline const ::std::string& DCProto_GodTarget_ID_Name(DCProto_GodTarget_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GodTarget_ID_descriptor(), value);
}
inline bool DCProto_GodTarget_ID_Parse(
    const ::std::string& name, DCProto_GodTarget_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GodTarget_ID>(
    DCProto_GodTarget_ID_descriptor(), name, value);
}
enum DCProto_LoadPlayerAtt_ID {
  DCProto_LoadPlayerAtt_ID_GROUPID = 1,
  DCProto_LoadPlayerAtt_ID_UNITID = 17
};
bool DCProto_LoadPlayerAtt_ID_IsValid(int value);
const DCProto_LoadPlayerAtt_ID DCProto_LoadPlayerAtt_ID_ID_MIN = DCProto_LoadPlayerAtt_ID_GROUPID;
const DCProto_LoadPlayerAtt_ID DCProto_LoadPlayerAtt_ID_ID_MAX = DCProto_LoadPlayerAtt_ID_UNITID;
const int DCProto_LoadPlayerAtt_ID_ID_ARRAYSIZE = DCProto_LoadPlayerAtt_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_LoadPlayerAtt_ID_descriptor();
inline const ::std::string& DCProto_LoadPlayerAtt_ID_Name(DCProto_LoadPlayerAtt_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_LoadPlayerAtt_ID_descriptor(), value);
}
inline bool DCProto_LoadPlayerAtt_ID_Parse(
    const ::std::string& name, DCProto_LoadPlayerAtt_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_LoadPlayerAtt_ID>(
    DCProto_LoadPlayerAtt_ID_descriptor(), name, value);
}
enum DCProto_LoadFriendsFans_ID {
  DCProto_LoadFriendsFans_ID_GROUPID = 1,
  DCProto_LoadFriendsFans_ID_UNITID = 18
};
bool DCProto_LoadFriendsFans_ID_IsValid(int value);
const DCProto_LoadFriendsFans_ID DCProto_LoadFriendsFans_ID_ID_MIN = DCProto_LoadFriendsFans_ID_GROUPID;
const DCProto_LoadFriendsFans_ID DCProto_LoadFriendsFans_ID_ID_MAX = DCProto_LoadFriendsFans_ID_UNITID;
const int DCProto_LoadFriendsFans_ID_ID_ARRAYSIZE = DCProto_LoadFriendsFans_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_LoadFriendsFans_ID_descriptor();
inline const ::std::string& DCProto_LoadFriendsFans_ID_Name(DCProto_LoadFriendsFans_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_LoadFriendsFans_ID_descriptor(), value);
}
inline bool DCProto_LoadFriendsFans_ID_Parse(
    const ::std::string& name, DCProto_LoadFriendsFans_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_LoadFriendsFans_ID>(
    DCProto_LoadFriendsFans_ID_descriptor(), name, value);
}
enum DCProto_ModifyFixedEventBit_ID {
  DCProto_ModifyFixedEventBit_ID_GROUPID = 1,
  DCProto_ModifyFixedEventBit_ID_UNITID = 19
};
bool DCProto_ModifyFixedEventBit_ID_IsValid(int value);
const DCProto_ModifyFixedEventBit_ID DCProto_ModifyFixedEventBit_ID_ID_MIN = DCProto_ModifyFixedEventBit_ID_GROUPID;
const DCProto_ModifyFixedEventBit_ID DCProto_ModifyFixedEventBit_ID_ID_MAX = DCProto_ModifyFixedEventBit_ID_UNITID;
const int DCProto_ModifyFixedEventBit_ID_ID_ARRAYSIZE = DCProto_ModifyFixedEventBit_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_ModifyFixedEventBit_ID_descriptor();
inline const ::std::string& DCProto_ModifyFixedEventBit_ID_Name(DCProto_ModifyFixedEventBit_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_ModifyFixedEventBit_ID_descriptor(), value);
}
inline bool DCProto_ModifyFixedEventBit_ID_Parse(
    const ::std::string& name, DCProto_ModifyFixedEventBit_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_ModifyFixedEventBit_ID>(
    DCProto_ModifyFixedEventBit_ID_descriptor(), name, value);
}
enum DCProto_ModifyGodRank_ID {
  DCProto_ModifyGodRank_ID_GROUPID = 1,
  DCProto_ModifyGodRank_ID_UNITID = 20
};
bool DCProto_ModifyGodRank_ID_IsValid(int value);
const DCProto_ModifyGodRank_ID DCProto_ModifyGodRank_ID_ID_MIN = DCProto_ModifyGodRank_ID_GROUPID;
const DCProto_ModifyGodRank_ID DCProto_ModifyGodRank_ID_ID_MAX = DCProto_ModifyGodRank_ID_UNITID;
const int DCProto_ModifyGodRank_ID_ID_ARRAYSIZE = DCProto_ModifyGodRank_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_ModifyGodRank_ID_descriptor();
inline const ::std::string& DCProto_ModifyGodRank_ID_Name(DCProto_ModifyGodRank_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_ModifyGodRank_ID_descriptor(), value);
}
inline bool DCProto_ModifyGodRank_ID_Parse(
    const ::std::string& name, DCProto_ModifyGodRank_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_ModifyGodRank_ID>(
    DCProto_ModifyGodRank_ID_descriptor(), name, value);
}
enum DCProto_SaveGodRankInfoRecord_ID {
  DCProto_SaveGodRankInfoRecord_ID_GROUPID = 1,
  DCProto_SaveGodRankInfoRecord_ID_UNITID = 21
};
bool DCProto_SaveGodRankInfoRecord_ID_IsValid(int value);
const DCProto_SaveGodRankInfoRecord_ID DCProto_SaveGodRankInfoRecord_ID_ID_MIN = DCProto_SaveGodRankInfoRecord_ID_GROUPID;
const DCProto_SaveGodRankInfoRecord_ID DCProto_SaveGodRankInfoRecord_ID_ID_MAX = DCProto_SaveGodRankInfoRecord_ID_UNITID;
const int DCProto_SaveGodRankInfoRecord_ID_ID_ARRAYSIZE = DCProto_SaveGodRankInfoRecord_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SaveGodRankInfoRecord_ID_descriptor();
inline const ::std::string& DCProto_SaveGodRankInfoRecord_ID_Name(DCProto_SaveGodRankInfoRecord_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SaveGodRankInfoRecord_ID_descriptor(), value);
}
inline bool DCProto_SaveGodRankInfoRecord_ID_Parse(
    const ::std::string& name, DCProto_SaveGodRankInfoRecord_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SaveGodRankInfoRecord_ID>(
    DCProto_SaveGodRankInfoRecord_ID_descriptor(), name, value);
}
enum DCProto_QueryGodRole_ID {
  DCProto_QueryGodRole_ID_GROUPID = 1,
  DCProto_QueryGodRole_ID_UNITID = 22
};
bool DCProto_QueryGodRole_ID_IsValid(int value);
const DCProto_QueryGodRole_ID DCProto_QueryGodRole_ID_ID_MIN = DCProto_QueryGodRole_ID_GROUPID;
const DCProto_QueryGodRole_ID DCProto_QueryGodRole_ID_ID_MAX = DCProto_QueryGodRole_ID_UNITID;
const int DCProto_QueryGodRole_ID_ID_ARRAYSIZE = DCProto_QueryGodRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_QueryGodRole_ID_descriptor();
inline const ::std::string& DCProto_QueryGodRole_ID_Name(DCProto_QueryGodRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_QueryGodRole_ID_descriptor(), value);
}
inline bool DCProto_QueryGodRole_ID_Parse(
    const ::std::string& name, DCProto_QueryGodRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_QueryGodRole_ID>(
    DCProto_QueryGodRole_ID_descriptor(), name, value);
}
enum DCProto_RandomRoles_ID {
  DCProto_RandomRoles_ID_GROUPID = 1,
  DCProto_RandomRoles_ID_UNITID = 23
};
bool DCProto_RandomRoles_ID_IsValid(int value);
const DCProto_RandomRoles_ID DCProto_RandomRoles_ID_ID_MIN = DCProto_RandomRoles_ID_GROUPID;
const DCProto_RandomRoles_ID DCProto_RandomRoles_ID_ID_MAX = DCProto_RandomRoles_ID_UNITID;
const int DCProto_RandomRoles_ID_ID_ARRAYSIZE = DCProto_RandomRoles_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_RandomRoles_ID_descriptor();
inline const ::std::string& DCProto_RandomRoles_ID_Name(DCProto_RandomRoles_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_RandomRoles_ID_descriptor(), value);
}
inline bool DCProto_RandomRoles_ID_Parse(
    const ::std::string& name, DCProto_RandomRoles_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_RandomRoles_ID>(
    DCProto_RandomRoles_ID_descriptor(), name, value);
}
enum DCProto_SendMailExceptRoles_ID {
  DCProto_SendMailExceptRoles_ID_GROUPID = 1,
  DCProto_SendMailExceptRoles_ID_UNITID = 24
};
bool DCProto_SendMailExceptRoles_ID_IsValid(int value);
const DCProto_SendMailExceptRoles_ID DCProto_SendMailExceptRoles_ID_ID_MIN = DCProto_SendMailExceptRoles_ID_GROUPID;
const DCProto_SendMailExceptRoles_ID DCProto_SendMailExceptRoles_ID_ID_MAX = DCProto_SendMailExceptRoles_ID_UNITID;
const int DCProto_SendMailExceptRoles_ID_ID_ARRAYSIZE = DCProto_SendMailExceptRoles_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SendMailExceptRoles_ID_descriptor();
inline const ::std::string& DCProto_SendMailExceptRoles_ID_Name(DCProto_SendMailExceptRoles_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SendMailExceptRoles_ID_descriptor(), value);
}
inline bool DCProto_SendMailExceptRoles_ID_Parse(
    const ::std::string& name, DCProto_SendMailExceptRoles_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SendMailExceptRoles_ID>(
    DCProto_SendMailExceptRoles_ID_descriptor(), name, value);
}
enum DCProto_AddOutLineFriends_ID {
  DCProto_AddOutLineFriends_ID_GROUPID = 1,
  DCProto_AddOutLineFriends_ID_UNITID = 25
};
bool DCProto_AddOutLineFriends_ID_IsValid(int value);
const DCProto_AddOutLineFriends_ID DCProto_AddOutLineFriends_ID_ID_MIN = DCProto_AddOutLineFriends_ID_GROUPID;
const DCProto_AddOutLineFriends_ID DCProto_AddOutLineFriends_ID_ID_MAX = DCProto_AddOutLineFriends_ID_UNITID;
const int DCProto_AddOutLineFriends_ID_ID_ARRAYSIZE = DCProto_AddOutLineFriends_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_AddOutLineFriends_ID_descriptor();
inline const ::std::string& DCProto_AddOutLineFriends_ID_Name(DCProto_AddOutLineFriends_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_AddOutLineFriends_ID_descriptor(), value);
}
inline bool DCProto_AddOutLineFriends_ID_Parse(
    const ::std::string& name, DCProto_AddOutLineFriends_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_AddOutLineFriends_ID>(
    DCProto_AddOutLineFriends_ID_descriptor(), name, value);
}
enum DCProto_LoadHireRoleDate_ID {
  DCProto_LoadHireRoleDate_ID_GROUPID = 1,
  DCProto_LoadHireRoleDate_ID_UNITID = 26
};
bool DCProto_LoadHireRoleDate_ID_IsValid(int value);
const DCProto_LoadHireRoleDate_ID DCProto_LoadHireRoleDate_ID_ID_MIN = DCProto_LoadHireRoleDate_ID_GROUPID;
const DCProto_LoadHireRoleDate_ID DCProto_LoadHireRoleDate_ID_ID_MAX = DCProto_LoadHireRoleDate_ID_UNITID;
const int DCProto_LoadHireRoleDate_ID_ID_ARRAYSIZE = DCProto_LoadHireRoleDate_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_LoadHireRoleDate_ID_descriptor();
inline const ::std::string& DCProto_LoadHireRoleDate_ID_Name(DCProto_LoadHireRoleDate_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_LoadHireRoleDate_ID_descriptor(), value);
}
inline bool DCProto_LoadHireRoleDate_ID_Parse(
    const ::std::string& name, DCProto_LoadHireRoleDate_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_LoadHireRoleDate_ID>(
    DCProto_LoadHireRoleDate_ID_descriptor(), name, value);
}
enum DCProto_QueryRoleFaction_ID {
  DCProto_QueryRoleFaction_ID_GROUPID = 1,
  DCProto_QueryRoleFaction_ID_UNITID = 27
};
bool DCProto_QueryRoleFaction_ID_IsValid(int value);
const DCProto_QueryRoleFaction_ID DCProto_QueryRoleFaction_ID_ID_MIN = DCProto_QueryRoleFaction_ID_GROUPID;
const DCProto_QueryRoleFaction_ID DCProto_QueryRoleFaction_ID_ID_MAX = DCProto_QueryRoleFaction_ID_UNITID;
const int DCProto_QueryRoleFaction_ID_ID_ARRAYSIZE = DCProto_QueryRoleFaction_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_QueryRoleFaction_ID_descriptor();
inline const ::std::string& DCProto_QueryRoleFaction_ID_Name(DCProto_QueryRoleFaction_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_QueryRoleFaction_ID_descriptor(), value);
}
inline bool DCProto_QueryRoleFaction_ID_Parse(
    const ::std::string& name, DCProto_QueryRoleFaction_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_QueryRoleFaction_ID>(
    DCProto_QueryRoleFaction_ID_descriptor(), name, value);
}
enum DCProto_TencentBuyGoodsUrl_ID {
  DCProto_TencentBuyGoodsUrl_ID_GROUPID = 1,
  DCProto_TencentBuyGoodsUrl_ID_UNITID = 28
};
bool DCProto_TencentBuyGoodsUrl_ID_IsValid(int value);
const DCProto_TencentBuyGoodsUrl_ID DCProto_TencentBuyGoodsUrl_ID_ID_MIN = DCProto_TencentBuyGoodsUrl_ID_GROUPID;
const DCProto_TencentBuyGoodsUrl_ID DCProto_TencentBuyGoodsUrl_ID_ID_MAX = DCProto_TencentBuyGoodsUrl_ID_UNITID;
const int DCProto_TencentBuyGoodsUrl_ID_ID_ARRAYSIZE = DCProto_TencentBuyGoodsUrl_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_TencentBuyGoodsUrl_ID_descriptor();
inline const ::std::string& DCProto_TencentBuyGoodsUrl_ID_Name(DCProto_TencentBuyGoodsUrl_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_TencentBuyGoodsUrl_ID_descriptor(), value);
}
inline bool DCProto_TencentBuyGoodsUrl_ID_Parse(
    const ::std::string& name, DCProto_TencentBuyGoodsUrl_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_TencentBuyGoodsUrl_ID>(
    DCProto_TencentBuyGoodsUrl_ID_descriptor(), name, value);
}
enum DCProto_Cost_ID {
  DCProto_Cost_ID_GROUPID = 1,
  DCProto_Cost_ID_UNITID = 29
};
bool DCProto_Cost_ID_IsValid(int value);
const DCProto_Cost_ID DCProto_Cost_ID_ID_MIN = DCProto_Cost_ID_GROUPID;
const DCProto_Cost_ID DCProto_Cost_ID_ID_MAX = DCProto_Cost_ID_UNITID;
const int DCProto_Cost_ID_ID_ARRAYSIZE = DCProto_Cost_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_Cost_ID_descriptor();
inline const ::std::string& DCProto_Cost_ID_Name(DCProto_Cost_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_Cost_ID_descriptor(), value);
}
inline bool DCProto_Cost_ID_Parse(
    const ::std::string& name, DCProto_Cost_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_Cost_ID>(
    DCProto_Cost_ID_descriptor(), name, value);
}
enum DCProto_FilterRecharge_ID {
  DCProto_FilterRecharge_ID_GROUPID = 1,
  DCProto_FilterRecharge_ID_UNITID = 30
};
bool DCProto_FilterRecharge_ID_IsValid(int value);
const DCProto_FilterRecharge_ID DCProto_FilterRecharge_ID_ID_MIN = DCProto_FilterRecharge_ID_GROUPID;
const DCProto_FilterRecharge_ID DCProto_FilterRecharge_ID_ID_MAX = DCProto_FilterRecharge_ID_UNITID;
const int DCProto_FilterRecharge_ID_ID_ARRAYSIZE = DCProto_FilterRecharge_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_FilterRecharge_ID_descriptor();
inline const ::std::string& DCProto_FilterRecharge_ID_Name(DCProto_FilterRecharge_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_FilterRecharge_ID_descriptor(), value);
}
inline bool DCProto_FilterRecharge_ID_Parse(
    const ::std::string& name, DCProto_FilterRecharge_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_FilterRecharge_ID>(
    DCProto_FilterRecharge_ID_descriptor(), name, value);
}
enum DCProto_SetVIP_ID {
  DCProto_SetVIP_ID_GROUPID = 1,
  DCProto_SetVIP_ID_UNITID = 31
};
bool DCProto_SetVIP_ID_IsValid(int value);
const DCProto_SetVIP_ID DCProto_SetVIP_ID_ID_MIN = DCProto_SetVIP_ID_GROUPID;
const DCProto_SetVIP_ID DCProto_SetVIP_ID_ID_MAX = DCProto_SetVIP_ID_UNITID;
const int DCProto_SetVIP_ID_ID_ARRAYSIZE = DCProto_SetVIP_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SetVIP_ID_descriptor();
inline const ::std::string& DCProto_SetVIP_ID_Name(DCProto_SetVIP_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SetVIP_ID_descriptor(), value);
}
inline bool DCProto_SetVIP_ID_Parse(
    const ::std::string& name, DCProto_SetVIP_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SetVIP_ID>(
    DCProto_SetVIP_ID_descriptor(), name, value);
}
enum DCProto_CollectEquipment_ID {
  DCProto_CollectEquipment_ID_GROUPID = 2,
  DCProto_CollectEquipment_ID_UNITID = 0
};
bool DCProto_CollectEquipment_ID_IsValid(int value);
const DCProto_CollectEquipment_ID DCProto_CollectEquipment_ID_ID_MIN = DCProto_CollectEquipment_ID_UNITID;
const DCProto_CollectEquipment_ID DCProto_CollectEquipment_ID_ID_MAX = DCProto_CollectEquipment_ID_GROUPID;
const int DCProto_CollectEquipment_ID_ID_ARRAYSIZE = DCProto_CollectEquipment_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_CollectEquipment_ID_descriptor();
inline const ::std::string& DCProto_CollectEquipment_ID_Name(DCProto_CollectEquipment_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_CollectEquipment_ID_descriptor(), value);
}
inline bool DCProto_CollectEquipment_ID_Parse(
    const ::std::string& name, DCProto_CollectEquipment_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_CollectEquipment_ID>(
    DCProto_CollectEquipment_ID_descriptor(), name, value);
}
enum DCProto_SaveEquipmentData_ID {
  DCProto_SaveEquipmentData_ID_GROUPID = 2,
  DCProto_SaveEquipmentData_ID_UNITID = 1
};
bool DCProto_SaveEquipmentData_ID_IsValid(int value);
const DCProto_SaveEquipmentData_ID DCProto_SaveEquipmentData_ID_ID_MIN = DCProto_SaveEquipmentData_ID_UNITID;
const DCProto_SaveEquipmentData_ID DCProto_SaveEquipmentData_ID_ID_MAX = DCProto_SaveEquipmentData_ID_GROUPID;
const int DCProto_SaveEquipmentData_ID_ID_ARRAYSIZE = DCProto_SaveEquipmentData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SaveEquipmentData_ID_descriptor();
inline const ::std::string& DCProto_SaveEquipmentData_ID_Name(DCProto_SaveEquipmentData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SaveEquipmentData_ID_descriptor(), value);
}
inline bool DCProto_SaveEquipmentData_ID_Parse(
    const ::std::string& name, DCProto_SaveEquipmentData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SaveEquipmentData_ID>(
    DCProto_SaveEquipmentData_ID_descriptor(), name, value);
}
enum DCProto_LoadEquipmentData_ID {
  DCProto_LoadEquipmentData_ID_GROUPID = 2,
  DCProto_LoadEquipmentData_ID_UNITID = 2
};
bool DCProto_LoadEquipmentData_ID_IsValid(int value);
const DCProto_LoadEquipmentData_ID DCProto_LoadEquipmentData_ID_ID_MIN = DCProto_LoadEquipmentData_ID_GROUPID;
const DCProto_LoadEquipmentData_ID DCProto_LoadEquipmentData_ID_ID_MAX = DCProto_LoadEquipmentData_ID_GROUPID;
const int DCProto_LoadEquipmentData_ID_ID_ARRAYSIZE = DCProto_LoadEquipmentData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_LoadEquipmentData_ID_descriptor();
inline const ::std::string& DCProto_LoadEquipmentData_ID_Name(DCProto_LoadEquipmentData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_LoadEquipmentData_ID_descriptor(), value);
}
inline bool DCProto_LoadEquipmentData_ID_Parse(
    const ::std::string& name, DCProto_LoadEquipmentData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_LoadEquipmentData_ID>(
    DCProto_LoadEquipmentData_ID_descriptor(), name, value);
}
enum DCProto_DeleteEquipmentData_ID {
  DCProto_DeleteEquipmentData_ID_GROUPID = 2,
  DCProto_DeleteEquipmentData_ID_UNITID = 3
};
bool DCProto_DeleteEquipmentData_ID_IsValid(int value);
const DCProto_DeleteEquipmentData_ID DCProto_DeleteEquipmentData_ID_ID_MIN = DCProto_DeleteEquipmentData_ID_GROUPID;
const DCProto_DeleteEquipmentData_ID DCProto_DeleteEquipmentData_ID_ID_MAX = DCProto_DeleteEquipmentData_ID_UNITID;
const int DCProto_DeleteEquipmentData_ID_ID_ARRAYSIZE = DCProto_DeleteEquipmentData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_DeleteEquipmentData_ID_descriptor();
inline const ::std::string& DCProto_DeleteEquipmentData_ID_Name(DCProto_DeleteEquipmentData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_DeleteEquipmentData_ID_descriptor(), value);
}
inline bool DCProto_DeleteEquipmentData_ID_Parse(
    const ::std::string& name, DCProto_DeleteEquipmentData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_DeleteEquipmentData_ID>(
    DCProto_DeleteEquipmentData_ID_descriptor(), name, value);
}
enum DCProto_QueryEquipment_ID {
  DCProto_QueryEquipment_ID_GROUPID = 2,
  DCProto_QueryEquipment_ID_UNITID = 4
};
bool DCProto_QueryEquipment_ID_IsValid(int value);
const DCProto_QueryEquipment_ID DCProto_QueryEquipment_ID_ID_MIN = DCProto_QueryEquipment_ID_GROUPID;
const DCProto_QueryEquipment_ID DCProto_QueryEquipment_ID_ID_MAX = DCProto_QueryEquipment_ID_UNITID;
const int DCProto_QueryEquipment_ID_ID_ARRAYSIZE = DCProto_QueryEquipment_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_QueryEquipment_ID_descriptor();
inline const ::std::string& DCProto_QueryEquipment_ID_Name(DCProto_QueryEquipment_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_QueryEquipment_ID_descriptor(), value);
}
inline bool DCProto_QueryEquipment_ID_Parse(
    const ::std::string& name, DCProto_QueryEquipment_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_QueryEquipment_ID>(
    DCProto_QueryEquipment_ID_descriptor(), name, value);
}
enum DCProto_GMOrder_ID {
  DCProto_GMOrder_ID_GROUPID = 3,
  DCProto_GMOrder_ID_UNITID = 0
};
bool DCProto_GMOrder_ID_IsValid(int value);
const DCProto_GMOrder_ID DCProto_GMOrder_ID_ID_MIN = DCProto_GMOrder_ID_UNITID;
const DCProto_GMOrder_ID DCProto_GMOrder_ID_ID_MAX = DCProto_GMOrder_ID_GROUPID;
const int DCProto_GMOrder_ID_ID_ARRAYSIZE = DCProto_GMOrder_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMOrder_ID_descriptor();
inline const ::std::string& DCProto_GMOrder_ID_Name(DCProto_GMOrder_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMOrder_ID_descriptor(), value);
}
inline bool DCProto_GMOrder_ID_Parse(
    const ::std::string& name, DCProto_GMOrder_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMOrder_ID>(
    DCProto_GMOrder_ID_descriptor(), name, value);
}
enum DCProto_GMData_ID {
  DCProto_GMData_ID_GROUPID = 3,
  DCProto_GMData_ID_UNITID = 1
};
bool DCProto_GMData_ID_IsValid(int value);
const DCProto_GMData_ID DCProto_GMData_ID_ID_MIN = DCProto_GMData_ID_UNITID;
const DCProto_GMData_ID DCProto_GMData_ID_ID_MAX = DCProto_GMData_ID_GROUPID;
const int DCProto_GMData_ID_ID_ARRAYSIZE = DCProto_GMData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMData_ID_descriptor();
inline const ::std::string& DCProto_GMData_ID_Name(DCProto_GMData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMData_ID_descriptor(), value);
}
inline bool DCProto_GMData_ID_Parse(
    const ::std::string& name, DCProto_GMData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMData_ID>(
    DCProto_GMData_ID_descriptor(), name, value);
}
enum DCProto_GMSaveData_ID {
  DCProto_GMSaveData_ID_GROUPID = 3,
  DCProto_GMSaveData_ID_UNITID = 2
};
bool DCProto_GMSaveData_ID_IsValid(int value);
const DCProto_GMSaveData_ID DCProto_GMSaveData_ID_ID_MIN = DCProto_GMSaveData_ID_UNITID;
const DCProto_GMSaveData_ID DCProto_GMSaveData_ID_ID_MAX = DCProto_GMSaveData_ID_GROUPID;
const int DCProto_GMSaveData_ID_ID_ARRAYSIZE = DCProto_GMSaveData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMSaveData_ID_descriptor();
inline const ::std::string& DCProto_GMSaveData_ID_Name(DCProto_GMSaveData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMSaveData_ID_descriptor(), value);
}
inline bool DCProto_GMSaveData_ID_Parse(
    const ::std::string& name, DCProto_GMSaveData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMSaveData_ID>(
    DCProto_GMSaveData_ID_descriptor(), name, value);
}
enum DCProto_GMLoadData_ID {
  DCProto_GMLoadData_ID_GROUPID = 3,
  DCProto_GMLoadData_ID_UNITID = 3
};
bool DCProto_GMLoadData_ID_IsValid(int value);
const DCProto_GMLoadData_ID DCProto_GMLoadData_ID_ID_MIN = DCProto_GMLoadData_ID_GROUPID;
const DCProto_GMLoadData_ID DCProto_GMLoadData_ID_ID_MAX = DCProto_GMLoadData_ID_GROUPID;
const int DCProto_GMLoadData_ID_ID_ARRAYSIZE = DCProto_GMLoadData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMLoadData_ID_descriptor();
inline const ::std::string& DCProto_GMLoadData_ID_Name(DCProto_GMLoadData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMLoadData_ID_descriptor(), value);
}
inline bool DCProto_GMLoadData_ID_Parse(
    const ::std::string& name, DCProto_GMLoadData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMLoadData_ID>(
    DCProto_GMLoadData_ID_descriptor(), name, value);
}
enum DCProto_GMPlayerQuery_ID {
  DCProto_GMPlayerQuery_ID_GROUPID = 3,
  DCProto_GMPlayerQuery_ID_UNITID = 4
};
bool DCProto_GMPlayerQuery_ID_IsValid(int value);
const DCProto_GMPlayerQuery_ID DCProto_GMPlayerQuery_ID_ID_MIN = DCProto_GMPlayerQuery_ID_GROUPID;
const DCProto_GMPlayerQuery_ID DCProto_GMPlayerQuery_ID_ID_MAX = DCProto_GMPlayerQuery_ID_UNITID;
const int DCProto_GMPlayerQuery_ID_ID_ARRAYSIZE = DCProto_GMPlayerQuery_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMPlayerQuery_ID_descriptor();
inline const ::std::string& DCProto_GMPlayerQuery_ID_Name(DCProto_GMPlayerQuery_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMPlayerQuery_ID_descriptor(), value);
}
inline bool DCProto_GMPlayerQuery_ID_Parse(
    const ::std::string& name, DCProto_GMPlayerQuery_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMPlayerQuery_ID>(
    DCProto_GMPlayerQuery_ID_descriptor(), name, value);
}
enum DCProto_GMChatRecords_ID {
  DCProto_GMChatRecords_ID_GROUPID = 3,
  DCProto_GMChatRecords_ID_UNITID = 5
};
bool DCProto_GMChatRecords_ID_IsValid(int value);
const DCProto_GMChatRecords_ID DCProto_GMChatRecords_ID_ID_MIN = DCProto_GMChatRecords_ID_GROUPID;
const DCProto_GMChatRecords_ID DCProto_GMChatRecords_ID_ID_MAX = DCProto_GMChatRecords_ID_UNITID;
const int DCProto_GMChatRecords_ID_ID_ARRAYSIZE = DCProto_GMChatRecords_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMChatRecords_ID_descriptor();
inline const ::std::string& DCProto_GMChatRecords_ID_Name(DCProto_GMChatRecords_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMChatRecords_ID_descriptor(), value);
}
inline bool DCProto_GMChatRecords_ID_Parse(
    const ::std::string& name, DCProto_GMChatRecords_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMChatRecords_ID>(
    DCProto_GMChatRecords_ID_descriptor(), name, value);
}
enum DCProto_GMRegistrCount_ID {
  DCProto_GMRegistrCount_ID_GROUPID = 3,
  DCProto_GMRegistrCount_ID_UNITID = 6
};
bool DCProto_GMRegistrCount_ID_IsValid(int value);
const DCProto_GMRegistrCount_ID DCProto_GMRegistrCount_ID_ID_MIN = DCProto_GMRegistrCount_ID_GROUPID;
const DCProto_GMRegistrCount_ID DCProto_GMRegistrCount_ID_ID_MAX = DCProto_GMRegistrCount_ID_UNITID;
const int DCProto_GMRegistrCount_ID_ID_ARRAYSIZE = DCProto_GMRegistrCount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMRegistrCount_ID_descriptor();
inline const ::std::string& DCProto_GMRegistrCount_ID_Name(DCProto_GMRegistrCount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMRegistrCount_ID_descriptor(), value);
}
inline bool DCProto_GMRegistrCount_ID_Parse(
    const ::std::string& name, DCProto_GMRegistrCount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMRegistrCount_ID>(
    DCProto_GMRegistrCount_ID_descriptor(), name, value);
}
enum DCProto_GMRoleCount_ID {
  DCProto_GMRoleCount_ID_GROUPID = 3,
  DCProto_GMRoleCount_ID_UNITID = 7
};
bool DCProto_GMRoleCount_ID_IsValid(int value);
const DCProto_GMRoleCount_ID DCProto_GMRoleCount_ID_ID_MIN = DCProto_GMRoleCount_ID_GROUPID;
const DCProto_GMRoleCount_ID DCProto_GMRoleCount_ID_ID_MAX = DCProto_GMRoleCount_ID_UNITID;
const int DCProto_GMRoleCount_ID_ID_ARRAYSIZE = DCProto_GMRoleCount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMRoleCount_ID_descriptor();
inline const ::std::string& DCProto_GMRoleCount_ID_Name(DCProto_GMRoleCount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMRoleCount_ID_descriptor(), value);
}
inline bool DCProto_GMRoleCount_ID_Parse(
    const ::std::string& name, DCProto_GMRoleCount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMRoleCount_ID>(
    DCProto_GMRoleCount_ID_descriptor(), name, value);
}
enum DCProto_GMLevelStatistics_ID {
  DCProto_GMLevelStatistics_ID_GROUPID = 3,
  DCProto_GMLevelStatistics_ID_UNITID = 8
};
bool DCProto_GMLevelStatistics_ID_IsValid(int value);
const DCProto_GMLevelStatistics_ID DCProto_GMLevelStatistics_ID_ID_MIN = DCProto_GMLevelStatistics_ID_GROUPID;
const DCProto_GMLevelStatistics_ID DCProto_GMLevelStatistics_ID_ID_MAX = DCProto_GMLevelStatistics_ID_UNITID;
const int DCProto_GMLevelStatistics_ID_ID_ARRAYSIZE = DCProto_GMLevelStatistics_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMLevelStatistics_ID_descriptor();
inline const ::std::string& DCProto_GMLevelStatistics_ID_Name(DCProto_GMLevelStatistics_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMLevelStatistics_ID_descriptor(), value);
}
inline bool DCProto_GMLevelStatistics_ID_Parse(
    const ::std::string& name, DCProto_GMLevelStatistics_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMLevelStatistics_ID>(
    DCProto_GMLevelStatistics_ID_descriptor(), name, value);
}
enum DCProto_GMOpenGuide_ID {
  DCProto_GMOpenGuide_ID_GROUPID = 3,
  DCProto_GMOpenGuide_ID_UNITID = 9
};
bool DCProto_GMOpenGuide_ID_IsValid(int value);
const DCProto_GMOpenGuide_ID DCProto_GMOpenGuide_ID_ID_MIN = DCProto_GMOpenGuide_ID_GROUPID;
const DCProto_GMOpenGuide_ID DCProto_GMOpenGuide_ID_ID_MAX = DCProto_GMOpenGuide_ID_UNITID;
const int DCProto_GMOpenGuide_ID_ID_ARRAYSIZE = DCProto_GMOpenGuide_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMOpenGuide_ID_descriptor();
inline const ::std::string& DCProto_GMOpenGuide_ID_Name(DCProto_GMOpenGuide_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMOpenGuide_ID_descriptor(), value);
}
inline bool DCProto_GMOpenGuide_ID_Parse(
    const ::std::string& name, DCProto_GMOpenGuide_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMOpenGuide_ID>(
    DCProto_GMOpenGuide_ID_descriptor(), name, value);
}
enum DCProto_LoadAllDataFromGMDataTable_ID {
  DCProto_LoadAllDataFromGMDataTable_ID_GROUPID = 3,
  DCProto_LoadAllDataFromGMDataTable_ID_UNITID = 10
};
bool DCProto_LoadAllDataFromGMDataTable_ID_IsValid(int value);
const DCProto_LoadAllDataFromGMDataTable_ID DCProto_LoadAllDataFromGMDataTable_ID_ID_MIN = DCProto_LoadAllDataFromGMDataTable_ID_GROUPID;
const DCProto_LoadAllDataFromGMDataTable_ID DCProto_LoadAllDataFromGMDataTable_ID_ID_MAX = DCProto_LoadAllDataFromGMDataTable_ID_UNITID;
const int DCProto_LoadAllDataFromGMDataTable_ID_ID_ARRAYSIZE = DCProto_LoadAllDataFromGMDataTable_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_LoadAllDataFromGMDataTable_ID_descriptor();
inline const ::std::string& DCProto_LoadAllDataFromGMDataTable_ID_Name(DCProto_LoadAllDataFromGMDataTable_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_LoadAllDataFromGMDataTable_ID_descriptor(), value);
}
inline bool DCProto_LoadAllDataFromGMDataTable_ID_Parse(
    const ::std::string& name, DCProto_LoadAllDataFromGMDataTable_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_LoadAllDataFromGMDataTable_ID>(
    DCProto_LoadAllDataFromGMDataTable_ID_descriptor(), name, value);
}
enum DCProto_SaveGMDataTable_ID {
  DCProto_SaveGMDataTable_ID_GROUPID = 3,
  DCProto_SaveGMDataTable_ID_UNITID = 11
};
bool DCProto_SaveGMDataTable_ID_IsValid(int value);
const DCProto_SaveGMDataTable_ID DCProto_SaveGMDataTable_ID_ID_MIN = DCProto_SaveGMDataTable_ID_GROUPID;
const DCProto_SaveGMDataTable_ID DCProto_SaveGMDataTable_ID_ID_MAX = DCProto_SaveGMDataTable_ID_UNITID;
const int DCProto_SaveGMDataTable_ID_ID_ARRAYSIZE = DCProto_SaveGMDataTable_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SaveGMDataTable_ID_descriptor();
inline const ::std::string& DCProto_SaveGMDataTable_ID_Name(DCProto_SaveGMDataTable_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SaveGMDataTable_ID_descriptor(), value);
}
inline bool DCProto_SaveGMDataTable_ID_Parse(
    const ::std::string& name, DCProto_SaveGMDataTable_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SaveGMDataTable_ID>(
    DCProto_SaveGMDataTable_ID_descriptor(), name, value);
}
enum DCProto_GMAddExchange_ID {
  DCProto_GMAddExchange_ID_GROUPID = 3,
  DCProto_GMAddExchange_ID_UNITID = 12
};
bool DCProto_GMAddExchange_ID_IsValid(int value);
const DCProto_GMAddExchange_ID DCProto_GMAddExchange_ID_ID_MIN = DCProto_GMAddExchange_ID_GROUPID;
const DCProto_GMAddExchange_ID DCProto_GMAddExchange_ID_ID_MAX = DCProto_GMAddExchange_ID_UNITID;
const int DCProto_GMAddExchange_ID_ID_ARRAYSIZE = DCProto_GMAddExchange_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMAddExchange_ID_descriptor();
inline const ::std::string& DCProto_GMAddExchange_ID_Name(DCProto_GMAddExchange_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMAddExchange_ID_descriptor(), value);
}
inline bool DCProto_GMAddExchange_ID_Parse(
    const ::std::string& name, DCProto_GMAddExchange_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMAddExchange_ID>(
    DCProto_GMAddExchange_ID_descriptor(), name, value);
}
enum DCProto_GMRekooRole_ID {
  DCProto_GMRekooRole_ID_GROUPID = 3,
  DCProto_GMRekooRole_ID_UNITID = 13
};
bool DCProto_GMRekooRole_ID_IsValid(int value);
const DCProto_GMRekooRole_ID DCProto_GMRekooRole_ID_ID_MIN = DCProto_GMRekooRole_ID_GROUPID;
const DCProto_GMRekooRole_ID DCProto_GMRekooRole_ID_ID_MAX = DCProto_GMRekooRole_ID_UNITID;
const int DCProto_GMRekooRole_ID_ID_ARRAYSIZE = DCProto_GMRekooRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMRekooRole_ID_descriptor();
inline const ::std::string& DCProto_GMRekooRole_ID_Name(DCProto_GMRekooRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMRekooRole_ID_descriptor(), value);
}
inline bool DCProto_GMRekooRole_ID_Parse(
    const ::std::string& name, DCProto_GMRekooRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMRekooRole_ID>(
    DCProto_GMRekooRole_ID_descriptor(), name, value);
}
enum DCProto_GMAddRekooRMB_ID {
  DCProto_GMAddRekooRMB_ID_GROUPID = 3,
  DCProto_GMAddRekooRMB_ID_UNITID = 14
};
bool DCProto_GMAddRekooRMB_ID_IsValid(int value);
const DCProto_GMAddRekooRMB_ID DCProto_GMAddRekooRMB_ID_ID_MIN = DCProto_GMAddRekooRMB_ID_GROUPID;
const DCProto_GMAddRekooRMB_ID DCProto_GMAddRekooRMB_ID_ID_MAX = DCProto_GMAddRekooRMB_ID_UNITID;
const int DCProto_GMAddRekooRMB_ID_ID_ARRAYSIZE = DCProto_GMAddRekooRMB_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_GMAddRekooRMB_ID_descriptor();
inline const ::std::string& DCProto_GMAddRekooRMB_ID_Name(DCProto_GMAddRekooRMB_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_GMAddRekooRMB_ID_descriptor(), value);
}
inline bool DCProto_GMAddRekooRMB_ID_Parse(
    const ::std::string& name, DCProto_GMAddRekooRMB_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_GMAddRekooRMB_ID>(
    DCProto_GMAddRekooRMB_ID_descriptor(), name, value);
}
enum DCProto_LoadRekooRole_ID {
  DCProto_LoadRekooRole_ID_GROUPID = 3,
  DCProto_LoadRekooRole_ID_UNITID = 15
};
bool DCProto_LoadRekooRole_ID_IsValid(int value);
const DCProto_LoadRekooRole_ID DCProto_LoadRekooRole_ID_ID_MIN = DCProto_LoadRekooRole_ID_GROUPID;
const DCProto_LoadRekooRole_ID DCProto_LoadRekooRole_ID_ID_MAX = DCProto_LoadRekooRole_ID_UNITID;
const int DCProto_LoadRekooRole_ID_ID_ARRAYSIZE = DCProto_LoadRekooRole_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_LoadRekooRole_ID_descriptor();
inline const ::std::string& DCProto_LoadRekooRole_ID_Name(DCProto_LoadRekooRole_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_LoadRekooRole_ID_descriptor(), value);
}
inline bool DCProto_LoadRekooRole_ID_Parse(
    const ::std::string& name, DCProto_LoadRekooRole_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_LoadRekooRole_ID>(
    DCProto_LoadRekooRole_ID_descriptor(), name, value);
}
enum DCProto_AddCodeCount_ID {
  DCProto_AddCodeCount_ID_GROUPID = 3,
  DCProto_AddCodeCount_ID_UNITID = 16
};
bool DCProto_AddCodeCount_ID_IsValid(int value);
const DCProto_AddCodeCount_ID DCProto_AddCodeCount_ID_ID_MIN = DCProto_AddCodeCount_ID_GROUPID;
const DCProto_AddCodeCount_ID DCProto_AddCodeCount_ID_ID_MAX = DCProto_AddCodeCount_ID_UNITID;
const int DCProto_AddCodeCount_ID_ID_ARRAYSIZE = DCProto_AddCodeCount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_AddCodeCount_ID_descriptor();
inline const ::std::string& DCProto_AddCodeCount_ID_Name(DCProto_AddCodeCount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_AddCodeCount_ID_descriptor(), value);
}
inline bool DCProto_AddCodeCount_ID_Parse(
    const ::std::string& name, DCProto_AddCodeCount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_AddCodeCount_ID>(
    DCProto_AddCodeCount_ID_descriptor(), name, value);
}
enum DCProto_LoadInviteCode_ID {
  DCProto_LoadInviteCode_ID_GROUPID = 3,
  DCProto_LoadInviteCode_ID_UNITID = 17
};
bool DCProto_LoadInviteCode_ID_IsValid(int value);
const DCProto_LoadInviteCode_ID DCProto_LoadInviteCode_ID_ID_MIN = DCProto_LoadInviteCode_ID_GROUPID;
const DCProto_LoadInviteCode_ID DCProto_LoadInviteCode_ID_ID_MAX = DCProto_LoadInviteCode_ID_UNITID;
const int DCProto_LoadInviteCode_ID_ID_ARRAYSIZE = DCProto_LoadInviteCode_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_LoadInviteCode_ID_descriptor();
inline const ::std::string& DCProto_LoadInviteCode_ID_Name(DCProto_LoadInviteCode_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_LoadInviteCode_ID_descriptor(), value);
}
inline bool DCProto_LoadInviteCode_ID_Parse(
    const ::std::string& name, DCProto_LoadInviteCode_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_LoadInviteCode_ID>(
    DCProto_LoadInviteCode_ID_descriptor(), name, value);
}
enum DCProto_QueryGMAccount_ID {
  DCProto_QueryGMAccount_ID_GROUPID = 3,
  DCProto_QueryGMAccount_ID_UNITID = 18
};
bool DCProto_QueryGMAccount_ID_IsValid(int value);
const DCProto_QueryGMAccount_ID DCProto_QueryGMAccount_ID_ID_MIN = DCProto_QueryGMAccount_ID_GROUPID;
const DCProto_QueryGMAccount_ID DCProto_QueryGMAccount_ID_ID_MAX = DCProto_QueryGMAccount_ID_UNITID;
const int DCProto_QueryGMAccount_ID_ID_ARRAYSIZE = DCProto_QueryGMAccount_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_QueryGMAccount_ID_descriptor();
inline const ::std::string& DCProto_QueryGMAccount_ID_Name(DCProto_QueryGMAccount_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_QueryGMAccount_ID_descriptor(), value);
}
inline bool DCProto_QueryGMAccount_ID_Parse(
    const ::std::string& name, DCProto_QueryGMAccount_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_QueryGMAccount_ID>(
    DCProto_QueryGMAccount_ID_descriptor(), name, value);
}
enum DCProto_RegistDeviceServer_ID {
  DCProto_RegistDeviceServer_ID_GROUPID = 4,
  DCProto_RegistDeviceServer_ID_UNITID = 0
};
bool DCProto_RegistDeviceServer_ID_IsValid(int value);
const DCProto_RegistDeviceServer_ID DCProto_RegistDeviceServer_ID_ID_MIN = DCProto_RegistDeviceServer_ID_UNITID;
const DCProto_RegistDeviceServer_ID DCProto_RegistDeviceServer_ID_ID_MAX = DCProto_RegistDeviceServer_ID_GROUPID;
const int DCProto_RegistDeviceServer_ID_ID_ARRAYSIZE = DCProto_RegistDeviceServer_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_RegistDeviceServer_ID_descriptor();
inline const ::std::string& DCProto_RegistDeviceServer_ID_Name(DCProto_RegistDeviceServer_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_RegistDeviceServer_ID_descriptor(), value);
}
inline bool DCProto_RegistDeviceServer_ID_Parse(
    const ::std::string& name, DCProto_RegistDeviceServer_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_RegistDeviceServer_ID>(
    DCProto_RegistDeviceServer_ID_descriptor(), name, value);
}
enum DCProto_FactionData_ID {
  DCProto_FactionData_ID_GROUPID = 5,
  DCProto_FactionData_ID_UNITID = 0
};
bool DCProto_FactionData_ID_IsValid(int value);
const DCProto_FactionData_ID DCProto_FactionData_ID_ID_MIN = DCProto_FactionData_ID_UNITID;
const DCProto_FactionData_ID DCProto_FactionData_ID_ID_MAX = DCProto_FactionData_ID_GROUPID;
const int DCProto_FactionData_ID_ID_ARRAYSIZE = DCProto_FactionData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_FactionData_ID_descriptor();
inline const ::std::string& DCProto_FactionData_ID_Name(DCProto_FactionData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_FactionData_ID_descriptor(), value);
}
inline bool DCProto_FactionData_ID_Parse(
    const ::std::string& name, DCProto_FactionData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_FactionData_ID>(
    DCProto_FactionData_ID_descriptor(), name, value);
}
enum DCProto_FactionLoadData_ID {
  DCProto_FactionLoadData_ID_GROUPID = 5,
  DCProto_FactionLoadData_ID_UNITID = 1
};
bool DCProto_FactionLoadData_ID_IsValid(int value);
const DCProto_FactionLoadData_ID DCProto_FactionLoadData_ID_ID_MIN = DCProto_FactionLoadData_ID_UNITID;
const DCProto_FactionLoadData_ID DCProto_FactionLoadData_ID_ID_MAX = DCProto_FactionLoadData_ID_GROUPID;
const int DCProto_FactionLoadData_ID_ID_ARRAYSIZE = DCProto_FactionLoadData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_FactionLoadData_ID_descriptor();
inline const ::std::string& DCProto_FactionLoadData_ID_Name(DCProto_FactionLoadData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_FactionLoadData_ID_descriptor(), value);
}
inline bool DCProto_FactionLoadData_ID_Parse(
    const ::std::string& name, DCProto_FactionLoadData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_FactionLoadData_ID>(
    DCProto_FactionLoadData_ID_descriptor(), name, value);
}
enum DCProto_FactionSaveData_ID {
  DCProto_FactionSaveData_ID_GROUPID = 5,
  DCProto_FactionSaveData_ID_UNITID = 2
};
bool DCProto_FactionSaveData_ID_IsValid(int value);
const DCProto_FactionSaveData_ID DCProto_FactionSaveData_ID_ID_MIN = DCProto_FactionSaveData_ID_UNITID;
const DCProto_FactionSaveData_ID DCProto_FactionSaveData_ID_ID_MAX = DCProto_FactionSaveData_ID_GROUPID;
const int DCProto_FactionSaveData_ID_ID_ARRAYSIZE = DCProto_FactionSaveData_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_FactionSaveData_ID_descriptor();
inline const ::std::string& DCProto_FactionSaveData_ID_Name(DCProto_FactionSaveData_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_FactionSaveData_ID_descriptor(), value);
}
inline bool DCProto_FactionSaveData_ID_Parse(
    const ::std::string& name, DCProto_FactionSaveData_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_FactionSaveData_ID>(
    DCProto_FactionSaveData_ID_descriptor(), name, value);
}
enum DCProto_FactionAddRecord_ID {
  DCProto_FactionAddRecord_ID_GROUPID = 5,
  DCProto_FactionAddRecord_ID_UNITID = 3
};
bool DCProto_FactionAddRecord_ID_IsValid(int value);
const DCProto_FactionAddRecord_ID DCProto_FactionAddRecord_ID_ID_MIN = DCProto_FactionAddRecord_ID_UNITID;
const DCProto_FactionAddRecord_ID DCProto_FactionAddRecord_ID_ID_MAX = DCProto_FactionAddRecord_ID_GROUPID;
const int DCProto_FactionAddRecord_ID_ID_ARRAYSIZE = DCProto_FactionAddRecord_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_FactionAddRecord_ID_descriptor();
inline const ::std::string& DCProto_FactionAddRecord_ID_Name(DCProto_FactionAddRecord_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_FactionAddRecord_ID_descriptor(), value);
}
inline bool DCProto_FactionAddRecord_ID_Parse(
    const ::std::string& name, DCProto_FactionAddRecord_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_FactionAddRecord_ID>(
    DCProto_FactionAddRecord_ID_descriptor(), name, value);
}
enum DCProto_FactionDelRecord_ID {
  DCProto_FactionDelRecord_ID_GROUPID = 5,
  DCProto_FactionDelRecord_ID_UNITID = 4
};
bool DCProto_FactionDelRecord_ID_IsValid(int value);
const DCProto_FactionDelRecord_ID DCProto_FactionDelRecord_ID_ID_MIN = DCProto_FactionDelRecord_ID_UNITID;
const DCProto_FactionDelRecord_ID DCProto_FactionDelRecord_ID_ID_MAX = DCProto_FactionDelRecord_ID_GROUPID;
const int DCProto_FactionDelRecord_ID_ID_ARRAYSIZE = DCProto_FactionDelRecord_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_FactionDelRecord_ID_descriptor();
inline const ::std::string& DCProto_FactionDelRecord_ID_Name(DCProto_FactionDelRecord_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_FactionDelRecord_ID_descriptor(), value);
}
inline bool DCProto_FactionDelRecord_ID_Parse(
    const ::std::string& name, DCProto_FactionDelRecord_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_FactionDelRecord_ID>(
    DCProto_FactionDelRecord_ID_descriptor(), name, value);
}
enum DCProto_FactionUpdateRecord_ID {
  DCProto_FactionUpdateRecord_ID_GROUPID = 5,
  DCProto_FactionUpdateRecord_ID_UNITID = 5
};
bool DCProto_FactionUpdateRecord_ID_IsValid(int value);
const DCProto_FactionUpdateRecord_ID DCProto_FactionUpdateRecord_ID_ID_MIN = DCProto_FactionUpdateRecord_ID_GROUPID;
const DCProto_FactionUpdateRecord_ID DCProto_FactionUpdateRecord_ID_ID_MAX = DCProto_FactionUpdateRecord_ID_GROUPID;
const int DCProto_FactionUpdateRecord_ID_ID_ARRAYSIZE = DCProto_FactionUpdateRecord_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_FactionUpdateRecord_ID_descriptor();
inline const ::std::string& DCProto_FactionUpdateRecord_ID_Name(DCProto_FactionUpdateRecord_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_FactionUpdateRecord_ID_descriptor(), value);
}
inline bool DCProto_FactionUpdateRecord_ID_Parse(
    const ::std::string& name, DCProto_FactionUpdateRecord_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_FactionUpdateRecord_ID>(
    DCProto_FactionUpdateRecord_ID_descriptor(), name, value);
}
enum DCProto_SysFactionMemInfo_ID {
  DCProto_SysFactionMemInfo_ID_GROUPID = 5,
  DCProto_SysFactionMemInfo_ID_UNITID = 6
};
bool DCProto_SysFactionMemInfo_ID_IsValid(int value);
const DCProto_SysFactionMemInfo_ID DCProto_SysFactionMemInfo_ID_ID_MIN = DCProto_SysFactionMemInfo_ID_GROUPID;
const DCProto_SysFactionMemInfo_ID DCProto_SysFactionMemInfo_ID_ID_MAX = DCProto_SysFactionMemInfo_ID_UNITID;
const int DCProto_SysFactionMemInfo_ID_ID_ARRAYSIZE = DCProto_SysFactionMemInfo_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_SysFactionMemInfo_ID_descriptor();
inline const ::std::string& DCProto_SysFactionMemInfo_ID_Name(DCProto_SysFactionMemInfo_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_SysFactionMemInfo_ID_descriptor(), value);
}
inline bool DCProto_SysFactionMemInfo_ID_Parse(
    const ::std::string& name, DCProto_SysFactionMemInfo_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_SysFactionMemInfo_ID>(
    DCProto_SysFactionMemInfo_ID_descriptor(), name, value);
}
enum DCProto_InitRank_ID {
  DCProto_InitRank_ID_GROUPID = 6,
  DCProto_InitRank_ID_UNITID = 0
};
bool DCProto_InitRank_ID_IsValid(int value);
const DCProto_InitRank_ID DCProto_InitRank_ID_ID_MIN = DCProto_InitRank_ID_UNITID;
const DCProto_InitRank_ID DCProto_InitRank_ID_ID_MAX = DCProto_InitRank_ID_GROUPID;
const int DCProto_InitRank_ID_ID_ARRAYSIZE = DCProto_InitRank_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_InitRank_ID_descriptor();
inline const ::std::string& DCProto_InitRank_ID_Name(DCProto_InitRank_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_InitRank_ID_descriptor(), value);
}
inline bool DCProto_InitRank_ID_Parse(
    const ::std::string& name, DCProto_InitRank_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_InitRank_ID>(
    DCProto_InitRank_ID_descriptor(), name, value);
}
enum DCProto_PingPongAward_ID {
  DCProto_PingPongAward_ID_GROUPID = 6,
  DCProto_PingPongAward_ID_UNITID = 1
};
bool DCProto_PingPongAward_ID_IsValid(int value);
const DCProto_PingPongAward_ID DCProto_PingPongAward_ID_ID_MIN = DCProto_PingPongAward_ID_UNITID;
const DCProto_PingPongAward_ID DCProto_PingPongAward_ID_ID_MAX = DCProto_PingPongAward_ID_GROUPID;
const int DCProto_PingPongAward_ID_ID_ARRAYSIZE = DCProto_PingPongAward_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_PingPongAward_ID_descriptor();
inline const ::std::string& DCProto_PingPongAward_ID_Name(DCProto_PingPongAward_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_PingPongAward_ID_descriptor(), value);
}
inline bool DCProto_PingPongAward_ID_Parse(
    const ::std::string& name, DCProto_PingPongAward_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_PingPongAward_ID>(
    DCProto_PingPongAward_ID_descriptor(), name, value);
}
enum DCProto_FactionPower_ID {
  DCProto_FactionPower_ID_GROUPID = 6,
  DCProto_FactionPower_ID_UNITID = 2
};
bool DCProto_FactionPower_ID_IsValid(int value);
const DCProto_FactionPower_ID DCProto_FactionPower_ID_ID_MIN = DCProto_FactionPower_ID_UNITID;
const DCProto_FactionPower_ID DCProto_FactionPower_ID_ID_MAX = DCProto_FactionPower_ID_GROUPID;
const int DCProto_FactionPower_ID_ID_ARRAYSIZE = DCProto_FactionPower_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_FactionPower_ID_descriptor();
inline const ::std::string& DCProto_FactionPower_ID_Name(DCProto_FactionPower_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_FactionPower_ID_descriptor(), value);
}
inline bool DCProto_FactionPower_ID_Parse(
    const ::std::string& name, DCProto_FactionPower_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_FactionPower_ID>(
    DCProto_FactionPower_ID_descriptor(), name, value);
}
enum DCProto_PingPongQiuBiTe_ID {
  DCProto_PingPongQiuBiTe_ID_GROUPID = 6,
  DCProto_PingPongQiuBiTe_ID_UNITID = 3
};
bool DCProto_PingPongQiuBiTe_ID_IsValid(int value);
const DCProto_PingPongQiuBiTe_ID DCProto_PingPongQiuBiTe_ID_ID_MIN = DCProto_PingPongQiuBiTe_ID_UNITID;
const DCProto_PingPongQiuBiTe_ID DCProto_PingPongQiuBiTe_ID_ID_MAX = DCProto_PingPongQiuBiTe_ID_GROUPID;
const int DCProto_PingPongQiuBiTe_ID_ID_ARRAYSIZE = DCProto_PingPongQiuBiTe_ID_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCProto_PingPongQiuBiTe_ID_descriptor();
inline const ::std::string& DCProto_PingPongQiuBiTe_ID_Name(DCProto_PingPongQiuBiTe_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCProto_PingPongQiuBiTe_ID_descriptor(), value);
}
inline bool DCProto_PingPongQiuBiTe_ID_Parse(
    const ::std::string& name, DCProto_PingPongQiuBiTe_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCProto_PingPongQiuBiTe_ID>(
    DCProto_PingPongQiuBiTe_ID_descriptor(), name, value);
}
// ===================================================================

class DCProto_SaveRoleData : public ::google::protobuf::Message {
 public:
  DCProto_SaveRoleData();
  virtual ~DCProto_SaveRoleData();
  
  DCProto_SaveRoleData(const DCProto_SaveRoleData& from);
  
  inline DCProto_SaveRoleData& operator=(const DCProto_SaveRoleData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SaveRoleData& default_instance();
  
  void Swap(DCProto_SaveRoleData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SaveRoleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SaveRoleData& from);
  void MergeFrom(const DCProto_SaveRoleData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SaveRoleData_ID ID;
  static const ID GROUPID = DCProto_SaveRoleData_ID_GROUPID;
  static const ID UNITID = DCProto_SaveRoleData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SaveRoleData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SaveRoleData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SaveRoleData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SaveRoleData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SaveRoleData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SaveRoleData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SaveRoleData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .PB_PlayerAtt data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::PB_PlayerAtt& data(int index) const;
  inline ::PB_PlayerAtt* mutable_data(int index);
  inline ::PB_PlayerAtt* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
      mutable_data();
  
  // repeated .PlayerInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PlayerInfo& info(int index) const;
  inline ::PlayerInfo* mutable_info(int index);
  inline ::PlayerInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:DCProto_SaveRoleData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt > data_;
  ::google::protobuf::RepeatedPtrField< ::PlayerInfo > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SaveRoleData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_DeleteRoleData : public ::google::protobuf::Message {
 public:
  DCProto_DeleteRoleData();
  virtual ~DCProto_DeleteRoleData();
  
  DCProto_DeleteRoleData(const DCProto_DeleteRoleData& from);
  
  inline DCProto_DeleteRoleData& operator=(const DCProto_DeleteRoleData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_DeleteRoleData& default_instance();
  
  void Swap(DCProto_DeleteRoleData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_DeleteRoleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_DeleteRoleData& from);
  void MergeFrom(const DCProto_DeleteRoleData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_DeleteRoleData_ID ID;
  static const ID GROUPID = DCProto_DeleteRoleData_ID_GROUPID;
  static const ID UNITID = DCProto_DeleteRoleData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_DeleteRoleData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_DeleteRoleData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_DeleteRoleData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_DeleteRoleData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_DeleteRoleData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_DeleteRoleData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_DeleteRoleData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional int64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // repeated int64 equipments = 3;
  inline int equipments_size() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 3;
  inline ::google::protobuf::int64 equipments(int index) const;
  inline void set_equipments(int index, ::google::protobuf::int64 value);
  inline void add_equipments(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      equipments() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_equipments();
  
  // optional string platform = 4;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 4;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  
  // @@protoc_insertion_point(class_scope:DCProto_DeleteRoleData)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_platform();
  inline void clear_has_platform();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > equipments_;
  ::std::string* platform_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_DeleteRoleData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_LoadRoleData : public ::google::protobuf::Message {
 public:
  DCProto_LoadRoleData();
  virtual ~DCProto_LoadRoleData();
  
  DCProto_LoadRoleData(const DCProto_LoadRoleData& from);
  
  inline DCProto_LoadRoleData& operator=(const DCProto_LoadRoleData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_LoadRoleData& default_instance();
  
  void Swap(DCProto_LoadRoleData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_LoadRoleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_LoadRoleData& from);
  void MergeFrom(const DCProto_LoadRoleData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_LoadRoleData_ID ID;
  static const ID GROUPID = DCProto_LoadRoleData_ID_GROUPID;
  static const ID UNITID = DCProto_LoadRoleData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_LoadRoleData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_LoadRoleData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_LoadRoleData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_LoadRoleData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_LoadRoleData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_LoadRoleData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_LoadRoleData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // repeated .PB_PlayerAtt data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::PB_PlayerAtt& data(int index) const;
  inline ::PB_PlayerAtt* mutable_data(int index);
  inline ::PB_PlayerAtt* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
      mutable_data();
  
  // optional int64 prevRole = 3;
  inline bool has_prevRole() const;
  inline void clear_prevRole();
  static const int kPrevRoleFieldNumber = 3;
  inline ::google::protobuf::int64 prevRole() const;
  inline void set_prevRole(::google::protobuf::int64 value);
  
  // optional string platform = 4;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 4;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  
  // @@protoc_insertion_point(class_scope:DCProto_LoadRoleData)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_prevRole();
  inline void clear_has_prevRole();
  inline void set_has_platform();
  inline void clear_has_platform();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt > data_;
  ::google::protobuf::int64 prevRole_;
  ::std::string* platform_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_LoadRoleData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_CollectRole : public ::google::protobuf::Message {
 public:
  DCProto_CollectRole();
  virtual ~DCProto_CollectRole();
  
  DCProto_CollectRole(const DCProto_CollectRole& from);
  
  inline DCProto_CollectRole& operator=(const DCProto_CollectRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_CollectRole& default_instance();
  
  void Swap(DCProto_CollectRole* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_CollectRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_CollectRole& from);
  void MergeFrom(const DCProto_CollectRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_CollectRole_ID ID;
  static const ID GROUPID = DCProto_CollectRole_ID_GROUPID;
  static const ID UNITID = DCProto_CollectRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_CollectRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_CollectRole_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_CollectRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_CollectRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_CollectRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_CollectRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_CollectRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 cur = 1;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 1;
  inline ::google::protobuf::int64 cur() const;
  inline void set_cur(::google::protobuf::int64 value);
  
  // repeated .RecordInfo singleRecord = 2;
  inline int singleRecord_size() const;
  inline void clear_singleRecord();
  static const int kSingleRecordFieldNumber = 2;
  inline const ::RecordInfo& singleRecord(int index) const;
  inline ::RecordInfo* mutable_singleRecord(int index);
  inline ::RecordInfo* add_singleRecord();
  inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
      singleRecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
      mutable_singleRecord();
  
  // repeated .RecordInfo Restriction = 3;
  inline int Restriction_size() const;
  inline void clear_Restriction();
  static const int kRestrictionFieldNumber = 3;
  inline const ::RecordInfo& Restriction(int index) const;
  inline ::RecordInfo* mutable_Restriction(int index);
  inline ::RecordInfo* add_Restriction();
  inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
      Restriction() const;
  inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
      mutable_Restriction();
  
  // optional .RecordInfo GodInfoTime = 4;
  inline bool has_GodInfoTime() const;
  inline void clear_GodInfoTime();
  static const int kGodInfoTimeFieldNumber = 4;
  inline const ::RecordInfo& GodInfoTime() const;
  inline ::RecordInfo* mutable_GodInfoTime();
  inline ::RecordInfo* release_GodInfoTime();
  
  // optional .RecordInfo winFactionInfo = 5;
  inline bool has_winFactionInfo() const;
  inline void clear_winFactionInfo();
  static const int kWinFactionInfoFieldNumber = 5;
  inline const ::RecordInfo& winFactionInfo() const;
  inline ::RecordInfo* mutable_winFactionInfo();
  inline ::RecordInfo* release_winFactionInfo();
  
  // repeated .RecordInfo factionInfo = 6;
  inline int factionInfo_size() const;
  inline void clear_factionInfo();
  static const int kFactionInfoFieldNumber = 6;
  inline const ::RecordInfo& factionInfo(int index) const;
  inline ::RecordInfo* mutable_factionInfo(int index);
  inline ::RecordInfo* add_factionInfo();
  inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
      factionInfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
      mutable_factionInfo();
  
  // @@protoc_insertion_point(class_scope:DCProto_CollectRole)
 private:
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_GodInfoTime();
  inline void clear_has_GodInfoTime();
  inline void set_has_winFactionInfo();
  inline void clear_has_winFactionInfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 cur_;
  ::google::protobuf::RepeatedPtrField< ::RecordInfo > singleRecord_;
  ::google::protobuf::RepeatedPtrField< ::RecordInfo > Restriction_;
  ::RecordInfo* GodInfoTime_;
  ::RecordInfo* winFactionInfo_;
  ::google::protobuf::RepeatedPtrField< ::RecordInfo > factionInfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_CollectRole* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_AddAccount : public ::google::protobuf::Message {
 public:
  DCProto_AddAccount();
  virtual ~DCProto_AddAccount();
  
  DCProto_AddAccount(const DCProto_AddAccount& from);
  
  inline DCProto_AddAccount& operator=(const DCProto_AddAccount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_AddAccount& default_instance();
  
  void Swap(DCProto_AddAccount* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_AddAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_AddAccount& from);
  void MergeFrom(const DCProto_AddAccount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_AddAccount_ID ID;
  static const ID GROUPID = DCProto_AddAccount_ID_GROUPID;
  static const ID UNITID = DCProto_AddAccount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_AddAccount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_AddAccount_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_AddAccount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_AddAccount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_AddAccount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_AddAccount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_AddAccount_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PlayerInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PlayerInfo& info() const;
  inline ::PlayerInfo* mutable_info();
  inline ::PlayerInfo* release_info();
  
  // optional bool res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline bool res() const;
  inline void set_res(bool value);
  
  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // @@protoc_insertion_point(class_scope:DCProto_AddAccount)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PlayerInfo* info_;
  bool res_;
  ::google::protobuf::int32 id_;
  ::std::string* ip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_AddAccount* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_AddRole : public ::google::protobuf::Message {
 public:
  DCProto_AddRole();
  virtual ~DCProto_AddRole();
  
  DCProto_AddRole(const DCProto_AddRole& from);
  
  inline DCProto_AddRole& operator=(const DCProto_AddRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_AddRole& default_instance();
  
  void Swap(DCProto_AddRole* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_AddRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_AddRole& from);
  void MergeFrom(const DCProto_AddRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_AddRole_ID ID;
  static const ID GROUPID = DCProto_AddRole_ID_GROUPID;
  static const ID UNITID = DCProto_AddRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_AddRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_AddRole_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_AddRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_AddRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_AddRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_AddRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_AddRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PlayerInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PlayerInfo& info() const;
  inline ::PlayerInfo* mutable_info();
  inline ::PlayerInfo* release_info();
  
  // optional .PB_PlayerAtt data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::PB_PlayerAtt& data() const;
  inline ::PB_PlayerAtt* mutable_data();
  inline ::PB_PlayerAtt* release_data();
  
  // @@protoc_insertion_point(class_scope:DCProto_AddRole)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PlayerInfo* info_;
  ::PB_PlayerAtt* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_AddRole* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_SaveSingleRecord : public ::google::protobuf::Message {
 public:
  DCProto_SaveSingleRecord();
  virtual ~DCProto_SaveSingleRecord();
  
  DCProto_SaveSingleRecord(const DCProto_SaveSingleRecord& from);
  
  inline DCProto_SaveSingleRecord& operator=(const DCProto_SaveSingleRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SaveSingleRecord& default_instance();
  
  void Swap(DCProto_SaveSingleRecord* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SaveSingleRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SaveSingleRecord& from);
  void MergeFrom(const DCProto_SaveSingleRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SaveSingleRecord_ID ID;
  static const ID GROUPID = DCProto_SaveSingleRecord_ID_GROUPID;
  static const ID UNITID = DCProto_SaveSingleRecord_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SaveSingleRecord_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SaveSingleRecord_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SaveSingleRecord_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SaveSingleRecord_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SaveSingleRecord_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SaveSingleRecord_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SaveSingleRecord_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 mapID = 1;
  inline bool has_mapID() const;
  inline void clear_mapID();
  static const int kMapIDFieldNumber = 1;
  inline ::google::protobuf::int32 mapID() const;
  inline void set_mapID(::google::protobuf::int32 value);
  
  // optional .RecordInfo record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::RecordInfo& record() const;
  inline ::RecordInfo* mutable_record();
  inline ::RecordInfo* release_record();
  
  // @@protoc_insertion_point(class_scope:DCProto_SaveSingleRecord)
 private:
  inline void set_has_mapID();
  inline void clear_has_mapID();
  inline void set_has_record();
  inline void clear_has_record();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::RecordInfo* record_;
  ::google::protobuf::int32 mapID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SaveSingleRecord* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_HasName : public ::google::protobuf::Message {
 public:
  DCProto_HasName();
  virtual ~DCProto_HasName();
  
  DCProto_HasName(const DCProto_HasName& from);
  
  inline DCProto_HasName& operator=(const DCProto_HasName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_HasName& default_instance();
  
  void Swap(DCProto_HasName* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_HasName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_HasName& from);
  void MergeFrom(const DCProto_HasName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_HasName_ID ID;
  static const ID GROUPID = DCProto_HasName_ID_GROUPID;
  static const ID UNITID = DCProto_HasName_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_HasName_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_HasName_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_HasName_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_HasName_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_HasName_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_HasName_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_HasName_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_CreateRole cr = 1;
  inline bool has_cr() const;
  inline void clear_cr();
  static const int kCrFieldNumber = 1;
  inline const ::NetProto_CreateRole& cr() const;
  inline ::NetProto_CreateRole* mutable_cr();
  inline ::NetProto_CreateRole* release_cr();
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional bool has = 3;
  inline bool has_has() const;
  inline void clear_has();
  static const int kHasFieldNumber = 3;
  inline bool has() const;
  inline void set_has(bool value);
  
  // @@protoc_insertion_point(class_scope:DCProto_HasName)
 private:
  inline void set_has_cr();
  inline void clear_has_cr();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_has();
  inline void clear_has_has();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_CreateRole* cr_;
  ::google::protobuf::int32 id_;
  bool has_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_HasName* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_Login : public ::google::protobuf::Message {
 public:
  DCProto_Login();
  virtual ~DCProto_Login();
  
  DCProto_Login(const DCProto_Login& from);
  
  inline DCProto_Login& operator=(const DCProto_Login& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_Login& default_instance();
  
  void Swap(DCProto_Login* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_Login& from);
  void MergeFrom(const DCProto_Login& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_Login_ID ID;
  static const ID GROUPID = DCProto_Login_ID_GROUPID;
  static const ID UNITID = DCProto_Login_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_Login_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_Login_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_Login_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_Login_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_Login_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_Login_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_Login_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Login login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline const ::NetProto_Login& login() const;
  inline ::NetProto_Login* mutable_login();
  inline ::NetProto_Login* release_login();
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 res = 3;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 3;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional bool useActivateKey = 5;
  inline bool has_useActivateKey() const;
  inline void clear_useActivateKey();
  static const int kUseActivateKeyFieldNumber = 5;
  inline bool useActivateKey() const;
  inline void set_useActivateKey(bool value);
  
  // optional bool newUser = 6;
  inline bool has_newUser() const;
  inline void clear_newUser();
  static const int kNewUserFieldNumber = 6;
  inline bool newUser() const;
  inline void set_newUser(bool value);
  
  // optional bool beyond = 7;
  inline bool has_beyond() const;
  inline void clear_beyond();
  static const int kBeyondFieldNumber = 7;
  inline bool beyond() const;
  inline void set_beyond(bool value);
  
  // @@protoc_insertion_point(class_scope:DCProto_Login)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_useActivateKey();
  inline void clear_has_useActivateKey();
  inline void set_has_newUser();
  inline void clear_has_newUser();
  inline void set_has_beyond();
  inline void clear_has_beyond();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_Login* login_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 res_;
  ::std::string* ip_;
  bool useActivateKey_;
  bool newUser_;
  bool beyond_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_Login* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_QueryRole : public ::google::protobuf::Message {
 public:
  DCProto_QueryRole();
  virtual ~DCProto_QueryRole();
  
  DCProto_QueryRole(const DCProto_QueryRole& from);
  
  inline DCProto_QueryRole& operator=(const DCProto_QueryRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_QueryRole& default_instance();
  
  void Swap(DCProto_QueryRole* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_QueryRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_QueryRole& from);
  void MergeFrom(const DCProto_QueryRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_QueryRole_ID ID;
  static const ID GROUPID = DCProto_QueryRole_ID_GROUPID;
  static const ID UNITID = DCProto_QueryRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_QueryRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_QueryRole_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_QueryRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_QueryRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_QueryRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_QueryRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_QueryRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional .PB_PlayerAtt att = 2;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline const ::PB_PlayerAtt& att() const;
  inline ::PB_PlayerAtt* mutable_att();
  inline ::PB_PlayerAtt* release_att();
  
  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:DCProto_QueryRole)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::PB_PlayerAtt* att_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_QueryRole* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_SendMail : public ::google::protobuf::Message {
 public:
  DCProto_SendMail();
  virtual ~DCProto_SendMail();
  
  DCProto_SendMail(const DCProto_SendMail& from);
  
  inline DCProto_SendMail& operator=(const DCProto_SendMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SendMail& default_instance();
  
  void Swap(DCProto_SendMail* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SendMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SendMail& from);
  void MergeFrom(const DCProto_SendMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SendMail_ID ID;
  static const ID GROUPID = DCProto_SendMail_ID_GROUPID;
  static const ID UNITID = DCProto_SendMail_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SendMail_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SendMail_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SendMail_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SendMail_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SendMail_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SendMail_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SendMail_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_SendMail sm = 1;
  inline bool has_sm() const;
  inline void clear_sm();
  static const int kSmFieldNumber = 1;
  inline const ::NetProto_SendMail& sm() const;
  inline ::NetProto_SendMail* mutable_sm();
  inline ::NetProto_SendMail* release_sm();
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_SendMail)
 private:
  inline void set_has_sm();
  inline void clear_has_sm();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_SendMail* sm_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SendMail* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GetKeyGift : public ::google::protobuf::Message {
 public:
  DCProto_GetKeyGift();
  virtual ~DCProto_GetKeyGift();
  
  DCProto_GetKeyGift(const DCProto_GetKeyGift& from);
  
  inline DCProto_GetKeyGift& operator=(const DCProto_GetKeyGift& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GetKeyGift& default_instance();
  
  void Swap(DCProto_GetKeyGift* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GetKeyGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GetKeyGift& from);
  void MergeFrom(const DCProto_GetKeyGift& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GetKeyGift_ID ID;
  static const ID GROUPID = DCProto_GetKeyGift_ID_GROUPID;
  static const ID UNITID = DCProto_GetKeyGift_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GetKeyGift_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GetKeyGift_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GetKeyGift_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GetKeyGift_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GetKeyGift_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GetKeyGift_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GetKeyGift_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 res = 3;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 3;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // optional bool done = 4;
  inline bool has_done() const;
  inline void clear_done();
  static const int kDoneFieldNumber = 4;
  inline bool done() const;
  inline void set_done(bool value);
  
  // repeated int32 event = 5;
  inline int event_size() const;
  inline void clear_event();
  static const int kEventFieldNumber = 5;
  inline ::google::protobuf::int32 event(int index) const;
  inline void set_event(int index, ::google::protobuf::int32 value);
  inline void add_event(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      event() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_event();
  
  // repeated int32 index = 6;
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 6;
  inline ::google::protobuf::int32 index(int index) const;
  inline void set_index(int index, ::google::protobuf::int32 value);
  inline void add_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_index();
  
  // optional int64 roleID = 7;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 7;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 group = 8;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 8;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_GetKeyGift)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_done();
  inline void clear_has_done();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_group();
  inline void clear_has_group();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 res_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > event_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > index_;
  bool done_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int64 roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GetKeyGift* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_Recharge : public ::google::protobuf::Message {
 public:
  DCProto_Recharge();
  virtual ~DCProto_Recharge();
  
  DCProto_Recharge(const DCProto_Recharge& from);
  
  inline DCProto_Recharge& operator=(const DCProto_Recharge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_Recharge& default_instance();
  
  void Swap(DCProto_Recharge* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_Recharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_Recharge& from);
  void MergeFrom(const DCProto_Recharge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_Recharge_ID ID;
  static const ID GROUPID = DCProto_Recharge_ID_GROUPID;
  static const ID UNITID = DCProto_Recharge_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_Recharge_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_Recharge_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_Recharge_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_Recharge_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_Recharge_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_Recharge_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_Recharge_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Recharge recharge = 1;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 1;
  inline const ::NetProto_Recharge& recharge() const;
  inline ::NetProto_Recharge* mutable_recharge();
  inline ::NetProto_Recharge* release_recharge();
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .PlayerInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::PlayerInfo& info() const;
  inline ::PlayerInfo* mutable_info();
  inline ::PlayerInfo* release_info();
  
  // optional int64 roleID = 4;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 4;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 rmb = 5;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 5;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);
  
  // optional bool over = 6;
  inline bool has_over() const;
  inline void clear_over();
  static const int kOverFieldNumber = 6;
  inline bool over() const;
  inline void set_over(bool value);
  
  // optional int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_Recharge)
 private:
  inline void set_has_recharge();
  inline void clear_has_recharge();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_over();
  inline void clear_has_over();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_Recharge* recharge_;
  ::PlayerInfo* info_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 rmb_;
  ::google::protobuf::int64 roleID_;
  bool over_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_Recharge* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_CostRecord : public ::google::protobuf::Message {
 public:
  DCProto_CostRecord();
  virtual ~DCProto_CostRecord();
  
  DCProto_CostRecord(const DCProto_CostRecord& from);
  
  inline DCProto_CostRecord& operator=(const DCProto_CostRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_CostRecord& default_instance();
  
  void Swap(DCProto_CostRecord* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_CostRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_CostRecord& from);
  void MergeFrom(const DCProto_CostRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_CostRecord_ID ID;
  static const ID GROUPID = DCProto_CostRecord_ID_GROUPID;
  static const ID UNITID = DCProto_CostRecord_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_CostRecord_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_CostRecord_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_CostRecord_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_CostRecord_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_CostRecord_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_CostRecord_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_CostRecord_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 role = 1;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 1;
  inline ::google::protobuf::int64 role() const;
  inline void set_role(::google::protobuf::int64 value);
  
  // optional string reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  
  // optional int32 rmbValue = 3;
  inline bool has_rmbValue() const;
  inline void clear_rmbValue();
  static const int kRmbValueFieldNumber = 3;
  inline ::google::protobuf::int32 rmbValue() const;
  inline void set_rmbValue(::google::protobuf::int32 value);
  
  // optional int64 rmb = 4;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 4;
  inline ::google::protobuf::int64 rmb() const;
  inline void set_rmb(::google::protobuf::int64 value);
  
  // optional int64 subRMB = 5;
  inline bool has_subRMB() const;
  inline void clear_subRMB();
  static const int kSubRMBFieldNumber = 5;
  inline ::google::protobuf::int64 subRMB() const;
  inline void set_subRMB(::google::protobuf::int64 value);
  
  // optional int32 arg1 = 6;
  inline bool has_arg1() const;
  inline void clear_arg1();
  static const int kArg1FieldNumber = 6;
  inline ::google::protobuf::int32 arg1() const;
  inline void set_arg1(::google::protobuf::int32 value);
  
  // optional int32 arg2 = 7;
  inline bool has_arg2() const;
  inline void clear_arg2();
  static const int kArg2FieldNumber = 7;
  inline ::google::protobuf::int32 arg2() const;
  inline void set_arg2(::google::protobuf::int32 value);
  
  // optional .PlayerInfo info = 8;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 8;
  inline const ::PlayerInfo& info() const;
  inline ::PlayerInfo* mutable_info();
  inline ::PlayerInfo* release_info();
  
  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 subrmbValue = 10;
  inline bool has_subrmbValue() const;
  inline void clear_subrmbValue();
  static const int kSubrmbValueFieldNumber = 10;
  inline ::google::protobuf::int32 subrmbValue() const;
  inline void set_subrmbValue(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_CostRecord)
 private:
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_rmbValue();
  inline void clear_has_rmbValue();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_subRMB();
  inline void clear_has_subRMB();
  inline void set_has_arg1();
  inline void clear_has_arg1();
  inline void set_has_arg2();
  inline void clear_has_arg2();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_subrmbValue();
  inline void clear_has_subrmbValue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 role_;
  ::std::string* reason_;
  ::google::protobuf::int64 rmb_;
  ::google::protobuf::int32 rmbValue_;
  ::google::protobuf::int32 arg1_;
  ::google::protobuf::int64 subRMB_;
  ::PlayerInfo* info_;
  ::google::protobuf::int32 arg2_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 subrmbValue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_CostRecord* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_PlayerStatus : public ::google::protobuf::Message {
 public:
  DCProto_PlayerStatus();
  virtual ~DCProto_PlayerStatus();
  
  DCProto_PlayerStatus(const DCProto_PlayerStatus& from);
  
  inline DCProto_PlayerStatus& operator=(const DCProto_PlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_PlayerStatus& default_instance();
  
  void Swap(DCProto_PlayerStatus* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_PlayerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_PlayerStatus& from);
  void MergeFrom(const DCProto_PlayerStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_PlayerStatus_ID ID;
  static const ID GROUPID = DCProto_PlayerStatus_ID_GROUPID;
  static const ID UNITID = DCProto_PlayerStatus_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_PlayerStatus_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_PlayerStatus_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_PlayerStatus_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_PlayerStatus_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_PlayerStatus_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_PlayerStatus_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_PlayerStatus_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_PlayerStatus ps = 2;
  inline bool has_ps() const;
  inline void clear_ps();
  static const int kPsFieldNumber = 2;
  inline const ::NetProto_PlayerStatus& ps() const;
  inline ::NetProto_PlayerStatus* mutable_ps();
  inline ::NetProto_PlayerStatus* release_ps();
  
  // @@protoc_insertion_point(class_scope:DCProto_PlayerStatus)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ps();
  inline void clear_has_ps();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_PlayerStatus* ps_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_PlayerStatus* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_SaveChat : public ::google::protobuf::Message {
 public:
  DCProto_SaveChat();
  virtual ~DCProto_SaveChat();
  
  DCProto_SaveChat(const DCProto_SaveChat& from);
  
  inline DCProto_SaveChat& operator=(const DCProto_SaveChat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SaveChat& default_instance();
  
  void Swap(DCProto_SaveChat* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SaveChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SaveChat& from);
  void MergeFrom(const DCProto_SaveChat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SaveChat_ID ID;
  static const ID GROUPID = DCProto_SaveChat_ID_GROUPID;
  static const ID UNITID = DCProto_SaveChat_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SaveChat_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SaveChat_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SaveChat_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SaveChat_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SaveChat_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SaveChat_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SaveChat_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string sender = 2;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 2;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  
  // optional string receiver = 3;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 3;
  inline const ::std::string& receiver() const;
  inline void set_receiver(const ::std::string& value);
  inline void set_receiver(const char* value);
  inline void set_receiver(const char* value, size_t size);
  inline ::std::string* mutable_receiver();
  inline ::std::string* release_receiver();
  
  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int64 senderID = 5;
  inline bool has_senderID() const;
  inline void clear_senderID();
  static const int kSenderIDFieldNumber = 5;
  inline ::google::protobuf::int64 senderID() const;
  inline void set_senderID(::google::protobuf::int64 value);
  
  // optional int64 receiverID = 6;
  inline bool has_receiverID() const;
  inline void clear_receiverID();
  static const int kReceiverIDFieldNumber = 6;
  inline ::google::protobuf::int64 receiverID() const;
  inline void set_receiverID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_SaveChat)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_senderID();
  inline void clear_has_senderID();
  inline void set_has_receiverID();
  inline void clear_has_receiverID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sender_;
  ::std::string* receiver_;
  ::std::string* content_;
  ::google::protobuf::int64 senderID_;
  ::google::protobuf::int64 receiverID_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SaveChat* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GodTarget : public ::google::protobuf::Message {
 public:
  DCProto_GodTarget();
  virtual ~DCProto_GodTarget();
  
  DCProto_GodTarget(const DCProto_GodTarget& from);
  
  inline DCProto_GodTarget& operator=(const DCProto_GodTarget& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GodTarget& default_instance();
  
  void Swap(DCProto_GodTarget* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GodTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GodTarget& from);
  void MergeFrom(const DCProto_GodTarget& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GodTarget_ID ID;
  static const ID GROUPID = DCProto_GodTarget_ID_GROUPID;
  static const ID UNITID = DCProto_GodTarget_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GodTarget_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GodTarget_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GodTarget_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GodTarget_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GodTarget_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GodTarget_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GodTarget_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int64 roleID = 2;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional .PB_PlayerAtt att = 3;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 3;
  inline const ::PB_PlayerAtt& att() const;
  inline ::PB_PlayerAtt* mutable_att();
  inline ::PB_PlayerAtt* release_att();
  
  // optional bool res = 4;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 4;
  inline bool res() const;
  inline void set_res(bool value);
  
  // optional int32 event = 5;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 5;
  inline ::google::protobuf::int32 event() const;
  inline void set_event(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_GodTarget)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_event();
  inline void clear_has_event();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 id_;
  bool res_;
  ::PB_PlayerAtt* att_;
  ::google::protobuf::int32 event_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GodTarget* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_LoadPlayerAtt : public ::google::protobuf::Message {
 public:
  DCProto_LoadPlayerAtt();
  virtual ~DCProto_LoadPlayerAtt();
  
  DCProto_LoadPlayerAtt(const DCProto_LoadPlayerAtt& from);
  
  inline DCProto_LoadPlayerAtt& operator=(const DCProto_LoadPlayerAtt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_LoadPlayerAtt& default_instance();
  
  void Swap(DCProto_LoadPlayerAtt* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_LoadPlayerAtt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_LoadPlayerAtt& from);
  void MergeFrom(const DCProto_LoadPlayerAtt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_LoadPlayerAtt_ID ID;
  static const ID GROUPID = DCProto_LoadPlayerAtt_ID_GROUPID;
  static const ID UNITID = DCProto_LoadPlayerAtt_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_LoadPlayerAtt_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_LoadPlayerAtt_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_LoadPlayerAtt_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_LoadPlayerAtt_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_LoadPlayerAtt_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_LoadPlayerAtt_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_LoadPlayerAtt_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // optional int64 roleID2 = 3;
  inline bool has_roleID2() const;
  inline void clear_roleID2();
  static const int kRoleID2FieldNumber = 3;
  inline ::google::protobuf::int64 roleID2() const;
  inline void set_roleID2(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_LoadPlayerAtt)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_roleID2();
  inline void clear_has_roleID2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int64 roleID2_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_LoadPlayerAtt* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_LoadFriendsFans : public ::google::protobuf::Message {
 public:
  DCProto_LoadFriendsFans();
  virtual ~DCProto_LoadFriendsFans();
  
  DCProto_LoadFriendsFans(const DCProto_LoadFriendsFans& from);
  
  inline DCProto_LoadFriendsFans& operator=(const DCProto_LoadFriendsFans& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_LoadFriendsFans& default_instance();
  
  void Swap(DCProto_LoadFriendsFans* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_LoadFriendsFans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_LoadFriendsFans& from);
  void MergeFrom(const DCProto_LoadFriendsFans& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_LoadFriendsFans_ID ID;
  static const ID GROUPID = DCProto_LoadFriendsFans_ID_GROUPID;
  static const ID UNITID = DCProto_LoadFriendsFans_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_LoadFriendsFans_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_LoadFriendsFans_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_LoadFriendsFans_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_LoadFriendsFans_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_LoadFriendsFans_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_LoadFriendsFans_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_LoadFriendsFans_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int64 roleID2 = 2;
  inline bool has_roleID2() const;
  inline void clear_roleID2();
  static const int kRoleID2FieldNumber = 2;
  inline ::google::protobuf::int64 roleID2() const;
  inline void set_roleID2(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_LoadFriendsFans)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_roleID2();
  inline void clear_has_roleID2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int64 roleID2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_LoadFriendsFans* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_ModifyFixedEventBit : public ::google::protobuf::Message {
 public:
  DCProto_ModifyFixedEventBit();
  virtual ~DCProto_ModifyFixedEventBit();
  
  DCProto_ModifyFixedEventBit(const DCProto_ModifyFixedEventBit& from);
  
  inline DCProto_ModifyFixedEventBit& operator=(const DCProto_ModifyFixedEventBit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_ModifyFixedEventBit& default_instance();
  
  void Swap(DCProto_ModifyFixedEventBit* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_ModifyFixedEventBit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_ModifyFixedEventBit& from);
  void MergeFrom(const DCProto_ModifyFixedEventBit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_ModifyFixedEventBit_ID ID;
  static const ID GROUPID = DCProto_ModifyFixedEventBit_ID_GROUPID;
  static const ID UNITID = DCProto_ModifyFixedEventBit_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_ModifyFixedEventBit_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_ModifyFixedEventBit_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_ModifyFixedEventBit_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_ModifyFixedEventBit_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_ModifyFixedEventBit_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_ModifyFixedEventBit_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_ModifyFixedEventBit_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 bit = 3;
  inline bool has_bit() const;
  inline void clear_bit();
  static const int kBitFieldNumber = 3;
  inline ::google::protobuf::int32 bit() const;
  inline void set_bit(::google::protobuf::int32 value);
  
  // optional bool one = 4;
  inline bool has_one() const;
  inline void clear_one();
  static const int kOneFieldNumber = 4;
  inline bool one() const;
  inline void set_one(bool value);
  
  // @@protoc_insertion_point(class_scope:DCProto_ModifyFixedEventBit)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bit();
  inline void clear_has_bit();
  inline void set_has_one();
  inline void clear_has_one();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 bit_;
  bool one_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_ModifyFixedEventBit* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_ModifyGodRank : public ::google::protobuf::Message {
 public:
  DCProto_ModifyGodRank();
  virtual ~DCProto_ModifyGodRank();
  
  DCProto_ModifyGodRank(const DCProto_ModifyGodRank& from);
  
  inline DCProto_ModifyGodRank& operator=(const DCProto_ModifyGodRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_ModifyGodRank& default_instance();
  
  void Swap(DCProto_ModifyGodRank* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_ModifyGodRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_ModifyGodRank& from);
  void MergeFrom(const DCProto_ModifyGodRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_ModifyGodRank_ID ID;
  static const ID GROUPID = DCProto_ModifyGodRank_ID_GROUPID;
  static const ID UNITID = DCProto_ModifyGodRank_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_ModifyGodRank_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_ModifyGodRank_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_ModifyGodRank_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_ModifyGodRank_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_ModifyGodRank_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_ModifyGodRank_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_ModifyGodRank_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_ModifyGodRank)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_ModifyGodRank* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GodRankRecordInfo : public ::google::protobuf::Message {
 public:
  DCProto_GodRankRecordInfo();
  virtual ~DCProto_GodRankRecordInfo();
  
  DCProto_GodRankRecordInfo(const DCProto_GodRankRecordInfo& from);
  
  inline DCProto_GodRankRecordInfo& operator=(const DCProto_GodRankRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GodRankRecordInfo& default_instance();
  
  void Swap(DCProto_GodRankRecordInfo* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GodRankRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GodRankRecordInfo& from);
  void MergeFrom(const DCProto_GodRankRecordInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .RecordInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::RecordInfo& info() const;
  inline ::RecordInfo* mutable_info();
  inline ::RecordInfo* release_info();
  
  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:DCProto_GodRankRecordInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::RecordInfo* info_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GodRankRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_SaveGodRankInfoRecord : public ::google::protobuf::Message {
 public:
  DCProto_SaveGodRankInfoRecord();
  virtual ~DCProto_SaveGodRankInfoRecord();
  
  DCProto_SaveGodRankInfoRecord(const DCProto_SaveGodRankInfoRecord& from);
  
  inline DCProto_SaveGodRankInfoRecord& operator=(const DCProto_SaveGodRankInfoRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SaveGodRankInfoRecord& default_instance();
  
  void Swap(DCProto_SaveGodRankInfoRecord* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SaveGodRankInfoRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SaveGodRankInfoRecord& from);
  void MergeFrom(const DCProto_SaveGodRankInfoRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SaveGodRankInfoRecord_ID ID;
  static const ID GROUPID = DCProto_SaveGodRankInfoRecord_ID_GROUPID;
  static const ID UNITID = DCProto_SaveGodRankInfoRecord_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SaveGodRankInfoRecord_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SaveGodRankInfoRecord_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SaveGodRankInfoRecord_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SaveGodRankInfoRecord_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SaveGodRankInfoRecord_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SaveGodRankInfoRecord_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SaveGodRankInfoRecord_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .DCProto_GodRankRecordInfo info1 = 1;
  inline bool has_info1() const;
  inline void clear_info1();
  static const int kInfo1FieldNumber = 1;
  inline const ::DCProto_GodRankRecordInfo& info1() const;
  inline ::DCProto_GodRankRecordInfo* mutable_info1();
  inline ::DCProto_GodRankRecordInfo* release_info1();
  
  // optional .DCProto_GodRankRecordInfo info2 = 2;
  inline bool has_info2() const;
  inline void clear_info2();
  static const int kInfo2FieldNumber = 2;
  inline const ::DCProto_GodRankRecordInfo& info2() const;
  inline ::DCProto_GodRankRecordInfo* mutable_info2();
  inline ::DCProto_GodRankRecordInfo* release_info2();
  
  // @@protoc_insertion_point(class_scope:DCProto_SaveGodRankInfoRecord)
 private:
  inline void set_has_info1();
  inline void clear_has_info1();
  inline void set_has_info2();
  inline void clear_has_info2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DCProto_GodRankRecordInfo* info1_;
  ::DCProto_GodRankRecordInfo* info2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SaveGodRankInfoRecord* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_QueryGodRole : public ::google::protobuf::Message {
 public:
  DCProto_QueryGodRole();
  virtual ~DCProto_QueryGodRole();
  
  DCProto_QueryGodRole(const DCProto_QueryGodRole& from);
  
  inline DCProto_QueryGodRole& operator=(const DCProto_QueryGodRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_QueryGodRole& default_instance();
  
  void Swap(DCProto_QueryGodRole* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_QueryGodRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_QueryGodRole& from);
  void MergeFrom(const DCProto_QueryGodRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_QueryGodRole_ID ID;
  static const ID GROUPID = DCProto_QueryGodRole_ID_GROUPID;
  static const ID UNITID = DCProto_QueryGodRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_QueryGodRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_QueryGodRole_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_QueryGodRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_QueryGodRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_QueryGodRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_QueryGodRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_QueryGodRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional .PB_PlayerAtt att = 2;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline const ::PB_PlayerAtt& att() const;
  inline ::PB_PlayerAtt* mutable_att();
  inline ::PB_PlayerAtt* release_att();
  
  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_QueryGodRole)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::PB_PlayerAtt* att_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_QueryGodRole* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_RandomRoles : public ::google::protobuf::Message {
 public:
  DCProto_RandomRoles();
  virtual ~DCProto_RandomRoles();
  
  DCProto_RandomRoles(const DCProto_RandomRoles& from);
  
  inline DCProto_RandomRoles& operator=(const DCProto_RandomRoles& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_RandomRoles& default_instance();
  
  void Swap(DCProto_RandomRoles* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_RandomRoles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_RandomRoles& from);
  void MergeFrom(const DCProto_RandomRoles& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_RandomRoles_ID ID;
  static const ID GROUPID = DCProto_RandomRoles_ID_GROUPID;
  static const ID UNITID = DCProto_RandomRoles_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_RandomRoles_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_RandomRoles_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_RandomRoles_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_RandomRoles_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_RandomRoles_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_RandomRoles_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_RandomRoles_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // repeated .PB_PlayerAtt atts = 2;
  inline int atts_size() const;
  inline void clear_atts();
  static const int kAttsFieldNumber = 2;
  inline const ::PB_PlayerAtt& atts(int index) const;
  inline ::PB_PlayerAtt* mutable_atts(int index);
  inline ::PB_PlayerAtt* add_atts();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
      atts() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
      mutable_atts();
  
  // @@protoc_insertion_point(class_scope:DCProto_RandomRoles)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt > atts_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_RandomRoles* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_SendMailExceptRoles : public ::google::protobuf::Message {
 public:
  DCProto_SendMailExceptRoles();
  virtual ~DCProto_SendMailExceptRoles();
  
  DCProto_SendMailExceptRoles(const DCProto_SendMailExceptRoles& from);
  
  inline DCProto_SendMailExceptRoles& operator=(const DCProto_SendMailExceptRoles& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SendMailExceptRoles& default_instance();
  
  void Swap(DCProto_SendMailExceptRoles* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SendMailExceptRoles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SendMailExceptRoles& from);
  void MergeFrom(const DCProto_SendMailExceptRoles& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SendMailExceptRoles_ID ID;
  static const ID GROUPID = DCProto_SendMailExceptRoles_ID_GROUPID;
  static const ID UNITID = DCProto_SendMailExceptRoles_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SendMailExceptRoles_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SendMailExceptRoles_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SendMailExceptRoles_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SendMailExceptRoles_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SendMailExceptRoles_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SendMailExceptRoles_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SendMailExceptRoles_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int64 roleIDs = 1;
  inline int roleIDs_size() const;
  inline void clear_roleIDs();
  static const int kRoleIDsFieldNumber = 1;
  inline ::google::protobuf::int64 roleIDs(int index) const;
  inline void set_roleIDs(int index, ::google::protobuf::int64 value);
  inline void add_roleIDs(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      roleIDs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_roleIDs();
  
  // optional .NetProto_SendMail sm = 2;
  inline bool has_sm() const;
  inline void clear_sm();
  static const int kSmFieldNumber = 2;
  inline const ::NetProto_SendMail& sm() const;
  inline ::NetProto_SendMail* mutable_sm();
  inline ::NetProto_SendMail* release_sm();
  
  // @@protoc_insertion_point(class_scope:DCProto_SendMailExceptRoles)
 private:
  inline void set_has_sm();
  inline void clear_has_sm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > roleIDs_;
  ::NetProto_SendMail* sm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SendMailExceptRoles* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_AddOutLineFriends : public ::google::protobuf::Message {
 public:
  DCProto_AddOutLineFriends();
  virtual ~DCProto_AddOutLineFriends();
  
  DCProto_AddOutLineFriends(const DCProto_AddOutLineFriends& from);
  
  inline DCProto_AddOutLineFriends& operator=(const DCProto_AddOutLineFriends& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_AddOutLineFriends& default_instance();
  
  void Swap(DCProto_AddOutLineFriends* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_AddOutLineFriends* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_AddOutLineFriends& from);
  void MergeFrom(const DCProto_AddOutLineFriends& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_AddOutLineFriends_ID ID;
  static const ID GROUPID = DCProto_AddOutLineFriends_ID_GROUPID;
  static const ID UNITID = DCProto_AddOutLineFriends_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_AddOutLineFriends_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_AddOutLineFriends_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_AddOutLineFriends_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_AddOutLineFriends_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_AddOutLineFriends_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_AddOutLineFriends_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_AddOutLineFriends_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID1 = 1;
  inline bool has_roleID1() const;
  inline void clear_roleID1();
  static const int kRoleID1FieldNumber = 1;
  inline ::google::protobuf::int64 roleID1() const;
  inline void set_roleID1(::google::protobuf::int64 value);
  
  // optional int64 roleID2 = 2;
  inline bool has_roleID2() const;
  inline void clear_roleID2();
  static const int kRoleID2FieldNumber = 2;
  inline ::google::protobuf::int64 roleID2() const;
  inline void set_roleID2(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .PB_ProfessionInfo.Type professionType = 4;
  inline bool has_professionType() const;
  inline void clear_professionType();
  static const int kProfessionTypeFieldNumber = 4;
  inline ::PB_ProfessionInfo_Type professionType() const;
  inline void set_professionType(::PB_ProfessionInfo_Type value);
  
  // @@protoc_insertion_point(class_scope:DCProto_AddOutLineFriends)
 private:
  inline void set_has_roleID1();
  inline void clear_has_roleID1();
  inline void set_has_roleID2();
  inline void clear_has_roleID2();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_professionType();
  inline void clear_has_professionType();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID1_;
  ::google::protobuf::int64 roleID2_;
  ::std::string* name_;
  int professionType_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_AddOutLineFriends* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_LoadHireRoleDate : public ::google::protobuf::Message {
 public:
  DCProto_LoadHireRoleDate();
  virtual ~DCProto_LoadHireRoleDate();
  
  DCProto_LoadHireRoleDate(const DCProto_LoadHireRoleDate& from);
  
  inline DCProto_LoadHireRoleDate& operator=(const DCProto_LoadHireRoleDate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_LoadHireRoleDate& default_instance();
  
  void Swap(DCProto_LoadHireRoleDate* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_LoadHireRoleDate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_LoadHireRoleDate& from);
  void MergeFrom(const DCProto_LoadHireRoleDate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_LoadHireRoleDate_ID ID;
  static const ID GROUPID = DCProto_LoadHireRoleDate_ID_GROUPID;
  static const ID UNITID = DCProto_LoadHireRoleDate_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_LoadHireRoleDate_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_LoadHireRoleDate_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_LoadHireRoleDate_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_LoadHireRoleDate_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_LoadHireRoleDate_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_LoadHireRoleDate_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_LoadHireRoleDate_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int64 roleID = 1;
  inline int roleID_size() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID(int index) const;
  inline void set_roleID(int index, ::google::protobuf::int64 value);
  inline void add_roleID(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      roleID() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_roleID();
  
  // repeated .PB_PlayerAtt atts = 2;
  inline int atts_size() const;
  inline void clear_atts();
  static const int kAttsFieldNumber = 2;
  inline const ::PB_PlayerAtt& atts(int index) const;
  inline ::PB_PlayerAtt* mutable_atts(int index);
  inline ::PB_PlayerAtt* add_atts();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
      atts() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
      mutable_atts();
  
  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 power = 4;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 4;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_LoadHireRoleDate)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_power();
  inline void clear_has_power();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > roleID_;
  ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt > atts_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 power_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_LoadHireRoleDate* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_QueryRoleFaction : public ::google::protobuf::Message {
 public:
  DCProto_QueryRoleFaction();
  virtual ~DCProto_QueryRoleFaction();
  
  DCProto_QueryRoleFaction(const DCProto_QueryRoleFaction& from);
  
  inline DCProto_QueryRoleFaction& operator=(const DCProto_QueryRoleFaction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_QueryRoleFaction& default_instance();
  
  void Swap(DCProto_QueryRoleFaction* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_QueryRoleFaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_QueryRoleFaction& from);
  void MergeFrom(const DCProto_QueryRoleFaction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_QueryRoleFaction_ID ID;
  static const ID GROUPID = DCProto_QueryRoleFaction_ID_GROUPID;
  static const ID UNITID = DCProto_QueryRoleFaction_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_QueryRoleFaction_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_QueryRoleFaction_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_QueryRoleFaction_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_QueryRoleFaction_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_QueryRoleFaction_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_QueryRoleFaction_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_QueryRoleFaction_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int64 roleID = 1;
  inline int roleID_size() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID(int index) const;
  inline void set_roleID(int index, ::google::protobuf::int64 value);
  inline void add_roleID(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      roleID() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_roleID();
  
  // repeated string faction = 2;
  inline int faction_size() const;
  inline void clear_faction();
  static const int kFactionFieldNumber = 2;
  inline const ::std::string& faction(int index) const;
  inline ::std::string* mutable_faction(int index);
  inline void set_faction(int index, const ::std::string& value);
  inline void set_faction(int index, const char* value);
  inline void set_faction(int index, const char* value, size_t size);
  inline ::std::string* add_faction();
  inline void add_faction(const ::std::string& value);
  inline void add_faction(const char* value);
  inline void add_faction(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& faction() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_faction();
  
  // @@protoc_insertion_point(class_scope:DCProto_QueryRoleFaction)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > roleID_;
  ::google::protobuf::RepeatedPtrField< ::std::string> faction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_QueryRoleFaction* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_TencentBuyGoodsUrl : public ::google::protobuf::Message {
 public:
  DCProto_TencentBuyGoodsUrl();
  virtual ~DCProto_TencentBuyGoodsUrl();
  
  DCProto_TencentBuyGoodsUrl(const DCProto_TencentBuyGoodsUrl& from);
  
  inline DCProto_TencentBuyGoodsUrl& operator=(const DCProto_TencentBuyGoodsUrl& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_TencentBuyGoodsUrl& default_instance();
  
  void Swap(DCProto_TencentBuyGoodsUrl* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_TencentBuyGoodsUrl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_TencentBuyGoodsUrl& from);
  void MergeFrom(const DCProto_TencentBuyGoodsUrl& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_TencentBuyGoodsUrl_ID ID;
  static const ID GROUPID = DCProto_TencentBuyGoodsUrl_ID_GROUPID;
  static const ID UNITID = DCProto_TencentBuyGoodsUrl_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_TencentBuyGoodsUrl_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_TencentBuyGoodsUrl_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_TencentBuyGoodsUrl_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_TencentBuyGoodsUrl_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_TencentBuyGoodsUrl_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_TencentBuyGoodsUrl_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_TencentBuyGoodsUrl_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_TencentBuyGoodsUrl v = 1;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 1;
  inline const ::NetProto_TencentBuyGoodsUrl& v() const;
  inline ::NetProto_TencentBuyGoodsUrl* mutable_v();
  inline ::NetProto_TencentBuyGoodsUrl* release_v();
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_TencentBuyGoodsUrl)
 private:
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_TencentBuyGoodsUrl* v_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_TencentBuyGoodsUrl* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_Cost : public ::google::protobuf::Message {
 public:
  DCProto_Cost();
  virtual ~DCProto_Cost();
  
  DCProto_Cost(const DCProto_Cost& from);
  
  inline DCProto_Cost& operator=(const DCProto_Cost& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_Cost& default_instance();
  
  void Swap(DCProto_Cost* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_Cost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_Cost& from);
  void MergeFrom(const DCProto_Cost& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_Cost_ID ID;
  static const ID GROUPID = DCProto_Cost_ID_GROUPID;
  static const ID UNITID = DCProto_Cost_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_Cost_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_Cost_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_Cost_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_Cost_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_Cost_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_Cost_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_Cost_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 v = 1;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 1;
  inline ::google::protobuf::int32 v() const;
  inline void set_v(::google::protobuf::int32 value);
  
  // optional .PlayerInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PlayerInfo& info() const;
  inline ::PlayerInfo* mutable_info();
  inline ::PlayerInfo* release_info();
  
  // @@protoc_insertion_point(class_scope:DCProto_Cost)
 private:
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PlayerInfo* info_;
  ::google::protobuf::int32 v_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_Cost* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_FilterRecharge : public ::google::protobuf::Message {
 public:
  DCProto_FilterRecharge();
  virtual ~DCProto_FilterRecharge();
  
  DCProto_FilterRecharge(const DCProto_FilterRecharge& from);
  
  inline DCProto_FilterRecharge& operator=(const DCProto_FilterRecharge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_FilterRecharge& default_instance();
  
  void Swap(DCProto_FilterRecharge* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_FilterRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_FilterRecharge& from);
  void MergeFrom(const DCProto_FilterRecharge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_FilterRecharge_ID ID;
  static const ID GROUPID = DCProto_FilterRecharge_ID_GROUPID;
  static const ID UNITID = DCProto_FilterRecharge_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_FilterRecharge_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_FilterRecharge_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_FilterRecharge_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_FilterRecharge_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_FilterRecharge_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_FilterRecharge_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_FilterRecharge_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .NetProto_Recharge recharge = 1;
  inline int recharge_size() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 1;
  inline const ::NetProto_Recharge& recharge(int index) const;
  inline ::NetProto_Recharge* mutable_recharge(int index);
  inline ::NetProto_Recharge* add_recharge();
  inline const ::google::protobuf::RepeatedPtrField< ::NetProto_Recharge >&
      recharge() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetProto_Recharge >*
      mutable_recharge();
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .PlayerInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::PlayerInfo& info() const;
  inline ::PlayerInfo* mutable_info();
  inline ::PlayerInfo* release_info();
  
  // optional int64 roleID = 4;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 4;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_FilterRecharge)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NetProto_Recharge > recharge_;
  ::PlayerInfo* info_;
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_FilterRecharge* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_SetVIP : public ::google::protobuf::Message {
 public:
  DCProto_SetVIP();
  virtual ~DCProto_SetVIP();
  
  DCProto_SetVIP(const DCProto_SetVIP& from);
  
  inline DCProto_SetVIP& operator=(const DCProto_SetVIP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SetVIP& default_instance();
  
  void Swap(DCProto_SetVIP* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SetVIP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SetVIP& from);
  void MergeFrom(const DCProto_SetVIP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SetVIP_ID ID;
  static const ID GROUPID = DCProto_SetVIP_ID_GROUPID;
  static const ID UNITID = DCProto_SetVIP_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SetVIP_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SetVIP_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SetVIP_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SetVIP_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SetVIP_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SetVIP_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SetVIP_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GMModifyVIP info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::NetProto_GMModifyVIP& info() const;
  inline ::NetProto_GMModifyVIP* mutable_info();
  inline ::NetProto_GMModifyVIP* release_info();
  
  // @@protoc_insertion_point(class_scope:DCProto_SetVIP)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMModifyVIP* info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SetVIP* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_CollectEquipment : public ::google::protobuf::Message {
 public:
  DCProto_CollectEquipment();
  virtual ~DCProto_CollectEquipment();
  
  DCProto_CollectEquipment(const DCProto_CollectEquipment& from);
  
  inline DCProto_CollectEquipment& operator=(const DCProto_CollectEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_CollectEquipment& default_instance();
  
  void Swap(DCProto_CollectEquipment* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_CollectEquipment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_CollectEquipment& from);
  void MergeFrom(const DCProto_CollectEquipment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_CollectEquipment_ID ID;
  static const ID GROUPID = DCProto_CollectEquipment_ID_GROUPID;
  static const ID UNITID = DCProto_CollectEquipment_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_CollectEquipment_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_CollectEquipment_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_CollectEquipment_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_CollectEquipment_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_CollectEquipment_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_CollectEquipment_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_CollectEquipment_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 cur = 1;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 1;
  inline ::google::protobuf::int64 cur() const;
  inline void set_cur(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_CollectEquipment)
 private:
  inline void set_has_cur();
  inline void clear_has_cur();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 cur_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_CollectEquipment* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_SaveEquipmentData : public ::google::protobuf::Message {
 public:
  DCProto_SaveEquipmentData();
  virtual ~DCProto_SaveEquipmentData();
  
  DCProto_SaveEquipmentData(const DCProto_SaveEquipmentData& from);
  
  inline DCProto_SaveEquipmentData& operator=(const DCProto_SaveEquipmentData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SaveEquipmentData& default_instance();
  
  void Swap(DCProto_SaveEquipmentData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SaveEquipmentData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SaveEquipmentData& from);
  void MergeFrom(const DCProto_SaveEquipmentData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SaveEquipmentData_ID ID;
  static const ID GROUPID = DCProto_SaveEquipmentData_ID_GROUPID;
  static const ID UNITID = DCProto_SaveEquipmentData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SaveEquipmentData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SaveEquipmentData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SaveEquipmentData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SaveEquipmentData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SaveEquipmentData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SaveEquipmentData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SaveEquipmentData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .EquipmentInfo equipments = 1;
  inline int equipments_size() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 1;
  inline const ::EquipmentInfo& equipments(int index) const;
  inline ::EquipmentInfo* mutable_equipments(int index);
  inline ::EquipmentInfo* add_equipments();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >&
      equipments() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >*
      mutable_equipments();
  
  // repeated int64 owner = 2;
  inline int owner_size() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 2;
  inline ::google::protobuf::int64 owner(int index) const;
  inline void set_owner(int index, ::google::protobuf::int64 value);
  inline void add_owner(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      owner() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_owner();
  
  // @@protoc_insertion_point(class_scope:DCProto_SaveEquipmentData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::EquipmentInfo > equipments_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > owner_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SaveEquipmentData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_LoadEquipmentData : public ::google::protobuf::Message {
 public:
  DCProto_LoadEquipmentData();
  virtual ~DCProto_LoadEquipmentData();
  
  DCProto_LoadEquipmentData(const DCProto_LoadEquipmentData& from);
  
  inline DCProto_LoadEquipmentData& operator=(const DCProto_LoadEquipmentData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_LoadEquipmentData& default_instance();
  
  void Swap(DCProto_LoadEquipmentData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_LoadEquipmentData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_LoadEquipmentData& from);
  void MergeFrom(const DCProto_LoadEquipmentData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_LoadEquipmentData_ID ID;
  static const ID GROUPID = DCProto_LoadEquipmentData_ID_GROUPID;
  static const ID UNITID = DCProto_LoadEquipmentData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_LoadEquipmentData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_LoadEquipmentData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_LoadEquipmentData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_LoadEquipmentData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_LoadEquipmentData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_LoadEquipmentData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_LoadEquipmentData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int64 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int64 value);
  inline void add_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_id();
  
  // repeated .EquipmentInfo equipment = 2;
  inline int equipment_size() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 2;
  inline const ::EquipmentInfo& equipment(int index) const;
  inline ::EquipmentInfo* mutable_equipment(int index);
  inline ::EquipmentInfo* add_equipment();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >&
      equipment() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >*
      mutable_equipment();
  
  // @@protoc_insertion_point(class_scope:DCProto_LoadEquipmentData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > id_;
  ::google::protobuf::RepeatedPtrField< ::EquipmentInfo > equipment_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_LoadEquipmentData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_DeleteEquipmentData : public ::google::protobuf::Message {
 public:
  DCProto_DeleteEquipmentData();
  virtual ~DCProto_DeleteEquipmentData();
  
  DCProto_DeleteEquipmentData(const DCProto_DeleteEquipmentData& from);
  
  inline DCProto_DeleteEquipmentData& operator=(const DCProto_DeleteEquipmentData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_DeleteEquipmentData& default_instance();
  
  void Swap(DCProto_DeleteEquipmentData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_DeleteEquipmentData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_DeleteEquipmentData& from);
  void MergeFrom(const DCProto_DeleteEquipmentData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_DeleteEquipmentData_ID ID;
  static const ID GROUPID = DCProto_DeleteEquipmentData_ID_GROUPID;
  static const ID UNITID = DCProto_DeleteEquipmentData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_DeleteEquipmentData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_DeleteEquipmentData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_DeleteEquipmentData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_DeleteEquipmentData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_DeleteEquipmentData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_DeleteEquipmentData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_DeleteEquipmentData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int64 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int64 value);
  inline void add_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_id();
  
  // @@protoc_insertion_point(class_scope:DCProto_DeleteEquipmentData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_DeleteEquipmentData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_QueryEquipment : public ::google::protobuf::Message {
 public:
  DCProto_QueryEquipment();
  virtual ~DCProto_QueryEquipment();
  
  DCProto_QueryEquipment(const DCProto_QueryEquipment& from);
  
  inline DCProto_QueryEquipment& operator=(const DCProto_QueryEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_QueryEquipment& default_instance();
  
  void Swap(DCProto_QueryEquipment* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_QueryEquipment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_QueryEquipment& from);
  void MergeFrom(const DCProto_QueryEquipment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_QueryEquipment_ID ID;
  static const ID GROUPID = DCProto_QueryEquipment_ID_GROUPID;
  static const ID UNITID = DCProto_QueryEquipment_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_QueryEquipment_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_QueryEquipment_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_QueryEquipment_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_QueryEquipment_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_QueryEquipment_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_QueryEquipment_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_QueryEquipment_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 itemID = 1;
  inline bool has_itemID() const;
  inline void clear_itemID();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int64 itemID() const;
  inline void set_itemID(::google::protobuf::int64 value);
  
  // optional .EquipmentInfo equipment = 2;
  inline bool has_equipment() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 2;
  inline const ::EquipmentInfo& equipment() const;
  inline ::EquipmentInfo* mutable_equipment();
  inline ::EquipmentInfo* release_equipment();
  
  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_QueryEquipment)
 private:
  inline void set_has_itemID();
  inline void clear_has_itemID();
  inline void set_has_equipment();
  inline void clear_has_equipment();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 itemID_;
  ::EquipmentInfo* equipment_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_QueryEquipment* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMOrder : public ::google::protobuf::Message {
 public:
  DCProto_GMOrder();
  virtual ~DCProto_GMOrder();
  
  DCProto_GMOrder(const DCProto_GMOrder& from);
  
  inline DCProto_GMOrder& operator=(const DCProto_GMOrder& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMOrder& default_instance();
  
  void Swap(DCProto_GMOrder* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMOrder& from);
  void MergeFrom(const DCProto_GMOrder& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMOrder_ID ID;
  static const ID GROUPID = DCProto_GMOrder_ID_GROUPID;
  static const ID UNITID = DCProto_GMOrder_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMOrder_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMOrder_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMOrder_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMOrder_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMOrder_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMOrder_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMOrder_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GMOrder order = 1;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline const ::NetProto_GMOrder& order() const;
  inline ::NetProto_GMOrder* mutable_order();
  inline ::NetProto_GMOrder* release_order();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMOrder)
 private:
  inline void set_has_order();
  inline void clear_has_order();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMOrder* order_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMOrder* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMData : public ::google::protobuf::Message {
 public:
  DCProto_GMData();
  virtual ~DCProto_GMData();
  
  DCProto_GMData(const DCProto_GMData& from);
  
  inline DCProto_GMData& operator=(const DCProto_GMData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMData& default_instance();
  
  void Swap(DCProto_GMData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMData& from);
  void MergeFrom(const DCProto_GMData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMData_ID ID;
  static const ID GROUPID = DCProto_GMData_ID_GROUPID;
  static const ID UNITID = DCProto_GMData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int64 roleID = 2;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 profession = 5;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 5;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);
  
  // optional int32 startTime = 6;
  inline bool has_startTime() const;
  inline void clear_startTime();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::int32 startTime() const;
  inline void set_startTime(::google::protobuf::int32 value);
  
  // optional int32 endTime = 7;
  inline bool has_endTime() const;
  inline void clear_endTime();
  static const int kEndTimeFieldNumber = 7;
  inline ::google::protobuf::int32 endTime() const;
  inline void set_endTime(::google::protobuf::int32 value);
  
  // optional string GM = 8;
  inline bool has_GM() const;
  inline void clear_GM();
  static const int kGMFieldNumber = 8;
  inline const ::std::string& GM() const;
  inline void set_GM(const ::std::string& value);
  inline void set_GM(const char* value);
  inline void set_GM(const char* value, size_t size);
  inline ::std::string* mutable_GM();
  inline ::std::string* release_GM();
  
  // optional bool flag = 9;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 9;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:DCProto_GMData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_startTime();
  inline void clear_has_startTime();
  inline void set_has_endTime();
  inline void clear_has_endTime();
  inline void set_has_GM();
  inline void clear_has_GM();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 startTime_;
  ::std::string* GM_;
  ::google::protobuf::int32 endTime_;
  bool flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMSaveData : public ::google::protobuf::Message {
 public:
  DCProto_GMSaveData();
  virtual ~DCProto_GMSaveData();
  
  DCProto_GMSaveData(const DCProto_GMSaveData& from);
  
  inline DCProto_GMSaveData& operator=(const DCProto_GMSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMSaveData& default_instance();
  
  void Swap(DCProto_GMSaveData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMSaveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMSaveData& from);
  void MergeFrom(const DCProto_GMSaveData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMSaveData_ID ID;
  static const ID GROUPID = DCProto_GMSaveData_ID_GROUPID;
  static const ID UNITID = DCProto_GMSaveData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMSaveData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMSaveData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMSaveData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMSaveData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMSaveData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMSaveData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMSaveData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .DCProto_GMData gmData = 1;
  inline bool has_gmData() const;
  inline void clear_gmData();
  static const int kGmDataFieldNumber = 1;
  inline const ::DCProto_GMData& gmData() const;
  inline ::DCProto_GMData* mutable_gmData();
  inline ::DCProto_GMData* release_gmData();
  
  // optional bool addOrDel = 2;
  inline bool has_addOrDel() const;
  inline void clear_addOrDel();
  static const int kAddOrDelFieldNumber = 2;
  inline bool addOrDel() const;
  inline void set_addOrDel(bool value);
  
  // @@protoc_insertion_point(class_scope:DCProto_GMSaveData)
 private:
  inline void set_has_gmData();
  inline void clear_has_gmData();
  inline void set_has_addOrDel();
  inline void clear_has_addOrDel();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DCProto_GMData* gmData_;
  bool addOrDel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMSaveData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMLoadData : public ::google::protobuf::Message {
 public:
  DCProto_GMLoadData();
  virtual ~DCProto_GMLoadData();
  
  DCProto_GMLoadData(const DCProto_GMLoadData& from);
  
  inline DCProto_GMLoadData& operator=(const DCProto_GMLoadData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMLoadData& default_instance();
  
  void Swap(DCProto_GMLoadData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMLoadData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMLoadData& from);
  void MergeFrom(const DCProto_GMLoadData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMLoadData_ID ID;
  static const ID GROUPID = DCProto_GMLoadData_ID_GROUPID;
  static const ID UNITID = DCProto_GMLoadData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMLoadData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMLoadData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMLoadData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMLoadData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMLoadData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMLoadData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMLoadData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .DCProto_GMData gmData = 1;
  inline int gmData_size() const;
  inline void clear_gmData();
  static const int kGmDataFieldNumber = 1;
  inline const ::DCProto_GMData& gmData(int index) const;
  inline ::DCProto_GMData* mutable_gmData(int index);
  inline ::DCProto_GMData* add_gmData();
  inline const ::google::protobuf::RepeatedPtrField< ::DCProto_GMData >&
      gmData() const;
  inline ::google::protobuf::RepeatedPtrField< ::DCProto_GMData >*
      mutable_gmData();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMLoadData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::DCProto_GMData > gmData_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMLoadData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMPlayerQuery : public ::google::protobuf::Message {
 public:
  DCProto_GMPlayerQuery();
  virtual ~DCProto_GMPlayerQuery();
  
  DCProto_GMPlayerQuery(const DCProto_GMPlayerQuery& from);
  
  inline DCProto_GMPlayerQuery& operator=(const DCProto_GMPlayerQuery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMPlayerQuery& default_instance();
  
  void Swap(DCProto_GMPlayerQuery* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMPlayerQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMPlayerQuery& from);
  void MergeFrom(const DCProto_GMPlayerQuery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMPlayerQuery_ID ID;
  static const ID GROUPID = DCProto_GMPlayerQuery_ID_GROUPID;
  static const ID UNITID = DCProto_GMPlayerQuery_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMPlayerQuery_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMPlayerQuery_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMPlayerQuery_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMPlayerQuery_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMPlayerQuery_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMPlayerQuery_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMPlayerQuery_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // optional .PB_PlayerAtt att = 2;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline const ::PB_PlayerAtt& att() const;
  inline ::PB_PlayerAtt* mutable_att();
  inline ::PB_PlayerAtt* release_att();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMPlayerQuery)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_att();
  inline void clear_has_att();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::PB_PlayerAtt* att_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMPlayerQuery* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMChatRecords : public ::google::protobuf::Message {
 public:
  DCProto_GMChatRecords();
  virtual ~DCProto_GMChatRecords();
  
  DCProto_GMChatRecords(const DCProto_GMChatRecords& from);
  
  inline DCProto_GMChatRecords& operator=(const DCProto_GMChatRecords& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMChatRecords& default_instance();
  
  void Swap(DCProto_GMChatRecords* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMChatRecords* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMChatRecords& from);
  void MergeFrom(const DCProto_GMChatRecords& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMChatRecords_ID ID;
  static const ID GROUPID = DCProto_GMChatRecords_ID_GROUPID;
  static const ID UNITID = DCProto_GMChatRecords_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMChatRecords_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMChatRecords_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMChatRecords_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMChatRecords_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMChatRecords_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMChatRecords_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMChatRecords_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_GMChatRecords record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::NetProto_GMChatRecords& record() const;
  inline ::NetProto_GMChatRecords* mutable_record();
  inline ::NetProto_GMChatRecords* release_record();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMChatRecords)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_record();
  inline void clear_has_record();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMChatRecords* record_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMChatRecords* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMRegistrCount : public ::google::protobuf::Message {
 public:
  DCProto_GMRegistrCount();
  virtual ~DCProto_GMRegistrCount();
  
  DCProto_GMRegistrCount(const DCProto_GMRegistrCount& from);
  
  inline DCProto_GMRegistrCount& operator=(const DCProto_GMRegistrCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMRegistrCount& default_instance();
  
  void Swap(DCProto_GMRegistrCount* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMRegistrCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMRegistrCount& from);
  void MergeFrom(const DCProto_GMRegistrCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMRegistrCount_ID ID;
  static const ID GROUPID = DCProto_GMRegistrCount_ID_GROUPID;
  static const ID UNITID = DCProto_GMRegistrCount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMRegistrCount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMRegistrCount_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMRegistrCount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMRegistrCount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMRegistrCount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMRegistrCount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMRegistrCount_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_GMRegistrCount record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::NetProto_GMRegistrCount& record() const;
  inline ::NetProto_GMRegistrCount* mutable_record();
  inline ::NetProto_GMRegistrCount* release_record();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMRegistrCount)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_record();
  inline void clear_has_record();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMRegistrCount* record_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMRegistrCount* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMRoleCount : public ::google::protobuf::Message {
 public:
  DCProto_GMRoleCount();
  virtual ~DCProto_GMRoleCount();
  
  DCProto_GMRoleCount(const DCProto_GMRoleCount& from);
  
  inline DCProto_GMRoleCount& operator=(const DCProto_GMRoleCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMRoleCount& default_instance();
  
  void Swap(DCProto_GMRoleCount* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMRoleCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMRoleCount& from);
  void MergeFrom(const DCProto_GMRoleCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMRoleCount_ID ID;
  static const ID GROUPID = DCProto_GMRoleCount_ID_GROUPID;
  static const ID UNITID = DCProto_GMRoleCount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMRoleCount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMRoleCount_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMRoleCount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMRoleCount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMRoleCount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMRoleCount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMRoleCount_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_GMRoleCount record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::NetProto_GMRoleCount& record() const;
  inline ::NetProto_GMRoleCount* mutable_record();
  inline ::NetProto_GMRoleCount* release_record();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMRoleCount)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_record();
  inline void clear_has_record();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMRoleCount* record_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMRoleCount* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMLevelStatistics : public ::google::protobuf::Message {
 public:
  DCProto_GMLevelStatistics();
  virtual ~DCProto_GMLevelStatistics();
  
  DCProto_GMLevelStatistics(const DCProto_GMLevelStatistics& from);
  
  inline DCProto_GMLevelStatistics& operator=(const DCProto_GMLevelStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMLevelStatistics& default_instance();
  
  void Swap(DCProto_GMLevelStatistics* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMLevelStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMLevelStatistics& from);
  void MergeFrom(const DCProto_GMLevelStatistics& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMLevelStatistics_ID ID;
  static const ID GROUPID = DCProto_GMLevelStatistics_ID_GROUPID;
  static const ID UNITID = DCProto_GMLevelStatistics_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMLevelStatistics_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMLevelStatistics_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMLevelStatistics_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMLevelStatistics_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMLevelStatistics_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMLevelStatistics_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMLevelStatistics_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_GMLevelStatistics record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::NetProto_GMLevelStatistics& record() const;
  inline ::NetProto_GMLevelStatistics* mutable_record();
  inline ::NetProto_GMLevelStatistics* release_record();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMLevelStatistics)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_record();
  inline void clear_has_record();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMLevelStatistics* record_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMLevelStatistics* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMOpenGuide : public ::google::protobuf::Message {
 public:
  DCProto_GMOpenGuide();
  virtual ~DCProto_GMOpenGuide();
  
  DCProto_GMOpenGuide(const DCProto_GMOpenGuide& from);
  
  inline DCProto_GMOpenGuide& operator=(const DCProto_GMOpenGuide& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMOpenGuide& default_instance();
  
  void Swap(DCProto_GMOpenGuide* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMOpenGuide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMOpenGuide& from);
  void MergeFrom(const DCProto_GMOpenGuide& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMOpenGuide_ID ID;
  static const ID GROUPID = DCProto_GMOpenGuide_ID_GROUPID;
  static const ID UNITID = DCProto_GMOpenGuide_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMOpenGuide_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMOpenGuide_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMOpenGuide_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMOpenGuide_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMOpenGuide_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMOpenGuide_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMOpenGuide_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GMOpenGuide info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::NetProto_GMOpenGuide& info() const;
  inline ::NetProto_GMOpenGuide* mutable_info();
  inline ::NetProto_GMOpenGuide* release_info();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMOpenGuide)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMOpenGuide* info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMOpenGuide* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMInfo : public ::google::protobuf::Message {
 public:
  DCProto_GMInfo();
  virtual ~DCProto_GMInfo();
  
  DCProto_GMInfo(const DCProto_GMInfo& from);
  
  inline DCProto_GMInfo& operator=(const DCProto_GMInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMInfo& default_instance();
  
  void Swap(DCProto_GMInfo* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMInfo& from);
  void MergeFrom(const DCProto_GMInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // optional int32 arg1 = 2;
  inline bool has_arg1() const;
  inline void clear_arg1();
  static const int kArg1FieldNumber = 2;
  inline ::google::protobuf::int32 arg1() const;
  inline void set_arg1(::google::protobuf::int32 value);
  
  // optional int32 arg2 = 3;
  inline bool has_arg2() const;
  inline void clear_arg2();
  static const int kArg2FieldNumber = 3;
  inline ::google::protobuf::int32 arg2() const;
  inline void set_arg2(::google::protobuf::int32 value);
  
  // optional int32 arg3 = 4;
  inline bool has_arg3() const;
  inline void clear_arg3();
  static const int kArg3FieldNumber = 4;
  inline ::google::protobuf::int32 arg3() const;
  inline void set_arg3(::google::protobuf::int32 value);
  
  // optional string str1 = 5;
  inline bool has_str1() const;
  inline void clear_str1();
  static const int kStr1FieldNumber = 5;
  inline const ::std::string& str1() const;
  inline void set_str1(const ::std::string& value);
  inline void set_str1(const char* value);
  inline void set_str1(const char* value, size_t size);
  inline ::std::string* mutable_str1();
  inline ::std::string* release_str1();
  
  // optional string str2 = 6;
  inline bool has_str2() const;
  inline void clear_str2();
  static const int kStr2FieldNumber = 6;
  inline const ::std::string& str2() const;
  inline void set_str2(const ::std::string& value);
  inline void set_str2(const char* value);
  inline void set_str2(const char* value, size_t size);
  inline ::std::string* mutable_str2();
  inline ::std::string* release_str2();
  
  // optional string str3 = 7;
  inline bool has_str3() const;
  inline void clear_str3();
  static const int kStr3FieldNumber = 7;
  inline const ::std::string& str3() const;
  inline void set_str3(const ::std::string& value);
  inline void set_str3(const char* value);
  inline void set_str3(const char* value, size_t size);
  inline ::std::string* mutable_str3();
  inline ::std::string* release_str3();
  
  // optional int64 roleID = 8;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 8;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_GMInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_arg1();
  inline void clear_has_arg1();
  inline void set_has_arg2();
  inline void clear_has_arg2();
  inline void set_has_arg3();
  inline void clear_has_arg3();
  inline void set_has_str1();
  inline void clear_has_str1();
  inline void set_has_str2();
  inline void clear_has_str2();
  inline void set_has_str3();
  inline void clear_has_str3();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 arg1_;
  ::google::protobuf::int32 arg2_;
  ::google::protobuf::int32 arg3_;
  ::std::string* str1_;
  ::std::string* str2_;
  ::std::string* str3_;
  ::google::protobuf::int64 roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMInfo* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_LoadAllDataFromGMDataTable : public ::google::protobuf::Message {
 public:
  DCProto_LoadAllDataFromGMDataTable();
  virtual ~DCProto_LoadAllDataFromGMDataTable();
  
  DCProto_LoadAllDataFromGMDataTable(const DCProto_LoadAllDataFromGMDataTable& from);
  
  inline DCProto_LoadAllDataFromGMDataTable& operator=(const DCProto_LoadAllDataFromGMDataTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_LoadAllDataFromGMDataTable& default_instance();
  
  void Swap(DCProto_LoadAllDataFromGMDataTable* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_LoadAllDataFromGMDataTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_LoadAllDataFromGMDataTable& from);
  void MergeFrom(const DCProto_LoadAllDataFromGMDataTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_LoadAllDataFromGMDataTable_ID ID;
  static const ID GROUPID = DCProto_LoadAllDataFromGMDataTable_ID_GROUPID;
  static const ID UNITID = DCProto_LoadAllDataFromGMDataTable_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_LoadAllDataFromGMDataTable_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_LoadAllDataFromGMDataTable_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_LoadAllDataFromGMDataTable_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_LoadAllDataFromGMDataTable_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_LoadAllDataFromGMDataTable_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_LoadAllDataFromGMDataTable_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_LoadAllDataFromGMDataTable_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .DCProto_GMInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::DCProto_GMInfo& info(int index) const;
  inline ::DCProto_GMInfo* mutable_info(int index);
  inline ::DCProto_GMInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:DCProto_LoadAllDataFromGMDataTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_LoadAllDataFromGMDataTable* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_SaveGMDataTable : public ::google::protobuf::Message {
 public:
  DCProto_SaveGMDataTable();
  virtual ~DCProto_SaveGMDataTable();
  
  DCProto_SaveGMDataTable(const DCProto_SaveGMDataTable& from);
  
  inline DCProto_SaveGMDataTable& operator=(const DCProto_SaveGMDataTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SaveGMDataTable& default_instance();
  
  void Swap(DCProto_SaveGMDataTable* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SaveGMDataTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SaveGMDataTable& from);
  void MergeFrom(const DCProto_SaveGMDataTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SaveGMDataTable_ID ID;
  static const ID GROUPID = DCProto_SaveGMDataTable_ID_GROUPID;
  static const ID UNITID = DCProto_SaveGMDataTable_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SaveGMDataTable_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SaveGMDataTable_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SaveGMDataTable_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SaveGMDataTable_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SaveGMDataTable_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SaveGMDataTable_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SaveGMDataTable_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .DCProto_GMInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::DCProto_GMInfo& info(int index) const;
  inline ::DCProto_GMInfo* mutable_info(int index);
  inline ::DCProto_GMInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo >*
      mutable_info();
  
  // optional int32 op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_SaveGMDataTable)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo > info_;
  ::google::protobuf::int32 op_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SaveGMDataTable* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMAddExchange : public ::google::protobuf::Message {
 public:
  DCProto_GMAddExchange();
  virtual ~DCProto_GMAddExchange();
  
  DCProto_GMAddExchange(const DCProto_GMAddExchange& from);
  
  inline DCProto_GMAddExchange& operator=(const DCProto_GMAddExchange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMAddExchange& default_instance();
  
  void Swap(DCProto_GMAddExchange* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMAddExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMAddExchange& from);
  void MergeFrom(const DCProto_GMAddExchange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMAddExchange_ID ID;
  static const ID GROUPID = DCProto_GMAddExchange_ID_GROUPID;
  static const ID UNITID = DCProto_GMAddExchange_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMAddExchange_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMAddExchange_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMAddExchange_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMAddExchange_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMAddExchange_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMAddExchange_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMAddExchange_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GMAddExchange info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::NetProto_GMAddExchange& info() const;
  inline ::NetProto_GMAddExchange* mutable_info();
  inline ::NetProto_GMAddExchange* release_info();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMAddExchange)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMAddExchange* info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMAddExchange* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMRekooRole : public ::google::protobuf::Message {
 public:
  DCProto_GMRekooRole();
  virtual ~DCProto_GMRekooRole();
  
  DCProto_GMRekooRole(const DCProto_GMRekooRole& from);
  
  inline DCProto_GMRekooRole& operator=(const DCProto_GMRekooRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMRekooRole& default_instance();
  
  void Swap(DCProto_GMRekooRole* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMRekooRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMRekooRole& from);
  void MergeFrom(const DCProto_GMRekooRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMRekooRole_ID ID;
  static const ID GROUPID = DCProto_GMRekooRole_ID_GROUPID;
  static const ID UNITID = DCProto_GMRekooRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMRekooRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMRekooRole_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMRekooRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMRekooRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMRekooRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMRekooRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMRekooRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_GMAddRekooRole info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::NetProto_GMAddRekooRole& info() const;
  inline ::NetProto_GMAddRekooRole* mutable_info();
  inline ::NetProto_GMAddRekooRole* release_info();
  
  // optional string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // @@protoc_insertion_point(class_scope:DCProto_GMRekooRole)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_str();
  inline void clear_has_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMAddRekooRole* info_;
  ::std::string* str_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMRekooRole* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_GMAddRekooRMB : public ::google::protobuf::Message {
 public:
  DCProto_GMAddRekooRMB();
  virtual ~DCProto_GMAddRekooRMB();
  
  DCProto_GMAddRekooRMB(const DCProto_GMAddRekooRMB& from);
  
  inline DCProto_GMAddRekooRMB& operator=(const DCProto_GMAddRekooRMB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_GMAddRekooRMB& default_instance();
  
  void Swap(DCProto_GMAddRekooRMB* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_GMAddRekooRMB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_GMAddRekooRMB& from);
  void MergeFrom(const DCProto_GMAddRekooRMB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_GMAddRekooRMB_ID ID;
  static const ID GROUPID = DCProto_GMAddRekooRMB_ID_GROUPID;
  static const ID UNITID = DCProto_GMAddRekooRMB_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_GMAddRekooRMB_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_GMAddRekooRMB_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_GMAddRekooRMB_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_GMAddRekooRMB_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_GMAddRekooRMB_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_GMAddRekooRMB_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_GMAddRekooRMB_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional int32 rmb = 2;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 2;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_GMAddRekooRMB)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::google::protobuf::int32 rmb_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_GMAddRekooRMB* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_LoadRekooRole : public ::google::protobuf::Message {
 public:
  DCProto_LoadRekooRole();
  virtual ~DCProto_LoadRekooRole();
  
  DCProto_LoadRekooRole(const DCProto_LoadRekooRole& from);
  
  inline DCProto_LoadRekooRole& operator=(const DCProto_LoadRekooRole& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_LoadRekooRole& default_instance();
  
  void Swap(DCProto_LoadRekooRole* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_LoadRekooRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_LoadRekooRole& from);
  void MergeFrom(const DCProto_LoadRekooRole& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_LoadRekooRole_ID ID;
  static const ID GROUPID = DCProto_LoadRekooRole_ID_GROUPID;
  static const ID UNITID = DCProto_LoadRekooRole_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_LoadRekooRole_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_LoadRekooRole_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_LoadRekooRole_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_LoadRekooRole_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_LoadRekooRole_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_LoadRekooRole_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_LoadRekooRole_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int64 roleID = 1;
  inline int roleID_size() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID(int index) const;
  inline void set_roleID(int index, ::google::protobuf::int64 value);
  inline void add_roleID(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      roleID() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_roleID();
  
  // @@protoc_insertion_point(class_scope:DCProto_LoadRekooRole)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_LoadRekooRole* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_AddCodeCount : public ::google::protobuf::Message {
 public:
  DCProto_AddCodeCount();
  virtual ~DCProto_AddCodeCount();
  
  DCProto_AddCodeCount(const DCProto_AddCodeCount& from);
  
  inline DCProto_AddCodeCount& operator=(const DCProto_AddCodeCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_AddCodeCount& default_instance();
  
  void Swap(DCProto_AddCodeCount* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_AddCodeCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_AddCodeCount& from);
  void MergeFrom(const DCProto_AddCodeCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_AddCodeCount_ID ID;
  static const ID GROUPID = DCProto_AddCodeCount_ID_GROUPID;
  static const ID UNITID = DCProto_AddCodeCount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_AddCodeCount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_AddCodeCount_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_AddCodeCount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_AddCodeCount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_AddCodeCount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_AddCodeCount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_AddCodeCount_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_AddCodeCount)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_AddCodeCount* default_instance_;
};
// -------------------------------------------------------------------

class InviteCode : public ::google::protobuf::Message {
 public:
  InviteCode();
  virtual ~InviteCode();
  
  InviteCode(const InviteCode& from);
  
  inline InviteCode& operator=(const InviteCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteCode& default_instance();
  
  void Swap(InviteCode* other);
  
  // implements Message ----------------------------------------------
  
  InviteCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteCode& from);
  void MergeFrom(const InviteCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional string selfCode = 2;
  inline bool has_selfCode() const;
  inline void clear_selfCode();
  static const int kSelfCodeFieldNumber = 2;
  inline const ::std::string& selfCode() const;
  inline void set_selfCode(const ::std::string& value);
  inline void set_selfCode(const char* value);
  inline void set_selfCode(const char* value, size_t size);
  inline ::std::string* mutable_selfCode();
  inline ::std::string* release_selfCode();
  
  // optional string otherCode = 3;
  inline bool has_otherCode() const;
  inline void clear_otherCode();
  static const int kOtherCodeFieldNumber = 3;
  inline const ::std::string& otherCode() const;
  inline void set_otherCode(const ::std::string& value);
  inline void set_otherCode(const char* value);
  inline void set_otherCode(const char* value, size_t size);
  inline ::std::string* mutable_otherCode();
  inline ::std::string* release_otherCode();
  
  // @@protoc_insertion_point(class_scope:InviteCode)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_selfCode();
  inline void clear_has_selfCode();
  inline void set_has_otherCode();
  inline void clear_has_otherCode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::std::string* selfCode_;
  ::std::string* otherCode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static InviteCode* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_LoadInviteCode : public ::google::protobuf::Message {
 public:
  DCProto_LoadInviteCode();
  virtual ~DCProto_LoadInviteCode();
  
  DCProto_LoadInviteCode(const DCProto_LoadInviteCode& from);
  
  inline DCProto_LoadInviteCode& operator=(const DCProto_LoadInviteCode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_LoadInviteCode& default_instance();
  
  void Swap(DCProto_LoadInviteCode* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_LoadInviteCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_LoadInviteCode& from);
  void MergeFrom(const DCProto_LoadInviteCode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_LoadInviteCode_ID ID;
  static const ID GROUPID = DCProto_LoadInviteCode_ID_GROUPID;
  static const ID UNITID = DCProto_LoadInviteCode_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_LoadInviteCode_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_LoadInviteCode_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_LoadInviteCode_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_LoadInviteCode_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_LoadInviteCode_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_LoadInviteCode_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_LoadInviteCode_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .InviteCode info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::InviteCode& info(int index) const;
  inline ::InviteCode* mutable_info(int index);
  inline ::InviteCode* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::InviteCode >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::InviteCode >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:DCProto_LoadInviteCode)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::InviteCode > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_LoadInviteCode* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_QueryGMAccount : public ::google::protobuf::Message {
 public:
  DCProto_QueryGMAccount();
  virtual ~DCProto_QueryGMAccount();
  
  DCProto_QueryGMAccount(const DCProto_QueryGMAccount& from);
  
  inline DCProto_QueryGMAccount& operator=(const DCProto_QueryGMAccount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_QueryGMAccount& default_instance();
  
  void Swap(DCProto_QueryGMAccount* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_QueryGMAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_QueryGMAccount& from);
  void MergeFrom(const DCProto_QueryGMAccount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_QueryGMAccount_ID ID;
  static const ID GROUPID = DCProto_QueryGMAccount_ID_GROUPID;
  static const ID UNITID = DCProto_QueryGMAccount_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_QueryGMAccount_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_QueryGMAccount_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_QueryGMAccount_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_QueryGMAccount_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_QueryGMAccount_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_QueryGMAccount_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_QueryGMAccount_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .NetProto_GMLogin gm = 2;
  inline bool has_gm() const;
  inline void clear_gm();
  static const int kGmFieldNumber = 2;
  inline const ::NetProto_GMLogin& gm() const;
  inline ::NetProto_GMLogin* mutable_gm();
  inline ::NetProto_GMLogin* release_gm();
  
  // @@protoc_insertion_point(class_scope:DCProto_QueryGMAccount)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_gm();
  inline void clear_has_gm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NetProto_GMLogin* gm_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_QueryGMAccount* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_RegistDeviceServer : public ::google::protobuf::Message {
 public:
  DCProto_RegistDeviceServer();
  virtual ~DCProto_RegistDeviceServer();
  
  DCProto_RegistDeviceServer(const DCProto_RegistDeviceServer& from);
  
  inline DCProto_RegistDeviceServer& operator=(const DCProto_RegistDeviceServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_RegistDeviceServer& default_instance();
  
  void Swap(DCProto_RegistDeviceServer* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_RegistDeviceServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_RegistDeviceServer& from);
  void MergeFrom(const DCProto_RegistDeviceServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_RegistDeviceServer_ID ID;
  static const ID GROUPID = DCProto_RegistDeviceServer_ID_GROUPID;
  static const ID UNITID = DCProto_RegistDeviceServer_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_RegistDeviceServer_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_RegistDeviceServer_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_RegistDeviceServer_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_RegistDeviceServer_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_RegistDeviceServer_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_RegistDeviceServer_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_RegistDeviceServer_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string deviceNum = 1;
  inline bool has_deviceNum() const;
  inline void clear_deviceNum();
  static const int kDeviceNumFieldNumber = 1;
  inline const ::std::string& deviceNum() const;
  inline void set_deviceNum(const ::std::string& value);
  inline void set_deviceNum(const char* value);
  inline void set_deviceNum(const char* value, size_t size);
  inline ::std::string* mutable_deviceNum();
  inline ::std::string* release_deviceNum();
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string idfa = 3;
  inline bool has_idfa() const;
  inline void clear_idfa();
  static const int kIdfaFieldNumber = 3;
  inline const ::std::string& idfa() const;
  inline void set_idfa(const ::std::string& value);
  inline void set_idfa(const char* value);
  inline void set_idfa(const char* value, size_t size);
  inline ::std::string* mutable_idfa();
  inline ::std::string* release_idfa();
  
  // optional bool noLine = 4;
  inline bool has_noLine() const;
  inline void clear_noLine();
  static const int kNoLineFieldNumber = 4;
  inline bool noLine() const;
  inline void set_noLine(bool value);
  
  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_RegistDeviceServer)
 private:
  inline void set_has_deviceNum();
  inline void clear_has_deviceNum();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_idfa();
  inline void clear_has_idfa();
  inline void set_has_noLine();
  inline void clear_has_noLine();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* deviceNum_;
  ::std::string* idfa_;
  ::google::protobuf::int32 id_;
  bool noLine_;
  ::google::protobuf::int32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_RegistDeviceServer* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_FactionData : public ::google::protobuf::Message {
 public:
  DCProto_FactionData();
  virtual ~DCProto_FactionData();
  
  DCProto_FactionData(const DCProto_FactionData& from);
  
  inline DCProto_FactionData& operator=(const DCProto_FactionData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_FactionData& default_instance();
  
  void Swap(DCProto_FactionData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_FactionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_FactionData& from);
  void MergeFrom(const DCProto_FactionData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_FactionData_ID ID;
  static const ID GROUPID = DCProto_FactionData_ID_GROUPID;
  static const ID UNITID = DCProto_FactionData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_FactionData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_FactionData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_FactionData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_FactionData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_FactionData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_FactionData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_FactionData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string factionName = 1;
  inline bool has_factionName() const;
  inline void clear_factionName();
  static const int kFactionNameFieldNumber = 1;
  inline const ::std::string& factionName() const;
  inline void set_factionName(const ::std::string& value);
  inline void set_factionName(const char* value);
  inline void set_factionName(const char* value, size_t size);
  inline ::std::string* mutable_factionName();
  inline ::std::string* release_factionName();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // optional int64 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);
  
  // optional int32 exp_time = 5;
  inline bool has_exp_time() const;
  inline void clear_exp_time();
  static const int kExpTimeFieldNumber = 5;
  inline ::google::protobuf::int32 exp_time() const;
  inline void set_exp_time(::google::protobuf::int32 value);
  
  // optional int32 item = 6;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 6;
  inline ::google::protobuf::int32 item() const;
  inline void set_item(::google::protobuf::int32 value);
  
  // optional string notice = 7;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 7;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  
  // optional string team = 8;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 8;
  inline const ::std::string& team() const;
  inline void set_team(const ::std::string& value);
  inline void set_team(const char* value);
  inline void set_team(const char* value, size_t size);
  inline ::std::string* mutable_team();
  inline ::std::string* release_team();
  
  // optional string guardian = 9;
  inline bool has_guardian() const;
  inline void clear_guardian();
  static const int kGuardianFieldNumber = 9;
  inline const ::std::string& guardian() const;
  inline void set_guardian(const ::std::string& value);
  inline void set_guardian(const char* value);
  inline void set_guardian(const char* value, size_t size);
  inline ::std::string* mutable_guardian();
  inline ::std::string* release_guardian();
  
  // @@protoc_insertion_point(class_scope:DCProto_FactionData)
 private:
  inline void set_has_factionName();
  inline void clear_has_factionName();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_exp_time();
  inline void clear_has_exp_time();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_guardian();
  inline void clear_has_guardian();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* factionName_;
  ::std::string* name_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 exp_time_;
  ::std::string* notice_;
  ::std::string* team_;
  ::std::string* guardian_;
  ::google::protobuf::int32 item_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_FactionData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_FactionLoadData : public ::google::protobuf::Message {
 public:
  DCProto_FactionLoadData();
  virtual ~DCProto_FactionLoadData();
  
  DCProto_FactionLoadData(const DCProto_FactionLoadData& from);
  
  inline DCProto_FactionLoadData& operator=(const DCProto_FactionLoadData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_FactionLoadData& default_instance();
  
  void Swap(DCProto_FactionLoadData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_FactionLoadData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_FactionLoadData& from);
  void MergeFrom(const DCProto_FactionLoadData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_FactionLoadData_ID ID;
  static const ID GROUPID = DCProto_FactionLoadData_ID_GROUPID;
  static const ID UNITID = DCProto_FactionLoadData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_FactionLoadData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_FactionLoadData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_FactionLoadData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_FactionLoadData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_FactionLoadData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_FactionLoadData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_FactionLoadData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .DCProto_FactionData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::DCProto_FactionData& data(int index) const;
  inline ::DCProto_FactionData* mutable_data(int index);
  inline ::DCProto_FactionData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:DCProto_FactionLoadData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_FactionLoadData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_FactionSaveData : public ::google::protobuf::Message {
 public:
  DCProto_FactionSaveData();
  virtual ~DCProto_FactionSaveData();
  
  DCProto_FactionSaveData(const DCProto_FactionSaveData& from);
  
  inline DCProto_FactionSaveData& operator=(const DCProto_FactionSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_FactionSaveData& default_instance();
  
  void Swap(DCProto_FactionSaveData* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_FactionSaveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_FactionSaveData& from);
  void MergeFrom(const DCProto_FactionSaveData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_FactionSaveData_ID ID;
  static const ID GROUPID = DCProto_FactionSaveData_ID_GROUPID;
  static const ID UNITID = DCProto_FactionSaveData_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_FactionSaveData_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_FactionSaveData_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_FactionSaveData_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_FactionSaveData_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_FactionSaveData_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_FactionSaveData_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_FactionSaveData_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .DCProto_FactionData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::DCProto_FactionData& data(int index) const;
  inline ::DCProto_FactionData* mutable_data(int index);
  inline ::DCProto_FactionData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:DCProto_FactionSaveData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_FactionSaveData* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_FactionAddRecord : public ::google::protobuf::Message {
 public:
  DCProto_FactionAddRecord();
  virtual ~DCProto_FactionAddRecord();
  
  DCProto_FactionAddRecord(const DCProto_FactionAddRecord& from);
  
  inline DCProto_FactionAddRecord& operator=(const DCProto_FactionAddRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_FactionAddRecord& default_instance();
  
  void Swap(DCProto_FactionAddRecord* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_FactionAddRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_FactionAddRecord& from);
  void MergeFrom(const DCProto_FactionAddRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_FactionAddRecord_ID ID;
  static const ID GROUPID = DCProto_FactionAddRecord_ID_GROUPID;
  static const ID UNITID = DCProto_FactionAddRecord_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_FactionAddRecord_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_FactionAddRecord_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_FactionAddRecord_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_FactionAddRecord_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_FactionAddRecord_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_FactionAddRecord_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_FactionAddRecord_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .DCProto_FactionData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::DCProto_FactionData& data() const;
  inline ::DCProto_FactionData* mutable_data();
  inline ::DCProto_FactionData* release_data();
  
  // @@protoc_insertion_point(class_scope:DCProto_FactionAddRecord)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DCProto_FactionData* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_FactionAddRecord* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_FactionDelRecord : public ::google::protobuf::Message {
 public:
  DCProto_FactionDelRecord();
  virtual ~DCProto_FactionDelRecord();
  
  DCProto_FactionDelRecord(const DCProto_FactionDelRecord& from);
  
  inline DCProto_FactionDelRecord& operator=(const DCProto_FactionDelRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_FactionDelRecord& default_instance();
  
  void Swap(DCProto_FactionDelRecord* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_FactionDelRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_FactionDelRecord& from);
  void MergeFrom(const DCProto_FactionDelRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_FactionDelRecord_ID ID;
  static const ID GROUPID = DCProto_FactionDelRecord_ID_GROUPID;
  static const ID UNITID = DCProto_FactionDelRecord_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_FactionDelRecord_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_FactionDelRecord_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_FactionDelRecord_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_FactionDelRecord_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_FactionDelRecord_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_FactionDelRecord_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_FactionDelRecord_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .DCProto_FactionData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::DCProto_FactionData& data() const;
  inline ::DCProto_FactionData* mutable_data();
  inline ::DCProto_FactionData* release_data();
  
  // @@protoc_insertion_point(class_scope:DCProto_FactionDelRecord)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DCProto_FactionData* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_FactionDelRecord* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_FactionUpdateRecord : public ::google::protobuf::Message {
 public:
  DCProto_FactionUpdateRecord();
  virtual ~DCProto_FactionUpdateRecord();
  
  DCProto_FactionUpdateRecord(const DCProto_FactionUpdateRecord& from);
  
  inline DCProto_FactionUpdateRecord& operator=(const DCProto_FactionUpdateRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_FactionUpdateRecord& default_instance();
  
  void Swap(DCProto_FactionUpdateRecord* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_FactionUpdateRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_FactionUpdateRecord& from);
  void MergeFrom(const DCProto_FactionUpdateRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_FactionUpdateRecord_ID ID;
  static const ID GROUPID = DCProto_FactionUpdateRecord_ID_GROUPID;
  static const ID UNITID = DCProto_FactionUpdateRecord_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_FactionUpdateRecord_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_FactionUpdateRecord_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_FactionUpdateRecord_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_FactionUpdateRecord_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_FactionUpdateRecord_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_FactionUpdateRecord_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_FactionUpdateRecord_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .DCProto_FactionData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::DCProto_FactionData& data() const;
  inline ::DCProto_FactionData* mutable_data();
  inline ::DCProto_FactionData* release_data();
  
  // @@protoc_insertion_point(class_scope:DCProto_FactionUpdateRecord)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DCProto_FactionData* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_FactionUpdateRecord* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_SysFactionMemInfo : public ::google::protobuf::Message {
 public:
  DCProto_SysFactionMemInfo();
  virtual ~DCProto_SysFactionMemInfo();
  
  DCProto_SysFactionMemInfo(const DCProto_SysFactionMemInfo& from);
  
  inline DCProto_SysFactionMemInfo& operator=(const DCProto_SysFactionMemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_SysFactionMemInfo& default_instance();
  
  void Swap(DCProto_SysFactionMemInfo* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_SysFactionMemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_SysFactionMemInfo& from);
  void MergeFrom(const DCProto_SysFactionMemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_SysFactionMemInfo_ID ID;
  static const ID GROUPID = DCProto_SysFactionMemInfo_ID_GROUPID;
  static const ID UNITID = DCProto_SysFactionMemInfo_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_SysFactionMemInfo_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_SysFactionMemInfo_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_SysFactionMemInfo_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_SysFactionMemInfo_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_SysFactionMemInfo_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_SysFactionMemInfo_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_SysFactionMemInfo_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int64 roleID = 1;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 1;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // optional string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // @@protoc_insertion_point(class_scope:DCProto_SysFactionMemInfo)
 private:
  inline void set_has_roleID();
  inline void clear_has_roleID();
  inline void set_has_str();
  inline void clear_has_str();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  ::std::string* str_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_SysFactionMemInfo* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_InitRank : public ::google::protobuf::Message {
 public:
  DCProto_InitRank();
  virtual ~DCProto_InitRank();
  
  DCProto_InitRank(const DCProto_InitRank& from);
  
  inline DCProto_InitRank& operator=(const DCProto_InitRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_InitRank& default_instance();
  
  void Swap(DCProto_InitRank* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_InitRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_InitRank& from);
  void MergeFrom(const DCProto_InitRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_InitRank_ID ID;
  static const ID GROUPID = DCProto_InitRank_ID_GROUPID;
  static const ID UNITID = DCProto_InitRank_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_InitRank_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_InitRank_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_InitRank_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_InitRank_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_InitRank_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_InitRank_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_InitRank_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Rank.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Rank_Type type() const;
  inline void set_type(::NetProto_Rank_Type value);
  
  // repeated .RecordInfo rank = 2;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline const ::RecordInfo& rank(int index) const;
  inline ::RecordInfo* mutable_rank(int index);
  inline ::RecordInfo* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
      mutable_rank();
  
  // optional .RecordInfo finalKiller = 3;
  inline bool has_finalKiller() const;
  inline void clear_finalKiller();
  static const int kFinalKillerFieldNumber = 3;
  inline const ::RecordInfo& finalKiller() const;
  inline ::RecordInfo* mutable_finalKiller();
  inline ::RecordInfo* release_finalKiller();
  
  // optional bool flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline bool flag() const;
  inline void set_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:DCProto_InitRank)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_finalKiller();
  inline void clear_has_finalKiller();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RecordInfo > rank_;
  int type_;
  bool flag_;
  ::RecordInfo* finalKiller_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_InitRank* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_PingPongAward : public ::google::protobuf::Message {
 public:
  DCProto_PingPongAward();
  virtual ~DCProto_PingPongAward();
  
  DCProto_PingPongAward(const DCProto_PingPongAward& from);
  
  inline DCProto_PingPongAward& operator=(const DCProto_PingPongAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_PingPongAward& default_instance();
  
  void Swap(DCProto_PingPongAward* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_PingPongAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_PingPongAward& from);
  void MergeFrom(const DCProto_PingPongAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_PingPongAward_ID ID;
  static const ID GROUPID = DCProto_PingPongAward_ID_GROUPID;
  static const ID UNITID = DCProto_PingPongAward_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_PingPongAward_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_PingPongAward_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_PingPongAward_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_PingPongAward_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_PingPongAward_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_PingPongAward_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_PingPongAward_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Rank.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Rank_Type type() const;
  inline void set_type(::NetProto_Rank_Type value);
  
  // optional int64 roleID = 2;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_PingPongAward)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_PingPongAward* default_instance_;
};
// -------------------------------------------------------------------

class FactionPower : public ::google::protobuf::Message {
 public:
  FactionPower();
  virtual ~FactionPower();
  
  FactionPower(const FactionPower& from);
  
  inline FactionPower& operator=(const FactionPower& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionPower& default_instance();
  
  void Swap(FactionPower* other);
  
  // implements Message ----------------------------------------------
  
  FactionPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionPower& from);
  void MergeFrom(const FactionPower& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string str = 1;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // repeated int64 roleID = 2;
  inline int roleID_size() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::int64 roleID(int index) const;
  inline void set_roleID(int index, ::google::protobuf::int64 value);
  inline void add_roleID(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      roleID() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_roleID();
  
  // optional int64 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::int64 power() const;
  inline void set_power(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:FactionPower)
 private:
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_power();
  inline void clear_has_power();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > roleID_;
  ::google::protobuf::int64 power_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static FactionPower* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_FactionPower : public ::google::protobuf::Message {
 public:
  DCProto_FactionPower();
  virtual ~DCProto_FactionPower();
  
  DCProto_FactionPower(const DCProto_FactionPower& from);
  
  inline DCProto_FactionPower& operator=(const DCProto_FactionPower& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_FactionPower& default_instance();
  
  void Swap(DCProto_FactionPower* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_FactionPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_FactionPower& from);
  void MergeFrom(const DCProto_FactionPower& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_FactionPower_ID ID;
  static const ID GROUPID = DCProto_FactionPower_ID_GROUPID;
  static const ID UNITID = DCProto_FactionPower_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_FactionPower_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_FactionPower_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_FactionPower_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_FactionPower_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_FactionPower_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_FactionPower_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_FactionPower_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .FactionPower info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::FactionPower& info(int index) const;
  inline ::FactionPower* mutable_info(int index);
  inline ::FactionPower* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::FactionPower >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::FactionPower >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:DCProto_FactionPower)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::FactionPower > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_FactionPower* default_instance_;
};
// -------------------------------------------------------------------

class DCProto_PingPongQiuBiTe : public ::google::protobuf::Message {
 public:
  DCProto_PingPongQiuBiTe();
  virtual ~DCProto_PingPongQiuBiTe();
  
  DCProto_PingPongQiuBiTe(const DCProto_PingPongQiuBiTe& from);
  
  inline DCProto_PingPongQiuBiTe& operator=(const DCProto_PingPongQiuBiTe& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DCProto_PingPongQiuBiTe& default_instance();
  
  void Swap(DCProto_PingPongQiuBiTe* other);
  
  // implements Message ----------------------------------------------
  
  DCProto_PingPongQiuBiTe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DCProto_PingPongQiuBiTe& from);
  void MergeFrom(const DCProto_PingPongQiuBiTe& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DCProto_PingPongQiuBiTe_ID ID;
  static const ID GROUPID = DCProto_PingPongQiuBiTe_ID_GROUPID;
  static const ID UNITID = DCProto_PingPongQiuBiTe_ID_UNITID;
  static inline bool ID_IsValid(int value) {
    return DCProto_PingPongQiuBiTe_ID_IsValid(value);
  }
  static const ID ID_MIN =
    DCProto_PingPongQiuBiTe_ID_ID_MIN;
  static const ID ID_MAX =
    DCProto_PingPongQiuBiTe_ID_ID_MAX;
  static const int ID_ARRAYSIZE =
    DCProto_PingPongQiuBiTe_ID_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ID_descriptor() {
    return DCProto_PingPongQiuBiTe_ID_descriptor();
  }
  static inline const ::std::string& ID_Name(ID value) {
    return DCProto_PingPongQiuBiTe_ID_Name(value);
  }
  static inline bool ID_Parse(const ::std::string& name,
      ID* value) {
    return DCProto_PingPongQiuBiTe_ID_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .NetProto_Rank.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::NetProto_Rank_Type type() const;
  inline void set_type(::NetProto_Rank_Type value);
  
  // optional int64 roleID = 2;
  inline bool has_roleID() const;
  inline void clear_roleID();
  static const int kRoleIDFieldNumber = 2;
  inline ::google::protobuf::int64 roleID() const;
  inline void set_roleID(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DCProto_PingPongQiuBiTe)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roleID();
  inline void clear_has_roleID();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 roleID_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DCProto_2eproto();
  friend void protobuf_AssignDesc_DCProto_2eproto();
  friend void protobuf_ShutdownFile_DCProto_2eproto();
  
  void InitAsDefaultInstance();
  static DCProto_PingPongQiuBiTe* default_instance_;
};
// ===================================================================


// ===================================================================

// DCProto_SaveRoleData

// repeated .PB_PlayerAtt data = 1;
inline int DCProto_SaveRoleData::data_size() const {
  return data_.size();
}
inline void DCProto_SaveRoleData::clear_data() {
  data_.Clear();
}
inline const ::PB_PlayerAtt& DCProto_SaveRoleData::data(int index) const {
  return data_.Get(index);
}
inline ::PB_PlayerAtt* DCProto_SaveRoleData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::PB_PlayerAtt* DCProto_SaveRoleData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
DCProto_SaveRoleData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
DCProto_SaveRoleData::mutable_data() {
  return &data_;
}

// repeated .PlayerInfo info = 2;
inline int DCProto_SaveRoleData::info_size() const {
  return info_.size();
}
inline void DCProto_SaveRoleData::clear_info() {
  info_.Clear();
}
inline const ::PlayerInfo& DCProto_SaveRoleData::info(int index) const {
  return info_.Get(index);
}
inline ::PlayerInfo* DCProto_SaveRoleData::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PlayerInfo* DCProto_SaveRoleData::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo >&
DCProto_SaveRoleData::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo >*
DCProto_SaveRoleData::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// DCProto_DeleteRoleData

// optional string account = 1;
inline bool DCProto_DeleteRoleData::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_DeleteRoleData::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_DeleteRoleData::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_DeleteRoleData::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& DCProto_DeleteRoleData::account() const {
  return *account_;
}
inline void DCProto_DeleteRoleData::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void DCProto_DeleteRoleData::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void DCProto_DeleteRoleData::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_DeleteRoleData::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* DCProto_DeleteRoleData::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 id = 2;
inline bool DCProto_DeleteRoleData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_DeleteRoleData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_DeleteRoleData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_DeleteRoleData::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 DCProto_DeleteRoleData::id() const {
  return id_;
}
inline void DCProto_DeleteRoleData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// repeated int64 equipments = 3;
inline int DCProto_DeleteRoleData::equipments_size() const {
  return equipments_.size();
}
inline void DCProto_DeleteRoleData::clear_equipments() {
  equipments_.Clear();
}
inline ::google::protobuf::int64 DCProto_DeleteRoleData::equipments(int index) const {
  return equipments_.Get(index);
}
inline void DCProto_DeleteRoleData::set_equipments(int index, ::google::protobuf::int64 value) {
  equipments_.Set(index, value);
}
inline void DCProto_DeleteRoleData::add_equipments(::google::protobuf::int64 value) {
  equipments_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DCProto_DeleteRoleData::equipments() const {
  return equipments_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DCProto_DeleteRoleData::mutable_equipments() {
  return &equipments_;
}

// optional string platform = 4;
inline bool DCProto_DeleteRoleData::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_DeleteRoleData::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_DeleteRoleData::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_DeleteRoleData::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& DCProto_DeleteRoleData::platform() const {
  return *platform_;
}
inline void DCProto_DeleteRoleData::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void DCProto_DeleteRoleData::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void DCProto_DeleteRoleData::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_DeleteRoleData::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* DCProto_DeleteRoleData::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DCProto_LoadRoleData

// optional string account = 1;
inline bool DCProto_LoadRoleData::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_LoadRoleData::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_LoadRoleData::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_LoadRoleData::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& DCProto_LoadRoleData::account() const {
  return *account_;
}
inline void DCProto_LoadRoleData::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void DCProto_LoadRoleData::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void DCProto_LoadRoleData::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_LoadRoleData::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* DCProto_LoadRoleData::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .PB_PlayerAtt data = 2;
inline int DCProto_LoadRoleData::data_size() const {
  return data_.size();
}
inline void DCProto_LoadRoleData::clear_data() {
  data_.Clear();
}
inline const ::PB_PlayerAtt& DCProto_LoadRoleData::data(int index) const {
  return data_.Get(index);
}
inline ::PB_PlayerAtt* DCProto_LoadRoleData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::PB_PlayerAtt* DCProto_LoadRoleData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
DCProto_LoadRoleData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
DCProto_LoadRoleData::mutable_data() {
  return &data_;
}

// optional int64 prevRole = 3;
inline bool DCProto_LoadRoleData::has_prevRole() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_LoadRoleData::set_has_prevRole() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_LoadRoleData::clear_has_prevRole() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_LoadRoleData::clear_prevRole() {
  prevRole_ = GOOGLE_LONGLONG(0);
  clear_has_prevRole();
}
inline ::google::protobuf::int64 DCProto_LoadRoleData::prevRole() const {
  return prevRole_;
}
inline void DCProto_LoadRoleData::set_prevRole(::google::protobuf::int64 value) {
  set_has_prevRole();
  prevRole_ = value;
}

// optional string platform = 4;
inline bool DCProto_LoadRoleData::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_LoadRoleData::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_LoadRoleData::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_LoadRoleData::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& DCProto_LoadRoleData::platform() const {
  return *platform_;
}
inline void DCProto_LoadRoleData::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void DCProto_LoadRoleData::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void DCProto_LoadRoleData::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_LoadRoleData::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* DCProto_LoadRoleData::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DCProto_CollectRole

// optional int64 cur = 1;
inline bool DCProto_CollectRole::has_cur() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_CollectRole::set_has_cur() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_CollectRole::clear_has_cur() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_CollectRole::clear_cur() {
  cur_ = GOOGLE_LONGLONG(0);
  clear_has_cur();
}
inline ::google::protobuf::int64 DCProto_CollectRole::cur() const {
  return cur_;
}
inline void DCProto_CollectRole::set_cur(::google::protobuf::int64 value) {
  set_has_cur();
  cur_ = value;
}

// repeated .RecordInfo singleRecord = 2;
inline int DCProto_CollectRole::singleRecord_size() const {
  return singleRecord_.size();
}
inline void DCProto_CollectRole::clear_singleRecord() {
  singleRecord_.Clear();
}
inline const ::RecordInfo& DCProto_CollectRole::singleRecord(int index) const {
  return singleRecord_.Get(index);
}
inline ::RecordInfo* DCProto_CollectRole::mutable_singleRecord(int index) {
  return singleRecord_.Mutable(index);
}
inline ::RecordInfo* DCProto_CollectRole::add_singleRecord() {
  return singleRecord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
DCProto_CollectRole::singleRecord() const {
  return singleRecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
DCProto_CollectRole::mutable_singleRecord() {
  return &singleRecord_;
}

// repeated .RecordInfo Restriction = 3;
inline int DCProto_CollectRole::Restriction_size() const {
  return Restriction_.size();
}
inline void DCProto_CollectRole::clear_Restriction() {
  Restriction_.Clear();
}
inline const ::RecordInfo& DCProto_CollectRole::Restriction(int index) const {
  return Restriction_.Get(index);
}
inline ::RecordInfo* DCProto_CollectRole::mutable_Restriction(int index) {
  return Restriction_.Mutable(index);
}
inline ::RecordInfo* DCProto_CollectRole::add_Restriction() {
  return Restriction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
DCProto_CollectRole::Restriction() const {
  return Restriction_;
}
inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
DCProto_CollectRole::mutable_Restriction() {
  return &Restriction_;
}

// optional .RecordInfo GodInfoTime = 4;
inline bool DCProto_CollectRole::has_GodInfoTime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_CollectRole::set_has_GodInfoTime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_CollectRole::clear_has_GodInfoTime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_CollectRole::clear_GodInfoTime() {
  if (GodInfoTime_ != NULL) GodInfoTime_->::RecordInfo::Clear();
  clear_has_GodInfoTime();
}
inline const ::RecordInfo& DCProto_CollectRole::GodInfoTime() const {
  return GodInfoTime_ != NULL ? *GodInfoTime_ : *default_instance_->GodInfoTime_;
}
inline ::RecordInfo* DCProto_CollectRole::mutable_GodInfoTime() {
  set_has_GodInfoTime();
  if (GodInfoTime_ == NULL) GodInfoTime_ = new ::RecordInfo;
  return GodInfoTime_;
}
inline ::RecordInfo* DCProto_CollectRole::release_GodInfoTime() {
  clear_has_GodInfoTime();
  ::RecordInfo* temp = GodInfoTime_;
  GodInfoTime_ = NULL;
  return temp;
}

// optional .RecordInfo winFactionInfo = 5;
inline bool DCProto_CollectRole::has_winFactionInfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_CollectRole::set_has_winFactionInfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_CollectRole::clear_has_winFactionInfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_CollectRole::clear_winFactionInfo() {
  if (winFactionInfo_ != NULL) winFactionInfo_->::RecordInfo::Clear();
  clear_has_winFactionInfo();
}
inline const ::RecordInfo& DCProto_CollectRole::winFactionInfo() const {
  return winFactionInfo_ != NULL ? *winFactionInfo_ : *default_instance_->winFactionInfo_;
}
inline ::RecordInfo* DCProto_CollectRole::mutable_winFactionInfo() {
  set_has_winFactionInfo();
  if (winFactionInfo_ == NULL) winFactionInfo_ = new ::RecordInfo;
  return winFactionInfo_;
}
inline ::RecordInfo* DCProto_CollectRole::release_winFactionInfo() {
  clear_has_winFactionInfo();
  ::RecordInfo* temp = winFactionInfo_;
  winFactionInfo_ = NULL;
  return temp;
}

// repeated .RecordInfo factionInfo = 6;
inline int DCProto_CollectRole::factionInfo_size() const {
  return factionInfo_.size();
}
inline void DCProto_CollectRole::clear_factionInfo() {
  factionInfo_.Clear();
}
inline const ::RecordInfo& DCProto_CollectRole::factionInfo(int index) const {
  return factionInfo_.Get(index);
}
inline ::RecordInfo* DCProto_CollectRole::mutable_factionInfo(int index) {
  return factionInfo_.Mutable(index);
}
inline ::RecordInfo* DCProto_CollectRole::add_factionInfo() {
  return factionInfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
DCProto_CollectRole::factionInfo() const {
  return factionInfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
DCProto_CollectRole::mutable_factionInfo() {
  return &factionInfo_;
}

// -------------------------------------------------------------------

// DCProto_AddAccount

// optional .PlayerInfo info = 1;
inline bool DCProto_AddAccount::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_AddAccount::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_AddAccount::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_AddAccount::clear_info() {
  if (info_ != NULL) info_->::PlayerInfo::Clear();
  clear_has_info();
}
inline const ::PlayerInfo& DCProto_AddAccount::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerInfo* DCProto_AddAccount::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerInfo;
  return info_;
}
inline ::PlayerInfo* DCProto_AddAccount::release_info() {
  clear_has_info();
  ::PlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// optional bool res = 2;
inline bool DCProto_AddAccount::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_AddAccount::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_AddAccount::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_AddAccount::clear_res() {
  res_ = false;
  clear_has_res();
}
inline bool DCProto_AddAccount::res() const {
  return res_;
}
inline void DCProto_AddAccount::set_res(bool value) {
  set_has_res();
  res_ = value;
}

// optional int32 id = 3;
inline bool DCProto_AddAccount::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_AddAccount::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_AddAccount::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_AddAccount::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_AddAccount::id() const {
  return id_;
}
inline void DCProto_AddAccount::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string ip = 4;
inline bool DCProto_AddAccount::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_AddAccount::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_AddAccount::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_AddAccount::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& DCProto_AddAccount::ip() const {
  return *ip_;
}
inline void DCProto_AddAccount::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DCProto_AddAccount::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DCProto_AddAccount::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_AddAccount::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* DCProto_AddAccount::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DCProto_AddRole

// optional .PlayerInfo info = 1;
inline bool DCProto_AddRole::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_AddRole::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_AddRole::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_AddRole::clear_info() {
  if (info_ != NULL) info_->::PlayerInfo::Clear();
  clear_has_info();
}
inline const ::PlayerInfo& DCProto_AddRole::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerInfo* DCProto_AddRole::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerInfo;
  return info_;
}
inline ::PlayerInfo* DCProto_AddRole::release_info() {
  clear_has_info();
  ::PlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// optional .PB_PlayerAtt data = 2;
inline bool DCProto_AddRole::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_AddRole::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_AddRole::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_AddRole::clear_data() {
  if (data_ != NULL) data_->::PB_PlayerAtt::Clear();
  clear_has_data();
}
inline const ::PB_PlayerAtt& DCProto_AddRole::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::PB_PlayerAtt* DCProto_AddRole::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::PB_PlayerAtt;
  return data_;
}
inline ::PB_PlayerAtt* DCProto_AddRole::release_data() {
  clear_has_data();
  ::PB_PlayerAtt* temp = data_;
  data_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_SaveSingleRecord

// optional int32 mapID = 1;
inline bool DCProto_SaveSingleRecord::has_mapID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_SaveSingleRecord::set_has_mapID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_SaveSingleRecord::clear_has_mapID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_SaveSingleRecord::clear_mapID() {
  mapID_ = 0;
  clear_has_mapID();
}
inline ::google::protobuf::int32 DCProto_SaveSingleRecord::mapID() const {
  return mapID_;
}
inline void DCProto_SaveSingleRecord::set_mapID(::google::protobuf::int32 value) {
  set_has_mapID();
  mapID_ = value;
}

// optional .RecordInfo record = 2;
inline bool DCProto_SaveSingleRecord::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_SaveSingleRecord::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_SaveSingleRecord::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_SaveSingleRecord::clear_record() {
  if (record_ != NULL) record_->::RecordInfo::Clear();
  clear_has_record();
}
inline const ::RecordInfo& DCProto_SaveSingleRecord::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::RecordInfo* DCProto_SaveSingleRecord::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::RecordInfo;
  return record_;
}
inline ::RecordInfo* DCProto_SaveSingleRecord::release_record() {
  clear_has_record();
  ::RecordInfo* temp = record_;
  record_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_HasName

// optional .NetProto_CreateRole cr = 1;
inline bool DCProto_HasName::has_cr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_HasName::set_has_cr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_HasName::clear_has_cr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_HasName::clear_cr() {
  if (cr_ != NULL) cr_->::NetProto_CreateRole::Clear();
  clear_has_cr();
}
inline const ::NetProto_CreateRole& DCProto_HasName::cr() const {
  return cr_ != NULL ? *cr_ : *default_instance_->cr_;
}
inline ::NetProto_CreateRole* DCProto_HasName::mutable_cr() {
  set_has_cr();
  if (cr_ == NULL) cr_ = new ::NetProto_CreateRole;
  return cr_;
}
inline ::NetProto_CreateRole* DCProto_HasName::release_cr() {
  clear_has_cr();
  ::NetProto_CreateRole* temp = cr_;
  cr_ = NULL;
  return temp;
}

// optional int32 id = 2;
inline bool DCProto_HasName::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_HasName::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_HasName::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_HasName::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_HasName::id() const {
  return id_;
}
inline void DCProto_HasName::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bool has = 3;
inline bool DCProto_HasName::has_has() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_HasName::set_has_has() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_HasName::clear_has_has() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_HasName::clear_has() {
  has_ = false;
  clear_has_has();
}
inline bool DCProto_HasName::has() const {
  return has_;
}
inline void DCProto_HasName::set_has(bool value) {
  set_has_has();
  has_ = value;
}

// -------------------------------------------------------------------

// DCProto_Login

// optional .NetProto_Login login = 1;
inline bool DCProto_Login::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_Login::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_Login::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_Login::clear_login() {
  if (login_ != NULL) login_->::NetProto_Login::Clear();
  clear_has_login();
}
inline const ::NetProto_Login& DCProto_Login::login() const {
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::NetProto_Login* DCProto_Login::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::NetProto_Login;
  return login_;
}
inline ::NetProto_Login* DCProto_Login::release_login() {
  clear_has_login();
  ::NetProto_Login* temp = login_;
  login_ = NULL;
  return temp;
}

// optional int32 id = 2;
inline bool DCProto_Login::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_Login::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_Login::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_Login::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_Login::id() const {
  return id_;
}
inline void DCProto_Login::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 res = 3;
inline bool DCProto_Login::has_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_Login::set_has_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_Login::clear_has_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_Login::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 DCProto_Login::res() const {
  return res_;
}
inline void DCProto_Login::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// optional string ip = 4;
inline bool DCProto_Login::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_Login::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_Login::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_Login::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& DCProto_Login::ip() const {
  return *ip_;
}
inline void DCProto_Login::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DCProto_Login::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DCProto_Login::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_Login::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* DCProto_Login::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool useActivateKey = 5;
inline bool DCProto_Login::has_useActivateKey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_Login::set_has_useActivateKey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_Login::clear_has_useActivateKey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_Login::clear_useActivateKey() {
  useActivateKey_ = false;
  clear_has_useActivateKey();
}
inline bool DCProto_Login::useActivateKey() const {
  return useActivateKey_;
}
inline void DCProto_Login::set_useActivateKey(bool value) {
  set_has_useActivateKey();
  useActivateKey_ = value;
}

// optional bool newUser = 6;
inline bool DCProto_Login::has_newUser() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DCProto_Login::set_has_newUser() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DCProto_Login::clear_has_newUser() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DCProto_Login::clear_newUser() {
  newUser_ = false;
  clear_has_newUser();
}
inline bool DCProto_Login::newUser() const {
  return newUser_;
}
inline void DCProto_Login::set_newUser(bool value) {
  set_has_newUser();
  newUser_ = value;
}

// optional bool beyond = 7;
inline bool DCProto_Login::has_beyond() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DCProto_Login::set_has_beyond() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DCProto_Login::clear_has_beyond() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DCProto_Login::clear_beyond() {
  beyond_ = false;
  clear_has_beyond();
}
inline bool DCProto_Login::beyond() const {
  return beyond_;
}
inline void DCProto_Login::set_beyond(bool value) {
  set_has_beyond();
  beyond_ = value;
}

// -------------------------------------------------------------------

// DCProto_QueryRole

// optional int64 roleID = 1;
inline bool DCProto_QueryRole::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_QueryRole::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_QueryRole::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_QueryRole::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_QueryRole::roleID() const {
  return roleID_;
}
inline void DCProto_QueryRole::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional .PB_PlayerAtt att = 2;
inline bool DCProto_QueryRole::has_att() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_QueryRole::set_has_att() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_QueryRole::clear_has_att() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_QueryRole::clear_att() {
  if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
  clear_has_att();
}
inline const ::PB_PlayerAtt& DCProto_QueryRole::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_PlayerAtt* DCProto_QueryRole::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_PlayerAtt;
  return att_;
}
inline ::PB_PlayerAtt* DCProto_QueryRole::release_att() {
  clear_has_att();
  ::PB_PlayerAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// optional int32 id = 3;
inline bool DCProto_QueryRole::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_QueryRole::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_QueryRole::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_QueryRole::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_QueryRole::id() const {
  return id_;
}
inline void DCProto_QueryRole::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 4;
inline bool DCProto_QueryRole::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_QueryRole::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_QueryRole::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_QueryRole::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DCProto_QueryRole::name() const {
  return *name_;
}
inline void DCProto_QueryRole::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DCProto_QueryRole::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DCProto_QueryRole::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_QueryRole::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DCProto_QueryRole::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DCProto_SendMail

// optional .NetProto_SendMail sm = 1;
inline bool DCProto_SendMail::has_sm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_SendMail::set_has_sm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_SendMail::clear_has_sm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_SendMail::clear_sm() {
  if (sm_ != NULL) sm_->::NetProto_SendMail::Clear();
  clear_has_sm();
}
inline const ::NetProto_SendMail& DCProto_SendMail::sm() const {
  return sm_ != NULL ? *sm_ : *default_instance_->sm_;
}
inline ::NetProto_SendMail* DCProto_SendMail::mutable_sm() {
  set_has_sm();
  if (sm_ == NULL) sm_ = new ::NetProto_SendMail;
  return sm_;
}
inline ::NetProto_SendMail* DCProto_SendMail::release_sm() {
  clear_has_sm();
  ::NetProto_SendMail* temp = sm_;
  sm_ = NULL;
  return temp;
}

// optional int32 id = 2;
inline bool DCProto_SendMail::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_SendMail::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_SendMail::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_SendMail::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_SendMail::id() const {
  return id_;
}
inline void DCProto_SendMail::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// DCProto_GetKeyGift

// optional string key = 1;
inline bool DCProto_GetKeyGift::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GetKeyGift::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GetKeyGift::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GetKeyGift::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& DCProto_GetKeyGift::key() const {
  return *key_;
}
inline void DCProto_GetKeyGift::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void DCProto_GetKeyGift::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void DCProto_GetKeyGift::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_GetKeyGift::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* DCProto_GetKeyGift::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 id = 2;
inline bool DCProto_GetKeyGift::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GetKeyGift::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GetKeyGift::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GetKeyGift::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_GetKeyGift::id() const {
  return id_;
}
inline void DCProto_GetKeyGift::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 res = 3;
inline bool DCProto_GetKeyGift::has_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_GetKeyGift::set_has_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_GetKeyGift::clear_has_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_GetKeyGift::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 DCProto_GetKeyGift::res() const {
  return res_;
}
inline void DCProto_GetKeyGift::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// optional bool done = 4;
inline bool DCProto_GetKeyGift::has_done() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_GetKeyGift::set_has_done() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_GetKeyGift::clear_has_done() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_GetKeyGift::clear_done() {
  done_ = false;
  clear_has_done();
}
inline bool DCProto_GetKeyGift::done() const {
  return done_;
}
inline void DCProto_GetKeyGift::set_done(bool value) {
  set_has_done();
  done_ = value;
}

// repeated int32 event = 5;
inline int DCProto_GetKeyGift::event_size() const {
  return event_.size();
}
inline void DCProto_GetKeyGift::clear_event() {
  event_.Clear();
}
inline ::google::protobuf::int32 DCProto_GetKeyGift::event(int index) const {
  return event_.Get(index);
}
inline void DCProto_GetKeyGift::set_event(int index, ::google::protobuf::int32 value) {
  event_.Set(index, value);
}
inline void DCProto_GetKeyGift::add_event(::google::protobuf::int32 value) {
  event_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DCProto_GetKeyGift::event() const {
  return event_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DCProto_GetKeyGift::mutable_event() {
  return &event_;
}

// repeated int32 index = 6;
inline int DCProto_GetKeyGift::index_size() const {
  return index_.size();
}
inline void DCProto_GetKeyGift::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::int32 DCProto_GetKeyGift::index(int index) const {
  return index_.Get(index);
}
inline void DCProto_GetKeyGift::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
}
inline void DCProto_GetKeyGift::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DCProto_GetKeyGift::index() const {
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DCProto_GetKeyGift::mutable_index() {
  return &index_;
}

// optional int64 roleID = 7;
inline bool DCProto_GetKeyGift::has_roleID() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DCProto_GetKeyGift::set_has_roleID() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DCProto_GetKeyGift::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DCProto_GetKeyGift::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_GetKeyGift::roleID() const {
  return roleID_;
}
inline void DCProto_GetKeyGift::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 group = 8;
inline bool DCProto_GetKeyGift::has_group() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DCProto_GetKeyGift::set_has_group() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DCProto_GetKeyGift::clear_has_group() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DCProto_GetKeyGift::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 DCProto_GetKeyGift::group() const {
  return group_;
}
inline void DCProto_GetKeyGift::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// -------------------------------------------------------------------

// DCProto_Recharge

// optional .NetProto_Recharge recharge = 1;
inline bool DCProto_Recharge::has_recharge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_Recharge::set_has_recharge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_Recharge::clear_has_recharge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_Recharge::clear_recharge() {
  if (recharge_ != NULL) recharge_->::NetProto_Recharge::Clear();
  clear_has_recharge();
}
inline const ::NetProto_Recharge& DCProto_Recharge::recharge() const {
  return recharge_ != NULL ? *recharge_ : *default_instance_->recharge_;
}
inline ::NetProto_Recharge* DCProto_Recharge::mutable_recharge() {
  set_has_recharge();
  if (recharge_ == NULL) recharge_ = new ::NetProto_Recharge;
  return recharge_;
}
inline ::NetProto_Recharge* DCProto_Recharge::release_recharge() {
  clear_has_recharge();
  ::NetProto_Recharge* temp = recharge_;
  recharge_ = NULL;
  return temp;
}

// optional int32 id = 2;
inline bool DCProto_Recharge::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_Recharge::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_Recharge::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_Recharge::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_Recharge::id() const {
  return id_;
}
inline void DCProto_Recharge::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PlayerInfo info = 3;
inline bool DCProto_Recharge::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_Recharge::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_Recharge::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_Recharge::clear_info() {
  if (info_ != NULL) info_->::PlayerInfo::Clear();
  clear_has_info();
}
inline const ::PlayerInfo& DCProto_Recharge::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerInfo* DCProto_Recharge::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerInfo;
  return info_;
}
inline ::PlayerInfo* DCProto_Recharge::release_info() {
  clear_has_info();
  ::PlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// optional int64 roleID = 4;
inline bool DCProto_Recharge::has_roleID() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_Recharge::set_has_roleID() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_Recharge::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_Recharge::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_Recharge::roleID() const {
  return roleID_;
}
inline void DCProto_Recharge::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 rmb = 5;
inline bool DCProto_Recharge::has_rmb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_Recharge::set_has_rmb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_Recharge::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_Recharge::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 DCProto_Recharge::rmb() const {
  return rmb_;
}
inline void DCProto_Recharge::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional bool over = 6;
inline bool DCProto_Recharge::has_over() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DCProto_Recharge::set_has_over() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DCProto_Recharge::clear_has_over() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DCProto_Recharge::clear_over() {
  over_ = false;
  clear_has_over();
}
inline bool DCProto_Recharge::over() const {
  return over_;
}
inline void DCProto_Recharge::set_over(bool value) {
  set_has_over();
  over_ = value;
}

// optional int32 level = 7;
inline bool DCProto_Recharge::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DCProto_Recharge::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DCProto_Recharge::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DCProto_Recharge::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 DCProto_Recharge::level() const {
  return level_;
}
inline void DCProto_Recharge::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// DCProto_CostRecord

// optional int64 role = 1;
inline bool DCProto_CostRecord::has_role() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_CostRecord::set_has_role() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_CostRecord::clear_has_role() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_CostRecord::clear_role() {
  role_ = GOOGLE_LONGLONG(0);
  clear_has_role();
}
inline ::google::protobuf::int64 DCProto_CostRecord::role() const {
  return role_;
}
inline void DCProto_CostRecord::set_role(::google::protobuf::int64 value) {
  set_has_role();
  role_ = value;
}

// optional string reason = 2;
inline bool DCProto_CostRecord::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_CostRecord::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_CostRecord::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_CostRecord::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& DCProto_CostRecord::reason() const {
  return *reason_;
}
inline void DCProto_CostRecord::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void DCProto_CostRecord::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void DCProto_CostRecord::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_CostRecord::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* DCProto_CostRecord::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rmbValue = 3;
inline bool DCProto_CostRecord::has_rmbValue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_CostRecord::set_has_rmbValue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_CostRecord::clear_has_rmbValue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_CostRecord::clear_rmbValue() {
  rmbValue_ = 0;
  clear_has_rmbValue();
}
inline ::google::protobuf::int32 DCProto_CostRecord::rmbValue() const {
  return rmbValue_;
}
inline void DCProto_CostRecord::set_rmbValue(::google::protobuf::int32 value) {
  set_has_rmbValue();
  rmbValue_ = value;
}

// optional int64 rmb = 4;
inline bool DCProto_CostRecord::has_rmb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_CostRecord::set_has_rmb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_CostRecord::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_CostRecord::clear_rmb() {
  rmb_ = GOOGLE_LONGLONG(0);
  clear_has_rmb();
}
inline ::google::protobuf::int64 DCProto_CostRecord::rmb() const {
  return rmb_;
}
inline void DCProto_CostRecord::set_rmb(::google::protobuf::int64 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional int64 subRMB = 5;
inline bool DCProto_CostRecord::has_subRMB() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_CostRecord::set_has_subRMB() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_CostRecord::clear_has_subRMB() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_CostRecord::clear_subRMB() {
  subRMB_ = GOOGLE_LONGLONG(0);
  clear_has_subRMB();
}
inline ::google::protobuf::int64 DCProto_CostRecord::subRMB() const {
  return subRMB_;
}
inline void DCProto_CostRecord::set_subRMB(::google::protobuf::int64 value) {
  set_has_subRMB();
  subRMB_ = value;
}

// optional int32 arg1 = 6;
inline bool DCProto_CostRecord::has_arg1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DCProto_CostRecord::set_has_arg1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DCProto_CostRecord::clear_has_arg1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DCProto_CostRecord::clear_arg1() {
  arg1_ = 0;
  clear_has_arg1();
}
inline ::google::protobuf::int32 DCProto_CostRecord::arg1() const {
  return arg1_;
}
inline void DCProto_CostRecord::set_arg1(::google::protobuf::int32 value) {
  set_has_arg1();
  arg1_ = value;
}

// optional int32 arg2 = 7;
inline bool DCProto_CostRecord::has_arg2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DCProto_CostRecord::set_has_arg2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DCProto_CostRecord::clear_has_arg2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DCProto_CostRecord::clear_arg2() {
  arg2_ = 0;
  clear_has_arg2();
}
inline ::google::protobuf::int32 DCProto_CostRecord::arg2() const {
  return arg2_;
}
inline void DCProto_CostRecord::set_arg2(::google::protobuf::int32 value) {
  set_has_arg2();
  arg2_ = value;
}

// optional .PlayerInfo info = 8;
inline bool DCProto_CostRecord::has_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DCProto_CostRecord::set_has_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DCProto_CostRecord::clear_has_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DCProto_CostRecord::clear_info() {
  if (info_ != NULL) info_->::PlayerInfo::Clear();
  clear_has_info();
}
inline const ::PlayerInfo& DCProto_CostRecord::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerInfo* DCProto_CostRecord::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerInfo;
  return info_;
}
inline ::PlayerInfo* DCProto_CostRecord::release_info() {
  clear_has_info();
  ::PlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// optional int32 level = 9;
inline bool DCProto_CostRecord::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DCProto_CostRecord::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DCProto_CostRecord::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DCProto_CostRecord::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 DCProto_CostRecord::level() const {
  return level_;
}
inline void DCProto_CostRecord::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 subrmbValue = 10;
inline bool DCProto_CostRecord::has_subrmbValue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DCProto_CostRecord::set_has_subrmbValue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DCProto_CostRecord::clear_has_subrmbValue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DCProto_CostRecord::clear_subrmbValue() {
  subrmbValue_ = 0;
  clear_has_subrmbValue();
}
inline ::google::protobuf::int32 DCProto_CostRecord::subrmbValue() const {
  return subrmbValue_;
}
inline void DCProto_CostRecord::set_subrmbValue(::google::protobuf::int32 value) {
  set_has_subrmbValue();
  subrmbValue_ = value;
}

// -------------------------------------------------------------------

// DCProto_PlayerStatus

// optional int32 id = 1;
inline bool DCProto_PlayerStatus::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_PlayerStatus::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_PlayerStatus::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_PlayerStatus::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_PlayerStatus::id() const {
  return id_;
}
inline void DCProto_PlayerStatus::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_PlayerStatus ps = 2;
inline bool DCProto_PlayerStatus::has_ps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_PlayerStatus::set_has_ps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_PlayerStatus::clear_has_ps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_PlayerStatus::clear_ps() {
  if (ps_ != NULL) ps_->::NetProto_PlayerStatus::Clear();
  clear_has_ps();
}
inline const ::NetProto_PlayerStatus& DCProto_PlayerStatus::ps() const {
  return ps_ != NULL ? *ps_ : *default_instance_->ps_;
}
inline ::NetProto_PlayerStatus* DCProto_PlayerStatus::mutable_ps() {
  set_has_ps();
  if (ps_ == NULL) ps_ = new ::NetProto_PlayerStatus;
  return ps_;
}
inline ::NetProto_PlayerStatus* DCProto_PlayerStatus::release_ps() {
  clear_has_ps();
  ::NetProto_PlayerStatus* temp = ps_;
  ps_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_SaveChat

// optional int32 type = 1;
inline bool DCProto_SaveChat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_SaveChat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_SaveChat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_SaveChat::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 DCProto_SaveChat::type() const {
  return type_;
}
inline void DCProto_SaveChat::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string sender = 2;
inline bool DCProto_SaveChat::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_SaveChat::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_SaveChat::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_SaveChat::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& DCProto_SaveChat::sender() const {
  return *sender_;
}
inline void DCProto_SaveChat::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void DCProto_SaveChat::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void DCProto_SaveChat::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_SaveChat::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* DCProto_SaveChat::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string receiver = 3;
inline bool DCProto_SaveChat::has_receiver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_SaveChat::set_has_receiver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_SaveChat::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_SaveChat::clear_receiver() {
  if (receiver_ != &::google::protobuf::internal::kEmptyString) {
    receiver_->clear();
  }
  clear_has_receiver();
}
inline const ::std::string& DCProto_SaveChat::receiver() const {
  return *receiver_;
}
inline void DCProto_SaveChat::set_receiver(const ::std::string& value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
}
inline void DCProto_SaveChat::set_receiver(const char* value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
}
inline void DCProto_SaveChat::set_receiver(const char* value, size_t size) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_SaveChat::mutable_receiver() {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    receiver_ = new ::std::string;
  }
  return receiver_;
}
inline ::std::string* DCProto_SaveChat::release_receiver() {
  clear_has_receiver();
  if (receiver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiver_;
    receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 4;
inline bool DCProto_SaveChat::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_SaveChat::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_SaveChat::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_SaveChat::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DCProto_SaveChat::content() const {
  return *content_;
}
inline void DCProto_SaveChat::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DCProto_SaveChat::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DCProto_SaveChat::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_SaveChat::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* DCProto_SaveChat::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 senderID = 5;
inline bool DCProto_SaveChat::has_senderID() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_SaveChat::set_has_senderID() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_SaveChat::clear_has_senderID() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_SaveChat::clear_senderID() {
  senderID_ = GOOGLE_LONGLONG(0);
  clear_has_senderID();
}
inline ::google::protobuf::int64 DCProto_SaveChat::senderID() const {
  return senderID_;
}
inline void DCProto_SaveChat::set_senderID(::google::protobuf::int64 value) {
  set_has_senderID();
  senderID_ = value;
}

// optional int64 receiverID = 6;
inline bool DCProto_SaveChat::has_receiverID() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DCProto_SaveChat::set_has_receiverID() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DCProto_SaveChat::clear_has_receiverID() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DCProto_SaveChat::clear_receiverID() {
  receiverID_ = GOOGLE_LONGLONG(0);
  clear_has_receiverID();
}
inline ::google::protobuf::int64 DCProto_SaveChat::receiverID() const {
  return receiverID_;
}
inline void DCProto_SaveChat::set_receiverID(::google::protobuf::int64 value) {
  set_has_receiverID();
  receiverID_ = value;
}

// -------------------------------------------------------------------

// DCProto_GodTarget

// optional int32 id = 1;
inline bool DCProto_GodTarget::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GodTarget::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GodTarget::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GodTarget::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_GodTarget::id() const {
  return id_;
}
inline void DCProto_GodTarget::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 roleID = 2;
inline bool DCProto_GodTarget::has_roleID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GodTarget::set_has_roleID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GodTarget::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GodTarget::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_GodTarget::roleID() const {
  return roleID_;
}
inline void DCProto_GodTarget::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional .PB_PlayerAtt att = 3;
inline bool DCProto_GodTarget::has_att() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_GodTarget::set_has_att() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_GodTarget::clear_has_att() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_GodTarget::clear_att() {
  if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
  clear_has_att();
}
inline const ::PB_PlayerAtt& DCProto_GodTarget::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_PlayerAtt* DCProto_GodTarget::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_PlayerAtt;
  return att_;
}
inline ::PB_PlayerAtt* DCProto_GodTarget::release_att() {
  clear_has_att();
  ::PB_PlayerAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// optional bool res = 4;
inline bool DCProto_GodTarget::has_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_GodTarget::set_has_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_GodTarget::clear_has_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_GodTarget::clear_res() {
  res_ = false;
  clear_has_res();
}
inline bool DCProto_GodTarget::res() const {
  return res_;
}
inline void DCProto_GodTarget::set_res(bool value) {
  set_has_res();
  res_ = value;
}

// optional int32 event = 5;
inline bool DCProto_GodTarget::has_event() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_GodTarget::set_has_event() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_GodTarget::clear_has_event() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_GodTarget::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::google::protobuf::int32 DCProto_GodTarget::event() const {
  return event_;
}
inline void DCProto_GodTarget::set_event(::google::protobuf::int32 value) {
  set_has_event();
  event_ = value;
}

// -------------------------------------------------------------------

// DCProto_LoadPlayerAtt

// optional int64 roleID = 1;
inline bool DCProto_LoadPlayerAtt::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_LoadPlayerAtt::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_LoadPlayerAtt::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_LoadPlayerAtt::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_LoadPlayerAtt::roleID() const {
  return roleID_;
}
inline void DCProto_LoadPlayerAtt::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional bool flag = 2;
inline bool DCProto_LoadPlayerAtt::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_LoadPlayerAtt::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_LoadPlayerAtt::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_LoadPlayerAtt::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool DCProto_LoadPlayerAtt::flag() const {
  return flag_;
}
inline void DCProto_LoadPlayerAtt::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// optional int64 roleID2 = 3;
inline bool DCProto_LoadPlayerAtt::has_roleID2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_LoadPlayerAtt::set_has_roleID2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_LoadPlayerAtt::clear_has_roleID2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_LoadPlayerAtt::clear_roleID2() {
  roleID2_ = GOOGLE_LONGLONG(0);
  clear_has_roleID2();
}
inline ::google::protobuf::int64 DCProto_LoadPlayerAtt::roleID2() const {
  return roleID2_;
}
inline void DCProto_LoadPlayerAtt::set_roleID2(::google::protobuf::int64 value) {
  set_has_roleID2();
  roleID2_ = value;
}

// -------------------------------------------------------------------

// DCProto_LoadFriendsFans

// optional int64 roleID = 1;
inline bool DCProto_LoadFriendsFans::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_LoadFriendsFans::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_LoadFriendsFans::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_LoadFriendsFans::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_LoadFriendsFans::roleID() const {
  return roleID_;
}
inline void DCProto_LoadFriendsFans::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int64 roleID2 = 2;
inline bool DCProto_LoadFriendsFans::has_roleID2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_LoadFriendsFans::set_has_roleID2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_LoadFriendsFans::clear_has_roleID2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_LoadFriendsFans::clear_roleID2() {
  roleID2_ = GOOGLE_LONGLONG(0);
  clear_has_roleID2();
}
inline ::google::protobuf::int64 DCProto_LoadFriendsFans::roleID2() const {
  return roleID2_;
}
inline void DCProto_LoadFriendsFans::set_roleID2(::google::protobuf::int64 value) {
  set_has_roleID2();
  roleID2_ = value;
}

// -------------------------------------------------------------------

// DCProto_ModifyFixedEventBit

// optional int64 roleID = 1;
inline bool DCProto_ModifyFixedEventBit::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_ModifyFixedEventBit::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_ModifyFixedEventBit::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_ModifyFixedEventBit::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_ModifyFixedEventBit::roleID() const {
  return roleID_;
}
inline void DCProto_ModifyFixedEventBit::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 id = 2;
inline bool DCProto_ModifyFixedEventBit::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_ModifyFixedEventBit::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_ModifyFixedEventBit::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_ModifyFixedEventBit::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_ModifyFixedEventBit::id() const {
  return id_;
}
inline void DCProto_ModifyFixedEventBit::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 bit = 3;
inline bool DCProto_ModifyFixedEventBit::has_bit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_ModifyFixedEventBit::set_has_bit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_ModifyFixedEventBit::clear_has_bit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_ModifyFixedEventBit::clear_bit() {
  bit_ = 0;
  clear_has_bit();
}
inline ::google::protobuf::int32 DCProto_ModifyFixedEventBit::bit() const {
  return bit_;
}
inline void DCProto_ModifyFixedEventBit::set_bit(::google::protobuf::int32 value) {
  set_has_bit();
  bit_ = value;
}

// optional bool one = 4;
inline bool DCProto_ModifyFixedEventBit::has_one() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_ModifyFixedEventBit::set_has_one() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_ModifyFixedEventBit::clear_has_one() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_ModifyFixedEventBit::clear_one() {
  one_ = false;
  clear_has_one();
}
inline bool DCProto_ModifyFixedEventBit::one() const {
  return one_;
}
inline void DCProto_ModifyFixedEventBit::set_one(bool value) {
  set_has_one();
  one_ = value;
}

// -------------------------------------------------------------------

// DCProto_ModifyGodRank

// optional int64 roleID = 1;
inline bool DCProto_ModifyGodRank::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_ModifyGodRank::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_ModifyGodRank::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_ModifyGodRank::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_ModifyGodRank::roleID() const {
  return roleID_;
}
inline void DCProto_ModifyGodRank::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 rank = 2;
inline bool DCProto_ModifyGodRank::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_ModifyGodRank::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_ModifyGodRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_ModifyGodRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 DCProto_ModifyGodRank::rank() const {
  return rank_;
}
inline void DCProto_ModifyGodRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// DCProto_GodRankRecordInfo

// optional .RecordInfo info = 1;
inline bool DCProto_GodRankRecordInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GodRankRecordInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GodRankRecordInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GodRankRecordInfo::clear_info() {
  if (info_ != NULL) info_->::RecordInfo::Clear();
  clear_has_info();
}
inline const ::RecordInfo& DCProto_GodRankRecordInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::RecordInfo* DCProto_GodRankRecordInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::RecordInfo;
  return info_;
}
inline ::RecordInfo* DCProto_GodRankRecordInfo::release_info() {
  clear_has_info();
  ::RecordInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// optional bool flag = 2;
inline bool DCProto_GodRankRecordInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GodRankRecordInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GodRankRecordInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GodRankRecordInfo::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool DCProto_GodRankRecordInfo::flag() const {
  return flag_;
}
inline void DCProto_GodRankRecordInfo::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// DCProto_SaveGodRankInfoRecord

// optional .DCProto_GodRankRecordInfo info1 = 1;
inline bool DCProto_SaveGodRankInfoRecord::has_info1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_SaveGodRankInfoRecord::set_has_info1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_SaveGodRankInfoRecord::clear_has_info1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_SaveGodRankInfoRecord::clear_info1() {
  if (info1_ != NULL) info1_->::DCProto_GodRankRecordInfo::Clear();
  clear_has_info1();
}
inline const ::DCProto_GodRankRecordInfo& DCProto_SaveGodRankInfoRecord::info1() const {
  return info1_ != NULL ? *info1_ : *default_instance_->info1_;
}
inline ::DCProto_GodRankRecordInfo* DCProto_SaveGodRankInfoRecord::mutable_info1() {
  set_has_info1();
  if (info1_ == NULL) info1_ = new ::DCProto_GodRankRecordInfo;
  return info1_;
}
inline ::DCProto_GodRankRecordInfo* DCProto_SaveGodRankInfoRecord::release_info1() {
  clear_has_info1();
  ::DCProto_GodRankRecordInfo* temp = info1_;
  info1_ = NULL;
  return temp;
}

// optional .DCProto_GodRankRecordInfo info2 = 2;
inline bool DCProto_SaveGodRankInfoRecord::has_info2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_SaveGodRankInfoRecord::set_has_info2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_SaveGodRankInfoRecord::clear_has_info2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_SaveGodRankInfoRecord::clear_info2() {
  if (info2_ != NULL) info2_->::DCProto_GodRankRecordInfo::Clear();
  clear_has_info2();
}
inline const ::DCProto_GodRankRecordInfo& DCProto_SaveGodRankInfoRecord::info2() const {
  return info2_ != NULL ? *info2_ : *default_instance_->info2_;
}
inline ::DCProto_GodRankRecordInfo* DCProto_SaveGodRankInfoRecord::mutable_info2() {
  set_has_info2();
  if (info2_ == NULL) info2_ = new ::DCProto_GodRankRecordInfo;
  return info2_;
}
inline ::DCProto_GodRankRecordInfo* DCProto_SaveGodRankInfoRecord::release_info2() {
  clear_has_info2();
  ::DCProto_GodRankRecordInfo* temp = info2_;
  info2_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_QueryGodRole

// optional int64 roleID = 1;
inline bool DCProto_QueryGodRole::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_QueryGodRole::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_QueryGodRole::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_QueryGodRole::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_QueryGodRole::roleID() const {
  return roleID_;
}
inline void DCProto_QueryGodRole::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional .PB_PlayerAtt att = 2;
inline bool DCProto_QueryGodRole::has_att() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_QueryGodRole::set_has_att() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_QueryGodRole::clear_has_att() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_QueryGodRole::clear_att() {
  if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
  clear_has_att();
}
inline const ::PB_PlayerAtt& DCProto_QueryGodRole::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_PlayerAtt* DCProto_QueryGodRole::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_PlayerAtt;
  return att_;
}
inline ::PB_PlayerAtt* DCProto_QueryGodRole::release_att() {
  clear_has_att();
  ::PB_PlayerAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// optional int32 id = 3;
inline bool DCProto_QueryGodRole::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_QueryGodRole::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_QueryGodRole::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_QueryGodRole::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_QueryGodRole::id() const {
  return id_;
}
inline void DCProto_QueryGodRole::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// DCProto_RandomRoles

// optional int32 count = 1;
inline bool DCProto_RandomRoles::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_RandomRoles::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_RandomRoles::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_RandomRoles::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 DCProto_RandomRoles::count() const {
  return count_;
}
inline void DCProto_RandomRoles::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .PB_PlayerAtt atts = 2;
inline int DCProto_RandomRoles::atts_size() const {
  return atts_.size();
}
inline void DCProto_RandomRoles::clear_atts() {
  atts_.Clear();
}
inline const ::PB_PlayerAtt& DCProto_RandomRoles::atts(int index) const {
  return atts_.Get(index);
}
inline ::PB_PlayerAtt* DCProto_RandomRoles::mutable_atts(int index) {
  return atts_.Mutable(index);
}
inline ::PB_PlayerAtt* DCProto_RandomRoles::add_atts() {
  return atts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
DCProto_RandomRoles::atts() const {
  return atts_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
DCProto_RandomRoles::mutable_atts() {
  return &atts_;
}

// -------------------------------------------------------------------

// DCProto_SendMailExceptRoles

// repeated int64 roleIDs = 1;
inline int DCProto_SendMailExceptRoles::roleIDs_size() const {
  return roleIDs_.size();
}
inline void DCProto_SendMailExceptRoles::clear_roleIDs() {
  roleIDs_.Clear();
}
inline ::google::protobuf::int64 DCProto_SendMailExceptRoles::roleIDs(int index) const {
  return roleIDs_.Get(index);
}
inline void DCProto_SendMailExceptRoles::set_roleIDs(int index, ::google::protobuf::int64 value) {
  roleIDs_.Set(index, value);
}
inline void DCProto_SendMailExceptRoles::add_roleIDs(::google::protobuf::int64 value) {
  roleIDs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DCProto_SendMailExceptRoles::roleIDs() const {
  return roleIDs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DCProto_SendMailExceptRoles::mutable_roleIDs() {
  return &roleIDs_;
}

// optional .NetProto_SendMail sm = 2;
inline bool DCProto_SendMailExceptRoles::has_sm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_SendMailExceptRoles::set_has_sm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_SendMailExceptRoles::clear_has_sm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_SendMailExceptRoles::clear_sm() {
  if (sm_ != NULL) sm_->::NetProto_SendMail::Clear();
  clear_has_sm();
}
inline const ::NetProto_SendMail& DCProto_SendMailExceptRoles::sm() const {
  return sm_ != NULL ? *sm_ : *default_instance_->sm_;
}
inline ::NetProto_SendMail* DCProto_SendMailExceptRoles::mutable_sm() {
  set_has_sm();
  if (sm_ == NULL) sm_ = new ::NetProto_SendMail;
  return sm_;
}
inline ::NetProto_SendMail* DCProto_SendMailExceptRoles::release_sm() {
  clear_has_sm();
  ::NetProto_SendMail* temp = sm_;
  sm_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_AddOutLineFriends

// optional int64 roleID1 = 1;
inline bool DCProto_AddOutLineFriends::has_roleID1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_AddOutLineFriends::set_has_roleID1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_AddOutLineFriends::clear_has_roleID1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_AddOutLineFriends::clear_roleID1() {
  roleID1_ = GOOGLE_LONGLONG(0);
  clear_has_roleID1();
}
inline ::google::protobuf::int64 DCProto_AddOutLineFriends::roleID1() const {
  return roleID1_;
}
inline void DCProto_AddOutLineFriends::set_roleID1(::google::protobuf::int64 value) {
  set_has_roleID1();
  roleID1_ = value;
}

// optional int64 roleID2 = 2;
inline bool DCProto_AddOutLineFriends::has_roleID2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_AddOutLineFriends::set_has_roleID2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_AddOutLineFriends::clear_has_roleID2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_AddOutLineFriends::clear_roleID2() {
  roleID2_ = GOOGLE_LONGLONG(0);
  clear_has_roleID2();
}
inline ::google::protobuf::int64 DCProto_AddOutLineFriends::roleID2() const {
  return roleID2_;
}
inline void DCProto_AddOutLineFriends::set_roleID2(::google::protobuf::int64 value) {
  set_has_roleID2();
  roleID2_ = value;
}

// optional string name = 3;
inline bool DCProto_AddOutLineFriends::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_AddOutLineFriends::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_AddOutLineFriends::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_AddOutLineFriends::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DCProto_AddOutLineFriends::name() const {
  return *name_;
}
inline void DCProto_AddOutLineFriends::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DCProto_AddOutLineFriends::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DCProto_AddOutLineFriends::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_AddOutLineFriends::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DCProto_AddOutLineFriends::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .PB_ProfessionInfo.Type professionType = 4;
inline bool DCProto_AddOutLineFriends::has_professionType() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_AddOutLineFriends::set_has_professionType() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_AddOutLineFriends::clear_has_professionType() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_AddOutLineFriends::clear_professionType() {
  professionType_ = 0;
  clear_has_professionType();
}
inline ::PB_ProfessionInfo_Type DCProto_AddOutLineFriends::professionType() const {
  return static_cast< ::PB_ProfessionInfo_Type >(professionType_);
}
inline void DCProto_AddOutLineFriends::set_professionType(::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  set_has_professionType();
  professionType_ = value;
}

// -------------------------------------------------------------------

// DCProto_LoadHireRoleDate

// repeated int64 roleID = 1;
inline int DCProto_LoadHireRoleDate::roleID_size() const {
  return roleID_.size();
}
inline void DCProto_LoadHireRoleDate::clear_roleID() {
  roleID_.Clear();
}
inline ::google::protobuf::int64 DCProto_LoadHireRoleDate::roleID(int index) const {
  return roleID_.Get(index);
}
inline void DCProto_LoadHireRoleDate::set_roleID(int index, ::google::protobuf::int64 value) {
  roleID_.Set(index, value);
}
inline void DCProto_LoadHireRoleDate::add_roleID(::google::protobuf::int64 value) {
  roleID_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DCProto_LoadHireRoleDate::roleID() const {
  return roleID_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DCProto_LoadHireRoleDate::mutable_roleID() {
  return &roleID_;
}

// repeated .PB_PlayerAtt atts = 2;
inline int DCProto_LoadHireRoleDate::atts_size() const {
  return atts_.size();
}
inline void DCProto_LoadHireRoleDate::clear_atts() {
  atts_.Clear();
}
inline const ::PB_PlayerAtt& DCProto_LoadHireRoleDate::atts(int index) const {
  return atts_.Get(index);
}
inline ::PB_PlayerAtt* DCProto_LoadHireRoleDate::mutable_atts(int index) {
  return atts_.Mutable(index);
}
inline ::PB_PlayerAtt* DCProto_LoadHireRoleDate::add_atts() {
  return atts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >&
DCProto_LoadHireRoleDate::atts() const {
  return atts_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_PlayerAtt >*
DCProto_LoadHireRoleDate::mutable_atts() {
  return &atts_;
}

// optional int32 id = 3;
inline bool DCProto_LoadHireRoleDate::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_LoadHireRoleDate::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_LoadHireRoleDate::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_LoadHireRoleDate::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_LoadHireRoleDate::id() const {
  return id_;
}
inline void DCProto_LoadHireRoleDate::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 power = 4;
inline bool DCProto_LoadHireRoleDate::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_LoadHireRoleDate::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_LoadHireRoleDate::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_LoadHireRoleDate::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 DCProto_LoadHireRoleDate::power() const {
  return power_;
}
inline void DCProto_LoadHireRoleDate::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// DCProto_QueryRoleFaction

// repeated int64 roleID = 1;
inline int DCProto_QueryRoleFaction::roleID_size() const {
  return roleID_.size();
}
inline void DCProto_QueryRoleFaction::clear_roleID() {
  roleID_.Clear();
}
inline ::google::protobuf::int64 DCProto_QueryRoleFaction::roleID(int index) const {
  return roleID_.Get(index);
}
inline void DCProto_QueryRoleFaction::set_roleID(int index, ::google::protobuf::int64 value) {
  roleID_.Set(index, value);
}
inline void DCProto_QueryRoleFaction::add_roleID(::google::protobuf::int64 value) {
  roleID_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DCProto_QueryRoleFaction::roleID() const {
  return roleID_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DCProto_QueryRoleFaction::mutable_roleID() {
  return &roleID_;
}

// repeated string faction = 2;
inline int DCProto_QueryRoleFaction::faction_size() const {
  return faction_.size();
}
inline void DCProto_QueryRoleFaction::clear_faction() {
  faction_.Clear();
}
inline const ::std::string& DCProto_QueryRoleFaction::faction(int index) const {
  return faction_.Get(index);
}
inline ::std::string* DCProto_QueryRoleFaction::mutable_faction(int index) {
  return faction_.Mutable(index);
}
inline void DCProto_QueryRoleFaction::set_faction(int index, const ::std::string& value) {
  faction_.Mutable(index)->assign(value);
}
inline void DCProto_QueryRoleFaction::set_faction(int index, const char* value) {
  faction_.Mutable(index)->assign(value);
}
inline void DCProto_QueryRoleFaction::set_faction(int index, const char* value, size_t size) {
  faction_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_QueryRoleFaction::add_faction() {
  return faction_.Add();
}
inline void DCProto_QueryRoleFaction::add_faction(const ::std::string& value) {
  faction_.Add()->assign(value);
}
inline void DCProto_QueryRoleFaction::add_faction(const char* value) {
  faction_.Add()->assign(value);
}
inline void DCProto_QueryRoleFaction::add_faction(const char* value, size_t size) {
  faction_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DCProto_QueryRoleFaction::faction() const {
  return faction_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DCProto_QueryRoleFaction::mutable_faction() {
  return &faction_;
}

// -------------------------------------------------------------------

// DCProto_TencentBuyGoodsUrl

// optional .NetProto_TencentBuyGoodsUrl v = 1;
inline bool DCProto_TencentBuyGoodsUrl::has_v() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_TencentBuyGoodsUrl::set_has_v() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_TencentBuyGoodsUrl::clear_has_v() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_TencentBuyGoodsUrl::clear_v() {
  if (v_ != NULL) v_->::NetProto_TencentBuyGoodsUrl::Clear();
  clear_has_v();
}
inline const ::NetProto_TencentBuyGoodsUrl& DCProto_TencentBuyGoodsUrl::v() const {
  return v_ != NULL ? *v_ : *default_instance_->v_;
}
inline ::NetProto_TencentBuyGoodsUrl* DCProto_TencentBuyGoodsUrl::mutable_v() {
  set_has_v();
  if (v_ == NULL) v_ = new ::NetProto_TencentBuyGoodsUrl;
  return v_;
}
inline ::NetProto_TencentBuyGoodsUrl* DCProto_TencentBuyGoodsUrl::release_v() {
  clear_has_v();
  ::NetProto_TencentBuyGoodsUrl* temp = v_;
  v_ = NULL;
  return temp;
}

// optional int32 id = 2;
inline bool DCProto_TencentBuyGoodsUrl::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_TencentBuyGoodsUrl::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_TencentBuyGoodsUrl::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_TencentBuyGoodsUrl::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_TencentBuyGoodsUrl::id() const {
  return id_;
}
inline void DCProto_TencentBuyGoodsUrl::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// DCProto_Cost

// optional int32 v = 1;
inline bool DCProto_Cost::has_v() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_Cost::set_has_v() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_Cost::clear_has_v() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_Cost::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline ::google::protobuf::int32 DCProto_Cost::v() const {
  return v_;
}
inline void DCProto_Cost::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
}

// optional .PlayerInfo info = 2;
inline bool DCProto_Cost::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_Cost::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_Cost::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_Cost::clear_info() {
  if (info_ != NULL) info_->::PlayerInfo::Clear();
  clear_has_info();
}
inline const ::PlayerInfo& DCProto_Cost::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerInfo* DCProto_Cost::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerInfo;
  return info_;
}
inline ::PlayerInfo* DCProto_Cost::release_info() {
  clear_has_info();
  ::PlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_FilterRecharge

// repeated .NetProto_Recharge recharge = 1;
inline int DCProto_FilterRecharge::recharge_size() const {
  return recharge_.size();
}
inline void DCProto_FilterRecharge::clear_recharge() {
  recharge_.Clear();
}
inline const ::NetProto_Recharge& DCProto_FilterRecharge::recharge(int index) const {
  return recharge_.Get(index);
}
inline ::NetProto_Recharge* DCProto_FilterRecharge::mutable_recharge(int index) {
  return recharge_.Mutable(index);
}
inline ::NetProto_Recharge* DCProto_FilterRecharge::add_recharge() {
  return recharge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetProto_Recharge >&
DCProto_FilterRecharge::recharge() const {
  return recharge_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetProto_Recharge >*
DCProto_FilterRecharge::mutable_recharge() {
  return &recharge_;
}

// optional int32 id = 2;
inline bool DCProto_FilterRecharge::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_FilterRecharge::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_FilterRecharge::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_FilterRecharge::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_FilterRecharge::id() const {
  return id_;
}
inline void DCProto_FilterRecharge::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PlayerInfo info = 3;
inline bool DCProto_FilterRecharge::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_FilterRecharge::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_FilterRecharge::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_FilterRecharge::clear_info() {
  if (info_ != NULL) info_->::PlayerInfo::Clear();
  clear_has_info();
}
inline const ::PlayerInfo& DCProto_FilterRecharge::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerInfo* DCProto_FilterRecharge::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerInfo;
  return info_;
}
inline ::PlayerInfo* DCProto_FilterRecharge::release_info() {
  clear_has_info();
  ::PlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// optional int64 roleID = 4;
inline bool DCProto_FilterRecharge::has_roleID() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_FilterRecharge::set_has_roleID() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_FilterRecharge::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_FilterRecharge::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_FilterRecharge::roleID() const {
  return roleID_;
}
inline void DCProto_FilterRecharge::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// -------------------------------------------------------------------

// DCProto_SetVIP

// optional .NetProto_GMModifyVIP info = 1;
inline bool DCProto_SetVIP::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_SetVIP::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_SetVIP::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_SetVIP::clear_info() {
  if (info_ != NULL) info_->::NetProto_GMModifyVIP::Clear();
  clear_has_info();
}
inline const ::NetProto_GMModifyVIP& DCProto_SetVIP::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::NetProto_GMModifyVIP* DCProto_SetVIP::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::NetProto_GMModifyVIP;
  return info_;
}
inline ::NetProto_GMModifyVIP* DCProto_SetVIP::release_info() {
  clear_has_info();
  ::NetProto_GMModifyVIP* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_CollectEquipment

// optional int64 cur = 1;
inline bool DCProto_CollectEquipment::has_cur() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_CollectEquipment::set_has_cur() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_CollectEquipment::clear_has_cur() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_CollectEquipment::clear_cur() {
  cur_ = GOOGLE_LONGLONG(0);
  clear_has_cur();
}
inline ::google::protobuf::int64 DCProto_CollectEquipment::cur() const {
  return cur_;
}
inline void DCProto_CollectEquipment::set_cur(::google::protobuf::int64 value) {
  set_has_cur();
  cur_ = value;
}

// -------------------------------------------------------------------

// DCProto_SaveEquipmentData

// repeated .EquipmentInfo equipments = 1;
inline int DCProto_SaveEquipmentData::equipments_size() const {
  return equipments_.size();
}
inline void DCProto_SaveEquipmentData::clear_equipments() {
  equipments_.Clear();
}
inline const ::EquipmentInfo& DCProto_SaveEquipmentData::equipments(int index) const {
  return equipments_.Get(index);
}
inline ::EquipmentInfo* DCProto_SaveEquipmentData::mutable_equipments(int index) {
  return equipments_.Mutable(index);
}
inline ::EquipmentInfo* DCProto_SaveEquipmentData::add_equipments() {
  return equipments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >&
DCProto_SaveEquipmentData::equipments() const {
  return equipments_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >*
DCProto_SaveEquipmentData::mutable_equipments() {
  return &equipments_;
}

// repeated int64 owner = 2;
inline int DCProto_SaveEquipmentData::owner_size() const {
  return owner_.size();
}
inline void DCProto_SaveEquipmentData::clear_owner() {
  owner_.Clear();
}
inline ::google::protobuf::int64 DCProto_SaveEquipmentData::owner(int index) const {
  return owner_.Get(index);
}
inline void DCProto_SaveEquipmentData::set_owner(int index, ::google::protobuf::int64 value) {
  owner_.Set(index, value);
}
inline void DCProto_SaveEquipmentData::add_owner(::google::protobuf::int64 value) {
  owner_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DCProto_SaveEquipmentData::owner() const {
  return owner_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DCProto_SaveEquipmentData::mutable_owner() {
  return &owner_;
}

// -------------------------------------------------------------------

// DCProto_LoadEquipmentData

// repeated int64 id = 1;
inline int DCProto_LoadEquipmentData::id_size() const {
  return id_.size();
}
inline void DCProto_LoadEquipmentData::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int64 DCProto_LoadEquipmentData::id(int index) const {
  return id_.Get(index);
}
inline void DCProto_LoadEquipmentData::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
}
inline void DCProto_LoadEquipmentData::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DCProto_LoadEquipmentData::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DCProto_LoadEquipmentData::mutable_id() {
  return &id_;
}

// repeated .EquipmentInfo equipment = 2;
inline int DCProto_LoadEquipmentData::equipment_size() const {
  return equipment_.size();
}
inline void DCProto_LoadEquipmentData::clear_equipment() {
  equipment_.Clear();
}
inline const ::EquipmentInfo& DCProto_LoadEquipmentData::equipment(int index) const {
  return equipment_.Get(index);
}
inline ::EquipmentInfo* DCProto_LoadEquipmentData::mutable_equipment(int index) {
  return equipment_.Mutable(index);
}
inline ::EquipmentInfo* DCProto_LoadEquipmentData::add_equipment() {
  return equipment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >&
DCProto_LoadEquipmentData::equipment() const {
  return equipment_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentInfo >*
DCProto_LoadEquipmentData::mutable_equipment() {
  return &equipment_;
}

// -------------------------------------------------------------------

// DCProto_DeleteEquipmentData

// repeated int64 id = 1;
inline int DCProto_DeleteEquipmentData::id_size() const {
  return id_.size();
}
inline void DCProto_DeleteEquipmentData::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int64 DCProto_DeleteEquipmentData::id(int index) const {
  return id_.Get(index);
}
inline void DCProto_DeleteEquipmentData::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
}
inline void DCProto_DeleteEquipmentData::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DCProto_DeleteEquipmentData::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DCProto_DeleteEquipmentData::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// DCProto_QueryEquipment

// optional int64 itemID = 1;
inline bool DCProto_QueryEquipment::has_itemID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_QueryEquipment::set_has_itemID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_QueryEquipment::clear_has_itemID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_QueryEquipment::clear_itemID() {
  itemID_ = GOOGLE_LONGLONG(0);
  clear_has_itemID();
}
inline ::google::protobuf::int64 DCProto_QueryEquipment::itemID() const {
  return itemID_;
}
inline void DCProto_QueryEquipment::set_itemID(::google::protobuf::int64 value) {
  set_has_itemID();
  itemID_ = value;
}

// optional .EquipmentInfo equipment = 2;
inline bool DCProto_QueryEquipment::has_equipment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_QueryEquipment::set_has_equipment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_QueryEquipment::clear_has_equipment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_QueryEquipment::clear_equipment() {
  if (equipment_ != NULL) equipment_->::EquipmentInfo::Clear();
  clear_has_equipment();
}
inline const ::EquipmentInfo& DCProto_QueryEquipment::equipment() const {
  return equipment_ != NULL ? *equipment_ : *default_instance_->equipment_;
}
inline ::EquipmentInfo* DCProto_QueryEquipment::mutable_equipment() {
  set_has_equipment();
  if (equipment_ == NULL) equipment_ = new ::EquipmentInfo;
  return equipment_;
}
inline ::EquipmentInfo* DCProto_QueryEquipment::release_equipment() {
  clear_has_equipment();
  ::EquipmentInfo* temp = equipment_;
  equipment_ = NULL;
  return temp;
}

// optional int32 id = 3;
inline bool DCProto_QueryEquipment::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_QueryEquipment::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_QueryEquipment::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_QueryEquipment::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_QueryEquipment::id() const {
  return id_;
}
inline void DCProto_QueryEquipment::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// DCProto_GMOrder

// optional .NetProto_GMOrder order = 1;
inline bool DCProto_GMOrder::has_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMOrder::set_has_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMOrder::clear_has_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMOrder::clear_order() {
  if (order_ != NULL) order_->::NetProto_GMOrder::Clear();
  clear_has_order();
}
inline const ::NetProto_GMOrder& DCProto_GMOrder::order() const {
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::NetProto_GMOrder* DCProto_GMOrder::mutable_order() {
  set_has_order();
  if (order_ == NULL) order_ = new ::NetProto_GMOrder;
  return order_;
}
inline ::NetProto_GMOrder* DCProto_GMOrder::release_order() {
  clear_has_order();
  ::NetProto_GMOrder* temp = order_;
  order_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_GMData

// optional int32 id = 1;
inline bool DCProto_GMData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_GMData::id() const {
  return id_;
}
inline void DCProto_GMData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 roleID = 2;
inline bool DCProto_GMData::has_roleID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMData::set_has_roleID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMData::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMData::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_GMData::roleID() const {
  return roleID_;
}
inline void DCProto_GMData::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional string name = 3;
inline bool DCProto_GMData::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_GMData::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_GMData::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_GMData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DCProto_GMData::name() const {
  return *name_;
}
inline void DCProto_GMData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DCProto_GMData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DCProto_GMData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_GMData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DCProto_GMData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 level = 4;
inline bool DCProto_GMData::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_GMData::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_GMData::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_GMData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 DCProto_GMData::level() const {
  return level_;
}
inline void DCProto_GMData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 profession = 5;
inline bool DCProto_GMData::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_GMData::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_GMData::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_GMData::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 DCProto_GMData::profession() const {
  return profession_;
}
inline void DCProto_GMData::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 startTime = 6;
inline bool DCProto_GMData::has_startTime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DCProto_GMData::set_has_startTime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DCProto_GMData::clear_has_startTime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DCProto_GMData::clear_startTime() {
  startTime_ = 0;
  clear_has_startTime();
}
inline ::google::protobuf::int32 DCProto_GMData::startTime() const {
  return startTime_;
}
inline void DCProto_GMData::set_startTime(::google::protobuf::int32 value) {
  set_has_startTime();
  startTime_ = value;
}

// optional int32 endTime = 7;
inline bool DCProto_GMData::has_endTime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DCProto_GMData::set_has_endTime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DCProto_GMData::clear_has_endTime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DCProto_GMData::clear_endTime() {
  endTime_ = 0;
  clear_has_endTime();
}
inline ::google::protobuf::int32 DCProto_GMData::endTime() const {
  return endTime_;
}
inline void DCProto_GMData::set_endTime(::google::protobuf::int32 value) {
  set_has_endTime();
  endTime_ = value;
}

// optional string GM = 8;
inline bool DCProto_GMData::has_GM() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DCProto_GMData::set_has_GM() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DCProto_GMData::clear_has_GM() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DCProto_GMData::clear_GM() {
  if (GM_ != &::google::protobuf::internal::kEmptyString) {
    GM_->clear();
  }
  clear_has_GM();
}
inline const ::std::string& DCProto_GMData::GM() const {
  return *GM_;
}
inline void DCProto_GMData::set_GM(const ::std::string& value) {
  set_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    GM_ = new ::std::string;
  }
  GM_->assign(value);
}
inline void DCProto_GMData::set_GM(const char* value) {
  set_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    GM_ = new ::std::string;
  }
  GM_->assign(value);
}
inline void DCProto_GMData::set_GM(const char* value, size_t size) {
  set_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    GM_ = new ::std::string;
  }
  GM_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_GMData::mutable_GM() {
  set_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    GM_ = new ::std::string;
  }
  return GM_;
}
inline ::std::string* DCProto_GMData::release_GM() {
  clear_has_GM();
  if (GM_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = GM_;
    GM_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool flag = 9;
inline bool DCProto_GMData::has_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DCProto_GMData::set_has_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DCProto_GMData::clear_has_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DCProto_GMData::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool DCProto_GMData::flag() const {
  return flag_;
}
inline void DCProto_GMData::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// DCProto_GMSaveData

// optional .DCProto_GMData gmData = 1;
inline bool DCProto_GMSaveData::has_gmData() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMSaveData::set_has_gmData() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMSaveData::clear_has_gmData() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMSaveData::clear_gmData() {
  if (gmData_ != NULL) gmData_->::DCProto_GMData::Clear();
  clear_has_gmData();
}
inline const ::DCProto_GMData& DCProto_GMSaveData::gmData() const {
  return gmData_ != NULL ? *gmData_ : *default_instance_->gmData_;
}
inline ::DCProto_GMData* DCProto_GMSaveData::mutable_gmData() {
  set_has_gmData();
  if (gmData_ == NULL) gmData_ = new ::DCProto_GMData;
  return gmData_;
}
inline ::DCProto_GMData* DCProto_GMSaveData::release_gmData() {
  clear_has_gmData();
  ::DCProto_GMData* temp = gmData_;
  gmData_ = NULL;
  return temp;
}

// optional bool addOrDel = 2;
inline bool DCProto_GMSaveData::has_addOrDel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMSaveData::set_has_addOrDel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMSaveData::clear_has_addOrDel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMSaveData::clear_addOrDel() {
  addOrDel_ = false;
  clear_has_addOrDel();
}
inline bool DCProto_GMSaveData::addOrDel() const {
  return addOrDel_;
}
inline void DCProto_GMSaveData::set_addOrDel(bool value) {
  set_has_addOrDel();
  addOrDel_ = value;
}

// -------------------------------------------------------------------

// DCProto_GMLoadData

// repeated .DCProto_GMData gmData = 1;
inline int DCProto_GMLoadData::gmData_size() const {
  return gmData_.size();
}
inline void DCProto_GMLoadData::clear_gmData() {
  gmData_.Clear();
}
inline const ::DCProto_GMData& DCProto_GMLoadData::gmData(int index) const {
  return gmData_.Get(index);
}
inline ::DCProto_GMData* DCProto_GMLoadData::mutable_gmData(int index) {
  return gmData_.Mutable(index);
}
inline ::DCProto_GMData* DCProto_GMLoadData::add_gmData() {
  return gmData_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DCProto_GMData >&
DCProto_GMLoadData::gmData() const {
  return gmData_;
}
inline ::google::protobuf::RepeatedPtrField< ::DCProto_GMData >*
DCProto_GMLoadData::mutable_gmData() {
  return &gmData_;
}

// -------------------------------------------------------------------

// DCProto_GMPlayerQuery

// optional string account = 1;
inline bool DCProto_GMPlayerQuery::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMPlayerQuery::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMPlayerQuery::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMPlayerQuery::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& DCProto_GMPlayerQuery::account() const {
  return *account_;
}
inline void DCProto_GMPlayerQuery::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void DCProto_GMPlayerQuery::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void DCProto_GMPlayerQuery::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_GMPlayerQuery::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* DCProto_GMPlayerQuery::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .PB_PlayerAtt att = 2;
inline bool DCProto_GMPlayerQuery::has_att() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMPlayerQuery::set_has_att() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMPlayerQuery::clear_has_att() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMPlayerQuery::clear_att() {
  if (att_ != NULL) att_->::PB_PlayerAtt::Clear();
  clear_has_att();
}
inline const ::PB_PlayerAtt& DCProto_GMPlayerQuery::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_PlayerAtt* DCProto_GMPlayerQuery::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_PlayerAtt;
  return att_;
}
inline ::PB_PlayerAtt* DCProto_GMPlayerQuery::release_att() {
  clear_has_att();
  ::PB_PlayerAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_GMChatRecords

// optional int32 id = 1;
inline bool DCProto_GMChatRecords::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMChatRecords::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMChatRecords::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMChatRecords::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_GMChatRecords::id() const {
  return id_;
}
inline void DCProto_GMChatRecords::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_GMChatRecords record = 2;
inline bool DCProto_GMChatRecords::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMChatRecords::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMChatRecords::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMChatRecords::clear_record() {
  if (record_ != NULL) record_->::NetProto_GMChatRecords::Clear();
  clear_has_record();
}
inline const ::NetProto_GMChatRecords& DCProto_GMChatRecords::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::NetProto_GMChatRecords* DCProto_GMChatRecords::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::NetProto_GMChatRecords;
  return record_;
}
inline ::NetProto_GMChatRecords* DCProto_GMChatRecords::release_record() {
  clear_has_record();
  ::NetProto_GMChatRecords* temp = record_;
  record_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_GMRegistrCount

// optional int32 id = 1;
inline bool DCProto_GMRegistrCount::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMRegistrCount::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMRegistrCount::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMRegistrCount::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_GMRegistrCount::id() const {
  return id_;
}
inline void DCProto_GMRegistrCount::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_GMRegistrCount record = 2;
inline bool DCProto_GMRegistrCount::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMRegistrCount::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMRegistrCount::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMRegistrCount::clear_record() {
  if (record_ != NULL) record_->::NetProto_GMRegistrCount::Clear();
  clear_has_record();
}
inline const ::NetProto_GMRegistrCount& DCProto_GMRegistrCount::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::NetProto_GMRegistrCount* DCProto_GMRegistrCount::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::NetProto_GMRegistrCount;
  return record_;
}
inline ::NetProto_GMRegistrCount* DCProto_GMRegistrCount::release_record() {
  clear_has_record();
  ::NetProto_GMRegistrCount* temp = record_;
  record_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_GMRoleCount

// optional int32 id = 1;
inline bool DCProto_GMRoleCount::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMRoleCount::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMRoleCount::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMRoleCount::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_GMRoleCount::id() const {
  return id_;
}
inline void DCProto_GMRoleCount::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_GMRoleCount record = 2;
inline bool DCProto_GMRoleCount::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMRoleCount::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMRoleCount::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMRoleCount::clear_record() {
  if (record_ != NULL) record_->::NetProto_GMRoleCount::Clear();
  clear_has_record();
}
inline const ::NetProto_GMRoleCount& DCProto_GMRoleCount::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::NetProto_GMRoleCount* DCProto_GMRoleCount::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::NetProto_GMRoleCount;
  return record_;
}
inline ::NetProto_GMRoleCount* DCProto_GMRoleCount::release_record() {
  clear_has_record();
  ::NetProto_GMRoleCount* temp = record_;
  record_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_GMLevelStatistics

// optional int32 id = 1;
inline bool DCProto_GMLevelStatistics::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMLevelStatistics::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMLevelStatistics::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMLevelStatistics::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_GMLevelStatistics::id() const {
  return id_;
}
inline void DCProto_GMLevelStatistics::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_GMLevelStatistics record = 2;
inline bool DCProto_GMLevelStatistics::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMLevelStatistics::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMLevelStatistics::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMLevelStatistics::clear_record() {
  if (record_ != NULL) record_->::NetProto_GMLevelStatistics::Clear();
  clear_has_record();
}
inline const ::NetProto_GMLevelStatistics& DCProto_GMLevelStatistics::record() const {
  return record_ != NULL ? *record_ : *default_instance_->record_;
}
inline ::NetProto_GMLevelStatistics* DCProto_GMLevelStatistics::mutable_record() {
  set_has_record();
  if (record_ == NULL) record_ = new ::NetProto_GMLevelStatistics;
  return record_;
}
inline ::NetProto_GMLevelStatistics* DCProto_GMLevelStatistics::release_record() {
  clear_has_record();
  ::NetProto_GMLevelStatistics* temp = record_;
  record_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_GMOpenGuide

// optional .NetProto_GMOpenGuide info = 1;
inline bool DCProto_GMOpenGuide::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMOpenGuide::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMOpenGuide::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMOpenGuide::clear_info() {
  if (info_ != NULL) info_->::NetProto_GMOpenGuide::Clear();
  clear_has_info();
}
inline const ::NetProto_GMOpenGuide& DCProto_GMOpenGuide::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::NetProto_GMOpenGuide* DCProto_GMOpenGuide::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::NetProto_GMOpenGuide;
  return info_;
}
inline ::NetProto_GMOpenGuide* DCProto_GMOpenGuide::release_info() {
  clear_has_info();
  ::NetProto_GMOpenGuide* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_GMInfo

// optional int32 key = 1;
inline bool DCProto_GMInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMInfo::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 DCProto_GMInfo::key() const {
  return key_;
}
inline void DCProto_GMInfo::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 arg1 = 2;
inline bool DCProto_GMInfo::has_arg1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMInfo::set_has_arg1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMInfo::clear_has_arg1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMInfo::clear_arg1() {
  arg1_ = 0;
  clear_has_arg1();
}
inline ::google::protobuf::int32 DCProto_GMInfo::arg1() const {
  return arg1_;
}
inline void DCProto_GMInfo::set_arg1(::google::protobuf::int32 value) {
  set_has_arg1();
  arg1_ = value;
}

// optional int32 arg2 = 3;
inline bool DCProto_GMInfo::has_arg2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_GMInfo::set_has_arg2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_GMInfo::clear_has_arg2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_GMInfo::clear_arg2() {
  arg2_ = 0;
  clear_has_arg2();
}
inline ::google::protobuf::int32 DCProto_GMInfo::arg2() const {
  return arg2_;
}
inline void DCProto_GMInfo::set_arg2(::google::protobuf::int32 value) {
  set_has_arg2();
  arg2_ = value;
}

// optional int32 arg3 = 4;
inline bool DCProto_GMInfo::has_arg3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_GMInfo::set_has_arg3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_GMInfo::clear_has_arg3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_GMInfo::clear_arg3() {
  arg3_ = 0;
  clear_has_arg3();
}
inline ::google::protobuf::int32 DCProto_GMInfo::arg3() const {
  return arg3_;
}
inline void DCProto_GMInfo::set_arg3(::google::protobuf::int32 value) {
  set_has_arg3();
  arg3_ = value;
}

// optional string str1 = 5;
inline bool DCProto_GMInfo::has_str1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_GMInfo::set_has_str1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_GMInfo::clear_has_str1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_GMInfo::clear_str1() {
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    str1_->clear();
  }
  clear_has_str1();
}
inline const ::std::string& DCProto_GMInfo::str1() const {
  return *str1_;
}
inline void DCProto_GMInfo::set_str1(const ::std::string& value) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(value);
}
inline void DCProto_GMInfo::set_str1(const char* value) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(value);
}
inline void DCProto_GMInfo::set_str1(const char* value, size_t size) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_GMInfo::mutable_str1() {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  return str1_;
}
inline ::std::string* DCProto_GMInfo::release_str1() {
  clear_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str1_;
    str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str2 = 6;
inline bool DCProto_GMInfo::has_str2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DCProto_GMInfo::set_has_str2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DCProto_GMInfo::clear_has_str2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DCProto_GMInfo::clear_str2() {
  if (str2_ != &::google::protobuf::internal::kEmptyString) {
    str2_->clear();
  }
  clear_has_str2();
}
inline const ::std::string& DCProto_GMInfo::str2() const {
  return *str2_;
}
inline void DCProto_GMInfo::set_str2(const ::std::string& value) {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  str2_->assign(value);
}
inline void DCProto_GMInfo::set_str2(const char* value) {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  str2_->assign(value);
}
inline void DCProto_GMInfo::set_str2(const char* value, size_t size) {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  str2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_GMInfo::mutable_str2() {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  return str2_;
}
inline ::std::string* DCProto_GMInfo::release_str2() {
  clear_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str2_;
    str2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string str3 = 7;
inline bool DCProto_GMInfo::has_str3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DCProto_GMInfo::set_has_str3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DCProto_GMInfo::clear_has_str3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DCProto_GMInfo::clear_str3() {
  if (str3_ != &::google::protobuf::internal::kEmptyString) {
    str3_->clear();
  }
  clear_has_str3();
}
inline const ::std::string& DCProto_GMInfo::str3() const {
  return *str3_;
}
inline void DCProto_GMInfo::set_str3(const ::std::string& value) {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  str3_->assign(value);
}
inline void DCProto_GMInfo::set_str3(const char* value) {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  str3_->assign(value);
}
inline void DCProto_GMInfo::set_str3(const char* value, size_t size) {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  str3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_GMInfo::mutable_str3() {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  return str3_;
}
inline ::std::string* DCProto_GMInfo::release_str3() {
  clear_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str3_;
    str3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 roleID = 8;
inline bool DCProto_GMInfo::has_roleID() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DCProto_GMInfo::set_has_roleID() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DCProto_GMInfo::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DCProto_GMInfo::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_GMInfo::roleID() const {
  return roleID_;
}
inline void DCProto_GMInfo::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// -------------------------------------------------------------------

// DCProto_LoadAllDataFromGMDataTable

// repeated .DCProto_GMInfo info = 1;
inline int DCProto_LoadAllDataFromGMDataTable::info_size() const {
  return info_.size();
}
inline void DCProto_LoadAllDataFromGMDataTable::clear_info() {
  info_.Clear();
}
inline const ::DCProto_GMInfo& DCProto_LoadAllDataFromGMDataTable::info(int index) const {
  return info_.Get(index);
}
inline ::DCProto_GMInfo* DCProto_LoadAllDataFromGMDataTable::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::DCProto_GMInfo* DCProto_LoadAllDataFromGMDataTable::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo >&
DCProto_LoadAllDataFromGMDataTable::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo >*
DCProto_LoadAllDataFromGMDataTable::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// DCProto_SaveGMDataTable

// repeated .DCProto_GMInfo info = 1;
inline int DCProto_SaveGMDataTable::info_size() const {
  return info_.size();
}
inline void DCProto_SaveGMDataTable::clear_info() {
  info_.Clear();
}
inline const ::DCProto_GMInfo& DCProto_SaveGMDataTable::info(int index) const {
  return info_.Get(index);
}
inline ::DCProto_GMInfo* DCProto_SaveGMDataTable::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::DCProto_GMInfo* DCProto_SaveGMDataTable::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo >&
DCProto_SaveGMDataTable::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DCProto_GMInfo >*
DCProto_SaveGMDataTable::mutable_info() {
  return &info_;
}

// optional int32 op = 2;
inline bool DCProto_SaveGMDataTable::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_SaveGMDataTable::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_SaveGMDataTable::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_SaveGMDataTable::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 DCProto_SaveGMDataTable::op() const {
  return op_;
}
inline void DCProto_SaveGMDataTable::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// -------------------------------------------------------------------

// DCProto_GMAddExchange

// optional .NetProto_GMAddExchange info = 1;
inline bool DCProto_GMAddExchange::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMAddExchange::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMAddExchange::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMAddExchange::clear_info() {
  if (info_ != NULL) info_->::NetProto_GMAddExchange::Clear();
  clear_has_info();
}
inline const ::NetProto_GMAddExchange& DCProto_GMAddExchange::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::NetProto_GMAddExchange* DCProto_GMAddExchange::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::NetProto_GMAddExchange;
  return info_;
}
inline ::NetProto_GMAddExchange* DCProto_GMAddExchange::release_info() {
  clear_has_info();
  ::NetProto_GMAddExchange* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_GMRekooRole

// optional .NetProto_GMAddRekooRole info = 1;
inline bool DCProto_GMRekooRole::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMRekooRole::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMRekooRole::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMRekooRole::clear_info() {
  if (info_ != NULL) info_->::NetProto_GMAddRekooRole::Clear();
  clear_has_info();
}
inline const ::NetProto_GMAddRekooRole& DCProto_GMRekooRole::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::NetProto_GMAddRekooRole* DCProto_GMRekooRole::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::NetProto_GMAddRekooRole;
  return info_;
}
inline ::NetProto_GMAddRekooRole* DCProto_GMRekooRole::release_info() {
  clear_has_info();
  ::NetProto_GMAddRekooRole* temp = info_;
  info_ = NULL;
  return temp;
}

// optional string str = 2;
inline bool DCProto_GMRekooRole::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMRekooRole::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMRekooRole::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMRekooRole::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& DCProto_GMRekooRole::str() const {
  return *str_;
}
inline void DCProto_GMRekooRole::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void DCProto_GMRekooRole::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void DCProto_GMRekooRole::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_GMRekooRole::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* DCProto_GMRekooRole::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DCProto_GMAddRekooRMB

// optional int64 roleID = 1;
inline bool DCProto_GMAddRekooRMB::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_GMAddRekooRMB::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_GMAddRekooRMB::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_GMAddRekooRMB::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_GMAddRekooRMB::roleID() const {
  return roleID_;
}
inline void DCProto_GMAddRekooRMB::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional int32 rmb = 2;
inline bool DCProto_GMAddRekooRMB::has_rmb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_GMAddRekooRMB::set_has_rmb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_GMAddRekooRMB::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_GMAddRekooRMB::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 DCProto_GMAddRekooRMB::rmb() const {
  return rmb_;
}
inline void DCProto_GMAddRekooRMB::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
}

// -------------------------------------------------------------------

// DCProto_LoadRekooRole

// repeated int64 roleID = 1;
inline int DCProto_LoadRekooRole::roleID_size() const {
  return roleID_.size();
}
inline void DCProto_LoadRekooRole::clear_roleID() {
  roleID_.Clear();
}
inline ::google::protobuf::int64 DCProto_LoadRekooRole::roleID(int index) const {
  return roleID_.Get(index);
}
inline void DCProto_LoadRekooRole::set_roleID(int index, ::google::protobuf::int64 value) {
  roleID_.Set(index, value);
}
inline void DCProto_LoadRekooRole::add_roleID(::google::protobuf::int64 value) {
  roleID_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DCProto_LoadRekooRole::roleID() const {
  return roleID_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DCProto_LoadRekooRole::mutable_roleID() {
  return &roleID_;
}

// -------------------------------------------------------------------

// DCProto_AddCodeCount

// optional int64 roleID = 1;
inline bool DCProto_AddCodeCount::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_AddCodeCount::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_AddCodeCount::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_AddCodeCount::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_AddCodeCount::roleID() const {
  return roleID_;
}
inline void DCProto_AddCodeCount::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// -------------------------------------------------------------------

// InviteCode

// optional int64 roleID = 1;
inline bool InviteCode::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteCode::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteCode::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteCode::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 InviteCode::roleID() const {
  return roleID_;
}
inline void InviteCode::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional string selfCode = 2;
inline bool InviteCode::has_selfCode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteCode::set_has_selfCode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteCode::clear_has_selfCode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteCode::clear_selfCode() {
  if (selfCode_ != &::google::protobuf::internal::kEmptyString) {
    selfCode_->clear();
  }
  clear_has_selfCode();
}
inline const ::std::string& InviteCode::selfCode() const {
  return *selfCode_;
}
inline void InviteCode::set_selfCode(const ::std::string& value) {
  set_has_selfCode();
  if (selfCode_ == &::google::protobuf::internal::kEmptyString) {
    selfCode_ = new ::std::string;
  }
  selfCode_->assign(value);
}
inline void InviteCode::set_selfCode(const char* value) {
  set_has_selfCode();
  if (selfCode_ == &::google::protobuf::internal::kEmptyString) {
    selfCode_ = new ::std::string;
  }
  selfCode_->assign(value);
}
inline void InviteCode::set_selfCode(const char* value, size_t size) {
  set_has_selfCode();
  if (selfCode_ == &::google::protobuf::internal::kEmptyString) {
    selfCode_ = new ::std::string;
  }
  selfCode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InviteCode::mutable_selfCode() {
  set_has_selfCode();
  if (selfCode_ == &::google::protobuf::internal::kEmptyString) {
    selfCode_ = new ::std::string;
  }
  return selfCode_;
}
inline ::std::string* InviteCode::release_selfCode() {
  clear_has_selfCode();
  if (selfCode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = selfCode_;
    selfCode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string otherCode = 3;
inline bool InviteCode::has_otherCode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteCode::set_has_otherCode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteCode::clear_has_otherCode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteCode::clear_otherCode() {
  if (otherCode_ != &::google::protobuf::internal::kEmptyString) {
    otherCode_->clear();
  }
  clear_has_otherCode();
}
inline const ::std::string& InviteCode::otherCode() const {
  return *otherCode_;
}
inline void InviteCode::set_otherCode(const ::std::string& value) {
  set_has_otherCode();
  if (otherCode_ == &::google::protobuf::internal::kEmptyString) {
    otherCode_ = new ::std::string;
  }
  otherCode_->assign(value);
}
inline void InviteCode::set_otherCode(const char* value) {
  set_has_otherCode();
  if (otherCode_ == &::google::protobuf::internal::kEmptyString) {
    otherCode_ = new ::std::string;
  }
  otherCode_->assign(value);
}
inline void InviteCode::set_otherCode(const char* value, size_t size) {
  set_has_otherCode();
  if (otherCode_ == &::google::protobuf::internal::kEmptyString) {
    otherCode_ = new ::std::string;
  }
  otherCode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InviteCode::mutable_otherCode() {
  set_has_otherCode();
  if (otherCode_ == &::google::protobuf::internal::kEmptyString) {
    otherCode_ = new ::std::string;
  }
  return otherCode_;
}
inline ::std::string* InviteCode::release_otherCode() {
  clear_has_otherCode();
  if (otherCode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = otherCode_;
    otherCode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DCProto_LoadInviteCode

// repeated .InviteCode info = 1;
inline int DCProto_LoadInviteCode::info_size() const {
  return info_.size();
}
inline void DCProto_LoadInviteCode::clear_info() {
  info_.Clear();
}
inline const ::InviteCode& DCProto_LoadInviteCode::info(int index) const {
  return info_.Get(index);
}
inline ::InviteCode* DCProto_LoadInviteCode::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::InviteCode* DCProto_LoadInviteCode::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::InviteCode >&
DCProto_LoadInviteCode::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::InviteCode >*
DCProto_LoadInviteCode::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// DCProto_QueryGMAccount

// optional int32 id = 1;
inline bool DCProto_QueryGMAccount::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_QueryGMAccount::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_QueryGMAccount::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_QueryGMAccount::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_QueryGMAccount::id() const {
  return id_;
}
inline void DCProto_QueryGMAccount::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .NetProto_GMLogin gm = 2;
inline bool DCProto_QueryGMAccount::has_gm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_QueryGMAccount::set_has_gm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_QueryGMAccount::clear_has_gm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_QueryGMAccount::clear_gm() {
  if (gm_ != NULL) gm_->::NetProto_GMLogin::Clear();
  clear_has_gm();
}
inline const ::NetProto_GMLogin& DCProto_QueryGMAccount::gm() const {
  return gm_ != NULL ? *gm_ : *default_instance_->gm_;
}
inline ::NetProto_GMLogin* DCProto_QueryGMAccount::mutable_gm() {
  set_has_gm();
  if (gm_ == NULL) gm_ = new ::NetProto_GMLogin;
  return gm_;
}
inline ::NetProto_GMLogin* DCProto_QueryGMAccount::release_gm() {
  clear_has_gm();
  ::NetProto_GMLogin* temp = gm_;
  gm_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_RegistDeviceServer

// optional string deviceNum = 1;
inline bool DCProto_RegistDeviceServer::has_deviceNum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_RegistDeviceServer::set_has_deviceNum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_RegistDeviceServer::clear_has_deviceNum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_RegistDeviceServer::clear_deviceNum() {
  if (deviceNum_ != &::google::protobuf::internal::kEmptyString) {
    deviceNum_->clear();
  }
  clear_has_deviceNum();
}
inline const ::std::string& DCProto_RegistDeviceServer::deviceNum() const {
  return *deviceNum_;
}
inline void DCProto_RegistDeviceServer::set_deviceNum(const ::std::string& value) {
  set_has_deviceNum();
  if (deviceNum_ == &::google::protobuf::internal::kEmptyString) {
    deviceNum_ = new ::std::string;
  }
  deviceNum_->assign(value);
}
inline void DCProto_RegistDeviceServer::set_deviceNum(const char* value) {
  set_has_deviceNum();
  if (deviceNum_ == &::google::protobuf::internal::kEmptyString) {
    deviceNum_ = new ::std::string;
  }
  deviceNum_->assign(value);
}
inline void DCProto_RegistDeviceServer::set_deviceNum(const char* value, size_t size) {
  set_has_deviceNum();
  if (deviceNum_ == &::google::protobuf::internal::kEmptyString) {
    deviceNum_ = new ::std::string;
  }
  deviceNum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_RegistDeviceServer::mutable_deviceNum() {
  set_has_deviceNum();
  if (deviceNum_ == &::google::protobuf::internal::kEmptyString) {
    deviceNum_ = new ::std::string;
  }
  return deviceNum_;
}
inline ::std::string* DCProto_RegistDeviceServer::release_deviceNum() {
  clear_has_deviceNum();
  if (deviceNum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceNum_;
    deviceNum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 id = 2;
inline bool DCProto_RegistDeviceServer::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_RegistDeviceServer::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_RegistDeviceServer::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_RegistDeviceServer::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DCProto_RegistDeviceServer::id() const {
  return id_;
}
inline void DCProto_RegistDeviceServer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string idfa = 3;
inline bool DCProto_RegistDeviceServer::has_idfa() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_RegistDeviceServer::set_has_idfa() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_RegistDeviceServer::clear_has_idfa() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_RegistDeviceServer::clear_idfa() {
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    idfa_->clear();
  }
  clear_has_idfa();
}
inline const ::std::string& DCProto_RegistDeviceServer::idfa() const {
  return *idfa_;
}
inline void DCProto_RegistDeviceServer::set_idfa(const ::std::string& value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void DCProto_RegistDeviceServer::set_idfa(const char* value) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(value);
}
inline void DCProto_RegistDeviceServer::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  idfa_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_RegistDeviceServer::mutable_idfa() {
  set_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    idfa_ = new ::std::string;
  }
  return idfa_;
}
inline ::std::string* DCProto_RegistDeviceServer::release_idfa() {
  clear_has_idfa();
  if (idfa_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idfa_;
    idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool noLine = 4;
inline bool DCProto_RegistDeviceServer::has_noLine() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_RegistDeviceServer::set_has_noLine() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_RegistDeviceServer::clear_has_noLine() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_RegistDeviceServer::clear_noLine() {
  noLine_ = false;
  clear_has_noLine();
}
inline bool DCProto_RegistDeviceServer::noLine() const {
  return noLine_;
}
inline void DCProto_RegistDeviceServer::set_noLine(bool value) {
  set_has_noLine();
  noLine_ = value;
}

// optional int32 time = 5;
inline bool DCProto_RegistDeviceServer::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_RegistDeviceServer::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_RegistDeviceServer::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_RegistDeviceServer::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 DCProto_RegistDeviceServer::time() const {
  return time_;
}
inline void DCProto_RegistDeviceServer::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// DCProto_FactionData

// optional string factionName = 1;
inline bool DCProto_FactionData::has_factionName() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_FactionData::set_has_factionName() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_FactionData::clear_has_factionName() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_FactionData::clear_factionName() {
  if (factionName_ != &::google::protobuf::internal::kEmptyString) {
    factionName_->clear();
  }
  clear_has_factionName();
}
inline const ::std::string& DCProto_FactionData::factionName() const {
  return *factionName_;
}
inline void DCProto_FactionData::set_factionName(const ::std::string& value) {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  factionName_->assign(value);
}
inline void DCProto_FactionData::set_factionName(const char* value) {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  factionName_->assign(value);
}
inline void DCProto_FactionData::set_factionName(const char* value, size_t size) {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  factionName_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_FactionData::mutable_factionName() {
  set_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    factionName_ = new ::std::string;
  }
  return factionName_;
}
inline ::std::string* DCProto_FactionData::release_factionName() {
  clear_has_factionName();
  if (factionName_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = factionName_;
    factionName_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 2;
inline bool DCProto_FactionData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_FactionData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_FactionData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_FactionData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DCProto_FactionData::name() const {
  return *name_;
}
inline void DCProto_FactionData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DCProto_FactionData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DCProto_FactionData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_FactionData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DCProto_FactionData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 num = 3;
inline bool DCProto_FactionData::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_FactionData::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_FactionData::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_FactionData::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 DCProto_FactionData::num() const {
  return num_;
}
inline void DCProto_FactionData::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int64 exp = 4;
inline bool DCProto_FactionData::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_FactionData::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_FactionData::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_FactionData::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 DCProto_FactionData::exp() const {
  return exp_;
}
inline void DCProto_FactionData::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 exp_time = 5;
inline bool DCProto_FactionData::has_exp_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DCProto_FactionData::set_has_exp_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DCProto_FactionData::clear_has_exp_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DCProto_FactionData::clear_exp_time() {
  exp_time_ = 0;
  clear_has_exp_time();
}
inline ::google::protobuf::int32 DCProto_FactionData::exp_time() const {
  return exp_time_;
}
inline void DCProto_FactionData::set_exp_time(::google::protobuf::int32 value) {
  set_has_exp_time();
  exp_time_ = value;
}

// optional int32 item = 6;
inline bool DCProto_FactionData::has_item() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DCProto_FactionData::set_has_item() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DCProto_FactionData::clear_has_item() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DCProto_FactionData::clear_item() {
  item_ = 0;
  clear_has_item();
}
inline ::google::protobuf::int32 DCProto_FactionData::item() const {
  return item_;
}
inline void DCProto_FactionData::set_item(::google::protobuf::int32 value) {
  set_has_item();
  item_ = value;
}

// optional string notice = 7;
inline bool DCProto_FactionData::has_notice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DCProto_FactionData::set_has_notice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DCProto_FactionData::clear_has_notice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DCProto_FactionData::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& DCProto_FactionData::notice() const {
  return *notice_;
}
inline void DCProto_FactionData::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void DCProto_FactionData::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void DCProto_FactionData::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_FactionData::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* DCProto_FactionData::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string team = 8;
inline bool DCProto_FactionData::has_team() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DCProto_FactionData::set_has_team() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DCProto_FactionData::clear_has_team() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DCProto_FactionData::clear_team() {
  if (team_ != &::google::protobuf::internal::kEmptyString) {
    team_->clear();
  }
  clear_has_team();
}
inline const ::std::string& DCProto_FactionData::team() const {
  return *team_;
}
inline void DCProto_FactionData::set_team(const ::std::string& value) {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  team_->assign(value);
}
inline void DCProto_FactionData::set_team(const char* value) {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  team_->assign(value);
}
inline void DCProto_FactionData::set_team(const char* value, size_t size) {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  team_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_FactionData::mutable_team() {
  set_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    team_ = new ::std::string;
  }
  return team_;
}
inline ::std::string* DCProto_FactionData::release_team() {
  clear_has_team();
  if (team_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_;
    team_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string guardian = 9;
inline bool DCProto_FactionData::has_guardian() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DCProto_FactionData::set_has_guardian() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DCProto_FactionData::clear_has_guardian() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DCProto_FactionData::clear_guardian() {
  if (guardian_ != &::google::protobuf::internal::kEmptyString) {
    guardian_->clear();
  }
  clear_has_guardian();
}
inline const ::std::string& DCProto_FactionData::guardian() const {
  return *guardian_;
}
inline void DCProto_FactionData::set_guardian(const ::std::string& value) {
  set_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    guardian_ = new ::std::string;
  }
  guardian_->assign(value);
}
inline void DCProto_FactionData::set_guardian(const char* value) {
  set_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    guardian_ = new ::std::string;
  }
  guardian_->assign(value);
}
inline void DCProto_FactionData::set_guardian(const char* value, size_t size) {
  set_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    guardian_ = new ::std::string;
  }
  guardian_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_FactionData::mutable_guardian() {
  set_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    guardian_ = new ::std::string;
  }
  return guardian_;
}
inline ::std::string* DCProto_FactionData::release_guardian() {
  clear_has_guardian();
  if (guardian_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guardian_;
    guardian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DCProto_FactionLoadData

// repeated .DCProto_FactionData data = 1;
inline int DCProto_FactionLoadData::data_size() const {
  return data_.size();
}
inline void DCProto_FactionLoadData::clear_data() {
  data_.Clear();
}
inline const ::DCProto_FactionData& DCProto_FactionLoadData::data(int index) const {
  return data_.Get(index);
}
inline ::DCProto_FactionData* DCProto_FactionLoadData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::DCProto_FactionData* DCProto_FactionLoadData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData >&
DCProto_FactionLoadData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData >*
DCProto_FactionLoadData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// DCProto_FactionSaveData

// repeated .DCProto_FactionData data = 1;
inline int DCProto_FactionSaveData::data_size() const {
  return data_.size();
}
inline void DCProto_FactionSaveData::clear_data() {
  data_.Clear();
}
inline const ::DCProto_FactionData& DCProto_FactionSaveData::data(int index) const {
  return data_.Get(index);
}
inline ::DCProto_FactionData* DCProto_FactionSaveData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::DCProto_FactionData* DCProto_FactionSaveData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData >&
DCProto_FactionSaveData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::DCProto_FactionData >*
DCProto_FactionSaveData::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// DCProto_FactionAddRecord

// optional .DCProto_FactionData data = 1;
inline bool DCProto_FactionAddRecord::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_FactionAddRecord::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_FactionAddRecord::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_FactionAddRecord::clear_data() {
  if (data_ != NULL) data_->::DCProto_FactionData::Clear();
  clear_has_data();
}
inline const ::DCProto_FactionData& DCProto_FactionAddRecord::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::DCProto_FactionData* DCProto_FactionAddRecord::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::DCProto_FactionData;
  return data_;
}
inline ::DCProto_FactionData* DCProto_FactionAddRecord::release_data() {
  clear_has_data();
  ::DCProto_FactionData* temp = data_;
  data_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_FactionDelRecord

// optional .DCProto_FactionData data = 1;
inline bool DCProto_FactionDelRecord::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_FactionDelRecord::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_FactionDelRecord::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_FactionDelRecord::clear_data() {
  if (data_ != NULL) data_->::DCProto_FactionData::Clear();
  clear_has_data();
}
inline const ::DCProto_FactionData& DCProto_FactionDelRecord::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::DCProto_FactionData* DCProto_FactionDelRecord::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::DCProto_FactionData;
  return data_;
}
inline ::DCProto_FactionData* DCProto_FactionDelRecord::release_data() {
  clear_has_data();
  ::DCProto_FactionData* temp = data_;
  data_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_FactionUpdateRecord

// optional .DCProto_FactionData data = 1;
inline bool DCProto_FactionUpdateRecord::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_FactionUpdateRecord::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_FactionUpdateRecord::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_FactionUpdateRecord::clear_data() {
  if (data_ != NULL) data_->::DCProto_FactionData::Clear();
  clear_has_data();
}
inline const ::DCProto_FactionData& DCProto_FactionUpdateRecord::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::DCProto_FactionData* DCProto_FactionUpdateRecord::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::DCProto_FactionData;
  return data_;
}
inline ::DCProto_FactionData* DCProto_FactionUpdateRecord::release_data() {
  clear_has_data();
  ::DCProto_FactionData* temp = data_;
  data_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DCProto_SysFactionMemInfo

// optional int64 roleID = 1;
inline bool DCProto_SysFactionMemInfo::has_roleID() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_SysFactionMemInfo::set_has_roleID() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_SysFactionMemInfo::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_SysFactionMemInfo::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_SysFactionMemInfo::roleID() const {
  return roleID_;
}
inline void DCProto_SysFactionMemInfo::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// optional string str = 2;
inline bool DCProto_SysFactionMemInfo::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_SysFactionMemInfo::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_SysFactionMemInfo::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_SysFactionMemInfo::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& DCProto_SysFactionMemInfo::str() const {
  return *str_;
}
inline void DCProto_SysFactionMemInfo::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void DCProto_SysFactionMemInfo::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void DCProto_SysFactionMemInfo::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DCProto_SysFactionMemInfo::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* DCProto_SysFactionMemInfo::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DCProto_InitRank

// optional .NetProto_Rank.Type type = 1;
inline bool DCProto_InitRank::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_InitRank::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_InitRank::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_InitRank::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::NetProto_Rank_Type DCProto_InitRank::type() const {
  return static_cast< ::NetProto_Rank_Type >(type_);
}
inline void DCProto_InitRank::set_type(::NetProto_Rank_Type value) {
  GOOGLE_DCHECK(::NetProto_Rank_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .RecordInfo rank = 2;
inline int DCProto_InitRank::rank_size() const {
  return rank_.size();
}
inline void DCProto_InitRank::clear_rank() {
  rank_.Clear();
}
inline const ::RecordInfo& DCProto_InitRank::rank(int index) const {
  return rank_.Get(index);
}
inline ::RecordInfo* DCProto_InitRank::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::RecordInfo* DCProto_InitRank::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
DCProto_InitRank::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
DCProto_InitRank::mutable_rank() {
  return &rank_;
}

// optional .RecordInfo finalKiller = 3;
inline bool DCProto_InitRank::has_finalKiller() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DCProto_InitRank::set_has_finalKiller() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DCProto_InitRank::clear_has_finalKiller() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DCProto_InitRank::clear_finalKiller() {
  if (finalKiller_ != NULL) finalKiller_->::RecordInfo::Clear();
  clear_has_finalKiller();
}
inline const ::RecordInfo& DCProto_InitRank::finalKiller() const {
  return finalKiller_ != NULL ? *finalKiller_ : *default_instance_->finalKiller_;
}
inline ::RecordInfo* DCProto_InitRank::mutable_finalKiller() {
  set_has_finalKiller();
  if (finalKiller_ == NULL) finalKiller_ = new ::RecordInfo;
  return finalKiller_;
}
inline ::RecordInfo* DCProto_InitRank::release_finalKiller() {
  clear_has_finalKiller();
  ::RecordInfo* temp = finalKiller_;
  finalKiller_ = NULL;
  return temp;
}

// optional bool flag = 4;
inline bool DCProto_InitRank::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DCProto_InitRank::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DCProto_InitRank::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DCProto_InitRank::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool DCProto_InitRank::flag() const {
  return flag_;
}
inline void DCProto_InitRank::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// DCProto_PingPongAward

// optional .NetProto_Rank.Type type = 1;
inline bool DCProto_PingPongAward::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_PingPongAward::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_PingPongAward::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_PingPongAward::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::NetProto_Rank_Type DCProto_PingPongAward::type() const {
  return static_cast< ::NetProto_Rank_Type >(type_);
}
inline void DCProto_PingPongAward::set_type(::NetProto_Rank_Type value) {
  GOOGLE_DCHECK(::NetProto_Rank_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleID = 2;
inline bool DCProto_PingPongAward::has_roleID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_PingPongAward::set_has_roleID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_PingPongAward::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_PingPongAward::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_PingPongAward::roleID() const {
  return roleID_;
}
inline void DCProto_PingPongAward::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}

// -------------------------------------------------------------------

// FactionPower

// optional string str = 1;
inline bool FactionPower::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionPower::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionPower::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionPower::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& FactionPower::str() const {
  return *str_;
}
inline void FactionPower::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void FactionPower::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void FactionPower::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionPower::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* FactionPower::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int64 roleID = 2;
inline int FactionPower::roleID_size() const {
  return roleID_.size();
}
inline void FactionPower::clear_roleID() {
  roleID_.Clear();
}
inline ::google::protobuf::int64 FactionPower::roleID(int index) const {
  return roleID_.Get(index);
}
inline void FactionPower::set_roleID(int index, ::google::protobuf::int64 value) {
  roleID_.Set(index, value);
}
inline void FactionPower::add_roleID(::google::protobuf::int64 value) {
  roleID_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FactionPower::roleID() const {
  return roleID_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FactionPower::mutable_roleID() {
  return &roleID_;
}

// optional int64 power = 3;
inline bool FactionPower::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionPower::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionPower::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionPower::clear_power() {
  power_ = GOOGLE_LONGLONG(0);
  clear_has_power();
}
inline ::google::protobuf::int64 FactionPower::power() const {
  return power_;
}
inline void FactionPower::set_power(::google::protobuf::int64 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// DCProto_FactionPower

// repeated .FactionPower info = 1;
inline int DCProto_FactionPower::info_size() const {
  return info_.size();
}
inline void DCProto_FactionPower::clear_info() {
  info_.Clear();
}
inline const ::FactionPower& DCProto_FactionPower::info(int index) const {
  return info_.Get(index);
}
inline ::FactionPower* DCProto_FactionPower::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::FactionPower* DCProto_FactionPower::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FactionPower >&
DCProto_FactionPower::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::FactionPower >*
DCProto_FactionPower::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// DCProto_PingPongQiuBiTe

// optional .NetProto_Rank.Type type = 1;
inline bool DCProto_PingPongQiuBiTe::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DCProto_PingPongQiuBiTe::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DCProto_PingPongQiuBiTe::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DCProto_PingPongQiuBiTe::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::NetProto_Rank_Type DCProto_PingPongQiuBiTe::type() const {
  return static_cast< ::NetProto_Rank_Type >(type_);
}
inline void DCProto_PingPongQiuBiTe::set_type(::NetProto_Rank_Type value) {
  GOOGLE_DCHECK(::NetProto_Rank_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int64 roleID = 2;
inline bool DCProto_PingPongQiuBiTe::has_roleID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DCProto_PingPongQiuBiTe::set_has_roleID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DCProto_PingPongQiuBiTe::clear_has_roleID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DCProto_PingPongQiuBiTe::clear_roleID() {
  roleID_ = GOOGLE_LONGLONG(0);
  clear_has_roleID();
}
inline ::google::protobuf::int64 DCProto_PingPongQiuBiTe::roleID() const {
  return roleID_;
}
inline void DCProto_PingPongQiuBiTe::set_roleID(::google::protobuf::int64 value) {
  set_has_roleID();
  roleID_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SaveRoleData_ID>() {
  return ::DCProto_SaveRoleData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_DeleteRoleData_ID>() {
  return ::DCProto_DeleteRoleData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_LoadRoleData_ID>() {
  return ::DCProto_LoadRoleData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_CollectRole_ID>() {
  return ::DCProto_CollectRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_AddAccount_ID>() {
  return ::DCProto_AddAccount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_AddRole_ID>() {
  return ::DCProto_AddRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SaveSingleRecord_ID>() {
  return ::DCProto_SaveSingleRecord_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_HasName_ID>() {
  return ::DCProto_HasName_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_Login_ID>() {
  return ::DCProto_Login_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_QueryRole_ID>() {
  return ::DCProto_QueryRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SendMail_ID>() {
  return ::DCProto_SendMail_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GetKeyGift_ID>() {
  return ::DCProto_GetKeyGift_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_Recharge_ID>() {
  return ::DCProto_Recharge_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_CostRecord_ID>() {
  return ::DCProto_CostRecord_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_PlayerStatus_ID>() {
  return ::DCProto_PlayerStatus_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SaveChat_ID>() {
  return ::DCProto_SaveChat_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GodTarget_ID>() {
  return ::DCProto_GodTarget_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_LoadPlayerAtt_ID>() {
  return ::DCProto_LoadPlayerAtt_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_LoadFriendsFans_ID>() {
  return ::DCProto_LoadFriendsFans_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_ModifyFixedEventBit_ID>() {
  return ::DCProto_ModifyFixedEventBit_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_ModifyGodRank_ID>() {
  return ::DCProto_ModifyGodRank_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SaveGodRankInfoRecord_ID>() {
  return ::DCProto_SaveGodRankInfoRecord_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_QueryGodRole_ID>() {
  return ::DCProto_QueryGodRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_RandomRoles_ID>() {
  return ::DCProto_RandomRoles_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SendMailExceptRoles_ID>() {
  return ::DCProto_SendMailExceptRoles_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_AddOutLineFriends_ID>() {
  return ::DCProto_AddOutLineFriends_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_LoadHireRoleDate_ID>() {
  return ::DCProto_LoadHireRoleDate_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_QueryRoleFaction_ID>() {
  return ::DCProto_QueryRoleFaction_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_TencentBuyGoodsUrl_ID>() {
  return ::DCProto_TencentBuyGoodsUrl_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_Cost_ID>() {
  return ::DCProto_Cost_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_FilterRecharge_ID>() {
  return ::DCProto_FilterRecharge_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SetVIP_ID>() {
  return ::DCProto_SetVIP_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_CollectEquipment_ID>() {
  return ::DCProto_CollectEquipment_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SaveEquipmentData_ID>() {
  return ::DCProto_SaveEquipmentData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_LoadEquipmentData_ID>() {
  return ::DCProto_LoadEquipmentData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_DeleteEquipmentData_ID>() {
  return ::DCProto_DeleteEquipmentData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_QueryEquipment_ID>() {
  return ::DCProto_QueryEquipment_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMOrder_ID>() {
  return ::DCProto_GMOrder_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMData_ID>() {
  return ::DCProto_GMData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMSaveData_ID>() {
  return ::DCProto_GMSaveData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMLoadData_ID>() {
  return ::DCProto_GMLoadData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMPlayerQuery_ID>() {
  return ::DCProto_GMPlayerQuery_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMChatRecords_ID>() {
  return ::DCProto_GMChatRecords_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMRegistrCount_ID>() {
  return ::DCProto_GMRegistrCount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMRoleCount_ID>() {
  return ::DCProto_GMRoleCount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMLevelStatistics_ID>() {
  return ::DCProto_GMLevelStatistics_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMOpenGuide_ID>() {
  return ::DCProto_GMOpenGuide_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_LoadAllDataFromGMDataTable_ID>() {
  return ::DCProto_LoadAllDataFromGMDataTable_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SaveGMDataTable_ID>() {
  return ::DCProto_SaveGMDataTable_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMAddExchange_ID>() {
  return ::DCProto_GMAddExchange_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMRekooRole_ID>() {
  return ::DCProto_GMRekooRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_GMAddRekooRMB_ID>() {
  return ::DCProto_GMAddRekooRMB_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_LoadRekooRole_ID>() {
  return ::DCProto_LoadRekooRole_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_AddCodeCount_ID>() {
  return ::DCProto_AddCodeCount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_LoadInviteCode_ID>() {
  return ::DCProto_LoadInviteCode_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_QueryGMAccount_ID>() {
  return ::DCProto_QueryGMAccount_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_RegistDeviceServer_ID>() {
  return ::DCProto_RegistDeviceServer_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_FactionData_ID>() {
  return ::DCProto_FactionData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_FactionLoadData_ID>() {
  return ::DCProto_FactionLoadData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_FactionSaveData_ID>() {
  return ::DCProto_FactionSaveData_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_FactionAddRecord_ID>() {
  return ::DCProto_FactionAddRecord_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_FactionDelRecord_ID>() {
  return ::DCProto_FactionDelRecord_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_FactionUpdateRecord_ID>() {
  return ::DCProto_FactionUpdateRecord_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_SysFactionMemInfo_ID>() {
  return ::DCProto_SysFactionMemInfo_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_InitRank_ID>() {
  return ::DCProto_InitRank_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_PingPongAward_ID>() {
  return ::DCProto_PingPongAward_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_FactionPower_ID>() {
  return ::DCProto_FactionPower_ID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DCProto_PingPongQiuBiTe_ID>() {
  return ::DCProto_PingPongQiuBiTe_ID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DCProto_2eproto__INCLUDED

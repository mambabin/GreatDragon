// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StatusInfo.proto

#ifndef PROTOBUF_StatusInfo_2eproto__INCLUDED
#define PROTOBUF_StatusInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_StatusInfo_2eproto();
void protobuf_AssignDesc_StatusInfo_2eproto();
void protobuf_ShutdownFile_StatusInfo_2eproto();

class StatusInfo;
class AllStatuses;

enum StatusInfo_StatusType {
  StatusInfo_StatusType_HURT = 0,
  StatusInfo_StatusType_STATIC = 1,
  StatusInfo_StatusType_FLYAWAY = 2,
  StatusInfo_StatusType_GOD = 3,
  StatusInfo_StatusType_SKY = 4,
  StatusInfo_StatusType_GROUND = 5,
  StatusInfo_StatusType_STANDUP = 6,
  StatusInfo_StatusType_SPEED = 7,
  StatusInfo_StatusType_CANTMOVE = 8,
  StatusInfo_StatusType_GIDDY = 9,
  StatusInfo_StatusType_FEAR = 10,
  StatusInfo_StatusType_RECOVER = 11,
  StatusInfo_StatusType_FREEZE = 12,
  StatusInfo_StatusType_IGNORE_DEF = 13,
  StatusInfo_StatusType_SELF_ATT = 14,
  StatusInfo_StatusType_DEC_HURT = 15,
  StatusInfo_StatusType_ROOM_EXP = 16
};
bool StatusInfo_StatusType_IsValid(int value);
const StatusInfo_StatusType StatusInfo_StatusType_StatusType_MIN = StatusInfo_StatusType_HURT;
const StatusInfo_StatusType StatusInfo_StatusType_StatusType_MAX = StatusInfo_StatusType_ROOM_EXP;
const int StatusInfo_StatusType_StatusType_ARRAYSIZE = StatusInfo_StatusType_StatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusInfo_StatusType_descriptor();
inline const ::std::string& StatusInfo_StatusType_Name(StatusInfo_StatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusInfo_StatusType_descriptor(), value);
}
inline bool StatusInfo_StatusType_Parse(
    const ::std::string& name, StatusInfo_StatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusInfo_StatusType>(
    StatusInfo_StatusType_descriptor(), name, value);
}
enum StatusInfo_TargetType {
  StatusInfo_TargetType_NO_TARGET = 0,
  StatusInfo_TargetType_ATTACKER = 1,
  StatusInfo_TargetType_DEFENDER = 2
};
bool StatusInfo_TargetType_IsValid(int value);
const StatusInfo_TargetType StatusInfo_TargetType_TargetType_MIN = StatusInfo_TargetType_NO_TARGET;
const StatusInfo_TargetType StatusInfo_TargetType_TargetType_MAX = StatusInfo_TargetType_DEFENDER;
const int StatusInfo_TargetType_TargetType_ARRAYSIZE = StatusInfo_TargetType_TargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusInfo_TargetType_descriptor();
inline const ::std::string& StatusInfo_TargetType_Name(StatusInfo_TargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusInfo_TargetType_descriptor(), value);
}
inline bool StatusInfo_TargetType_Parse(
    const ::std::string& name, StatusInfo_TargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusInfo_TargetType>(
    StatusInfo_TargetType_descriptor(), name, value);
}
enum StatusInfo_TriggerType {
  StatusInfo_TriggerType_NO_TRIGGER = 0,
  StatusInfo_TriggerType_HIT = 1,
  StatusInfo_TriggerType_ATTACK = 2,
  StatusInfo_TriggerType_BEATTACKED = 3
};
bool StatusInfo_TriggerType_IsValid(int value);
const StatusInfo_TriggerType StatusInfo_TriggerType_TriggerType_MIN = StatusInfo_TriggerType_NO_TRIGGER;
const StatusInfo_TriggerType StatusInfo_TriggerType_TriggerType_MAX = StatusInfo_TriggerType_BEATTACKED;
const int StatusInfo_TriggerType_TriggerType_ARRAYSIZE = StatusInfo_TriggerType_TriggerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusInfo_TriggerType_descriptor();
inline const ::std::string& StatusInfo_TriggerType_Name(StatusInfo_TriggerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusInfo_TriggerType_descriptor(), value);
}
inline bool StatusInfo_TriggerType_Parse(
    const ::std::string& name, StatusInfo_TriggerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusInfo_TriggerType>(
    StatusInfo_TriggerType_descriptor(), name, value);
}
enum StatusInfo_HurtType {
  StatusInfo_HurtType_NORMAL = 0,
  StatusInfo_HurtType_ALWAYS = 1
};
bool StatusInfo_HurtType_IsValid(int value);
const StatusInfo_HurtType StatusInfo_HurtType_HurtType_MIN = StatusInfo_HurtType_NORMAL;
const StatusInfo_HurtType StatusInfo_HurtType_HurtType_MAX = StatusInfo_HurtType_ALWAYS;
const int StatusInfo_HurtType_HurtType_ARRAYSIZE = StatusInfo_HurtType_HurtType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusInfo_HurtType_descriptor();
inline const ::std::string& StatusInfo_HurtType_Name(StatusInfo_HurtType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusInfo_HurtType_descriptor(), value);
}
inline bool StatusInfo_HurtType_Parse(
    const ::std::string& name, StatusInfo_HurtType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusInfo_HurtType>(
    StatusInfo_HurtType_descriptor(), name, value);
}
enum StatusInfo_PosType {
  StatusInfo_PosType_HEAD = 0,
  StatusInfo_PosType_BODY = 1,
  StatusInfo_PosType_FEET = 2
};
bool StatusInfo_PosType_IsValid(int value);
const StatusInfo_PosType StatusInfo_PosType_PosType_MIN = StatusInfo_PosType_HEAD;
const StatusInfo_PosType StatusInfo_PosType_PosType_MAX = StatusInfo_PosType_FEET;
const int StatusInfo_PosType_PosType_ARRAYSIZE = StatusInfo_PosType_PosType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusInfo_PosType_descriptor();
inline const ::std::string& StatusInfo_PosType_Name(StatusInfo_PosType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusInfo_PosType_descriptor(), value);
}
inline bool StatusInfo_PosType_Parse(
    const ::std::string& name, StatusInfo_PosType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusInfo_PosType>(
    StatusInfo_PosType_descriptor(), name, value);
}
// ===================================================================

class StatusInfo : public ::google::protobuf::Message {
 public:
  StatusInfo();
  virtual ~StatusInfo();
  
  StatusInfo(const StatusInfo& from);
  
  inline StatusInfo& operator=(const StatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusInfo& default_instance();
  
  void Swap(StatusInfo* other);
  
  // implements Message ----------------------------------------------
  
  StatusInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusInfo& from);
  void MergeFrom(const StatusInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef StatusInfo_StatusType StatusType;
  static const StatusType HURT = StatusInfo_StatusType_HURT;
  static const StatusType STATIC = StatusInfo_StatusType_STATIC;
  static const StatusType FLYAWAY = StatusInfo_StatusType_FLYAWAY;
  static const StatusType GOD = StatusInfo_StatusType_GOD;
  static const StatusType SKY = StatusInfo_StatusType_SKY;
  static const StatusType GROUND = StatusInfo_StatusType_GROUND;
  static const StatusType STANDUP = StatusInfo_StatusType_STANDUP;
  static const StatusType SPEED = StatusInfo_StatusType_SPEED;
  static const StatusType CANTMOVE = StatusInfo_StatusType_CANTMOVE;
  static const StatusType GIDDY = StatusInfo_StatusType_GIDDY;
  static const StatusType FEAR = StatusInfo_StatusType_FEAR;
  static const StatusType RECOVER = StatusInfo_StatusType_RECOVER;
  static const StatusType FREEZE = StatusInfo_StatusType_FREEZE;
  static const StatusType IGNORE_DEF = StatusInfo_StatusType_IGNORE_DEF;
  static const StatusType SELF_ATT = StatusInfo_StatusType_SELF_ATT;
  static const StatusType DEC_HURT = StatusInfo_StatusType_DEC_HURT;
  static const StatusType ROOM_EXP = StatusInfo_StatusType_ROOM_EXP;
  static inline bool StatusType_IsValid(int value) {
    return StatusInfo_StatusType_IsValid(value);
  }
  static const StatusType StatusType_MIN =
    StatusInfo_StatusType_StatusType_MIN;
  static const StatusType StatusType_MAX =
    StatusInfo_StatusType_StatusType_MAX;
  static const int StatusType_ARRAYSIZE =
    StatusInfo_StatusType_StatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusType_descriptor() {
    return StatusInfo_StatusType_descriptor();
  }
  static inline const ::std::string& StatusType_Name(StatusType value) {
    return StatusInfo_StatusType_Name(value);
  }
  static inline bool StatusType_Parse(const ::std::string& name,
      StatusType* value) {
    return StatusInfo_StatusType_Parse(name, value);
  }
  
  typedef StatusInfo_TargetType TargetType;
  static const TargetType NO_TARGET = StatusInfo_TargetType_NO_TARGET;
  static const TargetType ATTACKER = StatusInfo_TargetType_ATTACKER;
  static const TargetType DEFENDER = StatusInfo_TargetType_DEFENDER;
  static inline bool TargetType_IsValid(int value) {
    return StatusInfo_TargetType_IsValid(value);
  }
  static const TargetType TargetType_MIN =
    StatusInfo_TargetType_TargetType_MIN;
  static const TargetType TargetType_MAX =
    StatusInfo_TargetType_TargetType_MAX;
  static const int TargetType_ARRAYSIZE =
    StatusInfo_TargetType_TargetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TargetType_descriptor() {
    return StatusInfo_TargetType_descriptor();
  }
  static inline const ::std::string& TargetType_Name(TargetType value) {
    return StatusInfo_TargetType_Name(value);
  }
  static inline bool TargetType_Parse(const ::std::string& name,
      TargetType* value) {
    return StatusInfo_TargetType_Parse(name, value);
  }
  
  typedef StatusInfo_TriggerType TriggerType;
  static const TriggerType NO_TRIGGER = StatusInfo_TriggerType_NO_TRIGGER;
  static const TriggerType HIT = StatusInfo_TriggerType_HIT;
  static const TriggerType ATTACK = StatusInfo_TriggerType_ATTACK;
  static const TriggerType BEATTACKED = StatusInfo_TriggerType_BEATTACKED;
  static inline bool TriggerType_IsValid(int value) {
    return StatusInfo_TriggerType_IsValid(value);
  }
  static const TriggerType TriggerType_MIN =
    StatusInfo_TriggerType_TriggerType_MIN;
  static const TriggerType TriggerType_MAX =
    StatusInfo_TriggerType_TriggerType_MAX;
  static const int TriggerType_ARRAYSIZE =
    StatusInfo_TriggerType_TriggerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TriggerType_descriptor() {
    return StatusInfo_TriggerType_descriptor();
  }
  static inline const ::std::string& TriggerType_Name(TriggerType value) {
    return StatusInfo_TriggerType_Name(value);
  }
  static inline bool TriggerType_Parse(const ::std::string& name,
      TriggerType* value) {
    return StatusInfo_TriggerType_Parse(name, value);
  }
  
  typedef StatusInfo_HurtType HurtType;
  static const HurtType NORMAL = StatusInfo_HurtType_NORMAL;
  static const HurtType ALWAYS = StatusInfo_HurtType_ALWAYS;
  static inline bool HurtType_IsValid(int value) {
    return StatusInfo_HurtType_IsValid(value);
  }
  static const HurtType HurtType_MIN =
    StatusInfo_HurtType_HurtType_MIN;
  static const HurtType HurtType_MAX =
    StatusInfo_HurtType_HurtType_MAX;
  static const int HurtType_ARRAYSIZE =
    StatusInfo_HurtType_HurtType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HurtType_descriptor() {
    return StatusInfo_HurtType_descriptor();
  }
  static inline const ::std::string& HurtType_Name(HurtType value) {
    return StatusInfo_HurtType_Name(value);
  }
  static inline bool HurtType_Parse(const ::std::string& name,
      HurtType* value) {
    return StatusInfo_HurtType_Parse(name, value);
  }
  
  typedef StatusInfo_PosType PosType;
  static const PosType HEAD = StatusInfo_PosType_HEAD;
  static const PosType BODY = StatusInfo_PosType_BODY;
  static const PosType FEET = StatusInfo_PosType_FEET;
  static inline bool PosType_IsValid(int value) {
    return StatusInfo_PosType_IsValid(value);
  }
  static const PosType PosType_MIN =
    StatusInfo_PosType_PosType_MIN;
  static const PosType PosType_MAX =
    StatusInfo_PosType_PosType_MAX;
  static const int PosType_ARRAYSIZE =
    StatusInfo_PosType_PosType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PosType_descriptor() {
    return StatusInfo_PosType_descriptor();
  }
  static inline const ::std::string& PosType_Name(PosType value) {
    return StatusInfo_PosType_Name(value);
  }
  static inline bool PosType_Parse(const ::std::string& name,
      PosType* value) {
    return StatusInfo_PosType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .StatusInfo.StatusType statusType = 2;
  inline bool has_statusType() const;
  inline void clear_statusType();
  static const int kStatusTypeFieldNumber = 2;
  inline ::StatusInfo_StatusType statusType() const;
  inline void set_statusType(::StatusInfo_StatusType value);
  
  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional float percent = 4;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 4;
  inline float percent() const;
  inline void set_percent(float value);
  
  // optional int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional int32 interval = 6;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 6;
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);
  
  // optional float rate = 7;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 7;
  inline float rate() const;
  inline void set_rate(float value);
  
  // optional .StatusInfo.TargetType targetType = 8;
  inline bool has_targetType() const;
  inline void clear_targetType();
  static const int kTargetTypeFieldNumber = 8;
  inline ::StatusInfo_TargetType targetType() const;
  inline void set_targetType(::StatusInfo_TargetType value);
  
  // optional .StatusInfo.TriggerType triggerType = 9;
  inline bool has_triggerType() const;
  inline void clear_triggerType();
  static const int kTriggerTypeFieldNumber = 9;
  inline ::StatusInfo_TriggerType triggerType() const;
  inline void set_triggerType(::StatusInfo_TriggerType value);
  
  // optional int32 next = 10;
  inline bool has_next() const;
  inline void clear_next();
  static const int kNextFieldNumber = 10;
  inline ::google::protobuf::int32 next() const;
  inline void set_next(::google::protobuf::int32 value);
  
  // optional int32 res = 11;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 11;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);
  
  // optional .StatusInfo.HurtType hurtType = 12;
  inline bool has_hurtType() const;
  inline void clear_hurtType();
  static const int kHurtTypeFieldNumber = 12;
  inline ::StatusInfo_HurtType hurtType() const;
  inline void set_hurtType(::StatusInfo_HurtType value);
  
  // optional .StatusInfo.PosType posType = 13;
  inline bool has_posType() const;
  inline void clear_posType();
  static const int kPosTypeFieldNumber = 13;
  inline ::StatusInfo_PosType posType() const;
  inline void set_posType(::StatusInfo_PosType value);
  
  // @@protoc_insertion_point(class_scope:StatusInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_statusType();
  inline void clear_has_statusType();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_percent();
  inline void clear_has_percent();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_targetType();
  inline void clear_has_targetType();
  inline void set_has_triggerType();
  inline void clear_has_triggerType();
  inline void set_has_next();
  inline void clear_has_next();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_hurtType();
  inline void clear_has_hurtType();
  inline void set_has_posType();
  inline void clear_has_posType();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  int statusType_;
  ::google::protobuf::int32 value_;
  float percent_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 interval_;
  float rate_;
  int targetType_;
  int triggerType_;
  ::google::protobuf::int32 next_;
  ::google::protobuf::int32 res_;
  int hurtType_;
  int posType_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_StatusInfo_2eproto();
  friend void protobuf_AssignDesc_StatusInfo_2eproto();
  friend void protobuf_ShutdownFile_StatusInfo_2eproto();
  
  void InitAsDefaultInstance();
  static StatusInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllStatuses : public ::google::protobuf::Message {
 public:
  AllStatuses();
  virtual ~AllStatuses();
  
  AllStatuses(const AllStatuses& from);
  
  inline AllStatuses& operator=(const AllStatuses& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllStatuses& default_instance();
  
  void Swap(AllStatuses* other);
  
  // implements Message ----------------------------------------------
  
  AllStatuses* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllStatuses& from);
  void MergeFrom(const AllStatuses& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .StatusInfo statuses = 1;
  inline int statuses_size() const;
  inline void clear_statuses();
  static const int kStatusesFieldNumber = 1;
  inline const ::StatusInfo& statuses(int index) const;
  inline ::StatusInfo* mutable_statuses(int index);
  inline ::StatusInfo* add_statuses();
  inline const ::google::protobuf::RepeatedPtrField< ::StatusInfo >&
      statuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::StatusInfo >*
      mutable_statuses();
  
  // @@protoc_insertion_point(class_scope:AllStatuses)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::StatusInfo > statuses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_StatusInfo_2eproto();
  friend void protobuf_AssignDesc_StatusInfo_2eproto();
  friend void protobuf_ShutdownFile_StatusInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllStatuses* default_instance_;
};
// ===================================================================


// ===================================================================

// StatusInfo

// optional int32 id = 1;
inline bool StatusInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StatusInfo::id() const {
  return id_;
}
inline void StatusInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .StatusInfo.StatusType statusType = 2;
inline bool StatusInfo::has_statusType() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusInfo::set_has_statusType() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatusInfo::clear_has_statusType() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatusInfo::clear_statusType() {
  statusType_ = 0;
  clear_has_statusType();
}
inline ::StatusInfo_StatusType StatusInfo::statusType() const {
  return static_cast< ::StatusInfo_StatusType >(statusType_);
}
inline void StatusInfo::set_statusType(::StatusInfo_StatusType value) {
  GOOGLE_DCHECK(::StatusInfo_StatusType_IsValid(value));
  set_has_statusType();
  statusType_ = value;
}

// optional int32 value = 3;
inline bool StatusInfo::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatusInfo::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatusInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatusInfo::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 StatusInfo::value() const {
  return value_;
}
inline void StatusInfo::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional float percent = 4;
inline bool StatusInfo::has_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatusInfo::set_has_percent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatusInfo::clear_has_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatusInfo::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline float StatusInfo::percent() const {
  return percent_;
}
inline void StatusInfo::set_percent(float value) {
  set_has_percent();
  percent_ = value;
}

// optional int32 count = 5;
inline bool StatusInfo::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatusInfo::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatusInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatusInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 StatusInfo::count() const {
  return count_;
}
inline void StatusInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 interval = 6;
inline bool StatusInfo::has_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatusInfo::set_has_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StatusInfo::clear_has_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StatusInfo::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 StatusInfo::interval() const {
  return interval_;
}
inline void StatusInfo::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
}

// optional float rate = 7;
inline bool StatusInfo::has_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StatusInfo::set_has_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StatusInfo::clear_has_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StatusInfo::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float StatusInfo::rate() const {
  return rate_;
}
inline void StatusInfo::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// optional .StatusInfo.TargetType targetType = 8;
inline bool StatusInfo::has_targetType() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StatusInfo::set_has_targetType() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StatusInfo::clear_has_targetType() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StatusInfo::clear_targetType() {
  targetType_ = 0;
  clear_has_targetType();
}
inline ::StatusInfo_TargetType StatusInfo::targetType() const {
  return static_cast< ::StatusInfo_TargetType >(targetType_);
}
inline void StatusInfo::set_targetType(::StatusInfo_TargetType value) {
  GOOGLE_DCHECK(::StatusInfo_TargetType_IsValid(value));
  set_has_targetType();
  targetType_ = value;
}

// optional .StatusInfo.TriggerType triggerType = 9;
inline bool StatusInfo::has_triggerType() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StatusInfo::set_has_triggerType() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StatusInfo::clear_has_triggerType() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StatusInfo::clear_triggerType() {
  triggerType_ = 0;
  clear_has_triggerType();
}
inline ::StatusInfo_TriggerType StatusInfo::triggerType() const {
  return static_cast< ::StatusInfo_TriggerType >(triggerType_);
}
inline void StatusInfo::set_triggerType(::StatusInfo_TriggerType value) {
  GOOGLE_DCHECK(::StatusInfo_TriggerType_IsValid(value));
  set_has_triggerType();
  triggerType_ = value;
}

// optional int32 next = 10;
inline bool StatusInfo::has_next() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StatusInfo::set_has_next() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StatusInfo::clear_has_next() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StatusInfo::clear_next() {
  next_ = 0;
  clear_has_next();
}
inline ::google::protobuf::int32 StatusInfo::next() const {
  return next_;
}
inline void StatusInfo::set_next(::google::protobuf::int32 value) {
  set_has_next();
  next_ = value;
}

// optional int32 res = 11;
inline bool StatusInfo::has_res() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StatusInfo::set_has_res() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StatusInfo::clear_has_res() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StatusInfo::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::google::protobuf::int32 StatusInfo::res() const {
  return res_;
}
inline void StatusInfo::set_res(::google::protobuf::int32 value) {
  set_has_res();
  res_ = value;
}

// optional .StatusInfo.HurtType hurtType = 12;
inline bool StatusInfo::has_hurtType() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StatusInfo::set_has_hurtType() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StatusInfo::clear_has_hurtType() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StatusInfo::clear_hurtType() {
  hurtType_ = 0;
  clear_has_hurtType();
}
inline ::StatusInfo_HurtType StatusInfo::hurtType() const {
  return static_cast< ::StatusInfo_HurtType >(hurtType_);
}
inline void StatusInfo::set_hurtType(::StatusInfo_HurtType value) {
  GOOGLE_DCHECK(::StatusInfo_HurtType_IsValid(value));
  set_has_hurtType();
  hurtType_ = value;
}

// optional .StatusInfo.PosType posType = 13;
inline bool StatusInfo::has_posType() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StatusInfo::set_has_posType() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StatusInfo::clear_has_posType() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StatusInfo::clear_posType() {
  posType_ = 0;
  clear_has_posType();
}
inline ::StatusInfo_PosType StatusInfo::posType() const {
  return static_cast< ::StatusInfo_PosType >(posType_);
}
inline void StatusInfo::set_posType(::StatusInfo_PosType value) {
  GOOGLE_DCHECK(::StatusInfo_PosType_IsValid(value));
  set_has_posType();
  posType_ = value;
}

// -------------------------------------------------------------------

// AllStatuses

// repeated .StatusInfo statuses = 1;
inline int AllStatuses::statuses_size() const {
  return statuses_.size();
}
inline void AllStatuses::clear_statuses() {
  statuses_.Clear();
}
inline const ::StatusInfo& AllStatuses::statuses(int index) const {
  return statuses_.Get(index);
}
inline ::StatusInfo* AllStatuses::mutable_statuses(int index) {
  return statuses_.Mutable(index);
}
inline ::StatusInfo* AllStatuses::add_statuses() {
  return statuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StatusInfo >&
AllStatuses::statuses() const {
  return statuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::StatusInfo >*
AllStatuses::mutable_statuses() {
  return &statuses_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StatusInfo_StatusType>() {
  return ::StatusInfo_StatusType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StatusInfo_TargetType>() {
  return ::StatusInfo_TargetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StatusInfo_TriggerType>() {
  return ::StatusInfo_TriggerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StatusInfo_HurtType>() {
  return ::StatusInfo_HurtType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StatusInfo_PosType>() {
  return ::StatusInfo_PosType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StatusInfo_2eproto__INCLUDED

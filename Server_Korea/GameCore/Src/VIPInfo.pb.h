// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VIPInfo.proto

#ifndef PROTOBUF_VIPInfo_2eproto__INCLUDED
#define PROTOBUF_VIPInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VIPInfo_2eproto();
void protobuf_AssignDesc_VIPInfo_2eproto();
void protobuf_ShutdownFile_VIPInfo_2eproto();

class VIPInfo;
class AllVIPInfo;

// ===================================================================

class VIPInfo : public ::google::protobuf::Message {
 public:
  VIPInfo();
  virtual ~VIPInfo();
  
  VIPInfo(const VIPInfo& from);
  
  inline VIPInfo& operator=(const VIPInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VIPInfo& default_instance();
  
  void Swap(VIPInfo* other);
  
  // implements Message ----------------------------------------------
  
  VIPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VIPInfo& from);
  void MergeFrom(const VIPInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 rmb = 2;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 2;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);
  
  // optional int32 goods = 3;
  inline bool has_goods() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 3;
  inline ::google::protobuf::int32 goods() const;
  inline void set_goods(::google::protobuf::int32 value);
  
  // optional float expDelta = 5;
  inline bool has_expDelta() const;
  inline void clear_expDelta();
  static const int kExpDeltaFieldNumber = 5;
  inline float expDelta() const;
  inline void set_expDelta(float value);
  
  // optional int32 reviveDelta = 6;
  inline bool has_reviveDelta() const;
  inline void clear_reviveDelta();
  static const int kReviveDeltaFieldNumber = 6;
  inline ::google::protobuf::int32 reviveDelta() const;
  inline void set_reviveDelta(::google::protobuf::int32 value);
  
  // optional int32 resetSingleEnhance = 7;
  inline bool has_resetSingleEnhance() const;
  inline void clear_resetSingleEnhance();
  static const int kResetSingleEnhanceFieldNumber = 7;
  inline ::google::protobuf::int32 resetSingleEnhance() const;
  inline void set_resetSingleEnhance(::google::protobuf::int32 value);
  
  // optional int32 inspireCount = 8;
  inline bool has_inspireCount() const;
  inline void clear_inspireCount();
  static const int kInspireCountFieldNumber = 8;
  inline ::google::protobuf::int32 inspireCount() const;
  inline void set_inspireCount(::google::protobuf::int32 value);
  
  // optional int32 resetBoss = 9;
  inline bool has_resetBoss() const;
  inline void clear_resetBoss();
  static const int kResetBossFieldNumber = 9;
  inline ::google::protobuf::int32 resetBoss() const;
  inline void set_resetBoss(::google::protobuf::int32 value);
  
  // optional int32 resetGod = 10;
  inline bool has_resetGod() const;
  inline void clear_resetGod();
  static const int kResetGodFieldNumber = 10;
  inline ::google::protobuf::int32 resetGod() const;
  inline void set_resetGod(::google::protobuf::int32 value);
  
  // optional bool clearGodCD = 11;
  inline bool has_clearGodCD() const;
  inline void clear_clearGodCD();
  static const int kClearGodCDFieldNumber = 11;
  inline bool clearGodCD() const;
  inline void set_clearGodCD(bool value);
  
  // optional int32 pic = 12;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 12;
  inline ::google::protobuf::int32 pic() const;
  inline void set_pic(::google::protobuf::int32 value);
  
  // optional int32 buyDurability = 13;
  inline bool has_buyDurability() const;
  inline void clear_buyDurability();
  static const int kBuyDurabilityFieldNumber = 13;
  inline ::google::protobuf::int32 buyDurability() const;
  inline void set_buyDurability(::google::protobuf::int32 value);
  
  // optional int32 transformCount = 14;
  inline bool has_transformCount() const;
  inline void clear_transformCount();
  static const int kTransformCountFieldNumber = 14;
  inline ::google::protobuf::int32 transformCount() const;
  inline void set_transformCount(::google::protobuf::int32 value);
  
  // optional bool quickFight = 15;
  inline bool has_quickFight() const;
  inline void clear_quickFight();
  static const int kQuickFightFieldNumber = 15;
  inline bool quickFight() const;
  inline void set_quickFight(bool value);
  
  // optional bool quickSell = 16;
  inline bool has_quickSell() const;
  inline void clear_quickSell();
  static const int kQuickSellFieldNumber = 16;
  inline bool quickSell() const;
  inline void set_quickSell(bool value);
  
  // optional bool clearQuickFightCD = 17;
  inline bool has_clearQuickFightCD() const;
  inline void clear_clearQuickFightCD();
  static const int kClearQuickFightCDFieldNumber = 17;
  inline bool clearQuickFightCD() const;
  inline void set_clearQuickFightCD(bool value);
  
  // optional int32 mulTowerHireCount = 18;
  inline bool has_mulTowerHireCount() const;
  inline void clear_mulTowerHireCount();
  static const int kMulTowerHireCountFieldNumber = 18;
  inline ::google::protobuf::int32 mulTowerHireCount() const;
  inline void set_mulTowerHireCount(::google::protobuf::int32 value);
  
  // optional int32 towerResetCount = 19;
  inline bool has_towerResetCount() const;
  inline void clear_towerResetCount();
  static const int kTowerResetCountFieldNumber = 19;
  inline ::google::protobuf::int32 towerResetCount() const;
  inline void set_towerResetCount(::google::protobuf::int32 value);
  
  // optional int32 moneyTreeCount = 20;
  inline bool has_moneyTreeCount() const;
  inline void clear_moneyTreeCount();
  static const int kMoneyTreeCountFieldNumber = 20;
  inline ::google::protobuf::int32 moneyTreeCount() const;
  inline void set_moneyTreeCount(::google::protobuf::int32 value);
  
  // optional int32 durabilityDelta = 21;
  inline bool has_durabilityDelta() const;
  inline void clear_durabilityDelta();
  static const int kDurabilityDeltaFieldNumber = 21;
  inline ::google::protobuf::int32 durabilityDelta() const;
  inline void set_durabilityDelta(::google::protobuf::int32 value);
  
  // optional int32 survive = 22;
  inline bool has_survive() const;
  inline void clear_survive();
  static const int kSurviveFieldNumber = 22;
  inline ::google::protobuf::int32 survive() const;
  inline void set_survive(::google::protobuf::int32 value);
  
  // optional int32 hero = 23;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 23;
  inline ::google::protobuf::int32 hero() const;
  inline void set_hero(::google::protobuf::int32 value);
  
  // optional int32 fubenCount = 24;
  inline bool has_fubenCount() const;
  inline void clear_fubenCount();
  static const int kFubenCountFieldNumber = 24;
  inline ::google::protobuf::int32 fubenCount() const;
  inline void set_fubenCount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:VIPInfo)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_goods();
  inline void clear_has_goods();
  inline void set_has_expDelta();
  inline void clear_has_expDelta();
  inline void set_has_reviveDelta();
  inline void clear_has_reviveDelta();
  inline void set_has_resetSingleEnhance();
  inline void clear_has_resetSingleEnhance();
  inline void set_has_inspireCount();
  inline void clear_has_inspireCount();
  inline void set_has_resetBoss();
  inline void clear_has_resetBoss();
  inline void set_has_resetGod();
  inline void clear_has_resetGod();
  inline void set_has_clearGodCD();
  inline void clear_has_clearGodCD();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_buyDurability();
  inline void clear_has_buyDurability();
  inline void set_has_transformCount();
  inline void clear_has_transformCount();
  inline void set_has_quickFight();
  inline void clear_has_quickFight();
  inline void set_has_quickSell();
  inline void clear_has_quickSell();
  inline void set_has_clearQuickFightCD();
  inline void clear_has_clearQuickFightCD();
  inline void set_has_mulTowerHireCount();
  inline void clear_has_mulTowerHireCount();
  inline void set_has_towerResetCount();
  inline void clear_has_towerResetCount();
  inline void set_has_moneyTreeCount();
  inline void clear_has_moneyTreeCount();
  inline void set_has_durabilityDelta();
  inline void clear_has_durabilityDelta();
  inline void set_has_survive();
  inline void clear_has_survive();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_fubenCount();
  inline void clear_has_fubenCount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 rmb_;
  ::google::protobuf::int32 goods_;
  float expDelta_;
  ::google::protobuf::int32 reviveDelta_;
  ::google::protobuf::int32 resetSingleEnhance_;
  ::google::protobuf::int32 inspireCount_;
  ::google::protobuf::int32 resetBoss_;
  ::google::protobuf::int32 resetGod_;
  ::google::protobuf::int32 pic_;
  ::google::protobuf::int32 buyDurability_;
  ::google::protobuf::int32 transformCount_;
  bool clearGodCD_;
  bool quickFight_;
  bool quickSell_;
  bool clearQuickFightCD_;
  ::google::protobuf::int32 mulTowerHireCount_;
  ::google::protobuf::int32 towerResetCount_;
  ::google::protobuf::int32 moneyTreeCount_;
  ::google::protobuf::int32 durabilityDelta_;
  ::google::protobuf::int32 survive_;
  ::google::protobuf::int32 hero_;
  ::google::protobuf::int32 fubenCount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  friend void  protobuf_AddDesc_VIPInfo_2eproto();
  friend void protobuf_AssignDesc_VIPInfo_2eproto();
  friend void protobuf_ShutdownFile_VIPInfo_2eproto();
  
  void InitAsDefaultInstance();
  static VIPInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllVIPInfo : public ::google::protobuf::Message {
 public:
  AllVIPInfo();
  virtual ~AllVIPInfo();
  
  AllVIPInfo(const AllVIPInfo& from);
  
  inline AllVIPInfo& operator=(const AllVIPInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllVIPInfo& default_instance();
  
  void Swap(AllVIPInfo* other);
  
  // implements Message ----------------------------------------------
  
  AllVIPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllVIPInfo& from);
  void MergeFrom(const AllVIPInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .VIPInfo vipInfo = 1;
  inline int vipInfo_size() const;
  inline void clear_vipInfo();
  static const int kVipInfoFieldNumber = 1;
  inline const ::VIPInfo& vipInfo(int index) const;
  inline ::VIPInfo* mutable_vipInfo(int index);
  inline ::VIPInfo* add_vipInfo();
  inline const ::google::protobuf::RepeatedPtrField< ::VIPInfo >&
      vipInfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::VIPInfo >*
      mutable_vipInfo();
  
  // @@protoc_insertion_point(class_scope:AllVIPInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::VIPInfo > vipInfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_VIPInfo_2eproto();
  friend void protobuf_AssignDesc_VIPInfo_2eproto();
  friend void protobuf_ShutdownFile_VIPInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllVIPInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// VIPInfo

// optional int32 level = 1;
inline bool VIPInfo::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VIPInfo::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VIPInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VIPInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 VIPInfo::level() const {
  return level_;
}
inline void VIPInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 rmb = 2;
inline bool VIPInfo::has_rmb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VIPInfo::set_has_rmb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VIPInfo::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VIPInfo::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 VIPInfo::rmb() const {
  return rmb_;
}
inline void VIPInfo::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
}

// optional int32 goods = 3;
inline bool VIPInfo::has_goods() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VIPInfo::set_has_goods() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VIPInfo::clear_has_goods() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VIPInfo::clear_goods() {
  goods_ = 0;
  clear_has_goods();
}
inline ::google::protobuf::int32 VIPInfo::goods() const {
  return goods_;
}
inline void VIPInfo::set_goods(::google::protobuf::int32 value) {
  set_has_goods();
  goods_ = value;
}

// optional float expDelta = 5;
inline bool VIPInfo::has_expDelta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VIPInfo::set_has_expDelta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VIPInfo::clear_has_expDelta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VIPInfo::clear_expDelta() {
  expDelta_ = 0;
  clear_has_expDelta();
}
inline float VIPInfo::expDelta() const {
  return expDelta_;
}
inline void VIPInfo::set_expDelta(float value) {
  set_has_expDelta();
  expDelta_ = value;
}

// optional int32 reviveDelta = 6;
inline bool VIPInfo::has_reviveDelta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VIPInfo::set_has_reviveDelta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VIPInfo::clear_has_reviveDelta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VIPInfo::clear_reviveDelta() {
  reviveDelta_ = 0;
  clear_has_reviveDelta();
}
inline ::google::protobuf::int32 VIPInfo::reviveDelta() const {
  return reviveDelta_;
}
inline void VIPInfo::set_reviveDelta(::google::protobuf::int32 value) {
  set_has_reviveDelta();
  reviveDelta_ = value;
}

// optional int32 resetSingleEnhance = 7;
inline bool VIPInfo::has_resetSingleEnhance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VIPInfo::set_has_resetSingleEnhance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VIPInfo::clear_has_resetSingleEnhance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VIPInfo::clear_resetSingleEnhance() {
  resetSingleEnhance_ = 0;
  clear_has_resetSingleEnhance();
}
inline ::google::protobuf::int32 VIPInfo::resetSingleEnhance() const {
  return resetSingleEnhance_;
}
inline void VIPInfo::set_resetSingleEnhance(::google::protobuf::int32 value) {
  set_has_resetSingleEnhance();
  resetSingleEnhance_ = value;
}

// optional int32 inspireCount = 8;
inline bool VIPInfo::has_inspireCount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VIPInfo::set_has_inspireCount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VIPInfo::clear_has_inspireCount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VIPInfo::clear_inspireCount() {
  inspireCount_ = 0;
  clear_has_inspireCount();
}
inline ::google::protobuf::int32 VIPInfo::inspireCount() const {
  return inspireCount_;
}
inline void VIPInfo::set_inspireCount(::google::protobuf::int32 value) {
  set_has_inspireCount();
  inspireCount_ = value;
}

// optional int32 resetBoss = 9;
inline bool VIPInfo::has_resetBoss() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VIPInfo::set_has_resetBoss() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VIPInfo::clear_has_resetBoss() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VIPInfo::clear_resetBoss() {
  resetBoss_ = 0;
  clear_has_resetBoss();
}
inline ::google::protobuf::int32 VIPInfo::resetBoss() const {
  return resetBoss_;
}
inline void VIPInfo::set_resetBoss(::google::protobuf::int32 value) {
  set_has_resetBoss();
  resetBoss_ = value;
}

// optional int32 resetGod = 10;
inline bool VIPInfo::has_resetGod() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VIPInfo::set_has_resetGod() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VIPInfo::clear_has_resetGod() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VIPInfo::clear_resetGod() {
  resetGod_ = 0;
  clear_has_resetGod();
}
inline ::google::protobuf::int32 VIPInfo::resetGod() const {
  return resetGod_;
}
inline void VIPInfo::set_resetGod(::google::protobuf::int32 value) {
  set_has_resetGod();
  resetGod_ = value;
}

// optional bool clearGodCD = 11;
inline bool VIPInfo::has_clearGodCD() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VIPInfo::set_has_clearGodCD() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VIPInfo::clear_has_clearGodCD() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VIPInfo::clear_clearGodCD() {
  clearGodCD_ = false;
  clear_has_clearGodCD();
}
inline bool VIPInfo::clearGodCD() const {
  return clearGodCD_;
}
inline void VIPInfo::set_clearGodCD(bool value) {
  set_has_clearGodCD();
  clearGodCD_ = value;
}

// optional int32 pic = 12;
inline bool VIPInfo::has_pic() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VIPInfo::set_has_pic() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VIPInfo::clear_has_pic() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VIPInfo::clear_pic() {
  pic_ = 0;
  clear_has_pic();
}
inline ::google::protobuf::int32 VIPInfo::pic() const {
  return pic_;
}
inline void VIPInfo::set_pic(::google::protobuf::int32 value) {
  set_has_pic();
  pic_ = value;
}

// optional int32 buyDurability = 13;
inline bool VIPInfo::has_buyDurability() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VIPInfo::set_has_buyDurability() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VIPInfo::clear_has_buyDurability() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VIPInfo::clear_buyDurability() {
  buyDurability_ = 0;
  clear_has_buyDurability();
}
inline ::google::protobuf::int32 VIPInfo::buyDurability() const {
  return buyDurability_;
}
inline void VIPInfo::set_buyDurability(::google::protobuf::int32 value) {
  set_has_buyDurability();
  buyDurability_ = value;
}

// optional int32 transformCount = 14;
inline bool VIPInfo::has_transformCount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VIPInfo::set_has_transformCount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VIPInfo::clear_has_transformCount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VIPInfo::clear_transformCount() {
  transformCount_ = 0;
  clear_has_transformCount();
}
inline ::google::protobuf::int32 VIPInfo::transformCount() const {
  return transformCount_;
}
inline void VIPInfo::set_transformCount(::google::protobuf::int32 value) {
  set_has_transformCount();
  transformCount_ = value;
}

// optional bool quickFight = 15;
inline bool VIPInfo::has_quickFight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VIPInfo::set_has_quickFight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VIPInfo::clear_has_quickFight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VIPInfo::clear_quickFight() {
  quickFight_ = false;
  clear_has_quickFight();
}
inline bool VIPInfo::quickFight() const {
  return quickFight_;
}
inline void VIPInfo::set_quickFight(bool value) {
  set_has_quickFight();
  quickFight_ = value;
}

// optional bool quickSell = 16;
inline bool VIPInfo::has_quickSell() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VIPInfo::set_has_quickSell() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VIPInfo::clear_has_quickSell() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VIPInfo::clear_quickSell() {
  quickSell_ = false;
  clear_has_quickSell();
}
inline bool VIPInfo::quickSell() const {
  return quickSell_;
}
inline void VIPInfo::set_quickSell(bool value) {
  set_has_quickSell();
  quickSell_ = value;
}

// optional bool clearQuickFightCD = 17;
inline bool VIPInfo::has_clearQuickFightCD() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VIPInfo::set_has_clearQuickFightCD() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VIPInfo::clear_has_clearQuickFightCD() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VIPInfo::clear_clearQuickFightCD() {
  clearQuickFightCD_ = false;
  clear_has_clearQuickFightCD();
}
inline bool VIPInfo::clearQuickFightCD() const {
  return clearQuickFightCD_;
}
inline void VIPInfo::set_clearQuickFightCD(bool value) {
  set_has_clearQuickFightCD();
  clearQuickFightCD_ = value;
}

// optional int32 mulTowerHireCount = 18;
inline bool VIPInfo::has_mulTowerHireCount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VIPInfo::set_has_mulTowerHireCount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VIPInfo::clear_has_mulTowerHireCount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VIPInfo::clear_mulTowerHireCount() {
  mulTowerHireCount_ = 0;
  clear_has_mulTowerHireCount();
}
inline ::google::protobuf::int32 VIPInfo::mulTowerHireCount() const {
  return mulTowerHireCount_;
}
inline void VIPInfo::set_mulTowerHireCount(::google::protobuf::int32 value) {
  set_has_mulTowerHireCount();
  mulTowerHireCount_ = value;
}

// optional int32 towerResetCount = 19;
inline bool VIPInfo::has_towerResetCount() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VIPInfo::set_has_towerResetCount() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VIPInfo::clear_has_towerResetCount() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VIPInfo::clear_towerResetCount() {
  towerResetCount_ = 0;
  clear_has_towerResetCount();
}
inline ::google::protobuf::int32 VIPInfo::towerResetCount() const {
  return towerResetCount_;
}
inline void VIPInfo::set_towerResetCount(::google::protobuf::int32 value) {
  set_has_towerResetCount();
  towerResetCount_ = value;
}

// optional int32 moneyTreeCount = 20;
inline bool VIPInfo::has_moneyTreeCount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VIPInfo::set_has_moneyTreeCount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VIPInfo::clear_has_moneyTreeCount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VIPInfo::clear_moneyTreeCount() {
  moneyTreeCount_ = 0;
  clear_has_moneyTreeCount();
}
inline ::google::protobuf::int32 VIPInfo::moneyTreeCount() const {
  return moneyTreeCount_;
}
inline void VIPInfo::set_moneyTreeCount(::google::protobuf::int32 value) {
  set_has_moneyTreeCount();
  moneyTreeCount_ = value;
}

// optional int32 durabilityDelta = 21;
inline bool VIPInfo::has_durabilityDelta() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VIPInfo::set_has_durabilityDelta() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VIPInfo::clear_has_durabilityDelta() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VIPInfo::clear_durabilityDelta() {
  durabilityDelta_ = 0;
  clear_has_durabilityDelta();
}
inline ::google::protobuf::int32 VIPInfo::durabilityDelta() const {
  return durabilityDelta_;
}
inline void VIPInfo::set_durabilityDelta(::google::protobuf::int32 value) {
  set_has_durabilityDelta();
  durabilityDelta_ = value;
}

// optional int32 survive = 22;
inline bool VIPInfo::has_survive() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void VIPInfo::set_has_survive() {
  _has_bits_[0] |= 0x00100000u;
}
inline void VIPInfo::clear_has_survive() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void VIPInfo::clear_survive() {
  survive_ = 0;
  clear_has_survive();
}
inline ::google::protobuf::int32 VIPInfo::survive() const {
  return survive_;
}
inline void VIPInfo::set_survive(::google::protobuf::int32 value) {
  set_has_survive();
  survive_ = value;
}

// optional int32 hero = 23;
inline bool VIPInfo::has_hero() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void VIPInfo::set_has_hero() {
  _has_bits_[0] |= 0x00200000u;
}
inline void VIPInfo::clear_has_hero() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void VIPInfo::clear_hero() {
  hero_ = 0;
  clear_has_hero();
}
inline ::google::protobuf::int32 VIPInfo::hero() const {
  return hero_;
}
inline void VIPInfo::set_hero(::google::protobuf::int32 value) {
  set_has_hero();
  hero_ = value;
}

// optional int32 fubenCount = 24;
inline bool VIPInfo::has_fubenCount() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void VIPInfo::set_has_fubenCount() {
  _has_bits_[0] |= 0x00400000u;
}
inline void VIPInfo::clear_has_fubenCount() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void VIPInfo::clear_fubenCount() {
  fubenCount_ = 0;
  clear_has_fubenCount();
}
inline ::google::protobuf::int32 VIPInfo::fubenCount() const {
  return fubenCount_;
}
inline void VIPInfo::set_fubenCount(::google::protobuf::int32 value) {
  set_has_fubenCount();
  fubenCount_ = value;
}

// -------------------------------------------------------------------

// AllVIPInfo

// repeated .VIPInfo vipInfo = 1;
inline int AllVIPInfo::vipInfo_size() const {
  return vipInfo_.size();
}
inline void AllVIPInfo::clear_vipInfo() {
  vipInfo_.Clear();
}
inline const ::VIPInfo& AllVIPInfo::vipInfo(int index) const {
  return vipInfo_.Get(index);
}
inline ::VIPInfo* AllVIPInfo::mutable_vipInfo(int index) {
  return vipInfo_.Mutable(index);
}
inline ::VIPInfo* AllVIPInfo::add_vipInfo() {
  return vipInfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VIPInfo >&
AllVIPInfo::vipInfo() const {
  return vipInfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::VIPInfo >*
AllVIPInfo::mutable_vipInfo() {
  return &vipInfo_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VIPInfo_2eproto__INCLUDED

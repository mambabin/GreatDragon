// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PetHalo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_PetHaloInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_PetHaloInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_AllPetHaloInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_AllPetHaloInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PetHalo_2eproto() {
  protobuf_AddDesc_PetHalo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PetHalo.proto");
  GOOGLE_CHECK(file != NULL);
  PB_PetHaloInfo_descriptor_ = file->message_type(0);
  static const int PB_PetHaloInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, propertieType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, propertyValue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, maxToughness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, successRate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, requiredGoodsID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, GoodsCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, Gold_),
  };
  PB_PetHaloInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_PetHaloInfo_descriptor_,
      PB_PetHaloInfo::default_instance_,
      PB_PetHaloInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_PetHaloInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_PetHaloInfo));
  PB_AllPetHaloInfo_descriptor_ = file->message_type(1);
  static const int PB_AllPetHaloInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllPetHaloInfo, info_),
  };
  PB_AllPetHaloInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_AllPetHaloInfo_descriptor_,
      PB_AllPetHaloInfo::default_instance_,
      PB_AllPetHaloInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllPetHaloInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllPetHaloInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_AllPetHaloInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PetHalo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_PetHaloInfo_descriptor_, &PB_PetHaloInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_AllPetHaloInfo_descriptor_, &PB_AllPetHaloInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PetHalo_2eproto() {
  delete PB_PetHaloInfo::default_instance_;
  delete PB_PetHaloInfo_reflection_;
  delete PB_AllPetHaloInfo::default_instance_;
  delete PB_AllPetHaloInfo_reflection_;
}

void protobuf_AddDesc_PetHalo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rPetHalo.proto\"\263\001\n\016PB_PetHaloInfo\022\025\n\rpr"
    "opertieType\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\025\n\rprop"
    "ertyValue\030\003 \001(\005\022\024\n\014maxToughness\030\004 \001(\005\022\023\n"
    "\013successRate\030\005 \001(\005\022\027\n\017requiredGoodsID\030\006 "
    "\001(\005\022\022\n\nGoodsCount\030\007 \001(\005\022\014\n\004Gold\030\010 \001(\005\"2\n"
    "\021PB_AllPetHaloInfo\022\035\n\004info\030\001 \003(\0132\017.PB_Pe"
    "tHaloInfo", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PetHalo.proto", &protobuf_RegisterTypes);
  PB_PetHaloInfo::default_instance_ = new PB_PetHaloInfo();
  PB_AllPetHaloInfo::default_instance_ = new PB_AllPetHaloInfo();
  PB_PetHaloInfo::default_instance_->InitAsDefaultInstance();
  PB_AllPetHaloInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PetHalo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PetHalo_2eproto {
  StaticDescriptorInitializer_PetHalo_2eproto() {
    protobuf_AddDesc_PetHalo_2eproto();
  }
} static_descriptor_initializer_PetHalo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PB_PetHaloInfo::kPropertieTypeFieldNumber;
const int PB_PetHaloInfo::kLevelFieldNumber;
const int PB_PetHaloInfo::kPropertyValueFieldNumber;
const int PB_PetHaloInfo::kMaxToughnessFieldNumber;
const int PB_PetHaloInfo::kSuccessRateFieldNumber;
const int PB_PetHaloInfo::kRequiredGoodsIDFieldNumber;
const int PB_PetHaloInfo::kGoodsCountFieldNumber;
const int PB_PetHaloInfo::kGoldFieldNumber;
#endif  // !_MSC_VER

PB_PetHaloInfo::PB_PetHaloInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_PetHaloInfo::InitAsDefaultInstance() {
}

PB_PetHaloInfo::PB_PetHaloInfo(const PB_PetHaloInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_PetHaloInfo::SharedCtor() {
  _cached_size_ = 0;
  propertieType_ = 0;
  level_ = 0;
  propertyValue_ = 0;
  maxToughness_ = 0;
  successRate_ = 0;
  requiredGoodsID_ = 0;
  GoodsCount_ = 0;
  Gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_PetHaloInfo::~PB_PetHaloInfo() {
  SharedDtor();
}

void PB_PetHaloInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_PetHaloInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_PetHaloInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_PetHaloInfo_descriptor_;
}

const PB_PetHaloInfo& PB_PetHaloInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetHalo_2eproto();  return *default_instance_;
}

PB_PetHaloInfo* PB_PetHaloInfo::default_instance_ = NULL;

PB_PetHaloInfo* PB_PetHaloInfo::New() const {
  return new PB_PetHaloInfo;
}

void PB_PetHaloInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propertieType_ = 0;
    level_ = 0;
    propertyValue_ = 0;
    maxToughness_ = 0;
    successRate_ = 0;
    requiredGoodsID_ = 0;
    GoodsCount_ = 0;
    Gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_PetHaloInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 propertieType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertieType_)));
          set_has_propertieType();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_propertyValue;
        break;
      }
      
      // optional int32 propertyValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propertyValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propertyValue_)));
          set_has_propertyValue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxToughness;
        break;
      }
      
      // optional int32 maxToughness = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxToughness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxToughness_)));
          set_has_maxToughness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_successRate;
        break;
      }
      
      // optional int32 successRate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_successRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &successRate_)));
          set_has_successRate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_requiredGoodsID;
        break;
      }
      
      // optional int32 requiredGoodsID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredGoodsID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredGoodsID_)));
          set_has_requiredGoodsID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_GoodsCount;
        break;
      }
      
      // optional int32 GoodsCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoodsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &GoodsCount_)));
          set_has_GoodsCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Gold;
        break;
      }
      
      // optional int32 Gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Gold_)));
          set_has_Gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_PetHaloInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 propertieType = 1;
  if (has_propertieType()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->propertieType(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 propertyValue = 3;
  if (has_propertyValue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->propertyValue(), output);
  }
  
  // optional int32 maxToughness = 4;
  if (has_maxToughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxToughness(), output);
  }
  
  // optional int32 successRate = 5;
  if (has_successRate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->successRate(), output);
  }
  
  // optional int32 requiredGoodsID = 6;
  if (has_requiredGoodsID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->requiredGoodsID(), output);
  }
  
  // optional int32 GoodsCount = 7;
  if (has_GoodsCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->GoodsCount(), output);
  }
  
  // optional int32 Gold = 8;
  if (has_Gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->Gold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_PetHaloInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 propertieType = 1;
  if (has_propertieType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->propertieType(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 propertyValue = 3;
  if (has_propertyValue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->propertyValue(), target);
  }
  
  // optional int32 maxToughness = 4;
  if (has_maxToughness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxToughness(), target);
  }
  
  // optional int32 successRate = 5;
  if (has_successRate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->successRate(), target);
  }
  
  // optional int32 requiredGoodsID = 6;
  if (has_requiredGoodsID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->requiredGoodsID(), target);
  }
  
  // optional int32 GoodsCount = 7;
  if (has_GoodsCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->GoodsCount(), target);
  }
  
  // optional int32 Gold = 8;
  if (has_Gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->Gold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_PetHaloInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 propertieType = 1;
    if (has_propertieType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertieType());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 propertyValue = 3;
    if (has_propertyValue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propertyValue());
    }
    
    // optional int32 maxToughness = 4;
    if (has_maxToughness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxToughness());
    }
    
    // optional int32 successRate = 5;
    if (has_successRate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->successRate());
    }
    
    // optional int32 requiredGoodsID = 6;
    if (has_requiredGoodsID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredGoodsID());
    }
    
    // optional int32 GoodsCount = 7;
    if (has_GoodsCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->GoodsCount());
    }
    
    // optional int32 Gold = 8;
    if (has_Gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->Gold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_PetHaloInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_PetHaloInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_PetHaloInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_PetHaloInfo::MergeFrom(const PB_PetHaloInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propertieType()) {
      set_propertieType(from.propertieType());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_propertyValue()) {
      set_propertyValue(from.propertyValue());
    }
    if (from.has_maxToughness()) {
      set_maxToughness(from.maxToughness());
    }
    if (from.has_successRate()) {
      set_successRate(from.successRate());
    }
    if (from.has_requiredGoodsID()) {
      set_requiredGoodsID(from.requiredGoodsID());
    }
    if (from.has_GoodsCount()) {
      set_GoodsCount(from.GoodsCount());
    }
    if (from.has_Gold()) {
      set_Gold(from.Gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_PetHaloInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_PetHaloInfo::CopyFrom(const PB_PetHaloInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_PetHaloInfo::IsInitialized() const {
  
  return true;
}

void PB_PetHaloInfo::Swap(PB_PetHaloInfo* other) {
  if (other != this) {
    std::swap(propertieType_, other->propertieType_);
    std::swap(level_, other->level_);
    std::swap(propertyValue_, other->propertyValue_);
    std::swap(maxToughness_, other->maxToughness_);
    std::swap(successRate_, other->successRate_);
    std::swap(requiredGoodsID_, other->requiredGoodsID_);
    std::swap(GoodsCount_, other->GoodsCount_);
    std::swap(Gold_, other->Gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_PetHaloInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_PetHaloInfo_descriptor_;
  metadata.reflection = PB_PetHaloInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_AllPetHaloInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

PB_AllPetHaloInfo::PB_AllPetHaloInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_AllPetHaloInfo::InitAsDefaultInstance() {
}

PB_AllPetHaloInfo::PB_AllPetHaloInfo(const PB_AllPetHaloInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_AllPetHaloInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_AllPetHaloInfo::~PB_AllPetHaloInfo() {
  SharedDtor();
}

void PB_AllPetHaloInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_AllPetHaloInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_AllPetHaloInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AllPetHaloInfo_descriptor_;
}

const PB_AllPetHaloInfo& PB_AllPetHaloInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetHalo_2eproto();  return *default_instance_;
}

PB_AllPetHaloInfo* PB_AllPetHaloInfo::default_instance_ = NULL;

PB_AllPetHaloInfo* PB_AllPetHaloInfo::New() const {
  return new PB_AllPetHaloInfo;
}

void PB_AllPetHaloInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_AllPetHaloInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_PetHaloInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_AllPetHaloInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_PetHaloInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_AllPetHaloInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_PetHaloInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_AllPetHaloInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_PetHaloInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_AllPetHaloInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_AllPetHaloInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_AllPetHaloInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_AllPetHaloInfo::MergeFrom(const PB_AllPetHaloInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_AllPetHaloInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_AllPetHaloInfo::CopyFrom(const PB_AllPetHaloInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_AllPetHaloInfo::IsInitialized() const {
  
  return true;
}

void PB_AllPetHaloInfo::Swap(PB_AllPetHaloInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_AllPetHaloInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_AllPetHaloInfo_descriptor_;
  metadata.reflection = PB_AllPetHaloInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NoticeInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NoticeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NoticeInfo_BtnFunc_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllNotice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NoticeInfo_2eproto() {
  protobuf_AddDesc_NoticeInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NoticeInfo.proto");
  GOOGLE_CHECK(file != NULL);
  NoticeInfo_descriptor_ = file->message_type(0);
  static const int NoticeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeInfo, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeInfo, btnFunc_),
  };
  NoticeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoticeInfo_descriptor_,
      NoticeInfo::default_instance_,
      NoticeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoticeInfo));
  NoticeInfo_BtnFunc_descriptor_ = NoticeInfo_descriptor_->enum_type(0);
  AllNotice_descriptor_ = file->message_type(1);
  static const int AllNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllNotice, allNotice_),
  };
  AllNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllNotice_descriptor_,
      AllNotice::default_instance_,
      AllNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllNotice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NoticeInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoticeInfo_descriptor_, &NoticeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllNotice_descriptor_, &AllNotice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NoticeInfo_2eproto() {
  delete NoticeInfo::default_instance_;
  delete NoticeInfo_reflection_;
  delete AllNotice::default_instance_;
  delete AllNotice_reflection_;
}

void protobuf_AddDesc_NoticeInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020NoticeInfo.proto\"\313\001\n\nNoticeInfo\022\014\n\004nam"
    "e\030\001 \001(\t\022\017\n\007context\030\002 \001(\t\022$\n\007btnFunc\030\003 \001("
    "\0162\023.NoticeInfo.BtnFunc\"x\n\007BtnFunc\022\010\n\004NON"
    "E\020\000\022\r\n\tUI_ONLINE\020\001\022\026\n\022UI_SIGNIN_CONTINUE"
    "\020\002\022\023\n\017UI_SIGNIN_TOTAL\020\003\022\014\n\010UI_LUCKY\020\004\022\013\n"
    "\007UI_FOOD\020\005\022\014\n\010UI_VCOIN\020\006\"+\n\tAllNotice\022\036\n"
    "\tallNotice\030\001 \003(\0132\013.NoticeInfo", 269);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NoticeInfo.proto", &protobuf_RegisterTypes);
  NoticeInfo::default_instance_ = new NoticeInfo();
  AllNotice::default_instance_ = new AllNotice();
  NoticeInfo::default_instance_->InitAsDefaultInstance();
  AllNotice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NoticeInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NoticeInfo_2eproto {
  StaticDescriptorInitializer_NoticeInfo_2eproto() {
    protobuf_AddDesc_NoticeInfo_2eproto();
  }
} static_descriptor_initializer_NoticeInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* NoticeInfo_BtnFunc_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeInfo_BtnFunc_descriptor_;
}
bool NoticeInfo_BtnFunc_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NoticeInfo_BtnFunc NoticeInfo::NONE;
const NoticeInfo_BtnFunc NoticeInfo::UI_ONLINE;
const NoticeInfo_BtnFunc NoticeInfo::UI_SIGNIN_CONTINUE;
const NoticeInfo_BtnFunc NoticeInfo::UI_SIGNIN_TOTAL;
const NoticeInfo_BtnFunc NoticeInfo::UI_LUCKY;
const NoticeInfo_BtnFunc NoticeInfo::UI_FOOD;
const NoticeInfo_BtnFunc NoticeInfo::UI_VCOIN;
const NoticeInfo_BtnFunc NoticeInfo::BtnFunc_MIN;
const NoticeInfo_BtnFunc NoticeInfo::BtnFunc_MAX;
const int NoticeInfo::BtnFunc_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NoticeInfo::kNameFieldNumber;
const int NoticeInfo::kContextFieldNumber;
const int NoticeInfo::kBtnFuncFieldNumber;
#endif  // !_MSC_VER

NoticeInfo::NoticeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoticeInfo::InitAsDefaultInstance() {
}

NoticeInfo::NoticeInfo(const NoticeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoticeInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  btnFunc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeInfo::~NoticeInfo() {
  SharedDtor();
}

void NoticeInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (context_ != &::google::protobuf::internal::kEmptyString) {
    delete context_;
  }
  if (this != default_instance_) {
  }
}

void NoticeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeInfo_descriptor_;
}

const NoticeInfo& NoticeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NoticeInfo_2eproto();  return *default_instance_;
}

NoticeInfo* NoticeInfo::default_instance_ = NULL;

NoticeInfo* NoticeInfo::New() const {
  return new NoticeInfo;
}

void NoticeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::kEmptyString) {
        context_->clear();
      }
    }
    btnFunc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoticeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_context;
        break;
      }
      
      // optional string context = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_btnFunc;
        break;
      }
      
      // optional .NoticeInfo.BtnFunc btnFunc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btnFunc:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NoticeInfo_BtnFunc_IsValid(value)) {
            set_btnFunc(static_cast< ::NoticeInfo_BtnFunc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoticeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->context(), output);
  }
  
  // optional .NoticeInfo.BtnFunc btnFunc = 3;
  if (has_btnFunc()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->btnFunc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoticeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->context(), target);
  }
  
  // optional .NoticeInfo.BtnFunc btnFunc = 3;
  if (has_btnFunc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->btnFunc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoticeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }
    
    // optional .NoticeInfo.BtnFunc btnFunc = 3;
    if (has_btnFunc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->btnFunc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoticeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoticeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoticeInfo::MergeFrom(const NoticeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_btnFunc()) {
      set_btnFunc(from.btnFunc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoticeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeInfo::CopyFrom(const NoticeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeInfo::IsInitialized() const {
  
  return true;
}

void NoticeInfo::Swap(NoticeInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(context_, other->context_);
    std::swap(btnFunc_, other->btnFunc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoticeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeInfo_descriptor_;
  metadata.reflection = NoticeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllNotice::kAllNoticeFieldNumber;
#endif  // !_MSC_VER

AllNotice::AllNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllNotice::InitAsDefaultInstance() {
}

AllNotice::AllNotice(const AllNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllNotice::~AllNotice() {
  SharedDtor();
}

void AllNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllNotice_descriptor_;
}

const AllNotice& AllNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NoticeInfo_2eproto();  return *default_instance_;
}

AllNotice* AllNotice::default_instance_ = NULL;

AllNotice* AllNotice::New() const {
  return new AllNotice;
}

void AllNotice::Clear() {
  allNotice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NoticeInfo allNotice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allNotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allNotice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allNotice;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NoticeInfo allNotice = 1;
  for (int i = 0; i < this->allNotice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allNotice(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NoticeInfo allNotice = 1;
  for (int i = 0; i < this->allNotice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allNotice(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllNotice::ByteSize() const {
  int total_size = 0;
  
  // repeated .NoticeInfo allNotice = 1;
  total_size += 1 * this->allNotice_size();
  for (int i = 0; i < this->allNotice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allNotice(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllNotice::MergeFrom(const AllNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  allNotice_.MergeFrom(from.allNotice_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllNotice::CopyFrom(const AllNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllNotice::IsInitialized() const {
  
  return true;
}

void AllNotice::Swap(AllNotice* other) {
  if (other != this) {
    allNotice_.Swap(&other->allNotice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllNotice_descriptor_;
  metadata.reflection = AllNotice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

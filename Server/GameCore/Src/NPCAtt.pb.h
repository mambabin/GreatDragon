// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NPCAtt.proto

#ifndef PROTOBUF_NPCAtt_2eproto__INCLUDED
#define PROTOBUF_NPCAtt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "RoleAtt.pb.h"
#include "EquipmentInfo.pb.h"
#include "FuncInfo.pb.h"
#include "FightInfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NPCAtt_2eproto();
void protobuf_AssignDesc_NPCAtt_2eproto();
void protobuf_ShutdownFile_NPCAtt_2eproto();

class PB_NPCAtt;
class PB_AllNPCs;
class PB_AllPets;

enum PB_NPCAtt_ColorType {
  PB_NPCAtt_ColorType_WHITE = 0,
  PB_NPCAtt_ColorType_GREEN = 1,
  PB_NPCAtt_ColorType_BLUE = 2,
  PB_NPCAtt_ColorType_YELLOW = 3,
  PB_NPCAtt_ColorType_RED = 4
};
bool PB_NPCAtt_ColorType_IsValid(int value);
const PB_NPCAtt_ColorType PB_NPCAtt_ColorType_ColorType_MIN = PB_NPCAtt_ColorType_WHITE;
const PB_NPCAtt_ColorType PB_NPCAtt_ColorType_ColorType_MAX = PB_NPCAtt_ColorType_RED;
const int PB_NPCAtt_ColorType_ColorType_ARRAYSIZE = PB_NPCAtt_ColorType_ColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_NPCAtt_ColorType_descriptor();
inline const ::std::string& PB_NPCAtt_ColorType_Name(PB_NPCAtt_ColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_NPCAtt_ColorType_descriptor(), value);
}
inline bool PB_NPCAtt_ColorType_Parse(
    const ::std::string& name, PB_NPCAtt_ColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_NPCAtt_ColorType>(
    PB_NPCAtt_ColorType_descriptor(), name, value);
}
// ===================================================================

class PB_NPCAtt : public ::google::protobuf::Message {
 public:
  PB_NPCAtt();
  virtual ~PB_NPCAtt();
  
  PB_NPCAtt(const PB_NPCAtt& from);
  
  inline PB_NPCAtt& operator=(const PB_NPCAtt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_NPCAtt& default_instance();
  
  void Swap(PB_NPCAtt* other);
  
  // implements Message ----------------------------------------------
  
  PB_NPCAtt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_NPCAtt& from);
  void MergeFrom(const PB_NPCAtt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PB_NPCAtt_ColorType ColorType;
  static const ColorType WHITE = PB_NPCAtt_ColorType_WHITE;
  static const ColorType GREEN = PB_NPCAtt_ColorType_GREEN;
  static const ColorType BLUE = PB_NPCAtt_ColorType_BLUE;
  static const ColorType YELLOW = PB_NPCAtt_ColorType_YELLOW;
  static const ColorType RED = PB_NPCAtt_ColorType_RED;
  static inline bool ColorType_IsValid(int value) {
    return PB_NPCAtt_ColorType_IsValid(value);
  }
  static const ColorType ColorType_MIN =
    PB_NPCAtt_ColorType_ColorType_MIN;
  static const ColorType ColorType_MAX =
    PB_NPCAtt_ColorType_ColorType_MAX;
  static const int ColorType_ARRAYSIZE =
    PB_NPCAtt_ColorType_ColorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ColorType_descriptor() {
    return PB_NPCAtt_ColorType_descriptor();
  }
  static inline const ::std::string& ColorType_Name(ColorType value) {
    return PB_NPCAtt_ColorType_Name(value);
  }
  static inline bool ColorType_Parse(const ::std::string& name,
      ColorType* value) {
    return PB_NPCAtt_ColorType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .PB_RoleAtt att = 2;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline const ::PB_RoleAtt& att() const;
  inline ::PB_RoleAtt* mutable_att();
  inline ::PB_RoleAtt* release_att();
  
  // optional int32 pic = 3;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 3;
  inline ::google::protobuf::int32 pic() const;
  inline void set_pic(::google::protobuf::int32 value);
  
  // optional string desc = 4;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 4;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // optional .PB_FuncAtt funcAtt = 5;
  inline bool has_funcAtt() const;
  inline void clear_funcAtt();
  static const int kFuncAttFieldNumber = 5;
  inline const ::PB_FuncAtt& funcAtt() const;
  inline ::PB_FuncAtt* mutable_funcAtt();
  inline ::PB_FuncAtt* release_funcAtt();
  
  // optional int32 dropID = 6;
  inline bool has_dropID() const;
  inline void clear_dropID();
  static const int kDropIDFieldNumber = 6;
  inline ::google::protobuf::int32 dropID() const;
  inline void set_dropID(::google::protobuf::int32 value);
  
  // repeated int32 peddleAudio = 7;
  inline int peddleAudio_size() const;
  inline void clear_peddleAudio();
  static const int kPeddleAudioFieldNumber = 7;
  inline ::google::protobuf::int32 peddleAudio(int index) const;
  inline void set_peddleAudio(int index, ::google::protobuf::int32 value);
  inline void add_peddleAudio(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      peddleAudio() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_peddleAudio();
  
  // optional float peddleMaxDistance = 8;
  inline bool has_peddleMaxDistance() const;
  inline void clear_peddleMaxDistance();
  static const int kPeddleMaxDistanceFieldNumber = 8;
  inline float peddleMaxDistance() const;
  inline void set_peddleMaxDistance(float value);
  
  // optional int32 peddleMinInterval = 9;
  inline bool has_peddleMinInterval() const;
  inline void clear_peddleMinInterval();
  static const int kPeddleMinIntervalFieldNumber = 9;
  inline ::google::protobuf::int32 peddleMinInterval() const;
  inline void set_peddleMinInterval(::google::protobuf::int32 value);
  
  // optional int32 peddleMaxInterval = 10;
  inline bool has_peddleMaxInterval() const;
  inline void clear_peddleMaxInterval();
  static const int kPeddleMaxIntervalFieldNumber = 10;
  inline ::google::protobuf::int32 peddleMaxInterval() const;
  inline void set_peddleMaxInterval(::google::protobuf::int32 value);
  
  // repeated int32 talkAudio = 11;
  inline int talkAudio_size() const;
  inline void clear_talkAudio();
  static const int kTalkAudioFieldNumber = 11;
  inline ::google::protobuf::int32 talkAudio(int index) const;
  inline void set_talkAudio(int index, ::google::protobuf::int32 value);
  inline void add_talkAudio(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      talkAudio() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_talkAudio();
  
  // optional int32 bornTime = 12;
  inline bool has_bornTime() const;
  inline void clear_bornTime();
  static const int kBornTimeFieldNumber = 12;
  inline ::google::protobuf::int32 bornTime() const;
  inline void set_bornTime(::google::protobuf::int32 value);
  
  // optional int32 shockDelay = 13;
  inline bool has_shockDelay() const;
  inline void clear_shockDelay();
  static const int kShockDelayFieldNumber = 13;
  inline ::google::protobuf::int32 shockDelay() const;
  inline void set_shockDelay(::google::protobuf::int32 value);
  
  // optional int32 shockTime = 14;
  inline bool has_shockTime() const;
  inline void clear_shockTime();
  static const int kShockTimeFieldNumber = 14;
  inline ::google::protobuf::int32 shockTime() const;
  inline void set_shockTime(::google::protobuf::int32 value);
  
  // optional int32 bornEffect = 15;
  inline bool has_bornEffect() const;
  inline void clear_bornEffect();
  static const int kBornEffectFieldNumber = 15;
  inline ::google::protobuf::int32 bornEffect() const;
  inline void set_bornEffect(::google::protobuf::int32 value);
  
  // optional int32 bornEffectTime = 16;
  inline bool has_bornEffectTime() const;
  inline void clear_bornEffectTime();
  static const int kBornEffectTimeFieldNumber = 16;
  inline ::google::protobuf::int32 bornEffectTime() const;
  inline void set_bornEffectTime(::google::protobuf::int32 value);
  
  // optional float specialPercent = 17;
  inline bool has_specialPercent() const;
  inline void clear_specialPercent();
  static const int kSpecialPercentFieldNumber = 17;
  inline float specialPercent() const;
  inline void set_specialPercent(float value);
  
  // optional int32 bearAudio = 18;
  inline bool has_bearAudio() const;
  inline void clear_bearAudio();
  static const int kBearAudioFieldNumber = 18;
  inline ::google::protobuf::int32 bearAudio() const;
  inline void set_bearAudio(::google::protobuf::int32 value);
  
  // optional int32 dieAudio = 19;
  inline bool has_dieAudio() const;
  inline void clear_dieAudio();
  static const int kDieAudioFieldNumber = 19;
  inline ::google::protobuf::int32 dieAudio() const;
  inline void set_dieAudio(::google::protobuf::int32 value);
  
  // optional .PB_NPCAtt.ColorType color = 20;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 20;
  inline ::PB_NPCAtt_ColorType color() const;
  inline void set_color(::PB_NPCAtt_ColorType value);
  
  // optional float hue = 21;
  inline bool has_hue() const;
  inline void clear_hue();
  static const int kHueFieldNumber = 21;
  inline float hue() const;
  inline void set_hue(float value);
  
  // repeated .PB_EquipAsset equips = 22;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 22;
  inline const ::PB_EquipAsset& equips(int index) const;
  inline ::PB_EquipAsset* mutable_equips(int index);
  inline ::PB_EquipAsset* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset >*
      mutable_equips();
  
  // optional bool newSpecial = 23;
  inline bool has_newSpecial() const;
  inline void clear_newSpecial();
  static const int kNewSpecialFieldNumber = 23;
  inline bool newSpecial() const;
  inline void set_newSpecial(bool value);
  
  // optional int32 type = 24;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 24;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 quality = 25;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 25;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // optional int32 level = 26;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 26;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 goodsID = 27;
  inline bool has_goodsID() const;
  inline void clear_goodsID();
  static const int kGoodsIDFieldNumber = 27;
  inline ::google::protobuf::int32 goodsID() const;
  inline void set_goodsID(::google::protobuf::int32 value);
  
  // optional int32 goodsCount = 28;
  inline bool has_goodsCount() const;
  inline void clear_goodsCount();
  static const int kGoodsCountFieldNumber = 28;
  inline ::google::protobuf::int32 goodsCount() const;
  inline void set_goodsCount(::google::protobuf::int32 value);
  
  // optional int32 dieEffect = 29;
  inline bool has_dieEffect() const;
  inline void clear_dieEffect();
  static const int kDieEffectFieldNumber = 29;
  inline ::google::protobuf::int32 dieEffect() const;
  inline void set_dieEffect(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PB_NPCAtt)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_pic();
  inline void clear_has_pic();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_funcAtt();
  inline void clear_has_funcAtt();
  inline void set_has_dropID();
  inline void clear_has_dropID();
  inline void set_has_peddleMaxDistance();
  inline void clear_has_peddleMaxDistance();
  inline void set_has_peddleMinInterval();
  inline void clear_has_peddleMinInterval();
  inline void set_has_peddleMaxInterval();
  inline void clear_has_peddleMaxInterval();
  inline void set_has_bornTime();
  inline void clear_has_bornTime();
  inline void set_has_shockDelay();
  inline void clear_has_shockDelay();
  inline void set_has_shockTime();
  inline void clear_has_shockTime();
  inline void set_has_bornEffect();
  inline void clear_has_bornEffect();
  inline void set_has_bornEffectTime();
  inline void clear_has_bornEffectTime();
  inline void set_has_specialPercent();
  inline void clear_has_specialPercent();
  inline void set_has_bearAudio();
  inline void clear_has_bearAudio();
  inline void set_has_dieAudio();
  inline void clear_has_dieAudio();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_hue();
  inline void clear_has_hue();
  inline void set_has_newSpecial();
  inline void clear_has_newSpecial();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_goodsID();
  inline void clear_has_goodsID();
  inline void set_has_goodsCount();
  inline void clear_has_goodsCount();
  inline void set_has_dieEffect();
  inline void clear_has_dieEffect();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_RoleAtt* att_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pic_;
  ::std::string* desc_;
  ::PB_FuncAtt* funcAtt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > peddleAudio_;
  ::google::protobuf::int32 dropID_;
  float peddleMaxDistance_;
  ::google::protobuf::int32 peddleMinInterval_;
  ::google::protobuf::int32 peddleMaxInterval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > talkAudio_;
  ::google::protobuf::int32 bornTime_;
  ::google::protobuf::int32 shockDelay_;
  ::google::protobuf::int32 shockTime_;
  ::google::protobuf::int32 bornEffect_;
  ::google::protobuf::int32 bornEffectTime_;
  float specialPercent_;
  ::google::protobuf::int32 bearAudio_;
  ::google::protobuf::int32 dieAudio_;
  int color_;
  float hue_;
  ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset > equips_;
  bool newSpecial_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 goodsID_;
  ::google::protobuf::int32 goodsCount_;
  ::google::protobuf::int32 dieEffect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];
  
  friend void  protobuf_AddDesc_NPCAtt_2eproto();
  friend void protobuf_AssignDesc_NPCAtt_2eproto();
  friend void protobuf_ShutdownFile_NPCAtt_2eproto();
  
  void InitAsDefaultInstance();
  static PB_NPCAtt* default_instance_;
};
// -------------------------------------------------------------------

class PB_AllNPCs : public ::google::protobuf::Message {
 public:
  PB_AllNPCs();
  virtual ~PB_AllNPCs();
  
  PB_AllNPCs(const PB_AllNPCs& from);
  
  inline PB_AllNPCs& operator=(const PB_AllNPCs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_AllNPCs& default_instance();
  
  void Swap(PB_AllNPCs* other);
  
  // implements Message ----------------------------------------------
  
  PB_AllNPCs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_AllNPCs& from);
  void MergeFrom(const PB_AllNPCs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PB_NPCAtt npcs = 1;
  inline int npcs_size() const;
  inline void clear_npcs();
  static const int kNpcsFieldNumber = 1;
  inline const ::PB_NPCAtt& npcs(int index) const;
  inline ::PB_NPCAtt* mutable_npcs(int index);
  inline ::PB_NPCAtt* add_npcs();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >&
      npcs() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >*
      mutable_npcs();
  
  // @@protoc_insertion_point(class_scope:PB_AllNPCs)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt > npcs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NPCAtt_2eproto();
  friend void protobuf_AssignDesc_NPCAtt_2eproto();
  friend void protobuf_ShutdownFile_NPCAtt_2eproto();
  
  void InitAsDefaultInstance();
  static PB_AllNPCs* default_instance_;
};
// -------------------------------------------------------------------

class PB_AllPets : public ::google::protobuf::Message {
 public:
  PB_AllPets();
  virtual ~PB_AllPets();
  
  PB_AllPets(const PB_AllPets& from);
  
  inline PB_AllPets& operator=(const PB_AllPets& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_AllPets& default_instance();
  
  void Swap(PB_AllPets* other);
  
  // implements Message ----------------------------------------------
  
  PB_AllPets* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_AllPets& from);
  void MergeFrom(const PB_AllPets& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PB_NPCAtt pets = 1;
  inline int pets_size() const;
  inline void clear_pets();
  static const int kPetsFieldNumber = 1;
  inline const ::PB_NPCAtt& pets(int index) const;
  inline ::PB_NPCAtt* mutable_pets(int index);
  inline ::PB_NPCAtt* add_pets();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >&
      pets() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >*
      mutable_pets();
  
  // @@protoc_insertion_point(class_scope:PB_AllPets)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt > pets_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_NPCAtt_2eproto();
  friend void protobuf_AssignDesc_NPCAtt_2eproto();
  friend void protobuf_ShutdownFile_NPCAtt_2eproto();
  
  void InitAsDefaultInstance();
  static PB_AllPets* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_NPCAtt

// optional int32 id = 1;
inline bool PB_NPCAtt::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_NPCAtt::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_NPCAtt::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_NPCAtt::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PB_NPCAtt::id() const {
  return id_;
}
inline void PB_NPCAtt::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PB_RoleAtt att = 2;
inline bool PB_NPCAtt::has_att() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_NPCAtt::set_has_att() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_NPCAtt::clear_has_att() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_NPCAtt::clear_att() {
  if (att_ != NULL) att_->::PB_RoleAtt::Clear();
  clear_has_att();
}
inline const ::PB_RoleAtt& PB_NPCAtt::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::PB_RoleAtt* PB_NPCAtt::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::PB_RoleAtt;
  return att_;
}
inline ::PB_RoleAtt* PB_NPCAtt::release_att() {
  clear_has_att();
  ::PB_RoleAtt* temp = att_;
  att_ = NULL;
  return temp;
}

// optional int32 pic = 3;
inline bool PB_NPCAtt::has_pic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_NPCAtt::set_has_pic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_NPCAtt::clear_has_pic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_NPCAtt::clear_pic() {
  pic_ = 0;
  clear_has_pic();
}
inline ::google::protobuf::int32 PB_NPCAtt::pic() const {
  return pic_;
}
inline void PB_NPCAtt::set_pic(::google::protobuf::int32 value) {
  set_has_pic();
  pic_ = value;
}

// optional string desc = 4;
inline bool PB_NPCAtt::has_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_NPCAtt::set_has_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_NPCAtt::clear_has_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_NPCAtt::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& PB_NPCAtt::desc() const {
  return *desc_;
}
inline void PB_NPCAtt::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void PB_NPCAtt::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void PB_NPCAtt::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB_NPCAtt::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* PB_NPCAtt::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .PB_FuncAtt funcAtt = 5;
inline bool PB_NPCAtt::has_funcAtt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_NPCAtt::set_has_funcAtt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_NPCAtt::clear_has_funcAtt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_NPCAtt::clear_funcAtt() {
  if (funcAtt_ != NULL) funcAtt_->::PB_FuncAtt::Clear();
  clear_has_funcAtt();
}
inline const ::PB_FuncAtt& PB_NPCAtt::funcAtt() const {
  return funcAtt_ != NULL ? *funcAtt_ : *default_instance_->funcAtt_;
}
inline ::PB_FuncAtt* PB_NPCAtt::mutable_funcAtt() {
  set_has_funcAtt();
  if (funcAtt_ == NULL) funcAtt_ = new ::PB_FuncAtt;
  return funcAtt_;
}
inline ::PB_FuncAtt* PB_NPCAtt::release_funcAtt() {
  clear_has_funcAtt();
  ::PB_FuncAtt* temp = funcAtt_;
  funcAtt_ = NULL;
  return temp;
}

// optional int32 dropID = 6;
inline bool PB_NPCAtt::has_dropID() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_NPCAtt::set_has_dropID() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_NPCAtt::clear_has_dropID() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_NPCAtt::clear_dropID() {
  dropID_ = 0;
  clear_has_dropID();
}
inline ::google::protobuf::int32 PB_NPCAtt::dropID() const {
  return dropID_;
}
inline void PB_NPCAtt::set_dropID(::google::protobuf::int32 value) {
  set_has_dropID();
  dropID_ = value;
}

// repeated int32 peddleAudio = 7;
inline int PB_NPCAtt::peddleAudio_size() const {
  return peddleAudio_.size();
}
inline void PB_NPCAtt::clear_peddleAudio() {
  peddleAudio_.Clear();
}
inline ::google::protobuf::int32 PB_NPCAtt::peddleAudio(int index) const {
  return peddleAudio_.Get(index);
}
inline void PB_NPCAtt::set_peddleAudio(int index, ::google::protobuf::int32 value) {
  peddleAudio_.Set(index, value);
}
inline void PB_NPCAtt::add_peddleAudio(::google::protobuf::int32 value) {
  peddleAudio_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_NPCAtt::peddleAudio() const {
  return peddleAudio_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_NPCAtt::mutable_peddleAudio() {
  return &peddleAudio_;
}

// optional float peddleMaxDistance = 8;
inline bool PB_NPCAtt::has_peddleMaxDistance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_NPCAtt::set_has_peddleMaxDistance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_NPCAtt::clear_has_peddleMaxDistance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_NPCAtt::clear_peddleMaxDistance() {
  peddleMaxDistance_ = 0;
  clear_has_peddleMaxDistance();
}
inline float PB_NPCAtt::peddleMaxDistance() const {
  return peddleMaxDistance_;
}
inline void PB_NPCAtt::set_peddleMaxDistance(float value) {
  set_has_peddleMaxDistance();
  peddleMaxDistance_ = value;
}

// optional int32 peddleMinInterval = 9;
inline bool PB_NPCAtt::has_peddleMinInterval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_NPCAtt::set_has_peddleMinInterval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PB_NPCAtt::clear_has_peddleMinInterval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PB_NPCAtt::clear_peddleMinInterval() {
  peddleMinInterval_ = 0;
  clear_has_peddleMinInterval();
}
inline ::google::protobuf::int32 PB_NPCAtt::peddleMinInterval() const {
  return peddleMinInterval_;
}
inline void PB_NPCAtt::set_peddleMinInterval(::google::protobuf::int32 value) {
  set_has_peddleMinInterval();
  peddleMinInterval_ = value;
}

// optional int32 peddleMaxInterval = 10;
inline bool PB_NPCAtt::has_peddleMaxInterval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_NPCAtt::set_has_peddleMaxInterval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PB_NPCAtt::clear_has_peddleMaxInterval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PB_NPCAtt::clear_peddleMaxInterval() {
  peddleMaxInterval_ = 0;
  clear_has_peddleMaxInterval();
}
inline ::google::protobuf::int32 PB_NPCAtt::peddleMaxInterval() const {
  return peddleMaxInterval_;
}
inline void PB_NPCAtt::set_peddleMaxInterval(::google::protobuf::int32 value) {
  set_has_peddleMaxInterval();
  peddleMaxInterval_ = value;
}

// repeated int32 talkAudio = 11;
inline int PB_NPCAtt::talkAudio_size() const {
  return talkAudio_.size();
}
inline void PB_NPCAtt::clear_talkAudio() {
  talkAudio_.Clear();
}
inline ::google::protobuf::int32 PB_NPCAtt::talkAudio(int index) const {
  return talkAudio_.Get(index);
}
inline void PB_NPCAtt::set_talkAudio(int index, ::google::protobuf::int32 value) {
  talkAudio_.Set(index, value);
}
inline void PB_NPCAtt::add_talkAudio(::google::protobuf::int32 value) {
  talkAudio_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PB_NPCAtt::talkAudio() const {
  return talkAudio_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PB_NPCAtt::mutable_talkAudio() {
  return &talkAudio_;
}

// optional int32 bornTime = 12;
inline bool PB_NPCAtt::has_bornTime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PB_NPCAtt::set_has_bornTime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PB_NPCAtt::clear_has_bornTime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PB_NPCAtt::clear_bornTime() {
  bornTime_ = 0;
  clear_has_bornTime();
}
inline ::google::protobuf::int32 PB_NPCAtt::bornTime() const {
  return bornTime_;
}
inline void PB_NPCAtt::set_bornTime(::google::protobuf::int32 value) {
  set_has_bornTime();
  bornTime_ = value;
}

// optional int32 shockDelay = 13;
inline bool PB_NPCAtt::has_shockDelay() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PB_NPCAtt::set_has_shockDelay() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PB_NPCAtt::clear_has_shockDelay() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PB_NPCAtt::clear_shockDelay() {
  shockDelay_ = 0;
  clear_has_shockDelay();
}
inline ::google::protobuf::int32 PB_NPCAtt::shockDelay() const {
  return shockDelay_;
}
inline void PB_NPCAtt::set_shockDelay(::google::protobuf::int32 value) {
  set_has_shockDelay();
  shockDelay_ = value;
}

// optional int32 shockTime = 14;
inline bool PB_NPCAtt::has_shockTime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PB_NPCAtt::set_has_shockTime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PB_NPCAtt::clear_has_shockTime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PB_NPCAtt::clear_shockTime() {
  shockTime_ = 0;
  clear_has_shockTime();
}
inline ::google::protobuf::int32 PB_NPCAtt::shockTime() const {
  return shockTime_;
}
inline void PB_NPCAtt::set_shockTime(::google::protobuf::int32 value) {
  set_has_shockTime();
  shockTime_ = value;
}

// optional int32 bornEffect = 15;
inline bool PB_NPCAtt::has_bornEffect() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PB_NPCAtt::set_has_bornEffect() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PB_NPCAtt::clear_has_bornEffect() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PB_NPCAtt::clear_bornEffect() {
  bornEffect_ = 0;
  clear_has_bornEffect();
}
inline ::google::protobuf::int32 PB_NPCAtt::bornEffect() const {
  return bornEffect_;
}
inline void PB_NPCAtt::set_bornEffect(::google::protobuf::int32 value) {
  set_has_bornEffect();
  bornEffect_ = value;
}

// optional int32 bornEffectTime = 16;
inline bool PB_NPCAtt::has_bornEffectTime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PB_NPCAtt::set_has_bornEffectTime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PB_NPCAtt::clear_has_bornEffectTime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PB_NPCAtt::clear_bornEffectTime() {
  bornEffectTime_ = 0;
  clear_has_bornEffectTime();
}
inline ::google::protobuf::int32 PB_NPCAtt::bornEffectTime() const {
  return bornEffectTime_;
}
inline void PB_NPCAtt::set_bornEffectTime(::google::protobuf::int32 value) {
  set_has_bornEffectTime();
  bornEffectTime_ = value;
}

// optional float specialPercent = 17;
inline bool PB_NPCAtt::has_specialPercent() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PB_NPCAtt::set_has_specialPercent() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PB_NPCAtt::clear_has_specialPercent() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PB_NPCAtt::clear_specialPercent() {
  specialPercent_ = 0;
  clear_has_specialPercent();
}
inline float PB_NPCAtt::specialPercent() const {
  return specialPercent_;
}
inline void PB_NPCAtt::set_specialPercent(float value) {
  set_has_specialPercent();
  specialPercent_ = value;
}

// optional int32 bearAudio = 18;
inline bool PB_NPCAtt::has_bearAudio() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PB_NPCAtt::set_has_bearAudio() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PB_NPCAtt::clear_has_bearAudio() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PB_NPCAtt::clear_bearAudio() {
  bearAudio_ = 0;
  clear_has_bearAudio();
}
inline ::google::protobuf::int32 PB_NPCAtt::bearAudio() const {
  return bearAudio_;
}
inline void PB_NPCAtt::set_bearAudio(::google::protobuf::int32 value) {
  set_has_bearAudio();
  bearAudio_ = value;
}

// optional int32 dieAudio = 19;
inline bool PB_NPCAtt::has_dieAudio() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PB_NPCAtt::set_has_dieAudio() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PB_NPCAtt::clear_has_dieAudio() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PB_NPCAtt::clear_dieAudio() {
  dieAudio_ = 0;
  clear_has_dieAudio();
}
inline ::google::protobuf::int32 PB_NPCAtt::dieAudio() const {
  return dieAudio_;
}
inline void PB_NPCAtt::set_dieAudio(::google::protobuf::int32 value) {
  set_has_dieAudio();
  dieAudio_ = value;
}

// optional .PB_NPCAtt.ColorType color = 20;
inline bool PB_NPCAtt::has_color() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PB_NPCAtt::set_has_color() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PB_NPCAtt::clear_has_color() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PB_NPCAtt::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::PB_NPCAtt_ColorType PB_NPCAtt::color() const {
  return static_cast< ::PB_NPCAtt_ColorType >(color_);
}
inline void PB_NPCAtt::set_color(::PB_NPCAtt_ColorType value) {
  GOOGLE_DCHECK(::PB_NPCAtt_ColorType_IsValid(value));
  set_has_color();
  color_ = value;
}

// optional float hue = 21;
inline bool PB_NPCAtt::has_hue() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PB_NPCAtt::set_has_hue() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PB_NPCAtt::clear_has_hue() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PB_NPCAtt::clear_hue() {
  hue_ = 0;
  clear_has_hue();
}
inline float PB_NPCAtt::hue() const {
  return hue_;
}
inline void PB_NPCAtt::set_hue(float value) {
  set_has_hue();
  hue_ = value;
}

// repeated .PB_EquipAsset equips = 22;
inline int PB_NPCAtt::equips_size() const {
  return equips_.size();
}
inline void PB_NPCAtt::clear_equips() {
  equips_.Clear();
}
inline const ::PB_EquipAsset& PB_NPCAtt::equips(int index) const {
  return equips_.Get(index);
}
inline ::PB_EquipAsset* PB_NPCAtt::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::PB_EquipAsset* PB_NPCAtt::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset >&
PB_NPCAtt::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_EquipAsset >*
PB_NPCAtt::mutable_equips() {
  return &equips_;
}

// optional bool newSpecial = 23;
inline bool PB_NPCAtt::has_newSpecial() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PB_NPCAtt::set_has_newSpecial() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PB_NPCAtt::clear_has_newSpecial() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PB_NPCAtt::clear_newSpecial() {
  newSpecial_ = false;
  clear_has_newSpecial();
}
inline bool PB_NPCAtt::newSpecial() const {
  return newSpecial_;
}
inline void PB_NPCAtt::set_newSpecial(bool value) {
  set_has_newSpecial();
  newSpecial_ = value;
}

// optional int32 type = 24;
inline bool PB_NPCAtt::has_type() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PB_NPCAtt::set_has_type() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PB_NPCAtt::clear_has_type() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PB_NPCAtt::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PB_NPCAtt::type() const {
  return type_;
}
inline void PB_NPCAtt::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 quality = 25;
inline bool PB_NPCAtt::has_quality() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PB_NPCAtt::set_has_quality() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PB_NPCAtt::clear_has_quality() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PB_NPCAtt::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 PB_NPCAtt::quality() const {
  return quality_;
}
inline void PB_NPCAtt::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 level = 26;
inline bool PB_NPCAtt::has_level() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PB_NPCAtt::set_has_level() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PB_NPCAtt::clear_has_level() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PB_NPCAtt::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PB_NPCAtt::level() const {
  return level_;
}
inline void PB_NPCAtt::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 goodsID = 27;
inline bool PB_NPCAtt::has_goodsID() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PB_NPCAtt::set_has_goodsID() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PB_NPCAtt::clear_has_goodsID() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PB_NPCAtt::clear_goodsID() {
  goodsID_ = 0;
  clear_has_goodsID();
}
inline ::google::protobuf::int32 PB_NPCAtt::goodsID() const {
  return goodsID_;
}
inline void PB_NPCAtt::set_goodsID(::google::protobuf::int32 value) {
  set_has_goodsID();
  goodsID_ = value;
}

// optional int32 goodsCount = 28;
inline bool PB_NPCAtt::has_goodsCount() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PB_NPCAtt::set_has_goodsCount() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PB_NPCAtt::clear_has_goodsCount() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PB_NPCAtt::clear_goodsCount() {
  goodsCount_ = 0;
  clear_has_goodsCount();
}
inline ::google::protobuf::int32 PB_NPCAtt::goodsCount() const {
  return goodsCount_;
}
inline void PB_NPCAtt::set_goodsCount(::google::protobuf::int32 value) {
  set_has_goodsCount();
  goodsCount_ = value;
}

// optional int32 dieEffect = 29;
inline bool PB_NPCAtt::has_dieEffect() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PB_NPCAtt::set_has_dieEffect() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PB_NPCAtt::clear_has_dieEffect() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PB_NPCAtt::clear_dieEffect() {
  dieEffect_ = 0;
  clear_has_dieEffect();
}
inline ::google::protobuf::int32 PB_NPCAtt::dieEffect() const {
  return dieEffect_;
}
inline void PB_NPCAtt::set_dieEffect(::google::protobuf::int32 value) {
  set_has_dieEffect();
  dieEffect_ = value;
}

// -------------------------------------------------------------------

// PB_AllNPCs

// repeated .PB_NPCAtt npcs = 1;
inline int PB_AllNPCs::npcs_size() const {
  return npcs_.size();
}
inline void PB_AllNPCs::clear_npcs() {
  npcs_.Clear();
}
inline const ::PB_NPCAtt& PB_AllNPCs::npcs(int index) const {
  return npcs_.Get(index);
}
inline ::PB_NPCAtt* PB_AllNPCs::mutable_npcs(int index) {
  return npcs_.Mutable(index);
}
inline ::PB_NPCAtt* PB_AllNPCs::add_npcs() {
  return npcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >&
PB_AllNPCs::npcs() const {
  return npcs_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >*
PB_AllNPCs::mutable_npcs() {
  return &npcs_;
}

// -------------------------------------------------------------------

// PB_AllPets

// repeated .PB_NPCAtt pets = 1;
inline int PB_AllPets::pets_size() const {
  return pets_.size();
}
inline void PB_AllPets::clear_pets() {
  pets_.Clear();
}
inline const ::PB_NPCAtt& PB_AllPets::pets(int index) const {
  return pets_.Get(index);
}
inline ::PB_NPCAtt* PB_AllPets::mutable_pets(int index) {
  return pets_.Mutable(index);
}
inline ::PB_NPCAtt* PB_AllPets::add_pets() {
  return pets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >&
PB_AllPets::pets() const {
  return pets_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_NPCAtt >*
PB_AllPets::mutable_pets() {
  return &pets_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_NPCAtt_ColorType>() {
  return ::PB_NPCAtt_ColorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NPCAtt_2eproto__INCLUDED

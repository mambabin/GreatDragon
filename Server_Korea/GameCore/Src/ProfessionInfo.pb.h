// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProfessionInfo.proto

#ifndef PROTOBUF_ProfessionInfo_2eproto__INCLUDED
#define PROTOBUF_ProfessionInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "EquipmentInfo.pb.h"
#include "MovementInfo.pb.h"
#include "FightInfo.pb.h"
#include "AIInfo.pb.h"
#include "ItemInfo.pb.h"
#include "MissionInfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProfessionInfo_2eproto();
void protobuf_AssignDesc_ProfessionInfo_2eproto();
void protobuf_ShutdownFile_ProfessionInfo_2eproto();

class PB_ProfessionInfo;

enum PB_ProfessionInfo_Type {
  PB_ProfessionInfo_Type_NPC = 0,
  PB_ProfessionInfo_Type_KNIGHT = 1,
  PB_ProfessionInfo_Type_RANGER = 2,
  PB_ProfessionInfo_Type_MAGICIAN = 3
};
bool PB_ProfessionInfo_Type_IsValid(int value);
const PB_ProfessionInfo_Type PB_ProfessionInfo_Type_Type_MIN = PB_ProfessionInfo_Type_NPC;
const PB_ProfessionInfo_Type PB_ProfessionInfo_Type_Type_MAX = PB_ProfessionInfo_Type_MAGICIAN;
const int PB_ProfessionInfo_Type_Type_ARRAYSIZE = PB_ProfessionInfo_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_ProfessionInfo_Type_descriptor();
inline const ::std::string& PB_ProfessionInfo_Type_Name(PB_ProfessionInfo_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_ProfessionInfo_Type_descriptor(), value);
}
inline bool PB_ProfessionInfo_Type_Parse(
    const ::std::string& name, PB_ProfessionInfo_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_ProfessionInfo_Type>(
    PB_ProfessionInfo_Type_descriptor(), name, value);
}
// ===================================================================

class PB_ProfessionInfo : public ::google::protobuf::Message {
 public:
  PB_ProfessionInfo();
  virtual ~PB_ProfessionInfo();
  
  PB_ProfessionInfo(const PB_ProfessionInfo& from);
  
  inline PB_ProfessionInfo& operator=(const PB_ProfessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_ProfessionInfo& default_instance();
  
  void Swap(PB_ProfessionInfo* other);
  
  // implements Message ----------------------------------------------
  
  PB_ProfessionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_ProfessionInfo& from);
  void MergeFrom(const PB_ProfessionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PB_ProfessionInfo_Type Type;
  static const Type NPC = PB_ProfessionInfo_Type_NPC;
  static const Type KNIGHT = PB_ProfessionInfo_Type_KNIGHT;
  static const Type RANGER = PB_ProfessionInfo_Type_RANGER;
  static const Type MAGICIAN = PB_ProfessionInfo_Type_MAGICIAN;
  static inline bool Type_IsValid(int value) {
    return PB_ProfessionInfo_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PB_ProfessionInfo_Type_Type_MIN;
  static const Type Type_MAX =
    PB_ProfessionInfo_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PB_ProfessionInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PB_ProfessionInfo_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PB_ProfessionInfo_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PB_ProfessionInfo_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_ProfessionInfo.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB_ProfessionInfo_Type type() const;
  inline void set_type(::PB_ProfessionInfo_Type value);
  
  // optional bool male = 2;
  inline bool has_male() const;
  inline void clear_male();
  static const int kMaleFieldNumber = 2;
  inline bool male() const;
  inline void set_male(bool value);
  
  // optional float height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline float height() const;
  inline void set_height(float value);
  
  // optional .PB_MovementAtt movementAtt = 4;
  inline bool has_movementAtt() const;
  inline void clear_movementAtt();
  static const int kMovementAttFieldNumber = 4;
  inline const ::PB_MovementAtt& movementAtt() const;
  inline ::PB_MovementAtt* mutable_movementAtt();
  inline ::PB_MovementAtt* release_movementAtt();
  
  // optional .PB_EquipmentAtt equipmentAtt = 5;
  inline bool has_equipmentAtt() const;
  inline void clear_equipmentAtt();
  static const int kEquipmentAttFieldNumber = 5;
  inline const ::PB_EquipmentAtt& equipmentAtt() const;
  inline ::PB_EquipmentAtt* mutable_equipmentAtt();
  inline ::PB_EquipmentAtt* release_equipmentAtt();
  
  // optional .PB_FightAtt fightAtt = 6;
  inline bool has_fightAtt() const;
  inline void clear_fightAtt();
  static const int kFightAttFieldNumber = 6;
  inline const ::PB_FightAtt& fightAtt() const;
  inline ::PB_FightAtt* mutable_fightAtt();
  inline ::PB_FightAtt* release_fightAtt();
  
  // optional .PB_AIAtt aiAtt = 7;
  inline bool has_aiAtt() const;
  inline void clear_aiAtt();
  static const int kAiAttFieldNumber = 7;
  inline const ::PB_AIAtt& aiAtt() const;
  inline ::PB_AIAtt* mutable_aiAtt();
  inline ::PB_AIAtt* release_aiAtt();
  
  // optional .PB_ItemPackage itemPackage = 8;
  inline bool has_itemPackage() const;
  inline void clear_itemPackage();
  static const int kItemPackageFieldNumber = 8;
  inline const ::PB_ItemPackage& itemPackage() const;
  inline ::PB_ItemPackage* mutable_itemPackage();
  inline ::PB_ItemPackage* release_itemPackage();
  
  // optional .PB_ALT alt = 9;
  inline bool has_alt() const;
  inline void clear_alt();
  static const int kAltFieldNumber = 9;
  inline const ::PB_ALT& alt() const;
  inline ::PB_ALT* mutable_alt();
  inline ::PB_ALT* release_alt();
  
  // optional .PB_MissionAllRecord missions = 10;
  inline bool has_missions() const;
  inline void clear_missions();
  static const int kMissionsFieldNumber = 10;
  inline const ::PB_MissionAllRecord& missions() const;
  inline ::PB_MissionAllRecord* mutable_missions();
  inline ::PB_MissionAllRecord* release_missions();
  
  // @@protoc_insertion_point(class_scope:PB_ProfessionInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_male();
  inline void clear_has_male();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_movementAtt();
  inline void clear_has_movementAtt();
  inline void set_has_equipmentAtt();
  inline void clear_has_equipmentAtt();
  inline void set_has_fightAtt();
  inline void clear_has_fightAtt();
  inline void set_has_aiAtt();
  inline void clear_has_aiAtt();
  inline void set_has_itemPackage();
  inline void clear_has_itemPackage();
  inline void set_has_alt();
  inline void clear_has_alt();
  inline void set_has_missions();
  inline void clear_has_missions();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  bool male_;
  ::PB_MovementAtt* movementAtt_;
  ::PB_EquipmentAtt* equipmentAtt_;
  ::PB_FightAtt* fightAtt_;
  ::PB_AIAtt* aiAtt_;
  ::PB_ItemPackage* itemPackage_;
  ::PB_ALT* alt_;
  ::PB_MissionAllRecord* missions_;
  float height_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProfessionInfo_2eproto();
  friend void protobuf_AssignDesc_ProfessionInfo_2eproto();
  friend void protobuf_ShutdownFile_ProfessionInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_ProfessionInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_ProfessionInfo

// optional .PB_ProfessionInfo.Type type = 1;
inline bool PB_ProfessionInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_ProfessionInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_ProfessionInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_ProfessionInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PB_ProfessionInfo_Type PB_ProfessionInfo::type() const {
  return static_cast< ::PB_ProfessionInfo_Type >(type_);
}
inline void PB_ProfessionInfo::set_type(::PB_ProfessionInfo_Type value) {
  GOOGLE_DCHECK(::PB_ProfessionInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool male = 2;
inline bool PB_ProfessionInfo::has_male() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_ProfessionInfo::set_has_male() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_ProfessionInfo::clear_has_male() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_ProfessionInfo::clear_male() {
  male_ = false;
  clear_has_male();
}
inline bool PB_ProfessionInfo::male() const {
  return male_;
}
inline void PB_ProfessionInfo::set_male(bool value) {
  set_has_male();
  male_ = value;
}

// optional float height = 3;
inline bool PB_ProfessionInfo::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_ProfessionInfo::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_ProfessionInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_ProfessionInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float PB_ProfessionInfo::height() const {
  return height_;
}
inline void PB_ProfessionInfo::set_height(float value) {
  set_has_height();
  height_ = value;
}

// optional .PB_MovementAtt movementAtt = 4;
inline bool PB_ProfessionInfo::has_movementAtt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_ProfessionInfo::set_has_movementAtt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_ProfessionInfo::clear_has_movementAtt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_ProfessionInfo::clear_movementAtt() {
  if (movementAtt_ != NULL) movementAtt_->::PB_MovementAtt::Clear();
  clear_has_movementAtt();
}
inline const ::PB_MovementAtt& PB_ProfessionInfo::movementAtt() const {
  return movementAtt_ != NULL ? *movementAtt_ : *default_instance_->movementAtt_;
}
inline ::PB_MovementAtt* PB_ProfessionInfo::mutable_movementAtt() {
  set_has_movementAtt();
  if (movementAtt_ == NULL) movementAtt_ = new ::PB_MovementAtt;
  return movementAtt_;
}
inline ::PB_MovementAtt* PB_ProfessionInfo::release_movementAtt() {
  clear_has_movementAtt();
  ::PB_MovementAtt* temp = movementAtt_;
  movementAtt_ = NULL;
  return temp;
}

// optional .PB_EquipmentAtt equipmentAtt = 5;
inline bool PB_ProfessionInfo::has_equipmentAtt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_ProfessionInfo::set_has_equipmentAtt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_ProfessionInfo::clear_has_equipmentAtt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_ProfessionInfo::clear_equipmentAtt() {
  if (equipmentAtt_ != NULL) equipmentAtt_->::PB_EquipmentAtt::Clear();
  clear_has_equipmentAtt();
}
inline const ::PB_EquipmentAtt& PB_ProfessionInfo::equipmentAtt() const {
  return equipmentAtt_ != NULL ? *equipmentAtt_ : *default_instance_->equipmentAtt_;
}
inline ::PB_EquipmentAtt* PB_ProfessionInfo::mutable_equipmentAtt() {
  set_has_equipmentAtt();
  if (equipmentAtt_ == NULL) equipmentAtt_ = new ::PB_EquipmentAtt;
  return equipmentAtt_;
}
inline ::PB_EquipmentAtt* PB_ProfessionInfo::release_equipmentAtt() {
  clear_has_equipmentAtt();
  ::PB_EquipmentAtt* temp = equipmentAtt_;
  equipmentAtt_ = NULL;
  return temp;
}

// optional .PB_FightAtt fightAtt = 6;
inline bool PB_ProfessionInfo::has_fightAtt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_ProfessionInfo::set_has_fightAtt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_ProfessionInfo::clear_has_fightAtt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_ProfessionInfo::clear_fightAtt() {
  if (fightAtt_ != NULL) fightAtt_->::PB_FightAtt::Clear();
  clear_has_fightAtt();
}
inline const ::PB_FightAtt& PB_ProfessionInfo::fightAtt() const {
  return fightAtt_ != NULL ? *fightAtt_ : *default_instance_->fightAtt_;
}
inline ::PB_FightAtt* PB_ProfessionInfo::mutable_fightAtt() {
  set_has_fightAtt();
  if (fightAtt_ == NULL) fightAtt_ = new ::PB_FightAtt;
  return fightAtt_;
}
inline ::PB_FightAtt* PB_ProfessionInfo::release_fightAtt() {
  clear_has_fightAtt();
  ::PB_FightAtt* temp = fightAtt_;
  fightAtt_ = NULL;
  return temp;
}

// optional .PB_AIAtt aiAtt = 7;
inline bool PB_ProfessionInfo::has_aiAtt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_ProfessionInfo::set_has_aiAtt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_ProfessionInfo::clear_has_aiAtt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_ProfessionInfo::clear_aiAtt() {
  if (aiAtt_ != NULL) aiAtt_->::PB_AIAtt::Clear();
  clear_has_aiAtt();
}
inline const ::PB_AIAtt& PB_ProfessionInfo::aiAtt() const {
  return aiAtt_ != NULL ? *aiAtt_ : *default_instance_->aiAtt_;
}
inline ::PB_AIAtt* PB_ProfessionInfo::mutable_aiAtt() {
  set_has_aiAtt();
  if (aiAtt_ == NULL) aiAtt_ = new ::PB_AIAtt;
  return aiAtt_;
}
inline ::PB_AIAtt* PB_ProfessionInfo::release_aiAtt() {
  clear_has_aiAtt();
  ::PB_AIAtt* temp = aiAtt_;
  aiAtt_ = NULL;
  return temp;
}

// optional .PB_ItemPackage itemPackage = 8;
inline bool PB_ProfessionInfo::has_itemPackage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_ProfessionInfo::set_has_itemPackage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_ProfessionInfo::clear_has_itemPackage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_ProfessionInfo::clear_itemPackage() {
  if (itemPackage_ != NULL) itemPackage_->::PB_ItemPackage::Clear();
  clear_has_itemPackage();
}
inline const ::PB_ItemPackage& PB_ProfessionInfo::itemPackage() const {
  return itemPackage_ != NULL ? *itemPackage_ : *default_instance_->itemPackage_;
}
inline ::PB_ItemPackage* PB_ProfessionInfo::mutable_itemPackage() {
  set_has_itemPackage();
  if (itemPackage_ == NULL) itemPackage_ = new ::PB_ItemPackage;
  return itemPackage_;
}
inline ::PB_ItemPackage* PB_ProfessionInfo::release_itemPackage() {
  clear_has_itemPackage();
  ::PB_ItemPackage* temp = itemPackage_;
  itemPackage_ = NULL;
  return temp;
}

// optional .PB_ALT alt = 9;
inline bool PB_ProfessionInfo::has_alt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PB_ProfessionInfo::set_has_alt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PB_ProfessionInfo::clear_has_alt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PB_ProfessionInfo::clear_alt() {
  if (alt_ != NULL) alt_->::PB_ALT::Clear();
  clear_has_alt();
}
inline const ::PB_ALT& PB_ProfessionInfo::alt() const {
  return alt_ != NULL ? *alt_ : *default_instance_->alt_;
}
inline ::PB_ALT* PB_ProfessionInfo::mutable_alt() {
  set_has_alt();
  if (alt_ == NULL) alt_ = new ::PB_ALT;
  return alt_;
}
inline ::PB_ALT* PB_ProfessionInfo::release_alt() {
  clear_has_alt();
  ::PB_ALT* temp = alt_;
  alt_ = NULL;
  return temp;
}

// optional .PB_MissionAllRecord missions = 10;
inline bool PB_ProfessionInfo::has_missions() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PB_ProfessionInfo::set_has_missions() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PB_ProfessionInfo::clear_has_missions() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PB_ProfessionInfo::clear_missions() {
  if (missions_ != NULL) missions_->::PB_MissionAllRecord::Clear();
  clear_has_missions();
}
inline const ::PB_MissionAllRecord& PB_ProfessionInfo::missions() const {
  return missions_ != NULL ? *missions_ : *default_instance_->missions_;
}
inline ::PB_MissionAllRecord* PB_ProfessionInfo::mutable_missions() {
  set_has_missions();
  if (missions_ == NULL) missions_ = new ::PB_MissionAllRecord;
  return missions_;
}
inline ::PB_MissionAllRecord* PB_ProfessionInfo::release_missions() {
  clear_has_missions();
  ::PB_MissionAllRecord* temp = missions_;
  missions_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_ProfessionInfo_Type>() {
  return ::PB_ProfessionInfo_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProfessionInfo_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RoleAtt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_RoleAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RoleAtt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RoleAtt_2eproto() {
  protobuf_AddDesc_RoleAtt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RoleAtt.proto");
  GOOGLE_CHECK(file != NULL);
  PB_RoleAtt_descriptor_ = file->message_type(0);
  static const int PB_RoleAtt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleAtt, baseAtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleAtt, movementAtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleAtt, equipmentAtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleAtt, fightAtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleAtt, aiAtt_),
  };
  PB_RoleAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RoleAtt_descriptor_,
      PB_RoleAtt::default_instance_,
      PB_RoleAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RoleAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RoleAtt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RoleAtt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RoleAtt_descriptor_, &PB_RoleAtt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RoleAtt_2eproto() {
  delete PB_RoleAtt::default_instance_;
  delete PB_RoleAtt_reflection_;
}

void protobuf_AddDesc_RoleAtt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_BaseInfo_2eproto();
  ::protobuf_AddDesc_MovementInfo_2eproto();
  ::protobuf_AddDesc_FightInfo_2eproto();
  ::protobuf_AddDesc_AIInfo_2eproto();
  ::protobuf_AddDesc_EquipmentInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rRoleAtt.proto\032\016BaseInfo.proto\032\022Movemen"
    "tInfo.proto\032\017FightInfo.proto\032\014AIInfo.pro"
    "to\032\023EquipmentInfo.proto\"\262\001\n\nPB_RoleAtt\022\034"
    "\n\007baseAtt\030\001 \001(\0132\013.PB_BaseAtt\022$\n\013movement"
    "Att\030\002 \001(\0132\017.PB_MovementAtt\022&\n\014equipmentA"
    "tt\030\003 \001(\0132\020.PB_EquipmentAtt\022\036\n\010fightAtt\030\004"
    " \001(\0132\014.PB_FightAtt\022\030\n\005aiAtt\030\005 \001(\0132\t.PB_A"
    "IAtt", 284);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RoleAtt.proto", &protobuf_RegisterTypes);
  PB_RoleAtt::default_instance_ = new PB_RoleAtt();
  PB_RoleAtt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RoleAtt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RoleAtt_2eproto {
  StaticDescriptorInitializer_RoleAtt_2eproto() {
    protobuf_AddDesc_RoleAtt_2eproto();
  }
} static_descriptor_initializer_RoleAtt_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PB_RoleAtt::kBaseAttFieldNumber;
const int PB_RoleAtt::kMovementAttFieldNumber;
const int PB_RoleAtt::kEquipmentAttFieldNumber;
const int PB_RoleAtt::kFightAttFieldNumber;
const int PB_RoleAtt::kAiAttFieldNumber;
#endif  // !_MSC_VER

PB_RoleAtt::PB_RoleAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_RoleAtt::InitAsDefaultInstance() {
  baseAtt_ = const_cast< ::PB_BaseAtt*>(&::PB_BaseAtt::default_instance());
  movementAtt_ = const_cast< ::PB_MovementAtt*>(&::PB_MovementAtt::default_instance());
  equipmentAtt_ = const_cast< ::PB_EquipmentAtt*>(&::PB_EquipmentAtt::default_instance());
  fightAtt_ = const_cast< ::PB_FightAtt*>(&::PB_FightAtt::default_instance());
  aiAtt_ = const_cast< ::PB_AIAtt*>(&::PB_AIAtt::default_instance());
}

PB_RoleAtt::PB_RoleAtt(const PB_RoleAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_RoleAtt::SharedCtor() {
  _cached_size_ = 0;
  baseAtt_ = NULL;
  movementAtt_ = NULL;
  equipmentAtt_ = NULL;
  fightAtt_ = NULL;
  aiAtt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RoleAtt::~PB_RoleAtt() {
  SharedDtor();
}

void PB_RoleAtt::SharedDtor() {
  if (this != default_instance_) {
    delete baseAtt_;
    delete movementAtt_;
    delete equipmentAtt_;
    delete fightAtt_;
    delete aiAtt_;
  }
}

void PB_RoleAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RoleAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RoleAtt_descriptor_;
}

const PB_RoleAtt& PB_RoleAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleAtt_2eproto();  return *default_instance_;
}

PB_RoleAtt* PB_RoleAtt::default_instance_ = NULL;

PB_RoleAtt* PB_RoleAtt::New() const {
  return new PB_RoleAtt;
}

void PB_RoleAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseAtt()) {
      if (baseAtt_ != NULL) baseAtt_->::PB_BaseAtt::Clear();
    }
    if (has_movementAtt()) {
      if (movementAtt_ != NULL) movementAtt_->::PB_MovementAtt::Clear();
    }
    if (has_equipmentAtt()) {
      if (equipmentAtt_ != NULL) equipmentAtt_->::PB_EquipmentAtt::Clear();
    }
    if (has_fightAtt()) {
      if (fightAtt_ != NULL) fightAtt_->::PB_FightAtt::Clear();
    }
    if (has_aiAtt()) {
      if (aiAtt_ != NULL) aiAtt_->::PB_AIAtt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RoleAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_BaseAtt baseAtt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_movementAtt;
        break;
      }
      
      // optional .PB_MovementAtt movementAtt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movementAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movementAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equipmentAtt;
        break;
      }
      
      // optional .PB_EquipmentAtt equipmentAtt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fightAtt;
        break;
      }
      
      // optional .PB_FightAtt fightAtt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fightAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fightAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_aiAtt;
        break;
      }
      
      // optional .PB_AIAtt aiAtt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aiAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aiAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_RoleAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_BaseAtt baseAtt = 1;
  if (has_baseAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseAtt(), output);
  }
  
  // optional .PB_MovementAtt movementAtt = 2;
  if (has_movementAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movementAtt(), output);
  }
  
  // optional .PB_EquipmentAtt equipmentAtt = 3;
  if (has_equipmentAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equipmentAtt(), output);
  }
  
  // optional .PB_FightAtt fightAtt = 4;
  if (has_fightAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fightAtt(), output);
  }
  
  // optional .PB_AIAtt aiAtt = 5;
  if (has_aiAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->aiAtt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_RoleAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_BaseAtt baseAtt = 1;
  if (has_baseAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseAtt(), target);
  }
  
  // optional .PB_MovementAtt movementAtt = 2;
  if (has_movementAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movementAtt(), target);
  }
  
  // optional .PB_EquipmentAtt equipmentAtt = 3;
  if (has_equipmentAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equipmentAtt(), target);
  }
  
  // optional .PB_FightAtt fightAtt = 4;
  if (has_fightAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fightAtt(), target);
  }
  
  // optional .PB_AIAtt aiAtt = 5;
  if (has_aiAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->aiAtt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_RoleAtt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_BaseAtt baseAtt = 1;
    if (has_baseAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseAtt());
    }
    
    // optional .PB_MovementAtt movementAtt = 2;
    if (has_movementAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movementAtt());
    }
    
    // optional .PB_EquipmentAtt equipmentAtt = 3;
    if (has_equipmentAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentAtt());
    }
    
    // optional .PB_FightAtt fightAtt = 4;
    if (has_fightAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightAtt());
    }
    
    // optional .PB_AIAtt aiAtt = 5;
    if (has_aiAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aiAtt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RoleAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RoleAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RoleAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RoleAtt::MergeFrom(const PB_RoleAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseAtt()) {
      mutable_baseAtt()->::PB_BaseAtt::MergeFrom(from.baseAtt());
    }
    if (from.has_movementAtt()) {
      mutable_movementAtt()->::PB_MovementAtt::MergeFrom(from.movementAtt());
    }
    if (from.has_equipmentAtt()) {
      mutable_equipmentAtt()->::PB_EquipmentAtt::MergeFrom(from.equipmentAtt());
    }
    if (from.has_fightAtt()) {
      mutable_fightAtt()->::PB_FightAtt::MergeFrom(from.fightAtt());
    }
    if (from.has_aiAtt()) {
      mutable_aiAtt()->::PB_AIAtt::MergeFrom(from.aiAtt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RoleAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RoleAtt::CopyFrom(const PB_RoleAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RoleAtt::IsInitialized() const {
  
  return true;
}

void PB_RoleAtt::Swap(PB_RoleAtt* other) {
  if (other != this) {
    std::swap(baseAtt_, other->baseAtt_);
    std::swap(movementAtt_, other->movementAtt_);
    std::swap(equipmentAtt_, other->equipmentAtt_);
    std::swap(fightAtt_, other->fightAtt_);
    std::swap(aiAtt_, other->aiAtt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RoleAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RoleAtt_descriptor_;
  metadata.reflection = PB_RoleAtt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

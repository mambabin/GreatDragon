// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BloodInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BloodInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BloodInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllBloodInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllBloodInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BloodNodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BloodNodeInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BloodNodeInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllBloodNodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllBloodNodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExploreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExploreInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExploreInfo_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExploreInfo_SoulJadeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllExploreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllExploreInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BloodInfo_2eproto() {
  protobuf_AddDesc_BloodInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BloodInfo.proto");
  GOOGLE_CHECK(file != NULL);
  BloodInfo_descriptor_ = file->message_type(0);
  static const int BloodInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, requiredLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, soulJadeType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, soulJadeCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, toAtk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, toDef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, toDodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, toAccuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, requiredMoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, requiredGem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, lastNode_),
  };
  BloodInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BloodInfo_descriptor_,
      BloodInfo::default_instance_,
      BloodInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BloodInfo));
  AllBloodInfo_descriptor_ = file->message_type(1);
  static const int AllBloodInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBloodInfo, bloodInfo_),
  };
  AllBloodInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllBloodInfo_descriptor_,
      AllBloodInfo::default_instance_,
      AllBloodInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBloodInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBloodInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllBloodInfo));
  BloodNodeInfo_descriptor_ = file->message_type(2);
  static const int BloodNodeInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, requiredSoul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, requiredGem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, successRate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, arg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, count_),
  };
  BloodNodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BloodNodeInfo_descriptor_,
      BloodNodeInfo::default_instance_,
      BloodNodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloodNodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BloodNodeInfo));
  BloodNodeInfo_Type_descriptor_ = BloodNodeInfo_descriptor_->enum_type(0);
  AllBloodNodeInfo_descriptor_ = file->message_type(3);
  static const int AllBloodNodeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBloodNodeInfo, bloodNodeInfo_),
  };
  AllBloodNodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllBloodNodeInfo_descriptor_,
      AllBloodNodeInfo::default_instance_,
      AllBloodNodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBloodNodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllBloodNodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllBloodNodeInfo));
  ExploreInfo_descriptor_ = file->message_type(4);
  static const int ExploreInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, soulJadeType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, soulJadeCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, soulStone_),
  };
  ExploreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExploreInfo_descriptor_,
      ExploreInfo::default_instance_,
      ExploreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExploreInfo));
  ExploreInfo_Type_descriptor_ = ExploreInfo_descriptor_->enum_type(0);
  ExploreInfo_SoulJadeType_descriptor_ = ExploreInfo_descriptor_->enum_type(1);
  AllExploreInfo_descriptor_ = file->message_type(5);
  static const int AllExploreInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllExploreInfo, exploreInfo_),
  };
  AllExploreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllExploreInfo_descriptor_,
      AllExploreInfo::default_instance_,
      AllExploreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllExploreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllExploreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllExploreInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BloodInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BloodInfo_descriptor_, &BloodInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllBloodInfo_descriptor_, &AllBloodInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BloodNodeInfo_descriptor_, &BloodNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllBloodNodeInfo_descriptor_, &AllBloodNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExploreInfo_descriptor_, &ExploreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllExploreInfo_descriptor_, &AllExploreInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BloodInfo_2eproto() {
  delete BloodInfo::default_instance_;
  delete BloodInfo_reflection_;
  delete AllBloodInfo::default_instance_;
  delete AllBloodInfo_reflection_;
  delete BloodNodeInfo::default_instance_;
  delete BloodNodeInfo_reflection_;
  delete AllBloodNodeInfo::default_instance_;
  delete AllBloodNodeInfo_reflection_;
  delete ExploreInfo::default_instance_;
  delete ExploreInfo_reflection_;
  delete AllExploreInfo::default_instance_;
  delete AllExploreInfo_reflection_;
}

void protobuf_AddDesc_BloodInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017BloodInfo.proto\"\244\002\n\tBloodInfo\022\r\n\005level"
    "\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003pic\030\003 \001(\005\022\025\n\rreq"
    "uiredLevel\030\004 \001(\005\022/\n\014soulJadeType\030\005 \001(\0162\031"
    ".ExploreInfo.SoulJadeType\022\025\n\rsoulJadeCou"
    "nt\030\006 \001(\005\022\r\n\005limit\030\007 \001(\005\022\r\n\005toAtk\030\010 \001(\005\022\r"
    "\n\005toDef\030\t \001(\005\022\017\n\007toDodge\030\n \001(\005\022\022\n\ntoAccu"
    "racy\030\013 \001(\005\022\025\n\rrequiredMoney\030\014 \001(\005\022\023\n\013req"
    "uiredGem\030\r \001(\005\022\020\n\010lastNode\030\016 \001(\005\"-\n\014AllB"
    "loodInfo\022\035\n\tbloodInfo\030\001 \003(\0132\n.BloodInfo\""
    "\257\002\n\rBloodNodeInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 "
    "\001(\t\022\024\n\014requiredSoul\030\003 \001(\003\022\023\n\013requiredGem"
    "\030\004 \001(\003\022\023\n\013successRate\030\005 \001(\002\022!\n\004type\030\006 \003("
    "\0162\023.BloodNodeInfo.Type\022\014\n\004arg1\030\007 \003(\005\022\014\n\004"
    "arg2\030\010 \003(\005\022\r\n\005goods\030\t \001(\005\022\r\n\005count\030\n \001(\005"
    "\"g\n\004Type\022\007\n\003ATT\020\000\022\014\n\010SKILL_CD\020\001\022\010\n\004AREA\020"
    "\002\022\014\n\010INC_MANA\020\003\022\016\n\nINC_ENERGY\020\004\022\014\n\010DEC_M"
    "ANA\020\005\022\022\n\016TRANSFORM_TIME\020\006\"9\n\020AllBloodNod"
    "eInfo\022%\n\rbloodNodeInfo\030\001 \003(\0132\016.BloodNode"
    "Info\"\244\002\n\013ExploreInfo\022\n\n\002id\030\001 \001(\005\022\037\n\004type"
    "\030\002 \001(\0162\021.ExploreInfo.Type\022\014\n\004desc\030\003 \001(\t\022"
    "/\n\014soulJadeType\030\004 \001(\0162\031.ExploreInfo.Soul"
    "JadeType\022\025\n\rsoulJadeCount\030\005 \001(\005\022\014\n\004soul\030"
    "\006 \001(\005\022\014\n\004rate\030\007 \001(\005\022\021\n\tsoulStone\030\010 \001(\005\"\034"
    "\n\004Type\022\n\n\006NORMAL\020\000\022\010\n\004HIGH\020\001\"E\n\014SoulJade"
    "Type\022\010\n\004NONE\020\000\022\t\n\005SMALL\020\001\022\n\n\006MEDIUM\020\002\022\007\n"
    "\003BIG\020\003\022\013\n\007PERFECT\020\004\"3\n\016AllExploreInfo\022!\n"
    "\013exploreInfo\030\001 \003(\0132\014.ExploreInfo", 1072);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BloodInfo.proto", &protobuf_RegisterTypes);
  BloodInfo::default_instance_ = new BloodInfo();
  AllBloodInfo::default_instance_ = new AllBloodInfo();
  BloodNodeInfo::default_instance_ = new BloodNodeInfo();
  AllBloodNodeInfo::default_instance_ = new AllBloodNodeInfo();
  ExploreInfo::default_instance_ = new ExploreInfo();
  AllExploreInfo::default_instance_ = new AllExploreInfo();
  BloodInfo::default_instance_->InitAsDefaultInstance();
  AllBloodInfo::default_instance_->InitAsDefaultInstance();
  BloodNodeInfo::default_instance_->InitAsDefaultInstance();
  AllBloodNodeInfo::default_instance_->InitAsDefaultInstance();
  ExploreInfo::default_instance_->InitAsDefaultInstance();
  AllExploreInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BloodInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BloodInfo_2eproto {
  StaticDescriptorInitializer_BloodInfo_2eproto() {
    protobuf_AddDesc_BloodInfo_2eproto();
  }
} static_descriptor_initializer_BloodInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BloodInfo::kLevelFieldNumber;
const int BloodInfo::kNameFieldNumber;
const int BloodInfo::kPicFieldNumber;
const int BloodInfo::kRequiredLevelFieldNumber;
const int BloodInfo::kSoulJadeTypeFieldNumber;
const int BloodInfo::kSoulJadeCountFieldNumber;
const int BloodInfo::kLimitFieldNumber;
const int BloodInfo::kToAtkFieldNumber;
const int BloodInfo::kToDefFieldNumber;
const int BloodInfo::kToDodgeFieldNumber;
const int BloodInfo::kToAccuracyFieldNumber;
const int BloodInfo::kRequiredMoneyFieldNumber;
const int BloodInfo::kRequiredGemFieldNumber;
const int BloodInfo::kLastNodeFieldNumber;
#endif  // !_MSC_VER

BloodInfo::BloodInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BloodInfo::InitAsDefaultInstance() {
}

BloodInfo::BloodInfo(const BloodInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BloodInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_ = 0;
  requiredLevel_ = 0;
  soulJadeType_ = 0;
  soulJadeCount_ = 0;
  limit_ = 0;
  toAtk_ = 0;
  toDef_ = 0;
  toDodge_ = 0;
  toAccuracy_ = 0;
  requiredMoney_ = 0;
  requiredGem_ = 0;
  lastNode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloodInfo::~BloodInfo() {
  SharedDtor();
}

void BloodInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BloodInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BloodInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloodInfo_descriptor_;
}

const BloodInfo& BloodInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloodInfo_2eproto();  return *default_instance_;
}

BloodInfo* BloodInfo::default_instance_ = NULL;

BloodInfo* BloodInfo::New() const {
  return new BloodInfo;
}

void BloodInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    pic_ = 0;
    requiredLevel_ = 0;
    soulJadeType_ = 0;
    soulJadeCount_ = 0;
    limit_ = 0;
    toAtk_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    toDef_ = 0;
    toDodge_ = 0;
    toAccuracy_ = 0;
    requiredMoney_ = 0;
    requiredGem_ = 0;
    lastNode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BloodInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pic;
        break;
      }
      
      // optional int32 pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_requiredLevel;
        break;
      }
      
      // optional int32 requiredLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredLevel_)));
          set_has_requiredLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_soulJadeType;
        break;
      }
      
      // optional .ExploreInfo.SoulJadeType soulJadeType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulJadeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExploreInfo_SoulJadeType_IsValid(value)) {
            set_soulJadeType(static_cast< ::ExploreInfo_SoulJadeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_soulJadeCount;
        break;
      }
      
      // optional int32 soulJadeCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulJadeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soulJadeCount_)));
          set_has_soulJadeCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_toAtk;
        break;
      }
      
      // optional int32 toAtk = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toAtk_)));
          set_has_toAtk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_toDef;
        break;
      }
      
      // optional int32 toDef = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toDef_)));
          set_has_toDef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_toDodge;
        break;
      }
      
      // optional int32 toDodge = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toDodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toDodge_)));
          set_has_toDodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_toAccuracy;
        break;
      }
      
      // optional int32 toAccuracy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toAccuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toAccuracy_)));
          set_has_toAccuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_requiredMoney;
        break;
      }
      
      // optional int32 requiredMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredMoney_)));
          set_has_requiredMoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_requiredGem;
        break;
      }
      
      // optional int32 requiredGem = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredGem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredGem_)));
          set_has_requiredGem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lastNode;
        break;
      }
      
      // optional int32 lastNode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastNode_)));
          set_has_lastNode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BloodInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 pic = 3;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pic(), output);
  }
  
  // optional int32 requiredLevel = 4;
  if (has_requiredLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->requiredLevel(), output);
  }
  
  // optional .ExploreInfo.SoulJadeType soulJadeType = 5;
  if (has_soulJadeType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->soulJadeType(), output);
  }
  
  // optional int32 soulJadeCount = 6;
  if (has_soulJadeCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->soulJadeCount(), output);
  }
  
  // optional int32 limit = 7;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->limit(), output);
  }
  
  // optional int32 toAtk = 8;
  if (has_toAtk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->toAtk(), output);
  }
  
  // optional int32 toDef = 9;
  if (has_toDef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->toDef(), output);
  }
  
  // optional int32 toDodge = 10;
  if (has_toDodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->toDodge(), output);
  }
  
  // optional int32 toAccuracy = 11;
  if (has_toAccuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->toAccuracy(), output);
  }
  
  // optional int32 requiredMoney = 12;
  if (has_requiredMoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->requiredMoney(), output);
  }
  
  // optional int32 requiredGem = 13;
  if (has_requiredGem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->requiredGem(), output);
  }
  
  // optional int32 lastNode = 14;
  if (has_lastNode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lastNode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BloodInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 pic = 3;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pic(), target);
  }
  
  // optional int32 requiredLevel = 4;
  if (has_requiredLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->requiredLevel(), target);
  }
  
  // optional .ExploreInfo.SoulJadeType soulJadeType = 5;
  if (has_soulJadeType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->soulJadeType(), target);
  }
  
  // optional int32 soulJadeCount = 6;
  if (has_soulJadeCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->soulJadeCount(), target);
  }
  
  // optional int32 limit = 7;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->limit(), target);
  }
  
  // optional int32 toAtk = 8;
  if (has_toAtk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->toAtk(), target);
  }
  
  // optional int32 toDef = 9;
  if (has_toDef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->toDef(), target);
  }
  
  // optional int32 toDodge = 10;
  if (has_toDodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->toDodge(), target);
  }
  
  // optional int32 toAccuracy = 11;
  if (has_toAccuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->toAccuracy(), target);
  }
  
  // optional int32 requiredMoney = 12;
  if (has_requiredMoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->requiredMoney(), target);
  }
  
  // optional int32 requiredGem = 13;
  if (has_requiredGem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->requiredGem(), target);
  }
  
  // optional int32 lastNode = 14;
  if (has_lastNode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lastNode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BloodInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 pic = 3;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }
    
    // optional int32 requiredLevel = 4;
    if (has_requiredLevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredLevel());
    }
    
    // optional .ExploreInfo.SoulJadeType soulJadeType = 5;
    if (has_soulJadeType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->soulJadeType());
    }
    
    // optional int32 soulJadeCount = 6;
    if (has_soulJadeCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soulJadeCount());
    }
    
    // optional int32 limit = 7;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional int32 toAtk = 8;
    if (has_toAtk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toAtk());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 toDef = 9;
    if (has_toDef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toDef());
    }
    
    // optional int32 toDodge = 10;
    if (has_toDodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toDodge());
    }
    
    // optional int32 toAccuracy = 11;
    if (has_toAccuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toAccuracy());
    }
    
    // optional int32 requiredMoney = 12;
    if (has_requiredMoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredMoney());
    }
    
    // optional int32 requiredGem = 13;
    if (has_requiredGem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredGem());
    }
    
    // optional int32 lastNode = 14;
    if (has_lastNode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastNode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloodInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BloodInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BloodInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BloodInfo::MergeFrom(const BloodInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_requiredLevel()) {
      set_requiredLevel(from.requiredLevel());
    }
    if (from.has_soulJadeType()) {
      set_soulJadeType(from.soulJadeType());
    }
    if (from.has_soulJadeCount()) {
      set_soulJadeCount(from.soulJadeCount());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_toAtk()) {
      set_toAtk(from.toAtk());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_toDef()) {
      set_toDef(from.toDef());
    }
    if (from.has_toDodge()) {
      set_toDodge(from.toDodge());
    }
    if (from.has_toAccuracy()) {
      set_toAccuracy(from.toAccuracy());
    }
    if (from.has_requiredMoney()) {
      set_requiredMoney(from.requiredMoney());
    }
    if (from.has_requiredGem()) {
      set_requiredGem(from.requiredGem());
    }
    if (from.has_lastNode()) {
      set_lastNode(from.lastNode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BloodInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloodInfo::CopyFrom(const BloodInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloodInfo::IsInitialized() const {
  
  return true;
}

void BloodInfo::Swap(BloodInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(requiredLevel_, other->requiredLevel_);
    std::swap(soulJadeType_, other->soulJadeType_);
    std::swap(soulJadeCount_, other->soulJadeCount_);
    std::swap(limit_, other->limit_);
    std::swap(toAtk_, other->toAtk_);
    std::swap(toDef_, other->toDef_);
    std::swap(toDodge_, other->toDodge_);
    std::swap(toAccuracy_, other->toAccuracy_);
    std::swap(requiredMoney_, other->requiredMoney_);
    std::swap(requiredGem_, other->requiredGem_);
    std::swap(lastNode_, other->lastNode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BloodInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BloodInfo_descriptor_;
  metadata.reflection = BloodInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllBloodInfo::kBloodInfoFieldNumber;
#endif  // !_MSC_VER

AllBloodInfo::AllBloodInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllBloodInfo::InitAsDefaultInstance() {
}

AllBloodInfo::AllBloodInfo(const AllBloodInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllBloodInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllBloodInfo::~AllBloodInfo() {
  SharedDtor();
}

void AllBloodInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllBloodInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllBloodInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllBloodInfo_descriptor_;
}

const AllBloodInfo& AllBloodInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloodInfo_2eproto();  return *default_instance_;
}

AllBloodInfo* AllBloodInfo::default_instance_ = NULL;

AllBloodInfo* AllBloodInfo::New() const {
  return new AllBloodInfo;
}

void AllBloodInfo::Clear() {
  bloodInfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllBloodInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BloodInfo bloodInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bloodInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bloodInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bloodInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllBloodInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BloodInfo bloodInfo = 1;
  for (int i = 0; i < this->bloodInfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bloodInfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllBloodInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BloodInfo bloodInfo = 1;
  for (int i = 0; i < this->bloodInfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bloodInfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllBloodInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .BloodInfo bloodInfo = 1;
  total_size += 1 * this->bloodInfo_size();
  for (int i = 0; i < this->bloodInfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bloodInfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllBloodInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllBloodInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllBloodInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllBloodInfo::MergeFrom(const AllBloodInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bloodInfo_.MergeFrom(from.bloodInfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllBloodInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllBloodInfo::CopyFrom(const AllBloodInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllBloodInfo::IsInitialized() const {
  
  return true;
}

void AllBloodInfo::Swap(AllBloodInfo* other) {
  if (other != this) {
    bloodInfo_.Swap(&other->bloodInfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllBloodInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllBloodInfo_descriptor_;
  metadata.reflection = AllBloodInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BloodNodeInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloodNodeInfo_Type_descriptor_;
}
bool BloodNodeInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BloodNodeInfo_Type BloodNodeInfo::ATT;
const BloodNodeInfo_Type BloodNodeInfo::SKILL_CD;
const BloodNodeInfo_Type BloodNodeInfo::AREA;
const BloodNodeInfo_Type BloodNodeInfo::INC_MANA;
const BloodNodeInfo_Type BloodNodeInfo::INC_ENERGY;
const BloodNodeInfo_Type BloodNodeInfo::DEC_MANA;
const BloodNodeInfo_Type BloodNodeInfo::TRANSFORM_TIME;
const BloodNodeInfo_Type BloodNodeInfo::Type_MIN;
const BloodNodeInfo_Type BloodNodeInfo::Type_MAX;
const int BloodNodeInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BloodNodeInfo::kIdFieldNumber;
const int BloodNodeInfo::kNameFieldNumber;
const int BloodNodeInfo::kRequiredSoulFieldNumber;
const int BloodNodeInfo::kRequiredGemFieldNumber;
const int BloodNodeInfo::kSuccessRateFieldNumber;
const int BloodNodeInfo::kTypeFieldNumber;
const int BloodNodeInfo::kArg1FieldNumber;
const int BloodNodeInfo::kArg2FieldNumber;
const int BloodNodeInfo::kGoodsFieldNumber;
const int BloodNodeInfo::kCountFieldNumber;
#endif  // !_MSC_VER

BloodNodeInfo::BloodNodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BloodNodeInfo::InitAsDefaultInstance() {
}

BloodNodeInfo::BloodNodeInfo(const BloodNodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BloodNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requiredSoul_ = GOOGLE_LONGLONG(0);
  requiredGem_ = GOOGLE_LONGLONG(0);
  successRate_ = 0;
  goods_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloodNodeInfo::~BloodNodeInfo() {
  SharedDtor();
}

void BloodNodeInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BloodNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BloodNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloodNodeInfo_descriptor_;
}

const BloodNodeInfo& BloodNodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloodInfo_2eproto();  return *default_instance_;
}

BloodNodeInfo* BloodNodeInfo::default_instance_ = NULL;

BloodNodeInfo* BloodNodeInfo::New() const {
  return new BloodNodeInfo;
}

void BloodNodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    requiredSoul_ = GOOGLE_LONGLONG(0);
    requiredGem_ = GOOGLE_LONGLONG(0);
    successRate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    goods_ = 0;
    count_ = 0;
  }
  type_.Clear();
  arg1_.Clear();
  arg2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BloodNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requiredSoul;
        break;
      }
      
      // optional int64 requiredSoul = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredSoul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requiredSoul_)));
          set_has_requiredSoul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_requiredGem;
        break;
      }
      
      // optional int64 requiredGem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredGem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requiredGem_)));
          set_has_requiredGem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_successRate;
        break;
      }
      
      // optional float successRate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_successRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &successRate_)));
          set_has_successRate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // repeated .BloodNodeInfo.Type type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BloodNodeInfo_Type_IsValid(value)) {
            add_type(static_cast< ::BloodNodeInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::BloodNodeInfo_Type_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        if (input->ExpectTag(56)) goto parse_arg1;
        break;
      }
      
      // repeated int32 arg1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_arg1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_arg1;
        if (input->ExpectTag(64)) goto parse_arg2;
        break;
      }
      
      // repeated int32 arg2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_arg2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_arg2;
        if (input->ExpectTag(72)) goto parse_goods;
        break;
      }
      
      // optional int32 goods = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goods_)));
          set_has_goods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_count;
        break;
      }
      
      // optional int32 count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BloodNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int64 requiredSoul = 3;
  if (has_requiredSoul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->requiredSoul(), output);
  }
  
  // optional int64 requiredGem = 4;
  if (has_requiredGem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->requiredGem(), output);
  }
  
  // optional float successRate = 5;
  if (has_successRate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->successRate(), output);
  }
  
  // repeated .BloodNodeInfo.Type type = 6;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(i), output);
  }
  
  // repeated int32 arg1 = 7;
  for (int i = 0; i < this->arg1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->arg1(i), output);
  }
  
  // repeated int32 arg2 = 8;
  for (int i = 0; i < this->arg2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->arg2(i), output);
  }
  
  // optional int32 goods = 9;
  if (has_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->goods(), output);
  }
  
  // optional int32 count = 10;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BloodNodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int64 requiredSoul = 3;
  if (has_requiredSoul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->requiredSoul(), target);
  }
  
  // optional int64 requiredGem = 4;
  if (has_requiredGem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->requiredGem(), target);
  }
  
  // optional float successRate = 5;
  if (has_successRate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->successRate(), target);
  }
  
  // repeated .BloodNodeInfo.Type type = 6;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(i), target);
  }
  
  // repeated int32 arg1 = 7;
  for (int i = 0; i < this->arg1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->arg1(i), target);
  }
  
  // repeated int32 arg2 = 8;
  for (int i = 0; i < this->arg2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->arg2(i), target);
  }
  
  // optional int32 goods = 9;
  if (has_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->goods(), target);
  }
  
  // optional int32 count = 10;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BloodNodeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 requiredSoul = 3;
    if (has_requiredSoul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->requiredSoul());
    }
    
    // optional int64 requiredGem = 4;
    if (has_requiredGem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->requiredGem());
    }
    
    // optional float successRate = 5;
    if (has_successRate()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 goods = 9;
    if (has_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goods());
    }
    
    // optional int32 count = 10;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  // repeated .BloodNodeInfo.Type type = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  // repeated int32 arg1 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg1(i));
    }
    total_size += 1 * this->arg1_size() + data_size;
  }
  
  // repeated int32 arg2 = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg2(i));
    }
    total_size += 1 * this->arg2_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloodNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BloodNodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BloodNodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BloodNodeInfo::MergeFrom(const BloodNodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  arg1_.MergeFrom(from.arg1_);
  arg2_.MergeFrom(from.arg2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_requiredSoul()) {
      set_requiredSoul(from.requiredSoul());
    }
    if (from.has_requiredGem()) {
      set_requiredGem(from.requiredGem());
    }
    if (from.has_successRate()) {
      set_successRate(from.successRate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_goods()) {
      set_goods(from.goods());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BloodNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloodNodeInfo::CopyFrom(const BloodNodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloodNodeInfo::IsInitialized() const {
  
  return true;
}

void BloodNodeInfo::Swap(BloodNodeInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(requiredSoul_, other->requiredSoul_);
    std::swap(requiredGem_, other->requiredGem_);
    std::swap(successRate_, other->successRate_);
    type_.Swap(&other->type_);
    arg1_.Swap(&other->arg1_);
    arg2_.Swap(&other->arg2_);
    std::swap(goods_, other->goods_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BloodNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BloodNodeInfo_descriptor_;
  metadata.reflection = BloodNodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllBloodNodeInfo::kBloodNodeInfoFieldNumber;
#endif  // !_MSC_VER

AllBloodNodeInfo::AllBloodNodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllBloodNodeInfo::InitAsDefaultInstance() {
}

AllBloodNodeInfo::AllBloodNodeInfo(const AllBloodNodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllBloodNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllBloodNodeInfo::~AllBloodNodeInfo() {
  SharedDtor();
}

void AllBloodNodeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllBloodNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllBloodNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllBloodNodeInfo_descriptor_;
}

const AllBloodNodeInfo& AllBloodNodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloodInfo_2eproto();  return *default_instance_;
}

AllBloodNodeInfo* AllBloodNodeInfo::default_instance_ = NULL;

AllBloodNodeInfo* AllBloodNodeInfo::New() const {
  return new AllBloodNodeInfo;
}

void AllBloodNodeInfo::Clear() {
  bloodNodeInfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllBloodNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BloodNodeInfo bloodNodeInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bloodNodeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bloodNodeInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bloodNodeInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllBloodNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BloodNodeInfo bloodNodeInfo = 1;
  for (int i = 0; i < this->bloodNodeInfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bloodNodeInfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllBloodNodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BloodNodeInfo bloodNodeInfo = 1;
  for (int i = 0; i < this->bloodNodeInfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bloodNodeInfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllBloodNodeInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .BloodNodeInfo bloodNodeInfo = 1;
  total_size += 1 * this->bloodNodeInfo_size();
  for (int i = 0; i < this->bloodNodeInfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bloodNodeInfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllBloodNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllBloodNodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllBloodNodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllBloodNodeInfo::MergeFrom(const AllBloodNodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bloodNodeInfo_.MergeFrom(from.bloodNodeInfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllBloodNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllBloodNodeInfo::CopyFrom(const AllBloodNodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllBloodNodeInfo::IsInitialized() const {
  
  return true;
}

void AllBloodNodeInfo::Swap(AllBloodNodeInfo* other) {
  if (other != this) {
    bloodNodeInfo_.Swap(&other->bloodNodeInfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllBloodNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllBloodNodeInfo_descriptor_;
  metadata.reflection = AllBloodNodeInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExploreInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploreInfo_Type_descriptor_;
}
bool ExploreInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExploreInfo_Type ExploreInfo::NORMAL;
const ExploreInfo_Type ExploreInfo::HIGH;
const ExploreInfo_Type ExploreInfo::Type_MIN;
const ExploreInfo_Type ExploreInfo::Type_MAX;
const int ExploreInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ExploreInfo_SoulJadeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploreInfo_SoulJadeType_descriptor_;
}
bool ExploreInfo_SoulJadeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExploreInfo_SoulJadeType ExploreInfo::NONE;
const ExploreInfo_SoulJadeType ExploreInfo::SMALL;
const ExploreInfo_SoulJadeType ExploreInfo::MEDIUM;
const ExploreInfo_SoulJadeType ExploreInfo::BIG;
const ExploreInfo_SoulJadeType ExploreInfo::PERFECT;
const ExploreInfo_SoulJadeType ExploreInfo::SoulJadeType_MIN;
const ExploreInfo_SoulJadeType ExploreInfo::SoulJadeType_MAX;
const int ExploreInfo::SoulJadeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExploreInfo::kIdFieldNumber;
const int ExploreInfo::kTypeFieldNumber;
const int ExploreInfo::kDescFieldNumber;
const int ExploreInfo::kSoulJadeTypeFieldNumber;
const int ExploreInfo::kSoulJadeCountFieldNumber;
const int ExploreInfo::kSoulFieldNumber;
const int ExploreInfo::kRateFieldNumber;
const int ExploreInfo::kSoulStoneFieldNumber;
#endif  // !_MSC_VER

ExploreInfo::ExploreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExploreInfo::InitAsDefaultInstance() {
}

ExploreInfo::ExploreInfo(const ExploreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExploreInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soulJadeType_ = 0;
  soulJadeCount_ = 0;
  soul_ = 0;
  rate_ = 0;
  soulStone_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExploreInfo::~ExploreInfo() {
  SharedDtor();
}

void ExploreInfo::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void ExploreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploreInfo_descriptor_;
}

const ExploreInfo& ExploreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloodInfo_2eproto();  return *default_instance_;
}

ExploreInfo* ExploreInfo::default_instance_ = NULL;

ExploreInfo* ExploreInfo::New() const {
  return new ExploreInfo;
}

void ExploreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    soulJadeType_ = 0;
    soulJadeCount_ = 0;
    soul_ = 0;
    rate_ = 0;
    soulStone_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExploreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .ExploreInfo.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExploreInfo_Type_IsValid(value)) {
            set_type(static_cast< ::ExploreInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }
      
      // optional string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_soulJadeType;
        break;
      }
      
      // optional .ExploreInfo.SoulJadeType soulJadeType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulJadeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExploreInfo_SoulJadeType_IsValid(value)) {
            set_soulJadeType(static_cast< ::ExploreInfo_SoulJadeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_soulJadeCount;
        break;
      }
      
      // optional int32 soulJadeCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulJadeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soulJadeCount_)));
          set_has_soulJadeCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_soul;
        break;
      }
      
      // optional int32 soul = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_)));
          set_has_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rate;
        break;
      }
      
      // optional int32 rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_soulStone;
        break;
      }
      
      // optional int32 soulStone = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulStone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soulStone_)));
          set_has_soulStone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExploreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .ExploreInfo.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }
  
  // optional .ExploreInfo.SoulJadeType soulJadeType = 4;
  if (has_soulJadeType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->soulJadeType(), output);
  }
  
  // optional int32 soulJadeCount = 5;
  if (has_soulJadeCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->soulJadeCount(), output);
  }
  
  // optional int32 soul = 6;
  if (has_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->soul(), output);
  }
  
  // optional int32 rate = 7;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rate(), output);
  }
  
  // optional int32 soulStone = 8;
  if (has_soulStone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->soulStone(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExploreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .ExploreInfo.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }
  
  // optional .ExploreInfo.SoulJadeType soulJadeType = 4;
  if (has_soulJadeType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->soulJadeType(), target);
  }
  
  // optional int32 soulJadeCount = 5;
  if (has_soulJadeCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->soulJadeCount(), target);
  }
  
  // optional int32 soul = 6;
  if (has_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->soul(), target);
  }
  
  // optional int32 rate = 7;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rate(), target);
  }
  
  // optional int32 soulStone = 8;
  if (has_soulStone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->soulStone(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExploreInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .ExploreInfo.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional .ExploreInfo.SoulJadeType soulJadeType = 4;
    if (has_soulJadeType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->soulJadeType());
    }
    
    // optional int32 soulJadeCount = 5;
    if (has_soulJadeCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soulJadeCount());
    }
    
    // optional int32 soul = 6;
    if (has_soul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul());
    }
    
    // optional int32 rate = 7;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }
    
    // optional int32 soulStone = 8;
    if (has_soulStone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soulStone());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExploreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExploreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExploreInfo::MergeFrom(const ExploreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_soulJadeType()) {
      set_soulJadeType(from.soulJadeType());
    }
    if (from.has_soulJadeCount()) {
      set_soulJadeCount(from.soulJadeCount());
    }
    if (from.has_soul()) {
      set_soul(from.soul());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_soulStone()) {
      set_soulStone(from.soulStone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExploreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploreInfo::CopyFrom(const ExploreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploreInfo::IsInitialized() const {
  
  return true;
}

void ExploreInfo::Swap(ExploreInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(desc_, other->desc_);
    std::swap(soulJadeType_, other->soulJadeType_);
    std::swap(soulJadeCount_, other->soulJadeCount_);
    std::swap(soul_, other->soul_);
    std::swap(rate_, other->rate_);
    std::swap(soulStone_, other->soulStone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExploreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExploreInfo_descriptor_;
  metadata.reflection = ExploreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllExploreInfo::kExploreInfoFieldNumber;
#endif  // !_MSC_VER

AllExploreInfo::AllExploreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllExploreInfo::InitAsDefaultInstance() {
}

AllExploreInfo::AllExploreInfo(const AllExploreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllExploreInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllExploreInfo::~AllExploreInfo() {
  SharedDtor();
}

void AllExploreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllExploreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllExploreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllExploreInfo_descriptor_;
}

const AllExploreInfo& AllExploreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BloodInfo_2eproto();  return *default_instance_;
}

AllExploreInfo* AllExploreInfo::default_instance_ = NULL;

AllExploreInfo* AllExploreInfo::New() const {
  return new AllExploreInfo;
}

void AllExploreInfo::Clear() {
  exploreInfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllExploreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ExploreInfo exploreInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exploreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exploreInfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_exploreInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllExploreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ExploreInfo exploreInfo = 1;
  for (int i = 0; i < this->exploreInfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exploreInfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllExploreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ExploreInfo exploreInfo = 1;
  for (int i = 0; i < this->exploreInfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exploreInfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllExploreInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .ExploreInfo exploreInfo = 1;
  total_size += 1 * this->exploreInfo_size();
  for (int i = 0; i < this->exploreInfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exploreInfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllExploreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllExploreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllExploreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllExploreInfo::MergeFrom(const AllExploreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  exploreInfo_.MergeFrom(from.exploreInfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllExploreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllExploreInfo::CopyFrom(const AllExploreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllExploreInfo::IsInitialized() const {
  
  return true;
}

void AllExploreInfo::Swap(AllExploreInfo* other) {
  if (other != this) {
    exploreInfo_.Swap(&other->exploreInfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllExploreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllExploreInfo_descriptor_;
  metadata.reflection = AllExploreInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

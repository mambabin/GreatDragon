// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FuncInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_FuncInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_FuncInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_FuncInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PB_FuncAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_FuncAtt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FuncInfo_2eproto() {
  protobuf_AddDesc_FuncInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FuncInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PB_FuncInfo_descriptor_ = file->message_type(0);
  static const int PB_FuncInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FuncInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FuncInfo, arg_),
  };
  PB_FuncInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_FuncInfo_descriptor_,
      PB_FuncInfo::default_instance_,
      PB_FuncInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FuncInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FuncInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_FuncInfo));
  PB_FuncInfo_Type_descriptor_ = PB_FuncInfo_descriptor_->enum_type(0);
  PB_FuncAtt_descriptor_ = file->message_type(1);
  static const int PB_FuncAtt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FuncAtt, funcs_),
  };
  PB_FuncAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_FuncAtt_descriptor_,
      PB_FuncAtt::default_instance_,
      PB_FuncAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FuncAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_FuncAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_FuncAtt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FuncInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_FuncInfo_descriptor_, &PB_FuncInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_FuncAtt_descriptor_, &PB_FuncAtt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FuncInfo_2eproto() {
  delete PB_FuncInfo::default_instance_;
  delete PB_FuncInfo_reflection_;
  delete PB_FuncAtt::default_instance_;
  delete PB_FuncAtt_reflection_;
}

void protobuf_AddDesc_FuncInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016FuncInfo.proto\"r\n\013PB_FuncInfo\022\037\n\004type\030"
    "\001 \001(\0162\021.PB_FuncInfo.Type\022\013\n\003arg\030\002 \003(\005\"5\n"
    "\004Type\022\010\n\004NONE\020\000\022\013\n\007MISSION\020\001\022\014\n\010BUSINESS"
    "\020\002\022\010\n\004ROOM\020\003\")\n\nPB_FuncAtt\022\033\n\005funcs\030\001 \003("
    "\0132\014.PB_FuncInfo", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FuncInfo.proto", &protobuf_RegisterTypes);
  PB_FuncInfo::default_instance_ = new PB_FuncInfo();
  PB_FuncAtt::default_instance_ = new PB_FuncAtt();
  PB_FuncInfo::default_instance_->InitAsDefaultInstance();
  PB_FuncAtt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FuncInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FuncInfo_2eproto {
  StaticDescriptorInitializer_FuncInfo_2eproto() {
    protobuf_AddDesc_FuncInfo_2eproto();
  }
} static_descriptor_initializer_FuncInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PB_FuncInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_FuncInfo_Type_descriptor_;
}
bool PB_FuncInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_FuncInfo_Type PB_FuncInfo::NONE;
const PB_FuncInfo_Type PB_FuncInfo::MISSION;
const PB_FuncInfo_Type PB_FuncInfo::BUSINESS;
const PB_FuncInfo_Type PB_FuncInfo::ROOM;
const PB_FuncInfo_Type PB_FuncInfo::Type_MIN;
const PB_FuncInfo_Type PB_FuncInfo::Type_MAX;
const int PB_FuncInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PB_FuncInfo::kTypeFieldNumber;
const int PB_FuncInfo::kArgFieldNumber;
#endif  // !_MSC_VER

PB_FuncInfo::PB_FuncInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_FuncInfo::InitAsDefaultInstance() {
}

PB_FuncInfo::PB_FuncInfo(const PB_FuncInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_FuncInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_FuncInfo::~PB_FuncInfo() {
  SharedDtor();
}

void PB_FuncInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_FuncInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_FuncInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_FuncInfo_descriptor_;
}

const PB_FuncInfo& PB_FuncInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuncInfo_2eproto();  return *default_instance_;
}

PB_FuncInfo* PB_FuncInfo::default_instance_ = NULL;

PB_FuncInfo* PB_FuncInfo::New() const {
  return new PB_FuncInfo;
}

void PB_FuncInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_FuncInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_FuncInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_FuncInfo_Type_IsValid(value)) {
            set_type(static_cast< ::PB_FuncInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arg;
        break;
      }
      
      // repeated int32 arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_FuncInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_FuncInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // repeated int32 arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_FuncInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_FuncInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // repeated int32 arg = 2;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_FuncInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_FuncInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated int32 arg = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg(i));
    }
    total_size += 1 * this->arg_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_FuncInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_FuncInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_FuncInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_FuncInfo::MergeFrom(const PB_FuncInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_FuncInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_FuncInfo::CopyFrom(const PB_FuncInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_FuncInfo::IsInitialized() const {
  
  return true;
}

void PB_FuncInfo::Swap(PB_FuncInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    arg_.Swap(&other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_FuncInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_FuncInfo_descriptor_;
  metadata.reflection = PB_FuncInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_FuncAtt::kFuncsFieldNumber;
#endif  // !_MSC_VER

PB_FuncAtt::PB_FuncAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_FuncAtt::InitAsDefaultInstance() {
}

PB_FuncAtt::PB_FuncAtt(const PB_FuncAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_FuncAtt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_FuncAtt::~PB_FuncAtt() {
  SharedDtor();
}

void PB_FuncAtt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_FuncAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_FuncAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_FuncAtt_descriptor_;
}

const PB_FuncAtt& PB_FuncAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FuncInfo_2eproto();  return *default_instance_;
}

PB_FuncAtt* PB_FuncAtt::default_instance_ = NULL;

PB_FuncAtt* PB_FuncAtt::New() const {
  return new PB_FuncAtt;
}

void PB_FuncAtt::Clear() {
  funcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_FuncAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_FuncInfo funcs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_funcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_funcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_funcs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_FuncAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_FuncInfo funcs = 1;
  for (int i = 0; i < this->funcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->funcs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_FuncAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_FuncInfo funcs = 1;
  for (int i = 0; i < this->funcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->funcs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_FuncAtt::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_FuncInfo funcs = 1;
  total_size += 1 * this->funcs_size();
  for (int i = 0; i < this->funcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->funcs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_FuncAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_FuncAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_FuncAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_FuncAtt::MergeFrom(const PB_FuncAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  funcs_.MergeFrom(from.funcs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_FuncAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_FuncAtt::CopyFrom(const PB_FuncAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_FuncAtt::IsInitialized() const {
  
  return true;
}

void PB_FuncAtt::Swap(PB_FuncAtt* other) {
  if (other != this) {
    funcs_.Swap(&other->funcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_FuncAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_FuncAtt_descriptor_;
  metadata.reflection = PB_FuncAtt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

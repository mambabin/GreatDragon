// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentRandom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EquipmentRandomColor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRandomColor_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllEquipmentRandomColor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllEquipmentRandomColor_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRandomPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRandomPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllEquipmentRandomPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllEquipmentRandomPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRandomLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRandomLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllEquipmentRandomLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllEquipmentRandomLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRandomEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRandomEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllEquipmentRandomEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllEquipmentRandomEffect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipmentRandom_2eproto() {
  protobuf_AddDesc_EquipmentRandom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipmentRandom.proto");
  GOOGLE_CHECK(file != NULL);
  EquipmentRandomColor_descriptor_ = file->message_type(0);
  static const int EquipmentRandomColor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomColor, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomColor, chance1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomColor, chance2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomColor, chance3_),
  };
  EquipmentRandomColor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRandomColor_descriptor_,
      EquipmentRandomColor::default_instance_,
      EquipmentRandomColor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomColor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomColor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRandomColor));
  AllEquipmentRandomColor_descriptor_ = file->message_type(1);
  static const int AllEquipmentRandomColor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomColor, equipmentRandomColor_),
  };
  AllEquipmentRandomColor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllEquipmentRandomColor_descriptor_,
      AllEquipmentRandomColor::default_instance_,
      AllEquipmentRandomColor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomColor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomColor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllEquipmentRandomColor));
  EquipmentRandomPos_descriptor_ = file->message_type(2);
  static const int EquipmentRandomPos_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomPos, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomPos, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomPos, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomPos, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomPos, accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomPos, dodge_),
  };
  EquipmentRandomPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRandomPos_descriptor_,
      EquipmentRandomPos::default_instance_,
      EquipmentRandomPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRandomPos));
  AllEquipmentRandomPos_descriptor_ = file->message_type(3);
  static const int AllEquipmentRandomPos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomPos, equipmentRandomPos_),
  };
  AllEquipmentRandomPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllEquipmentRandomPos_descriptor_,
      AllEquipmentRandomPos::default_instance_,
      AllEquipmentRandomPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllEquipmentRandomPos));
  EquipmentRandomLevel_descriptor_ = file->message_type(4);
  static const int EquipmentRandomLevel_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, atkMin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, atkMax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, defMin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, defMax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, hpMin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, hpMax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, critMin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, critMax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, accuracyMin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, accuracyMax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, dodgeMin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, dodgeMax_),
  };
  EquipmentRandomLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRandomLevel_descriptor_,
      EquipmentRandomLevel::default_instance_,
      EquipmentRandomLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRandomLevel));
  AllEquipmentRandomLevel_descriptor_ = file->message_type(5);
  static const int AllEquipmentRandomLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomLevel, equipmentRandomLevel_),
  };
  AllEquipmentRandomLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllEquipmentRandomLevel_descriptor_,
      AllEquipmentRandomLevel::default_instance_,
      AllEquipmentRandomLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllEquipmentRandomLevel));
  EquipmentRandomEffect_descriptor_ = file->message_type(6);
  static const int EquipmentRandomEffect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomEffect, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomEffect, effectId_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomEffect, chance_),
  };
  EquipmentRandomEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRandomEffect_descriptor_,
      EquipmentRandomEffect::default_instance_,
      EquipmentRandomEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRandomEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRandomEffect));
  AllEquipmentRandomEffect_descriptor_ = file->message_type(7);
  static const int AllEquipmentRandomEffect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomEffect, equipmentRandomEffect_),
  };
  AllEquipmentRandomEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllEquipmentRandomEffect_descriptor_,
      AllEquipmentRandomEffect::default_instance_,
      AllEquipmentRandomEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllEquipmentRandomEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllEquipmentRandomEffect));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipmentRandom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRandomColor_descriptor_, &EquipmentRandomColor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllEquipmentRandomColor_descriptor_, &AllEquipmentRandomColor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRandomPos_descriptor_, &EquipmentRandomPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllEquipmentRandomPos_descriptor_, &AllEquipmentRandomPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRandomLevel_descriptor_, &EquipmentRandomLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllEquipmentRandomLevel_descriptor_, &AllEquipmentRandomLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRandomEffect_descriptor_, &EquipmentRandomEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllEquipmentRandomEffect_descriptor_, &AllEquipmentRandomEffect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipmentRandom_2eproto() {
  delete EquipmentRandomColor::default_instance_;
  delete EquipmentRandomColor_reflection_;
  delete AllEquipmentRandomColor::default_instance_;
  delete AllEquipmentRandomColor_reflection_;
  delete EquipmentRandomPos::default_instance_;
  delete EquipmentRandomPos_reflection_;
  delete AllEquipmentRandomPos::default_instance_;
  delete AllEquipmentRandomPos_reflection_;
  delete EquipmentRandomLevel::default_instance_;
  delete EquipmentRandomLevel_reflection_;
  delete AllEquipmentRandomLevel::default_instance_;
  delete AllEquipmentRandomLevel_reflection_;
  delete EquipmentRandomEffect::default_instance_;
  delete EquipmentRandomEffect_reflection_;
  delete AllEquipmentRandomEffect::default_instance_;
  delete AllEquipmentRandomEffect_reflection_;
}

void protobuf_AddDesc_EquipmentRandom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EquipmentInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025EquipmentRandom.proto\032\023EquipmentInfo.p"
    "roto\"r\n\024EquipmentRandomColor\022\'\n\005color\030\001 "
    "\001(\0162\030.EquipmentInfo.ColorType\022\017\n\007chance1"
    "\030\002 \001(\005\022\017\n\007chance2\030\003 \001(\005\022\017\n\007chance3\030\004 \001(\005"
    "\"N\n\027AllEquipmentRandomColor\0223\n\024equipment"
    "RandomColor\030\001 \003(\0132\025.EquipmentRandomColor"
    "\"\213\001\n\022EquipmentRandomPos\022 \n\003pos\030\001 \001(\0162\023.E"
    "quipmentInfo.Type\022\013\n\003atk\030\002 \001(\005\022\013\n\003def\030\003 "
    "\001(\005\022\n\n\002hp\030\004 \001(\005\022\014\n\004crit\030\005 \001(\005\022\020\n\010accurac"
    "y\030\006 \001(\005\022\r\n\005dodge\030\007 \001(\005\"H\n\025AllEquipmentRa"
    "ndomPos\022/\n\022equipmentRandomPos\030\001 \003(\0132\023.Eq"
    "uipmentRandomPos\"\363\001\n\024EquipmentRandomLeve"
    "l\022\r\n\005level\030\001 \001(\005\022\016\n\006atkMin\030\002 \001(\005\022\016\n\006atkM"
    "ax\030\003 \001(\005\022\016\n\006defMin\030\004 \001(\005\022\016\n\006defMax\030\005 \001(\005"
    "\022\r\n\005hpMin\030\006 \001(\005\022\r\n\005hpMax\030\007 \001(\005\022\017\n\007critMi"
    "n\030\010 \001(\005\022\017\n\007critMax\030\t \001(\005\022\023\n\013accuracyMin\030"
    "\n \001(\005\022\023\n\013accuracyMax\030\013 \001(\005\022\020\n\010dodgeMin\030\014"
    " \001(\005\022\020\n\010dodgeMax\030\r \001(\005\"N\n\027AllEquipmentRa"
    "ndomLevel\0223\n\024equipmentRandomLevel\030\001 \003(\0132"
    "\025.EquipmentRandomLevel\"E\n\025EquipmentRando"
    "mEffect\022\n\n\002id\030\001 \001(\005\022\020\n\010effectId\030\002 \001(\005\022\016\n"
    "\006chance\030\003 \001(\005\"Q\n\030AllEquipmentRandomEffec"
    "t\0225\n\025equipmentRandomEffect\030\001 \003(\0132\026.Equip"
    "mentRandomEffect", 936);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipmentRandom.proto", &protobuf_RegisterTypes);
  EquipmentRandomColor::default_instance_ = new EquipmentRandomColor();
  AllEquipmentRandomColor::default_instance_ = new AllEquipmentRandomColor();
  EquipmentRandomPos::default_instance_ = new EquipmentRandomPos();
  AllEquipmentRandomPos::default_instance_ = new AllEquipmentRandomPos();
  EquipmentRandomLevel::default_instance_ = new EquipmentRandomLevel();
  AllEquipmentRandomLevel::default_instance_ = new AllEquipmentRandomLevel();
  EquipmentRandomEffect::default_instance_ = new EquipmentRandomEffect();
  AllEquipmentRandomEffect::default_instance_ = new AllEquipmentRandomEffect();
  EquipmentRandomColor::default_instance_->InitAsDefaultInstance();
  AllEquipmentRandomColor::default_instance_->InitAsDefaultInstance();
  EquipmentRandomPos::default_instance_->InitAsDefaultInstance();
  AllEquipmentRandomPos::default_instance_->InitAsDefaultInstance();
  EquipmentRandomLevel::default_instance_->InitAsDefaultInstance();
  AllEquipmentRandomLevel::default_instance_->InitAsDefaultInstance();
  EquipmentRandomEffect::default_instance_->InitAsDefaultInstance();
  AllEquipmentRandomEffect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentRandom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentRandom_2eproto {
  StaticDescriptorInitializer_EquipmentRandom_2eproto() {
    protobuf_AddDesc_EquipmentRandom_2eproto();
  }
} static_descriptor_initializer_EquipmentRandom_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRandomColor::kColorFieldNumber;
const int EquipmentRandomColor::kChance1FieldNumber;
const int EquipmentRandomColor::kChance2FieldNumber;
const int EquipmentRandomColor::kChance3FieldNumber;
#endif  // !_MSC_VER

EquipmentRandomColor::EquipmentRandomColor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRandomColor::InitAsDefaultInstance() {
}

EquipmentRandomColor::EquipmentRandomColor(const EquipmentRandomColor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRandomColor::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  chance1_ = 0;
  chance2_ = 0;
  chance3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRandomColor::~EquipmentRandomColor() {
  SharedDtor();
}

void EquipmentRandomColor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRandomColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRandomColor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRandomColor_descriptor_;
}

const EquipmentRandomColor& EquipmentRandomColor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRandom_2eproto();  return *default_instance_;
}

EquipmentRandomColor* EquipmentRandomColor::default_instance_ = NULL;

EquipmentRandomColor* EquipmentRandomColor::New() const {
  return new EquipmentRandomColor;
}

void EquipmentRandomColor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_ = 0;
    chance1_ = 0;
    chance2_ = 0;
    chance3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRandomColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EquipmentInfo.ColorType color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EquipmentInfo_ColorType_IsValid(value)) {
            set_color(static_cast< ::EquipmentInfo_ColorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chance1;
        break;
      }
      
      // optional int32 chance1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chance1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chance1_)));
          set_has_chance1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chance2;
        break;
      }
      
      // optional int32 chance2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chance2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chance2_)));
          set_has_chance2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chance3;
        break;
      }
      
      // optional int32 chance3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chance3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chance3_)));
          set_has_chance3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRandomColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EquipmentInfo.ColorType color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }
  
  // optional int32 chance1 = 2;
  if (has_chance1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chance1(), output);
  }
  
  // optional int32 chance2 = 3;
  if (has_chance2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chance2(), output);
  }
  
  // optional int32 chance3 = 4;
  if (has_chance3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chance3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRandomColor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EquipmentInfo.ColorType color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }
  
  // optional int32 chance1 = 2;
  if (has_chance1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chance1(), target);
  }
  
  // optional int32 chance2 = 3;
  if (has_chance2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chance2(), target);
  }
  
  // optional int32 chance3 = 4;
  if (has_chance3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chance3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRandomColor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EquipmentInfo.ColorType color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }
    
    // optional int32 chance1 = 2;
    if (has_chance1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chance1());
    }
    
    // optional int32 chance2 = 3;
    if (has_chance2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chance2());
    }
    
    // optional int32 chance3 = 4;
    if (has_chance3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chance3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRandomColor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRandomColor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRandomColor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRandomColor::MergeFrom(const EquipmentRandomColor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_chance1()) {
      set_chance1(from.chance1());
    }
    if (from.has_chance2()) {
      set_chance2(from.chance2());
    }
    if (from.has_chance3()) {
      set_chance3(from.chance3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRandomColor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRandomColor::CopyFrom(const EquipmentRandomColor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRandomColor::IsInitialized() const {
  
  return true;
}

void EquipmentRandomColor::Swap(EquipmentRandomColor* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(chance1_, other->chance1_);
    std::swap(chance2_, other->chance2_);
    std::swap(chance3_, other->chance3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRandomColor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRandomColor_descriptor_;
  metadata.reflection = EquipmentRandomColor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllEquipmentRandomColor::kEquipmentRandomColorFieldNumber;
#endif  // !_MSC_VER

AllEquipmentRandomColor::AllEquipmentRandomColor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllEquipmentRandomColor::InitAsDefaultInstance() {
}

AllEquipmentRandomColor::AllEquipmentRandomColor(const AllEquipmentRandomColor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllEquipmentRandomColor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllEquipmentRandomColor::~AllEquipmentRandomColor() {
  SharedDtor();
}

void AllEquipmentRandomColor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllEquipmentRandomColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllEquipmentRandomColor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllEquipmentRandomColor_descriptor_;
}

const AllEquipmentRandomColor& AllEquipmentRandomColor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRandom_2eproto();  return *default_instance_;
}

AllEquipmentRandomColor* AllEquipmentRandomColor::default_instance_ = NULL;

AllEquipmentRandomColor* AllEquipmentRandomColor::New() const {
  return new AllEquipmentRandomColor;
}

void AllEquipmentRandomColor::Clear() {
  equipmentRandomColor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllEquipmentRandomColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipmentRandomColor equipmentRandomColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentRandomColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentRandomColor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipmentRandomColor;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllEquipmentRandomColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipmentRandomColor equipmentRandomColor = 1;
  for (int i = 0; i < this->equipmentRandomColor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipmentRandomColor(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllEquipmentRandomColor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipmentRandomColor equipmentRandomColor = 1;
  for (int i = 0; i < this->equipmentRandomColor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipmentRandomColor(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllEquipmentRandomColor::ByteSize() const {
  int total_size = 0;
  
  // repeated .EquipmentRandomColor equipmentRandomColor = 1;
  total_size += 1 * this->equipmentRandomColor_size();
  for (int i = 0; i < this->equipmentRandomColor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentRandomColor(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllEquipmentRandomColor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllEquipmentRandomColor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllEquipmentRandomColor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllEquipmentRandomColor::MergeFrom(const AllEquipmentRandomColor& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmentRandomColor_.MergeFrom(from.equipmentRandomColor_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllEquipmentRandomColor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllEquipmentRandomColor::CopyFrom(const AllEquipmentRandomColor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllEquipmentRandomColor::IsInitialized() const {
  
  return true;
}

void AllEquipmentRandomColor::Swap(AllEquipmentRandomColor* other) {
  if (other != this) {
    equipmentRandomColor_.Swap(&other->equipmentRandomColor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllEquipmentRandomColor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllEquipmentRandomColor_descriptor_;
  metadata.reflection = AllEquipmentRandomColor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRandomPos::kPosFieldNumber;
const int EquipmentRandomPos::kAtkFieldNumber;
const int EquipmentRandomPos::kDefFieldNumber;
const int EquipmentRandomPos::kHpFieldNumber;
const int EquipmentRandomPos::kCritFieldNumber;
const int EquipmentRandomPos::kAccuracyFieldNumber;
const int EquipmentRandomPos::kDodgeFieldNumber;
#endif  // !_MSC_VER

EquipmentRandomPos::EquipmentRandomPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRandomPos::InitAsDefaultInstance() {
}

EquipmentRandomPos::EquipmentRandomPos(const EquipmentRandomPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRandomPos::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  atk_ = 0;
  def_ = 0;
  hp_ = 0;
  crit_ = 0;
  accuracy_ = 0;
  dodge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRandomPos::~EquipmentRandomPos() {
  SharedDtor();
}

void EquipmentRandomPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRandomPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRandomPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRandomPos_descriptor_;
}

const EquipmentRandomPos& EquipmentRandomPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRandom_2eproto();  return *default_instance_;
}

EquipmentRandomPos* EquipmentRandomPos::default_instance_ = NULL;

EquipmentRandomPos* EquipmentRandomPos::New() const {
  return new EquipmentRandomPos;
}

void EquipmentRandomPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    atk_ = 0;
    def_ = 0;
    hp_ = 0;
    crit_ = 0;
    accuracy_ = 0;
    dodge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRandomPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EquipmentInfo.Type pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EquipmentInfo_Type_IsValid(value)) {
            set_pos(static_cast< ::EquipmentInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atk;
        break;
      }
      
      // optional int32 atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def;
        break;
      }
      
      // optional int32 def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }
      
      // optional int32 crit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_accuracy;
        break;
      }
      
      // optional int32 accuracy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dodge;
        break;
      }
      
      // optional int32 dodge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRandomPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EquipmentInfo.Type pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pos(), output);
  }
  
  // optional int32 atk = 2;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atk(), output);
  }
  
  // optional int32 def = 3;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->def(), output);
  }
  
  // optional int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }
  
  // optional int32 crit = 5;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->crit(), output);
  }
  
  // optional int32 accuracy = 6;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->accuracy(), output);
  }
  
  // optional int32 dodge = 7;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dodge(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRandomPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EquipmentInfo.Type pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pos(), target);
  }
  
  // optional int32 atk = 2;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atk(), target);
  }
  
  // optional int32 def = 3;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->def(), target);
  }
  
  // optional int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }
  
  // optional int32 crit = 5;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->crit(), target);
  }
  
  // optional int32 accuracy = 6;
  if (has_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->accuracy(), target);
  }
  
  // optional int32 dodge = 7;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dodge(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRandomPos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EquipmentInfo.Type pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }
    
    // optional int32 atk = 2;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk());
    }
    
    // optional int32 def = 3;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def());
    }
    
    // optional int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 crit = 5;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }
    
    // optional int32 accuracy = 6;
    if (has_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accuracy());
    }
    
    // optional int32 dodge = 7;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodge());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRandomPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRandomPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRandomPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRandomPos::MergeFrom(const EquipmentRandomPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRandomPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRandomPos::CopyFrom(const EquipmentRandomPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRandomPos::IsInitialized() const {
  
  return true;
}

void EquipmentRandomPos::Swap(EquipmentRandomPos* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(hp_, other->hp_);
    std::swap(crit_, other->crit_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(dodge_, other->dodge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRandomPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRandomPos_descriptor_;
  metadata.reflection = EquipmentRandomPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllEquipmentRandomPos::kEquipmentRandomPosFieldNumber;
#endif  // !_MSC_VER

AllEquipmentRandomPos::AllEquipmentRandomPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllEquipmentRandomPos::InitAsDefaultInstance() {
}

AllEquipmentRandomPos::AllEquipmentRandomPos(const AllEquipmentRandomPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllEquipmentRandomPos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllEquipmentRandomPos::~AllEquipmentRandomPos() {
  SharedDtor();
}

void AllEquipmentRandomPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllEquipmentRandomPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllEquipmentRandomPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllEquipmentRandomPos_descriptor_;
}

const AllEquipmentRandomPos& AllEquipmentRandomPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRandom_2eproto();  return *default_instance_;
}

AllEquipmentRandomPos* AllEquipmentRandomPos::default_instance_ = NULL;

AllEquipmentRandomPos* AllEquipmentRandomPos::New() const {
  return new AllEquipmentRandomPos;
}

void AllEquipmentRandomPos::Clear() {
  equipmentRandomPos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllEquipmentRandomPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipmentRandomPos equipmentRandomPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentRandomPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentRandomPos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipmentRandomPos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllEquipmentRandomPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipmentRandomPos equipmentRandomPos = 1;
  for (int i = 0; i < this->equipmentRandomPos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipmentRandomPos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllEquipmentRandomPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipmentRandomPos equipmentRandomPos = 1;
  for (int i = 0; i < this->equipmentRandomPos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipmentRandomPos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllEquipmentRandomPos::ByteSize() const {
  int total_size = 0;
  
  // repeated .EquipmentRandomPos equipmentRandomPos = 1;
  total_size += 1 * this->equipmentRandomPos_size();
  for (int i = 0; i < this->equipmentRandomPos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentRandomPos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllEquipmentRandomPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllEquipmentRandomPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllEquipmentRandomPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllEquipmentRandomPos::MergeFrom(const AllEquipmentRandomPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmentRandomPos_.MergeFrom(from.equipmentRandomPos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllEquipmentRandomPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllEquipmentRandomPos::CopyFrom(const AllEquipmentRandomPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllEquipmentRandomPos::IsInitialized() const {
  
  return true;
}

void AllEquipmentRandomPos::Swap(AllEquipmentRandomPos* other) {
  if (other != this) {
    equipmentRandomPos_.Swap(&other->equipmentRandomPos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllEquipmentRandomPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllEquipmentRandomPos_descriptor_;
  metadata.reflection = AllEquipmentRandomPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRandomLevel::kLevelFieldNumber;
const int EquipmentRandomLevel::kAtkMinFieldNumber;
const int EquipmentRandomLevel::kAtkMaxFieldNumber;
const int EquipmentRandomLevel::kDefMinFieldNumber;
const int EquipmentRandomLevel::kDefMaxFieldNumber;
const int EquipmentRandomLevel::kHpMinFieldNumber;
const int EquipmentRandomLevel::kHpMaxFieldNumber;
const int EquipmentRandomLevel::kCritMinFieldNumber;
const int EquipmentRandomLevel::kCritMaxFieldNumber;
const int EquipmentRandomLevel::kAccuracyMinFieldNumber;
const int EquipmentRandomLevel::kAccuracyMaxFieldNumber;
const int EquipmentRandomLevel::kDodgeMinFieldNumber;
const int EquipmentRandomLevel::kDodgeMaxFieldNumber;
#endif  // !_MSC_VER

EquipmentRandomLevel::EquipmentRandomLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRandomLevel::InitAsDefaultInstance() {
}

EquipmentRandomLevel::EquipmentRandomLevel(const EquipmentRandomLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRandomLevel::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  atkMin_ = 0;
  atkMax_ = 0;
  defMin_ = 0;
  defMax_ = 0;
  hpMin_ = 0;
  hpMax_ = 0;
  critMin_ = 0;
  critMax_ = 0;
  accuracyMin_ = 0;
  accuracyMax_ = 0;
  dodgeMin_ = 0;
  dodgeMax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRandomLevel::~EquipmentRandomLevel() {
  SharedDtor();
}

void EquipmentRandomLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRandomLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRandomLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRandomLevel_descriptor_;
}

const EquipmentRandomLevel& EquipmentRandomLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRandom_2eproto();  return *default_instance_;
}

EquipmentRandomLevel* EquipmentRandomLevel::default_instance_ = NULL;

EquipmentRandomLevel* EquipmentRandomLevel::New() const {
  return new EquipmentRandomLevel;
}

void EquipmentRandomLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    atkMin_ = 0;
    atkMax_ = 0;
    defMin_ = 0;
    defMax_ = 0;
    hpMin_ = 0;
    hpMax_ = 0;
    critMin_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    critMax_ = 0;
    accuracyMin_ = 0;
    accuracyMax_ = 0;
    dodgeMin_ = 0;
    dodgeMax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRandomLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atkMin;
        break;
      }
      
      // optional int32 atkMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atkMin_)));
          set_has_atkMin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_atkMax;
        break;
      }
      
      // optional int32 atkMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atkMax_)));
          set_has_atkMax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defMin;
        break;
      }
      
      // optional int32 defMin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defMin_)));
          set_has_defMin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defMax;
        break;
      }
      
      // optional int32 defMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defMax_)));
          set_has_defMax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hpMin;
        break;
      }
      
      // optional int32 hpMin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpMin_)));
          set_has_hpMin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hpMax;
        break;
      }
      
      // optional int32 hpMax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpMax_)));
          set_has_hpMax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_critMin;
        break;
      }
      
      // optional int32 critMin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critMin_)));
          set_has_critMin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_critMax;
        break;
      }
      
      // optional int32 critMax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critMax_)));
          set_has_critMax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_accuracyMin;
        break;
      }
      
      // optional int32 accuracyMin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accuracyMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accuracyMin_)));
          set_has_accuracyMin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_accuracyMax;
        break;
      }
      
      // optional int32 accuracyMax = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accuracyMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accuracyMax_)));
          set_has_accuracyMax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dodgeMin;
        break;
      }
      
      // optional int32 dodgeMin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodgeMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodgeMin_)));
          set_has_dodgeMin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dodgeMax;
        break;
      }
      
      // optional int32 dodgeMax = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodgeMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodgeMax_)));
          set_has_dodgeMax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRandomLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional int32 atkMin = 2;
  if (has_atkMin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atkMin(), output);
  }
  
  // optional int32 atkMax = 3;
  if (has_atkMax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->atkMax(), output);
  }
  
  // optional int32 defMin = 4;
  if (has_defMin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->defMin(), output);
  }
  
  // optional int32 defMax = 5;
  if (has_defMax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->defMax(), output);
  }
  
  // optional int32 hpMin = 6;
  if (has_hpMin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hpMin(), output);
  }
  
  // optional int32 hpMax = 7;
  if (has_hpMax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hpMax(), output);
  }
  
  // optional int32 critMin = 8;
  if (has_critMin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->critMin(), output);
  }
  
  // optional int32 critMax = 9;
  if (has_critMax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->critMax(), output);
  }
  
  // optional int32 accuracyMin = 10;
  if (has_accuracyMin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->accuracyMin(), output);
  }
  
  // optional int32 accuracyMax = 11;
  if (has_accuracyMax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->accuracyMax(), output);
  }
  
  // optional int32 dodgeMin = 12;
  if (has_dodgeMin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dodgeMin(), output);
  }
  
  // optional int32 dodgeMax = 13;
  if (has_dodgeMax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dodgeMax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRandomLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional int32 atkMin = 2;
  if (has_atkMin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atkMin(), target);
  }
  
  // optional int32 atkMax = 3;
  if (has_atkMax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->atkMax(), target);
  }
  
  // optional int32 defMin = 4;
  if (has_defMin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->defMin(), target);
  }
  
  // optional int32 defMax = 5;
  if (has_defMax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->defMax(), target);
  }
  
  // optional int32 hpMin = 6;
  if (has_hpMin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hpMin(), target);
  }
  
  // optional int32 hpMax = 7;
  if (has_hpMax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hpMax(), target);
  }
  
  // optional int32 critMin = 8;
  if (has_critMin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->critMin(), target);
  }
  
  // optional int32 critMax = 9;
  if (has_critMax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->critMax(), target);
  }
  
  // optional int32 accuracyMin = 10;
  if (has_accuracyMin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->accuracyMin(), target);
  }
  
  // optional int32 accuracyMax = 11;
  if (has_accuracyMax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->accuracyMax(), target);
  }
  
  // optional int32 dodgeMin = 12;
  if (has_dodgeMin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dodgeMin(), target);
  }
  
  // optional int32 dodgeMax = 13;
  if (has_dodgeMax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dodgeMax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRandomLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 atkMin = 2;
    if (has_atkMin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkMin());
    }
    
    // optional int32 atkMax = 3;
    if (has_atkMax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkMax());
    }
    
    // optional int32 defMin = 4;
    if (has_defMin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defMin());
    }
    
    // optional int32 defMax = 5;
    if (has_defMax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defMax());
    }
    
    // optional int32 hpMin = 6;
    if (has_hpMin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpMin());
    }
    
    // optional int32 hpMax = 7;
    if (has_hpMax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpMax());
    }
    
    // optional int32 critMin = 8;
    if (has_critMin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critMin());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 critMax = 9;
    if (has_critMax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critMax());
    }
    
    // optional int32 accuracyMin = 10;
    if (has_accuracyMin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accuracyMin());
    }
    
    // optional int32 accuracyMax = 11;
    if (has_accuracyMax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accuracyMax());
    }
    
    // optional int32 dodgeMin = 12;
    if (has_dodgeMin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodgeMin());
    }
    
    // optional int32 dodgeMax = 13;
    if (has_dodgeMax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodgeMax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRandomLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRandomLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRandomLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRandomLevel::MergeFrom(const EquipmentRandomLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_atkMin()) {
      set_atkMin(from.atkMin());
    }
    if (from.has_atkMax()) {
      set_atkMax(from.atkMax());
    }
    if (from.has_defMin()) {
      set_defMin(from.defMin());
    }
    if (from.has_defMax()) {
      set_defMax(from.defMax());
    }
    if (from.has_hpMin()) {
      set_hpMin(from.hpMin());
    }
    if (from.has_hpMax()) {
      set_hpMax(from.hpMax());
    }
    if (from.has_critMin()) {
      set_critMin(from.critMin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_critMax()) {
      set_critMax(from.critMax());
    }
    if (from.has_accuracyMin()) {
      set_accuracyMin(from.accuracyMin());
    }
    if (from.has_accuracyMax()) {
      set_accuracyMax(from.accuracyMax());
    }
    if (from.has_dodgeMin()) {
      set_dodgeMin(from.dodgeMin());
    }
    if (from.has_dodgeMax()) {
      set_dodgeMax(from.dodgeMax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRandomLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRandomLevel::CopyFrom(const EquipmentRandomLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRandomLevel::IsInitialized() const {
  
  return true;
}

void EquipmentRandomLevel::Swap(EquipmentRandomLevel* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(atkMin_, other->atkMin_);
    std::swap(atkMax_, other->atkMax_);
    std::swap(defMin_, other->defMin_);
    std::swap(defMax_, other->defMax_);
    std::swap(hpMin_, other->hpMin_);
    std::swap(hpMax_, other->hpMax_);
    std::swap(critMin_, other->critMin_);
    std::swap(critMax_, other->critMax_);
    std::swap(accuracyMin_, other->accuracyMin_);
    std::swap(accuracyMax_, other->accuracyMax_);
    std::swap(dodgeMin_, other->dodgeMin_);
    std::swap(dodgeMax_, other->dodgeMax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRandomLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRandomLevel_descriptor_;
  metadata.reflection = EquipmentRandomLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllEquipmentRandomLevel::kEquipmentRandomLevelFieldNumber;
#endif  // !_MSC_VER

AllEquipmentRandomLevel::AllEquipmentRandomLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllEquipmentRandomLevel::InitAsDefaultInstance() {
}

AllEquipmentRandomLevel::AllEquipmentRandomLevel(const AllEquipmentRandomLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllEquipmentRandomLevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllEquipmentRandomLevel::~AllEquipmentRandomLevel() {
  SharedDtor();
}

void AllEquipmentRandomLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllEquipmentRandomLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllEquipmentRandomLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllEquipmentRandomLevel_descriptor_;
}

const AllEquipmentRandomLevel& AllEquipmentRandomLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRandom_2eproto();  return *default_instance_;
}

AllEquipmentRandomLevel* AllEquipmentRandomLevel::default_instance_ = NULL;

AllEquipmentRandomLevel* AllEquipmentRandomLevel::New() const {
  return new AllEquipmentRandomLevel;
}

void AllEquipmentRandomLevel::Clear() {
  equipmentRandomLevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllEquipmentRandomLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipmentRandomLevel equipmentRandomLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentRandomLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentRandomLevel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipmentRandomLevel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllEquipmentRandomLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipmentRandomLevel equipmentRandomLevel = 1;
  for (int i = 0; i < this->equipmentRandomLevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipmentRandomLevel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllEquipmentRandomLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipmentRandomLevel equipmentRandomLevel = 1;
  for (int i = 0; i < this->equipmentRandomLevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipmentRandomLevel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllEquipmentRandomLevel::ByteSize() const {
  int total_size = 0;
  
  // repeated .EquipmentRandomLevel equipmentRandomLevel = 1;
  total_size += 1 * this->equipmentRandomLevel_size();
  for (int i = 0; i < this->equipmentRandomLevel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentRandomLevel(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllEquipmentRandomLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllEquipmentRandomLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllEquipmentRandomLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllEquipmentRandomLevel::MergeFrom(const AllEquipmentRandomLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmentRandomLevel_.MergeFrom(from.equipmentRandomLevel_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllEquipmentRandomLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllEquipmentRandomLevel::CopyFrom(const AllEquipmentRandomLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllEquipmentRandomLevel::IsInitialized() const {
  
  return true;
}

void AllEquipmentRandomLevel::Swap(AllEquipmentRandomLevel* other) {
  if (other != this) {
    equipmentRandomLevel_.Swap(&other->equipmentRandomLevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllEquipmentRandomLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllEquipmentRandomLevel_descriptor_;
  metadata.reflection = AllEquipmentRandomLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRandomEffect::kIdFieldNumber;
const int EquipmentRandomEffect::kEffectIdFieldNumber;
const int EquipmentRandomEffect::kChanceFieldNumber;
#endif  // !_MSC_VER

EquipmentRandomEffect::EquipmentRandomEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRandomEffect::InitAsDefaultInstance() {
}

EquipmentRandomEffect::EquipmentRandomEffect(const EquipmentRandomEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRandomEffect::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  effectId_ = 0;
  chance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRandomEffect::~EquipmentRandomEffect() {
  SharedDtor();
}

void EquipmentRandomEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRandomEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRandomEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRandomEffect_descriptor_;
}

const EquipmentRandomEffect& EquipmentRandomEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRandom_2eproto();  return *default_instance_;
}

EquipmentRandomEffect* EquipmentRandomEffect::default_instance_ = NULL;

EquipmentRandomEffect* EquipmentRandomEffect::New() const {
  return new EquipmentRandomEffect;
}

void EquipmentRandomEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    effectId_ = 0;
    chance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRandomEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effectId;
        break;
      }
      
      // optional int32 effectId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectId_)));
          set_has_effectId();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chance;
        break;
      }
      
      // optional int32 chance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chance_)));
          set_has_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRandomEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 effectId = 2;
  if (has_effectId()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effectId(), output);
  }
  
  // optional int32 chance = 3;
  if (has_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRandomEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 effectId = 2;
  if (has_effectId()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effectId(), target);
  }
  
  // optional int32 chance = 3;
  if (has_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRandomEffect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 effectId = 2;
    if (has_effectId()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectId());
    }
    
    // optional int32 chance = 3;
    if (has_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRandomEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRandomEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRandomEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRandomEffect::MergeFrom(const EquipmentRandomEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_effectId()) {
      set_effectId(from.effectId());
    }
    if (from.has_chance()) {
      set_chance(from.chance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRandomEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRandomEffect::CopyFrom(const EquipmentRandomEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRandomEffect::IsInitialized() const {
  
  return true;
}

void EquipmentRandomEffect::Swap(EquipmentRandomEffect* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(effectId_, other->effectId_);
    std::swap(chance_, other->chance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRandomEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRandomEffect_descriptor_;
  metadata.reflection = EquipmentRandomEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllEquipmentRandomEffect::kEquipmentRandomEffectFieldNumber;
#endif  // !_MSC_VER

AllEquipmentRandomEffect::AllEquipmentRandomEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllEquipmentRandomEffect::InitAsDefaultInstance() {
}

AllEquipmentRandomEffect::AllEquipmentRandomEffect(const AllEquipmentRandomEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllEquipmentRandomEffect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllEquipmentRandomEffect::~AllEquipmentRandomEffect() {
  SharedDtor();
}

void AllEquipmentRandomEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllEquipmentRandomEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllEquipmentRandomEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllEquipmentRandomEffect_descriptor_;
}

const AllEquipmentRandomEffect& AllEquipmentRandomEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentRandom_2eproto();  return *default_instance_;
}

AllEquipmentRandomEffect* AllEquipmentRandomEffect::default_instance_ = NULL;

AllEquipmentRandomEffect* AllEquipmentRandomEffect::New() const {
  return new AllEquipmentRandomEffect;
}

void AllEquipmentRandomEffect::Clear() {
  equipmentRandomEffect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllEquipmentRandomEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipmentRandomEffect equipmentRandomEffect = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentRandomEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentRandomEffect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipmentRandomEffect;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllEquipmentRandomEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EquipmentRandomEffect equipmentRandomEffect = 1;
  for (int i = 0; i < this->equipmentRandomEffect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipmentRandomEffect(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllEquipmentRandomEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EquipmentRandomEffect equipmentRandomEffect = 1;
  for (int i = 0; i < this->equipmentRandomEffect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipmentRandomEffect(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllEquipmentRandomEffect::ByteSize() const {
  int total_size = 0;
  
  // repeated .EquipmentRandomEffect equipmentRandomEffect = 1;
  total_size += 1 * this->equipmentRandomEffect_size();
  for (int i = 0; i < this->equipmentRandomEffect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentRandomEffect(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllEquipmentRandomEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllEquipmentRandomEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllEquipmentRandomEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllEquipmentRandomEffect::MergeFrom(const AllEquipmentRandomEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmentRandomEffect_.MergeFrom(from.equipmentRandomEffect_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllEquipmentRandomEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllEquipmentRandomEffect::CopyFrom(const AllEquipmentRandomEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllEquipmentRandomEffect::IsInitialized() const {
  
  return true;
}

void AllEquipmentRandomEffect::Swap(AllEquipmentRandomEffect* other) {
  if (other != this) {
    equipmentRandomEffect_.Swap(&other->equipmentRandomEffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllEquipmentRandomEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllEquipmentRandomEffect_descriptor_;
  metadata.reflection = AllEquipmentRandomEffect_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NPCAtt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PB_NPCAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_NPCAtt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_NPCAtt_ColorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PB_AllNPCs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_AllNPCs_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_AllPets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_AllPets_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NPCAtt_2eproto() {
  protobuf_AddDesc_NPCAtt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NPCAtt.proto");
  GOOGLE_CHECK(file != NULL);
  PB_NPCAtt_descriptor_ = file->message_type(0);
  static const int PB_NPCAtt_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, funcAtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, dropID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, peddleAudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, peddleMaxDistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, peddleMinInterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, peddleMaxInterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, talkAudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, bornTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, shockDelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, shockTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, bornEffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, bornEffectTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, specialPercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, bearAudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, dieAudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, hue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, newSpecial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, goodsID_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, goodsCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, dieEffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, Grade_),
  };
  PB_NPCAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_NPCAtt_descriptor_,
      PB_NPCAtt::default_instance_,
      PB_NPCAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_NPCAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_NPCAtt));
  PB_NPCAtt_ColorType_descriptor_ = PB_NPCAtt_descriptor_->enum_type(0);
  PB_AllNPCs_descriptor_ = file->message_type(1);
  static const int PB_AllNPCs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllNPCs, npcs_),
  };
  PB_AllNPCs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_AllNPCs_descriptor_,
      PB_AllNPCs::default_instance_,
      PB_AllNPCs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllNPCs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllNPCs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_AllNPCs));
  PB_AllPets_descriptor_ = file->message_type(2);
  static const int PB_AllPets_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllPets, pets_),
  };
  PB_AllPets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_AllPets_descriptor_,
      PB_AllPets::default_instance_,
      PB_AllPets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllPets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_AllPets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_AllPets));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NPCAtt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_NPCAtt_descriptor_, &PB_NPCAtt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_AllNPCs_descriptor_, &PB_AllNPCs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_AllPets_descriptor_, &PB_AllPets::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NPCAtt_2eproto() {
  delete PB_NPCAtt::default_instance_;
  delete PB_NPCAtt_reflection_;
  delete PB_AllNPCs::default_instance_;
  delete PB_AllNPCs_reflection_;
  delete PB_AllPets::default_instance_;
  delete PB_AllPets_reflection_;
}

void protobuf_AddDesc_NPCAtt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_RoleAtt_2eproto();
  ::protobuf_AddDesc_EquipmentInfo_2eproto();
  ::protobuf_AddDesc_FuncInfo_2eproto();
  ::protobuf_AddDesc_FightInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014NPCAtt.proto\032\rRoleAtt.proto\032\023Equipment"
    "Info.proto\032\016FuncInfo.proto\032\017FightInfo.pr"
    "oto\"\262\005\n\tPB_NPCAtt\022\n\n\002id\030\001 \001(\005\022\030\n\003att\030\002 \001"
    "(\0132\013.PB_RoleAtt\022\013\n\003pic\030\003 \001(\005\022\014\n\004desc\030\004 \001"
    "(\t\022\034\n\007funcAtt\030\005 \001(\0132\013.PB_FuncAtt\022\016\n\006drop"
    "ID\030\006 \001(\005\022\023\n\013peddleAudio\030\007 \003(\005\022\031\n\021peddleM"
    "axDistance\030\010 \001(\002\022\031\n\021peddleMinInterval\030\t "
    "\001(\005\022\031\n\021peddleMaxInterval\030\n \001(\005\022\021\n\ttalkAu"
    "dio\030\013 \003(\005\022\020\n\010bornTime\030\014 \001(\005\022\022\n\nshockDela"
    "y\030\r \001(\005\022\021\n\tshockTime\030\016 \001(\005\022\022\n\nbornEffect"
    "\030\017 \001(\005\022\026\n\016bornEffectTime\030\020 \001(\005\022\026\n\016specia"
    "lPercent\030\021 \001(\002\022\021\n\tbearAudio\030\022 \001(\005\022\020\n\010die"
    "Audio\030\023 \001(\005\022#\n\005color\030\024 \001(\0162\024.PB_NPCAtt.C"
    "olorType\022\013\n\003hue\030\025 \001(\002\022\036\n\006equips\030\026 \003(\0132\016."
    "PB_EquipAsset\022\022\n\nnewSpecial\030\027 \001(\010\022\014\n\004typ"
    "e\030\030 \001(\005\022\017\n\007quality\030\031 \001(\005\022\r\n\005level\030\032 \001(\005\022"
    "\017\n\007goodsID\030\033 \001(\005\022\022\n\ngoodsCount\030\034 \001(\005\022\021\n\t"
    "dieEffect\030\035 \001(\005\022\r\n\005Grade\030\036 \001(\005\"@\n\tColorT"
    "ype\022\t\n\005WHITE\020\000\022\t\n\005GREEN\020\001\022\010\n\004BLUE\020\002\022\n\n\006Y"
    "ELLOW\020\003\022\007\n\003RED\020\004\"&\n\nPB_AllNPCs\022\030\n\004npcs\030\001"
    " \003(\0132\n.PB_NPCAtt\"&\n\nPB_AllPets\022\030\n\004pets\030\001"
    " \003(\0132\n.PB_NPCAtt", 856);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NPCAtt.proto", &protobuf_RegisterTypes);
  PB_NPCAtt::default_instance_ = new PB_NPCAtt();
  PB_AllNPCs::default_instance_ = new PB_AllNPCs();
  PB_AllPets::default_instance_ = new PB_AllPets();
  PB_NPCAtt::default_instance_->InitAsDefaultInstance();
  PB_AllNPCs::default_instance_->InitAsDefaultInstance();
  PB_AllPets::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NPCAtt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NPCAtt_2eproto {
  StaticDescriptorInitializer_NPCAtt_2eproto() {
    protobuf_AddDesc_NPCAtt_2eproto();
  }
} static_descriptor_initializer_NPCAtt_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PB_NPCAtt_ColorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_NPCAtt_ColorType_descriptor_;
}
bool PB_NPCAtt_ColorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_NPCAtt_ColorType PB_NPCAtt::WHITE;
const PB_NPCAtt_ColorType PB_NPCAtt::GREEN;
const PB_NPCAtt_ColorType PB_NPCAtt::BLUE;
const PB_NPCAtt_ColorType PB_NPCAtt::YELLOW;
const PB_NPCAtt_ColorType PB_NPCAtt::RED;
const PB_NPCAtt_ColorType PB_NPCAtt::ColorType_MIN;
const PB_NPCAtt_ColorType PB_NPCAtt::ColorType_MAX;
const int PB_NPCAtt::ColorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PB_NPCAtt::kIdFieldNumber;
const int PB_NPCAtt::kAttFieldNumber;
const int PB_NPCAtt::kPicFieldNumber;
const int PB_NPCAtt::kDescFieldNumber;
const int PB_NPCAtt::kFuncAttFieldNumber;
const int PB_NPCAtt::kDropIDFieldNumber;
const int PB_NPCAtt::kPeddleAudioFieldNumber;
const int PB_NPCAtt::kPeddleMaxDistanceFieldNumber;
const int PB_NPCAtt::kPeddleMinIntervalFieldNumber;
const int PB_NPCAtt::kPeddleMaxIntervalFieldNumber;
const int PB_NPCAtt::kTalkAudioFieldNumber;
const int PB_NPCAtt::kBornTimeFieldNumber;
const int PB_NPCAtt::kShockDelayFieldNumber;
const int PB_NPCAtt::kShockTimeFieldNumber;
const int PB_NPCAtt::kBornEffectFieldNumber;
const int PB_NPCAtt::kBornEffectTimeFieldNumber;
const int PB_NPCAtt::kSpecialPercentFieldNumber;
const int PB_NPCAtt::kBearAudioFieldNumber;
const int PB_NPCAtt::kDieAudioFieldNumber;
const int PB_NPCAtt::kColorFieldNumber;
const int PB_NPCAtt::kHueFieldNumber;
const int PB_NPCAtt::kEquipsFieldNumber;
const int PB_NPCAtt::kNewSpecialFieldNumber;
const int PB_NPCAtt::kTypeFieldNumber;
const int PB_NPCAtt::kQualityFieldNumber;
const int PB_NPCAtt::kLevelFieldNumber;
const int PB_NPCAtt::kGoodsIDFieldNumber;
const int PB_NPCAtt::kGoodsCountFieldNumber;
const int PB_NPCAtt::kDieEffectFieldNumber;
const int PB_NPCAtt::kGradeFieldNumber;
#endif  // !_MSC_VER

PB_NPCAtt::PB_NPCAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_NPCAtt::InitAsDefaultInstance() {
  att_ = const_cast< ::PB_RoleAtt*>(&::PB_RoleAtt::default_instance());
  funcAtt_ = const_cast< ::PB_FuncAtt*>(&::PB_FuncAtt::default_instance());
}

PB_NPCAtt::PB_NPCAtt(const PB_NPCAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_NPCAtt::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  att_ = NULL;
  pic_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  funcAtt_ = NULL;
  dropID_ = 0;
  peddleMaxDistance_ = 0;
  peddleMinInterval_ = 0;
  peddleMaxInterval_ = 0;
  bornTime_ = 0;
  shockDelay_ = 0;
  shockTime_ = 0;
  bornEffect_ = 0;
  bornEffectTime_ = 0;
  specialPercent_ = 0;
  bearAudio_ = 0;
  dieAudio_ = 0;
  color_ = 0;
  hue_ = 0;
  newSpecial_ = false;
  type_ = 0;
  quality_ = 0;
  level_ = 0;
  goodsID_ = 0;
  goodsCount_ = 0;
  dieEffect_ = 0;
  Grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_NPCAtt::~PB_NPCAtt() {
  SharedDtor();
}

void PB_NPCAtt::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
    delete att_;
    delete funcAtt_;
  }
}

void PB_NPCAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_NPCAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_NPCAtt_descriptor_;
}

const PB_NPCAtt& PB_NPCAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NPCAtt_2eproto();  return *default_instance_;
}

PB_NPCAtt* PB_NPCAtt::default_instance_ = NULL;

PB_NPCAtt* PB_NPCAtt::New() const {
  return new PB_NPCAtt;
}

void PB_NPCAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_att()) {
      if (att_ != NULL) att_->::PB_RoleAtt::Clear();
    }
    pic_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_funcAtt()) {
      if (funcAtt_ != NULL) funcAtt_->::PB_FuncAtt::Clear();
    }
    dropID_ = 0;
    peddleMaxDistance_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    peddleMinInterval_ = 0;
    peddleMaxInterval_ = 0;
    bornTime_ = 0;
    shockDelay_ = 0;
    shockTime_ = 0;
    bornEffect_ = 0;
    bornEffectTime_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    specialPercent_ = 0;
    bearAudio_ = 0;
    dieAudio_ = 0;
    color_ = 0;
    hue_ = 0;
    newSpecial_ = false;
    type_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    quality_ = 0;
    level_ = 0;
    goodsID_ = 0;
    goodsCount_ = 0;
    dieEffect_ = 0;
    Grade_ = 0;
  }
  peddleAudio_.Clear();
  talkAudio_.Clear();
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_NPCAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_att;
        break;
      }
      
      // optional .PB_RoleAtt att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pic;
        break;
      }
      
      // optional int32 pic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }
      
      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_funcAtt;
        break;
      }
      
      // optional .PB_FuncAtt funcAtt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_funcAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_funcAtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dropID;
        break;
      }
      
      // optional int32 dropID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropID_)));
          set_has_dropID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_peddleAudio;
        break;
      }
      
      // repeated int32 peddleAudio = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peddleAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_peddleAudio())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_peddleAudio())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_peddleAudio;
        if (input->ExpectTag(69)) goto parse_peddleMaxDistance;
        break;
      }
      
      // optional float peddleMaxDistance = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_peddleMaxDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &peddleMaxDistance_)));
          set_has_peddleMaxDistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_peddleMinInterval;
        break;
      }
      
      // optional int32 peddleMinInterval = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peddleMinInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peddleMinInterval_)));
          set_has_peddleMinInterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_peddleMaxInterval;
        break;
      }
      
      // optional int32 peddleMaxInterval = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peddleMaxInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peddleMaxInterval_)));
          set_has_peddleMaxInterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_talkAudio;
        break;
      }
      
      // repeated int32 talkAudio = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talkAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_talkAudio())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_talkAudio())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_talkAudio;
        if (input->ExpectTag(96)) goto parse_bornTime;
        break;
      }
      
      // optional int32 bornTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornTime_)));
          set_has_bornTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_shockDelay;
        break;
      }
      
      // optional int32 shockDelay = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shockDelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shockDelay_)));
          set_has_shockDelay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_shockTime;
        break;
      }
      
      // optional int32 shockTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shockTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shockTime_)));
          set_has_shockTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bornEffect;
        break;
      }
      
      // optional int32 bornEffect = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornEffect_)));
          set_has_bornEffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bornEffectTime;
        break;
      }
      
      // optional int32 bornEffectTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornEffectTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornEffectTime_)));
          set_has_bornEffectTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_specialPercent;
        break;
      }
      
      // optional float specialPercent = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_specialPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &specialPercent_)));
          set_has_specialPercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bearAudio;
        break;
      }
      
      // optional int32 bearAudio = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bearAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bearAudio_)));
          set_has_bearAudio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_dieAudio;
        break;
      }
      
      // optional int32 dieAudio = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dieAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dieAudio_)));
          set_has_dieAudio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_color;
        break;
      }
      
      // optional .PB_NPCAtt.ColorType color = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_NPCAtt_ColorType_IsValid(value)) {
            set_color(static_cast< ::PB_NPCAtt_ColorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_hue;
        break;
      }
      
      // optional float hue = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hue_)));
          set_has_hue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_equips;
        break;
      }
      
      // repeated .PB_EquipAsset equips = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_equips;
        if (input->ExpectTag(184)) goto parse_newSpecial;
        break;
      }
      
      // optional bool newSpecial = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newSpecial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newSpecial_)));
          set_has_newSpecial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_type;
        break;
      }
      
      // optional int32 type = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_level;
        break;
      }
      
      // optional int32 level = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_goodsID;
        break;
      }
      
      // optional int32 goodsID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsID_)));
          set_has_goodsID();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_goodsCount;
        break;
      }
      
      // optional int32 goodsCount = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsCount_)));
          set_has_goodsCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_dieEffect;
        break;
      }
      
      // optional int32 dieEffect = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dieEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dieEffect_)));
          set_has_dieEffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_Grade;
        break;
      }
      
      // optional int32 Grade = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Grade_)));
          set_has_Grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_NPCAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .PB_RoleAtt att = 2;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->att(), output);
  }
  
  // optional int32 pic = 3;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pic(), output);
  }
  
  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }
  
  // optional .PB_FuncAtt funcAtt = 5;
  if (has_funcAtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->funcAtt(), output);
  }
  
  // optional int32 dropID = 6;
  if (has_dropID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dropID(), output);
  }
  
  // repeated int32 peddleAudio = 7;
  for (int i = 0; i < this->peddleAudio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->peddleAudio(i), output);
  }
  
  // optional float peddleMaxDistance = 8;
  if (has_peddleMaxDistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->peddleMaxDistance(), output);
  }
  
  // optional int32 peddleMinInterval = 9;
  if (has_peddleMinInterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->peddleMinInterval(), output);
  }
  
  // optional int32 peddleMaxInterval = 10;
  if (has_peddleMaxInterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->peddleMaxInterval(), output);
  }
  
  // repeated int32 talkAudio = 11;
  for (int i = 0; i < this->talkAudio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->talkAudio(i), output);
  }
  
  // optional int32 bornTime = 12;
  if (has_bornTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bornTime(), output);
  }
  
  // optional int32 shockDelay = 13;
  if (has_shockDelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->shockDelay(), output);
  }
  
  // optional int32 shockTime = 14;
  if (has_shockTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->shockTime(), output);
  }
  
  // optional int32 bornEffect = 15;
  if (has_bornEffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bornEffect(), output);
  }
  
  // optional int32 bornEffectTime = 16;
  if (has_bornEffectTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bornEffectTime(), output);
  }
  
  // optional float specialPercent = 17;
  if (has_specialPercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->specialPercent(), output);
  }
  
  // optional int32 bearAudio = 18;
  if (has_bearAudio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bearAudio(), output);
  }
  
  // optional int32 dieAudio = 19;
  if (has_dieAudio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->dieAudio(), output);
  }
  
  // optional .PB_NPCAtt.ColorType color = 20;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->color(), output);
  }
  
  // optional float hue = 21;
  if (has_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->hue(), output);
  }
  
  // repeated .PB_EquipAsset equips = 22;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->equips(i), output);
  }
  
  // optional bool newSpecial = 23;
  if (has_newSpecial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->newSpecial(), output);
  }
  
  // optional int32 type = 24;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->type(), output);
  }
  
  // optional int32 quality = 25;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->quality(), output);
  }
  
  // optional int32 level = 26;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->level(), output);
  }
  
  // optional int32 goodsID = 27;
  if (has_goodsID()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->goodsID(), output);
  }
  
  // optional int32 goodsCount = 28;
  if (has_goodsCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->goodsCount(), output);
  }
  
  // optional int32 dieEffect = 29;
  if (has_dieEffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->dieEffect(), output);
  }
  
  // optional int32 Grade = 30;
  if (has_Grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->Grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_NPCAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .PB_RoleAtt att = 2;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->att(), target);
  }
  
  // optional int32 pic = 3;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pic(), target);
  }
  
  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }
  
  // optional .PB_FuncAtt funcAtt = 5;
  if (has_funcAtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->funcAtt(), target);
  }
  
  // optional int32 dropID = 6;
  if (has_dropID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dropID(), target);
  }
  
  // repeated int32 peddleAudio = 7;
  for (int i = 0; i < this->peddleAudio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->peddleAudio(i), target);
  }
  
  // optional float peddleMaxDistance = 8;
  if (has_peddleMaxDistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->peddleMaxDistance(), target);
  }
  
  // optional int32 peddleMinInterval = 9;
  if (has_peddleMinInterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->peddleMinInterval(), target);
  }
  
  // optional int32 peddleMaxInterval = 10;
  if (has_peddleMaxInterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->peddleMaxInterval(), target);
  }
  
  // repeated int32 talkAudio = 11;
  for (int i = 0; i < this->talkAudio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->talkAudio(i), target);
  }
  
  // optional int32 bornTime = 12;
  if (has_bornTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bornTime(), target);
  }
  
  // optional int32 shockDelay = 13;
  if (has_shockDelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->shockDelay(), target);
  }
  
  // optional int32 shockTime = 14;
  if (has_shockTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->shockTime(), target);
  }
  
  // optional int32 bornEffect = 15;
  if (has_bornEffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bornEffect(), target);
  }
  
  // optional int32 bornEffectTime = 16;
  if (has_bornEffectTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->bornEffectTime(), target);
  }
  
  // optional float specialPercent = 17;
  if (has_specialPercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->specialPercent(), target);
  }
  
  // optional int32 bearAudio = 18;
  if (has_bearAudio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bearAudio(), target);
  }
  
  // optional int32 dieAudio = 19;
  if (has_dieAudio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->dieAudio(), target);
  }
  
  // optional .PB_NPCAtt.ColorType color = 20;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->color(), target);
  }
  
  // optional float hue = 21;
  if (has_hue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->hue(), target);
  }
  
  // repeated .PB_EquipAsset equips = 22;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->equips(i), target);
  }
  
  // optional bool newSpecial = 23;
  if (has_newSpecial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->newSpecial(), target);
  }
  
  // optional int32 type = 24;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->type(), target);
  }
  
  // optional int32 quality = 25;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->quality(), target);
  }
  
  // optional int32 level = 26;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->level(), target);
  }
  
  // optional int32 goodsID = 27;
  if (has_goodsID()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->goodsID(), target);
  }
  
  // optional int32 goodsCount = 28;
  if (has_goodsCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->goodsCount(), target);
  }
  
  // optional int32 dieEffect = 29;
  if (has_dieEffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->dieEffect(), target);
  }
  
  // optional int32 Grade = 30;
  if (has_Grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->Grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_NPCAtt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .PB_RoleAtt att = 2;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional int32 pic = 3;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }
    
    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional .PB_FuncAtt funcAtt = 5;
    if (has_funcAtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->funcAtt());
    }
    
    // optional int32 dropID = 6;
    if (has_dropID()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropID());
    }
    
    // optional float peddleMaxDistance = 8;
    if (has_peddleMaxDistance()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 peddleMinInterval = 9;
    if (has_peddleMinInterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peddleMinInterval());
    }
    
    // optional int32 peddleMaxInterval = 10;
    if (has_peddleMaxInterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peddleMaxInterval());
    }
    
    // optional int32 bornTime = 12;
    if (has_bornTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornTime());
    }
    
    // optional int32 shockDelay = 13;
    if (has_shockDelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shockDelay());
    }
    
    // optional int32 shockTime = 14;
    if (has_shockTime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shockTime());
    }
    
    // optional int32 bornEffect = 15;
    if (has_bornEffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornEffect());
    }
    
    // optional int32 bornEffectTime = 16;
    if (has_bornEffectTime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornEffectTime());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float specialPercent = 17;
    if (has_specialPercent()) {
      total_size += 2 + 4;
    }
    
    // optional int32 bearAudio = 18;
    if (has_bearAudio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bearAudio());
    }
    
    // optional int32 dieAudio = 19;
    if (has_dieAudio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dieAudio());
    }
    
    // optional .PB_NPCAtt.ColorType color = 20;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }
    
    // optional float hue = 21;
    if (has_hue()) {
      total_size += 2 + 4;
    }
    
    // optional bool newSpecial = 23;
    if (has_newSpecial()) {
      total_size += 2 + 1;
    }
    
    // optional int32 type = 24;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 quality = 25;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 level = 26;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 goodsID = 27;
    if (has_goodsID()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsID());
    }
    
    // optional int32 goodsCount = 28;
    if (has_goodsCount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsCount());
    }
    
    // optional int32 dieEffect = 29;
    if (has_dieEffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dieEffect());
    }
    
    // optional int32 Grade = 30;
    if (has_Grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->Grade());
    }
    
  }
  // repeated int32 peddleAudio = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->peddleAudio_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->peddleAudio(i));
    }
    total_size += 1 * this->peddleAudio_size() + data_size;
  }
  
  // repeated int32 talkAudio = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->talkAudio_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->talkAudio(i));
    }
    total_size += 1 * this->talkAudio_size() + data_size;
  }
  
  // repeated .PB_EquipAsset equips = 22;
  total_size += 2 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_NPCAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_NPCAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_NPCAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_NPCAtt::MergeFrom(const PB_NPCAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  peddleAudio_.MergeFrom(from.peddleAudio_);
  talkAudio_.MergeFrom(from.talkAudio_);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_att()) {
      mutable_att()->::PB_RoleAtt::MergeFrom(from.att());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_funcAtt()) {
      mutable_funcAtt()->::PB_FuncAtt::MergeFrom(from.funcAtt());
    }
    if (from.has_dropID()) {
      set_dropID(from.dropID());
    }
    if (from.has_peddleMaxDistance()) {
      set_peddleMaxDistance(from.peddleMaxDistance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_peddleMinInterval()) {
      set_peddleMinInterval(from.peddleMinInterval());
    }
    if (from.has_peddleMaxInterval()) {
      set_peddleMaxInterval(from.peddleMaxInterval());
    }
    if (from.has_bornTime()) {
      set_bornTime(from.bornTime());
    }
    if (from.has_shockDelay()) {
      set_shockDelay(from.shockDelay());
    }
    if (from.has_shockTime()) {
      set_shockTime(from.shockTime());
    }
    if (from.has_bornEffect()) {
      set_bornEffect(from.bornEffect());
    }
    if (from.has_bornEffectTime()) {
      set_bornEffectTime(from.bornEffectTime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_specialPercent()) {
      set_specialPercent(from.specialPercent());
    }
    if (from.has_bearAudio()) {
      set_bearAudio(from.bearAudio());
    }
    if (from.has_dieAudio()) {
      set_dieAudio(from.dieAudio());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_hue()) {
      set_hue(from.hue());
    }
    if (from.has_newSpecial()) {
      set_newSpecial(from.newSpecial());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_goodsID()) {
      set_goodsID(from.goodsID());
    }
    if (from.has_goodsCount()) {
      set_goodsCount(from.goodsCount());
    }
    if (from.has_dieEffect()) {
      set_dieEffect(from.dieEffect());
    }
    if (from.has_Grade()) {
      set_Grade(from.Grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_NPCAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_NPCAtt::CopyFrom(const PB_NPCAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_NPCAtt::IsInitialized() const {
  
  return true;
}

void PB_NPCAtt::Swap(PB_NPCAtt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(att_, other->att_);
    std::swap(pic_, other->pic_);
    std::swap(desc_, other->desc_);
    std::swap(funcAtt_, other->funcAtt_);
    std::swap(dropID_, other->dropID_);
    peddleAudio_.Swap(&other->peddleAudio_);
    std::swap(peddleMaxDistance_, other->peddleMaxDistance_);
    std::swap(peddleMinInterval_, other->peddleMinInterval_);
    std::swap(peddleMaxInterval_, other->peddleMaxInterval_);
    talkAudio_.Swap(&other->talkAudio_);
    std::swap(bornTime_, other->bornTime_);
    std::swap(shockDelay_, other->shockDelay_);
    std::swap(shockTime_, other->shockTime_);
    std::swap(bornEffect_, other->bornEffect_);
    std::swap(bornEffectTime_, other->bornEffectTime_);
    std::swap(specialPercent_, other->specialPercent_);
    std::swap(bearAudio_, other->bearAudio_);
    std::swap(dieAudio_, other->dieAudio_);
    std::swap(color_, other->color_);
    std::swap(hue_, other->hue_);
    equips_.Swap(&other->equips_);
    std::swap(newSpecial_, other->newSpecial_);
    std::swap(type_, other->type_);
    std::swap(quality_, other->quality_);
    std::swap(level_, other->level_);
    std::swap(goodsID_, other->goodsID_);
    std::swap(goodsCount_, other->goodsCount_);
    std::swap(dieEffect_, other->dieEffect_);
    std::swap(Grade_, other->Grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_NPCAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_NPCAtt_descriptor_;
  metadata.reflection = PB_NPCAtt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_AllNPCs::kNpcsFieldNumber;
#endif  // !_MSC_VER

PB_AllNPCs::PB_AllNPCs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_AllNPCs::InitAsDefaultInstance() {
}

PB_AllNPCs::PB_AllNPCs(const PB_AllNPCs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_AllNPCs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_AllNPCs::~PB_AllNPCs() {
  SharedDtor();
}

void PB_AllNPCs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_AllNPCs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_AllNPCs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AllNPCs_descriptor_;
}

const PB_AllNPCs& PB_AllNPCs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NPCAtt_2eproto();  return *default_instance_;
}

PB_AllNPCs* PB_AllNPCs::default_instance_ = NULL;

PB_AllNPCs* PB_AllNPCs::New() const {
  return new PB_AllNPCs;
}

void PB_AllNPCs::Clear() {
  npcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_AllNPCs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_NPCAtt npcs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_npcs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_AllNPCs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_NPCAtt npcs = 1;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npcs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_AllNPCs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_NPCAtt npcs = 1;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npcs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_AllNPCs::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_NPCAtt npcs = 1;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_AllNPCs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_AllNPCs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_AllNPCs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_AllNPCs::MergeFrom(const PB_AllNPCs& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_AllNPCs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_AllNPCs::CopyFrom(const PB_AllNPCs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_AllNPCs::IsInitialized() const {
  
  return true;
}

void PB_AllNPCs::Swap(PB_AllNPCs* other) {
  if (other != this) {
    npcs_.Swap(&other->npcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_AllNPCs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_AllNPCs_descriptor_;
  metadata.reflection = PB_AllNPCs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_AllPets::kPetsFieldNumber;
#endif  // !_MSC_VER

PB_AllPets::PB_AllPets()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_AllPets::InitAsDefaultInstance() {
}

PB_AllPets::PB_AllPets(const PB_AllPets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_AllPets::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_AllPets::~PB_AllPets() {
  SharedDtor();
}

void PB_AllPets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_AllPets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_AllPets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_AllPets_descriptor_;
}

const PB_AllPets& PB_AllPets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NPCAtt_2eproto();  return *default_instance_;
}

PB_AllPets* PB_AllPets::default_instance_ = NULL;

PB_AllPets* PB_AllPets::New() const {
  return new PB_AllPets;
}

void PB_AllPets::Clear() {
  pets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_AllPets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_NPCAtt pets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_AllPets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_NPCAtt pets = 1;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_AllPets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_NPCAtt pets = 1;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_AllPets::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_NPCAtt pets = 1;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_AllPets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_AllPets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_AllPets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_AllPets::MergeFrom(const PB_AllPets& from) {
  GOOGLE_CHECK_NE(&from, this);
  pets_.MergeFrom(from.pets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_AllPets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_AllPets::CopyFrom(const PB_AllPets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_AllPets::IsInitialized() const {
  
  return true;
}

void PB_AllPets::Swap(PB_AllPets* other) {
  if (other != this) {
    pets_.Swap(&other->pets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_AllPets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_AllPets_descriptor_;
  metadata.reflection = PB_AllPets_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlayOff.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PlayOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayOff_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayOff_Condition_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllPlayOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllPlayOff_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PlayOff_2eproto() {
  protobuf_AddDesc_PlayOff_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PlayOff.proto");
  GOOGLE_CHECK(file != NULL);
  PlayOff_descriptor_ = file->message_type(0);
  static const int PlayOff_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, arg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, awardType_),
  };
  PlayOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayOff_descriptor_,
      PlayOff::default_instance_,
      PlayOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayOff));
  PlayOff_Condition_descriptor_ = PlayOff_descriptor_->enum_type(0);
  AllPlayOff_descriptor_ = file->message_type(1);
  static const int AllPlayOff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPlayOff, playoff_),
  };
  AllPlayOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllPlayOff_descriptor_,
      AllPlayOff::default_instance_,
      AllPlayOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPlayOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPlayOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllPlayOff));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PlayOff_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayOff_descriptor_, &PlayOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllPlayOff_descriptor_, &AllPlayOff::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PlayOff_2eproto() {
  delete PlayOff::default_instance_;
  delete PlayOff_reflection_;
  delete AllPlayOff::default_instance_;
  delete AllPlayOff_reflection_;
}

void protobuf_AddDesc_PlayOff_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Award_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rPlayOff.proto\032\013Award.proto\"\277\001\n\007PlayOff"
    "\022\n\n\002id\030\001 \001(\005\022\r\n\005limit\030\002 \001(\005\022%\n\tcondition"
    "\030\003 \001(\0162\022.PlayOff.Condition\022\014\n\004arg1\030\004 \001(\005"
    "\022\014\n\004arg2\030\005 \001(\005\022\014\n\004time\030\006 \003(\005\022\014\n\004over\030\007 \003"
    "(\005\022\"\n\tawardType\030\010 \001(\0162\017.AwardInfo.Type\"\026"
    "\n\tCondition\022\t\n\005EVENT\020\000\"\'\n\nAllPlayOff\022\031\n\007"
    "playoff\030\001 \003(\0132\010.PlayOff", 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlayOff.proto", &protobuf_RegisterTypes);
  PlayOff::default_instance_ = new PlayOff();
  AllPlayOff::default_instance_ = new AllPlayOff();
  PlayOff::default_instance_->InitAsDefaultInstance();
  AllPlayOff::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PlayOff_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PlayOff_2eproto {
  StaticDescriptorInitializer_PlayOff_2eproto() {
    protobuf_AddDesc_PlayOff_2eproto();
  }
} static_descriptor_initializer_PlayOff_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlayOff_Condition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayOff_Condition_descriptor_;
}
bool PlayOff_Condition_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlayOff_Condition PlayOff::EVENT;
const PlayOff_Condition PlayOff::Condition_MIN;
const PlayOff_Condition PlayOff::Condition_MAX;
const int PlayOff::Condition_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlayOff::kIdFieldNumber;
const int PlayOff::kLimitFieldNumber;
const int PlayOff::kConditionFieldNumber;
const int PlayOff::kArg1FieldNumber;
const int PlayOff::kArg2FieldNumber;
const int PlayOff::kTimeFieldNumber;
const int PlayOff::kOverFieldNumber;
const int PlayOff::kAwardTypeFieldNumber;
#endif  // !_MSC_VER

PlayOff::PlayOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayOff::InitAsDefaultInstance() {
}

PlayOff::PlayOff(const PlayOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayOff::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  limit_ = 0;
  condition_ = 0;
  arg1_ = 0;
  arg2_ = 0;
  awardType_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayOff::~PlayOff() {
  SharedDtor();
}

void PlayOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayOff_descriptor_;
}

const PlayOff& PlayOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayOff_2eproto();  return *default_instance_;
}

PlayOff* PlayOff::default_instance_ = NULL;

PlayOff* PlayOff::New() const {
  return new PlayOff;
}

void PlayOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    limit_ = 0;
    condition_ = 0;
    arg1_ = 0;
    arg2_ = 0;
    awardType_ = 0;
  }
  time_.Clear();
  over_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_condition;
        break;
      }
      
      // optional .PlayOff.Condition condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlayOff_Condition_IsValid(value)) {
            set_condition(static_cast< ::PlayOff_Condition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arg1;
        break;
      }
      
      // optional int32 arg1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg1_)));
          set_has_arg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arg2;
        break;
      }
      
      // optional int32 arg2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg2_)));
          set_has_arg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // repeated int32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        if (input->ExpectTag(56)) goto parse_over;
        break;
      }
      
      // repeated int32 over = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_over())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_over())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_over;
        if (input->ExpectTag(64)) goto parse_awardType;
        break;
      }
      
      // optional .AwardInfo.Type awardType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AwardInfo_Type_IsValid(value)) {
            set_awardType(static_cast< ::AwardInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }
  
  // optional .PlayOff.Condition condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->condition(), output);
  }
  
  // optional int32 arg1 = 4;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->arg1(), output);
  }
  
  // optional int32 arg2 = 5;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->arg2(), output);
  }
  
  // repeated int32 time = 6;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->time(i), output);
  }
  
  // repeated int32 over = 7;
  for (int i = 0; i < this->over_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->over(i), output);
  }
  
  // optional .AwardInfo.Type awardType = 8;
  if (has_awardType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->awardType(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }
  
  // optional .PlayOff.Condition condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->condition(), target);
  }
  
  // optional int32 arg1 = 4;
  if (has_arg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->arg1(), target);
  }
  
  // optional int32 arg2 = 5;
  if (has_arg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->arg2(), target);
  }
  
  // repeated int32 time = 6;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->time(i), target);
  }
  
  // repeated int32 over = 7;
  for (int i = 0; i < this->over_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->over(i), target);
  }
  
  // optional .AwardInfo.Type awardType = 8;
  if (has_awardType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->awardType(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayOff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional .PlayOff.Condition condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->condition());
    }
    
    // optional int32 arg1 = 4;
    if (has_arg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg1());
    }
    
    // optional int32 arg2 = 5;
    if (has_arg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg2());
    }
    
    // optional .AwardInfo.Type awardType = 8;
    if (has_awardType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->awardType());
    }
    
  }
  // repeated int32 time = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->time(i));
    }
    total_size += 1 * this->time_size() + data_size;
  }
  
  // repeated int32 over = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->over_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->over(i));
    }
    total_size += 1 * this->over_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayOff::MergeFrom(const PlayOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  time_.MergeFrom(from.time_);
  over_.MergeFrom(from.over_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_arg1()) {
      set_arg1(from.arg1());
    }
    if (from.has_arg2()) {
      set_arg2(from.arg2());
    }
    if (from.has_awardType()) {
      set_awardType(from.awardType());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayOff::CopyFrom(const PlayOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayOff::IsInitialized() const {
  
  return true;
}

void PlayOff::Swap(PlayOff* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(limit_, other->limit_);
    std::swap(condition_, other->condition_);
    std::swap(arg1_, other->arg1_);
    std::swap(arg2_, other->arg2_);
    time_.Swap(&other->time_);
    over_.Swap(&other->over_);
    std::swap(awardType_, other->awardType_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayOff_descriptor_;
  metadata.reflection = PlayOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllPlayOff::kPlayoffFieldNumber;
#endif  // !_MSC_VER

AllPlayOff::AllPlayOff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllPlayOff::InitAsDefaultInstance() {
}

AllPlayOff::AllPlayOff(const AllPlayOff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllPlayOff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllPlayOff::~AllPlayOff() {
  SharedDtor();
}

void AllPlayOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllPlayOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllPlayOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllPlayOff_descriptor_;
}

const AllPlayOff& AllPlayOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayOff_2eproto();  return *default_instance_;
}

AllPlayOff* AllPlayOff::default_instance_ = NULL;

AllPlayOff* AllPlayOff::New() const {
  return new AllPlayOff;
}

void AllPlayOff::Clear() {
  playoff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllPlayOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayOff playoff = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playoff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playoff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playoff;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllPlayOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayOff playoff = 1;
  for (int i = 0; i < this->playoff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playoff(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllPlayOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayOff playoff = 1;
  for (int i = 0; i < this->playoff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playoff(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllPlayOff::ByteSize() const {
  int total_size = 0;
  
  // repeated .PlayOff playoff = 1;
  total_size += 1 * this->playoff_size();
  for (int i = 0; i < this->playoff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playoff(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllPlayOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllPlayOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllPlayOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllPlayOff::MergeFrom(const AllPlayOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  playoff_.MergeFrom(from.playoff_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllPlayOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllPlayOff::CopyFrom(const AllPlayOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllPlayOff::IsInitialized() const {
  
  return true;
}

void AllPlayOff::Swap(AllPlayOff* other) {
  if (other != this) {
    playoff_.Swap(&other->playoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllPlayOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllPlayOff_descriptor_;
  metadata.reflection = AllPlayOff_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

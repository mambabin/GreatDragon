// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayOff.proto

#ifndef PROTOBUF_PlayOff_2eproto__INCLUDED
#define PROTOBUF_PlayOff_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Award.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayOff_2eproto();
void protobuf_AssignDesc_PlayOff_2eproto();
void protobuf_ShutdownFile_PlayOff_2eproto();

class PlayOff;
class AllPlayOff;

enum PlayOff_Condition {
  PlayOff_Condition_EVENT = 0
};
bool PlayOff_Condition_IsValid(int value);
const PlayOff_Condition PlayOff_Condition_Condition_MIN = PlayOff_Condition_EVENT;
const PlayOff_Condition PlayOff_Condition_Condition_MAX = PlayOff_Condition_EVENT;
const int PlayOff_Condition_Condition_ARRAYSIZE = PlayOff_Condition_Condition_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayOff_Condition_descriptor();
inline const ::std::string& PlayOff_Condition_Name(PlayOff_Condition value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayOff_Condition_descriptor(), value);
}
inline bool PlayOff_Condition_Parse(
    const ::std::string& name, PlayOff_Condition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayOff_Condition>(
    PlayOff_Condition_descriptor(), name, value);
}
// ===================================================================

class PlayOff : public ::google::protobuf::Message {
 public:
  PlayOff();
  virtual ~PlayOff();
  
  PlayOff(const PlayOff& from);
  
  inline PlayOff& operator=(const PlayOff& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayOff& default_instance();
  
  void Swap(PlayOff* other);
  
  // implements Message ----------------------------------------------
  
  PlayOff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayOff& from);
  void MergeFrom(const PlayOff& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PlayOff_Condition Condition;
  static const Condition EVENT = PlayOff_Condition_EVENT;
  static inline bool Condition_IsValid(int value) {
    return PlayOff_Condition_IsValid(value);
  }
  static const Condition Condition_MIN =
    PlayOff_Condition_Condition_MIN;
  static const Condition Condition_MAX =
    PlayOff_Condition_Condition_MAX;
  static const int Condition_ARRAYSIZE =
    PlayOff_Condition_Condition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Condition_descriptor() {
    return PlayOff_Condition_descriptor();
  }
  static inline const ::std::string& Condition_Name(Condition value) {
    return PlayOff_Condition_Name(value);
  }
  static inline bool Condition_Parse(const ::std::string& name,
      Condition* value) {
    return PlayOff_Condition_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);
  
  // optional .PlayOff.Condition condition = 3;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 3;
  inline ::PlayOff_Condition condition() const;
  inline void set_condition(::PlayOff_Condition value);
  
  // optional int32 arg1 = 4;
  inline bool has_arg1() const;
  inline void clear_arg1();
  static const int kArg1FieldNumber = 4;
  inline ::google::protobuf::int32 arg1() const;
  inline void set_arg1(::google::protobuf::int32 value);
  
  // optional int32 arg2 = 5;
  inline bool has_arg2() const;
  inline void clear_arg2();
  static const int kArg2FieldNumber = 5;
  inline ::google::protobuf::int32 arg2() const;
  inline void set_arg2(::google::protobuf::int32 value);
  
  // repeated int32 time = 6;
  inline int time_size() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::int32 time(int index) const;
  inline void set_time(int index, ::google::protobuf::int32 value);
  inline void add_time(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_time();
  
  // repeated int32 over = 7;
  inline int over_size() const;
  inline void clear_over();
  static const int kOverFieldNumber = 7;
  inline ::google::protobuf::int32 over(int index) const;
  inline void set_over(int index, ::google::protobuf::int32 value);
  inline void add_over(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      over() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_over();
  
  // optional .AwardInfo.Type awardType = 8;
  inline bool has_awardType() const;
  inline void clear_awardType();
  static const int kAwardTypeFieldNumber = 8;
  inline ::AwardInfo_Type awardType() const;
  inline void set_awardType(::AwardInfo_Type value);
  
  // @@protoc_insertion_point(class_scope:PlayOff)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_arg1();
  inline void clear_has_arg1();
  inline void set_has_arg2();
  inline void clear_has_arg2();
  inline void set_has_awardType();
  inline void clear_has_awardType();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 limit_;
  int condition_;
  ::google::protobuf::int32 arg1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > time_;
  ::google::protobuf::int32 arg2_;
  int awardType_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > over_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_PlayOff_2eproto();
  friend void protobuf_AssignDesc_PlayOff_2eproto();
  friend void protobuf_ShutdownFile_PlayOff_2eproto();
  
  void InitAsDefaultInstance();
  static PlayOff* default_instance_;
};
// -------------------------------------------------------------------

class AllPlayOff : public ::google::protobuf::Message {
 public:
  AllPlayOff();
  virtual ~AllPlayOff();
  
  AllPlayOff(const AllPlayOff& from);
  
  inline AllPlayOff& operator=(const AllPlayOff& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllPlayOff& default_instance();
  
  void Swap(AllPlayOff* other);
  
  // implements Message ----------------------------------------------
  
  AllPlayOff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllPlayOff& from);
  void MergeFrom(const AllPlayOff& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PlayOff playoff = 1;
  inline int playoff_size() const;
  inline void clear_playoff();
  static const int kPlayoffFieldNumber = 1;
  inline const ::PlayOff& playoff(int index) const;
  inline ::PlayOff* mutable_playoff(int index);
  inline ::PlayOff* add_playoff();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayOff >&
      playoff() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayOff >*
      mutable_playoff();
  
  // @@protoc_insertion_point(class_scope:AllPlayOff)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PlayOff > playoff_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_PlayOff_2eproto();
  friend void protobuf_AssignDesc_PlayOff_2eproto();
  friend void protobuf_ShutdownFile_PlayOff_2eproto();
  
  void InitAsDefaultInstance();
  static AllPlayOff* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayOff

// optional int32 id = 1;
inline bool PlayOff::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayOff::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayOff::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayOff::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlayOff::id() const {
  return id_;
}
inline void PlayOff::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 limit = 2;
inline bool PlayOff::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayOff::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayOff::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayOff::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 PlayOff::limit() const {
  return limit_;
}
inline void PlayOff::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// optional .PlayOff.Condition condition = 3;
inline bool PlayOff::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayOff::set_has_condition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayOff::clear_has_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayOff::clear_condition() {
  condition_ = 0;
  clear_has_condition();
}
inline ::PlayOff_Condition PlayOff::condition() const {
  return static_cast< ::PlayOff_Condition >(condition_);
}
inline void PlayOff::set_condition(::PlayOff_Condition value) {
  GOOGLE_DCHECK(::PlayOff_Condition_IsValid(value));
  set_has_condition();
  condition_ = value;
}

// optional int32 arg1 = 4;
inline bool PlayOff::has_arg1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayOff::set_has_arg1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayOff::clear_has_arg1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayOff::clear_arg1() {
  arg1_ = 0;
  clear_has_arg1();
}
inline ::google::protobuf::int32 PlayOff::arg1() const {
  return arg1_;
}
inline void PlayOff::set_arg1(::google::protobuf::int32 value) {
  set_has_arg1();
  arg1_ = value;
}

// optional int32 arg2 = 5;
inline bool PlayOff::has_arg2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayOff::set_has_arg2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayOff::clear_has_arg2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayOff::clear_arg2() {
  arg2_ = 0;
  clear_has_arg2();
}
inline ::google::protobuf::int32 PlayOff::arg2() const {
  return arg2_;
}
inline void PlayOff::set_arg2(::google::protobuf::int32 value) {
  set_has_arg2();
  arg2_ = value;
}

// repeated int32 time = 6;
inline int PlayOff::time_size() const {
  return time_.size();
}
inline void PlayOff::clear_time() {
  time_.Clear();
}
inline ::google::protobuf::int32 PlayOff::time(int index) const {
  return time_.Get(index);
}
inline void PlayOff::set_time(int index, ::google::protobuf::int32 value) {
  time_.Set(index, value);
}
inline void PlayOff::add_time(::google::protobuf::int32 value) {
  time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayOff::time() const {
  return time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayOff::mutable_time() {
  return &time_;
}

// repeated int32 over = 7;
inline int PlayOff::over_size() const {
  return over_.size();
}
inline void PlayOff::clear_over() {
  over_.Clear();
}
inline ::google::protobuf::int32 PlayOff::over(int index) const {
  return over_.Get(index);
}
inline void PlayOff::set_over(int index, ::google::protobuf::int32 value) {
  over_.Set(index, value);
}
inline void PlayOff::add_over(::google::protobuf::int32 value) {
  over_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayOff::over() const {
  return over_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayOff::mutable_over() {
  return &over_;
}

// optional .AwardInfo.Type awardType = 8;
inline bool PlayOff::has_awardType() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayOff::set_has_awardType() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayOff::clear_has_awardType() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayOff::clear_awardType() {
  awardType_ = 0;
  clear_has_awardType();
}
inline ::AwardInfo_Type PlayOff::awardType() const {
  return static_cast< ::AwardInfo_Type >(awardType_);
}
inline void PlayOff::set_awardType(::AwardInfo_Type value) {
  GOOGLE_DCHECK(::AwardInfo_Type_IsValid(value));
  set_has_awardType();
  awardType_ = value;
}

// -------------------------------------------------------------------

// AllPlayOff

// repeated .PlayOff playoff = 1;
inline int AllPlayOff::playoff_size() const {
  return playoff_.size();
}
inline void AllPlayOff::clear_playoff() {
  playoff_.Clear();
}
inline const ::PlayOff& AllPlayOff::playoff(int index) const {
  return playoff_.Get(index);
}
inline ::PlayOff* AllPlayOff::mutable_playoff(int index) {
  return playoff_.Mutable(index);
}
inline ::PlayOff* AllPlayOff::add_playoff() {
  return playoff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayOff >&
AllPlayOff::playoff() const {
  return playoff_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayOff >*
AllPlayOff::mutable_playoff() {
  return &playoff_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlayOff_Condition>() {
  return ::PlayOff_Condition_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayOff_2eproto__INCLUDED

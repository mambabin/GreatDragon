// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MovementInfo.proto

#ifndef PROTOBUF_MovementInfo_2eproto__INCLUDED
#define PROTOBUF_MovementInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Math.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MovementInfo_2eproto();
void protobuf_AssignDesc_MovementInfo_2eproto();
void protobuf_ShutdownFile_MovementInfo_2eproto();

class PB_MovementAtt;

enum PB_MovementAtt_Status {
  PB_MovementAtt_Status_IDLE = 0,
  PB_MovementAtt_Status_MOVE = 1,
  PB_MovementAtt_Status_FOLLOW = 2,
  PB_MovementAtt_Status_TALK_TO = 3
};
bool PB_MovementAtt_Status_IsValid(int value);
const PB_MovementAtt_Status PB_MovementAtt_Status_Status_MIN = PB_MovementAtt_Status_IDLE;
const PB_MovementAtt_Status PB_MovementAtt_Status_Status_MAX = PB_MovementAtt_Status_TALK_TO;
const int PB_MovementAtt_Status_Status_ARRAYSIZE = PB_MovementAtt_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* PB_MovementAtt_Status_descriptor();
inline const ::std::string& PB_MovementAtt_Status_Name(PB_MovementAtt_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    PB_MovementAtt_Status_descriptor(), value);
}
inline bool PB_MovementAtt_Status_Parse(
    const ::std::string& name, PB_MovementAtt_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PB_MovementAtt_Status>(
    PB_MovementAtt_Status_descriptor(), name, value);
}
// ===================================================================

class PB_MovementAtt : public ::google::protobuf::Message {
 public:
  PB_MovementAtt();
  virtual ~PB_MovementAtt();
  
  PB_MovementAtt(const PB_MovementAtt& from);
  
  inline PB_MovementAtt& operator=(const PB_MovementAtt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PB_MovementAtt& default_instance();
  
  void Swap(PB_MovementAtt* other);
  
  // implements Message ----------------------------------------------
  
  PB_MovementAtt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PB_MovementAtt& from);
  void MergeFrom(const PB_MovementAtt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PB_MovementAtt_Status Status;
  static const Status IDLE = PB_MovementAtt_Status_IDLE;
  static const Status MOVE = PB_MovementAtt_Status_MOVE;
  static const Status FOLLOW = PB_MovementAtt_Status_FOLLOW;
  static const Status TALK_TO = PB_MovementAtt_Status_TALK_TO;
  static inline bool Status_IsValid(int value) {
    return PB_MovementAtt_Status_IsValid(value);
  }
  static const Status Status_MIN =
    PB_MovementAtt_Status_Status_MIN;
  static const Status Status_MAX =
    PB_MovementAtt_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    PB_MovementAtt_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return PB_MovementAtt_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return PB_MovementAtt_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return PB_MovementAtt_Status_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_MovementAtt.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::PB_MovementAtt_Status status() const;
  inline void set_status(::PB_MovementAtt_Status value);
  
  // optional int32 mapID = 2;
  inline bool has_mapID() const;
  inline void clear_mapID();
  static const int kMapIDFieldNumber = 2;
  inline ::google::protobuf::int32 mapID() const;
  inline void set_mapID(::google::protobuf::int32 value);
  
  // optional int32 prevNormalMap = 3;
  inline bool has_prevNormalMap() const;
  inline void clear_prevNormalMap();
  static const int kPrevNormalMapFieldNumber = 3;
  inline ::google::protobuf::int32 prevNormalMap() const;
  inline void set_prevNormalMap(::google::protobuf::int32 value);
  
  // optional .PB_Vector2i prevCoord = 4;
  inline bool has_prevCoord() const;
  inline void clear_prevCoord();
  static const int kPrevCoordFieldNumber = 4;
  inline const ::PB_Vector2i& prevCoord() const;
  inline ::PB_Vector2i* mutable_prevCoord();
  inline ::PB_Vector2i* release_prevCoord();
  
  // optional .PB_Vector2i logicCoord = 5;
  inline bool has_logicCoord() const;
  inline void clear_logicCoord();
  static const int kLogicCoordFieldNumber = 5;
  inline const ::PB_Vector2i& logicCoord() const;
  inline ::PB_Vector2i* mutable_logicCoord();
  inline ::PB_Vector2i* release_logicCoord();
  
  // optional .PB_Vector3f position = 6;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 6;
  inline const ::PB_Vector3f& position() const;
  inline ::PB_Vector3f* mutable_position();
  inline ::PB_Vector3f* release_position();
  
  // optional int32 moveSpeed = 7;
  inline bool has_moveSpeed() const;
  inline void clear_moveSpeed();
  static const int kMoveSpeedFieldNumber = 7;
  inline ::google::protobuf::int32 moveSpeed() const;
  inline void set_moveSpeed(::google::protobuf::int32 value);
  
  // optional int32 radius = 8;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 8;
  inline ::google::protobuf::int32 radius() const;
  inline void set_radius(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PB_MovementAtt)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_mapID();
  inline void clear_has_mapID();
  inline void set_has_prevNormalMap();
  inline void clear_has_prevNormalMap();
  inline void set_has_prevCoord();
  inline void clear_has_prevCoord();
  inline void set_has_logicCoord();
  inline void clear_has_logicCoord();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_moveSpeed();
  inline void clear_has_moveSpeed();
  inline void set_has_radius();
  inline void clear_has_radius();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int status_;
  ::google::protobuf::int32 mapID_;
  ::PB_Vector2i* prevCoord_;
  ::PB_Vector2i* logicCoord_;
  ::google::protobuf::int32 prevNormalMap_;
  ::google::protobuf::int32 moveSpeed_;
  ::PB_Vector3f* position_;
  ::google::protobuf::int32 radius_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_MovementInfo_2eproto();
  friend void protobuf_AssignDesc_MovementInfo_2eproto();
  friend void protobuf_ShutdownFile_MovementInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PB_MovementAtt* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_MovementAtt

// optional .PB_MovementAtt.Status status = 1;
inline bool PB_MovementAtt::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_MovementAtt::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_MovementAtt::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_MovementAtt::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::PB_MovementAtt_Status PB_MovementAtt::status() const {
  return static_cast< ::PB_MovementAtt_Status >(status_);
}
inline void PB_MovementAtt::set_status(::PB_MovementAtt_Status value) {
  GOOGLE_DCHECK(::PB_MovementAtt_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 mapID = 2;
inline bool PB_MovementAtt::has_mapID() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_MovementAtt::set_has_mapID() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_MovementAtt::clear_has_mapID() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_MovementAtt::clear_mapID() {
  mapID_ = 0;
  clear_has_mapID();
}
inline ::google::protobuf::int32 PB_MovementAtt::mapID() const {
  return mapID_;
}
inline void PB_MovementAtt::set_mapID(::google::protobuf::int32 value) {
  set_has_mapID();
  mapID_ = value;
}

// optional int32 prevNormalMap = 3;
inline bool PB_MovementAtt::has_prevNormalMap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_MovementAtt::set_has_prevNormalMap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_MovementAtt::clear_has_prevNormalMap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_MovementAtt::clear_prevNormalMap() {
  prevNormalMap_ = 0;
  clear_has_prevNormalMap();
}
inline ::google::protobuf::int32 PB_MovementAtt::prevNormalMap() const {
  return prevNormalMap_;
}
inline void PB_MovementAtt::set_prevNormalMap(::google::protobuf::int32 value) {
  set_has_prevNormalMap();
  prevNormalMap_ = value;
}

// optional .PB_Vector2i prevCoord = 4;
inline bool PB_MovementAtt::has_prevCoord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_MovementAtt::set_has_prevCoord() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_MovementAtt::clear_has_prevCoord() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_MovementAtt::clear_prevCoord() {
  if (prevCoord_ != NULL) prevCoord_->::PB_Vector2i::Clear();
  clear_has_prevCoord();
}
inline const ::PB_Vector2i& PB_MovementAtt::prevCoord() const {
  return prevCoord_ != NULL ? *prevCoord_ : *default_instance_->prevCoord_;
}
inline ::PB_Vector2i* PB_MovementAtt::mutable_prevCoord() {
  set_has_prevCoord();
  if (prevCoord_ == NULL) prevCoord_ = new ::PB_Vector2i;
  return prevCoord_;
}
inline ::PB_Vector2i* PB_MovementAtt::release_prevCoord() {
  clear_has_prevCoord();
  ::PB_Vector2i* temp = prevCoord_;
  prevCoord_ = NULL;
  return temp;
}

// optional .PB_Vector2i logicCoord = 5;
inline bool PB_MovementAtt::has_logicCoord() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PB_MovementAtt::set_has_logicCoord() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PB_MovementAtt::clear_has_logicCoord() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PB_MovementAtt::clear_logicCoord() {
  if (logicCoord_ != NULL) logicCoord_->::PB_Vector2i::Clear();
  clear_has_logicCoord();
}
inline const ::PB_Vector2i& PB_MovementAtt::logicCoord() const {
  return logicCoord_ != NULL ? *logicCoord_ : *default_instance_->logicCoord_;
}
inline ::PB_Vector2i* PB_MovementAtt::mutable_logicCoord() {
  set_has_logicCoord();
  if (logicCoord_ == NULL) logicCoord_ = new ::PB_Vector2i;
  return logicCoord_;
}
inline ::PB_Vector2i* PB_MovementAtt::release_logicCoord() {
  clear_has_logicCoord();
  ::PB_Vector2i* temp = logicCoord_;
  logicCoord_ = NULL;
  return temp;
}

// optional .PB_Vector3f position = 6;
inline bool PB_MovementAtt::has_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PB_MovementAtt::set_has_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PB_MovementAtt::clear_has_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PB_MovementAtt::clear_position() {
  if (position_ != NULL) position_->::PB_Vector3f::Clear();
  clear_has_position();
}
inline const ::PB_Vector3f& PB_MovementAtt::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::PB_Vector3f* PB_MovementAtt::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::PB_Vector3f;
  return position_;
}
inline ::PB_Vector3f* PB_MovementAtt::release_position() {
  clear_has_position();
  ::PB_Vector3f* temp = position_;
  position_ = NULL;
  return temp;
}

// optional int32 moveSpeed = 7;
inline bool PB_MovementAtt::has_moveSpeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PB_MovementAtt::set_has_moveSpeed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PB_MovementAtt::clear_has_moveSpeed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PB_MovementAtt::clear_moveSpeed() {
  moveSpeed_ = 0;
  clear_has_moveSpeed();
}
inline ::google::protobuf::int32 PB_MovementAtt::moveSpeed() const {
  return moveSpeed_;
}
inline void PB_MovementAtt::set_moveSpeed(::google::protobuf::int32 value) {
  set_has_moveSpeed();
  moveSpeed_ = value;
}

// optional int32 radius = 8;
inline bool PB_MovementAtt::has_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PB_MovementAtt::set_has_radius() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PB_MovementAtt::clear_has_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PB_MovementAtt::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline ::google::protobuf::int32 PB_MovementAtt::radius() const {
  return radius_;
}
inline void PB_MovementAtt::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PB_MovementAtt_Status>() {
  return ::PB_MovementAtt_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MovementInfo_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BusinessInfo.proto

#ifndef PROTOBUF_BusinessInfo_2eproto__INCLUDED
#define PROTOBUF_BusinessInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "ItemBaseInfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BusinessInfo_2eproto();
void protobuf_AssignDesc_BusinessInfo_2eproto();
void protobuf_ShutdownFile_BusinessInfo_2eproto();

class BusinessUnit;
class BusinessInfo;
class AllBusiness;

enum BusinessUnit_LimitType {
  BusinessUnit_LimitType_NONE = 0,
  BusinessUnit_LimitType_ROLE_DAY = 1,
  BusinessUnit_LimitType_ROLE_CAREER = 2,
  BusinessUnit_LimitType_SERVER_DAY = 3
};
bool BusinessUnit_LimitType_IsValid(int value);
const BusinessUnit_LimitType BusinessUnit_LimitType_LimitType_MIN = BusinessUnit_LimitType_NONE;
const BusinessUnit_LimitType BusinessUnit_LimitType_LimitType_MAX = BusinessUnit_LimitType_SERVER_DAY;
const int BusinessUnit_LimitType_LimitType_ARRAYSIZE = BusinessUnit_LimitType_LimitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BusinessUnit_LimitType_descriptor();
inline const ::std::string& BusinessUnit_LimitType_Name(BusinessUnit_LimitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BusinessUnit_LimitType_descriptor(), value);
}
inline bool BusinessUnit_LimitType_Parse(
    const ::std::string& name, BusinessUnit_LimitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BusinessUnit_LimitType>(
    BusinessUnit_LimitType_descriptor(), name, value);
}
enum BusinessInfo_CurrencyType {
  BusinessInfo_CurrencyType_NONE = 0,
  BusinessInfo_CurrencyType_RMB = 1,
  BusinessInfo_CurrencyType_SUB_RMB = 2,
  BusinessInfo_CurrencyType_MONEY = 3,
  BusinessInfo_CurrencyType_LOVE_POINT = 4,
  BusinessInfo_CurrencyType_PVP_SCORE = 5,
  BusinessInfo_CurrencyType_GOD_SCORE = 6,
  BusinessInfo_CurrencyType_FACTION_CONTRIBUTE = 7
};
bool BusinessInfo_CurrencyType_IsValid(int value);
const BusinessInfo_CurrencyType BusinessInfo_CurrencyType_CurrencyType_MIN = BusinessInfo_CurrencyType_NONE;
const BusinessInfo_CurrencyType BusinessInfo_CurrencyType_CurrencyType_MAX = BusinessInfo_CurrencyType_FACTION_CONTRIBUTE;
const int BusinessInfo_CurrencyType_CurrencyType_ARRAYSIZE = BusinessInfo_CurrencyType_CurrencyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BusinessInfo_CurrencyType_descriptor();
inline const ::std::string& BusinessInfo_CurrencyType_Name(BusinessInfo_CurrencyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BusinessInfo_CurrencyType_descriptor(), value);
}
inline bool BusinessInfo_CurrencyType_Parse(
    const ::std::string& name, BusinessInfo_CurrencyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BusinessInfo_CurrencyType>(
    BusinessInfo_CurrencyType_descriptor(), name, value);
}
// ===================================================================

class BusinessUnit : public ::google::protobuf::Message {
 public:
  BusinessUnit();
  virtual ~BusinessUnit();
  
  BusinessUnit(const BusinessUnit& from);
  
  inline BusinessUnit& operator=(const BusinessUnit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BusinessUnit& default_instance();
  
  void Swap(BusinessUnit* other);
  
  // implements Message ----------------------------------------------
  
  BusinessUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BusinessUnit& from);
  void MergeFrom(const BusinessUnit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BusinessUnit_LimitType LimitType;
  static const LimitType NONE = BusinessUnit_LimitType_NONE;
  static const LimitType ROLE_DAY = BusinessUnit_LimitType_ROLE_DAY;
  static const LimitType ROLE_CAREER = BusinessUnit_LimitType_ROLE_CAREER;
  static const LimitType SERVER_DAY = BusinessUnit_LimitType_SERVER_DAY;
  static inline bool LimitType_IsValid(int value) {
    return BusinessUnit_LimitType_IsValid(value);
  }
  static const LimitType LimitType_MIN =
    BusinessUnit_LimitType_LimitType_MIN;
  static const LimitType LimitType_MAX =
    BusinessUnit_LimitType_LimitType_MAX;
  static const int LimitType_ARRAYSIZE =
    BusinessUnit_LimitType_LimitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LimitType_descriptor() {
    return BusinessUnit_LimitType_descriptor();
  }
  static inline const ::std::string& LimitType_Name(LimitType value) {
    return BusinessUnit_LimitType_Name(value);
  }
  static inline bool LimitType_Parse(const ::std::string& name,
      LimitType* value) {
    return BusinessUnit_LimitType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .PB_ItemInfo.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PB_ItemInfo_Type type() const;
  inline void set_type(::PB_ItemInfo_Type value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional int32 effect = 4;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 4;
  inline ::google::protobuf::int32 effect() const;
  inline void set_effect(::google::protobuf::int32 value);
  
  // optional int32 begin = 5;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 5;
  inline ::google::protobuf::int32 begin() const;
  inline void set_begin(::google::protobuf::int32 value);
  
  // optional int32 end = 6;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 6;
  inline ::google::protobuf::int32 end() const;
  inline void set_end(::google::protobuf::int32 value);
  
  // optional .BusinessUnit.LimitType limitType = 7;
  inline bool has_limitType() const;
  inline void clear_limitType();
  static const int kLimitTypeFieldNumber = 7;
  inline ::BusinessUnit_LimitType limitType() const;
  inline void set_limitType(::BusinessUnit_LimitType value);
  
  // optional int32 arg = 8;
  inline bool has_arg() const;
  inline void clear_arg();
  static const int kArgFieldNumber = 8;
  inline ::google::protobuf::int32 arg() const;
  inline void set_arg(::google::protobuf::int32 value);
  
  // optional int32 resType = 9;
  inline bool has_resType() const;
  inline void clear_resType();
  static const int kResTypeFieldNumber = 9;
  inline ::google::protobuf::int32 resType() const;
  inline void set_resType(::google::protobuf::int32 value);
  
  // optional int32 resValue = 10;
  inline bool has_resValue() const;
  inline void clear_resValue();
  static const int kResValueFieldNumber = 10;
  inline ::google::protobuf::int32 resValue() const;
  inline void set_resValue(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:BusinessUnit)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_limitType();
  inline void clear_has_limitType();
  inline void set_has_arg();
  inline void clear_has_arg();
  inline void set_has_resType();
  inline void clear_has_resType();
  inline void set_has_resValue();
  inline void clear_has_resValue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 effect_;
  ::google::protobuf::int32 begin_;
  ::google::protobuf::int32 end_;
  int limitType_;
  ::google::protobuf::int32 arg_;
  ::google::protobuf::int32 resType_;
  ::google::protobuf::int32 resValue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_BusinessInfo_2eproto();
  friend void protobuf_AssignDesc_BusinessInfo_2eproto();
  friend void protobuf_ShutdownFile_BusinessInfo_2eproto();
  
  void InitAsDefaultInstance();
  static BusinessUnit* default_instance_;
};
// -------------------------------------------------------------------

class BusinessInfo : public ::google::protobuf::Message {
 public:
  BusinessInfo();
  virtual ~BusinessInfo();
  
  BusinessInfo(const BusinessInfo& from);
  
  inline BusinessInfo& operator=(const BusinessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BusinessInfo& default_instance();
  
  void Swap(BusinessInfo* other);
  
  // implements Message ----------------------------------------------
  
  BusinessInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BusinessInfo& from);
  void MergeFrom(const BusinessInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BusinessInfo_CurrencyType CurrencyType;
  static const CurrencyType NONE = BusinessInfo_CurrencyType_NONE;
  static const CurrencyType RMB = BusinessInfo_CurrencyType_RMB;
  static const CurrencyType SUB_RMB = BusinessInfo_CurrencyType_SUB_RMB;
  static const CurrencyType MONEY = BusinessInfo_CurrencyType_MONEY;
  static const CurrencyType LOVE_POINT = BusinessInfo_CurrencyType_LOVE_POINT;
  static const CurrencyType PVP_SCORE = BusinessInfo_CurrencyType_PVP_SCORE;
  static const CurrencyType GOD_SCORE = BusinessInfo_CurrencyType_GOD_SCORE;
  static const CurrencyType FACTION_CONTRIBUTE = BusinessInfo_CurrencyType_FACTION_CONTRIBUTE;
  static inline bool CurrencyType_IsValid(int value) {
    return BusinessInfo_CurrencyType_IsValid(value);
  }
  static const CurrencyType CurrencyType_MIN =
    BusinessInfo_CurrencyType_CurrencyType_MIN;
  static const CurrencyType CurrencyType_MAX =
    BusinessInfo_CurrencyType_CurrencyType_MAX;
  static const int CurrencyType_ARRAYSIZE =
    BusinessInfo_CurrencyType_CurrencyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CurrencyType_descriptor() {
    return BusinessInfo_CurrencyType_descriptor();
  }
  static inline const ::std::string& CurrencyType_Name(CurrencyType value) {
    return BusinessInfo_CurrencyType_Name(value);
  }
  static inline bool CurrencyType_Parse(const ::std::string& name,
      CurrencyType* value) {
    return BusinessInfo_CurrencyType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .BusinessInfo.CurrencyType currencyType = 2;
  inline bool has_currencyType() const;
  inline void clear_currencyType();
  static const int kCurrencyTypeFieldNumber = 2;
  inline ::BusinessInfo_CurrencyType currencyType() const;
  inline void set_currencyType(::BusinessInfo_CurrencyType value);
  
  // repeated .BusinessUnit items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::BusinessUnit& items(int index) const;
  inline ::BusinessUnit* mutable_items(int index);
  inline ::BusinessUnit* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BusinessUnit >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BusinessUnit >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:BusinessInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_currencyType();
  inline void clear_has_currencyType();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  int currencyType_;
  ::google::protobuf::RepeatedPtrField< ::BusinessUnit > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_BusinessInfo_2eproto();
  friend void protobuf_AssignDesc_BusinessInfo_2eproto();
  friend void protobuf_ShutdownFile_BusinessInfo_2eproto();
  
  void InitAsDefaultInstance();
  static BusinessInfo* default_instance_;
};
// -------------------------------------------------------------------

class AllBusiness : public ::google::protobuf::Message {
 public:
  AllBusiness();
  virtual ~AllBusiness();
  
  AllBusiness(const AllBusiness& from);
  
  inline AllBusiness& operator=(const AllBusiness& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllBusiness& default_instance();
  
  void Swap(AllBusiness* other);
  
  // implements Message ----------------------------------------------
  
  AllBusiness* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllBusiness& from);
  void MergeFrom(const AllBusiness& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .BusinessInfo business = 1;
  inline int business_size() const;
  inline void clear_business();
  static const int kBusinessFieldNumber = 1;
  inline const ::BusinessInfo& business(int index) const;
  inline ::BusinessInfo* mutable_business(int index);
  inline ::BusinessInfo* add_business();
  inline const ::google::protobuf::RepeatedPtrField< ::BusinessInfo >&
      business() const;
  inline ::google::protobuf::RepeatedPtrField< ::BusinessInfo >*
      mutable_business();
  
  // @@protoc_insertion_point(class_scope:AllBusiness)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::BusinessInfo > business_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_BusinessInfo_2eproto();
  friend void protobuf_AssignDesc_BusinessInfo_2eproto();
  friend void protobuf_ShutdownFile_BusinessInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AllBusiness* default_instance_;
};
// ===================================================================


// ===================================================================

// BusinessUnit

// optional .PB_ItemInfo.Type type = 1;
inline bool BusinessUnit::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BusinessUnit::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BusinessUnit::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BusinessUnit::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PB_ItemInfo_Type BusinessUnit::type() const {
  return static_cast< ::PB_ItemInfo_Type >(type_);
}
inline void BusinessUnit::set_type(::PB_ItemInfo_Type value) {
  GOOGLE_DCHECK(::PB_ItemInfo_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool BusinessUnit::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BusinessUnit::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BusinessUnit::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BusinessUnit::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BusinessUnit::id() const {
  return id_;
}
inline void BusinessUnit::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 3;
inline bool BusinessUnit::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BusinessUnit::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BusinessUnit::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BusinessUnit::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 BusinessUnit::count() const {
  return count_;
}
inline void BusinessUnit::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 effect = 4;
inline bool BusinessUnit::has_effect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BusinessUnit::set_has_effect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BusinessUnit::clear_has_effect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BusinessUnit::clear_effect() {
  effect_ = 0;
  clear_has_effect();
}
inline ::google::protobuf::int32 BusinessUnit::effect() const {
  return effect_;
}
inline void BusinessUnit::set_effect(::google::protobuf::int32 value) {
  set_has_effect();
  effect_ = value;
}

// optional int32 begin = 5;
inline bool BusinessUnit::has_begin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BusinessUnit::set_has_begin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BusinessUnit::clear_has_begin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BusinessUnit::clear_begin() {
  begin_ = 0;
  clear_has_begin();
}
inline ::google::protobuf::int32 BusinessUnit::begin() const {
  return begin_;
}
inline void BusinessUnit::set_begin(::google::protobuf::int32 value) {
  set_has_begin();
  begin_ = value;
}

// optional int32 end = 6;
inline bool BusinessUnit::has_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BusinessUnit::set_has_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BusinessUnit::clear_has_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BusinessUnit::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline ::google::protobuf::int32 BusinessUnit::end() const {
  return end_;
}
inline void BusinessUnit::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
}

// optional .BusinessUnit.LimitType limitType = 7;
inline bool BusinessUnit::has_limitType() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BusinessUnit::set_has_limitType() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BusinessUnit::clear_has_limitType() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BusinessUnit::clear_limitType() {
  limitType_ = 0;
  clear_has_limitType();
}
inline ::BusinessUnit_LimitType BusinessUnit::limitType() const {
  return static_cast< ::BusinessUnit_LimitType >(limitType_);
}
inline void BusinessUnit::set_limitType(::BusinessUnit_LimitType value) {
  GOOGLE_DCHECK(::BusinessUnit_LimitType_IsValid(value));
  set_has_limitType();
  limitType_ = value;
}

// optional int32 arg = 8;
inline bool BusinessUnit::has_arg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BusinessUnit::set_has_arg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BusinessUnit::clear_has_arg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BusinessUnit::clear_arg() {
  arg_ = 0;
  clear_has_arg();
}
inline ::google::protobuf::int32 BusinessUnit::arg() const {
  return arg_;
}
inline void BusinessUnit::set_arg(::google::protobuf::int32 value) {
  set_has_arg();
  arg_ = value;
}

// optional int32 resType = 9;
inline bool BusinessUnit::has_resType() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BusinessUnit::set_has_resType() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BusinessUnit::clear_has_resType() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BusinessUnit::clear_resType() {
  resType_ = 0;
  clear_has_resType();
}
inline ::google::protobuf::int32 BusinessUnit::resType() const {
  return resType_;
}
inline void BusinessUnit::set_resType(::google::protobuf::int32 value) {
  set_has_resType();
  resType_ = value;
}

// optional int32 resValue = 10;
inline bool BusinessUnit::has_resValue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BusinessUnit::set_has_resValue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BusinessUnit::clear_has_resValue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BusinessUnit::clear_resValue() {
  resValue_ = 0;
  clear_has_resValue();
}
inline ::google::protobuf::int32 BusinessUnit::resValue() const {
  return resValue_;
}
inline void BusinessUnit::set_resValue(::google::protobuf::int32 value) {
  set_has_resValue();
  resValue_ = value;
}

// -------------------------------------------------------------------

// BusinessInfo

// optional int32 id = 1;
inline bool BusinessInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BusinessInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BusinessInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BusinessInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BusinessInfo::id() const {
  return id_;
}
inline void BusinessInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .BusinessInfo.CurrencyType currencyType = 2;
inline bool BusinessInfo::has_currencyType() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BusinessInfo::set_has_currencyType() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BusinessInfo::clear_has_currencyType() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BusinessInfo::clear_currencyType() {
  currencyType_ = 0;
  clear_has_currencyType();
}
inline ::BusinessInfo_CurrencyType BusinessInfo::currencyType() const {
  return static_cast< ::BusinessInfo_CurrencyType >(currencyType_);
}
inline void BusinessInfo::set_currencyType(::BusinessInfo_CurrencyType value) {
  GOOGLE_DCHECK(::BusinessInfo_CurrencyType_IsValid(value));
  set_has_currencyType();
  currencyType_ = value;
}

// repeated .BusinessUnit items = 3;
inline int BusinessInfo::items_size() const {
  return items_.size();
}
inline void BusinessInfo::clear_items() {
  items_.Clear();
}
inline const ::BusinessUnit& BusinessInfo::items(int index) const {
  return items_.Get(index);
}
inline ::BusinessUnit* BusinessInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::BusinessUnit* BusinessInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BusinessUnit >&
BusinessInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BusinessUnit >*
BusinessInfo::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// AllBusiness

// repeated .BusinessInfo business = 1;
inline int AllBusiness::business_size() const {
  return business_.size();
}
inline void AllBusiness::clear_business() {
  business_.Clear();
}
inline const ::BusinessInfo& AllBusiness::business(int index) const {
  return business_.Get(index);
}
inline ::BusinessInfo* AllBusiness::mutable_business(int index) {
  return business_.Mutable(index);
}
inline ::BusinessInfo* AllBusiness::add_business() {
  return business_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BusinessInfo >&
AllBusiness::business() const {
  return business_;
}
inline ::google::protobuf::RepeatedPtrField< ::BusinessInfo >*
AllBusiness::mutable_business() {
  return &business_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BusinessUnit_LimitType>() {
  return ::BusinessUnit_LimitType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BusinessInfo_CurrencyType>() {
  return ::BusinessInfo_CurrencyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BusinessInfo_2eproto__INCLUDED

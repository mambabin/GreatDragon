// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RidesInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RidesInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RidesInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RidesInfo_Quality_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RidesGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RidesGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllRideses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllRideses_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_RidesAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_RidesAsset_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RidesInfo_2eproto() {
  protobuf_AddDesc_RidesInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RidesInfo.proto");
  GOOGLE_CHECK(file != NULL);
  RidesInfo_descriptor_ = file->message_type(0);
  static const int RidesInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, tpGoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, tpCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, tpSuccessRate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, baseEXP_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, ride_stand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, ride_run_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, fragmentCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, tpLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, tpStar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, knightHeight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, rangerHeight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, magicianHeight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, effect_),
  };
  RidesInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RidesInfo_descriptor_,
      RidesInfo::default_instance_,
      RidesInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RidesInfo));
  RidesInfo_Quality_descriptor_ = RidesInfo_descriptor_->enum_type(0);
  RidesGroup_descriptor_ = file->message_type(1);
  static const int RidesGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesGroup, rides_),
  };
  RidesGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RidesGroup_descriptor_,
      RidesGroup::default_instance_,
      RidesGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RidesGroup));
  AllRideses_descriptor_ = file->message_type(2);
  static const int AllRideses_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRideses, rides_),
  };
  AllRideses_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllRideses_descriptor_,
      AllRideses::default_instance_,
      AllRideses_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRideses, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRideses, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllRideses));
  PB_RidesAsset_descriptor_ = file->message_type(3);
  static const int PB_RidesAsset_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RidesAsset, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RidesAsset, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RidesAsset, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RidesAsset, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RidesAsset, potential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RidesAsset, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RidesAsset, lockAtt_),
  };
  PB_RidesAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_RidesAsset_descriptor_,
      PB_RidesAsset::default_instance_,
      PB_RidesAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RidesAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_RidesAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_RidesAsset));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RidesInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RidesInfo_descriptor_, &RidesInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RidesGroup_descriptor_, &RidesGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllRideses_descriptor_, &AllRideses::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_RidesAsset_descriptor_, &PB_RidesAsset::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RidesInfo_2eproto() {
  delete RidesInfo::default_instance_;
  delete RidesInfo_reflection_;
  delete RidesGroup::default_instance_;
  delete RidesGroup_reflection_;
  delete AllRideses::default_instance_;
  delete AllRideses_reflection_;
  delete PB_RidesAsset::default_instance_;
  delete PB_RidesAsset_reflection_;
}

void protobuf_AddDesc_RidesInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RidesInfo.proto\"\276\003\n\tRidesInfo\022\n\n\002id\030\001 "
    "\001(\005\022\013\n\003pic\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\r\n\005model\030"
    "\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\013\n\003att\030\006 \003(\005\022#\n\007qua"
    "lity\030\007 \001(\0162\022.RidesInfo.Quality\022\017\n\007tpGood"
    "s\030\010 \001(\005\022\017\n\007tpCount\030\t \001(\005\022\025\n\rtpSuccessRat"
    "e\030\n \001(\002\022\017\n\007baseEXP\030\013 \001(\005\022\022\n\nride_stand\030\014"
    " \001(\t\022\020\n\010ride_run\030\r \001(\t\022\025\n\rfragmentCount\030"
    "\016 \001(\005\022\017\n\007tpLevel\030\017 \001(\005\022\016\n\006tpStar\030\020 \001(\005\022\024"
    "\n\014knightHeight\030\021 \001(\002\022\024\n\014rangerHeight\030\022 \001"
    "(\002\022\026\n\016magicianHeight\030\023 \001(\002\022\016\n\006effect\030\024 \001"
    "(\005\">\n\007Quality\022\t\n\005WHITE\020\000\022\t\n\005GREEN\020\001\022\010\n\004B"
    "LUE\020\002\022\n\n\006YELLOW\020\003\022\007\n\003RED\020\004\"\'\n\nRidesGroup"
    "\022\031\n\005rides\030\001 \003(\0132\n.RidesInfo\"(\n\nAllRidese"
    "s\022\032\n\005rides\030\001 \003(\0132\013.RidesGroup\"}\n\rPB_Ride"
    "sAsset\022\021\n\005model\030\001 \001(\005:\002-1\022\014\n\004star\030\002 \001(\005\022"
    "\r\n\005level\030\003 \001(\005\022\013\n\003exp\030\004 \001(\003\022\021\n\tpotential"
    "\030\005 \001(\005\022\013\n\003att\030\006 \003(\005\022\017\n\007lockAtt\030\007 \003(\010", 676);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RidesInfo.proto", &protobuf_RegisterTypes);
  RidesInfo::default_instance_ = new RidesInfo();
  RidesGroup::default_instance_ = new RidesGroup();
  AllRideses::default_instance_ = new AllRideses();
  PB_RidesAsset::default_instance_ = new PB_RidesAsset();
  RidesInfo::default_instance_->InitAsDefaultInstance();
  RidesGroup::default_instance_->InitAsDefaultInstance();
  AllRideses::default_instance_->InitAsDefaultInstance();
  PB_RidesAsset::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RidesInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RidesInfo_2eproto {
  StaticDescriptorInitializer_RidesInfo_2eproto() {
    protobuf_AddDesc_RidesInfo_2eproto();
  }
} static_descriptor_initializer_RidesInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* RidesInfo_Quality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RidesInfo_Quality_descriptor_;
}
bool RidesInfo_Quality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RidesInfo_Quality RidesInfo::WHITE;
const RidesInfo_Quality RidesInfo::GREEN;
const RidesInfo_Quality RidesInfo::BLUE;
const RidesInfo_Quality RidesInfo::YELLOW;
const RidesInfo_Quality RidesInfo::RED;
const RidesInfo_Quality RidesInfo::Quality_MIN;
const RidesInfo_Quality RidesInfo::Quality_MAX;
const int RidesInfo::Quality_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RidesInfo::kIdFieldNumber;
const int RidesInfo::kPicFieldNumber;
const int RidesInfo::kNameFieldNumber;
const int RidesInfo::kModelFieldNumber;
const int RidesInfo::kLevelFieldNumber;
const int RidesInfo::kAttFieldNumber;
const int RidesInfo::kQualityFieldNumber;
const int RidesInfo::kTpGoodsFieldNumber;
const int RidesInfo::kTpCountFieldNumber;
const int RidesInfo::kTpSuccessRateFieldNumber;
const int RidesInfo::kBaseEXPFieldNumber;
const int RidesInfo::kRideStandFieldNumber;
const int RidesInfo::kRideRunFieldNumber;
const int RidesInfo::kFragmentCountFieldNumber;
const int RidesInfo::kTpLevelFieldNumber;
const int RidesInfo::kTpStarFieldNumber;
const int RidesInfo::kKnightHeightFieldNumber;
const int RidesInfo::kRangerHeightFieldNumber;
const int RidesInfo::kMagicianHeightFieldNumber;
const int RidesInfo::kEffectFieldNumber;
#endif  // !_MSC_VER

RidesInfo::RidesInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RidesInfo::InitAsDefaultInstance() {
}

RidesInfo::RidesInfo(const RidesInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RidesInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pic_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = 0;
  level_ = 0;
  quality_ = 0;
  tpGoods_ = 0;
  tpCount_ = 0;
  tpSuccessRate_ = 0;
  baseEXP_ = 0;
  ride_stand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ride_run_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fragmentCount_ = 0;
  tpLevel_ = 0;
  tpStar_ = 0;
  knightHeight_ = 0;
  rangerHeight_ = 0;
  magicianHeight_ = 0;
  effect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RidesInfo::~RidesInfo() {
  SharedDtor();
}

void RidesInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ride_stand_ != &::google::protobuf::internal::kEmptyString) {
    delete ride_stand_;
  }
  if (ride_run_ != &::google::protobuf::internal::kEmptyString) {
    delete ride_run_;
  }
  if (this != default_instance_) {
  }
}

void RidesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RidesInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RidesInfo_descriptor_;
}

const RidesInfo& RidesInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RidesInfo_2eproto();  return *default_instance_;
}

RidesInfo* RidesInfo::default_instance_ = NULL;

RidesInfo* RidesInfo::New() const {
  return new RidesInfo;
}

void RidesInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    pic_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    model_ = 0;
    level_ = 0;
    quality_ = 0;
    tpGoods_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tpCount_ = 0;
    tpSuccessRate_ = 0;
    baseEXP_ = 0;
    if (has_ride_stand()) {
      if (ride_stand_ != &::google::protobuf::internal::kEmptyString) {
        ride_stand_->clear();
      }
    }
    if (has_ride_run()) {
      if (ride_run_ != &::google::protobuf::internal::kEmptyString) {
        ride_run_->clear();
      }
    }
    fragmentCount_ = 0;
    tpLevel_ = 0;
    tpStar_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    knightHeight_ = 0;
    rangerHeight_ = 0;
    magicianHeight_ = 0;
    effect_ = 0;
  }
  att_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RidesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pic;
        break;
      }
      
      // optional int32 pic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_)));
          set_has_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_model;
        break;
      }
      
      // optional int32 model = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_att;
        break;
      }
      
      // repeated int32 att = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_att;
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }
      
      // optional .RidesInfo.Quality quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RidesInfo_Quality_IsValid(value)) {
            set_quality(static_cast< ::RidesInfo_Quality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tpGoods;
        break;
      }
      
      // optional int32 tpGoods = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tpGoods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tpGoods_)));
          set_has_tpGoods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tpCount;
        break;
      }
      
      // optional int32 tpCount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tpCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tpCount_)));
          set_has_tpCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_tpSuccessRate;
        break;
      }
      
      // optional float tpSuccessRate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tpSuccessRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tpSuccessRate_)));
          set_has_tpSuccessRate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_baseEXP;
        break;
      }
      
      // optional int32 baseEXP = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseEXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseEXP_)));
          set_has_baseEXP();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ride_stand;
        break;
      }
      
      // optional string ride_stand = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ride_stand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ride_stand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ride_stand().data(), this->ride_stand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ride_run;
        break;
      }
      
      // optional string ride_run = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ride_run:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ride_run()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ride_run().data(), this->ride_run().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fragmentCount;
        break;
      }
      
      // optional int32 fragmentCount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragmentCount_)));
          set_has_fragmentCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tpLevel;
        break;
      }
      
      // optional int32 tpLevel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tpLevel_)));
          set_has_tpLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tpStar;
        break;
      }
      
      // optional int32 tpStar = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tpStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tpStar_)));
          set_has_tpStar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_knightHeight;
        break;
      }
      
      // optional float knightHeight = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_knightHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &knightHeight_)));
          set_has_knightHeight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_rangerHeight;
        break;
      }
      
      // optional float rangerHeight = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rangerHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rangerHeight_)));
          set_has_rangerHeight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_magicianHeight;
        break;
      }
      
      // optional float magicianHeight = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_magicianHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magicianHeight_)));
          set_has_magicianHeight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_effect;
        break;
      }
      
      // optional int32 effect = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RidesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 pic = 2;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pic(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 model = 4;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->model(), output);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }
  
  // repeated int32 att = 6;
  for (int i = 0; i < this->att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->att(i), output);
  }
  
  // optional .RidesInfo.Quality quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->quality(), output);
  }
  
  // optional int32 tpGoods = 8;
  if (has_tpGoods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tpGoods(), output);
  }
  
  // optional int32 tpCount = 9;
  if (has_tpCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tpCount(), output);
  }
  
  // optional float tpSuccessRate = 10;
  if (has_tpSuccessRate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tpSuccessRate(), output);
  }
  
  // optional int32 baseEXP = 11;
  if (has_baseEXP()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->baseEXP(), output);
  }
  
  // optional string ride_stand = 12;
  if (has_ride_stand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ride_stand().data(), this->ride_stand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ride_stand(), output);
  }
  
  // optional string ride_run = 13;
  if (has_ride_run()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ride_run().data(), this->ride_run().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->ride_run(), output);
  }
  
  // optional int32 fragmentCount = 14;
  if (has_fragmentCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->fragmentCount(), output);
  }
  
  // optional int32 tpLevel = 15;
  if (has_tpLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tpLevel(), output);
  }
  
  // optional int32 tpStar = 16;
  if (has_tpStar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tpStar(), output);
  }
  
  // optional float knightHeight = 17;
  if (has_knightHeight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->knightHeight(), output);
  }
  
  // optional float rangerHeight = 18;
  if (has_rangerHeight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->rangerHeight(), output);
  }
  
  // optional float magicianHeight = 19;
  if (has_magicianHeight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->magicianHeight(), output);
  }
  
  // optional int32 effect = 20;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->effect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RidesInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 pic = 2;
  if (has_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pic(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 model = 4;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->model(), target);
  }
  
  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }
  
  // repeated int32 att = 6;
  for (int i = 0; i < this->att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->att(i), target);
  }
  
  // optional .RidesInfo.Quality quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->quality(), target);
  }
  
  // optional int32 tpGoods = 8;
  if (has_tpGoods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tpGoods(), target);
  }
  
  // optional int32 tpCount = 9;
  if (has_tpCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tpCount(), target);
  }
  
  // optional float tpSuccessRate = 10;
  if (has_tpSuccessRate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tpSuccessRate(), target);
  }
  
  // optional int32 baseEXP = 11;
  if (has_baseEXP()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->baseEXP(), target);
  }
  
  // optional string ride_stand = 12;
  if (has_ride_stand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ride_stand().data(), this->ride_stand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ride_stand(), target);
  }
  
  // optional string ride_run = 13;
  if (has_ride_run()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ride_run().data(), this->ride_run().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ride_run(), target);
  }
  
  // optional int32 fragmentCount = 14;
  if (has_fragmentCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->fragmentCount(), target);
  }
  
  // optional int32 tpLevel = 15;
  if (has_tpLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->tpLevel(), target);
  }
  
  // optional int32 tpStar = 16;
  if (has_tpStar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tpStar(), target);
  }
  
  // optional float knightHeight = 17;
  if (has_knightHeight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->knightHeight(), target);
  }
  
  // optional float rangerHeight = 18;
  if (has_rangerHeight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->rangerHeight(), target);
  }
  
  // optional float magicianHeight = 19;
  if (has_magicianHeight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->magicianHeight(), target);
  }
  
  // optional int32 effect = 20;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->effect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RidesInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 pic = 2;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model());
    }
    
    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional .RidesInfo.Quality quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }
    
    // optional int32 tpGoods = 8;
    if (has_tpGoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tpGoods());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 tpCount = 9;
    if (has_tpCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tpCount());
    }
    
    // optional float tpSuccessRate = 10;
    if (has_tpSuccessRate()) {
      total_size += 1 + 4;
    }
    
    // optional int32 baseEXP = 11;
    if (has_baseEXP()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseEXP());
    }
    
    // optional string ride_stand = 12;
    if (has_ride_stand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ride_stand());
    }
    
    // optional string ride_run = 13;
    if (has_ride_run()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ride_run());
    }
    
    // optional int32 fragmentCount = 14;
    if (has_fragmentCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragmentCount());
    }
    
    // optional int32 tpLevel = 15;
    if (has_tpLevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tpLevel());
    }
    
    // optional int32 tpStar = 16;
    if (has_tpStar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tpStar());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float knightHeight = 17;
    if (has_knightHeight()) {
      total_size += 2 + 4;
    }
    
    // optional float rangerHeight = 18;
    if (has_rangerHeight()) {
      total_size += 2 + 4;
    }
    
    // optional float magicianHeight = 19;
    if (has_magicianHeight()) {
      total_size += 2 + 4;
    }
    
    // optional int32 effect = 20;
    if (has_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect());
    }
    
  }
  // repeated int32 att = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->att(i));
    }
    total_size += 1 * this->att_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RidesInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RidesInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RidesInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RidesInfo::MergeFrom(const RidesInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  att_.MergeFrom(from.att_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_tpGoods()) {
      set_tpGoods(from.tpGoods());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tpCount()) {
      set_tpCount(from.tpCount());
    }
    if (from.has_tpSuccessRate()) {
      set_tpSuccessRate(from.tpSuccessRate());
    }
    if (from.has_baseEXP()) {
      set_baseEXP(from.baseEXP());
    }
    if (from.has_ride_stand()) {
      set_ride_stand(from.ride_stand());
    }
    if (from.has_ride_run()) {
      set_ride_run(from.ride_run());
    }
    if (from.has_fragmentCount()) {
      set_fragmentCount(from.fragmentCount());
    }
    if (from.has_tpLevel()) {
      set_tpLevel(from.tpLevel());
    }
    if (from.has_tpStar()) {
      set_tpStar(from.tpStar());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_knightHeight()) {
      set_knightHeight(from.knightHeight());
    }
    if (from.has_rangerHeight()) {
      set_rangerHeight(from.rangerHeight());
    }
    if (from.has_magicianHeight()) {
      set_magicianHeight(from.magicianHeight());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RidesInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RidesInfo::CopyFrom(const RidesInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RidesInfo::IsInitialized() const {
  
  return true;
}

void RidesInfo::Swap(RidesInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pic_, other->pic_);
    std::swap(name_, other->name_);
    std::swap(model_, other->model_);
    std::swap(level_, other->level_);
    att_.Swap(&other->att_);
    std::swap(quality_, other->quality_);
    std::swap(tpGoods_, other->tpGoods_);
    std::swap(tpCount_, other->tpCount_);
    std::swap(tpSuccessRate_, other->tpSuccessRate_);
    std::swap(baseEXP_, other->baseEXP_);
    std::swap(ride_stand_, other->ride_stand_);
    std::swap(ride_run_, other->ride_run_);
    std::swap(fragmentCount_, other->fragmentCount_);
    std::swap(tpLevel_, other->tpLevel_);
    std::swap(tpStar_, other->tpStar_);
    std::swap(knightHeight_, other->knightHeight_);
    std::swap(rangerHeight_, other->rangerHeight_);
    std::swap(magicianHeight_, other->magicianHeight_);
    std::swap(effect_, other->effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RidesInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RidesInfo_descriptor_;
  metadata.reflection = RidesInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RidesGroup::kRidesFieldNumber;
#endif  // !_MSC_VER

RidesGroup::RidesGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RidesGroup::InitAsDefaultInstance() {
}

RidesGroup::RidesGroup(const RidesGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RidesGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RidesGroup::~RidesGroup() {
  SharedDtor();
}

void RidesGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RidesGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RidesGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RidesGroup_descriptor_;
}

const RidesGroup& RidesGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RidesInfo_2eproto();  return *default_instance_;
}

RidesGroup* RidesGroup::default_instance_ = NULL;

RidesGroup* RidesGroup::New() const {
  return new RidesGroup;
}

void RidesGroup::Clear() {
  rides_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RidesGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RidesInfo rides = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rides()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rides;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RidesGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RidesInfo rides = 1;
  for (int i = 0; i < this->rides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rides(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RidesGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RidesInfo rides = 1;
  for (int i = 0; i < this->rides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rides(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RidesGroup::ByteSize() const {
  int total_size = 0;
  
  // repeated .RidesInfo rides = 1;
  total_size += 1 * this->rides_size();
  for (int i = 0; i < this->rides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rides(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RidesGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RidesGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RidesGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RidesGroup::MergeFrom(const RidesGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  rides_.MergeFrom(from.rides_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RidesGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RidesGroup::CopyFrom(const RidesGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RidesGroup::IsInitialized() const {
  
  return true;
}

void RidesGroup::Swap(RidesGroup* other) {
  if (other != this) {
    rides_.Swap(&other->rides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RidesGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RidesGroup_descriptor_;
  metadata.reflection = RidesGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllRideses::kRidesFieldNumber;
#endif  // !_MSC_VER

AllRideses::AllRideses()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllRideses::InitAsDefaultInstance() {
}

AllRideses::AllRideses(const AllRideses& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllRideses::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllRideses::~AllRideses() {
  SharedDtor();
}

void AllRideses::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllRideses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllRideses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllRideses_descriptor_;
}

const AllRideses& AllRideses::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RidesInfo_2eproto();  return *default_instance_;
}

AllRideses* AllRideses::default_instance_ = NULL;

AllRideses* AllRideses::New() const {
  return new AllRideses;
}

void AllRideses::Clear() {
  rides_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllRideses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RidesGroup rides = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rides()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rides;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllRideses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RidesGroup rides = 1;
  for (int i = 0; i < this->rides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rides(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllRideses::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RidesGroup rides = 1;
  for (int i = 0; i < this->rides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rides(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllRideses::ByteSize() const {
  int total_size = 0;
  
  // repeated .RidesGroup rides = 1;
  total_size += 1 * this->rides_size();
  for (int i = 0; i < this->rides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rides(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllRideses::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllRideses* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllRideses*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllRideses::MergeFrom(const AllRideses& from) {
  GOOGLE_CHECK_NE(&from, this);
  rides_.MergeFrom(from.rides_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllRideses::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllRideses::CopyFrom(const AllRideses& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllRideses::IsInitialized() const {
  
  return true;
}

void AllRideses::Swap(AllRideses* other) {
  if (other != this) {
    rides_.Swap(&other->rides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllRideses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllRideses_descriptor_;
  metadata.reflection = AllRideses_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_RidesAsset::kModelFieldNumber;
const int PB_RidesAsset::kStarFieldNumber;
const int PB_RidesAsset::kLevelFieldNumber;
const int PB_RidesAsset::kExpFieldNumber;
const int PB_RidesAsset::kPotentialFieldNumber;
const int PB_RidesAsset::kAttFieldNumber;
const int PB_RidesAsset::kLockAttFieldNumber;
#endif  // !_MSC_VER

PB_RidesAsset::PB_RidesAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_RidesAsset::InitAsDefaultInstance() {
}

PB_RidesAsset::PB_RidesAsset(const PB_RidesAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_RidesAsset::SharedCtor() {
  _cached_size_ = 0;
  model_ = -1;
  star_ = 0;
  level_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  potential_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_RidesAsset::~PB_RidesAsset() {
  SharedDtor();
}

void PB_RidesAsset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_RidesAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_RidesAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_RidesAsset_descriptor_;
}

const PB_RidesAsset& PB_RidesAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RidesInfo_2eproto();  return *default_instance_;
}

PB_RidesAsset* PB_RidesAsset::default_instance_ = NULL;

PB_RidesAsset* PB_RidesAsset::New() const {
  return new PB_RidesAsset;
}

void PB_RidesAsset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    model_ = -1;
    star_ = 0;
    level_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    potential_ = 0;
  }
  att_.Clear();
  lockAtt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_RidesAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 model = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional int64 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_potential;
        break;
      }
      
      // optional int32 potential = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_potential:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &potential_)));
          set_has_potential();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_att;
        break;
      }
      
      // repeated int32 att = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_att())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_att())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_att;
        if (input->ExpectTag(56)) goto parse_lockAtt;
        break;
      }
      
      // repeated bool lockAtt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 56, input, this->mutable_lockAtt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_lockAtt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lockAtt;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_RidesAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 model = 1 [default = -1];
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->model(), output);
  }
  
  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int64 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->exp(), output);
  }
  
  // optional int32 potential = 5;
  if (has_potential()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->potential(), output);
  }
  
  // repeated int32 att = 6;
  for (int i = 0; i < this->att_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->att(i), output);
  }
  
  // repeated bool lockAtt = 7;
  for (int i = 0; i < this->lockAtt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      7, this->lockAtt(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_RidesAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 model = 1 [default = -1];
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->model(), target);
  }
  
  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int64 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->exp(), target);
  }
  
  // optional int32 potential = 5;
  if (has_potential()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->potential(), target);
  }
  
  // repeated int32 att = 6;
  for (int i = 0; i < this->att_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->att(i), target);
  }
  
  // repeated bool lockAtt = 7;
  for (int i = 0; i < this->lockAtt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(7, this->lockAtt(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_RidesAsset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 model = 1 [default = -1];
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model());
    }
    
    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int64 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
    // optional int32 potential = 5;
    if (has_potential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->potential());
    }
    
  }
  // repeated int32 att = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->att_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->att(i));
    }
    total_size += 1 * this->att_size() + data_size;
  }
  
  // repeated bool lockAtt = 7;
  {
    int data_size = 0;
    data_size = 1 * this->lockAtt_size();
    total_size += 1 * this->lockAtt_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_RidesAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_RidesAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_RidesAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_RidesAsset::MergeFrom(const PB_RidesAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  att_.MergeFrom(from.att_);
  lockAtt_.MergeFrom(from.lockAtt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_potential()) {
      set_potential(from.potential());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_RidesAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_RidesAsset::CopyFrom(const PB_RidesAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_RidesAsset::IsInitialized() const {
  
  return true;
}

void PB_RidesAsset::Swap(PB_RidesAsset* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(star_, other->star_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(potential_, other->potential_);
    att_.Swap(&other->att_);
    lockAtt_.Swap(&other->lockAtt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_RidesAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_RidesAsset_descriptor_;
  metadata.reflection = PB_RidesAsset_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

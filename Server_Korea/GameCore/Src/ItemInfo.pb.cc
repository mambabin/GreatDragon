// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GoodsInfo_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GoodsInfo_ColorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AllGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_TransformAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_TransformAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* PB_ItemPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_ItemPackage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_ItemPackage_Begin_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_ItemPackage_Length_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PB_ALT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PB_ALT_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_ALT_Pos_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllDropTables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllDropTables_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllExchangeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllExchangeTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ItemInfo_2eproto() {
  protobuf_AddDesc_ItemInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ItemInfo.proto");
  GOOGLE_CHECK(file != NULL);
  GoodsInfo_descriptor_ = file->message_type(0);
  static const int GoodsInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, requiredLevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, colorType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, stampCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, lovePoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, pvpScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, godScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, factionContribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, helpNode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, useRMB_),
  };
  GoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsInfo_descriptor_,
      GoodsInfo::default_instance_,
      GoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsInfo));
  GoodsInfo_Type_descriptor_ = GoodsInfo_descriptor_->enum_type(0);
  GoodsInfo_ColorType_descriptor_ = GoodsInfo_descriptor_->enum_type(1);
  AllGoods_descriptor_ = file->message_type(1);
  static const int AllGoods_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGoods, goods_),
  };
  AllGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllGoods_descriptor_,
      AllGoods::default_instance_,
      AllGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllGoods));
  PB_TransformAsset_descriptor_ = file->message_type(2);
  static const int PB_TransformAsset_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_TransformAsset, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_TransformAsset, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_TransformAsset, level_),
  };
  PB_TransformAsset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_TransformAsset_descriptor_,
      PB_TransformAsset::default_instance_,
      PB_TransformAsset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_TransformAsset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_TransformAsset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_TransformAsset));
  PB_ItemPackage_descriptor_ = file->message_type(3);
  static const int PB_ItemPackage_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, validNumEquipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, validNumGoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, validNumGem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, smallSoul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, mediumSoul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, bigSoul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, perfectSoul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, totalRMB_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, soulStone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, pkScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, godScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, subRMB_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, wings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, fashions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, lovePoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, pkScoreActive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, rmbActive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, totalCost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, blessActive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, transforms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, activeCost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, activeCostEndTime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, rides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, godShips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, godShipsPackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, ridesFood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, openServerScore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, pkStatus_),
  };
  PB_ItemPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_ItemPackage_descriptor_,
      PB_ItemPackage::default_instance_,
      PB_ItemPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ItemPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_ItemPackage));
  PB_ItemPackage_Begin_descriptor_ = PB_ItemPackage_descriptor_->enum_type(0);
  PB_ItemPackage_Length_descriptor_ = PB_ItemPackage_descriptor_->enum_type(1);
  PB_ALT_descriptor_ = file->message_type(4);
  static const int PB_ALT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ALT, alt_),
  };
  PB_ALT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PB_ALT_descriptor_,
      PB_ALT::default_instance_,
      PB_ALT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ALT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PB_ALT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PB_ALT));
  PB_ALT_Pos_descriptor_ = PB_ALT_descriptor_->enum_type(0);
  DropItem_descriptor_ = file->message_type(5);
  static const int DropItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, rate_),
  };
  DropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropItem_descriptor_,
      DropItem::default_instance_,
      DropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropItem));
  DropTable_descriptor_ = file->message_type(6);
  static const int DropTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTable, dropItems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTable, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTable, max_),
  };
  DropTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropTable_descriptor_,
      DropTable::default_instance_,
      DropTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropTable));
  AllDropTables_descriptor_ = file->message_type(7);
  static const int AllDropTables_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDropTables, dropTables_),
  };
  AllDropTables_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllDropTables_descriptor_,
      AllDropTables::default_instance_,
      AllDropTables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDropTables, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDropTables, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllDropTables));
  ExchangeTable_descriptor_ = file->message_type(8);
  static const int ExchangeTable_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeTable, sourceGoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeTable, sourceCount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeTable, targetType_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeTable, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeTable, arg2_),
  };
  ExchangeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeTable_descriptor_,
      ExchangeTable::default_instance_,
      ExchangeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeTable));
  AllExchangeTable_descriptor_ = file->message_type(9);
  static const int AllExchangeTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllExchangeTable, exchangeTable_),
  };
  AllExchangeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllExchangeTable_descriptor_,
      AllExchangeTable::default_instance_,
      AllExchangeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllExchangeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllExchangeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllExchangeTable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ItemInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsInfo_descriptor_, &GoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllGoods_descriptor_, &AllGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_TransformAsset_descriptor_, &PB_TransformAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_ItemPackage_descriptor_, &PB_ItemPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PB_ALT_descriptor_, &PB_ALT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropItem_descriptor_, &DropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropTable_descriptor_, &DropTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllDropTables_descriptor_, &AllDropTables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeTable_descriptor_, &ExchangeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllExchangeTable_descriptor_, &AllExchangeTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ItemInfo_2eproto() {
  delete GoodsInfo::default_instance_;
  delete GoodsInfo_reflection_;
  delete AllGoods::default_instance_;
  delete AllGoods_reflection_;
  delete PB_TransformAsset::default_instance_;
  delete PB_TransformAsset_reflection_;
  delete PB_ItemPackage::default_instance_;
  delete PB_ItemPackage_reflection_;
  delete PB_ALT::default_instance_;
  delete PB_ALT_reflection_;
  delete DropItem::default_instance_;
  delete DropItem_reflection_;
  delete DropTable::default_instance_;
  delete DropTable_reflection_;
  delete AllDropTables::default_instance_;
  delete AllDropTables_reflection_;
  delete ExchangeTable::default_instance_;
  delete ExchangeTable_reflection_;
  delete AllExchangeTable::default_instance_;
  delete AllExchangeTable_reflection_;
}

void protobuf_AddDesc_ItemInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Math_2eproto();
  ::protobuf_AddDesc_Fashion_2eproto();
  ::protobuf_AddDesc_EquipmentInfo_2eproto();
  ::protobuf_AddDesc_ItemBaseInfo_2eproto();
  ::protobuf_AddDesc_BoxInfo_2eproto();
  ::protobuf_AddDesc_GodShip_2eproto();
  ::protobuf_AddDesc_RidesInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ItemInfo.proto\032\nMath.proto\032\rFashion.pr"
    "oto\032\023EquipmentInfo.proto\032\022ItemBaseInfo.p"
    "roto\032\rBoxInfo.proto\032\rGodShip.proto\032\017Ride"
    "sInfo.proto\"\304\005\n\tGoodsInfo\022\n\n\002id\030\001 \001(\003\022\014\n"
    "\004name\030\002 \001(\t\022\017\n\007picture\030\003 \001(\005\022\r\n\005price\030\004 "
    "\001(\005\022\013\n\003rmb\030\005 \001(\005\022\035\n\004type\030\006 \001(\0162\017.GoodsIn"
    "fo.Type\022\016\n\006repeat\030\007 \001(\005\022\013\n\003arg\030\010 \003(\005\022\014\n\004"
    "desc\030\t \001(\t\022\025\n\rrequiredLevel\030\n \001(\005\022\'\n\tcol"
    "orType\030\013 \001(\0162\024.GoodsInfo.ColorType\022\022\n\nst"
    "ampCount\030\014 \001(\005\022\014\n\004bind\030\r \001(\010\022\021\n\tlovePoin"
    "t\030\016 \001(\005\022\020\n\010pvpScore\030\017 \001(\005\022\020\n\010godScore\030\020 "
    "\001(\005\022\031\n\021factionContribute\030\021 \001(\005\022\020\n\010helpNo"
    "de\030\022 \001(\005\022\016\n\006useRMB\030\023 \001(\005\"\215\002\n\004Type\022\007\n\003EXP"
    "\020\000\022\014\n\010MATERIAL\020\001\022\007\n\003GEM\020\002\022\t\n\005MONEY\020\003\022\013\n\007"
    "MISSION\020\004\022\007\n\003BOX\020\005\022\007\n\003RMB\020\006\022\010\n\004SOUL\020\007\022\014\n"
    "\010SOULJADE\020\010\022\r\n\tSOULSTONE\020\t\022\n\n\006SUBRMB\020\n\022\016"
    "\n\nRECIPE_EQU\020\013\022\010\n\004RUNE\020\014\022\007\n\003EGG\020\r\022\r\n\tSKI"
    "LLBOOK\020\016\022\014\n\010LOCK_BOX\020\017\022\007\n\003KEY\020\020\022\007\n\003VIP\020\021"
    "\022\022\n\016UNLOCK_PACKAGE\020\022\022\016\n\nMONTH_CARD\020\023\022\022\n\016"
    "RIDES_FRAGMENT\020\024\"@\n\tColorType\022\t\n\005WHITE\020\000"
    "\022\t\n\005GREEN\020\001\022\010\n\004BLUE\020\002\022\n\n\006YELLOW\020\003\022\007\n\003RED"
    "\020\004\"%\n\010AllGoods\022\031\n\005goods\030\001 \003(\0132\n.GoodsInf"
    "o\"C\n\021PB_TransformAsset\022\016\n\002id\030\001 \001(\005:\002-1\022\017"
    "\n\007quality\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\"\337\006\n\016PB_It"
    "emPackage\022\033\n\005items\030\001 \003(\0132\014.PB_ItemInfo\022\r"
    "\n\005money\030\002 \001(\003\022\013\n\003rmb\030\003 \001(\003\022\031\n\021validNumEq"
    "uipment\030\004 \001(\005\022\025\n\rvalidNumGoods\030\005 \001(\005\022\023\n\013"
    "validNumGem\030\006 \001(\005\022\014\n\004soul\030\007 \001(\003\022\021\n\tsmall"
    "Soul\030\010 \001(\003\022\022\n\nmediumSoul\030\t \001(\003\022\017\n\007bigSou"
    "l\030\n \001(\003\022\023\n\013perfectSoul\030\013 \001(\003\022\r\n\005honor\030\014 "
    "\001(\005\022\022\n\ndurability\030\r \001(\005\022\020\n\010totalRMB\030\016 \001("
    "\003\022\021\n\tsoulStone\030\017 \001(\003\022\017\n\007pkScore\030\020 \001(\003\022\013\n"
    "\003vip\030\021 \001(\005\022\020\n\010godScore\030\022 \001(\005\022\016\n\006subRMB\030\024"
    " \001(\003\022\r\n\005wings\030\025 \003(\005\022\"\n\010fashions\030\027 \003(\0132\020."
    "PB_FashionAsset\022\021\n\tlovePoint\030\030 \001(\005\022\036\n\006eq"
    "uips\030\031 \003(\0132\016.PB_EquipAsset\022\025\n\rpkScoreAct"
    "ive\030\032 \001(\003\022\021\n\trmbActive\030\033 \001(\005\022\021\n\ttotalCos"
    "t\030\034 \001(\003\022\023\n\013blessActive\030\035 \001(\005\022&\n\ntransfor"
    "ms\030\036 \003(\0132\022.PB_TransformAsset\022\022\n\nactiveCo"
    "st\030\037 \001(\005\022\031\n\021activeCostEndTime\030  \001(\005\022\035\n\005r"
    "ides\030! \003(\0132\016.PB_RidesAsset\022\"\n\010godShips\030\""
    " \003(\0132\020.PB_GodShipAsset\022\027\n\017godShipsPackag"
    "e\030# \003(\005\022\021\n\tridesFood\030$ \001(\003\022\027\n\017openServer"
    "Score\030% \001(\005\022\020\n\010pkStatus\030& \001(\010\"+\n\005Begin\022\r"
    "\n\tEQUIPMENT\020\000\022\t\n\005GOODS\020i\022\010\n\003GEM\020\322\001\"\024\n\006Le"
    "ngth\022\n\n\006LENGTH\020i\">\n\006PB_ALT\022\031\n\003alt\030\001 \003(\0132"
    "\014.PB_ItemInfo\"\031\n\003Pos\022\t\n\005BEGIN\020\000\022\007\n\003END\020\010"
    "\"E\n\010DropItem\022\037\n\004type\030\001 \001(\0162\021.PB_ItemInfo"
    ".Type\022\n\n\002id\030\002 \001(\005\022\014\n\004rate\030\003 \001(\005\"O\n\tDropT"
    "able\022\n\n\002id\030\001 \001(\005\022\034\n\tdropItems\030\002 \003(\0132\t.Dr"
    "opItem\022\013\n\003min\030\003 \001(\005\022\013\n\003max\030\004 \001(\005\"/\n\rAllD"
    "ropTables\022\036\n\ndropTables\030\001 \003(\0132\n.DropTabl"
    "e\"x\n\rExchangeTable\022\023\n\013sourceGoods\030\001 \001(\005\022"
    "\023\n\013sourceCount\030\002 \001(\005\022!\n\ntargetType\030\003 \001(\016"
    "2\r.BoxInfo.Type\022\014\n\004arg1\030\004 \001(\005\022\014\n\004arg2\030\005 "
    "\001(\005\"9\n\020AllExchangeTable\022%\n\rexchangeTable"
    "\030\001 \003(\0132\016.ExchangeTable", 2262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ItemInfo.proto", &protobuf_RegisterTypes);
  GoodsInfo::default_instance_ = new GoodsInfo();
  AllGoods::default_instance_ = new AllGoods();
  PB_TransformAsset::default_instance_ = new PB_TransformAsset();
  PB_ItemPackage::default_instance_ = new PB_ItemPackage();
  PB_ALT::default_instance_ = new PB_ALT();
  DropItem::default_instance_ = new DropItem();
  DropTable::default_instance_ = new DropTable();
  AllDropTables::default_instance_ = new AllDropTables();
  ExchangeTable::default_instance_ = new ExchangeTable();
  AllExchangeTable::default_instance_ = new AllExchangeTable();
  GoodsInfo::default_instance_->InitAsDefaultInstance();
  AllGoods::default_instance_->InitAsDefaultInstance();
  PB_TransformAsset::default_instance_->InitAsDefaultInstance();
  PB_ItemPackage::default_instance_->InitAsDefaultInstance();
  PB_ALT::default_instance_->InitAsDefaultInstance();
  DropItem::default_instance_->InitAsDefaultInstance();
  DropTable::default_instance_->InitAsDefaultInstance();
  AllDropTables::default_instance_->InitAsDefaultInstance();
  ExchangeTable::default_instance_->InitAsDefaultInstance();
  AllExchangeTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemInfo_2eproto {
  StaticDescriptorInitializer_ItemInfo_2eproto() {
    protobuf_AddDesc_ItemInfo_2eproto();
  }
} static_descriptor_initializer_ItemInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* GoodsInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsInfo_Type_descriptor_;
}
bool GoodsInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GoodsInfo_Type GoodsInfo::EXP;
const GoodsInfo_Type GoodsInfo::MATERIAL;
const GoodsInfo_Type GoodsInfo::GEM;
const GoodsInfo_Type GoodsInfo::MONEY;
const GoodsInfo_Type GoodsInfo::MISSION;
const GoodsInfo_Type GoodsInfo::BOX;
const GoodsInfo_Type GoodsInfo::RMB;
const GoodsInfo_Type GoodsInfo::SOUL;
const GoodsInfo_Type GoodsInfo::SOULJADE;
const GoodsInfo_Type GoodsInfo::SOULSTONE;
const GoodsInfo_Type GoodsInfo::SUBRMB;
const GoodsInfo_Type GoodsInfo::RECIPE_EQU;
const GoodsInfo_Type GoodsInfo::RUNE;
const GoodsInfo_Type GoodsInfo::EGG;
const GoodsInfo_Type GoodsInfo::SKILLBOOK;
const GoodsInfo_Type GoodsInfo::LOCK_BOX;
const GoodsInfo_Type GoodsInfo::KEY;
const GoodsInfo_Type GoodsInfo::VIP;
const GoodsInfo_Type GoodsInfo::UNLOCK_PACKAGE;
const GoodsInfo_Type GoodsInfo::MONTH_CARD;
const GoodsInfo_Type GoodsInfo::RIDES_FRAGMENT;
const GoodsInfo_Type GoodsInfo::Type_MIN;
const GoodsInfo_Type GoodsInfo::Type_MAX;
const int GoodsInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GoodsInfo_ColorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsInfo_ColorType_descriptor_;
}
bool GoodsInfo_ColorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GoodsInfo_ColorType GoodsInfo::WHITE;
const GoodsInfo_ColorType GoodsInfo::GREEN;
const GoodsInfo_ColorType GoodsInfo::BLUE;
const GoodsInfo_ColorType GoodsInfo::YELLOW;
const GoodsInfo_ColorType GoodsInfo::RED;
const GoodsInfo_ColorType GoodsInfo::ColorType_MIN;
const GoodsInfo_ColorType GoodsInfo::ColorType_MAX;
const int GoodsInfo::ColorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GoodsInfo::kIdFieldNumber;
const int GoodsInfo::kNameFieldNumber;
const int GoodsInfo::kPictureFieldNumber;
const int GoodsInfo::kPriceFieldNumber;
const int GoodsInfo::kRmbFieldNumber;
const int GoodsInfo::kTypeFieldNumber;
const int GoodsInfo::kRepeatFieldNumber;
const int GoodsInfo::kArgFieldNumber;
const int GoodsInfo::kDescFieldNumber;
const int GoodsInfo::kRequiredLevelFieldNumber;
const int GoodsInfo::kColorTypeFieldNumber;
const int GoodsInfo::kStampCountFieldNumber;
const int GoodsInfo::kBindFieldNumber;
const int GoodsInfo::kLovePointFieldNumber;
const int GoodsInfo::kPvpScoreFieldNumber;
const int GoodsInfo::kGodScoreFieldNumber;
const int GoodsInfo::kFactionContributeFieldNumber;
const int GoodsInfo::kHelpNodeFieldNumber;
const int GoodsInfo::kUseRMBFieldNumber;
#endif  // !_MSC_VER

GoodsInfo::GoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsInfo::InitAsDefaultInstance() {
}

GoodsInfo::GoodsInfo(const GoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picture_ = 0;
  price_ = 0;
  rmb_ = 0;
  type_ = 0;
  repeat_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requiredLevel_ = 0;
  colorType_ = 0;
  stampCount_ = 0;
  bind_ = false;
  lovePoint_ = 0;
  pvpScore_ = 0;
  godScore_ = 0;
  factionContribute_ = 0;
  helpNode_ = 0;
  useRMB_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsInfo::~GoodsInfo() {
  SharedDtor();
}

void GoodsInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void GoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsInfo_descriptor_;
}

const GoodsInfo& GoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

GoodsInfo* GoodsInfo::default_instance_ = NULL;

GoodsInfo* GoodsInfo::New() const {
  return new GoodsInfo;
}

void GoodsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    picture_ = 0;
    price_ = 0;
    rmb_ = 0;
    type_ = 0;
    repeat_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    requiredLevel_ = 0;
    colorType_ = 0;
    stampCount_ = 0;
    bind_ = false;
    lovePoint_ = 0;
    pvpScore_ = 0;
    godScore_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    factionContribute_ = 0;
    helpNode_ = 0;
    useRMB_ = 0;
  }
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_picture;
        break;
      }
      
      // optional int32 picture = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_)));
          set_has_picture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }
      
      // optional int32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rmb;
        break;
      }
      
      // optional int32 rmb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional .GoodsInfo.Type type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GoodsInfo_Type_IsValid(value)) {
            set_type(static_cast< ::GoodsInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_repeat;
        break;
      }
      
      // optional int32 repeat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeat_)));
          set_has_repeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_arg;
        break;
      }
      
      // repeated int32 arg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_arg;
        if (input->ExpectTag(74)) goto parse_desc;
        break;
      }
      
      // optional string desc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_requiredLevel;
        break;
      }
      
      // optional int32 requiredLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiredLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requiredLevel_)));
          set_has_requiredLevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_colorType;
        break;
      }
      
      // optional .GoodsInfo.ColorType colorType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GoodsInfo_ColorType_IsValid(value)) {
            set_colorType(static_cast< ::GoodsInfo_ColorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stampCount;
        break;
      }
      
      // optional int32 stampCount = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stampCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stampCount_)));
          set_has_stampCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bind;
        break;
      }
      
      // optional bool bind = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lovePoint;
        break;
      }
      
      // optional int32 lovePoint = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lovePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lovePoint_)));
          set_has_lovePoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pvpScore;
        break;
      }
      
      // optional int32 pvpScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpScore_)));
          set_has_pvpScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_godScore;
        break;
      }
      
      // optional int32 godScore = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godScore_)));
          set_has_godScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_factionContribute;
        break;
      }
      
      // optional int32 factionContribute = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factionContribute_)));
          set_has_factionContribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_helpNode;
        break;
      }
      
      // optional int32 helpNode = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpNode_)));
          set_has_helpNode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_useRMB;
        break;
      }
      
      // optional int32 useRMB = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useRMB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useRMB_)));
          set_has_useRMB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 picture = 3;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->picture(), output);
  }
  
  // optional int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }
  
  // optional int32 rmb = 5;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rmb(), output);
  }
  
  // optional .GoodsInfo.Type type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }
  
  // optional int32 repeat = 7;
  if (has_repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->repeat(), output);
  }
  
  // repeated int32 arg = 8;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->arg(i), output);
  }
  
  // optional string desc = 9;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->desc(), output);
  }
  
  // optional int32 requiredLevel = 10;
  if (has_requiredLevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->requiredLevel(), output);
  }
  
  // optional .GoodsInfo.ColorType colorType = 11;
  if (has_colorType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->colorType(), output);
  }
  
  // optional int32 stampCount = 12;
  if (has_stampCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stampCount(), output);
  }
  
  // optional bool bind = 13;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->bind(), output);
  }
  
  // optional int32 lovePoint = 14;
  if (has_lovePoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lovePoint(), output);
  }
  
  // optional int32 pvpScore = 15;
  if (has_pvpScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pvpScore(), output);
  }
  
  // optional int32 godScore = 16;
  if (has_godScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->godScore(), output);
  }
  
  // optional int32 factionContribute = 17;
  if (has_factionContribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->factionContribute(), output);
  }
  
  // optional int32 helpNode = 18;
  if (has_helpNode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->helpNode(), output);
  }
  
  // optional int32 useRMB = 19;
  if (has_useRMB()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->useRMB(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 picture = 3;
  if (has_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->picture(), target);
  }
  
  // optional int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }
  
  // optional int32 rmb = 5;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rmb(), target);
  }
  
  // optional .GoodsInfo.Type type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }
  
  // optional int32 repeat = 7;
  if (has_repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->repeat(), target);
  }
  
  // repeated int32 arg = 8;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->arg(i), target);
  }
  
  // optional string desc = 9;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->desc(), target);
  }
  
  // optional int32 requiredLevel = 10;
  if (has_requiredLevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->requiredLevel(), target);
  }
  
  // optional .GoodsInfo.ColorType colorType = 11;
  if (has_colorType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->colorType(), target);
  }
  
  // optional int32 stampCount = 12;
  if (has_stampCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stampCount(), target);
  }
  
  // optional bool bind = 13;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->bind(), target);
  }
  
  // optional int32 lovePoint = 14;
  if (has_lovePoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lovePoint(), target);
  }
  
  // optional int32 pvpScore = 15;
  if (has_pvpScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pvpScore(), target);
  }
  
  // optional int32 godScore = 16;
  if (has_godScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->godScore(), target);
  }
  
  // optional int32 factionContribute = 17;
  if (has_factionContribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->factionContribute(), target);
  }
  
  // optional int32 helpNode = 18;
  if (has_helpNode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->helpNode(), target);
  }
  
  // optional int32 useRMB = 19;
  if (has_useRMB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->useRMB(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 picture = 3;
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->picture());
    }
    
    // optional int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
    // optional int32 rmb = 5;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional .GoodsInfo.Type type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 repeat = 7;
    if (has_repeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repeat());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string desc = 9;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 requiredLevel = 10;
    if (has_requiredLevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requiredLevel());
    }
    
    // optional .GoodsInfo.ColorType colorType = 11;
    if (has_colorType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->colorType());
    }
    
    // optional int32 stampCount = 12;
    if (has_stampCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stampCount());
    }
    
    // optional bool bind = 13;
    if (has_bind()) {
      total_size += 1 + 1;
    }
    
    // optional int32 lovePoint = 14;
    if (has_lovePoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lovePoint());
    }
    
    // optional int32 pvpScore = 15;
    if (has_pvpScore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpScore());
    }
    
    // optional int32 godScore = 16;
    if (has_godScore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godScore());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 factionContribute = 17;
    if (has_factionContribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factionContribute());
    }
    
    // optional int32 helpNode = 18;
    if (has_helpNode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpNode());
    }
    
    // optional int32 useRMB = 19;
    if (has_useRMB()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useRMB());
    }
    
  }
  // repeated int32 arg = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg(i));
    }
    total_size += 1 * this->arg_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsInfo::MergeFrom(const GoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_picture()) {
      set_picture(from.picture());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_repeat()) {
      set_repeat(from.repeat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_requiredLevel()) {
      set_requiredLevel(from.requiredLevel());
    }
    if (from.has_colorType()) {
      set_colorType(from.colorType());
    }
    if (from.has_stampCount()) {
      set_stampCount(from.stampCount());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_lovePoint()) {
      set_lovePoint(from.lovePoint());
    }
    if (from.has_pvpScore()) {
      set_pvpScore(from.pvpScore());
    }
    if (from.has_godScore()) {
      set_godScore(from.godScore());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_factionContribute()) {
      set_factionContribute(from.factionContribute());
    }
    if (from.has_helpNode()) {
      set_helpNode(from.helpNode());
    }
    if (from.has_useRMB()) {
      set_useRMB(from.useRMB());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsInfo::CopyFrom(const GoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsInfo::IsInitialized() const {
  
  return true;
}

void GoodsInfo::Swap(GoodsInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(picture_, other->picture_);
    std::swap(price_, other->price_);
    std::swap(rmb_, other->rmb_);
    std::swap(type_, other->type_);
    std::swap(repeat_, other->repeat_);
    arg_.Swap(&other->arg_);
    std::swap(desc_, other->desc_);
    std::swap(requiredLevel_, other->requiredLevel_);
    std::swap(colorType_, other->colorType_);
    std::swap(stampCount_, other->stampCount_);
    std::swap(bind_, other->bind_);
    std::swap(lovePoint_, other->lovePoint_);
    std::swap(pvpScore_, other->pvpScore_);
    std::swap(godScore_, other->godScore_);
    std::swap(factionContribute_, other->factionContribute_);
    std::swap(helpNode_, other->helpNode_);
    std::swap(useRMB_, other->useRMB_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsInfo_descriptor_;
  metadata.reflection = GoodsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllGoods::kGoodsFieldNumber;
#endif  // !_MSC_VER

AllGoods::AllGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllGoods::InitAsDefaultInstance() {
}

AllGoods::AllGoods(const AllGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllGoods::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllGoods::~AllGoods() {
  SharedDtor();
}

void AllGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllGoods_descriptor_;
}

const AllGoods& AllGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

AllGoods* AllGoods::default_instance_ = NULL;

AllGoods* AllGoods::New() const {
  return new AllGoods;
}

void AllGoods::Clear() {
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GoodsInfo goods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GoodsInfo goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GoodsInfo goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllGoods::ByteSize() const {
  int total_size = 0;
  
  // repeated .GoodsInfo goods = 1;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllGoods::MergeFrom(const AllGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllGoods::CopyFrom(const AllGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllGoods::IsInitialized() const {
  
  return true;
}

void AllGoods::Swap(AllGoods* other) {
  if (other != this) {
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllGoods_descriptor_;
  metadata.reflection = AllGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PB_TransformAsset::kIdFieldNumber;
const int PB_TransformAsset::kQualityFieldNumber;
const int PB_TransformAsset::kLevelFieldNumber;
#endif  // !_MSC_VER

PB_TransformAsset::PB_TransformAsset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_TransformAsset::InitAsDefaultInstance() {
}

PB_TransformAsset::PB_TransformAsset(const PB_TransformAsset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_TransformAsset::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  quality_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_TransformAsset::~PB_TransformAsset() {
  SharedDtor();
}

void PB_TransformAsset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_TransformAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_TransformAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_TransformAsset_descriptor_;
}

const PB_TransformAsset& PB_TransformAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

PB_TransformAsset* PB_TransformAsset::default_instance_ = NULL;

PB_TransformAsset* PB_TransformAsset::New() const {
  return new PB_TransformAsset;
}

void PB_TransformAsset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = -1;
    quality_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_TransformAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_TransformAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_TransformAsset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_TransformAsset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_TransformAsset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_TransformAsset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_TransformAsset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_TransformAsset::MergeFrom(const PB_TransformAsset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_TransformAsset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_TransformAsset::CopyFrom(const PB_TransformAsset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_TransformAsset::IsInitialized() const {
  
  return true;
}

void PB_TransformAsset::Swap(PB_TransformAsset* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(quality_, other->quality_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_TransformAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_TransformAsset_descriptor_;
  metadata.reflection = PB_TransformAsset_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PB_ItemPackage_Begin_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ItemPackage_Begin_descriptor_;
}
bool PB_ItemPackage_Begin_IsValid(int value) {
  switch(value) {
    case 0:
    case 105:
    case 210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_ItemPackage_Begin PB_ItemPackage::EQUIPMENT;
const PB_ItemPackage_Begin PB_ItemPackage::GOODS;
const PB_ItemPackage_Begin PB_ItemPackage::GEM;
const PB_ItemPackage_Begin PB_ItemPackage::Begin_MIN;
const PB_ItemPackage_Begin PB_ItemPackage::Begin_MAX;
const int PB_ItemPackage::Begin_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PB_ItemPackage_Length_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ItemPackage_Length_descriptor_;
}
bool PB_ItemPackage_Length_IsValid(int value) {
  switch(value) {
    case 105:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_ItemPackage_Length PB_ItemPackage::LENGTH;
const PB_ItemPackage_Length PB_ItemPackage::Length_MIN;
const PB_ItemPackage_Length PB_ItemPackage::Length_MAX;
const int PB_ItemPackage::Length_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PB_ItemPackage::kItemsFieldNumber;
const int PB_ItemPackage::kMoneyFieldNumber;
const int PB_ItemPackage::kRmbFieldNumber;
const int PB_ItemPackage::kValidNumEquipmentFieldNumber;
const int PB_ItemPackage::kValidNumGoodsFieldNumber;
const int PB_ItemPackage::kValidNumGemFieldNumber;
const int PB_ItemPackage::kSoulFieldNumber;
const int PB_ItemPackage::kSmallSoulFieldNumber;
const int PB_ItemPackage::kMediumSoulFieldNumber;
const int PB_ItemPackage::kBigSoulFieldNumber;
const int PB_ItemPackage::kPerfectSoulFieldNumber;
const int PB_ItemPackage::kHonorFieldNumber;
const int PB_ItemPackage::kDurabilityFieldNumber;
const int PB_ItemPackage::kTotalRMBFieldNumber;
const int PB_ItemPackage::kSoulStoneFieldNumber;
const int PB_ItemPackage::kPkScoreFieldNumber;
const int PB_ItemPackage::kVipFieldNumber;
const int PB_ItemPackage::kGodScoreFieldNumber;
const int PB_ItemPackage::kSubRMBFieldNumber;
const int PB_ItemPackage::kWingsFieldNumber;
const int PB_ItemPackage::kFashionsFieldNumber;
const int PB_ItemPackage::kLovePointFieldNumber;
const int PB_ItemPackage::kEquipsFieldNumber;
const int PB_ItemPackage::kPkScoreActiveFieldNumber;
const int PB_ItemPackage::kRmbActiveFieldNumber;
const int PB_ItemPackage::kTotalCostFieldNumber;
const int PB_ItemPackage::kBlessActiveFieldNumber;
const int PB_ItemPackage::kTransformsFieldNumber;
const int PB_ItemPackage::kActiveCostFieldNumber;
const int PB_ItemPackage::kActiveCostEndTimeFieldNumber;
const int PB_ItemPackage::kRidesFieldNumber;
const int PB_ItemPackage::kGodShipsFieldNumber;
const int PB_ItemPackage::kGodShipsPackageFieldNumber;
const int PB_ItemPackage::kRidesFoodFieldNumber;
const int PB_ItemPackage::kOpenServerScoreFieldNumber;
const int PB_ItemPackage::kPkStatusFieldNumber;
#endif  // !_MSC_VER

PB_ItemPackage::PB_ItemPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_ItemPackage::InitAsDefaultInstance() {
}

PB_ItemPackage::PB_ItemPackage(const PB_ItemPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_ItemPackage::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  rmb_ = GOOGLE_LONGLONG(0);
  validNumEquipment_ = 0;
  validNumGoods_ = 0;
  validNumGem_ = 0;
  soul_ = GOOGLE_LONGLONG(0);
  smallSoul_ = GOOGLE_LONGLONG(0);
  mediumSoul_ = GOOGLE_LONGLONG(0);
  bigSoul_ = GOOGLE_LONGLONG(0);
  perfectSoul_ = GOOGLE_LONGLONG(0);
  honor_ = 0;
  durability_ = 0;
  totalRMB_ = GOOGLE_LONGLONG(0);
  soulStone_ = GOOGLE_LONGLONG(0);
  pkScore_ = GOOGLE_LONGLONG(0);
  vip_ = 0;
  godScore_ = 0;
  subRMB_ = GOOGLE_LONGLONG(0);
  lovePoint_ = 0;
  pkScoreActive_ = GOOGLE_LONGLONG(0);
  rmbActive_ = 0;
  totalCost_ = GOOGLE_LONGLONG(0);
  blessActive_ = 0;
  activeCost_ = 0;
  activeCostEndTime_ = 0;
  ridesFood_ = GOOGLE_LONGLONG(0);
  openServerScore_ = 0;
  pkStatus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_ItemPackage::~PB_ItemPackage() {
  SharedDtor();
}

void PB_ItemPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_ItemPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_ItemPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ItemPackage_descriptor_;
}

const PB_ItemPackage& PB_ItemPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

PB_ItemPackage* PB_ItemPackage::default_instance_ = NULL;

PB_ItemPackage* PB_ItemPackage::New() const {
  return new PB_ItemPackage;
}

void PB_ItemPackage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    money_ = GOOGLE_LONGLONG(0);
    rmb_ = GOOGLE_LONGLONG(0);
    validNumEquipment_ = 0;
    validNumGoods_ = 0;
    validNumGem_ = 0;
    soul_ = GOOGLE_LONGLONG(0);
    smallSoul_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mediumSoul_ = GOOGLE_LONGLONG(0);
    bigSoul_ = GOOGLE_LONGLONG(0);
    perfectSoul_ = GOOGLE_LONGLONG(0);
    honor_ = 0;
    durability_ = 0;
    totalRMB_ = GOOGLE_LONGLONG(0);
    soulStone_ = GOOGLE_LONGLONG(0);
    pkScore_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vip_ = 0;
    godScore_ = 0;
    subRMB_ = GOOGLE_LONGLONG(0);
    lovePoint_ = 0;
    pkScoreActive_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    rmbActive_ = 0;
    totalCost_ = GOOGLE_LONGLONG(0);
    blessActive_ = 0;
    activeCost_ = 0;
    activeCostEndTime_ = 0;
  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    ridesFood_ = GOOGLE_LONGLONG(0);
    openServerScore_ = 0;
    pkStatus_ = false;
  }
  items_.Clear();
  wings_.Clear();
  fashions_.Clear();
  equips_.Clear();
  transforms_.Clear();
  rides_.Clear();
  godShips_.Clear();
  godShipsPackage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_ItemPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_ItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }
      
      // optional int64 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rmb;
        break;
      }
      
      // optional int64 rmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_validNumEquipment;
        break;
      }
      
      // optional int32 validNumEquipment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validNumEquipment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validNumEquipment_)));
          set_has_validNumEquipment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_validNumGoods;
        break;
      }
      
      // optional int32 validNumGoods = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validNumGoods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validNumGoods_)));
          set_has_validNumGoods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_validNumGem;
        break;
      }
      
      // optional int32 validNumGem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validNumGem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validNumGem_)));
          set_has_validNumGem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_soul;
        break;
      }
      
      // optional int64 soul = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &soul_)));
          set_has_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_smallSoul;
        break;
      }
      
      // optional int64 smallSoul = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallSoul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &smallSoul_)));
          set_has_smallSoul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mediumSoul;
        break;
      }
      
      // optional int64 mediumSoul = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mediumSoul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mediumSoul_)));
          set_has_mediumSoul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bigSoul;
        break;
      }
      
      // optional int64 bigSoul = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigSoul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bigSoul_)));
          set_has_bigSoul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_perfectSoul;
        break;
      }
      
      // optional int64 perfectSoul = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perfectSoul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &perfectSoul_)));
          set_has_perfectSoul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_honor;
        break;
      }
      
      // optional int32 honor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_durability;
        break;
      }
      
      // optional int32 durability = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durability_)));
          set_has_durability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_totalRMB;
        break;
      }
      
      // optional int64 totalRMB = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalRMB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalRMB_)));
          set_has_totalRMB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_soulStone;
        break;
      }
      
      // optional int64 soulStone = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulStone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &soulStone_)));
          set_has_soulStone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pkScore;
        break;
      }
      
      // optional int64 pkScore = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pkScore_)));
          set_has_pkScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_vip;
        break;
      }
      
      // optional int32 vip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_godScore;
        break;
      }
      
      // optional int32 godScore = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godScore_)));
          set_has_godScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_subRMB;
        break;
      }
      
      // optional int64 subRMB = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subRMB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subRMB_)));
          set_has_subRMB();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_wings;
        break;
      }
      
      // repeated int32 wings = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_wings())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wings())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_wings;
        if (input->ExpectTag(186)) goto parse_fashions;
        break;
      }
      
      // repeated .PB_FashionAsset fashions = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_fashions;
        if (input->ExpectTag(192)) goto parse_lovePoint;
        break;
      }
      
      // optional int32 lovePoint = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lovePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lovePoint_)));
          set_has_lovePoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_equips;
        break;
      }
      
      // repeated .PB_EquipAsset equips = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_equips;
        if (input->ExpectTag(208)) goto parse_pkScoreActive;
        break;
      }
      
      // optional int64 pkScoreActive = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkScoreActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pkScoreActive_)));
          set_has_pkScoreActive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_rmbActive;
        break;
      }
      
      // optional int32 rmbActive = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmbActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmbActive_)));
          set_has_rmbActive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_totalCost;
        break;
      }
      
      // optional int64 totalCost = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalCost_)));
          set_has_totalCost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_blessActive;
        break;
      }
      
      // optional int32 blessActive = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blessActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blessActive_)));
          set_has_blessActive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_transforms;
        break;
      }
      
      // repeated .PB_TransformAsset transforms = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transforms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transforms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_transforms;
        if (input->ExpectTag(248)) goto parse_activeCost;
        break;
      }
      
      // optional int32 activeCost = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeCost_)));
          set_has_activeCost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_activeCostEndTime;
        break;
      }
      
      // optional int32 activeCostEndTime = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeCostEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeCostEndTime_)));
          set_has_activeCostEndTime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_rides;
        break;
      }
      
      // repeated .PB_RidesAsset rides = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rides()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_rides;
        if (input->ExpectTag(274)) goto parse_godShips;
        break;
      }
      
      // repeated .PB_GodShipAsset godShips = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godShips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_godShips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_godShips;
        if (input->ExpectTag(280)) goto parse_godShipsPackage;
        break;
      }
      
      // repeated int32 godShipsPackage = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godShipsPackage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 280, input, this->mutable_godShipsPackage())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_godShipsPackage())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_godShipsPackage;
        if (input->ExpectTag(288)) goto parse_ridesFood;
        break;
      }
      
      // optional int64 ridesFood = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ridesFood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ridesFood_)));
          set_has_ridesFood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_openServerScore;
        break;
      }
      
      // optional int32 openServerScore = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openServerScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openServerScore_)));
          set_has_openServerScore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_pkStatus;
        break;
      }
      
      // optional bool pkStatus = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pkStatus_)));
          set_has_pkStatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_ItemPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // optional int64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }
  
  // optional int64 rmb = 3;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rmb(), output);
  }
  
  // optional int32 validNumEquipment = 4;
  if (has_validNumEquipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->validNumEquipment(), output);
  }
  
  // optional int32 validNumGoods = 5;
  if (has_validNumGoods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->validNumGoods(), output);
  }
  
  // optional int32 validNumGem = 6;
  if (has_validNumGem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->validNumGem(), output);
  }
  
  // optional int64 soul = 7;
  if (has_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->soul(), output);
  }
  
  // optional int64 smallSoul = 8;
  if (has_smallSoul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->smallSoul(), output);
  }
  
  // optional int64 mediumSoul = 9;
  if (has_mediumSoul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->mediumSoul(), output);
  }
  
  // optional int64 bigSoul = 10;
  if (has_bigSoul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->bigSoul(), output);
  }
  
  // optional int64 perfectSoul = 11;
  if (has_perfectSoul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->perfectSoul(), output);
  }
  
  // optional int32 honor = 12;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->honor(), output);
  }
  
  // optional int32 durability = 13;
  if (has_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->durability(), output);
  }
  
  // optional int64 totalRMB = 14;
  if (has_totalRMB()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->totalRMB(), output);
  }
  
  // optional int64 soulStone = 15;
  if (has_soulStone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->soulStone(), output);
  }
  
  // optional int64 pkScore = 16;
  if (has_pkScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->pkScore(), output);
  }
  
  // optional int32 vip = 17;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->vip(), output);
  }
  
  // optional int32 godScore = 18;
  if (has_godScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->godScore(), output);
  }
  
  // optional int64 subRMB = 20;
  if (has_subRMB()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->subRMB(), output);
  }
  
  // repeated int32 wings = 21;
  for (int i = 0; i < this->wings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->wings(i), output);
  }
  
  // repeated .PB_FashionAsset fashions = 23;
  for (int i = 0; i < this->fashions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->fashions(i), output);
  }
  
  // optional int32 lovePoint = 24;
  if (has_lovePoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->lovePoint(), output);
  }
  
  // repeated .PB_EquipAsset equips = 25;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->equips(i), output);
  }
  
  // optional int64 pkScoreActive = 26;
  if (has_pkScoreActive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->pkScoreActive(), output);
  }
  
  // optional int32 rmbActive = 27;
  if (has_rmbActive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->rmbActive(), output);
  }
  
  // optional int64 totalCost = 28;
  if (has_totalCost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->totalCost(), output);
  }
  
  // optional int32 blessActive = 29;
  if (has_blessActive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->blessActive(), output);
  }
  
  // repeated .PB_TransformAsset transforms = 30;
  for (int i = 0; i < this->transforms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->transforms(i), output);
  }
  
  // optional int32 activeCost = 31;
  if (has_activeCost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->activeCost(), output);
  }
  
  // optional int32 activeCostEndTime = 32;
  if (has_activeCostEndTime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->activeCostEndTime(), output);
  }
  
  // repeated .PB_RidesAsset rides = 33;
  for (int i = 0; i < this->rides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->rides(i), output);
  }
  
  // repeated .PB_GodShipAsset godShips = 34;
  for (int i = 0; i < this->godShips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->godShips(i), output);
  }
  
  // repeated int32 godShipsPackage = 35;
  for (int i = 0; i < this->godShipsPackage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      35, this->godShipsPackage(i), output);
  }
  
  // optional int64 ridesFood = 36;
  if (has_ridesFood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->ridesFood(), output);
  }
  
  // optional int32 openServerScore = 37;
  if (has_openServerScore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->openServerScore(), output);
  }
  
  // optional bool pkStatus = 38;
  if (has_pkStatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->pkStatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_ItemPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // optional int64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }
  
  // optional int64 rmb = 3;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rmb(), target);
  }
  
  // optional int32 validNumEquipment = 4;
  if (has_validNumEquipment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->validNumEquipment(), target);
  }
  
  // optional int32 validNumGoods = 5;
  if (has_validNumGoods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->validNumGoods(), target);
  }
  
  // optional int32 validNumGem = 6;
  if (has_validNumGem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->validNumGem(), target);
  }
  
  // optional int64 soul = 7;
  if (has_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->soul(), target);
  }
  
  // optional int64 smallSoul = 8;
  if (has_smallSoul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->smallSoul(), target);
  }
  
  // optional int64 mediumSoul = 9;
  if (has_mediumSoul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->mediumSoul(), target);
  }
  
  // optional int64 bigSoul = 10;
  if (has_bigSoul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->bigSoul(), target);
  }
  
  // optional int64 perfectSoul = 11;
  if (has_perfectSoul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->perfectSoul(), target);
  }
  
  // optional int32 honor = 12;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->honor(), target);
  }
  
  // optional int32 durability = 13;
  if (has_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->durability(), target);
  }
  
  // optional int64 totalRMB = 14;
  if (has_totalRMB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->totalRMB(), target);
  }
  
  // optional int64 soulStone = 15;
  if (has_soulStone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->soulStone(), target);
  }
  
  // optional int64 pkScore = 16;
  if (has_pkScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->pkScore(), target);
  }
  
  // optional int32 vip = 17;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->vip(), target);
  }
  
  // optional int32 godScore = 18;
  if (has_godScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->godScore(), target);
  }
  
  // optional int64 subRMB = 20;
  if (has_subRMB()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->subRMB(), target);
  }
  
  // repeated int32 wings = 21;
  for (int i = 0; i < this->wings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->wings(i), target);
  }
  
  // repeated .PB_FashionAsset fashions = 23;
  for (int i = 0; i < this->fashions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->fashions(i), target);
  }
  
  // optional int32 lovePoint = 24;
  if (has_lovePoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->lovePoint(), target);
  }
  
  // repeated .PB_EquipAsset equips = 25;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->equips(i), target);
  }
  
  // optional int64 pkScoreActive = 26;
  if (has_pkScoreActive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->pkScoreActive(), target);
  }
  
  // optional int32 rmbActive = 27;
  if (has_rmbActive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->rmbActive(), target);
  }
  
  // optional int64 totalCost = 28;
  if (has_totalCost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->totalCost(), target);
  }
  
  // optional int32 blessActive = 29;
  if (has_blessActive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->blessActive(), target);
  }
  
  // repeated .PB_TransformAsset transforms = 30;
  for (int i = 0; i < this->transforms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->transforms(i), target);
  }
  
  // optional int32 activeCost = 31;
  if (has_activeCost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->activeCost(), target);
  }
  
  // optional int32 activeCostEndTime = 32;
  if (has_activeCostEndTime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->activeCostEndTime(), target);
  }
  
  // repeated .PB_RidesAsset rides = 33;
  for (int i = 0; i < this->rides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->rides(i), target);
  }
  
  // repeated .PB_GodShipAsset godShips = 34;
  for (int i = 0; i < this->godShips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->godShips(i), target);
  }
  
  // repeated int32 godShipsPackage = 35;
  for (int i = 0; i < this->godShipsPackage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(35, this->godShipsPackage(i), target);
  }
  
  // optional int64 ridesFood = 36;
  if (has_ridesFood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->ridesFood(), target);
  }
  
  // optional int32 openServerScore = 37;
  if (has_openServerScore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->openServerScore(), target);
  }
  
  // optional bool pkStatus = 38;
  if (has_pkStatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->pkStatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_ItemPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }
    
    // optional int64 rmb = 3;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rmb());
    }
    
    // optional int32 validNumEquipment = 4;
    if (has_validNumEquipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validNumEquipment());
    }
    
    // optional int32 validNumGoods = 5;
    if (has_validNumGoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validNumGoods());
    }
    
    // optional int32 validNumGem = 6;
    if (has_validNumGem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validNumGem());
    }
    
    // optional int64 soul = 7;
    if (has_soul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->soul());
    }
    
    // optional int64 smallSoul = 8;
    if (has_smallSoul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->smallSoul());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 mediumSoul = 9;
    if (has_mediumSoul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mediumSoul());
    }
    
    // optional int64 bigSoul = 10;
    if (has_bigSoul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bigSoul());
    }
    
    // optional int64 perfectSoul = 11;
    if (has_perfectSoul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->perfectSoul());
    }
    
    // optional int32 honor = 12;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }
    
    // optional int32 durability = 13;
    if (has_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->durability());
    }
    
    // optional int64 totalRMB = 14;
    if (has_totalRMB()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalRMB());
    }
    
    // optional int64 soulStone = 15;
    if (has_soulStone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->soulStone());
    }
    
    // optional int64 pkScore = 16;
    if (has_pkScore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pkScore());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 vip = 17;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }
    
    // optional int32 godScore = 18;
    if (has_godScore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godScore());
    }
    
    // optional int64 subRMB = 20;
    if (has_subRMB()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->subRMB());
    }
    
    // optional int32 lovePoint = 24;
    if (has_lovePoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lovePoint());
    }
    
    // optional int64 pkScoreActive = 26;
    if (has_pkScoreActive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pkScoreActive());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 rmbActive = 27;
    if (has_rmbActive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmbActive());
    }
    
    // optional int64 totalCost = 28;
    if (has_totalCost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalCost());
    }
    
    // optional int32 blessActive = 29;
    if (has_blessActive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blessActive());
    }
    
    // optional int32 activeCost = 31;
    if (has_activeCost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeCost());
    }
    
    // optional int32 activeCostEndTime = 32;
    if (has_activeCostEndTime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeCostEndTime());
    }
    
  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    // optional int64 ridesFood = 36;
    if (has_ridesFood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ridesFood());
    }
    
    // optional int32 openServerScore = 37;
    if (has_openServerScore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openServerScore());
    }
    
    // optional bool pkStatus = 38;
    if (has_pkStatus()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .PB_ItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated int32 wings = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->wings_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wings(i));
    }
    total_size += 2 * this->wings_size() + data_size;
  }
  
  // repeated .PB_FashionAsset fashions = 23;
  total_size += 2 * this->fashions_size();
  for (int i = 0; i < this->fashions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashions(i));
  }
  
  // repeated .PB_EquipAsset equips = 25;
  total_size += 2 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }
  
  // repeated .PB_TransformAsset transforms = 30;
  total_size += 2 * this->transforms_size();
  for (int i = 0; i < this->transforms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transforms(i));
  }
  
  // repeated .PB_RidesAsset rides = 33;
  total_size += 2 * this->rides_size();
  for (int i = 0; i < this->rides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rides(i));
  }
  
  // repeated .PB_GodShipAsset godShips = 34;
  total_size += 2 * this->godShips_size();
  for (int i = 0; i < this->godShips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->godShips(i));
  }
  
  // repeated int32 godShipsPackage = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->godShipsPackage_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->godShipsPackage(i));
    }
    total_size += 2 * this->godShipsPackage_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_ItemPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_ItemPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_ItemPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_ItemPackage::MergeFrom(const PB_ItemPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  wings_.MergeFrom(from.wings_);
  fashions_.MergeFrom(from.fashions_);
  equips_.MergeFrom(from.equips_);
  transforms_.MergeFrom(from.transforms_);
  rides_.MergeFrom(from.rides_);
  godShips_.MergeFrom(from.godShips_);
  godShipsPackage_.MergeFrom(from.godShipsPackage_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_validNumEquipment()) {
      set_validNumEquipment(from.validNumEquipment());
    }
    if (from.has_validNumGoods()) {
      set_validNumGoods(from.validNumGoods());
    }
    if (from.has_validNumGem()) {
      set_validNumGem(from.validNumGem());
    }
    if (from.has_soul()) {
      set_soul(from.soul());
    }
    if (from.has_smallSoul()) {
      set_smallSoul(from.smallSoul());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mediumSoul()) {
      set_mediumSoul(from.mediumSoul());
    }
    if (from.has_bigSoul()) {
      set_bigSoul(from.bigSoul());
    }
    if (from.has_perfectSoul()) {
      set_perfectSoul(from.perfectSoul());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_durability()) {
      set_durability(from.durability());
    }
    if (from.has_totalRMB()) {
      set_totalRMB(from.totalRMB());
    }
    if (from.has_soulStone()) {
      set_soulStone(from.soulStone());
    }
    if (from.has_pkScore()) {
      set_pkScore(from.pkScore());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_godScore()) {
      set_godScore(from.godScore());
    }
    if (from.has_subRMB()) {
      set_subRMB(from.subRMB());
    }
    if (from.has_lovePoint()) {
      set_lovePoint(from.lovePoint());
    }
    if (from.has_pkScoreActive()) {
      set_pkScoreActive(from.pkScoreActive());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_rmbActive()) {
      set_rmbActive(from.rmbActive());
    }
    if (from.has_totalCost()) {
      set_totalCost(from.totalCost());
    }
    if (from.has_blessActive()) {
      set_blessActive(from.blessActive());
    }
    if (from.has_activeCost()) {
      set_activeCost(from.activeCost());
    }
    if (from.has_activeCostEndTime()) {
      set_activeCostEndTime(from.activeCostEndTime());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from.has_ridesFood()) {
      set_ridesFood(from.ridesFood());
    }
    if (from.has_openServerScore()) {
      set_openServerScore(from.openServerScore());
    }
    if (from.has_pkStatus()) {
      set_pkStatus(from.pkStatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_ItemPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_ItemPackage::CopyFrom(const PB_ItemPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_ItemPackage::IsInitialized() const {
  
  return true;
}

void PB_ItemPackage::Swap(PB_ItemPackage* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(money_, other->money_);
    std::swap(rmb_, other->rmb_);
    std::swap(validNumEquipment_, other->validNumEquipment_);
    std::swap(validNumGoods_, other->validNumGoods_);
    std::swap(validNumGem_, other->validNumGem_);
    std::swap(soul_, other->soul_);
    std::swap(smallSoul_, other->smallSoul_);
    std::swap(mediumSoul_, other->mediumSoul_);
    std::swap(bigSoul_, other->bigSoul_);
    std::swap(perfectSoul_, other->perfectSoul_);
    std::swap(honor_, other->honor_);
    std::swap(durability_, other->durability_);
    std::swap(totalRMB_, other->totalRMB_);
    std::swap(soulStone_, other->soulStone_);
    std::swap(pkScore_, other->pkScore_);
    std::swap(vip_, other->vip_);
    std::swap(godScore_, other->godScore_);
    std::swap(subRMB_, other->subRMB_);
    wings_.Swap(&other->wings_);
    fashions_.Swap(&other->fashions_);
    std::swap(lovePoint_, other->lovePoint_);
    equips_.Swap(&other->equips_);
    std::swap(pkScoreActive_, other->pkScoreActive_);
    std::swap(rmbActive_, other->rmbActive_);
    std::swap(totalCost_, other->totalCost_);
    std::swap(blessActive_, other->blessActive_);
    transforms_.Swap(&other->transforms_);
    std::swap(activeCost_, other->activeCost_);
    std::swap(activeCostEndTime_, other->activeCostEndTime_);
    rides_.Swap(&other->rides_);
    godShips_.Swap(&other->godShips_);
    godShipsPackage_.Swap(&other->godShipsPackage_);
    std::swap(ridesFood_, other->ridesFood_);
    std::swap(openServerScore_, other->openServerScore_);
    std::swap(pkStatus_, other->pkStatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_ItemPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_ItemPackage_descriptor_;
  metadata.reflection = PB_ItemPackage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PB_ALT_Pos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ALT_Pos_descriptor_;
}
bool PB_ALT_Pos_IsValid(int value) {
  switch(value) {
    case 0:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PB_ALT_Pos PB_ALT::BEGIN;
const PB_ALT_Pos PB_ALT::END;
const PB_ALT_Pos PB_ALT::Pos_MIN;
const PB_ALT_Pos PB_ALT::Pos_MAX;
const int PB_ALT::Pos_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PB_ALT::kAltFieldNumber;
#endif  // !_MSC_VER

PB_ALT::PB_ALT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PB_ALT::InitAsDefaultInstance() {
}

PB_ALT::PB_ALT(const PB_ALT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PB_ALT::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_ALT::~PB_ALT() {
  SharedDtor();
}

void PB_ALT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_ALT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PB_ALT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_ALT_descriptor_;
}

const PB_ALT& PB_ALT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

PB_ALT* PB_ALT::default_instance_ = NULL;

PB_ALT* PB_ALT::New() const {
  return new PB_ALT;
}

void PB_ALT::Clear() {
  alt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PB_ALT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_ItemInfo alt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_alt;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_ALT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_ItemInfo alt = 1;
  for (int i = 0; i < this->alt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alt(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PB_ALT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_ItemInfo alt = 1;
  for (int i = 0; i < this->alt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alt(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PB_ALT::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_ItemInfo alt = 1;
  total_size += 1 * this->alt_size();
  for (int i = 0; i < this->alt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alt(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_ALT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PB_ALT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PB_ALT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PB_ALT::MergeFrom(const PB_ALT& from) {
  GOOGLE_CHECK_NE(&from, this);
  alt_.MergeFrom(from.alt_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PB_ALT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PB_ALT::CopyFrom(const PB_ALT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_ALT::IsInitialized() const {
  
  return true;
}

void PB_ALT::Swap(PB_ALT* other) {
  if (other != this) {
    alt_.Swap(&other->alt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PB_ALT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PB_ALT_descriptor_;
  metadata.reflection = PB_ALT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropItem::kTypeFieldNumber;
const int DropItem::kIdFieldNumber;
const int DropItem::kRateFieldNumber;
#endif  // !_MSC_VER

DropItem::DropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropItem::InitAsDefaultInstance() {
}

DropItem::DropItem(const DropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropItem::~DropItem() {
  SharedDtor();
}

void DropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropItem_descriptor_;
}

const DropItem& DropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

DropItem* DropItem::default_instance_ = NULL;

DropItem* DropItem::New() const {
  return new DropItem;
}

void DropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB_ItemInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PB_ItemInfo_Type_IsValid(value)) {
            set_type(static_cast< ::PB_ItemInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }
      
      // optional int32 rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB_ItemInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB_ItemInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB_ItemInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropItem::MergeFrom(const DropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropItem::CopyFrom(const DropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropItem::IsInitialized() const {
  
  return true;
}

void DropItem::Swap(DropItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropItem_descriptor_;
  metadata.reflection = DropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropTable::kIdFieldNumber;
const int DropTable::kDropItemsFieldNumber;
const int DropTable::kMinFieldNumber;
const int DropTable::kMaxFieldNumber;
#endif  // !_MSC_VER

DropTable::DropTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropTable::InitAsDefaultInstance() {
}

DropTable::DropTable(const DropTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropTable::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropTable::~DropTable() {
  SharedDtor();
}

void DropTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropTable_descriptor_;
}

const DropTable& DropTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

DropTable* DropTable::default_instance_ = NULL;

DropTable* DropTable::New() const {
  return new DropTable;
}

void DropTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    min_ = 0;
    max_ = 0;
  }
  dropItems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dropItems;
        break;
      }
      
      // repeated .DropItem dropItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropItems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dropItems;
        if (input->ExpectTag(24)) goto parse_min;
        break;
      }
      
      // optional int32 min = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max;
        break;
      }
      
      // optional int32 max = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .DropItem dropItems = 2;
  for (int i = 0; i < this->dropItems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dropItems(i), output);
  }
  
  // optional int32 min = 3;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min(), output);
  }
  
  // optional int32 max = 4;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .DropItem dropItems = 2;
  for (int i = 0; i < this->dropItems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dropItems(i), target);
  }
  
  // optional int32 min = 3;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min(), target);
  }
  
  // optional int32 max = 4;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 min = 3;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }
    
    // optional int32 max = 4;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }
    
  }
  // repeated .DropItem dropItems = 2;
  total_size += 1 * this->dropItems_size();
  for (int i = 0; i < this->dropItems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dropItems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropTable::MergeFrom(const DropTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropItems_.MergeFrom(from.dropItems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropTable::CopyFrom(const DropTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTable::IsInitialized() const {
  
  return true;
}

void DropTable::Swap(DropTable* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    dropItems_.Swap(&other->dropItems_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropTable_descriptor_;
  metadata.reflection = DropTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllDropTables::kDropTablesFieldNumber;
#endif  // !_MSC_VER

AllDropTables::AllDropTables()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllDropTables::InitAsDefaultInstance() {
}

AllDropTables::AllDropTables(const AllDropTables& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllDropTables::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllDropTables::~AllDropTables() {
  SharedDtor();
}

void AllDropTables::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllDropTables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllDropTables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllDropTables_descriptor_;
}

const AllDropTables& AllDropTables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

AllDropTables* AllDropTables::default_instance_ = NULL;

AllDropTables* AllDropTables::New() const {
  return new AllDropTables;
}

void AllDropTables::Clear() {
  dropTables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllDropTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DropTable dropTables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropTables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropTables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dropTables;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllDropTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DropTable dropTables = 1;
  for (int i = 0; i < this->dropTables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dropTables(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllDropTables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DropTable dropTables = 1;
  for (int i = 0; i < this->dropTables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dropTables(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllDropTables::ByteSize() const {
  int total_size = 0;
  
  // repeated .DropTable dropTables = 1;
  total_size += 1 * this->dropTables_size();
  for (int i = 0; i < this->dropTables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dropTables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllDropTables::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllDropTables* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllDropTables*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllDropTables::MergeFrom(const AllDropTables& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropTables_.MergeFrom(from.dropTables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllDropTables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllDropTables::CopyFrom(const AllDropTables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllDropTables::IsInitialized() const {
  
  return true;
}

void AllDropTables::Swap(AllDropTables* other) {
  if (other != this) {
    dropTables_.Swap(&other->dropTables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllDropTables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllDropTables_descriptor_;
  metadata.reflection = AllDropTables_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeTable::kSourceGoodsFieldNumber;
const int ExchangeTable::kSourceCountFieldNumber;
const int ExchangeTable::kTargetTypeFieldNumber;
const int ExchangeTable::kArg1FieldNumber;
const int ExchangeTable::kArg2FieldNumber;
#endif  // !_MSC_VER

ExchangeTable::ExchangeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeTable::InitAsDefaultInstance() {
}

ExchangeTable::ExchangeTable(const ExchangeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeTable::SharedCtor() {
  _cached_size_ = 0;
  sourceGoods_ = 0;
  sourceCount_ = 0;
  targetType_ = 0;
  arg1_ = 0;
  arg2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeTable::~ExchangeTable() {
  SharedDtor();
}

void ExchangeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeTable_descriptor_;
}

const ExchangeTable& ExchangeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

ExchangeTable* ExchangeTable::default_instance_ = NULL;

ExchangeTable* ExchangeTable::New() const {
  return new ExchangeTable;
}

void ExchangeTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceGoods_ = 0;
    sourceCount_ = 0;
    targetType_ = 0;
    arg1_ = 0;
    arg2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sourceGoods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceGoods_)));
          set_has_sourceGoods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sourceCount;
        break;
      }
      
      // optional int32 sourceCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceCount_)));
          set_has_sourceCount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetType;
        break;
      }
      
      // optional .BoxInfo.Type targetType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BoxInfo_Type_IsValid(value)) {
            set_targetType(static_cast< ::BoxInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arg1;
        break;
      }
      
      // optional int32 arg1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg1_)));
          set_has_arg1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arg2;
        break;
      }
      
      // optional int32 arg2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg2_)));
          set_has_arg2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sourceGoods = 1;
  if (has_sourceGoods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sourceGoods(), output);
  }
  
  // optional int32 sourceCount = 2;
  if (has_sourceCount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sourceCount(), output);
  }
  
  // optional .BoxInfo.Type targetType = 3;
  if (has_targetType()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->targetType(), output);
  }
  
  // optional int32 arg1 = 4;
  if (has_arg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->arg1(), output);
  }
  
  // optional int32 arg2 = 5;
  if (has_arg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->arg2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sourceGoods = 1;
  if (has_sourceGoods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sourceGoods(), target);
  }
  
  // optional int32 sourceCount = 2;
  if (has_sourceCount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sourceCount(), target);
  }
  
  // optional .BoxInfo.Type targetType = 3;
  if (has_targetType()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->targetType(), target);
  }
  
  // optional int32 arg1 = 4;
  if (has_arg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->arg1(), target);
  }
  
  // optional int32 arg2 = 5;
  if (has_arg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->arg2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sourceGoods = 1;
    if (has_sourceGoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceGoods());
    }
    
    // optional int32 sourceCount = 2;
    if (has_sourceCount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceCount());
    }
    
    // optional .BoxInfo.Type targetType = 3;
    if (has_targetType()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->targetType());
    }
    
    // optional int32 arg1 = 4;
    if (has_arg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg1());
    }
    
    // optional int32 arg2 = 5;
    if (has_arg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeTable::MergeFrom(const ExchangeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceGoods()) {
      set_sourceGoods(from.sourceGoods());
    }
    if (from.has_sourceCount()) {
      set_sourceCount(from.sourceCount());
    }
    if (from.has_targetType()) {
      set_targetType(from.targetType());
    }
    if (from.has_arg1()) {
      set_arg1(from.arg1());
    }
    if (from.has_arg2()) {
      set_arg2(from.arg2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeTable::CopyFrom(const ExchangeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeTable::IsInitialized() const {
  
  return true;
}

void ExchangeTable::Swap(ExchangeTable* other) {
  if (other != this) {
    std::swap(sourceGoods_, other->sourceGoods_);
    std::swap(sourceCount_, other->sourceCount_);
    std::swap(targetType_, other->targetType_);
    std::swap(arg1_, other->arg1_);
    std::swap(arg2_, other->arg2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeTable_descriptor_;
  metadata.reflection = ExchangeTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllExchangeTable::kExchangeTableFieldNumber;
#endif  // !_MSC_VER

AllExchangeTable::AllExchangeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllExchangeTable::InitAsDefaultInstance() {
}

AllExchangeTable::AllExchangeTable(const AllExchangeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllExchangeTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllExchangeTable::~AllExchangeTable() {
  SharedDtor();
}

void AllExchangeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllExchangeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllExchangeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllExchangeTable_descriptor_;
}

const AllExchangeTable& AllExchangeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemInfo_2eproto();  return *default_instance_;
}

AllExchangeTable* AllExchangeTable::default_instance_ = NULL;

AllExchangeTable* AllExchangeTable::New() const {
  return new AllExchangeTable;
}

void AllExchangeTable::Clear() {
  exchangeTable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllExchangeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ExchangeTable exchangeTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchangeTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchangeTable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_exchangeTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllExchangeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ExchangeTable exchangeTable = 1;
  for (int i = 0; i < this->exchangeTable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exchangeTable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllExchangeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ExchangeTable exchangeTable = 1;
  for (int i = 0; i < this->exchangeTable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exchangeTable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllExchangeTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .ExchangeTable exchangeTable = 1;
  total_size += 1 * this->exchangeTable_size();
  for (int i = 0; i < this->exchangeTable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchangeTable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllExchangeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllExchangeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllExchangeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllExchangeTable::MergeFrom(const AllExchangeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchangeTable_.MergeFrom(from.exchangeTable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllExchangeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllExchangeTable::CopyFrom(const AllExchangeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllExchangeTable::IsInitialized() const {
  
  return true;
}

void AllExchangeTable::Swap(AllExchangeTable* other) {
  if (other != this) {
    exchangeTable_.Swap(&other->exchangeTable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllExchangeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllExchangeTable_descriptor_;
  metadata.reflection = AllExchangeTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
